
test_time_filter.elf:     file format elf32-littlenios2
test_time_filter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x00015098 memsz 0x00015098 flags r-x
    LOAD off    0x0001722c vaddr 0x0081522c paddr 0x00816d48 align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x00019864 vaddr 0x00818864 paddr 0x00818864 align 2**12
         filesz 0x00000000 memsz 0x00000264 flags rw-
    LOAD off    0x00019000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01080020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000147e0  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008b8  00814974  00814974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  0081522c  00816d48  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000264  00818864  00818864  00019864  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b2e  00000000  00000000  0001a240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000388e0  00000000  00000000  0001bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc49  00000000  00000000  0005464e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001e1d9  00000000  00000000  00060297  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023f0  00000000  00000000  0007e470  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030f7  00000000  00000000  00080860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012a3e  00000000  00000000  00083957  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00096398  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000963b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009acaf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009acb2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009acb5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009acb6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009acb7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009acbb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009acbf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009acc3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009accc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009acd5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0009acde  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0009acf0  2**0
                  CONTENTS, READONLY
 29 .jdi          00005577  00000000  00000000  0009ad1c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004599d  00000000  00000000  000a0293  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
00814974 l    d  .rodata	00000000 .rodata
0081522c l    d  .rwdata	00000000 .rwdata
00818864 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pgm.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 ctype_.c
00814df9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00802c48 l     F .text	00000058 std
00802d54 l     F .text	00000008 __fp_lock
00802d5c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00815250 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00804d64 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00804e50 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
008054b0 l     F .text	00000058 __sprint_r
00814ff2 l     O .rodata	00000010 blanks.3452
00814fe2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0081500a l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808d2c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00808f50 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816cd4 l     O .rwdata	00000004 charset
0081504c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00815194 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080c9fc l     F .text	00000048 match
00815a78 l     O .rwdata	00000014 fpi.1950
008151b0 l     O .rodata	00000028 tinytens
00815a64 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080ec30 l     F .text	00000024 htinit
0080ecbc l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080f568 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
008107f8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00811634 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00811c44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811ca4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811cd0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00811e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00811f2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081200c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081216c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00812268 l     F .text	000000f8 alt_file_locked
008124ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00812670 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816cf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00812898 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00812a1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815c34 l     O .rwdata	00001060 jtag_uart
00816c94 l     O .rwdata	00000028 altera_hostfs
00812b40 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00812d80 l     F .text	00000228 altera_avalon_jtag_uart_irq
00812fa8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813624 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
00816cf4 l     O .rwdata	00000004 hcinfo.2234
00816d00 l     O .rwdata	00000004 hcinfo.2276
00816d0c l     O .rwdata	00000004 hcinfo.2289
00816d18 l     O .rwdata	00000004 hcinfo.2311
00816d24 l     O .rwdata	00000004 hcinfo.2333
00816d30 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813ee8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814558 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
0080b448 g     F .text	00000094 _mprec_log10
0080b534 g     F .text	00000088 __any_on
0080ac84 g     F .text	00000070 _isatty_r
0081516c g     O .rodata	00000028 __mprec_tinytens
008121cc g     F .text	0000005c alt_main
00804aec g     F .text	000000a0 _puts_r
008189c8 g     O .bss	00000100 alt_irq
0080ade4 g     F .text	00000078 _lseek_r
00816d48 g       *ABS*	00000000 __flash_rwdata_start
0080a748 g     F .text	000000a0 __sflags
008110c0 g     F .text	00000088 __eqdf2
00818ac8 g       *ABS*	00000000 __alt_heap_start
00804a74 g     F .text	00000044 printf
00800c60 g     F .text	00000334 pgmwrite
00804f6c g     F .text	00000068 __sseek
00802cb0 g     F .text	000000a4 __sinit
0080ad44 g     F .text	00000084 _setlocale_r
00802db0 g     F .text	0000009c __sfmoreglue
00805494 g     F .text	0000001c ungetc
00812248 g     F .text	00000020 __malloc_unlock
00813724 g     F .text	00000154 alt_hostfs_open
0080ca44 g     F .text	000015cc _strtod_r
00818890 g     O .bss	00000004 altera_avalon_timer_ts_freq
0080af5c g     F .text	000000e0 memmove
00802da0 g     F .text	00000010 _cleanup
0080b5bc g     F .text	000000bc _Balloc
008111d0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01080000 g     F .entry	0000001c __reset
00812804 g     F .text	00000094 times
00800000 g       *ABS*	00000000 __flash_exceptions_start
00803c04 g     F .text	00000074 _fstat_r
00818864 g     O .bss	00000004 errno
00804dcc g     F .text	00000014 __srget
00808a78 g     F .text	00000024 __svfscanf
008118f0 g     F .text	0000002c __make_fp
00818884 g     O .bss	00000004 alt_argv
0081ecbc g       *ABS*	00000000 _gp
00803760 g     F .text	00000044 fscanf
00802c24 g     F .text	00000024 fgets
00815ab4 g     O .rwdata	00000180 alt_fd_list
00813a0c g     F .text	000000a0 alt_hostfs_seek
00813f48 g     F .text	00000094 alt_find_dev
008048c4 g     F .text	000000a0 memcpy
00805214 g     F .text	00000008 _times_r
0080f5b4 g     F .text	00000248 __hexnan
00802d94 g     F .text	0000000c _cleanup_r
008113f0 g     F .text	000000f8 __floatsidf
008140fc g     F .text	00000090 alt_fs_reg
00814630 g     F .text	00000078 alt_io_redirect
008112e0 g     F .text	00000088 __ltdf2
00804b8c g     F .text	00000014 puts
0080aedc g     F .text	00000040 mbrtowc
00808a9c g     F .text	00000068 _vfscanf_r
0080b398 g     F .text	000000b0 __ratio
008131c0 g     F .text	00000224 altera_avalon_jtag_uart_read
0080408c g     F .text	00000014 malloc
00804ab8 g     F .text	00000034 _printf_r
00811770 g     F .text	00000008 __udivsi3
00811e68 g     F .text	000000c4 isatty
0080acf4 g     F .text	0000002c iswspace
0081507c g     O .rodata	000000c8 __mprec_tens
0080ad20 g     F .text	00000008 __locale_charset
0080f920 g     F .text	000000a4 __fixunsdfsi
008006fc g     F .text	0000009c eatWhitespaces
0081486c g     F .text	00000090 alt_icache_flush
00818868 g     O .bss	00000004 __malloc_top_pad
0080e91c g     F .text	00000024 strtoul
00816cd0 g     O .rwdata	00000004 __mb_cur_max
0080ad28 g     F .text	0000000c _localeconv_r
0080e940 g     F .text	000002f0 _strtoull_r
0080bd20 g     F .text	0000003c __i2b
0080a7e8 g     F .text	0000049c __sfvwrite_r
00804de0 g     F .text	00000070 _sbrk_r
008138cc g     F .text	000000a0 alt_hostfs_read
0080c0c8 g     F .text	00000078 _read_r
00815a58 g     O .rwdata	0000000c __lc_ctype
00816ce8 g     O .rwdata	00000004 alt_max_fd
008023b8 g     F .text	00000138 __unpack_d
00802660 g     F .text	00000110 _fclose_r
00802980 g     F .text	00000034 fflush
0081886c g     O .bss	00000004 __malloc_max_sbrked_mem
00802a4c g     F .text	00000090 _fgetc_r
00810c88 g     F .text	00000074 __adddf3
00810690 g     F .text	00000078 __nesf2
0080b278 g     F .text	00000120 __b2d
00810030 g     F .text	00000660 __umoddi3
00812078 g     F .text	000000f4 lseek
00816cc4 g     O .rwdata	00000004 _global_impure_ptr
0080c140 g     F .text	000005f4 _realloc_r
00818ac8 g       *ABS*	00000000 __bss_end
00814460 g     F .text	000000f8 alt_iic_isr_register
00814740 g     F .text	0000010c alt_tick
008188c8 g     O .bss	00000100 __hexdig
0080f9c4 g     F .text	0000066c __udivdi3
00815144 g     O .rodata	00000028 __mprec_bigtens
0080bfa8 g     F .text	00000120 __s2b
00801e58 g     F .text	00000194 __floatunsidf
0080b198 g     F .text	00000060 __mcmp
00816cbc g     O .rwdata	00000004 __ctype_ptr
00802d7c g     F .text	00000018 __fp_lock_all
00814418 g     F .text	00000048 alt_ic_irq_enabled
008146a8 g     F .text	00000098 alt_alarm_stop
0080e3a0 g     F .text	00000024 strtol
00800654 g     F .text	000000a8 eatCommsWhitespaces
00818894 g     O .bss	00000004 alt_irq_active
00813878 g     F .text	00000054 alt_hostfs_close
01108000 g       *ABS*	00000000 __alt_mem_onchip_mem
010800ec g     F .exceptions	000000c8 alt_irq_handler
00815a8c g     O .rwdata	00000028 alt_dev_null
00811780 g     F .text	000000c8 __unpack_f
00813e18 g     F .text	0000001c alt_dcache_flush_all
0080b064 g     F .text	00000070 __hi0bits
008114e8 g     F .text	000000d8 __fixdfsi
008024f0 g     F .text	0000001c calloc
0080e134 g     F .text	0000001c strtod
00816d48 g       *ABS*	00000000 __ram_rwdata_end
00816ce0 g     O .rwdata	00000008 alt_dev_list
008128f8 g     F .text	00000124 write
00810708 g     F .text	00000078 __gtsf2
0081522c g       *ABS*	00000000 __ram_rodata_end
00811d30 g     F .text	000000d8 fstat
0080304c g     F .text	0000002c fprintf
00811368 g     F .text	00000088 __ledf2
0080be88 g     F .text	00000120 __pow5mult
00818874 g     O .bss	00000004 __nlocale_changed
00811778 g     F .text	00000008 __umodsi3
00818ac8 g       *ABS*	00000000 end
008119e4 g     F .text	00000160 __pack_f
00803be0 g     F .text	00000024 fseek
00812cc0 g     F .text	000000c0 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813694 g     F .text	00000090 alt_avalon_timer_sc_init
00802024 g     F .text	00000080 __clzsi2
008133e4 g     F .text	00000240 altera_avalon_jtag_uart_write
00802ca0 g     F .text	00000004 __sfp_lock_acquire
008047e0 g     F .text	000000e4 memchr
00805508 g     F .text	00001ec4 ___vfprintf_internal_r
0080c8e0 g     F .text	00000060 _sprintf_r
00803424 g     F .text	00000314 _free_r
00804d80 g     F .text	0000004c __srget_r
00808d30 g     F .text	000001b0 __call_exitprocs
00818878 g     O .bss	00000004 __mlocale_changed
00816ccc g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000003c _start
00818898 g     O .bss	00000004 _alt_tick_rate
0080e3c4 g     F .text	00000318 _strtoll_r
0080b980 g     F .text	0000014c __lshift
0081889c g     O .bss	00000004 _alt_nticks
0081254c g     F .text	00000124 read
00812ab0 g     F .text	00000090 alt_sys_init
008049fc g     F .text	00000078 _open_r
00805124 g     F .text	000000f0 strncmp
0080bacc g     F .text	00000254 __multiply
00813058 g     F .text	00000074 altera_avalon_jtag_uart_close
00801fec g     F .text	00000038 __mulsi3
0081522c g       *ABS*	00000000 __ram_rwdata_start
00814974 g       *ABS*	00000000 __ram_rodata_start
008188a0 g     O .bss	00000028 __malloc_current_mallinfo
0080b678 g     F .text	0000017c __d2b
00812b78 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080e6dc g     F .text	00000240 _strtoul_r
0081418c g     F .text	000000d0 alt_get_fd
0081191c g     F .text	000000c8 __fpcmp_parts_d
00808ee0 g     F .text	00000070 _close_r
008148fc g     F .text	00000074 memcmp
00812c28 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818ac8 g       *ABS*	00000000 __alt_stack_base
00812c70 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803df8 g     F .text	000000ac _fwrite_r
00804ee0 g     F .text	00000084 sscanf
00808bf0 g     F .text	0000013c __swsetup_r
00800590 g     F .text	000000c4 readToWhitespace
00801c00 g     F .text	00000258 __divdf3
00802e4c g     F .text	000000f0 __sfp
0080b4dc g     F .text	00000058 __copybits
00815650 g     O .rwdata	00000408 __malloc_av_
00802cac g     F .text	00000004 __sinit_lock_release
00810cfc g     F .text	000003c4 __muldf3
00805050 g     F .text	00000060 __sread
008032b8 g     F .text	00000040 fread
00813fdc g     F .text	00000120 alt_find_file
00813e34 g     F .text	000000b4 alt_dev_llist_insert
00812228 g     F .text	00000020 __malloc_lock
00803078 g     F .text	00000034 _fprintf_r
00812748 g     F .text	000000bc sbrk
00802784 g     F .text	000001fc _fflush_r
0080250c g     F .text	000000c8 _calloc_r
00803030 g     F .text	0000001c fopen
00818864 g       *ABS*	00000000 __bss_start
00803738 g     F .text	00000028 _fscanf_r
00804964 g     F .text	00000098 memset
0080053c g     F .text	00000054 main
00818888 g     O .bss	00000004 alt_envp
00818870 g     O .bss	00000004 __malloc_max_total_mem
00812bd0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00810780 g     F .text	00000078 __ltsf2
008030ac g     F .text	0000020c _fread_r
0080081c g     F .text	00000444 pgmread
00804f64 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802770 g     F .text	00000014 fclose
0080e150 g     F .text	00000250 _strtol_r
008115c0 g     F .text	00000074 __truncdfsf2
00809194 g     F .text	000015b4 _dtoa_r
008040a0 g     F .text	00000740 _malloc_r
00816cec g     O .rwdata	00000004 alt_errno
0080521c g     F .text	000000dc __submore
00803d40 g     F .text	000000b8 _fwalk
00802adc g     F .text	00000148 _fgets_r
0080af1c g     F .text	00000040 _mbtowc_r
008116b0 g     F .text	00000060 __divsi3
00814be4 g     O .rodata	00000014 __thenan_df
008032f8 g     F .text	0000012c _malloc_trim_r
0080c940 g     F .text	000000bc strcmp
00814974 g       *ABS*	00000000 __flash_rodata_start
00811148 g     F .text	00000088 __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00812a7c g     F .text	00000034 alt_irq_init
008126d0 g     F .text	00000078 alt_release_fd
008029b4 g     F .text	00000098 fgetc
0080c86c g     F .text	00000074 sprintf
00814bf8 g     O .rodata	00000100 __clz_tab
0081887c g     O .bss	00000004 _PathLocale
0081522c g     O .rwdata	00000024 kernel
0080e010 g     F .text	00000124 strtof
00808b78 g     F .text	00000078 _write_r
0080adc8 g     F .text	0000001c setlocale
0080c864 g     F .text	00000008 nanf
00816cc0 g     O .rwdata	00000004 _impure_ptr
00818880 g     O .bss	00000004 alt_argc
0080ae5c g     F .text	00000080 _mbrtowc_r
0081888c g     O .bss	00000004 altera_avalon_timer_ts_base
008037a4 g     F .text	0000043c _fseek_r
00804ba0 g     F .text	000001c4 __srefill_r
01080020 g       .exceptions	00000000 alt_irq_entry
0080b1f8 g     F .text	00000080 __ulp
0080c734 g     F .text	00000040 __isinfd
00802d64 g     F .text	00000018 __fp_unlock_all
00816cd8 g     O .rwdata	00000008 alt_fs_list
0081396c g     F .text	000000a0 alt_hostfs_write
01080020 g       *ABS*	00000000 __ram_exceptions_start
0080ad34 g     F .text	00000010 localeconv
0081428c g     F .text	00000050 alt_ic_isr_register
00803ea4 g     F .text	00000040 fwrite
0080ec54 g     F .text	00000068 __hexdig_init
00804e58 g     F .text	00000088 _sscanf_r
0080177c g     F .text	00000484 ppmwrite2
00816d48 g       *ABS*	00000000 _edata
00818ac8 g       *ABS*	00000000 _end
010801b4 g       *ABS*	00000000 __ram_exceptions_end
00808b04 g     F .text	00000074 vfscanf
008130cc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00814378 g     F .text	000000a0 alt_ic_irq_disable
00801428 g     F .text	00000354 pgmwrite2
00804fd4 g     F .text	0000007c __swrite
00816cc8 g     O .rwdata	00000004 __malloc_trim_threshold
0081484c g     F .text	00000020 altera_nios2_qsys_irq_init
00802628 g     F .text	00000038 exit
00803c78 g     F .text	000000c8 _fwalk_reent
0080b7f4 g     F .text	0000018c __mdiff
00811710 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
00802ca4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080c7a4 g     F .text	000000c0 __sccl
00814cf8 g     O .rodata	00000101 _ctype_
00811848 g     F .text	000000a8 __fpcmp_parts_f
00802f3c g     F .text	000000f4 _fopen_r
0080c774 g     F .text	00000030 __isnand
00811d10 g     F .text	00000020 _exit
00813cc4 g     F .text	00000154 alt_alarm_start
0080f7fc g     F .text	00000124 __muldi3
00803ee4 g     F .text	00000194 __smakebuf_r
008050b0 g     F .text	00000074 strlen
00812360 g     F .text	0000018c open
00811258 g     F .text	00000088 __gedf2
008001d0 g     F .text	0000036c gaussian_filter
0080ed6c g     F .text	000007fc __gethex
008025d4 g     F .text	00000054 clock
0081425c g     F .text	00000030 alt_icache_flush_all
00800798 g     F .text	00000084 eatComments
00816d3c g     O .rwdata	00000004 alt_priority_mask
008142dc g     F .text	0000009c alt_ic_irq_enable
008073cc g     F .text	00000024 __vfprintf_internal
00810c08 g     F .text	00000080 __subdf3
00800f94 g     F .text	00000494 pgmread2
0080b0d4 g     F .text	000000c4 __lo0bits
008073f0 g     F .text	00001688 __svfscanf_r
00816d40 g     O .rwdata	00000008 alt_alarm_list
008052f8 g     F .text	0000019c _ungetc_r
00811b44 g     F .text	00000100 close
00811f8c g     F .text	00000080 alt_load
008020a4 g     F .text	00000314 __pack_d
00804078 g     F .text	00000014 free
00802ca8 g     F .text	00000004 __sinit_lock_acquire
0080bd5c g     F .text	0000012c __multadd
0080b03c g     F .text	00000028 _Bfree
00813aac g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1080014:	08406514 	ori	at,at,404
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

01080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1080044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800ec0 	call	10800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000306 	br	1080098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800e8:	ef80083a 	eret

010800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800ec:	defff904 	addi	sp,sp,-28
 10800f0:	dfc00615 	stw	ra,24(sp)
 10800f4:	df000515 	stw	fp,20(sp)
 10800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10800fc:	0005313a 	rdctl	r2,ipending
 1080100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1080104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1080108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 108010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080110:	00800044 	movi	r2,1
 1080114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1080118:	e0ffff17 	ldw	r3,-4(fp)
 108011c:	e0bffe17 	ldw	r2,-8(fp)
 1080120:	1884703a 	and	r2,r3,r2
 1080124:	1005003a 	cmpeq	r2,r2,zero
 1080128:	1000161e 	bne	r2,zero,1080184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 108012c:	e0bffd17 	ldw	r2,-12(fp)
 1080130:	00c020b4 	movhi	r3,130
 1080134:	18e27204 	addi	r3,r3,-30264
 1080138:	100490fa 	slli	r2,r2,3
 108013c:	10c5883a 	add	r2,r2,r3
 1080140:	11400017 	ldw	r5,0(r2)
 1080144:	e0bffd17 	ldw	r2,-12(fp)
 1080148:	00c020b4 	movhi	r3,130
 108014c:	18e27204 	addi	r3,r3,-30264
 1080150:	100490fa 	slli	r2,r2,3
 1080154:	10c5883a 	add	r2,r2,r3
 1080158:	10800104 	addi	r2,r2,4
 108015c:	11000017 	ldw	r4,0(r2)
 1080160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080164:	0005313a 	rdctl	r2,ipending
 1080168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 108016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1080170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1080174:	e0bfff17 	ldw	r2,-4(fp)
 1080178:	1004c03a 	cmpne	r2,r2,zero
 108017c:	103fe31e 	bne	r2,zero,108010c <alt_irq_handler+0x20>
 1080180:	00000706 	br	10801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1080184:	e0bffe17 	ldw	r2,-8(fp)
 1080188:	1085883a 	add	r2,r2,r2
 108018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1080190:	e0bffd17 	ldw	r2,-12(fp)
 1080194:	10800044 	addi	r2,r2,1
 1080198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 108019c:	003fde06 	br	1080118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10801a0:	e037883a 	mov	sp,fp
 10801a4:	dfc00117 	ldw	ra,4(sp)
 10801a8:	df000017 	ldw	fp,0(sp)
 10801ac:	dec00204 	addi	sp,sp,8
 10801b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001a0:	d6bb2f14 	ori	gp,gp,60604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001a8:	10a21914 	ori	r2,r2,34916

    movhi r3, %hi(__bss_end)
  8001ac:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001b0:	18e2b214 	ori	r3,r3,35528

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x30>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	0811f8c0 	call	811f8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	08121cc0 	call	8121cc <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <gaussian_filter>:
// Kernel para el filtro Gaussiano que se utiliza para calcular el valor de cada pixel en la imagen filtrada
int kernel[3][3] = {{1, 2, 1},
					{2, 4, 2},
					{1, 2, 1}};

void gaussian_filter(char* input_image, char* output_image) {
  8001d0:	deffec04 	addi	sp,sp,-80
  8001d4:	dfc01315 	stw	ra,76(sp)
  8001d8:	df001215 	stw	fp,72(sp)
  8001dc:	dc001115 	stw	r16,68(sp)
  8001e0:	df001104 	addi	fp,sp,68
  8001e4:	e13ffc15 	stw	r4,-16(fp)
  8001e8:	e17ffd15 	stw	r5,-12(fp)
  int row, col;
  unsigned char** data = pgmread2(input_image, &row, &col);
  8001ec:	e17ffa04 	addi	r5,fp,-24
  8001f0:	e1bffb04 	addi	r6,fp,-20
  8001f4:	e13ffc17 	ldw	r4,-16(fp)
  8001f8:	0800f940 	call	800f94 <pgmread2>
  8001fc:	e0bff915 	stw	r2,-28(fp)
  if (!data) {
  800200:	e0bff917 	ldw	r2,-28(fp)
  800204:	1004c03a 	cmpne	r2,r2,zero
  800208:	1000041e 	bne	r2,zero,80021c <gaussian_filter+0x4c>
    printf("Error abriendo imagen\n");
  80020c:	01002074 	movhi	r4,129
  800210:	21125d04 	addi	r4,r4,18804
  800214:	0804b8c0 	call	804b8c <puts>
    return;
  800218:	0000c206 	br	800524 <gaussian_filter+0x354>
  }

  // Se reserva memoria para la imagen de salida
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  80021c:	e0bffa17 	ldw	r2,-24(fp)
  800220:	1085883a 	add	r2,r2,r2
  800224:	1085883a 	add	r2,r2,r2
  800228:	10bffe04 	addi	r2,r2,-8
  80022c:	1009883a 	mov	r4,r2
  800230:	080408c0 	call	80408c <malloc>
  800234:	e0bff815 	stw	r2,-32(fp)
  // Bucle que recorre la imagen y reserva memoria para cada fila de la imagen de salida
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  800238:	e03ff715 	stw	zero,-36(fp)
  80023c:	00000e06 	br	800278 <gaussian_filter+0xa8>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  800240:	e0bff717 	ldw	r2,-36(fp)
  800244:	1085883a 	add	r2,r2,r2
  800248:	1085883a 	add	r2,r2,r2
  80024c:	1007883a 	mov	r3,r2
  800250:	e0bff817 	ldw	r2,-32(fp)
  800254:	18a1883a 	add	r16,r3,r2
  800258:	e0bffb17 	ldw	r2,-20(fp)
  80025c:	10bfff84 	addi	r2,r2,-2
  800260:	1009883a 	mov	r4,r2
  800264:	080408c0 	call	80408c <malloc>
  800268:	80800015 	stw	r2,0(r16)

  // Se reserva memoria para la imagen de salida
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  // Bucle que recorre la imagen y reserva memoria para cada fila de la imagen de salida
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  80026c:	e0bff717 	ldw	r2,-36(fp)
  800270:	10800044 	addi	r2,r2,1
  800274:	e0bff715 	stw	r2,-36(fp)
  800278:	e0bffa17 	ldw	r2,-24(fp)
  80027c:	10ffff84 	addi	r3,r2,-2
  800280:	e0bff717 	ldw	r2,-36(fp)
  800284:	10ffee16 	blt	r2,r3,800240 <gaussian_filter+0x70>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  clock_t start = clock();
  800288:	08025d40 	call	8025d4 <clock>
  80028c:	e0bff315 	stw	r2,-52(fp)
  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  int sum = 0;
  800290:	e03ff215 	stw	zero,-56(fp)
  for (i = 1; i < row - 1; i++) {
  800294:	00800044 	movi	r2,1
  800298:	e0bff715 	stw	r2,-36(fp)
  80029c:	00005a06 	br	800408 <gaussian_filter+0x238>
    for (j = 1; j < col - 1; j++) {
  8002a0:	00800044 	movi	r2,1
  8002a4:	e0bff615 	stw	r2,-40(fp)
  8002a8:	00005006 	br	8003ec <gaussian_filter+0x21c>
      // Bucle para calcular la convolución entre el kernel y la imagen. Se suman los productos de los valores de los pixeles vecinos y los valores del kernel
      // Si el (1,1) es en la matriz original, en la nueva matriz sera la (0,0) y si es el (510,510) en la nueva matriz seria (509,509)
      // Se podria hacer restando y no una copia.
      for (k = -1; k <= 1; k++) {
  8002ac:	00bfffc4 	movi	r2,-1
  8002b0:	e0bff515 	stw	r2,-44(fp)
  8002b4:	00002f06 	br	800374 <gaussian_filter+0x1a4>
        for (l = -1; l <= 1; l++) {
  8002b8:	00bfffc4 	movi	r2,-1
  8002bc:	e0bff415 	stw	r2,-48(fp)
  8002c0:	00002606 	br	80035c <gaussian_filter+0x18c>
          sum += data[i + k][j + l] * kernel[k + 1][l + 1]; // Se multiplica el valor del pixel vecino por el valor del kernel y se suma al total
  8002c4:	e0fff717 	ldw	r3,-36(fp)
  8002c8:	e0bff517 	ldw	r2,-44(fp)
  8002cc:	1885883a 	add	r2,r3,r2
  8002d0:	1085883a 	add	r2,r2,r2
  8002d4:	1085883a 	add	r2,r2,r2
  8002d8:	1007883a 	mov	r3,r2
  8002dc:	e0bff917 	ldw	r2,-28(fp)
  8002e0:	1885883a 	add	r2,r3,r2
  8002e4:	11000017 	ldw	r4,0(r2)
  8002e8:	e0fff617 	ldw	r3,-40(fp)
  8002ec:	e0bff417 	ldw	r2,-48(fp)
  8002f0:	1885883a 	add	r2,r3,r2
  8002f4:	2085883a 	add	r2,r4,r2
  8002f8:	10800003 	ldbu	r2,0(r2)
  8002fc:	11803fcc 	andi	r6,r2,255
  800300:	e0bff517 	ldw	r2,-44(fp)
  800304:	10c00044 	addi	r3,r2,1
  800308:	e0bff417 	ldw	r2,-48(fp)
  80030c:	11000044 	addi	r4,r2,1
  800310:	01402074 	movhi	r5,129
  800314:	29548b04 	addi	r5,r5,21036
  800318:	1805883a 	mov	r2,r3
  80031c:	1085883a 	add	r2,r2,r2
  800320:	10c5883a 	add	r2,r2,r3
  800324:	1105883a 	add	r2,r2,r4
  800328:	1085883a 	add	r2,r2,r2
  80032c:	1085883a 	add	r2,r2,r2
  800330:	1145883a 	add	r2,r2,r5
  800334:	11400017 	ldw	r5,0(r2)
  800338:	3009883a 	mov	r4,r6
  80033c:	0801fec0 	call	801fec <__mulsi3>
  800340:	1007883a 	mov	r3,r2
  800344:	e0bff217 	ldw	r2,-56(fp)
  800348:	10c5883a 	add	r2,r2,r3
  80034c:	e0bff215 	stw	r2,-56(fp)
    for (j = 1; j < col - 1; j++) {
      // Bucle para calcular la convolución entre el kernel y la imagen. Se suman los productos de los valores de los pixeles vecinos y los valores del kernel
      // Si el (1,1) es en la matriz original, en la nueva matriz sera la (0,0) y si es el (510,510) en la nueva matriz seria (509,509)
      // Se podria hacer restando y no una copia.
      for (k = -1; k <= 1; k++) {
        for (l = -1; l <= 1; l++) {
  800350:	e0bff417 	ldw	r2,-48(fp)
  800354:	10800044 	addi	r2,r2,1
  800358:	e0bff415 	stw	r2,-48(fp)
  80035c:	e0bff417 	ldw	r2,-48(fp)
  800360:	10800090 	cmplti	r2,r2,2
  800364:	103fd71e 	bne	r2,zero,8002c4 <gaussian_filter+0xf4>
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
      // Bucle para calcular la convolución entre el kernel y la imagen. Se suman los productos de los valores de los pixeles vecinos y los valores del kernel
      // Si el (1,1) es en la matriz original, en la nueva matriz sera la (0,0) y si es el (510,510) en la nueva matriz seria (509,509)
      // Se podria hacer restando y no una copia.
      for (k = -1; k <= 1; k++) {
  800368:	e0bff517 	ldw	r2,-44(fp)
  80036c:	10800044 	addi	r2,r2,1
  800370:	e0bff515 	stw	r2,-44(fp)
  800374:	e0bff517 	ldw	r2,-44(fp)
  800378:	10800090 	cmplti	r2,r2,2
  80037c:	103fce1e 	bne	r2,zero,8002b8 <gaussian_filter+0xe8>
        for (l = -1; l <= 1; l++) {
          sum += data[i + k][j + l] * kernel[k + 1][l + 1]; // Se multiplica el valor del pixel vecino por el valor del kernel y se suma al total
        }
      }
      // Tendria que devolverlo a una copia y no al output[i][j] o restarle los indices para la nueva matriz. La nueva imagen tendria que ser de menor tamaño quitando la primera y ultima fila; y la primera y ultima columna, osea 510x510
      output[i - 1][j - 1] = sum / 16; // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
  800380:	e0bff717 	ldw	r2,-36(fp)
  800384:	1085883a 	add	r2,r2,r2
  800388:	1085883a 	add	r2,r2,r2
  80038c:	1007883a 	mov	r3,r2
  800390:	e0bff817 	ldw	r2,-32(fp)
  800394:	1885883a 	add	r2,r3,r2
  800398:	10bfff04 	addi	r2,r2,-4
  80039c:	10c00017 	ldw	r3,0(r2)
  8003a0:	e0bff617 	ldw	r2,-40(fp)
  8003a4:	1885883a 	add	r2,r3,r2
  8003a8:	10bfffc4 	addi	r2,r2,-1
  8003ac:	e0bffe15 	stw	r2,-8(fp)
  8003b0:	e0bff217 	ldw	r2,-56(fp)
  8003b4:	e0bfff15 	stw	r2,-4(fp)
  8003b8:	e0ffff17 	ldw	r3,-4(fp)
  8003bc:	1804403a 	cmpge	r2,r3,zero
  8003c0:	1000031e 	bne	r2,zero,8003d0 <gaussian_filter+0x200>
  8003c4:	e0bfff17 	ldw	r2,-4(fp)
  8003c8:	108003c4 	addi	r2,r2,15
  8003cc:	e0bfff15 	stw	r2,-4(fp)
  8003d0:	e0ffff17 	ldw	r3,-4(fp)
  8003d4:	1805d13a 	srai	r2,r3,4
  8003d8:	e0fffe17 	ldw	r3,-8(fp)
  8003dc:	18800005 	stb	r2,0(r3)

  clock_t start = clock();
  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  int sum = 0;
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
  8003e0:	e0bff617 	ldw	r2,-40(fp)
  8003e4:	10800044 	addi	r2,r2,1
  8003e8:	e0bff615 	stw	r2,-40(fp)
  8003ec:	e0bffb17 	ldw	r2,-20(fp)
  8003f0:	10ffffc4 	addi	r3,r2,-1
  8003f4:	e0bff617 	ldw	r2,-40(fp)
  8003f8:	10ffac16 	blt	r2,r3,8002ac <gaussian_filter+0xdc>
  }

  clock_t start = clock();
  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  int sum = 0;
  for (i = 1; i < row - 1; i++) {
  8003fc:	e0bff717 	ldw	r2,-36(fp)
  800400:	10800044 	addi	r2,r2,1
  800404:	e0bff715 	stw	r2,-36(fp)
  800408:	e0bffa17 	ldw	r2,-24(fp)
  80040c:	10ffffc4 	addi	r3,r2,-1
  800410:	e0bff717 	ldw	r2,-36(fp)
  800414:	10ffa216 	blt	r2,r3,8002a0 <gaussian_filter+0xd0>
      }
      // Tendria que devolverlo a una copia y no al output[i][j] o restarle los indices para la nueva matriz. La nueva imagen tendria que ser de menor tamaño quitando la primera y ultima fila; y la primera y ultima columna, osea 510x510
      output[i - 1][j - 1] = sum / 16; // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
    }
  }
  clock_t end = clock();
  800418:	08025d40 	call	8025d4 <clock>
  80041c:	e0bff115 	stw	r2,-60(fp)

  printf("Tiempo de ejecución: %f\n", (double)(end - start) / CLOCKS_PER_SEC);
  800420:	e0fff117 	ldw	r3,-60(fp)
  800424:	e0bff317 	ldw	r2,-52(fp)
  800428:	1889c83a 	sub	r4,r3,r2
  80042c:	0801e580 	call	801e58 <__floatunsidf>
  800430:	100b883a 	mov	r5,r2
  800434:	180d883a 	mov	r6,r3
  800438:	2809883a 	mov	r4,r5
  80043c:	300b883a 	mov	r5,r6
  800440:	000d883a 	mov	r6,zero
  800444:	01d023f4 	movhi	r7,16527
  800448:	39d00004 	addi	r7,r7,16384
  80044c:	0801c000 	call	801c00 <__divdf3>
  800450:	1009883a 	mov	r4,r2
  800454:	180b883a 	mov	r5,r3
  800458:	2005883a 	mov	r2,r4
  80045c:	2807883a 	mov	r3,r5
  800460:	01002074 	movhi	r4,129
  800464:	21126304 	addi	r4,r4,18828
  800468:	100b883a 	mov	r5,r2
  80046c:	180d883a 	mov	r6,r3
  800470:	0804a740 	call	804a74 <printf>
  printf("Guardando imagen...\n");
  800474:	01002074 	movhi	r4,129
  800478:	21126a04 	addi	r4,r4,18856
  80047c:	0804b8c0 	call	804b8c <puts>
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  800480:	e0bffa17 	ldw	r2,-24(fp)
  800484:	117fff84 	addi	r5,r2,-2
  800488:	e0bffb17 	ldw	r2,-20(fp)
  80048c:	11bfff84 	addi	r6,r2,-2
  800490:	00802074 	movhi	r2,129
  800494:	10926f04 	addi	r2,r2,18876
  800498:	d8800015 	stw	r2,0(sp)
  80049c:	00800044 	movi	r2,1
  8004a0:	d8800115 	stw	r2,4(sp)
  8004a4:	e13ffd17 	ldw	r4,-12(fp)
  8004a8:	e1fff817 	ldw	r7,-32(fp)
  8004ac:	08014280 	call	801428 <pgmwrite2>
  for (i = 0; i < row - 2; i++) {
  8004b0:	e03ff715 	stw	zero,-36(fp)
  8004b4:	00001306 	br	800504 <gaussian_filter+0x334>
    free(data[i]);
  8004b8:	e0bff717 	ldw	r2,-36(fp)
  8004bc:	1085883a 	add	r2,r2,r2
  8004c0:	1085883a 	add	r2,r2,r2
  8004c4:	1007883a 	mov	r3,r2
  8004c8:	e0bff917 	ldw	r2,-28(fp)
  8004cc:	1885883a 	add	r2,r3,r2
  8004d0:	11000017 	ldw	r4,0(r2)
  8004d4:	08040780 	call	804078 <free>
    free(output[i]);
  8004d8:	e0bff717 	ldw	r2,-36(fp)
  8004dc:	1085883a 	add	r2,r2,r2
  8004e0:	1085883a 	add	r2,r2,r2
  8004e4:	1007883a 	mov	r3,r2
  8004e8:	e0bff817 	ldw	r2,-32(fp)
  8004ec:	1885883a 	add	r2,r3,r2
  8004f0:	11000017 	ldw	r4,0(r2)
  8004f4:	08040780 	call	804078 <free>
  clock_t end = clock();

  printf("Tiempo de ejecución: %f\n", (double)(end - start) / CLOCKS_PER_SEC);
  printf("Guardando imagen...\n");
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  for (i = 0; i < row - 2; i++) {
  8004f8:	e0bff717 	ldw	r2,-36(fp)
  8004fc:	10800044 	addi	r2,r2,1
  800500:	e0bff715 	stw	r2,-36(fp)
  800504:	e0bffa17 	ldw	r2,-24(fp)
  800508:	10ffff84 	addi	r3,r2,-2
  80050c:	e0bff717 	ldw	r2,-36(fp)
  800510:	10ffe916 	blt	r2,r3,8004b8 <gaussian_filter+0x2e8>
    free(data[i]);
    free(output[i]);
  }
  free(data);
  800514:	e13ff917 	ldw	r4,-28(fp)
  800518:	08040780 	call	804078 <free>
  free(output);
  80051c:	e13ff817 	ldw	r4,-32(fp)
  800520:	08040780 	call	804078 <free>
}
  800524:	e037883a 	mov	sp,fp
  800528:	dfc00217 	ldw	ra,8(sp)
  80052c:	df000117 	ldw	fp,4(sp)
  800530:	dc000017 	ldw	r16,0(sp)
  800534:	dec00304 	addi	sp,sp,12
  800538:	f800283a 	ret

0080053c <main>:

int main() {
  80053c:	defffe04 	addi	sp,sp,-8
  800540:	dfc00115 	stw	ra,4(sp)
  800544:	df000015 	stw	fp,0(sp)
  800548:	d839883a 	mov	fp,sp
  printf("Aplicando filtro Gaussiano...\n");
  80054c:	01002074 	movhi	r4,129
  800550:	21127604 	addi	r4,r4,18904
  800554:	0804b8c0 	call	804b8c <puts>
  gaussian_filter(INPUT_FILE, OUTPUT_FILE);
  800558:	01002074 	movhi	r4,129
  80055c:	21127e04 	addi	r4,r4,18936
  800560:	01402074 	movhi	r5,129
  800564:	29528404 	addi	r5,r5,18960
  800568:	08001d00 	call	8001d0 <gaussian_filter>
  printf("Terminado...\n");
  80056c:	01002074 	movhi	r4,129
  800570:	21128c04 	addi	r4,r4,18992
  800574:	0804b8c0 	call	804b8c <puts>
  return 0;
  800578:	0005883a 	mov	r2,zero
}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <readToWhitespace>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in column dominant format
 */
int readToWhitespace(FILE* file, char* cadena, int maxchars) {
  800590:	defff804 	addi	sp,sp,-32
  800594:	dfc00715 	stw	ra,28(sp)
  800598:	df000615 	stw	fp,24(sp)
  80059c:	df000604 	addi	fp,sp,24
  8005a0:	e13ffd15 	stw	r4,-12(fp)
  8005a4:	e17ffe15 	stw	r5,-8(fp)
  8005a8:	e1bfff15 	stw	r6,-4(fp)
  int c;
  int numread = 0;
  8005ac:	e03ffb15 	stw	zero,-20(fp)
  char* ptchar = cadena;
  8005b0:	e0bffe17 	ldw	r2,-8(fp)
  8005b4:	e0bffa15 	stw	r2,-24(fp)
  do {
    c = fgetc(file);
  8005b8:	e13ffd17 	ldw	r4,-12(fp)
  8005bc:	08029b40 	call	8029b4 <fgetc>
  8005c0:	e0bffc15 	stw	r2,-16(fp)
    // printf("L:%c\n", c);
    if (c == EOF) break;
  8005c4:	e0bffc17 	ldw	r2,-16(fp)
  8005c8:	10bfffe0 	cmpeqi	r2,r2,-1
  8005cc:	10001b1e 	bne	r2,zero,80063c <readToWhitespace+0xac>
    if (isspace(c)) {  // Devuelve el espacio leido al stream y sale
  8005d0:	00802074 	movhi	r2,129
  8005d4:	109b2f04 	addi	r2,r2,27836
  8005d8:	10c00017 	ldw	r3,0(r2)
  8005dc:	e0bffc17 	ldw	r2,-16(fp)
  8005e0:	1885883a 	add	r2,r3,r2
  8005e4:	10800003 	ldbu	r2,0(r2)
  8005e8:	10803fcc 	andi	r2,r2,255
  8005ec:	1080020c 	andi	r2,r2,8
  8005f0:	1005003a 	cmpeq	r2,r2,zero
  8005f4:	1000041e 	bne	r2,zero,800608 <readToWhitespace+0x78>
      ungetc(c, file);
  8005f8:	e13ffc17 	ldw	r4,-16(fp)
  8005fc:	e17ffd17 	ldw	r5,-12(fp)
  800600:	08054940 	call	805494 <ungetc>
      break;
  800604:	00000d06 	br	80063c <readToWhitespace+0xac>
    }
    /* un caracter valido */
    *ptchar++ = (unsigned char)c;
  800608:	e0bffc17 	ldw	r2,-16(fp)
  80060c:	1007883a 	mov	r3,r2
  800610:	e0bffa17 	ldw	r2,-24(fp)
  800614:	10c00005 	stb	r3,0(r2)
  800618:	e0bffa17 	ldw	r2,-24(fp)
  80061c:	10800044 	addi	r2,r2,1
  800620:	e0bffa15 	stw	r2,-24(fp)
    numread++;
  800624:	e0bffb17 	ldw	r2,-20(fp)
  800628:	10800044 	addi	r2,r2,1
  80062c:	e0bffb15 	stw	r2,-20(fp)
  } while (numread <= maxchars);
  800630:	e0fffb17 	ldw	r3,-20(fp)
  800634:	e0bfff17 	ldw	r2,-4(fp)
  800638:	10ffdf0e 	bge	r2,r3,8005b8 <readToWhitespace+0x28>
  return numread;
  80063c:	e0bffb17 	ldw	r2,-20(fp)
}
  800640:	e037883a 	mov	sp,fp
  800644:	dfc00117 	ldw	ra,4(sp)
  800648:	df000017 	ldw	fp,0(sp)
  80064c:	dec00204 	addi	sp,sp,8
  800650:	f800283a 	ret

00800654 <eatCommsWhitespaces>:

void eatCommsWhitespaces(FILE* file) {
  800654:	defffb04 	addi	sp,sp,-20
  800658:	dfc00415 	stw	ra,16(sp)
  80065c:	df000315 	stw	fp,12(sp)
  800660:	df000304 	addi	fp,sp,12
  800664:	e13fff15 	stw	r4,-4(fp)
  int c, cc;
  do {
    c = fgetc(file);
  800668:	e13fff17 	ldw	r4,-4(fp)
  80066c:	08029b40 	call	8029b4 <fgetc>
  800670:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  800674:	e0bffe17 	ldw	r2,-8(fp)
  800678:	10bfffe0 	cmpeqi	r2,r2,-1
  80067c:	10001a1e 	bne	r2,zero,8006e8 <eatCommsWhitespaces+0x94>
    if (c == '#') {  // Procesar comentario
  800680:	e0bffe17 	ldw	r2,-8(fp)
  800684:	108008d8 	cmpnei	r2,r2,35
  800688:	10000a1e 	bne	r2,zero,8006b4 <eatCommsWhitespaces+0x60>
      do {
        cc = fgetc(file);
  80068c:	e13fff17 	ldw	r4,-4(fp)
  800690:	08029b40 	call	8029b4 <fgetc>
  800694:	e0bffd15 	stw	r2,-12(fp)
        if (cc == EOF) return;
  800698:	e0bffd17 	ldw	r2,-12(fp)
  80069c:	10bfffe0 	cmpeqi	r2,r2,-1
  8006a0:	1000111e 	bne	r2,zero,8006e8 <eatCommsWhitespaces+0x94>
      } while (cc != '\n');  // Se asume que no se abre en modo binario (Windows
  8006a4:	e0bffd17 	ldw	r2,-12(fp)
  8006a8:	10800298 	cmpnei	r2,r2,10
  8006ac:	103ff71e 	bne	r2,zero,80068c <eatCommsWhitespaces+0x38>
                             // compatible)
      break;
  8006b0:	00000d06 	br	8006e8 <eatCommsWhitespaces+0x94>
    }
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  8006b4:	00802074 	movhi	r2,129
  8006b8:	109b2f04 	addi	r2,r2,27836
  8006bc:	10c00017 	ldw	r3,0(r2)
  8006c0:	e0bffe17 	ldw	r2,-8(fp)
  8006c4:	1885883a 	add	r2,r3,r2
  8006c8:	10800003 	ldbu	r2,0(r2)
  8006cc:	10803fcc 	andi	r2,r2,255
  8006d0:	1080020c 	andi	r2,r2,8
  8006d4:	1004c03a 	cmpne	r2,r2,zero
  8006d8:	103fe31e 	bne	r2,zero,800668 <eatCommsWhitespaces+0x14>
      ungetc(c, file);
  8006dc:	e13ffe17 	ldw	r4,-8(fp)
  8006e0:	e17fff17 	ldw	r5,-4(fp)
  8006e4:	08054940 	call	805494 <ungetc>
      return;
    }
  } while (1);
}
  8006e8:	e037883a 	mov	sp,fp
  8006ec:	dfc00117 	ldw	ra,4(sp)
  8006f0:	df000017 	ldw	fp,0(sp)
  8006f4:	dec00204 	addi	sp,sp,8
  8006f8:	f800283a 	ret

008006fc <eatWhitespaces>:

int eatWhitespaces(FILE* file, int maxchars) {
  8006fc:	defffa04 	addi	sp,sp,-24
  800700:	dfc00515 	stw	ra,20(sp)
  800704:	df000415 	stw	fp,16(sp)
  800708:	df000404 	addi	fp,sp,16
  80070c:	e13ffe15 	stw	r4,-8(fp)
  800710:	e17fff15 	stw	r5,-4(fp)
  int c;
  int numread = 0;
  800714:	e03ffc15 	stw	zero,-16(fp)
  do {
    c = fgetc(file);
  800718:	e13ffe17 	ldw	r4,-8(fp)
  80071c:	08029b40 	call	8029b4 <fgetc>
  800720:	e0bffd15 	stw	r2,-12(fp)
    if (c == EOF) break;
  800724:	e0bffd17 	ldw	r2,-12(fp)
  800728:	10bfffe0 	cmpeqi	r2,r2,-1
  80072c:	1000141e 	bne	r2,zero,800780 <eatWhitespaces+0x84>
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  800730:	00802074 	movhi	r2,129
  800734:	109b2f04 	addi	r2,r2,27836
  800738:	10c00017 	ldw	r3,0(r2)
  80073c:	e0bffd17 	ldw	r2,-12(fp)
  800740:	1885883a 	add	r2,r3,r2
  800744:	10800003 	ldbu	r2,0(r2)
  800748:	10803fcc 	andi	r2,r2,255
  80074c:	1080020c 	andi	r2,r2,8
  800750:	1004c03a 	cmpne	r2,r2,zero
  800754:	1000041e 	bne	r2,zero,800768 <eatWhitespaces+0x6c>
      ungetc(c, file);
  800758:	e13ffd17 	ldw	r4,-12(fp)
  80075c:	e17ffe17 	ldw	r5,-8(fp)
  800760:	08054940 	call	805494 <ungetc>
      break;
  800764:	00000606 	br	800780 <eatWhitespaces+0x84>
    }
    numread++;
  800768:	e0bffc17 	ldw	r2,-16(fp)
  80076c:	10800044 	addi	r2,r2,1
  800770:	e0bffc15 	stw	r2,-16(fp)
  } while (numread <= maxchars);
  800774:	e0fffc17 	ldw	r3,-16(fp)
  800778:	e0bfff17 	ldw	r2,-4(fp)
  80077c:	10ffe60e 	bge	r2,r3,800718 <eatWhitespaces+0x1c>
  return numread;
  800780:	e0bffc17 	ldw	r2,-16(fp)
}
  800784:	e037883a 	mov	sp,fp
  800788:	dfc00117 	ldw	ra,4(sp)
  80078c:	df000017 	ldw	fp,0(sp)
  800790:	dec00204 	addi	sp,sp,8
  800794:	f800283a 	ret

00800798 <eatComments>:

void eatComments(FILE* file) {
  800798:	defffc04 	addi	sp,sp,-16
  80079c:	dfc00315 	stw	ra,12(sp)
  8007a0:	df000215 	stw	fp,8(sp)
  8007a4:	df000204 	addi	fp,sp,8
  8007a8:	e13fff15 	stw	r4,-4(fp)
  int c;
  do {  // Procesa cada comentario
    c = fgetc(file);
  8007ac:	e13fff17 	ldw	r4,-4(fp)
  8007b0:	08029b40 	call	8029b4 <fgetc>
  8007b4:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  8007b8:	e0bffe17 	ldw	r2,-8(fp)
  8007bc:	10bfffe0 	cmpeqi	r2,r2,-1
  8007c0:	1000111e 	bne	r2,zero,800808 <eatComments+0x70>
    if (c != '#') {
  8007c4:	e0bffe17 	ldw	r2,-8(fp)
  8007c8:	108008e0 	cmpeqi	r2,r2,35
  8007cc:	1000041e 	bne	r2,zero,8007e0 <eatComments+0x48>
      ungetc(c, file);
  8007d0:	e13ffe17 	ldw	r4,-8(fp)
  8007d4:	e17fff17 	ldw	r5,-4(fp)
  8007d8:	08054940 	call	805494 <ungetc>
      return;
  8007dc:	00000a06 	br	800808 <eatComments+0x70>
    }  // Procesa el resto del comentario hasta fin de linea
    do {
      c = fgetc(file);
  8007e0:	e13fff17 	ldw	r4,-4(fp)
  8007e4:	08029b40 	call	8029b4 <fgetc>
  8007e8:	e0bffe15 	stw	r2,-8(fp)
      if (c == EOF) return;
  8007ec:	e0bffe17 	ldw	r2,-8(fp)
  8007f0:	10bfffe0 	cmpeqi	r2,r2,-1
  8007f4:	1000041e 	bne	r2,zero,800808 <eatComments+0x70>
    } while (
        c !=
        '\n');  // Se asume que no se abre en modo binario (Windows compatible)
  8007f8:	e0bffe17 	ldw	r2,-8(fp)
  8007fc:	10800298 	cmpnei	r2,r2,10
  800800:	103ff71e 	bne	r2,zero,8007e0 <eatComments+0x48>
  } while (1);
  800804:	003fe906 	br	8007ac <eatComments+0x14>
  return;
}
  800808:	e037883a 	mov	sp,fp
  80080c:	dfc00117 	ldw	ra,4(sp)
  800810:	df000017 	ldw	fp,0(sp)
  800814:	dec00204 	addi	sp,sp,8
  800818:	f800283a 	ret

0080081c <pgmread>:

unsigned char** pgmread(char* filename, int* w, int* h) {
  80081c:	deffb004 	addi	sp,sp,-320
  800820:	dfc04f15 	stw	ra,316(sp)
  800824:	df004e15 	stw	fp,312(sp)
  800828:	dc004d15 	stw	r16,308(sp)
  80082c:	df004d04 	addi	fp,sp,308
  800830:	e13ffc15 	stw	r4,-16(fp)
  800834:	e17ffd15 	stw	r5,-12(fp)
  800838:	e1bffe15 	stw	r6,-8(fp)
  int nread;
  int i, j, int_tmp;

  unsigned char** data;
  unsigned char* bindata;
  printf("Debug: Opening image:\n");
  80083c:	01002074 	movhi	r4,129
  800840:	21129004 	addi	r4,r4,19008
  800844:	0804b8c0 	call	804b8c <puts>
  if ((file = fopen(filename, "r")) == NULL) {
  800848:	e13ffc17 	ldw	r4,-16(fp)
  80084c:	01402074 	movhi	r5,129
  800850:	29529604 	addi	r5,r5,19032
  800854:	08030300 	call	803030 <fopen>
  800858:	e0bfb915 	stw	r2,-284(fp)
  80085c:	e0bfb917 	ldw	r2,-284(fp)
  800860:	1004c03a 	cmpne	r2,r2,zero
  800864:	10000b1e 	bne	r2,zero,800894 <pgmread+0x78>
    printf("ERROR: file open failed\n");
  800868:	01002074 	movhi	r4,129
  80086c:	21129704 	addi	r4,r4,19036
  800870:	0804b8c0 	call	804b8c <puts>
    *h = *w = 0;
  800874:	e0bffd17 	ldw	r2,-12(fp)
  800878:	10000015 	stw	zero,0(r2)
  80087c:	e0bffd17 	ldw	r2,-12(fp)
  800880:	10c00017 	ldw	r3,0(r2)
  800884:	e0bffe17 	ldw	r2,-8(fp)
  800888:	10c00015 	stw	r3,0(r2)
    return (NULL);
  80088c:	e03fff15 	stw	zero,-4(fp)
  800890:	0000ec06 	br	800c44 <pgmread+0x428>
  } else {
    printf("Debug: Image opened successfully!\n");
  800894:	01002074 	movhi	r4,129
  800898:	21129d04 	addi	r4,r4,19060
  80089c:	0804b8c0 	call	804b8c <puts>
  }
  fgets(line, 256, file);
  8008a0:	e13fba04 	addi	r4,fp,-280
  8008a4:	01404004 	movi	r5,256
  8008a8:	e1bfb917 	ldw	r6,-284(fp)
  8008ac:	0802c240 	call	802c24 <fgets>
  if (strncmp(line, "P5", 2)) {
  8008b0:	e13fba04 	addi	r4,fp,-280
  8008b4:	01402074 	movhi	r5,129
  8008b8:	2952a604 	addi	r5,r5,19096
  8008bc:	01800084 	movi	r6,2
  8008c0:	08051240 	call	805124 <strncmp>
  8008c4:	1005003a 	cmpeq	r2,r2,zero
  8008c8:	1000141e 	bne	r2,zero,80091c <pgmread+0x100>
    if (strncmp(line, "P2", 2)) {
  8008cc:	e13fba04 	addi	r4,fp,-280
  8008d0:	01402074 	movhi	r5,129
  8008d4:	2952a704 	addi	r5,r5,19100
  8008d8:	01800084 	movi	r6,2
  8008dc:	08051240 	call	805124 <strncmp>
  8008e0:	1005003a 	cmpeq	r2,r2,zero
  8008e4:	10000b1e 	bne	r2,zero,800914 <pgmread+0xf8>
      printf("pgm read: not a pgm file\n");
  8008e8:	01002074 	movhi	r4,129
  8008ec:	2112a804 	addi	r4,r4,19104
  8008f0:	0804b8c0 	call	804b8c <puts>
      *h = *w = 0;
  8008f4:	e0bffd17 	ldw	r2,-12(fp)
  8008f8:	10000015 	stw	zero,0(r2)
  8008fc:	e0bffd17 	ldw	r2,-12(fp)
  800900:	10c00017 	ldw	r3,0(r2)
  800904:	e0bffe17 	ldw	r2,-8(fp)
  800908:	10c00015 	stw	r3,0(r2)
      return (NULL);
  80090c:	e03fff15 	stw	zero,-4(fp)
  800910:	0000cc06 	br	800c44 <pgmread+0x428>
    } else
      binary = 0;
  800914:	e03fb815 	stw	zero,-288(fp)
  800918:	00000206 	br	800924 <pgmread+0x108>
  } else
    binary = 1;
  80091c:	00800044 	movi	r2,1
  800920:	e0bfb815 	stw	r2,-288(fp)

  fgets(line, 256, file);
  800924:	e13fba04 	addi	r4,fp,-280
  800928:	01404004 	movi	r5,256
  80092c:	e1bfb917 	ldw	r6,-284(fp)
  800930:	0802c240 	call	802c24 <fgets>
  while (line[0] == '#') fgets(line, 256, file);
  800934:	00000406 	br	800948 <pgmread+0x12c>
  800938:	e13fba04 	addi	r4,fp,-280
  80093c:	01404004 	movi	r5,256
  800940:	e1bfb917 	ldw	r6,-284(fp)
  800944:	0802c240 	call	802c24 <fgets>
  800948:	e0bfba03 	ldbu	r2,-280(fp)
  80094c:	10803fcc 	andi	r2,r2,255
  800950:	1080201c 	xori	r2,r2,128
  800954:	10bfe004 	addi	r2,r2,-128
  800958:	108008e0 	cmpeqi	r2,r2,35
  80095c:	103ff61e 	bne	r2,zero,800938 <pgmread+0x11c>

  sscanf(line, "%d", w);
  800960:	e13fba04 	addi	r4,fp,-280
  800964:	01402074 	movhi	r5,129
  800968:	2952af04 	addi	r5,r5,19132
  80096c:	e1bffd17 	ldw	r6,-12(fp)
  800970:	0804ee00 	call	804ee0 <sscanf>
  fgets(line, 256, file);
  800974:	e13fba04 	addi	r4,fp,-280
  800978:	01404004 	movi	r5,256
  80097c:	e1bfb917 	ldw	r6,-284(fp)
  800980:	0802c240 	call	802c24 <fgets>
  sscanf(line, "%d", h);
  800984:	e13fba04 	addi	r4,fp,-280
  800988:	01402074 	movhi	r5,129
  80098c:	2952af04 	addi	r5,r5,19132
  800990:	e1bffe17 	ldw	r6,-8(fp)
  800994:	0804ee00 	call	804ee0 <sscanf>
  fgets(line, 256, file);
  800998:	e13fba04 	addi	r4,fp,-280
  80099c:	01404004 	movi	r5,256
  8009a0:	e1bfb917 	ldw	r6,-284(fp)
  8009a4:	0802c240 	call	802c24 <fgets>
  sscanf(line, "%d", &maxval);
  8009a8:	e13fba04 	addi	r4,fp,-280
  8009ac:	e1bffa04 	addi	r6,fp,-24
  8009b0:	01402074 	movhi	r5,129
  8009b4:	2952af04 	addi	r5,r5,19132
  8009b8:	0804ee00 	call	804ee0 <sscanf>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
  8009bc:	e0bffd17 	ldw	r2,-12(fp)
  8009c0:	10800017 	ldw	r2,0(r2)
  8009c4:	1009883a 	mov	r4,r2
  8009c8:	01400104 	movi	r5,4
  8009cc:	08024f00 	call	8024f0 <calloc>
  8009d0:	e0bfb415 	stw	r2,-304(fp)
  8009d4:	e0bfb417 	ldw	r2,-304(fp)
  8009d8:	1004c03a 	cmpne	r2,r2,zero
  8009dc:	1000051e 	bne	r2,zero,8009f4 <pgmread+0x1d8>
    printf("Memory allocation error. Exit program\n");
  8009e0:	01002074 	movhi	r4,129
  8009e4:	2112b004 	addi	r4,r4,19136
  8009e8:	0804b8c0 	call	804b8c <puts>
    exit(1);
  8009ec:	01000044 	movi	r4,1
  8009f0:	08026280 	call	802628 <exit>
  }
  for (j = 0; j < (*w); j++)
  8009f4:	e03fb515 	stw	zero,-300(fp)
  8009f8:	00001706 	br	800a58 <pgmread+0x23c>
    if ((data[j] = (unsigned char*)calloc((*h), sizeof(unsigned char))) ==
  8009fc:	e0bfb517 	ldw	r2,-300(fp)
  800a00:	1085883a 	add	r2,r2,r2
  800a04:	1085883a 	add	r2,r2,r2
  800a08:	1007883a 	mov	r3,r2
  800a0c:	e0bfb417 	ldw	r2,-304(fp)
  800a10:	18a1883a 	add	r16,r3,r2
  800a14:	e0bffe17 	ldw	r2,-8(fp)
  800a18:	10800017 	ldw	r2,0(r2)
  800a1c:	1009883a 	mov	r4,r2
  800a20:	01400044 	movi	r5,1
  800a24:	08024f00 	call	8024f0 <calloc>
  800a28:	80800015 	stw	r2,0(r16)
  800a2c:	80800017 	ldw	r2,0(r16)
  800a30:	1004c03a 	cmpne	r2,r2,zero
  800a34:	1000051e 	bne	r2,zero,800a4c <pgmread+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  800a38:	01002074 	movhi	r4,129
  800a3c:	2112b004 	addi	r4,r4,19136
  800a40:	0804b8c0 	call	804b8c <puts>
      exit(1);
  800a44:	01000044 	movi	r4,1
  800a48:	08026280 	call	802628 <exit>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*w); j++)
  800a4c:	e0bfb517 	ldw	r2,-300(fp)
  800a50:	10800044 	addi	r2,r2,1
  800a54:	e0bfb515 	stw	r2,-300(fp)
  800a58:	e0bffd17 	ldw	r2,-12(fp)
  800a5c:	10c00017 	ldw	r3,0(r2)
  800a60:	e0bfb517 	ldw	r2,-300(fp)
  800a64:	10ffe516 	blt	r2,r3,8009fc <pgmread+0x1e0>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }

  if (binary) {
  800a68:	e0bfb817 	ldw	r2,-288(fp)
  800a6c:	1005003a 	cmpeq	r2,r2,zero
  800a70:	10004a1e 	bne	r2,zero,800b9c <pgmread+0x380>
    if ((bindata = (unsigned char*)calloc((*w) * (*h), sizeof(unsigned char))) == NULL) {
  800a74:	e0bffd17 	ldw	r2,-12(fp)
  800a78:	11000017 	ldw	r4,0(r2)
  800a7c:	e0bffe17 	ldw	r2,-8(fp)
  800a80:	11400017 	ldw	r5,0(r2)
  800a84:	0801fec0 	call	801fec <__mulsi3>
  800a88:	1009883a 	mov	r4,r2
  800a8c:	01400044 	movi	r5,1
  800a90:	08024f00 	call	8024f0 <calloc>
  800a94:	e0bfb315 	stw	r2,-308(fp)
  800a98:	e0bfb317 	ldw	r2,-308(fp)
  800a9c:	1004c03a 	cmpne	r2,r2,zero
  800aa0:	1000051e 	bne	r2,zero,800ab8 <pgmread+0x29c>
      printf("Memory allocation error on bindata. Exit program\n");
  800aa4:	01002074 	movhi	r4,129
  800aa8:	2112ba04 	addi	r4,r4,19176
  800aac:	0804b8c0 	call	804b8c <puts>
      exit(1);
  800ab0:	01000044 	movi	r4,1
  800ab4:	08026280 	call	802628 <exit>
    }

    printf("Reading %s as binary.\n", filename);
  800ab8:	01002074 	movhi	r4,129
  800abc:	2112c704 	addi	r4,r4,19228
  800ac0:	e17ffc17 	ldw	r5,-16(fp)
  800ac4:	0804a740 	call	804a74 <printf>

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);
  800ac8:	e0bffd17 	ldw	r2,-12(fp)
  800acc:	11000017 	ldw	r4,0(r2)
  800ad0:	e0bffe17 	ldw	r2,-8(fp)
  800ad4:	11400017 	ldw	r5,0(r2)
  800ad8:	0801fec0 	call	801fec <__mulsi3>
  800adc:	100d883a 	mov	r6,r2
  800ae0:	e13fb317 	ldw	r4,-308(fp)
  800ae4:	01400044 	movi	r5,1
  800ae8:	e1ffb917 	ldw	r7,-284(fp)
  800aec:	08032b80 	call	8032b8 <fread>
  800af0:	e0bfb715 	stw	r2,-292(fp)

    for (i = 0; i < (*w); i++)
  800af4:	e03fb615 	stw	zero,-296(fp)
  800af8:	00002106 	br	800b80 <pgmread+0x364>
      for (j = 0; j < (*h); j++)
  800afc:	e03fb515 	stw	zero,-300(fp)
  800b00:	00001806 	br	800b64 <pgmread+0x348>
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];
  800b04:	e0bfb617 	ldw	r2,-296(fp)
  800b08:	1085883a 	add	r2,r2,r2
  800b0c:	1085883a 	add	r2,r2,r2
  800b10:	1007883a 	mov	r3,r2
  800b14:	e0bfb417 	ldw	r2,-304(fp)
  800b18:	1885883a 	add	r2,r3,r2
  800b1c:	10c00017 	ldw	r3,0(r2)
  800b20:	e0bfb517 	ldw	r2,-300(fp)
  800b24:	18a1883a 	add	r16,r3,r2
  800b28:	e0bffd17 	ldw	r2,-12(fp)
  800b2c:	11000017 	ldw	r4,0(r2)
  800b30:	e17fb517 	ldw	r5,-300(fp)
  800b34:	0801fec0 	call	801fec <__mulsi3>
  800b38:	1007883a 	mov	r3,r2
  800b3c:	e0bfb617 	ldw	r2,-296(fp)
  800b40:	1885883a 	add	r2,r3,r2
  800b44:	1007883a 	mov	r3,r2
  800b48:	e0bfb317 	ldw	r2,-308(fp)
  800b4c:	1885883a 	add	r2,r3,r2
  800b50:	10800003 	ldbu	r2,0(r2)
  800b54:	80800005 	stb	r2,0(r16)
    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
      for (j = 0; j < (*h); j++)
  800b58:	e0bfb517 	ldw	r2,-300(fp)
  800b5c:	10800044 	addi	r2,r2,1
  800b60:	e0bfb515 	stw	r2,-300(fp)
  800b64:	e0bffe17 	ldw	r2,-8(fp)
  800b68:	10c00017 	ldw	r3,0(r2)
  800b6c:	e0bfb517 	ldw	r2,-300(fp)
  800b70:	10ffe416 	blt	r2,r3,800b04 <pgmread+0x2e8>

    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
  800b74:	e0bfb617 	ldw	r2,-296(fp)
  800b78:	10800044 	addi	r2,r2,1
  800b7c:	e0bfb615 	stw	r2,-296(fp)
  800b80:	e0bffd17 	ldw	r2,-12(fp)
  800b84:	10c00017 	ldw	r3,0(r2)
  800b88:	e0bfb617 	ldw	r2,-296(fp)
  800b8c:	10ffdb16 	blt	r2,r3,800afc <pgmread+0x2e0>
      for (j = 0; j < (*h); j++)
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];

    free(bindata);
  800b90:	e13fb317 	ldw	r4,-308(fp)
  800b94:	08040780 	call	804078 <free>
  800b98:	00002606 	br	800c34 <pgmread+0x418>
  } else {
    printf("Reading %s as ascii.\n", filename);
  800b9c:	01002074 	movhi	r4,129
  800ba0:	2112cd04 	addi	r4,r4,19252
  800ba4:	e17ffc17 	ldw	r5,-16(fp)
  800ba8:	0804a740 	call	804a74 <printf>

    for (i = 0; i < (*h); i++) {
  800bac:	e03fb615 	stw	zero,-296(fp)
  800bb0:	00001c06 	br	800c24 <pgmread+0x408>
      for (j = 0; j < (*w); j++) {
  800bb4:	e03fb515 	stw	zero,-300(fp)
  800bb8:	00001306 	br	800c08 <pgmread+0x3ec>
        fscanf(file, "%d", &int_tmp);
  800bbc:	e1bffb04 	addi	r6,fp,-20
  800bc0:	e13fb917 	ldw	r4,-284(fp)
  800bc4:	01402074 	movhi	r5,129
  800bc8:	2952af04 	addi	r5,r5,19132
  800bcc:	08037600 	call	803760 <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  800bd0:	e0bfb517 	ldw	r2,-300(fp)
  800bd4:	1085883a 	add	r2,r2,r2
  800bd8:	1085883a 	add	r2,r2,r2
  800bdc:	1007883a 	mov	r3,r2
  800be0:	e0bfb417 	ldw	r2,-304(fp)
  800be4:	1885883a 	add	r2,r3,r2
  800be8:	10c00017 	ldw	r3,0(r2)
  800bec:	e0bfb617 	ldw	r2,-296(fp)
  800bf0:	1887883a 	add	r3,r3,r2
  800bf4:	e0bffb17 	ldw	r2,-20(fp)
  800bf8:	18800005 	stb	r2,0(r3)
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
      for (j = 0; j < (*w); j++) {
  800bfc:	e0bfb517 	ldw	r2,-300(fp)
  800c00:	10800044 	addi	r2,r2,1
  800c04:	e0bfb515 	stw	r2,-300(fp)
  800c08:	e0bffd17 	ldw	r2,-12(fp)
  800c0c:	10c00017 	ldw	r3,0(r2)
  800c10:	e0bfb517 	ldw	r2,-300(fp)
  800c14:	10ffe916 	blt	r2,r3,800bbc <pgmread+0x3a0>

    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
  800c18:	e0bfb617 	ldw	r2,-296(fp)
  800c1c:	10800044 	addi	r2,r2,1
  800c20:	e0bfb615 	stw	r2,-296(fp)
  800c24:	e0bffe17 	ldw	r2,-8(fp)
  800c28:	10c00017 	ldw	r3,0(r2)
  800c2c:	e0bfb617 	ldw	r2,-296(fp)
  800c30:	10ffe016 	blt	r2,r3,800bb4 <pgmread+0x398>
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }

  fclose(file);
  800c34:	e13fb917 	ldw	r4,-284(fp)
  800c38:	08027700 	call	802770 <fclose>
  return (data);
  800c3c:	e0bfb417 	ldw	r2,-304(fp)
  800c40:	e0bfff15 	stw	r2,-4(fp)
  800c44:	e0bfff17 	ldw	r2,-4(fp)
}
  800c48:	e037883a 	mov	sp,fp
  800c4c:	dfc00217 	ldw	ra,8(sp)
  800c50:	df000117 	ldw	fp,4(sp)
  800c54:	dc000017 	ldw	r16,0(sp)
  800c58:	dec00304 	addi	sp,sp,12
  800c5c:	f800283a 	ret

00800c60 <pgmwrite>:
 *
 * NOTE: this function assumes input bufefr "data" is in column dominant format.
 */

int pgmwrite(char* filename, int w, int h, unsigned char** data,
             char* comment_string, int binsave) {
  800c60:	deffb104 	addi	sp,sp,-316
  800c64:	dfc04e15 	stw	ra,312(sp)
  800c68:	df004d15 	stw	fp,308(sp)
  800c6c:	df004d04 	addi	fp,sp,308
  800c70:	e13ffb15 	stw	r4,-20(fp)
  800c74:	e17ffc15 	stw	r5,-16(fp)
  800c78:	e1bffd15 	stw	r6,-12(fp)
  800c7c:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  800c80:	e13ffb17 	ldw	r4,-20(fp)
  800c84:	01402074 	movhi	r5,129
  800c88:	2952d304 	addi	r5,r5,19276
  800c8c:	08030300 	call	803030 <fopen>
  800c90:	e0bfba15 	stw	r2,-280(fp)
  800c94:	e0bfba17 	ldw	r2,-280(fp)
  800c98:	1004c03a 	cmpne	r2,r2,zero
  800c9c:	1000061e 	bne	r2,zero,800cb8 <pgmwrite+0x58>
    printf("ERROR: file open failed\n");
  800ca0:	01002074 	movhi	r4,129
  800ca4:	21129704 	addi	r4,r4,19036
  800ca8:	0804b8c0 	call	804b8c <puts>
    return (-1);
  800cac:	00bfffc4 	movi	r2,-1
  800cb0:	e0bfff15 	stw	r2,-4(fp)
  800cb4:	0000b106 	br	800f7c <pgmwrite+0x31c>
  }

  if (binsave == 1)
  800cb8:	e0800317 	ldw	r2,12(fp)
  800cbc:	10800058 	cmpnei	r2,r2,1
  800cc0:	1000071e 	bne	r2,zero,800ce0 <pgmwrite+0x80>
    fprintf(file, "P5\n");
  800cc4:	01002074 	movhi	r4,129
  800cc8:	2112d404 	addi	r4,r4,19280
  800ccc:	01400044 	movi	r5,1
  800cd0:	018000c4 	movi	r6,3
  800cd4:	e1ffba17 	ldw	r7,-280(fp)
  800cd8:	0803ea40 	call	803ea4 <fwrite>
  800cdc:	00000606 	br	800cf8 <pgmwrite+0x98>
  else
    fprintf(file, "P2\n");
  800ce0:	01002074 	movhi	r4,129
  800ce4:	2112d504 	addi	r4,r4,19284
  800ce8:	01400044 	movi	r5,1
  800cec:	018000c4 	movi	r6,3
  800cf0:	e1ffba17 	ldw	r7,-280(fp)
  800cf4:	0803ea40 	call	803ea4 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  800cf8:	e0800217 	ldw	r2,8(fp)
  800cfc:	1005003a 	cmpeq	r2,r2,zero
  800d00:	1000051e 	bne	r2,zero,800d18 <pgmwrite+0xb8>
  800d04:	e13fba17 	ldw	r4,-280(fp)
  800d08:	01402074 	movhi	r5,129
  800d0c:	2952d604 	addi	r5,r5,19288
  800d10:	e1800217 	ldw	r6,8(fp)
  800d14:	080304c0 	call	80304c <fprintf>

  fprintf(file, "%d %d \n", w, h);
  800d18:	e13fba17 	ldw	r4,-280(fp)
  800d1c:	01402074 	movhi	r5,129
  800d20:	2952d804 	addi	r5,r5,19296
  800d24:	e1bffc17 	ldw	r6,-16(fp)
  800d28:	e1fffd17 	ldw	r7,-12(fp)
  800d2c:	080304c0 	call	80304c <fprintf>

  maxval = 0;
  800d30:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < w; i++)
  800d34:	e03fb615 	stw	zero,-296(fp)
  800d38:	00002406 	br	800dcc <pgmwrite+0x16c>
    for (j = 0; j < h; j++)
  800d3c:	e03fb515 	stw	zero,-300(fp)
  800d40:	00001c06 	br	800db4 <pgmwrite+0x154>
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];
  800d44:	e0bfb617 	ldw	r2,-296(fp)
  800d48:	1085883a 	add	r2,r2,r2
  800d4c:	1085883a 	add	r2,r2,r2
  800d50:	1007883a 	mov	r3,r2
  800d54:	e0bffe17 	ldw	r2,-8(fp)
  800d58:	1885883a 	add	r2,r3,r2
  800d5c:	10c00017 	ldw	r3,0(r2)
  800d60:	e0bfb517 	ldw	r2,-300(fp)
  800d64:	1885883a 	add	r2,r3,r2
  800d68:	10800003 	ldbu	r2,0(r2)
  800d6c:	10c03fcc 	andi	r3,r2,255
  800d70:	e0bfb917 	ldw	r2,-284(fp)
  800d74:	10c00c0e 	bge	r2,r3,800da8 <pgmwrite+0x148>
  800d78:	e0bfb617 	ldw	r2,-296(fp)
  800d7c:	1085883a 	add	r2,r2,r2
  800d80:	1085883a 	add	r2,r2,r2
  800d84:	1007883a 	mov	r3,r2
  800d88:	e0bffe17 	ldw	r2,-8(fp)
  800d8c:	1885883a 	add	r2,r3,r2
  800d90:	10c00017 	ldw	r3,0(r2)
  800d94:	e0bfb517 	ldw	r2,-300(fp)
  800d98:	1885883a 	add	r2,r3,r2
  800d9c:	10800003 	ldbu	r2,0(r2)
  800da0:	10803fcc 	andi	r2,r2,255
  800da4:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
    for (j = 0; j < h; j++)
  800da8:	e0bfb517 	ldw	r2,-300(fp)
  800dac:	10800044 	addi	r2,r2,1
  800db0:	e0bfb515 	stw	r2,-300(fp)
  800db4:	e0ffb517 	ldw	r3,-300(fp)
  800db8:	e0bffd17 	ldw	r2,-12(fp)
  800dbc:	18bfe116 	blt	r3,r2,800d44 <pgmwrite+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
  800dc0:	e0bfb617 	ldw	r2,-296(fp)
  800dc4:	10800044 	addi	r2,r2,1
  800dc8:	e0bfb615 	stw	r2,-296(fp)
  800dcc:	e0ffb617 	ldw	r3,-296(fp)
  800dd0:	e0bffc17 	ldw	r2,-16(fp)
  800dd4:	18bfd916 	blt	r3,r2,800d3c <pgmwrite+0xdc>
    for (j = 0; j < h; j++)
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];

  fprintf(file, "%d \n", maxval);
  800dd8:	e13fba17 	ldw	r4,-280(fp)
  800ddc:	01402074 	movhi	r5,129
  800de0:	2952da04 	addi	r5,r5,19304
  800de4:	e1bfb917 	ldw	r6,-284(fp)
  800de8:	080304c0 	call	80304c <fprintf>

  if (binsave == 1) {
  800dec:	e0800317 	ldw	r2,12(fp)
  800df0:	10800058 	cmpnei	r2,r2,1
  800df4:	10003b1e 	bne	r2,zero,800ee4 <pgmwrite+0x284>
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));
  800df8:	e13ffc17 	ldw	r4,-16(fp)
  800dfc:	e17ffd17 	ldw	r5,-12(fp)
  800e00:	0801fec0 	call	801fec <__mulsi3>
  800e04:	1009883a 	mov	r4,r2
  800e08:	01400044 	movi	r5,1
  800e0c:	08024f00 	call	8024f0 <calloc>
  800e10:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < w; i++)
  800e14:	e03fb615 	stw	zero,-296(fp)
  800e18:	00001f06 	br	800e98 <pgmwrite+0x238>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];
  800e1c:	e03fb515 	stw	zero,-300(fp)
  800e20:	00001706 	br	800e80 <pgmwrite+0x220>
  800e24:	e13fb517 	ldw	r4,-300(fp)
  800e28:	e17ffc17 	ldw	r5,-16(fp)
  800e2c:	0801fec0 	call	801fec <__mulsi3>
  800e30:	1007883a 	mov	r3,r2
  800e34:	e0bfb617 	ldw	r2,-296(fp)
  800e38:	1885883a 	add	r2,r3,r2
  800e3c:	1007883a 	mov	r3,r2
  800e40:	e0bfb317 	ldw	r2,-308(fp)
  800e44:	1889883a 	add	r4,r3,r2
  800e48:	e0bfb617 	ldw	r2,-296(fp)
  800e4c:	1085883a 	add	r2,r2,r2
  800e50:	1085883a 	add	r2,r2,r2
  800e54:	1007883a 	mov	r3,r2
  800e58:	e0bffe17 	ldw	r2,-8(fp)
  800e5c:	1885883a 	add	r2,r3,r2
  800e60:	10c00017 	ldw	r3,0(r2)
  800e64:	e0bfb517 	ldw	r2,-300(fp)
  800e68:	1885883a 	add	r2,r3,r2
  800e6c:	10800003 	ldbu	r2,0(r2)
  800e70:	20800005 	stb	r2,0(r4)
  800e74:	e0bfb517 	ldw	r2,-300(fp)
  800e78:	10800044 	addi	r2,r2,1
  800e7c:	e0bfb515 	stw	r2,-300(fp)
  800e80:	e0ffb517 	ldw	r3,-300(fp)
  800e84:	e0bffd17 	ldw	r2,-12(fp)
  800e88:	18bfe616 	blt	r3,r2,800e24 <pgmwrite+0x1c4>
  fprintf(file, "%d \n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));

    for (i = 0; i < w; i++)
  800e8c:	e0bfb617 	ldw	r2,-296(fp)
  800e90:	10800044 	addi	r2,r2,1
  800e94:	e0bfb615 	stw	r2,-296(fp)
  800e98:	e0ffb617 	ldw	r3,-296(fp)
  800e9c:	e0bffc17 	ldw	r2,-16(fp)
  800ea0:	18bfde16 	blt	r3,r2,800e1c <pgmwrite+0x1bc>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];

    nread = fwrite((void*)temp, sizeof(unsigned char), (w) * (h), file);
  800ea4:	e13ffc17 	ldw	r4,-16(fp)
  800ea8:	e17ffd17 	ldw	r5,-12(fp)
  800eac:	0801fec0 	call	801fec <__mulsi3>
  800eb0:	100d883a 	mov	r6,r2
  800eb4:	e13fb317 	ldw	r4,-308(fp)
  800eb8:	01400044 	movi	r5,1
  800ebc:	e1ffba17 	ldw	r7,-280(fp)
  800ec0:	0803ea40 	call	803ea4 <fwrite>
  800ec4:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  800ec8:	01002074 	movhi	r4,129
  800ecc:	2112dc04 	addi	r4,r4,19312
  800ed0:	e17ffb17 	ldw	r5,-20(fp)
  800ed4:	0804a740 	call	804a74 <printf>
    free(temp);
  800ed8:	e13fb317 	ldw	r4,-308(fp)
  800edc:	08040780 	call	804078 <free>
  800ee0:	00002306 	br	800f70 <pgmwrite+0x310>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  800ee4:	01002074 	movhi	r4,129
  800ee8:	2112e304 	addi	r4,r4,19340
  800eec:	e17ffb17 	ldw	r5,-20(fp)
  800ef0:	0804a740 	call	804a74 <printf>

    for (i = 0; i < h; i++)
  800ef4:	e03fb615 	stw	zero,-296(fp)
  800ef8:	00001a06 	br	800f64 <pgmwrite+0x304>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  800efc:	e03fb515 	stw	zero,-300(fp)
  800f00:	00001206 	br	800f4c <pgmwrite+0x2ec>
  800f04:	e0bfb517 	ldw	r2,-300(fp)
  800f08:	1085883a 	add	r2,r2,r2
  800f0c:	1085883a 	add	r2,r2,r2
  800f10:	1007883a 	mov	r3,r2
  800f14:	e0bffe17 	ldw	r2,-8(fp)
  800f18:	1885883a 	add	r2,r3,r2
  800f1c:	10c00017 	ldw	r3,0(r2)
  800f20:	e0bfb617 	ldw	r2,-296(fp)
  800f24:	1885883a 	add	r2,r3,r2
  800f28:	10800003 	ldbu	r2,0(r2)
  800f2c:	11803fcc 	andi	r6,r2,255
  800f30:	e13fba17 	ldw	r4,-280(fp)
  800f34:	01402074 	movhi	r5,129
  800f38:	2952ea04 	addi	r5,r5,19368
  800f3c:	080304c0 	call	80304c <fprintf>
  800f40:	e0bfb517 	ldw	r2,-300(fp)
  800f44:	10800044 	addi	r2,r2,1
  800f48:	e0bfb515 	stw	r2,-300(fp)
  800f4c:	e0ffb517 	ldw	r3,-300(fp)
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	18bfeb16 	blt	r3,r2,800f04 <pgmwrite+0x2a4>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (i = 0; i < h; i++)
  800f58:	e0bfb617 	ldw	r2,-296(fp)
  800f5c:	10800044 	addi	r2,r2,1
  800f60:	e0bfb615 	stw	r2,-296(fp)
  800f64:	e0ffb617 	ldw	r3,-296(fp)
  800f68:	e0bffd17 	ldw	r2,-12(fp)
  800f6c:	18bfe316 	blt	r3,r2,800efc <pgmwrite+0x29c>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  }

  fclose(file);
  800f70:	e13fba17 	ldw	r4,-280(fp)
  800f74:	08027700 	call	802770 <fclose>
  return (0);
  800f78:	e03fff15 	stw	zero,-4(fp)
  800f7c:	e0bfff17 	ldw	r2,-4(fp)
}
  800f80:	e037883a 	mov	sp,fp
  800f84:	dfc00117 	ldw	ra,4(sp)
  800f88:	df000017 	ldw	fp,0(sp)
  800f8c:	dec00204 	addi	sp,sp,8
  800f90:	f800283a 	ret

00800f94 <pgmread2>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in row dominant format
 */
unsigned char** pgmread2(char* filename, int* row, int* col) {
  800f94:	deffae04 	addi	sp,sp,-328
  800f98:	dfc05115 	stw	ra,324(sp)
  800f9c:	df005015 	stw	fp,320(sp)
  800fa0:	dc004f15 	stw	r16,316(sp)
  800fa4:	df004f04 	addi	fp,sp,316
  800fa8:	e13ffc15 	stw	r4,-16(fp)
  800fac:	e17ffd15 	stw	r5,-12(fp)
  800fb0:	e1bffe15 	stw	r6,-8(fp)
  char firstchar;
  int count;
  unsigned char** data;
  unsigned char* bindata;

  if ((file = fopen(filename, "r")) == NULL) {
  800fb4:	e13ffc17 	ldw	r4,-16(fp)
  800fb8:	01402074 	movhi	r5,129
  800fbc:	29529604 	addi	r5,r5,19032
  800fc0:	08030300 	call	803030 <fopen>
  800fc4:	e0bfb915 	stw	r2,-284(fp)
  800fc8:	e0bfb917 	ldw	r2,-284(fp)
  800fcc:	1004c03a 	cmpne	r2,r2,zero
  800fd0:	10000b1e 	bne	r2,zero,801000 <pgmread2+0x6c>
    printf("ERROR: file open failed\n");
  800fd4:	01002074 	movhi	r4,129
  800fd8:	21129704 	addi	r4,r4,19036
  800fdc:	0804b8c0 	call	804b8c <puts>
    *row = *col = 0;
  800fe0:	e0bffe17 	ldw	r2,-8(fp)
  800fe4:	10000015 	stw	zero,0(r2)
  800fe8:	e0bffe17 	ldw	r2,-8(fp)
  800fec:	10c00017 	ldw	r3,0(r2)
  800ff0:	e0bffd17 	ldw	r2,-12(fp)
  800ff4:	10c00015 	stw	r3,0(r2)
    return (NULL);
  800ff8:	e03fff15 	stw	zero,-4(fp)
  800ffc:	00010306 	br	80140c <pgmread2+0x478>
  }
  count = readToWhitespace(file, line, 2);
  801000:	e17fba04 	addi	r5,fp,-280
  801004:	e13fb917 	ldw	r4,-284(fp)
  801008:	01800084 	movi	r6,2
  80100c:	08005900 	call	800590 <readToWhitespace>
  801010:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';  // Solo por precauci�n
  801014:	e0ffb317 	ldw	r3,-308(fp)
  801018:	e0bfba04 	addi	r2,fp,-280
  80101c:	10c5883a 	add	r2,r2,r3
  801020:	10000005 	stb	zero,0(r2)

  if (strncmp(line, "P5", 2)) {
  801024:	e13fba04 	addi	r4,fp,-280
  801028:	01402074 	movhi	r5,129
  80102c:	2952a604 	addi	r5,r5,19096
  801030:	01800084 	movi	r6,2
  801034:	08051240 	call	805124 <strncmp>
  801038:	1005003a 	cmpeq	r2,r2,zero
  80103c:	1000141e 	bne	r2,zero,801090 <pgmread2+0xfc>
    if (strncmp(line, "P2", 2)) {
  801040:	e13fba04 	addi	r4,fp,-280
  801044:	01402074 	movhi	r5,129
  801048:	2952a704 	addi	r5,r5,19100
  80104c:	01800084 	movi	r6,2
  801050:	08051240 	call	805124 <strncmp>
  801054:	1005003a 	cmpeq	r2,r2,zero
  801058:	10000b1e 	bne	r2,zero,801088 <pgmread2+0xf4>
      printf("pgm read: not a pgm file\n");
  80105c:	01002074 	movhi	r4,129
  801060:	2112a804 	addi	r4,r4,19104
  801064:	0804b8c0 	call	804b8c <puts>
      *row = *col = 0;
  801068:	e0bffe17 	ldw	r2,-8(fp)
  80106c:	10000015 	stw	zero,0(r2)
  801070:	e0bffe17 	ldw	r2,-8(fp)
  801074:	10c00017 	ldw	r3,0(r2)
  801078:	e0bffd17 	ldw	r2,-12(fp)
  80107c:	10c00015 	stw	r3,0(r2)
      return (NULL);
  801080:	e03fff15 	stw	zero,-4(fp)
  801084:	0000e106 	br	80140c <pgmread2+0x478>
    } else {
      binary = 0;  // fichero formato texto
  801088:	e03fb815 	stw	zero,-288(fp)
  80108c:	00000206 	br	801098 <pgmread2+0x104>
    }
  } else {
    binary = 1;  // fichero con contenidos en binario
  801090:	00800044 	movi	r2,1
  801094:	e0bfb815 	stw	r2,-288(fp)
  }

  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801098:	e13fb917 	ldw	r4,-284(fp)
  80109c:	08006540 	call	800654 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  8010a0:	e17fba04 	addi	r5,fp,-280
  8010a4:	e13fb917 	ldw	r4,-284(fp)
  8010a8:	01803fc4 	movi	r6,255
  8010ac:	08005900 	call	800590 <readToWhitespace>
  8010b0:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8010b4:	e0ffb317 	ldw	r3,-308(fp)
  8010b8:	e0bfba04 	addi	r2,fp,-280
  8010bc:	10c5883a 	add	r2,r2,r3
  8010c0:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", col);
  8010c4:	e13fba04 	addi	r4,fp,-280
  8010c8:	01402074 	movhi	r5,129
  8010cc:	2952af04 	addi	r5,r5,19132
  8010d0:	e1bffe17 	ldw	r6,-8(fp)
  8010d4:	0804ee00 	call	804ee0 <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  8010d8:	e13fb917 	ldw	r4,-284(fp)
  8010dc:	08006540 	call	800654 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  8010e0:	e17fba04 	addi	r5,fp,-280
  8010e4:	e13fb917 	ldw	r4,-284(fp)
  8010e8:	01803fc4 	movi	r6,255
  8010ec:	08005900 	call	800590 <readToWhitespace>
  8010f0:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8010f4:	e0ffb317 	ldw	r3,-308(fp)
  8010f8:	e0bfba04 	addi	r2,fp,-280
  8010fc:	10c5883a 	add	r2,r2,r3
  801100:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", row);
  801104:	e13fba04 	addi	r4,fp,-280
  801108:	01402074 	movhi	r5,129
  80110c:	2952af04 	addi	r5,r5,19132
  801110:	e1bffd17 	ldw	r6,-12(fp)
  801114:	0804ee00 	call	804ee0 <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801118:	e13fb917 	ldw	r4,-284(fp)
  80111c:	08006540 	call	800654 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  801120:	e17fba04 	addi	r5,fp,-280
  801124:	e13fb917 	ldw	r4,-284(fp)
  801128:	01803fc4 	movi	r6,255
  80112c:	08005900 	call	800590 <readToWhitespace>
  801130:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  801134:	e0ffb317 	ldw	r3,-308(fp)
  801138:	e0bfba04 	addi	r2,fp,-280
  80113c:	10c5883a 	add	r2,r2,r3
  801140:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", &maxval);
  801144:	e13fba04 	addi	r4,fp,-280
  801148:	e1bffa04 	addi	r6,fp,-24
  80114c:	01402074 	movhi	r5,129
  801150:	2952af04 	addi	r5,r5,19132
  801154:	0804ee00 	call	804ee0 <sscanf>
  printf("row = %d\tcol = %d\tmaxval = %d\n", *row, *col, maxval);
  801158:	e0bffd17 	ldw	r2,-12(fp)
  80115c:	11400017 	ldw	r5,0(r2)
  801160:	e0bffe17 	ldw	r2,-8(fp)
  801164:	11800017 	ldw	r6,0(r2)
  801168:	e1fffa17 	ldw	r7,-24(fp)
  80116c:	01002074 	movhi	r4,129
  801170:	2112eb04 	addi	r4,r4,19372
  801174:	0804a740 	call	804a74 <printf>
  eatWhitespaces(file, 1);  // Eliminamos exactamente un caracter whitespace
  801178:	e13fb917 	ldw	r4,-284(fp)
  80117c:	01400044 	movi	r5,1
  801180:	08006fc0 	call	8006fc <eatWhitespaces>

  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
  801184:	e0bffd17 	ldw	r2,-12(fp)
  801188:	10800017 	ldw	r2,0(r2)
  80118c:	1009883a 	mov	r4,r2
  801190:	01400104 	movi	r5,4
  801194:	08024f00 	call	8024f0 <calloc>
  801198:	e0bfb215 	stw	r2,-312(fp)
  80119c:	e0bfb217 	ldw	r2,-312(fp)
  8011a0:	1004c03a 	cmpne	r2,r2,zero
  8011a4:	1000051e 	bne	r2,zero,8011bc <pgmread2+0x228>
      NULL) {
    printf("Memory allocation error. Exit program\n");
  8011a8:	01002074 	movhi	r4,129
  8011ac:	2112b004 	addi	r4,r4,19136
  8011b0:	0804b8c0 	call	804b8c <puts>
    exit(1);
  8011b4:	01000044 	movi	r4,1
  8011b8:	08026280 	call	802628 <exit>
  }
  for (j = 0; j < (*row); j++) {
  8011bc:	e03fb515 	stw	zero,-300(fp)
  8011c0:	00001706 	br	801220 <pgmread2+0x28c>
    if ((data[j] = (unsigned char*)calloc((*col), sizeof(unsigned char))) ==
  8011c4:	e0bfb517 	ldw	r2,-300(fp)
  8011c8:	1085883a 	add	r2,r2,r2
  8011cc:	1085883a 	add	r2,r2,r2
  8011d0:	1007883a 	mov	r3,r2
  8011d4:	e0bfb217 	ldw	r2,-312(fp)
  8011d8:	18a1883a 	add	r16,r3,r2
  8011dc:	e0bffe17 	ldw	r2,-8(fp)
  8011e0:	10800017 	ldw	r2,0(r2)
  8011e4:	1009883a 	mov	r4,r2
  8011e8:	01400044 	movi	r5,1
  8011ec:	08024f00 	call	8024f0 <calloc>
  8011f0:	80800015 	stw	r2,0(r16)
  8011f4:	80800017 	ldw	r2,0(r16)
  8011f8:	1004c03a 	cmpne	r2,r2,zero
  8011fc:	1000051e 	bne	r2,zero,801214 <pgmread2+0x280>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  801200:	01002074 	movhi	r4,129
  801204:	2112b004 	addi	r4,r4,19136
  801208:	0804b8c0 	call	804b8c <puts>
      exit(1);
  80120c:	01000044 	movi	r4,1
  801210:	08026280 	call	802628 <exit>
  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
      NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*row); j++) {
  801214:	e0bfb517 	ldw	r2,-300(fp)
  801218:	10800044 	addi	r2,r2,1
  80121c:	e0bfb515 	stw	r2,-300(fp)
  801220:	e0bffd17 	ldw	r2,-12(fp)
  801224:	10c00017 	ldw	r3,0(r2)
  801228:	e0bfb517 	ldw	r2,-300(fp)
  80122c:	10ffe516 	blt	r2,r3,8011c4 <pgmread2+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }
  }
  if (binary) {
  801230:	e0bfb817 	ldw	r2,-288(fp)
  801234:	1005003a 	cmpeq	r2,r2,zero
  801238:	10004a1e 	bne	r2,zero,801364 <pgmread2+0x3d0>
    if ((bindata = (unsigned char*)calloc((*row) * (*col),
  80123c:	e0bffd17 	ldw	r2,-12(fp)
  801240:	11000017 	ldw	r4,0(r2)
  801244:	e0bffe17 	ldw	r2,-8(fp)
  801248:	11400017 	ldw	r5,0(r2)
  80124c:	0801fec0 	call	801fec <__mulsi3>
  801250:	1009883a 	mov	r4,r2
  801254:	01400044 	movi	r5,1
  801258:	08024f00 	call	8024f0 <calloc>
  80125c:	e0bfb115 	stw	r2,-316(fp)
  801260:	e0bfb117 	ldw	r2,-316(fp)
  801264:	1004c03a 	cmpne	r2,r2,zero
  801268:	1000051e 	bne	r2,zero,801280 <pgmread2+0x2ec>
                                          sizeof(unsigned char))) == NULL) {
      printf("Memory allocation error on bindata. Exit program\n");
  80126c:	01002074 	movhi	r4,129
  801270:	2112ba04 	addi	r4,r4,19176
  801274:	0804b8c0 	call	804b8c <puts>
      exit(1);
  801278:	01000044 	movi	r4,1
  80127c:	08026280 	call	802628 <exit>
    }
    printf("Reading %s as binary.\n", filename);
  801280:	01002074 	movhi	r4,129
  801284:	2112c704 	addi	r4,r4,19228
  801288:	e17ffc17 	ldw	r5,-16(fp)
  80128c:	0804a740 	call	804a74 <printf>
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
  801290:	e0bffd17 	ldw	r2,-12(fp)
  801294:	11000017 	ldw	r4,0(r2)
  801298:	e0bffe17 	ldw	r2,-8(fp)
  80129c:	11400017 	ldw	r5,0(r2)
  8012a0:	0801fec0 	call	801fec <__mulsi3>
  8012a4:	100d883a 	mov	r6,r2
  8012a8:	e13fb117 	ldw	r4,-316(fp)
  8012ac:	01400044 	movi	r5,1
  8012b0:	e1ffb917 	ldw	r7,-284(fp)
  8012b4:	08032b80 	call	8032b8 <fread>
  8012b8:	e0bfb715 	stw	r2,-292(fp)
    for (i = 0; i < (*row); i++) {
  8012bc:	e03fb615 	stw	zero,-296(fp)
  8012c0:	00002106 	br	801348 <pgmread2+0x3b4>
      for (j = 0; j < (*col); j++) {
  8012c4:	e03fb515 	stw	zero,-300(fp)
  8012c8:	00001806 	br	80132c <pgmread2+0x398>
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
  8012cc:	e0bfb617 	ldw	r2,-296(fp)
  8012d0:	1085883a 	add	r2,r2,r2
  8012d4:	1085883a 	add	r2,r2,r2
  8012d8:	1007883a 	mov	r3,r2
  8012dc:	e0bfb217 	ldw	r2,-312(fp)
  8012e0:	1885883a 	add	r2,r3,r2
  8012e4:	10c00017 	ldw	r3,0(r2)
  8012e8:	e0bfb517 	ldw	r2,-300(fp)
  8012ec:	18a1883a 	add	r16,r3,r2
  8012f0:	e0bffe17 	ldw	r2,-8(fp)
  8012f4:	11000017 	ldw	r4,0(r2)
  8012f8:	e17fb617 	ldw	r5,-296(fp)
  8012fc:	0801fec0 	call	801fec <__mulsi3>
  801300:	1007883a 	mov	r3,r2
  801304:	e0bfb517 	ldw	r2,-300(fp)
  801308:	1885883a 	add	r2,r3,r2
  80130c:	1007883a 	mov	r3,r2
  801310:	e0bfb117 	ldw	r2,-316(fp)
  801314:	1885883a 	add	r2,r3,r2
  801318:	10800003 	ldbu	r2,0(r2)
  80131c:	80800005 	stb	r2,0(r16)
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
      for (j = 0; j < (*col); j++) {
  801320:	e0bfb517 	ldw	r2,-300(fp)
  801324:	10800044 	addi	r2,r2,1
  801328:	e0bfb515 	stw	r2,-300(fp)
  80132c:	e0bffe17 	ldw	r2,-8(fp)
  801330:	10c00017 	ldw	r3,0(r2)
  801334:	e0bfb517 	ldw	r2,-300(fp)
  801338:	10ffe416 	blt	r2,r3,8012cc <pgmread2+0x338>
      printf("Memory allocation error on bindata. Exit program\n");
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
  80133c:	e0bfb617 	ldw	r2,-296(fp)
  801340:	10800044 	addi	r2,r2,1
  801344:	e0bfb615 	stw	r2,-296(fp)
  801348:	e0bffd17 	ldw	r2,-12(fp)
  80134c:	10c00017 	ldw	r3,0(r2)
  801350:	e0bfb617 	ldw	r2,-296(fp)
  801354:	10ffdb16 	blt	r2,r3,8012c4 <pgmread2+0x330>
      for (j = 0; j < (*col); j++) {
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
      }
    }
    free(bindata);
  801358:	e13fb117 	ldw	r4,-316(fp)
  80135c:	08040780 	call	804078 <free>
  801360:	00002606 	br	8013fc <pgmread2+0x468>
  } else {
    printf("Reading %s as ascii.\n", filename);
  801364:	01002074 	movhi	r4,129
  801368:	2112cd04 	addi	r4,r4,19252
  80136c:	e17ffc17 	ldw	r5,-16(fp)
  801370:	0804a740 	call	804a74 <printf>
    for (j = 0; j < (*row); j++) {
  801374:	e03fb515 	stw	zero,-300(fp)
  801378:	00001c06 	br	8013ec <pgmread2+0x458>
      for (i = 0; i < (*col); i++) {
  80137c:	e03fb615 	stw	zero,-296(fp)
  801380:	00001306 	br	8013d0 <pgmread2+0x43c>
        fscanf(file, "%d", &int_tmp);
  801384:	e1bffb04 	addi	r6,fp,-20
  801388:	e13fb917 	ldw	r4,-284(fp)
  80138c:	01402074 	movhi	r5,129
  801390:	2952af04 	addi	r5,r5,19132
  801394:	08037600 	call	803760 <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  801398:	e0bfb517 	ldw	r2,-300(fp)
  80139c:	1085883a 	add	r2,r2,r2
  8013a0:	1085883a 	add	r2,r2,r2
  8013a4:	1007883a 	mov	r3,r2
  8013a8:	e0bfb217 	ldw	r2,-312(fp)
  8013ac:	1885883a 	add	r2,r3,r2
  8013b0:	10c00017 	ldw	r3,0(r2)
  8013b4:	e0bfb617 	ldw	r2,-296(fp)
  8013b8:	1887883a 	add	r3,r3,r2
  8013bc:	e0bffb17 	ldw	r2,-20(fp)
  8013c0:	18800005 	stb	r2,0(r3)
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
      for (i = 0; i < (*col); i++) {
  8013c4:	e0bfb617 	ldw	r2,-296(fp)
  8013c8:	10800044 	addi	r2,r2,1
  8013cc:	e0bfb615 	stw	r2,-296(fp)
  8013d0:	e0bffe17 	ldw	r2,-8(fp)
  8013d4:	10c00017 	ldw	r3,0(r2)
  8013d8:	e0bfb617 	ldw	r2,-296(fp)
  8013dc:	10ffe916 	blt	r2,r3,801384 <pgmread2+0x3f0>
      }
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
  8013e0:	e0bfb517 	ldw	r2,-300(fp)
  8013e4:	10800044 	addi	r2,r2,1
  8013e8:	e0bfb515 	stw	r2,-300(fp)
  8013ec:	e0bffd17 	ldw	r2,-12(fp)
  8013f0:	10c00017 	ldw	r3,0(r2)
  8013f4:	e0bfb517 	ldw	r2,-300(fp)
  8013f8:	10ffe016 	blt	r2,r3,80137c <pgmread2+0x3e8>
        fscanf(file, "%d", &int_tmp);
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }
  fclose(file);
  8013fc:	e13fb917 	ldw	r4,-284(fp)
  801400:	08027700 	call	802770 <fclose>
  return (data);
  801404:	e0bfb217 	ldw	r2,-312(fp)
  801408:	e0bfff15 	stw	r2,-4(fp)
  80140c:	e0bfff17 	ldw	r2,-4(fp)
}
  801410:	e037883a 	mov	sp,fp
  801414:	dfc00217 	ldw	ra,8(sp)
  801418:	df000117 	ldw	fp,4(sp)
  80141c:	dc000017 	ldw	r16,0(sp)
  801420:	dec00304 	addi	sp,sp,12
  801424:	f800283a 	ret

00801428 <pgmwrite2>:
 *
 * NOTE: this function assumes input bufefr "data" is in row dominant format.
 */

int pgmwrite2(char* filename, int row, int col, unsigned char** data,
              char* comment_string, int binsave) {
  801428:	deffb104 	addi	sp,sp,-316
  80142c:	dfc04e15 	stw	ra,312(sp)
  801430:	df004d15 	stw	fp,308(sp)
  801434:	df004d04 	addi	fp,sp,308
  801438:	e13ffb15 	stw	r4,-20(fp)
  80143c:	e17ffc15 	stw	r5,-16(fp)
  801440:	e1bffd15 	stw	r6,-12(fp)
  801444:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  801448:	e13ffb17 	ldw	r4,-20(fp)
  80144c:	01402074 	movhi	r5,129
  801450:	2952d304 	addi	r5,r5,19276
  801454:	08030300 	call	803030 <fopen>
  801458:	e0bfba15 	stw	r2,-280(fp)
  80145c:	e0bfba17 	ldw	r2,-280(fp)
  801460:	1004c03a 	cmpne	r2,r2,zero
  801464:	1000061e 	bne	r2,zero,801480 <pgmwrite2+0x58>
    printf("ERROR: file open failed\n");
  801468:	01002074 	movhi	r4,129
  80146c:	21129704 	addi	r4,r4,19036
  801470:	0804b8c0 	call	804b8c <puts>
    return (-1);
  801474:	00bfffc4 	movi	r2,-1
  801478:	e0bfff15 	stw	r2,-4(fp)
  80147c:	0000b906 	br	801764 <pgmwrite2+0x33c>
  }
  if (binsave == 1) {
  801480:	e0800317 	ldw	r2,12(fp)
  801484:	10800058 	cmpnei	r2,r2,1
  801488:	1000071e 	bne	r2,zero,8014a8 <pgmwrite2+0x80>
    fprintf(file, "P5\n");
  80148c:	01002074 	movhi	r4,129
  801490:	2112d404 	addi	r4,r4,19280
  801494:	01400044 	movi	r5,1
  801498:	018000c4 	movi	r6,3
  80149c:	e1ffba17 	ldw	r7,-280(fp)
  8014a0:	0803ea40 	call	803ea4 <fwrite>
  8014a4:	00000606 	br	8014c0 <pgmwrite2+0x98>
  } else {
    fprintf(file, "P2\n");
  8014a8:	01002074 	movhi	r4,129
  8014ac:	2112d504 	addi	r4,r4,19284
  8014b0:	01400044 	movi	r5,1
  8014b4:	018000c4 	movi	r6,3
  8014b8:	e1ffba17 	ldw	r7,-280(fp)
  8014bc:	0803ea40 	call	803ea4 <fwrite>
  }

  if (comment_string != NULL) {
  8014c0:	e0800217 	ldw	r2,8(fp)
  8014c4:	1005003a 	cmpeq	r2,r2,zero
  8014c8:	1000051e 	bne	r2,zero,8014e0 <pgmwrite2+0xb8>
    fprintf(file, "# %s \n", comment_string);
  8014cc:	e13fba17 	ldw	r4,-280(fp)
  8014d0:	01402074 	movhi	r5,129
  8014d4:	2952d604 	addi	r5,r5,19288
  8014d8:	e1800217 	ldw	r6,8(fp)
  8014dc:	080304c0 	call	80304c <fprintf>
  }
  fprintf(file, "%d %d \n", col, row);
  8014e0:	e13fba17 	ldw	r4,-280(fp)
  8014e4:	01402074 	movhi	r5,129
  8014e8:	2952d804 	addi	r5,r5,19296
  8014ec:	e1bffd17 	ldw	r6,-12(fp)
  8014f0:	e1fffc17 	ldw	r7,-16(fp)
  8014f4:	080304c0 	call	80304c <fprintf>
  maxval = 0;
  8014f8:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++) {
  8014fc:	e03fb615 	stw	zero,-296(fp)
  801500:	00002406 	br	801594 <pgmwrite2+0x16c>
    for (j = 0; j < col; j++) {
  801504:	e03fb515 	stw	zero,-300(fp)
  801508:	00001c06 	br	80157c <pgmwrite2+0x154>
      if ((int)data[i][j] > maxval) {
  80150c:	e0bfb617 	ldw	r2,-296(fp)
  801510:	1085883a 	add	r2,r2,r2
  801514:	1085883a 	add	r2,r2,r2
  801518:	1007883a 	mov	r3,r2
  80151c:	e0bffe17 	ldw	r2,-8(fp)
  801520:	1885883a 	add	r2,r3,r2
  801524:	10c00017 	ldw	r3,0(r2)
  801528:	e0bfb517 	ldw	r2,-300(fp)
  80152c:	1885883a 	add	r2,r3,r2
  801530:	10800003 	ldbu	r2,0(r2)
  801534:	10c03fcc 	andi	r3,r2,255
  801538:	e0bfb917 	ldw	r2,-284(fp)
  80153c:	10c00c0e 	bge	r2,r3,801570 <pgmwrite2+0x148>
        maxval = (int)data[i][j];
  801540:	e0bfb617 	ldw	r2,-296(fp)
  801544:	1085883a 	add	r2,r2,r2
  801548:	1085883a 	add	r2,r2,r2
  80154c:	1007883a 	mov	r3,r2
  801550:	e0bffe17 	ldw	r2,-8(fp)
  801554:	1885883a 	add	r2,r3,r2
  801558:	10c00017 	ldw	r3,0(r2)
  80155c:	e0bfb517 	ldw	r2,-300(fp)
  801560:	1885883a 	add	r2,r3,r2
  801564:	10800003 	ldbu	r2,0(r2)
  801568:	10803fcc 	andi	r2,r2,255
  80156c:	e0bfb915 	stw	r2,-284(fp)
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
  801570:	e0bfb517 	ldw	r2,-300(fp)
  801574:	10800044 	addi	r2,r2,1
  801578:	e0bfb515 	stw	r2,-300(fp)
  80157c:	e0ffb517 	ldw	r3,-300(fp)
  801580:	e0bffd17 	ldw	r2,-12(fp)
  801584:	18bfe116 	blt	r3,r2,80150c <pgmwrite2+0xe4>
  if (comment_string != NULL) {
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
  801588:	e0bfb617 	ldw	r2,-296(fp)
  80158c:	10800044 	addi	r2,r2,1
  801590:	e0bfb615 	stw	r2,-296(fp)
  801594:	e0ffb617 	ldw	r3,-296(fp)
  801598:	e0bffc17 	ldw	r2,-16(fp)
  80159c:	18bfd916 	blt	r3,r2,801504 <pgmwrite2+0xdc>
      if ((int)data[i][j] > maxval) {
        maxval = (int)data[i][j];
      }
    }
  }
  fprintf(file, "%d\n", maxval);
  8015a0:	e13fba17 	ldw	r4,-280(fp)
  8015a4:	01402074 	movhi	r5,129
  8015a8:	2952f304 	addi	r5,r5,19404
  8015ac:	e1bfb917 	ldw	r6,-284(fp)
  8015b0:	080304c0 	call	80304c <fprintf>
  if (binsave == 1) {
  8015b4:	e0800317 	ldw	r2,12(fp)
  8015b8:	10800058 	cmpnei	r2,r2,1
  8015bc:	1000431e 	bne	r2,zero,8016cc <pgmwrite2+0x2a4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
  8015c0:	e13ffc17 	ldw	r4,-16(fp)
  8015c4:	e17ffd17 	ldw	r5,-12(fp)
  8015c8:	0801fec0 	call	801fec <__mulsi3>
  8015cc:	1009883a 	mov	r4,r2
  8015d0:	01400044 	movi	r5,1
  8015d4:	08024f00 	call	8024f0 <calloc>
  8015d8:	e0bfb315 	stw	r2,-308(fp)
  8015dc:	e0bfb317 	ldw	r2,-308(fp)
  8015e0:	1004c03a 	cmpne	r2,r2,zero
  8015e4:	1000051e 	bne	r2,zero,8015fc <pgmwrite2+0x1d4>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  8015e8:	01002074 	movhi	r4,129
  8015ec:	2112b004 	addi	r4,r4,19136
  8015f0:	0804b8c0 	call	804b8c <puts>
      exit(-1);
  8015f4:	013fffc4 	movi	r4,-1
  8015f8:	08026280 	call	802628 <exit>
    }
    for (i = 0; i < row; i++) {
  8015fc:	e03fb615 	stw	zero,-296(fp)
  801600:	00001f06 	br	801680 <pgmwrite2+0x258>
      for (j = 0; j < col; j++) {
  801604:	e03fb515 	stw	zero,-300(fp)
  801608:	00001706 	br	801668 <pgmwrite2+0x240>
        temp[(i * col) + j] = (unsigned char)data[i][j];
  80160c:	e13fb617 	ldw	r4,-296(fp)
  801610:	e17ffd17 	ldw	r5,-12(fp)
  801614:	0801fec0 	call	801fec <__mulsi3>
  801618:	1007883a 	mov	r3,r2
  80161c:	e0bfb517 	ldw	r2,-300(fp)
  801620:	1885883a 	add	r2,r3,r2
  801624:	1007883a 	mov	r3,r2
  801628:	e0bfb317 	ldw	r2,-308(fp)
  80162c:	1889883a 	add	r4,r3,r2
  801630:	e0bfb617 	ldw	r2,-296(fp)
  801634:	1085883a 	add	r2,r2,r2
  801638:	1085883a 	add	r2,r2,r2
  80163c:	1007883a 	mov	r3,r2
  801640:	e0bffe17 	ldw	r2,-8(fp)
  801644:	1885883a 	add	r2,r3,r2
  801648:	10c00017 	ldw	r3,0(r2)
  80164c:	e0bfb517 	ldw	r2,-300(fp)
  801650:	1885883a 	add	r2,r3,r2
  801654:	10800003 	ldbu	r2,0(r2)
  801658:	20800005 	stb	r2,0(r4)
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
  80165c:	e0bfb517 	ldw	r2,-300(fp)
  801660:	10800044 	addi	r2,r2,1
  801664:	e0bfb515 	stw	r2,-300(fp)
  801668:	e0ffb517 	ldw	r3,-300(fp)
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	18bfe616 	blt	r3,r2,80160c <pgmwrite2+0x1e4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
  801674:	e0bfb617 	ldw	r2,-296(fp)
  801678:	10800044 	addi	r2,r2,1
  80167c:	e0bfb615 	stw	r2,-296(fp)
  801680:	e0ffb617 	ldw	r3,-296(fp)
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	18bfde16 	blt	r3,r2,801604 <pgmwrite2+0x1dc>
      for (j = 0; j < col; j++) {
        temp[(i * col) + j] = (unsigned char)data[i][j];
      }
    }
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
  80168c:	e13ffc17 	ldw	r4,-16(fp)
  801690:	e17ffd17 	ldw	r5,-12(fp)
  801694:	0801fec0 	call	801fec <__mulsi3>
  801698:	100d883a 	mov	r6,r2
  80169c:	e13fb317 	ldw	r4,-308(fp)
  8016a0:	01400044 	movi	r5,1
  8016a4:	e1ffba17 	ldw	r7,-280(fp)
  8016a8:	0803ea40 	call	803ea4 <fwrite>
  8016ac:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  8016b0:	01002074 	movhi	r4,129
  8016b4:	2112dc04 	addi	r4,r4,19312
  8016b8:	e17ffb17 	ldw	r5,-20(fp)
  8016bc:	0804a740 	call	804a74 <printf>
    free(temp);
  8016c0:	e13fb317 	ldw	r4,-308(fp)
  8016c4:	08040780 	call	804078 <free>
  8016c8:	00002306 	br	801758 <pgmwrite2+0x330>
  } else {
    printf("Writing to %s as ascii.\n", filename);
  8016cc:	01002074 	movhi	r4,129
  8016d0:	2112e304 	addi	r4,r4,19340
  8016d4:	e17ffb17 	ldw	r5,-20(fp)
  8016d8:	0804a740 	call	804a74 <printf>
    for (j = 0; j < row; j++) {
  8016dc:	e03fb515 	stw	zero,-300(fp)
  8016e0:	00001a06 	br	80174c <pgmwrite2+0x324>
      for (i = 0; i < col; i++) {
  8016e4:	e03fb615 	stw	zero,-296(fp)
  8016e8:	00001206 	br	801734 <pgmwrite2+0x30c>
        fprintf(file, "%d ", (int)data[j][i]);
  8016ec:	e0bfb517 	ldw	r2,-300(fp)
  8016f0:	1085883a 	add	r2,r2,r2
  8016f4:	1085883a 	add	r2,r2,r2
  8016f8:	1007883a 	mov	r3,r2
  8016fc:	e0bffe17 	ldw	r2,-8(fp)
  801700:	1885883a 	add	r2,r3,r2
  801704:	10c00017 	ldw	r3,0(r2)
  801708:	e0bfb617 	ldw	r2,-296(fp)
  80170c:	1885883a 	add	r2,r3,r2
  801710:	10800003 	ldbu	r2,0(r2)
  801714:	11803fcc 	andi	r6,r2,255
  801718:	e13fba17 	ldw	r4,-280(fp)
  80171c:	01402074 	movhi	r5,129
  801720:	2952ea04 	addi	r5,r5,19368
  801724:	080304c0 	call	80304c <fprintf>
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
      for (i = 0; i < col; i++) {
  801728:	e0bfb617 	ldw	r2,-296(fp)
  80172c:	10800044 	addi	r2,r2,1
  801730:	e0bfb615 	stw	r2,-296(fp)
  801734:	e0ffb617 	ldw	r3,-296(fp)
  801738:	e0bffd17 	ldw	r2,-12(fp)
  80173c:	18bfeb16 	blt	r3,r2,8016ec <pgmwrite2+0x2c4>
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
  801740:	e0bfb517 	ldw	r2,-300(fp)
  801744:	10800044 	addi	r2,r2,1
  801748:	e0bfb515 	stw	r2,-300(fp)
  80174c:	e0ffb517 	ldw	r3,-300(fp)
  801750:	e0bffc17 	ldw	r2,-16(fp)
  801754:	18bfe316 	blt	r3,r2,8016e4 <pgmwrite2+0x2bc>
      for (i = 0; i < col; i++) {
        fprintf(file, "%d ", (int)data[j][i]);
      }
    }
  }
  fclose(file);
  801758:	e13fba17 	ldw	r4,-280(fp)
  80175c:	08027700 	call	802770 <fclose>
  return (0);
  801760:	e03fff15 	stw	zero,-4(fp)
  801764:	e0bfff17 	ldw	r2,-4(fp)
}
  801768:	e037883a 	mov	sp,fp
  80176c:	dfc00117 	ldw	ra,4(sp)
  801770:	df000017 	ldw	fp,0(sp)
  801774:	dec00204 	addi	sp,sp,8
  801778:	f800283a 	ret

0080177c <ppmwrite2>:

int ppmwrite2(char* filename, int row, int col, unsigned char** datar,
              unsigned char** datag, unsigned char** datab,
              char* comment_string, int binsave) {
  80177c:	deffb004 	addi	sp,sp,-320
  801780:	dfc04f15 	stw	ra,316(sp)
  801784:	df004e15 	stw	fp,312(sp)
  801788:	df004e04 	addi	fp,sp,312
  80178c:	e13ffb15 	stw	r4,-20(fp)
  801790:	e17ffc15 	stw	r5,-16(fp)
  801794:	e1bffd15 	stw	r6,-12(fp)
  801798:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  80179c:	e13ffb17 	ldw	r4,-20(fp)
  8017a0:	01402074 	movhi	r5,129
  8017a4:	2952d304 	addi	r5,r5,19276
  8017a8:	08030300 	call	803030 <fopen>
  8017ac:	e0bfba15 	stw	r2,-280(fp)
  8017b0:	e0bfba17 	ldw	r2,-280(fp)
  8017b4:	1004c03a 	cmpne	r2,r2,zero
  8017b8:	1000061e 	bne	r2,zero,8017d4 <ppmwrite2+0x58>
    printf("ERROR: file open failed\n");
  8017bc:	01002074 	movhi	r4,129
  8017c0:	21129704 	addi	r4,r4,19036
  8017c4:	0804b8c0 	call	804b8c <puts>
    return (-1);
  8017c8:	00bfffc4 	movi	r2,-1
  8017cc:	e0bfff15 	stw	r2,-4(fp)
  8017d0:	00010506 	br	801be8 <ppmwrite2+0x46c>
  }

  if (binsave == 1)
  8017d4:	e0800517 	ldw	r2,20(fp)
  8017d8:	10800058 	cmpnei	r2,r2,1
  8017dc:	1000071e 	bne	r2,zero,8017fc <ppmwrite2+0x80>
    fprintf(file, "P6\n");
  8017e0:	01002074 	movhi	r4,129
  8017e4:	2112f404 	addi	r4,r4,19408
  8017e8:	01400044 	movi	r5,1
  8017ec:	018000c4 	movi	r6,3
  8017f0:	e1ffba17 	ldw	r7,-280(fp)
  8017f4:	0803ea40 	call	803ea4 <fwrite>
  8017f8:	00000606 	br	801814 <ppmwrite2+0x98>
  else
    fprintf(file, "P3\n");
  8017fc:	01002074 	movhi	r4,129
  801800:	2112f504 	addi	r4,r4,19412
  801804:	01400044 	movi	r5,1
  801808:	018000c4 	movi	r6,3
  80180c:	e1ffba17 	ldw	r7,-280(fp)
  801810:	0803ea40 	call	803ea4 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  801814:	e0800417 	ldw	r2,16(fp)
  801818:	1005003a 	cmpeq	r2,r2,zero
  80181c:	1000051e 	bne	r2,zero,801834 <ppmwrite2+0xb8>
  801820:	e13fba17 	ldw	r4,-280(fp)
  801824:	01402074 	movhi	r5,129
  801828:	2952d604 	addi	r5,r5,19288
  80182c:	e1800417 	ldw	r6,16(fp)
  801830:	080304c0 	call	80304c <fprintf>

  fprintf(file, "%d %d \n", col, row);
  801834:	e13fba17 	ldw	r4,-280(fp)
  801838:	01402074 	movhi	r5,129
  80183c:	2952d804 	addi	r5,r5,19296
  801840:	e1bffd17 	ldw	r6,-12(fp)
  801844:	e1fffc17 	ldw	r7,-16(fp)
  801848:	080304c0 	call	80304c <fprintf>

  maxval = 0;
  80184c:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++)
  801850:	e03fb615 	stw	zero,-296(fp)
  801854:	00002406 	br	8018e8 <ppmwrite2+0x16c>
    for (j = 0; j < col; j++)
  801858:	e03fb515 	stw	zero,-300(fp)
  80185c:	00001c06 	br	8018d0 <ppmwrite2+0x154>
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];
  801860:	e0bfb617 	ldw	r2,-296(fp)
  801864:	1085883a 	add	r2,r2,r2
  801868:	1085883a 	add	r2,r2,r2
  80186c:	1007883a 	mov	r3,r2
  801870:	e0bffe17 	ldw	r2,-8(fp)
  801874:	1885883a 	add	r2,r3,r2
  801878:	10c00017 	ldw	r3,0(r2)
  80187c:	e0bfb517 	ldw	r2,-300(fp)
  801880:	1885883a 	add	r2,r3,r2
  801884:	10800003 	ldbu	r2,0(r2)
  801888:	10c03fcc 	andi	r3,r2,255
  80188c:	e0bfb917 	ldw	r2,-284(fp)
  801890:	10c00c0e 	bge	r2,r3,8018c4 <ppmwrite2+0x148>
  801894:	e0bfb617 	ldw	r2,-296(fp)
  801898:	1085883a 	add	r2,r2,r2
  80189c:	1085883a 	add	r2,r2,r2
  8018a0:	1007883a 	mov	r3,r2
  8018a4:	e0bffe17 	ldw	r2,-8(fp)
  8018a8:	1885883a 	add	r2,r3,r2
  8018ac:	10c00017 	ldw	r3,0(r2)
  8018b0:	e0bfb517 	ldw	r2,-300(fp)
  8018b4:	1885883a 	add	r2,r3,r2
  8018b8:	10800003 	ldbu	r2,0(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
    for (j = 0; j < col; j++)
  8018c4:	e0bfb517 	ldw	r2,-300(fp)
  8018c8:	10800044 	addi	r2,r2,1
  8018cc:	e0bfb515 	stw	r2,-300(fp)
  8018d0:	e0ffb517 	ldw	r3,-300(fp)
  8018d4:	e0bffd17 	ldw	r2,-12(fp)
  8018d8:	18bfe116 	blt	r3,r2,801860 <ppmwrite2+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
  8018dc:	e0bfb617 	ldw	r2,-296(fp)
  8018e0:	10800044 	addi	r2,r2,1
  8018e4:	e0bfb615 	stw	r2,-296(fp)
  8018e8:	e0ffb617 	ldw	r3,-296(fp)
  8018ec:	e0bffc17 	ldw	r2,-16(fp)
  8018f0:	18bfd916 	blt	r3,r2,801858 <ppmwrite2+0xdc>
    for (j = 0; j < col; j++)
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];

  maxval = 255;
  8018f4:	00803fc4 	movi	r2,255
  8018f8:	e0bfb915 	stw	r2,-284(fp)
  fprintf(file, "%d\n", maxval);
  8018fc:	e13fba17 	ldw	r4,-280(fp)
  801900:	01402074 	movhi	r5,129
  801904:	2952f304 	addi	r5,r5,19404
  801908:	e1bfb917 	ldw	r6,-284(fp)
  80190c:	080304c0 	call	80304c <fprintf>

  if (binsave == 1) {
  801910:	e0800517 	ldw	r2,20(fp)
  801914:	10800058 	cmpnei	r2,r2,1
  801918:	1000761e 	bne	r2,zero,801af4 <ppmwrite2+0x378>
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));
  80191c:	e13ffc17 	ldw	r4,-16(fp)
  801920:	e17ffd17 	ldw	r5,-12(fp)
  801924:	0801fec0 	call	801fec <__mulsi3>
  801928:	1007883a 	mov	r3,r2
  80192c:	1805883a 	mov	r2,r3
  801930:	1085883a 	add	r2,r2,r2
  801934:	10c5883a 	add	r2,r2,r3
  801938:	1009883a 	mov	r4,r2
  80193c:	01400044 	movi	r5,1
  801940:	08024f00 	call	8024f0 <calloc>
  801944:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < row; i++)
  801948:	e03fb615 	stw	zero,-296(fp)
  80194c:	00005206 	br	801a98 <ppmwrite2+0x31c>
      for (j = 0; j < col; j++) {
  801950:	e03fb515 	stw	zero,-300(fp)
  801954:	00004a06 	br	801a80 <ppmwrite2+0x304>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
  801958:	e13fb617 	ldw	r4,-296(fp)
  80195c:	e17ffd17 	ldw	r5,-12(fp)
  801960:	0801fec0 	call	801fec <__mulsi3>
  801964:	1007883a 	mov	r3,r2
  801968:	e0bfb517 	ldw	r2,-300(fp)
  80196c:	1887883a 	add	r3,r3,r2
  801970:	1805883a 	mov	r2,r3
  801974:	1085883a 	add	r2,r2,r2
  801978:	10c5883a 	add	r2,r2,r3
  80197c:	1007883a 	mov	r3,r2
  801980:	e0bfb317 	ldw	r2,-308(fp)
  801984:	1889883a 	add	r4,r3,r2
  801988:	e0bfb617 	ldw	r2,-296(fp)
  80198c:	1085883a 	add	r2,r2,r2
  801990:	1085883a 	add	r2,r2,r2
  801994:	1007883a 	mov	r3,r2
  801998:	e0bffe17 	ldw	r2,-8(fp)
  80199c:	1885883a 	add	r2,r3,r2
  8019a0:	10c00017 	ldw	r3,0(r2)
  8019a4:	e0bfb517 	ldw	r2,-300(fp)
  8019a8:	1885883a 	add	r2,r3,r2
  8019ac:	10800003 	ldbu	r2,0(r2)
  8019b0:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
  8019b4:	e13fb617 	ldw	r4,-296(fp)
  8019b8:	e17ffd17 	ldw	r5,-12(fp)
  8019bc:	0801fec0 	call	801fec <__mulsi3>
  8019c0:	1007883a 	mov	r3,r2
  8019c4:	e0bfb517 	ldw	r2,-300(fp)
  8019c8:	1887883a 	add	r3,r3,r2
  8019cc:	1805883a 	mov	r2,r3
  8019d0:	1085883a 	add	r2,r2,r2
  8019d4:	10c5883a 	add	r2,r2,r3
  8019d8:	1007883a 	mov	r3,r2
  8019dc:	e0bfb317 	ldw	r2,-308(fp)
  8019e0:	1885883a 	add	r2,r3,r2
  8019e4:	11000044 	addi	r4,r2,1
  8019e8:	e0bfb617 	ldw	r2,-296(fp)
  8019ec:	1085883a 	add	r2,r2,r2
  8019f0:	1085883a 	add	r2,r2,r2
  8019f4:	1007883a 	mov	r3,r2
  8019f8:	e0800217 	ldw	r2,8(fp)
  8019fc:	1885883a 	add	r2,r3,r2
  801a00:	10c00017 	ldw	r3,0(r2)
  801a04:	e0bfb517 	ldw	r2,-300(fp)
  801a08:	1885883a 	add	r2,r3,r2
  801a0c:	10800003 	ldbu	r2,0(r2)
  801a10:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
  801a14:	e13fb617 	ldw	r4,-296(fp)
  801a18:	e17ffd17 	ldw	r5,-12(fp)
  801a1c:	0801fec0 	call	801fec <__mulsi3>
  801a20:	1007883a 	mov	r3,r2
  801a24:	e0bfb517 	ldw	r2,-300(fp)
  801a28:	1887883a 	add	r3,r3,r2
  801a2c:	1805883a 	mov	r2,r3
  801a30:	1085883a 	add	r2,r2,r2
  801a34:	10c5883a 	add	r2,r2,r3
  801a38:	1007883a 	mov	r3,r2
  801a3c:	e0bfb317 	ldw	r2,-308(fp)
  801a40:	1885883a 	add	r2,r3,r2
  801a44:	11000084 	addi	r4,r2,2
  801a48:	e0bfb617 	ldw	r2,-296(fp)
  801a4c:	1085883a 	add	r2,r2,r2
  801a50:	1085883a 	add	r2,r2,r2
  801a54:	1007883a 	mov	r3,r2
  801a58:	e0800317 	ldw	r2,12(fp)
  801a5c:	1885883a 	add	r2,r3,r2
  801a60:	10c00017 	ldw	r3,0(r2)
  801a64:	e0bfb517 	ldw	r2,-300(fp)
  801a68:	1885883a 	add	r2,r3,r2
  801a6c:	10800003 	ldbu	r2,0(r2)
  801a70:	20800005 	stb	r2,0(r4)

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
      for (j = 0; j < col; j++) {
  801a74:	e0bfb517 	ldw	r2,-300(fp)
  801a78:	10800044 	addi	r2,r2,1
  801a7c:	e0bfb515 	stw	r2,-300(fp)
  801a80:	e0ffb517 	ldw	r3,-300(fp)
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	18bfb316 	blt	r3,r2,801958 <ppmwrite2+0x1dc>
  fprintf(file, "%d\n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
  801a8c:	e0bfb617 	ldw	r2,-296(fp)
  801a90:	10800044 	addi	r2,r2,1
  801a94:	e0bfb615 	stw	r2,-296(fp)
  801a98:	e0ffb617 	ldw	r3,-296(fp)
  801a9c:	e0bffc17 	ldw	r2,-16(fp)
  801aa0:	18bfab16 	blt	r3,r2,801950 <ppmwrite2+0x1d4>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
      }

    nread = fwrite((void*)temp, sizeof(unsigned char), (3 * row * col), file);
  801aa4:	e13ffc17 	ldw	r4,-16(fp)
  801aa8:	e17ffd17 	ldw	r5,-12(fp)
  801aac:	0801fec0 	call	801fec <__mulsi3>
  801ab0:	1007883a 	mov	r3,r2
  801ab4:	1805883a 	mov	r2,r3
  801ab8:	1085883a 	add	r2,r2,r2
  801abc:	10c5883a 	add	r2,r2,r3
  801ac0:	100d883a 	mov	r6,r2
  801ac4:	e13fb317 	ldw	r4,-308(fp)
  801ac8:	01400044 	movi	r5,1
  801acc:	e1ffba17 	ldw	r7,-280(fp)
  801ad0:	0803ea40 	call	803ea4 <fwrite>
  801ad4:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801ad8:	01002074 	movhi	r4,129
  801adc:	2112dc04 	addi	r4,r4,19312
  801ae0:	e17ffb17 	ldw	r5,-20(fp)
  801ae4:	0804a740 	call	804a74 <printf>
    free(temp);
  801ae8:	e13fb317 	ldw	r4,-308(fp)
  801aec:	08040780 	call	804078 <free>
  801af0:	00003a06 	br	801bdc <ppmwrite2+0x460>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  801af4:	01002074 	movhi	r4,129
  801af8:	2112e304 	addi	r4,r4,19340
  801afc:	e17ffb17 	ldw	r5,-20(fp)
  801b00:	0804a740 	call	804a74 <printf>

    for (j = 0; j < row; j++)
  801b04:	e03fb515 	stw	zero,-300(fp)
  801b08:	00003106 	br	801bd0 <ppmwrite2+0x454>
      for (i = 0; i < col; i++)
  801b0c:	e03fb615 	stw	zero,-296(fp)
  801b10:	00002906 	br	801bb8 <ppmwrite2+0x43c>
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
  801b14:	e0bfb517 	ldw	r2,-300(fp)
  801b18:	1085883a 	add	r2,r2,r2
  801b1c:	1085883a 	add	r2,r2,r2
  801b20:	1007883a 	mov	r3,r2
  801b24:	e0bffe17 	ldw	r2,-8(fp)
  801b28:	1885883a 	add	r2,r3,r2
  801b2c:	10c00017 	ldw	r3,0(r2)
  801b30:	e0bfb617 	ldw	r2,-296(fp)
  801b34:	1885883a 	add	r2,r3,r2
  801b38:	10800003 	ldbu	r2,0(r2)
  801b3c:	11803fcc 	andi	r6,r2,255
  801b40:	e0bfb517 	ldw	r2,-300(fp)
  801b44:	1085883a 	add	r2,r2,r2
  801b48:	1085883a 	add	r2,r2,r2
  801b4c:	1007883a 	mov	r3,r2
  801b50:	e0800217 	ldw	r2,8(fp)
  801b54:	1885883a 	add	r2,r3,r2
  801b58:	10c00017 	ldw	r3,0(r2)
  801b5c:	e0bfb617 	ldw	r2,-296(fp)
  801b60:	1885883a 	add	r2,r3,r2
  801b64:	10800003 	ldbu	r2,0(r2)
  801b68:	11c03fcc 	andi	r7,r2,255
  801b6c:	e0bfb517 	ldw	r2,-300(fp)
  801b70:	1085883a 	add	r2,r2,r2
  801b74:	1085883a 	add	r2,r2,r2
  801b78:	1007883a 	mov	r3,r2
  801b7c:	e0800317 	ldw	r2,12(fp)
  801b80:	1885883a 	add	r2,r3,r2
  801b84:	10c00017 	ldw	r3,0(r2)
  801b88:	e0bfb617 	ldw	r2,-296(fp)
  801b8c:	1885883a 	add	r2,r3,r2
  801b90:	10800003 	ldbu	r2,0(r2)
  801b94:	10803fcc 	andi	r2,r2,255
  801b98:	d8800015 	stw	r2,0(sp)
  801b9c:	e13fba17 	ldw	r4,-280(fp)
  801ba0:	01402074 	movhi	r5,129
  801ba4:	2952f604 	addi	r5,r5,19416
  801ba8:	080304c0 	call	80304c <fprintf>

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
      for (i = 0; i < col; i++)
  801bac:	e0bfb617 	ldw	r2,-296(fp)
  801bb0:	10800044 	addi	r2,r2,1
  801bb4:	e0bfb615 	stw	r2,-296(fp)
  801bb8:	e0ffb617 	ldw	r3,-296(fp)
  801bbc:	e0bffd17 	ldw	r2,-12(fp)
  801bc0:	18bfd416 	blt	r3,r2,801b14 <ppmwrite2+0x398>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
  801bc4:	e0bfb517 	ldw	r2,-300(fp)
  801bc8:	10800044 	addi	r2,r2,1
  801bcc:	e0bfb515 	stw	r2,-300(fp)
  801bd0:	e0ffb517 	ldw	r3,-300(fp)
  801bd4:	e0bffc17 	ldw	r2,-16(fp)
  801bd8:	18bfcc16 	blt	r3,r2,801b0c <ppmwrite2+0x390>
      for (i = 0; i < col; i++)
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
                (int)datab[j][i]);
  }

  fclose(file);
  801bdc:	e13fba17 	ldw	r4,-280(fp)
  801be0:	08027700 	call	802770 <fclose>
  return (0);
  801be4:	e03fff15 	stw	zero,-4(fp)
  801be8:	e0bfff17 	ldw	r2,-4(fp)
}
  801bec:	e037883a 	mov	sp,fp
  801bf0:	dfc00117 	ldw	ra,4(sp)
  801bf4:	df000017 	ldw	fp,0(sp)
  801bf8:	dec00204 	addi	sp,sp,8
  801bfc:	f800283a 	ret

00801c00 <__divdf3>:
  801c00:	deffed04 	addi	sp,sp,-76
  801c04:	dcc01115 	stw	r19,68(sp)
  801c08:	dcc00404 	addi	r19,sp,16
  801c0c:	2011883a 	mov	r8,r4
  801c10:	2813883a 	mov	r9,r5
  801c14:	dc000e15 	stw	r16,56(sp)
  801c18:	d809883a 	mov	r4,sp
  801c1c:	980b883a 	mov	r5,r19
  801c20:	dc000904 	addi	r16,sp,36
  801c24:	dfc01215 	stw	ra,72(sp)
  801c28:	da400115 	stw	r9,4(sp)
  801c2c:	d9c00315 	stw	r7,12(sp)
  801c30:	da000015 	stw	r8,0(sp)
  801c34:	d9800215 	stw	r6,8(sp)
  801c38:	dc801015 	stw	r18,64(sp)
  801c3c:	dc400f15 	stw	r17,60(sp)
  801c40:	08023b80 	call	8023b8 <__unpack_d>
  801c44:	d9000204 	addi	r4,sp,8
  801c48:	800b883a 	mov	r5,r16
  801c4c:	08023b80 	call	8023b8 <__unpack_d>
  801c50:	d9000417 	ldw	r4,16(sp)
  801c54:	00800044 	movi	r2,1
  801c58:	11000b2e 	bgeu	r2,r4,801c88 <__divdf3+0x88>
  801c5c:	d9400917 	ldw	r5,36(sp)
  801c60:	1140762e 	bgeu	r2,r5,801e3c <__divdf3+0x23c>
  801c64:	d8800517 	ldw	r2,20(sp)
  801c68:	d8c00a17 	ldw	r3,40(sp)
  801c6c:	01800104 	movi	r6,4
  801c70:	10c4f03a 	xor	r2,r2,r3
  801c74:	d8800515 	stw	r2,20(sp)
  801c78:	21800226 	beq	r4,r6,801c84 <__divdf3+0x84>
  801c7c:	00800084 	movi	r2,2
  801c80:	2080141e 	bne	r4,r2,801cd4 <__divdf3+0xd4>
  801c84:	29000926 	beq	r5,r4,801cac <__divdf3+0xac>
  801c88:	9809883a 	mov	r4,r19
  801c8c:	08020a40 	call	8020a4 <__pack_d>
  801c90:	dfc01217 	ldw	ra,72(sp)
  801c94:	dcc01117 	ldw	r19,68(sp)
  801c98:	dc801017 	ldw	r18,64(sp)
  801c9c:	dc400f17 	ldw	r17,60(sp)
  801ca0:	dc000e17 	ldw	r16,56(sp)
  801ca4:	dec01304 	addi	sp,sp,76
  801ca8:	f800283a 	ret
  801cac:	01002074 	movhi	r4,129
  801cb0:	2112f904 	addi	r4,r4,19428
  801cb4:	08020a40 	call	8020a4 <__pack_d>
  801cb8:	dfc01217 	ldw	ra,72(sp)
  801cbc:	dcc01117 	ldw	r19,68(sp)
  801cc0:	dc801017 	ldw	r18,64(sp)
  801cc4:	dc400f17 	ldw	r17,60(sp)
  801cc8:	dc000e17 	ldw	r16,56(sp)
  801ccc:	dec01304 	addi	sp,sp,76
  801cd0:	f800283a 	ret
  801cd4:	29805b26 	beq	r5,r6,801e44 <__divdf3+0x244>
  801cd8:	28802d26 	beq	r5,r2,801d90 <__divdf3+0x190>
  801cdc:	d8c00617 	ldw	r3,24(sp)
  801ce0:	d8800b17 	ldw	r2,44(sp)
  801ce4:	d9c00817 	ldw	r7,32(sp)
  801ce8:	dc400d17 	ldw	r17,52(sp)
  801cec:	188bc83a 	sub	r5,r3,r2
  801cf0:	d9800717 	ldw	r6,28(sp)
  801cf4:	dc000c17 	ldw	r16,48(sp)
  801cf8:	d9400615 	stw	r5,24(sp)
  801cfc:	3c403836 	bltu	r7,r17,801de0 <__divdf3+0x1e0>
  801d00:	89c03626 	beq	r17,r7,801ddc <__divdf3+0x1dc>
  801d04:	0015883a 	mov	r10,zero
  801d08:	001d883a 	mov	r14,zero
  801d0c:	02c40034 	movhi	r11,4096
  801d10:	001f883a 	mov	r15,zero
  801d14:	003f883a 	mov	ra,zero
  801d18:	04800f44 	movi	r18,61
  801d1c:	00000f06 	br	801d5c <__divdf3+0x15c>
  801d20:	601d883a 	mov	r14,r12
  801d24:	681f883a 	mov	r15,r13
  801d28:	400d883a 	mov	r6,r8
  801d2c:	100f883a 	mov	r7,r2
  801d30:	3191883a 	add	r8,r6,r6
  801d34:	5808d07a 	srli	r4,r11,1
  801d38:	4185803a 	cmpltu	r2,r8,r6
  801d3c:	39d3883a 	add	r9,r7,r7
  801d40:	28c6b03a 	or	r3,r5,r3
  801d44:	1245883a 	add	r2,r2,r9
  801d48:	1815883a 	mov	r10,r3
  801d4c:	2017883a 	mov	r11,r4
  801d50:	400d883a 	mov	r6,r8
  801d54:	100f883a 	mov	r7,r2
  801d58:	fc801726 	beq	ra,r18,801db8 <__divdf3+0x1b8>
  801d5c:	580a97fa 	slli	r5,r11,31
  801d60:	5006d07a 	srli	r3,r10,1
  801d64:	ffc00044 	addi	ra,ra,1
  801d68:	3c7ff136 	bltu	r7,r17,801d30 <__divdf3+0x130>
  801d6c:	3411c83a 	sub	r8,r6,r16
  801d70:	3205803a 	cmpltu	r2,r6,r8
  801d74:	3c53c83a 	sub	r9,r7,r17
  801d78:	7298b03a 	or	r12,r14,r10
  801d7c:	7adab03a 	or	r13,r15,r11
  801d80:	4885c83a 	sub	r2,r9,r2
  801d84:	89ffe61e 	bne	r17,r7,801d20 <__divdf3+0x120>
  801d88:	343fe936 	bltu	r6,r16,801d30 <__divdf3+0x130>
  801d8c:	003fe406 	br	801d20 <__divdf3+0x120>
  801d90:	9809883a 	mov	r4,r19
  801d94:	d9800415 	stw	r6,16(sp)
  801d98:	08020a40 	call	8020a4 <__pack_d>
  801d9c:	dfc01217 	ldw	ra,72(sp)
  801da0:	dcc01117 	ldw	r19,68(sp)
  801da4:	dc801017 	ldw	r18,64(sp)
  801da8:	dc400f17 	ldw	r17,60(sp)
  801dac:	dc000e17 	ldw	r16,56(sp)
  801db0:	dec01304 	addi	sp,sp,76
  801db4:	f800283a 	ret
  801db8:	00803fc4 	movi	r2,255
  801dbc:	7090703a 	and	r8,r14,r2
  801dc0:	00802004 	movi	r2,128
  801dc4:	0007883a 	mov	r3,zero
  801dc8:	0013883a 	mov	r9,zero
  801dcc:	40800d26 	beq	r8,r2,801e04 <__divdf3+0x204>
  801dd0:	dbc00815 	stw	r15,32(sp)
  801dd4:	db800715 	stw	r14,28(sp)
  801dd8:	003fab06 	br	801c88 <__divdf3+0x88>
  801ddc:	343fc92e 	bgeu	r6,r16,801d04 <__divdf3+0x104>
  801de0:	3185883a 	add	r2,r6,r6
  801de4:	1189803a 	cmpltu	r4,r2,r6
  801de8:	39c7883a 	add	r3,r7,r7
  801dec:	20c9883a 	add	r4,r4,r3
  801df0:	297fffc4 	addi	r5,r5,-1
  801df4:	100d883a 	mov	r6,r2
  801df8:	200f883a 	mov	r7,r4
  801dfc:	d9400615 	stw	r5,24(sp)
  801e00:	003fc006 	br	801d04 <__divdf3+0x104>
  801e04:	483ff21e 	bne	r9,zero,801dd0 <__divdf3+0x1d0>
  801e08:	01004004 	movi	r4,256
  801e0c:	7104703a 	and	r2,r14,r4
  801e10:	10c4b03a 	or	r2,r2,r3
  801e14:	103fee1e 	bne	r2,zero,801dd0 <__divdf3+0x1d0>
  801e18:	31c4b03a 	or	r2,r6,r7
  801e1c:	103fec26 	beq	r2,zero,801dd0 <__divdf3+0x1d0>
  801e20:	7205883a 	add	r2,r14,r8
  801e24:	1391803a 	cmpltu	r8,r2,r14
  801e28:	43d1883a 	add	r8,r8,r15
  801e2c:	013fc004 	movi	r4,-256
  801e30:	111c703a 	and	r14,r2,r4
  801e34:	401f883a 	mov	r15,r8
  801e38:	003fe506 	br	801dd0 <__divdf3+0x1d0>
  801e3c:	8009883a 	mov	r4,r16
  801e40:	003f9206 	br	801c8c <__divdf3+0x8c>
  801e44:	9809883a 	mov	r4,r19
  801e48:	d8000715 	stw	zero,28(sp)
  801e4c:	d8000815 	stw	zero,32(sp)
  801e50:	d8000615 	stw	zero,24(sp)
  801e54:	003f8d06 	br	801c8c <__divdf3+0x8c>

00801e58 <__floatunsidf>:
  801e58:	defff204 	addi	sp,sp,-56
  801e5c:	dfc00d15 	stw	ra,52(sp)
  801e60:	ddc00c15 	stw	r23,48(sp)
  801e64:	dd800b15 	stw	r22,44(sp)
  801e68:	dd400a15 	stw	r21,40(sp)
  801e6c:	dd000915 	stw	r20,36(sp)
  801e70:	dcc00815 	stw	r19,32(sp)
  801e74:	dc800715 	stw	r18,28(sp)
  801e78:	dc400615 	stw	r17,24(sp)
  801e7c:	dc000515 	stw	r16,20(sp)
  801e80:	d8000115 	stw	zero,4(sp)
  801e84:	20000f1e 	bne	r4,zero,801ec4 <__floatunsidf+0x6c>
  801e88:	00800084 	movi	r2,2
  801e8c:	d8800015 	stw	r2,0(sp)
  801e90:	d809883a 	mov	r4,sp
  801e94:	08020a40 	call	8020a4 <__pack_d>
  801e98:	dfc00d17 	ldw	ra,52(sp)
  801e9c:	ddc00c17 	ldw	r23,48(sp)
  801ea0:	dd800b17 	ldw	r22,44(sp)
  801ea4:	dd400a17 	ldw	r21,40(sp)
  801ea8:	dd000917 	ldw	r20,36(sp)
  801eac:	dcc00817 	ldw	r19,32(sp)
  801eb0:	dc800717 	ldw	r18,28(sp)
  801eb4:	dc400617 	ldw	r17,24(sp)
  801eb8:	dc000517 	ldw	r16,20(sp)
  801ebc:	dec00e04 	addi	sp,sp,56
  801ec0:	f800283a 	ret
  801ec4:	008000c4 	movi	r2,3
  801ec8:	00c00f04 	movi	r3,60
  801ecc:	002f883a 	mov	r23,zero
  801ed0:	202d883a 	mov	r22,r4
  801ed4:	d8800015 	stw	r2,0(sp)
  801ed8:	d8c00215 	stw	r3,8(sp)
  801edc:	d9000315 	stw	r4,12(sp)
  801ee0:	ddc00415 	stw	r23,16(sp)
  801ee4:	08020240 	call	802024 <__clzsi2>
  801ee8:	12400744 	addi	r9,r2,29
  801eec:	48000b16 	blt	r9,zero,801f1c <__floatunsidf+0xc4>
  801ef0:	483fe726 	beq	r9,zero,801e90 <__floatunsidf+0x38>
  801ef4:	10bfff44 	addi	r2,r2,-3
  801ef8:	10002e16 	blt	r2,zero,801fb4 <__floatunsidf+0x15c>
  801efc:	b0a2983a 	sll	r17,r22,r2
  801f00:	0021883a 	mov	r16,zero
  801f04:	d8800217 	ldw	r2,8(sp)
  801f08:	dc400415 	stw	r17,16(sp)
  801f0c:	dc000315 	stw	r16,12(sp)
  801f10:	1245c83a 	sub	r2,r2,r9
  801f14:	d8800215 	stw	r2,8(sp)
  801f18:	003fdd06 	br	801e90 <__floatunsidf+0x38>
  801f1c:	0255c83a 	sub	r10,zero,r9
  801f20:	51bff804 	addi	r6,r10,-32
  801f24:	30001b16 	blt	r6,zero,801f94 <__floatunsidf+0x13c>
  801f28:	b9a8d83a 	srl	r20,r23,r6
  801f2c:	002b883a 	mov	r21,zero
  801f30:	000f883a 	mov	r7,zero
  801f34:	01000044 	movi	r4,1
  801f38:	0011883a 	mov	r8,zero
  801f3c:	30002516 	blt	r6,zero,801fd4 <__floatunsidf+0x17c>
  801f40:	21a6983a 	sll	r19,r4,r6
  801f44:	0025883a 	mov	r18,zero
  801f48:	00bfffc4 	movi	r2,-1
  801f4c:	9089883a 	add	r4,r18,r2
  801f50:	988b883a 	add	r5,r19,r2
  801f54:	248d803a 	cmpltu	r6,r4,r18
  801f58:	314b883a 	add	r5,r6,r5
  801f5c:	b104703a 	and	r2,r22,r4
  801f60:	b946703a 	and	r3,r23,r5
  801f64:	10c4b03a 	or	r2,r2,r3
  801f68:	10000226 	beq	r2,zero,801f74 <__floatunsidf+0x11c>
  801f6c:	01c00044 	movi	r7,1
  801f70:	0011883a 	mov	r8,zero
  801f74:	d9000217 	ldw	r4,8(sp)
  801f78:	a1c4b03a 	or	r2,r20,r7
  801f7c:	aa06b03a 	or	r3,r21,r8
  801f80:	2249c83a 	sub	r4,r4,r9
  801f84:	d8c00415 	stw	r3,16(sp)
  801f88:	d9000215 	stw	r4,8(sp)
  801f8c:	d8800315 	stw	r2,12(sp)
  801f90:	003fbf06 	br	801e90 <__floatunsidf+0x38>
  801f94:	bdc7883a 	add	r3,r23,r23
  801f98:	008007c4 	movi	r2,31
  801f9c:	1285c83a 	sub	r2,r2,r10
  801fa0:	1886983a 	sll	r3,r3,r2
  801fa4:	b2a8d83a 	srl	r20,r22,r10
  801fa8:	baaad83a 	srl	r21,r23,r10
  801fac:	1d28b03a 	or	r20,r3,r20
  801fb0:	003fdf06 	br	801f30 <__floatunsidf+0xd8>
  801fb4:	b006d07a 	srli	r3,r22,1
  801fb8:	008007c4 	movi	r2,31
  801fbc:	1245c83a 	sub	r2,r2,r9
  801fc0:	1886d83a 	srl	r3,r3,r2
  801fc4:	ba62983a 	sll	r17,r23,r9
  801fc8:	b260983a 	sll	r16,r22,r9
  801fcc:	1c62b03a 	or	r17,r3,r17
  801fd0:	003fcc06 	br	801f04 <__floatunsidf+0xac>
  801fd4:	2006d07a 	srli	r3,r4,1
  801fd8:	008007c4 	movi	r2,31
  801fdc:	1285c83a 	sub	r2,r2,r10
  801fe0:	18a6d83a 	srl	r19,r3,r2
  801fe4:	22a4983a 	sll	r18,r4,r10
  801fe8:	003fd706 	br	801f48 <__floatunsidf+0xf0>

00801fec <__mulsi3>:
  801fec:	20000a26 	beq	r4,zero,802018 <__mulsi3+0x2c>
  801ff0:	0007883a 	mov	r3,zero
  801ff4:	2080004c 	andi	r2,r4,1
  801ff8:	1005003a 	cmpeq	r2,r2,zero
  801ffc:	2008d07a 	srli	r4,r4,1
  802000:	1000011e 	bne	r2,zero,802008 <__mulsi3+0x1c>
  802004:	1947883a 	add	r3,r3,r5
  802008:	294b883a 	add	r5,r5,r5
  80200c:	203ff91e 	bne	r4,zero,801ff4 <__mulsi3+0x8>
  802010:	1805883a 	mov	r2,r3
  802014:	f800283a 	ret
  802018:	0007883a 	mov	r3,zero
  80201c:	1805883a 	mov	r2,r3
  802020:	f800283a 	ret

00802024 <__clzsi2>:
  802024:	00bfffd4 	movui	r2,65535
  802028:	11000e36 	bltu	r2,r4,802064 <__clzsi2+0x40>
  80202c:	00803fc4 	movi	r2,255
  802030:	01400204 	movi	r5,8
  802034:	0007883a 	mov	r3,zero
  802038:	11001036 	bltu	r2,r4,80207c <__clzsi2+0x58>
  80203c:	000b883a 	mov	r5,zero
  802040:	20c6d83a 	srl	r3,r4,r3
  802044:	00802074 	movhi	r2,129
  802048:	1092fe04 	addi	r2,r2,19448
  80204c:	1887883a 	add	r3,r3,r2
  802050:	18800003 	ldbu	r2,0(r3)
  802054:	00c00804 	movi	r3,32
  802058:	2885883a 	add	r2,r5,r2
  80205c:	1885c83a 	sub	r2,r3,r2
  802060:	f800283a 	ret
  802064:	01400404 	movi	r5,16
  802068:	00804034 	movhi	r2,256
  80206c:	10bfffc4 	addi	r2,r2,-1
  802070:	2807883a 	mov	r3,r5
  802074:	113ff22e 	bgeu	r2,r4,802040 <__clzsi2+0x1c>
  802078:	01400604 	movi	r5,24
  80207c:	2807883a 	mov	r3,r5
  802080:	20c6d83a 	srl	r3,r4,r3
  802084:	00802074 	movhi	r2,129
  802088:	1092fe04 	addi	r2,r2,19448
  80208c:	1887883a 	add	r3,r3,r2
  802090:	18800003 	ldbu	r2,0(r3)
  802094:	00c00804 	movi	r3,32
  802098:	2885883a 	add	r2,r5,r2
  80209c:	1885c83a 	sub	r2,r3,r2
  8020a0:	f800283a 	ret

008020a4 <__pack_d>:
  8020a4:	20c00017 	ldw	r3,0(r4)
  8020a8:	defffd04 	addi	sp,sp,-12
  8020ac:	dc000015 	stw	r16,0(sp)
  8020b0:	dc800215 	stw	r18,8(sp)
  8020b4:	dc400115 	stw	r17,4(sp)
  8020b8:	00800044 	movi	r2,1
  8020bc:	22000317 	ldw	r8,12(r4)
  8020c0:	001f883a 	mov	r15,zero
  8020c4:	22400417 	ldw	r9,16(r4)
  8020c8:	24000117 	ldw	r16,4(r4)
  8020cc:	10c0552e 	bgeu	r2,r3,802224 <__pack_d+0x180>
  8020d0:	00800104 	movi	r2,4
  8020d4:	18804f26 	beq	r3,r2,802214 <__pack_d+0x170>
  8020d8:	00800084 	movi	r2,2
  8020dc:	18800226 	beq	r3,r2,8020e8 <__pack_d+0x44>
  8020e0:	4244b03a 	or	r2,r8,r9
  8020e4:	10001a1e 	bne	r2,zero,802150 <__pack_d+0xac>
  8020e8:	000d883a 	mov	r6,zero
  8020ec:	000f883a 	mov	r7,zero
  8020f0:	0011883a 	mov	r8,zero
  8020f4:	00800434 	movhi	r2,16
  8020f8:	10bfffc4 	addi	r2,r2,-1
  8020fc:	301d883a 	mov	r14,r6
  802100:	3884703a 	and	r2,r7,r2
  802104:	400a953a 	slli	r5,r8,20
  802108:	79bffc2c 	andhi	r6,r15,65520
  80210c:	308cb03a 	or	r6,r6,r2
  802110:	00e00434 	movhi	r3,32784
  802114:	18ffffc4 	addi	r3,r3,-1
  802118:	800497fa 	slli	r2,r16,31
  80211c:	30c6703a 	and	r3,r6,r3
  802120:	1946b03a 	or	r3,r3,r5
  802124:	01600034 	movhi	r5,32768
  802128:	297fffc4 	addi	r5,r5,-1
  80212c:	194a703a 	and	r5,r3,r5
  802130:	288ab03a 	or	r5,r5,r2
  802134:	2807883a 	mov	r3,r5
  802138:	7005883a 	mov	r2,r14
  80213c:	dc800217 	ldw	r18,8(sp)
  802140:	dc400117 	ldw	r17,4(sp)
  802144:	dc000017 	ldw	r16,0(sp)
  802148:	dec00304 	addi	sp,sp,12
  80214c:	f800283a 	ret
  802150:	21000217 	ldw	r4,8(r4)
  802154:	00bf0084 	movi	r2,-1022
  802158:	20803f16 	blt	r4,r2,802258 <__pack_d+0x1b4>
  80215c:	0080ffc4 	movi	r2,1023
  802160:	11002c16 	blt	r2,r4,802214 <__pack_d+0x170>
  802164:	00803fc4 	movi	r2,255
  802168:	408c703a 	and	r6,r8,r2
  80216c:	00802004 	movi	r2,128
  802170:	0007883a 	mov	r3,zero
  802174:	000f883a 	mov	r7,zero
  802178:	2280ffc4 	addi	r10,r4,1023
  80217c:	30801e26 	beq	r6,r2,8021f8 <__pack_d+0x154>
  802180:	00801fc4 	movi	r2,127
  802184:	4089883a 	add	r4,r8,r2
  802188:	220d803a 	cmpltu	r6,r4,r8
  80218c:	324d883a 	add	r6,r6,r9
  802190:	2011883a 	mov	r8,r4
  802194:	3013883a 	mov	r9,r6
  802198:	00880034 	movhi	r2,8192
  80219c:	10bfffc4 	addi	r2,r2,-1
  8021a0:	12400d36 	bltu	r2,r9,8021d8 <__pack_d+0x134>
  8021a4:	4804963a 	slli	r2,r9,24
  8021a8:	400cd23a 	srli	r6,r8,8
  8021ac:	480ed23a 	srli	r7,r9,8
  8021b0:	013fffc4 	movi	r4,-1
  8021b4:	118cb03a 	or	r6,r2,r6
  8021b8:	01400434 	movhi	r5,16
  8021bc:	297fffc4 	addi	r5,r5,-1
  8021c0:	3104703a 	and	r2,r6,r4
  8021c4:	3946703a 	and	r3,r7,r5
  8021c8:	5201ffcc 	andi	r8,r10,2047
  8021cc:	100d883a 	mov	r6,r2
  8021d0:	180f883a 	mov	r7,r3
  8021d4:	003fc706 	br	8020f4 <__pack_d+0x50>
  8021d8:	480897fa 	slli	r4,r9,31
  8021dc:	4004d07a 	srli	r2,r8,1
  8021e0:	4806d07a 	srli	r3,r9,1
  8021e4:	52800044 	addi	r10,r10,1
  8021e8:	2084b03a 	or	r2,r4,r2
  8021ec:	1011883a 	mov	r8,r2
  8021f0:	1813883a 	mov	r9,r3
  8021f4:	003feb06 	br	8021a4 <__pack_d+0x100>
  8021f8:	383fe11e 	bne	r7,zero,802180 <__pack_d+0xdc>
  8021fc:	01004004 	movi	r4,256
  802200:	4104703a 	and	r2,r8,r4
  802204:	10c4b03a 	or	r2,r2,r3
  802208:	103fe326 	beq	r2,zero,802198 <__pack_d+0xf4>
  80220c:	3005883a 	mov	r2,r6
  802210:	003fdc06 	br	802184 <__pack_d+0xe0>
  802214:	000d883a 	mov	r6,zero
  802218:	000f883a 	mov	r7,zero
  80221c:	0201ffc4 	movi	r8,2047
  802220:	003fb406 	br	8020f4 <__pack_d+0x50>
  802224:	0005883a 	mov	r2,zero
  802228:	00c00234 	movhi	r3,8
  80222c:	408cb03a 	or	r6,r8,r2
  802230:	48ceb03a 	or	r7,r9,r3
  802234:	013fffc4 	movi	r4,-1
  802238:	01400434 	movhi	r5,16
  80223c:	297fffc4 	addi	r5,r5,-1
  802240:	3104703a 	and	r2,r6,r4
  802244:	3946703a 	and	r3,r7,r5
  802248:	100d883a 	mov	r6,r2
  80224c:	180f883a 	mov	r7,r3
  802250:	0201ffc4 	movi	r8,2047
  802254:	003fa706 	br	8020f4 <__pack_d+0x50>
  802258:	1109c83a 	sub	r4,r2,r4
  80225c:	00800e04 	movi	r2,56
  802260:	11004316 	blt	r2,r4,802370 <__pack_d+0x2cc>
  802264:	21fff804 	addi	r7,r4,-32
  802268:	38004516 	blt	r7,zero,802380 <__pack_d+0x2dc>
  80226c:	49d8d83a 	srl	r12,r9,r7
  802270:	001b883a 	mov	r13,zero
  802274:	0023883a 	mov	r17,zero
  802278:	01400044 	movi	r5,1
  80227c:	0025883a 	mov	r18,zero
  802280:	38004716 	blt	r7,zero,8023a0 <__pack_d+0x2fc>
  802284:	29d6983a 	sll	r11,r5,r7
  802288:	0015883a 	mov	r10,zero
  80228c:	00bfffc4 	movi	r2,-1
  802290:	5089883a 	add	r4,r10,r2
  802294:	588b883a 	add	r5,r11,r2
  802298:	228d803a 	cmpltu	r6,r4,r10
  80229c:	314b883a 	add	r5,r6,r5
  8022a0:	4104703a 	and	r2,r8,r4
  8022a4:	4946703a 	and	r3,r9,r5
  8022a8:	10c4b03a 	or	r2,r2,r3
  8022ac:	10000226 	beq	r2,zero,8022b8 <__pack_d+0x214>
  8022b0:	04400044 	movi	r17,1
  8022b4:	0025883a 	mov	r18,zero
  8022b8:	00803fc4 	movi	r2,255
  8022bc:	644eb03a 	or	r7,r12,r17
  8022c0:	3892703a 	and	r9,r7,r2
  8022c4:	00802004 	movi	r2,128
  8022c8:	6c90b03a 	or	r8,r13,r18
  8022cc:	0015883a 	mov	r10,zero
  8022d0:	48801626 	beq	r9,r2,80232c <__pack_d+0x288>
  8022d4:	01001fc4 	movi	r4,127
  8022d8:	3905883a 	add	r2,r7,r4
  8022dc:	11cd803a 	cmpltu	r6,r2,r7
  8022e0:	320d883a 	add	r6,r6,r8
  8022e4:	100f883a 	mov	r7,r2
  8022e8:	00840034 	movhi	r2,4096
  8022ec:	10bfffc4 	addi	r2,r2,-1
  8022f0:	3011883a 	mov	r8,r6
  8022f4:	0007883a 	mov	r3,zero
  8022f8:	11801b36 	bltu	r2,r6,802368 <__pack_d+0x2c4>
  8022fc:	4004963a 	slli	r2,r8,24
  802300:	3808d23a 	srli	r4,r7,8
  802304:	400ad23a 	srli	r5,r8,8
  802308:	1813883a 	mov	r9,r3
  80230c:	1108b03a 	or	r4,r2,r4
  802310:	00bfffc4 	movi	r2,-1
  802314:	00c00434 	movhi	r3,16
  802318:	18ffffc4 	addi	r3,r3,-1
  80231c:	208c703a 	and	r6,r4,r2
  802320:	28ce703a 	and	r7,r5,r3
  802324:	4a01ffcc 	andi	r8,r9,2047
  802328:	003f7206 	br	8020f4 <__pack_d+0x50>
  80232c:	503fe91e 	bne	r10,zero,8022d4 <__pack_d+0x230>
  802330:	01004004 	movi	r4,256
  802334:	3904703a 	and	r2,r7,r4
  802338:	0007883a 	mov	r3,zero
  80233c:	10c4b03a 	or	r2,r2,r3
  802340:	10000626 	beq	r2,zero,80235c <__pack_d+0x2b8>
  802344:	3a45883a 	add	r2,r7,r9
  802348:	11cd803a 	cmpltu	r6,r2,r7
  80234c:	320d883a 	add	r6,r6,r8
  802350:	100f883a 	mov	r7,r2
  802354:	3011883a 	mov	r8,r6
  802358:	0007883a 	mov	r3,zero
  80235c:	00840034 	movhi	r2,4096
  802360:	10bfffc4 	addi	r2,r2,-1
  802364:	123fe52e 	bgeu	r2,r8,8022fc <__pack_d+0x258>
  802368:	00c00044 	movi	r3,1
  80236c:	003fe306 	br	8022fc <__pack_d+0x258>
  802370:	0009883a 	mov	r4,zero
  802374:	0013883a 	mov	r9,zero
  802378:	000b883a 	mov	r5,zero
  80237c:	003fe406 	br	802310 <__pack_d+0x26c>
  802380:	4a47883a 	add	r3,r9,r9
  802384:	008007c4 	movi	r2,31
  802388:	1105c83a 	sub	r2,r2,r4
  80238c:	1886983a 	sll	r3,r3,r2
  802390:	4118d83a 	srl	r12,r8,r4
  802394:	491ad83a 	srl	r13,r9,r4
  802398:	1b18b03a 	or	r12,r3,r12
  80239c:	003fb506 	br	802274 <__pack_d+0x1d0>
  8023a0:	2806d07a 	srli	r3,r5,1
  8023a4:	008007c4 	movi	r2,31
  8023a8:	1105c83a 	sub	r2,r2,r4
  8023ac:	1896d83a 	srl	r11,r3,r2
  8023b0:	2914983a 	sll	r10,r5,r4
  8023b4:	003fb506 	br	80228c <__pack_d+0x1e8>

008023b8 <__unpack_d>:
  8023b8:	20c00117 	ldw	r3,4(r4)
  8023bc:	22400017 	ldw	r9,0(r4)
  8023c0:	00800434 	movhi	r2,16
  8023c4:	10bfffc4 	addi	r2,r2,-1
  8023c8:	1808d53a 	srli	r4,r3,20
  8023cc:	180cd7fa 	srli	r6,r3,31
  8023d0:	1894703a 	and	r10,r3,r2
  8023d4:	2201ffcc 	andi	r8,r4,2047
  8023d8:	281b883a 	mov	r13,r5
  8023dc:	4817883a 	mov	r11,r9
  8023e0:	29800115 	stw	r6,4(r5)
  8023e4:	5019883a 	mov	r12,r10
  8023e8:	40001e1e 	bne	r8,zero,802464 <__unpack_d+0xac>
  8023ec:	4a84b03a 	or	r2,r9,r10
  8023f0:	10001926 	beq	r2,zero,802458 <__unpack_d+0xa0>
  8023f4:	4804d63a 	srli	r2,r9,24
  8023f8:	500c923a 	slli	r6,r10,8
  8023fc:	013f0084 	movi	r4,-1022
  802400:	00c40034 	movhi	r3,4096
  802404:	18ffffc4 	addi	r3,r3,-1
  802408:	118cb03a 	or	r6,r2,r6
  80240c:	008000c4 	movi	r2,3
  802410:	480a923a 	slli	r5,r9,8
  802414:	68800015 	stw	r2,0(r13)
  802418:	69000215 	stw	r4,8(r13)
  80241c:	19800b36 	bltu	r3,r6,80244c <__unpack_d+0x94>
  802420:	200f883a 	mov	r7,r4
  802424:	1811883a 	mov	r8,r3
  802428:	2945883a 	add	r2,r5,r5
  80242c:	1149803a 	cmpltu	r4,r2,r5
  802430:	3187883a 	add	r3,r6,r6
  802434:	20c9883a 	add	r4,r4,r3
  802438:	100b883a 	mov	r5,r2
  80243c:	200d883a 	mov	r6,r4
  802440:	39ffffc4 	addi	r7,r7,-1
  802444:	413ff82e 	bgeu	r8,r4,802428 <__unpack_d+0x70>
  802448:	69c00215 	stw	r7,8(r13)
  80244c:	69800415 	stw	r6,16(r13)
  802450:	69400315 	stw	r5,12(r13)
  802454:	f800283a 	ret
  802458:	00800084 	movi	r2,2
  80245c:	28800015 	stw	r2,0(r5)
  802460:	f800283a 	ret
  802464:	0081ffc4 	movi	r2,2047
  802468:	40800f26 	beq	r8,r2,8024a8 <__unpack_d+0xf0>
  80246c:	480cd63a 	srli	r6,r9,24
  802470:	5006923a 	slli	r3,r10,8
  802474:	4804923a 	slli	r2,r9,8
  802478:	0009883a 	mov	r4,zero
  80247c:	30c6b03a 	or	r3,r6,r3
  802480:	01440034 	movhi	r5,4096
  802484:	110cb03a 	or	r6,r2,r4
  802488:	423f0044 	addi	r8,r8,-1023
  80248c:	194eb03a 	or	r7,r3,r5
  802490:	008000c4 	movi	r2,3
  802494:	69c00415 	stw	r7,16(r13)
  802498:	6a000215 	stw	r8,8(r13)
  80249c:	68800015 	stw	r2,0(r13)
  8024a0:	69800315 	stw	r6,12(r13)
  8024a4:	f800283a 	ret
  8024a8:	4a84b03a 	or	r2,r9,r10
  8024ac:	1000031e 	bne	r2,zero,8024bc <__unpack_d+0x104>
  8024b0:	00800104 	movi	r2,4
  8024b4:	28800015 	stw	r2,0(r5)
  8024b8:	f800283a 	ret
  8024bc:	0009883a 	mov	r4,zero
  8024c0:	01400234 	movhi	r5,8
  8024c4:	4904703a 	and	r2,r9,r4
  8024c8:	5146703a 	and	r3,r10,r5
  8024cc:	10c4b03a 	or	r2,r2,r3
  8024d0:	10000526 	beq	r2,zero,8024e8 <__unpack_d+0x130>
  8024d4:	00800044 	movi	r2,1
  8024d8:	68800015 	stw	r2,0(r13)
  8024dc:	6b000415 	stw	r12,16(r13)
  8024e0:	6ac00315 	stw	r11,12(r13)
  8024e4:	f800283a 	ret
  8024e8:	68000015 	stw	zero,0(r13)
  8024ec:	003ffb06 	br	8024dc <__unpack_d+0x124>

008024f0 <calloc>:
  8024f0:	01802074 	movhi	r6,129
  8024f4:	319b3004 	addi	r6,r6,27840
  8024f8:	2007883a 	mov	r3,r4
  8024fc:	31000017 	ldw	r4,0(r6)
  802500:	280d883a 	mov	r6,r5
  802504:	180b883a 	mov	r5,r3
  802508:	080250c1 	jmpi	80250c <_calloc_r>

0080250c <_calloc_r>:
  80250c:	defffe04 	addi	sp,sp,-8
  802510:	dc400015 	stw	r17,0(sp)
  802514:	2023883a 	mov	r17,r4
  802518:	2809883a 	mov	r4,r5
  80251c:	300b883a 	mov	r5,r6
  802520:	dfc00115 	stw	ra,4(sp)
  802524:	0801fec0 	call	801fec <__mulsi3>
  802528:	100b883a 	mov	r5,r2
  80252c:	8809883a 	mov	r4,r17
  802530:	08040a00 	call	8040a0 <_malloc_r>
  802534:	1023883a 	mov	r17,r2
  802538:	01c00904 	movi	r7,36
  80253c:	10000d26 	beq	r2,zero,802574 <_calloc_r+0x68>
  802540:	10ffff17 	ldw	r3,-4(r2)
  802544:	1009883a 	mov	r4,r2
  802548:	00bfff04 	movi	r2,-4
  80254c:	1886703a 	and	r3,r3,r2
  802550:	1887883a 	add	r3,r3,r2
  802554:	180d883a 	mov	r6,r3
  802558:	000b883a 	mov	r5,zero
  80255c:	38c01736 	bltu	r7,r3,8025bc <_calloc_r+0xb0>
  802560:	008004c4 	movi	r2,19
  802564:	10c00836 	bltu	r2,r3,802588 <_calloc_r+0x7c>
  802568:	20000215 	stw	zero,8(r4)
  80256c:	20000015 	stw	zero,0(r4)
  802570:	20000115 	stw	zero,4(r4)
  802574:	8805883a 	mov	r2,r17
  802578:	dfc00117 	ldw	ra,4(sp)
  80257c:	dc400017 	ldw	r17,0(sp)
  802580:	dec00204 	addi	sp,sp,8
  802584:	f800283a 	ret
  802588:	008006c4 	movi	r2,27
  80258c:	88000015 	stw	zero,0(r17)
  802590:	88000115 	stw	zero,4(r17)
  802594:	89000204 	addi	r4,r17,8
  802598:	10fff32e 	bgeu	r2,r3,802568 <_calloc_r+0x5c>
  80259c:	88000215 	stw	zero,8(r17)
  8025a0:	88000315 	stw	zero,12(r17)
  8025a4:	89000404 	addi	r4,r17,16
  8025a8:	19ffef1e 	bne	r3,r7,802568 <_calloc_r+0x5c>
  8025ac:	89000604 	addi	r4,r17,24
  8025b0:	88000415 	stw	zero,16(r17)
  8025b4:	88000515 	stw	zero,20(r17)
  8025b8:	003feb06 	br	802568 <_calloc_r+0x5c>
  8025bc:	08049640 	call	804964 <memset>
  8025c0:	8805883a 	mov	r2,r17
  8025c4:	dfc00117 	ldw	ra,4(sp)
  8025c8:	dc400017 	ldw	r17,0(sp)
  8025cc:	dec00204 	addi	sp,sp,8
  8025d0:	f800283a 	ret

008025d4 <clock>:
  8025d4:	00802074 	movhi	r2,129
  8025d8:	109b3004 	addi	r2,r2,27840
  8025dc:	11000017 	ldw	r4,0(r2)
  8025e0:	defffb04 	addi	sp,sp,-20
  8025e4:	d80b883a 	mov	r5,sp
  8025e8:	dfc00415 	stw	ra,16(sp)
  8025ec:	08052140 	call	805214 <_times_r>
  8025f0:	1007883a 	mov	r3,r2
  8025f4:	00bfffc4 	movi	r2,-1
  8025f8:	18800726 	beq	r3,r2,802618 <clock+0x44>
  8025fc:	d8c00117 	ldw	r3,4(sp)
  802600:	d9000017 	ldw	r4,0(sp)
  802604:	d8800217 	ldw	r2,8(sp)
  802608:	20c9883a 	add	r4,r4,r3
  80260c:	d8c00317 	ldw	r3,12(sp)
  802610:	10c5883a 	add	r2,r2,r3
  802614:	2087883a 	add	r3,r4,r2
  802618:	1805883a 	mov	r2,r3
  80261c:	dfc00417 	ldw	ra,16(sp)
  802620:	dec00504 	addi	sp,sp,20
  802624:	f800283a 	ret

00802628 <exit>:
  802628:	defffe04 	addi	sp,sp,-8
  80262c:	000b883a 	mov	r5,zero
  802630:	dc000015 	stw	r16,0(sp)
  802634:	dfc00115 	stw	ra,4(sp)
  802638:	2021883a 	mov	r16,r4
  80263c:	0808d300 	call	808d30 <__call_exitprocs>
  802640:	00802074 	movhi	r2,129
  802644:	109b3104 	addi	r2,r2,27844
  802648:	11000017 	ldw	r4,0(r2)
  80264c:	20800f17 	ldw	r2,60(r4)
  802650:	10000126 	beq	r2,zero,802658 <exit+0x30>
  802654:	103ee83a 	callr	r2
  802658:	8009883a 	mov	r4,r16
  80265c:	0811d100 	call	811d10 <_exit>

00802660 <_fclose_r>:
  802660:	defffc04 	addi	sp,sp,-16
  802664:	dc400115 	stw	r17,4(sp)
  802668:	dc000015 	stw	r16,0(sp)
  80266c:	dfc00315 	stw	ra,12(sp)
  802670:	dc800215 	stw	r18,8(sp)
  802674:	2821883a 	mov	r16,r5
  802678:	2023883a 	mov	r17,r4
  80267c:	28002926 	beq	r5,zero,802724 <_fclose_r+0xc4>
  802680:	0802ca00 	call	802ca0 <__sfp_lock_acquire>
  802684:	88000226 	beq	r17,zero,802690 <_fclose_r+0x30>
  802688:	88800e17 	ldw	r2,56(r17)
  80268c:	10002d26 	beq	r2,zero,802744 <_fclose_r+0xe4>
  802690:	8080030f 	ldh	r2,12(r16)
  802694:	10002226 	beq	r2,zero,802720 <_fclose_r+0xc0>
  802698:	8809883a 	mov	r4,r17
  80269c:	800b883a 	mov	r5,r16
  8026a0:	08027840 	call	802784 <_fflush_r>
  8026a4:	1025883a 	mov	r18,r2
  8026a8:	80800b17 	ldw	r2,44(r16)
  8026ac:	10000426 	beq	r2,zero,8026c0 <_fclose_r+0x60>
  8026b0:	81400717 	ldw	r5,28(r16)
  8026b4:	8809883a 	mov	r4,r17
  8026b8:	103ee83a 	callr	r2
  8026bc:	10002a16 	blt	r2,zero,802768 <_fclose_r+0x108>
  8026c0:	8080030b 	ldhu	r2,12(r16)
  8026c4:	1080200c 	andi	r2,r2,128
  8026c8:	1000231e 	bne	r2,zero,802758 <_fclose_r+0xf8>
  8026cc:	81400c17 	ldw	r5,48(r16)
  8026d0:	28000526 	beq	r5,zero,8026e8 <_fclose_r+0x88>
  8026d4:	80801004 	addi	r2,r16,64
  8026d8:	28800226 	beq	r5,r2,8026e4 <_fclose_r+0x84>
  8026dc:	8809883a 	mov	r4,r17
  8026e0:	08034240 	call	803424 <_free_r>
  8026e4:	80000c15 	stw	zero,48(r16)
  8026e8:	81401117 	ldw	r5,68(r16)
  8026ec:	28000326 	beq	r5,zero,8026fc <_fclose_r+0x9c>
  8026f0:	8809883a 	mov	r4,r17
  8026f4:	08034240 	call	803424 <_free_r>
  8026f8:	80001115 	stw	zero,68(r16)
  8026fc:	8000030d 	sth	zero,12(r16)
  802700:	0802ca40 	call	802ca4 <__sfp_lock_release>
  802704:	9005883a 	mov	r2,r18
  802708:	dfc00317 	ldw	ra,12(sp)
  80270c:	dc800217 	ldw	r18,8(sp)
  802710:	dc400117 	ldw	r17,4(sp)
  802714:	dc000017 	ldw	r16,0(sp)
  802718:	dec00404 	addi	sp,sp,16
  80271c:	f800283a 	ret
  802720:	0802ca40 	call	802ca4 <__sfp_lock_release>
  802724:	0025883a 	mov	r18,zero
  802728:	9005883a 	mov	r2,r18
  80272c:	dfc00317 	ldw	ra,12(sp)
  802730:	dc800217 	ldw	r18,8(sp)
  802734:	dc400117 	ldw	r17,4(sp)
  802738:	dc000017 	ldw	r16,0(sp)
  80273c:	dec00404 	addi	sp,sp,16
  802740:	f800283a 	ret
  802744:	8809883a 	mov	r4,r17
  802748:	0802cb00 	call	802cb0 <__sinit>
  80274c:	8080030f 	ldh	r2,12(r16)
  802750:	103fd11e 	bne	r2,zero,802698 <_fclose_r+0x38>
  802754:	003ff206 	br	802720 <_fclose_r+0xc0>
  802758:	81400417 	ldw	r5,16(r16)
  80275c:	8809883a 	mov	r4,r17
  802760:	08034240 	call	803424 <_free_r>
  802764:	003fd906 	br	8026cc <_fclose_r+0x6c>
  802768:	04bfffc4 	movi	r18,-1
  80276c:	003fd406 	br	8026c0 <_fclose_r+0x60>

00802770 <fclose>:
  802770:	00802074 	movhi	r2,129
  802774:	109b3004 	addi	r2,r2,27840
  802778:	200b883a 	mov	r5,r4
  80277c:	11000017 	ldw	r4,0(r2)
  802780:	08026601 	jmpi	802660 <_fclose_r>

00802784 <_fflush_r>:
  802784:	defffb04 	addi	sp,sp,-20
  802788:	dcc00315 	stw	r19,12(sp)
  80278c:	dc800215 	stw	r18,8(sp)
  802790:	dfc00415 	stw	ra,16(sp)
  802794:	dc400115 	stw	r17,4(sp)
  802798:	dc000015 	stw	r16,0(sp)
  80279c:	2027883a 	mov	r19,r4
  8027a0:	2825883a 	mov	r18,r5
  8027a4:	20000226 	beq	r4,zero,8027b0 <_fflush_r+0x2c>
  8027a8:	20800e17 	ldw	r2,56(r4)
  8027ac:	10005626 	beq	r2,zero,802908 <_fflush_r+0x184>
  8027b0:	9100030b 	ldhu	r4,12(r18)
  8027b4:	20ffffcc 	andi	r3,r4,65535
  8027b8:	18e0001c 	xori	r3,r3,32768
  8027bc:	18e00004 	addi	r3,r3,-32768
  8027c0:	1880020c 	andi	r2,r3,8
  8027c4:	1000261e 	bne	r2,zero,802860 <_fflush_r+0xdc>
  8027c8:	90c00117 	ldw	r3,4(r18)
  8027cc:	20820014 	ori	r2,r4,2048
  8027d0:	9080030d 	sth	r2,12(r18)
  8027d4:	1009883a 	mov	r4,r2
  8027d8:	00c0400e 	bge	zero,r3,8028dc <_fflush_r+0x158>
  8027dc:	92000a17 	ldw	r8,40(r18)
  8027e0:	40004026 	beq	r8,zero,8028e4 <_fflush_r+0x160>
  8027e4:	2084000c 	andi	r2,r4,4096
  8027e8:	10005326 	beq	r2,zero,802938 <_fflush_r+0x1b4>
  8027ec:	94001417 	ldw	r16,80(r18)
  8027f0:	9080030b 	ldhu	r2,12(r18)
  8027f4:	1080010c 	andi	r2,r2,4
  8027f8:	1000481e 	bne	r2,zero,80291c <_fflush_r+0x198>
  8027fc:	91400717 	ldw	r5,28(r18)
  802800:	9809883a 	mov	r4,r19
  802804:	800d883a 	mov	r6,r16
  802808:	000f883a 	mov	r7,zero
  80280c:	403ee83a 	callr	r8
  802810:	8080261e 	bne	r16,r2,8028ac <_fflush_r+0x128>
  802814:	9080030b 	ldhu	r2,12(r18)
  802818:	91000417 	ldw	r4,16(r18)
  80281c:	90000115 	stw	zero,4(r18)
  802820:	10bdffcc 	andi	r2,r2,63487
  802824:	10ffffcc 	andi	r3,r2,65535
  802828:	18c4000c 	andi	r3,r3,4096
  80282c:	9080030d 	sth	r2,12(r18)
  802830:	91000015 	stw	r4,0(r18)
  802834:	18002b26 	beq	r3,zero,8028e4 <_fflush_r+0x160>
  802838:	0007883a 	mov	r3,zero
  80283c:	1805883a 	mov	r2,r3
  802840:	94001415 	stw	r16,80(r18)
  802844:	dfc00417 	ldw	ra,16(sp)
  802848:	dcc00317 	ldw	r19,12(sp)
  80284c:	dc800217 	ldw	r18,8(sp)
  802850:	dc400117 	ldw	r17,4(sp)
  802854:	dc000017 	ldw	r16,0(sp)
  802858:	dec00504 	addi	sp,sp,20
  80285c:	f800283a 	ret
  802860:	94400417 	ldw	r17,16(r18)
  802864:	88001f26 	beq	r17,zero,8028e4 <_fflush_r+0x160>
  802868:	90800017 	ldw	r2,0(r18)
  80286c:	18c000cc 	andi	r3,r3,3
  802870:	94400015 	stw	r17,0(r18)
  802874:	1461c83a 	sub	r16,r2,r17
  802878:	18002526 	beq	r3,zero,802910 <_fflush_r+0x18c>
  80287c:	0005883a 	mov	r2,zero
  802880:	90800215 	stw	r2,8(r18)
  802884:	0400170e 	bge	zero,r16,8028e4 <_fflush_r+0x160>
  802888:	90c00917 	ldw	r3,36(r18)
  80288c:	91400717 	ldw	r5,28(r18)
  802890:	880d883a 	mov	r6,r17
  802894:	800f883a 	mov	r7,r16
  802898:	9809883a 	mov	r4,r19
  80289c:	183ee83a 	callr	r3
  8028a0:	88a3883a 	add	r17,r17,r2
  8028a4:	80a1c83a 	sub	r16,r16,r2
  8028a8:	00bff616 	blt	zero,r2,802884 <_fflush_r+0x100>
  8028ac:	9080030b 	ldhu	r2,12(r18)
  8028b0:	00ffffc4 	movi	r3,-1
  8028b4:	10801014 	ori	r2,r2,64
  8028b8:	9080030d 	sth	r2,12(r18)
  8028bc:	1805883a 	mov	r2,r3
  8028c0:	dfc00417 	ldw	ra,16(sp)
  8028c4:	dcc00317 	ldw	r19,12(sp)
  8028c8:	dc800217 	ldw	r18,8(sp)
  8028cc:	dc400117 	ldw	r17,4(sp)
  8028d0:	dc000017 	ldw	r16,0(sp)
  8028d4:	dec00504 	addi	sp,sp,20
  8028d8:	f800283a 	ret
  8028dc:	90800f17 	ldw	r2,60(r18)
  8028e0:	00bfbe16 	blt	zero,r2,8027dc <_fflush_r+0x58>
  8028e4:	0007883a 	mov	r3,zero
  8028e8:	1805883a 	mov	r2,r3
  8028ec:	dfc00417 	ldw	ra,16(sp)
  8028f0:	dcc00317 	ldw	r19,12(sp)
  8028f4:	dc800217 	ldw	r18,8(sp)
  8028f8:	dc400117 	ldw	r17,4(sp)
  8028fc:	dc000017 	ldw	r16,0(sp)
  802900:	dec00504 	addi	sp,sp,20
  802904:	f800283a 	ret
  802908:	0802cb00 	call	802cb0 <__sinit>
  80290c:	003fa806 	br	8027b0 <_fflush_r+0x2c>
  802910:	90800517 	ldw	r2,20(r18)
  802914:	90800215 	stw	r2,8(r18)
  802918:	003fda06 	br	802884 <_fflush_r+0x100>
  80291c:	90800117 	ldw	r2,4(r18)
  802920:	90c00c17 	ldw	r3,48(r18)
  802924:	80a1c83a 	sub	r16,r16,r2
  802928:	183fb426 	beq	r3,zero,8027fc <_fflush_r+0x78>
  80292c:	90800f17 	ldw	r2,60(r18)
  802930:	80a1c83a 	sub	r16,r16,r2
  802934:	003fb106 	br	8027fc <_fflush_r+0x78>
  802938:	91400717 	ldw	r5,28(r18)
  80293c:	9809883a 	mov	r4,r19
  802940:	000d883a 	mov	r6,zero
  802944:	01c00044 	movi	r7,1
  802948:	403ee83a 	callr	r8
  80294c:	1021883a 	mov	r16,r2
  802950:	00bfffc4 	movi	r2,-1
  802954:	80800226 	beq	r16,r2,802960 <_fflush_r+0x1dc>
  802958:	92000a17 	ldw	r8,40(r18)
  80295c:	003fa406 	br	8027f0 <_fflush_r+0x6c>
  802960:	98c00017 	ldw	r3,0(r19)
  802964:	00800744 	movi	r2,29
  802968:	18bfde26 	beq	r3,r2,8028e4 <_fflush_r+0x160>
  80296c:	9080030b 	ldhu	r2,12(r18)
  802970:	8007883a 	mov	r3,r16
  802974:	10801014 	ori	r2,r2,64
  802978:	9080030d 	sth	r2,12(r18)
  80297c:	003fcf06 	br	8028bc <_fflush_r+0x138>

00802980 <fflush>:
  802980:	01402034 	movhi	r5,128
  802984:	2949e104 	addi	r5,r5,10116
  802988:	2007883a 	mov	r3,r4
  80298c:	20000526 	beq	r4,zero,8029a4 <fflush+0x24>
  802990:	00802074 	movhi	r2,129
  802994:	109b3004 	addi	r2,r2,27840
  802998:	11000017 	ldw	r4,0(r2)
  80299c:	180b883a 	mov	r5,r3
  8029a0:	08027841 	jmpi	802784 <_fflush_r>
  8029a4:	00802074 	movhi	r2,129
  8029a8:	109b3104 	addi	r2,r2,27844
  8029ac:	11000017 	ldw	r4,0(r2)
  8029b0:	0803c781 	jmpi	803c78 <_fwalk_reent>

008029b4 <fgetc>:
  8029b4:	defffd04 	addi	sp,sp,-12
  8029b8:	dc400115 	stw	r17,4(sp)
  8029bc:	04402074 	movhi	r17,129
  8029c0:	8c5b3004 	addi	r17,r17,27840
  8029c4:	88c00017 	ldw	r3,0(r17)
  8029c8:	dc000015 	stw	r16,0(sp)
  8029cc:	dfc00215 	stw	ra,8(sp)
  8029d0:	2021883a 	mov	r16,r4
  8029d4:	18000326 	beq	r3,zero,8029e4 <fgetc+0x30>
  8029d8:	18800e17 	ldw	r2,56(r3)
  8029dc:	1809883a 	mov	r4,r3
  8029e0:	10000e26 	beq	r2,zero,802a1c <fgetc+0x68>
  8029e4:	80800117 	ldw	r2,4(r16)
  8029e8:	800b883a 	mov	r5,r16
  8029ec:	10bfffc4 	addi	r2,r2,-1
  8029f0:	80800115 	stw	r2,4(r16)
  8029f4:	10000f16 	blt	r2,zero,802a34 <fgetc+0x80>
  8029f8:	80c00017 	ldw	r3,0(r16)
  8029fc:	18800003 	ldbu	r2,0(r3)
  802a00:	18c00044 	addi	r3,r3,1
  802a04:	80c00015 	stw	r3,0(r16)
  802a08:	dfc00217 	ldw	ra,8(sp)
  802a0c:	dc400117 	ldw	r17,4(sp)
  802a10:	dc000017 	ldw	r16,0(sp)
  802a14:	dec00304 	addi	sp,sp,12
  802a18:	f800283a 	ret
  802a1c:	0802cb00 	call	802cb0 <__sinit>
  802a20:	80800117 	ldw	r2,4(r16)
  802a24:	800b883a 	mov	r5,r16
  802a28:	10bfffc4 	addi	r2,r2,-1
  802a2c:	80800115 	stw	r2,4(r16)
  802a30:	103ff10e 	bge	r2,zero,8029f8 <fgetc+0x44>
  802a34:	89000017 	ldw	r4,0(r17)
  802a38:	dfc00217 	ldw	ra,8(sp)
  802a3c:	dc400117 	ldw	r17,4(sp)
  802a40:	dc000017 	ldw	r16,0(sp)
  802a44:	dec00304 	addi	sp,sp,12
  802a48:	0804d801 	jmpi	804d80 <__srget_r>

00802a4c <_fgetc_r>:
  802a4c:	defffd04 	addi	sp,sp,-12
  802a50:	dc400115 	stw	r17,4(sp)
  802a54:	dc000015 	stw	r16,0(sp)
  802a58:	dfc00215 	stw	ra,8(sp)
  802a5c:	2021883a 	mov	r16,r4
  802a60:	2823883a 	mov	r17,r5
  802a64:	20000226 	beq	r4,zero,802a70 <_fgetc_r+0x24>
  802a68:	20800e17 	ldw	r2,56(r4)
  802a6c:	10000f26 	beq	r2,zero,802aac <_fgetc_r+0x60>
  802a70:	88800117 	ldw	r2,4(r17)
  802a74:	8009883a 	mov	r4,r16
  802a78:	880b883a 	mov	r5,r17
  802a7c:	10bfffc4 	addi	r2,r2,-1
  802a80:	88800115 	stw	r2,4(r17)
  802a84:	10001016 	blt	r2,zero,802ac8 <_fgetc_r+0x7c>
  802a88:	88c00017 	ldw	r3,0(r17)
  802a8c:	18800003 	ldbu	r2,0(r3)
  802a90:	18c00044 	addi	r3,r3,1
  802a94:	88c00015 	stw	r3,0(r17)
  802a98:	dfc00217 	ldw	ra,8(sp)
  802a9c:	dc400117 	ldw	r17,4(sp)
  802aa0:	dc000017 	ldw	r16,0(sp)
  802aa4:	dec00304 	addi	sp,sp,12
  802aa8:	f800283a 	ret
  802aac:	0802cb00 	call	802cb0 <__sinit>
  802ab0:	88800117 	ldw	r2,4(r17)
  802ab4:	8009883a 	mov	r4,r16
  802ab8:	880b883a 	mov	r5,r17
  802abc:	10bfffc4 	addi	r2,r2,-1
  802ac0:	88800115 	stw	r2,4(r17)
  802ac4:	103ff00e 	bge	r2,zero,802a88 <_fgetc_r+0x3c>
  802ac8:	dfc00217 	ldw	ra,8(sp)
  802acc:	dc400117 	ldw	r17,4(sp)
  802ad0:	dc000017 	ldw	r16,0(sp)
  802ad4:	dec00304 	addi	sp,sp,12
  802ad8:	0804d801 	jmpi	804d80 <__srget_r>

00802adc <_fgets_r>:
  802adc:	defff804 	addi	sp,sp,-32
  802ae0:	00800044 	movi	r2,1
  802ae4:	dd800615 	stw	r22,24(sp)
  802ae8:	dd400515 	stw	r21,20(sp)
  802aec:	dc400115 	stw	r17,4(sp)
  802af0:	dc000015 	stw	r16,0(sp)
  802af4:	dfc00715 	stw	ra,28(sp)
  802af8:	dd000415 	stw	r20,16(sp)
  802afc:	dcc00315 	stw	r19,12(sp)
  802b00:	dc800215 	stw	r18,8(sp)
  802b04:	3021883a 	mov	r16,r6
  802b08:	282d883a 	mov	r22,r5
  802b0c:	3823883a 	mov	r17,r7
  802b10:	202b883a 	mov	r21,r4
  802b14:	1180410e 	bge	r2,r6,802c1c <_fgets_r+0x140>
  802b18:	20000226 	beq	r4,zero,802b24 <_fgets_r+0x48>
  802b1c:	20800e17 	ldw	r2,56(r4)
  802b20:	10002e26 	beq	r2,zero,802bdc <_fgets_r+0x100>
  802b24:	853fffc4 	addi	r20,r16,-1
  802b28:	b027883a 	mov	r19,r22
  802b2c:	88800117 	ldw	r2,4(r17)
  802b30:	a809883a 	mov	r4,r21
  802b34:	880b883a 	mov	r5,r17
  802b38:	100d883a 	mov	r6,r2
  802b3c:	1000031e 	bne	r2,zero,802b4c <_fgets_r+0x70>
  802b40:	0804ba00 	call	804ba0 <__srefill_r>
  802b44:	1000341e 	bne	r2,zero,802c18 <_fgets_r+0x13c>
  802b48:	89800117 	ldw	r6,4(r17)
  802b4c:	01400284 	movi	r5,10
  802b50:	3021883a 	mov	r16,r6
  802b54:	8c800017 	ldw	r18,0(r17)
  802b58:	a180012e 	bgeu	r20,r6,802b60 <_fgets_r+0x84>
  802b5c:	a021883a 	mov	r16,r20
  802b60:	9009883a 	mov	r4,r18
  802b64:	800d883a 	mov	r6,r16
  802b68:	08047e00 	call	8047e0 <memchr>
  802b6c:	1007883a 	mov	r3,r2
  802b70:	900b883a 	mov	r5,r18
  802b74:	9809883a 	mov	r4,r19
  802b78:	800d883a 	mov	r6,r16
  802b7c:	1000191e 	bne	r2,zero,802be4 <_fgets_r+0x108>
  802b80:	88800117 	ldw	r2,4(r17)
  802b84:	88c00017 	ldw	r3,0(r17)
  802b88:	9c27883a 	add	r19,r19,r16
  802b8c:	1405c83a 	sub	r2,r2,r16
  802b90:	1c07883a 	add	r3,r3,r16
  802b94:	88c00015 	stw	r3,0(r17)
  802b98:	88800115 	stw	r2,4(r17)
  802b9c:	08048c40 	call	8048c4 <memcpy>
  802ba0:	a407c83a 	sub	r3,r20,r16
  802ba4:	1829883a 	mov	r20,r3
  802ba8:	183fe01e 	bne	r3,zero,802b2c <_fgets_r+0x50>
  802bac:	98000005 	stb	zero,0(r19)
  802bb0:	b005883a 	mov	r2,r22
  802bb4:	dfc00717 	ldw	ra,28(sp)
  802bb8:	dd800617 	ldw	r22,24(sp)
  802bbc:	dd400517 	ldw	r21,20(sp)
  802bc0:	dd000417 	ldw	r20,16(sp)
  802bc4:	dcc00317 	ldw	r19,12(sp)
  802bc8:	dc800217 	ldw	r18,8(sp)
  802bcc:	dc400117 	ldw	r17,4(sp)
  802bd0:	dc000017 	ldw	r16,0(sp)
  802bd4:	dec00804 	addi	sp,sp,32
  802bd8:	f800283a 	ret
  802bdc:	0802cb00 	call	802cb0 <__sinit>
  802be0:	003fd006 	br	802b24 <_fgets_r+0x48>
  802be4:	88800117 	ldw	r2,4(r17)
  802be8:	18c00044 	addi	r3,r3,1
  802bec:	1ca1c83a 	sub	r16,r3,r18
  802bf0:	1405c83a 	sub	r2,r2,r16
  802bf4:	800d883a 	mov	r6,r16
  802bf8:	88c00015 	stw	r3,0(r17)
  802bfc:	88800115 	stw	r2,4(r17)
  802c00:	900b883a 	mov	r5,r18
  802c04:	9809883a 	mov	r4,r19
  802c08:	08048c40 	call	8048c4 <memcpy>
  802c0c:	9c21883a 	add	r16,r19,r16
  802c10:	80000005 	stb	zero,0(r16)
  802c14:	003fe606 	br	802bb0 <_fgets_r+0xd4>
  802c18:	9dbfe41e 	bne	r19,r22,802bac <_fgets_r+0xd0>
  802c1c:	002d883a 	mov	r22,zero
  802c20:	003fe306 	br	802bb0 <_fgets_r+0xd4>

00802c24 <fgets>:
  802c24:	00802074 	movhi	r2,129
  802c28:	109b3004 	addi	r2,r2,27840
  802c2c:	2013883a 	mov	r9,r4
  802c30:	11000017 	ldw	r4,0(r2)
  802c34:	2805883a 	mov	r2,r5
  802c38:	300f883a 	mov	r7,r6
  802c3c:	480b883a 	mov	r5,r9
  802c40:	100d883a 	mov	r6,r2
  802c44:	0802adc1 	jmpi	802adc <_fgets_r>

00802c48 <std>:
  802c48:	00802034 	movhi	r2,128
  802c4c:	1093d904 	addi	r2,r2,20324
  802c50:	20800b15 	stw	r2,44(r4)
  802c54:	00802034 	movhi	r2,128
  802c58:	10941404 	addi	r2,r2,20560
  802c5c:	20800815 	stw	r2,32(r4)
  802c60:	00c02034 	movhi	r3,128
  802c64:	18d3f504 	addi	r3,r3,20436
  802c68:	00802034 	movhi	r2,128
  802c6c:	1093db04 	addi	r2,r2,20332
  802c70:	2140030d 	sth	r5,12(r4)
  802c74:	2180038d 	sth	r6,14(r4)
  802c78:	20c00915 	stw	r3,36(r4)
  802c7c:	20800a15 	stw	r2,40(r4)
  802c80:	20000015 	stw	zero,0(r4)
  802c84:	20000115 	stw	zero,4(r4)
  802c88:	20000215 	stw	zero,8(r4)
  802c8c:	20000415 	stw	zero,16(r4)
  802c90:	20000515 	stw	zero,20(r4)
  802c94:	20000615 	stw	zero,24(r4)
  802c98:	21000715 	stw	r4,28(r4)
  802c9c:	f800283a 	ret

00802ca0 <__sfp_lock_acquire>:
  802ca0:	f800283a 	ret

00802ca4 <__sfp_lock_release>:
  802ca4:	f800283a 	ret

00802ca8 <__sinit_lock_acquire>:
  802ca8:	f800283a 	ret

00802cac <__sinit_lock_release>:
  802cac:	f800283a 	ret

00802cb0 <__sinit>:
  802cb0:	20800e17 	ldw	r2,56(r4)
  802cb4:	defffd04 	addi	sp,sp,-12
  802cb8:	dc400115 	stw	r17,4(sp)
  802cbc:	dc000015 	stw	r16,0(sp)
  802cc0:	dfc00215 	stw	ra,8(sp)
  802cc4:	04400044 	movi	r17,1
  802cc8:	01400104 	movi	r5,4
  802ccc:	000d883a 	mov	r6,zero
  802cd0:	2021883a 	mov	r16,r4
  802cd4:	2200bb04 	addi	r8,r4,748
  802cd8:	200f883a 	mov	r7,r4
  802cdc:	10000526 	beq	r2,zero,802cf4 <__sinit+0x44>
  802ce0:	dfc00217 	ldw	ra,8(sp)
  802ce4:	dc400117 	ldw	r17,4(sp)
  802ce8:	dc000017 	ldw	r16,0(sp)
  802cec:	dec00304 	addi	sp,sp,12
  802cf0:	f800283a 	ret
  802cf4:	21000117 	ldw	r4,4(r4)
  802cf8:	00802034 	movhi	r2,128
  802cfc:	108b6504 	addi	r2,r2,11668
  802d00:	00c000c4 	movi	r3,3
  802d04:	80800f15 	stw	r2,60(r16)
  802d08:	80c0b915 	stw	r3,740(r16)
  802d0c:	8200ba15 	stw	r8,744(r16)
  802d10:	84400e15 	stw	r17,56(r16)
  802d14:	8000b815 	stw	zero,736(r16)
  802d18:	0802c480 	call	802c48 <std>
  802d1c:	81000217 	ldw	r4,8(r16)
  802d20:	880d883a 	mov	r6,r17
  802d24:	800f883a 	mov	r7,r16
  802d28:	01400284 	movi	r5,10
  802d2c:	0802c480 	call	802c48 <std>
  802d30:	81000317 	ldw	r4,12(r16)
  802d34:	800f883a 	mov	r7,r16
  802d38:	01400484 	movi	r5,18
  802d3c:	01800084 	movi	r6,2
  802d40:	dfc00217 	ldw	ra,8(sp)
  802d44:	dc400117 	ldw	r17,4(sp)
  802d48:	dc000017 	ldw	r16,0(sp)
  802d4c:	dec00304 	addi	sp,sp,12
  802d50:	0802c481 	jmpi	802c48 <std>

00802d54 <__fp_lock>:
  802d54:	0005883a 	mov	r2,zero
  802d58:	f800283a 	ret

00802d5c <__fp_unlock>:
  802d5c:	0005883a 	mov	r2,zero
  802d60:	f800283a 	ret

00802d64 <__fp_unlock_all>:
  802d64:	00802074 	movhi	r2,129
  802d68:	109b3004 	addi	r2,r2,27840
  802d6c:	11000017 	ldw	r4,0(r2)
  802d70:	01402034 	movhi	r5,128
  802d74:	294b5704 	addi	r5,r5,11612
  802d78:	0803d401 	jmpi	803d40 <_fwalk>

00802d7c <__fp_lock_all>:
  802d7c:	00802074 	movhi	r2,129
  802d80:	109b3004 	addi	r2,r2,27840
  802d84:	11000017 	ldw	r4,0(r2)
  802d88:	01402034 	movhi	r5,128
  802d8c:	294b5504 	addi	r5,r5,11604
  802d90:	0803d401 	jmpi	803d40 <_fwalk>

00802d94 <_cleanup_r>:
  802d94:	01402034 	movhi	r5,128
  802d98:	2949dc04 	addi	r5,r5,10096
  802d9c:	0803d401 	jmpi	803d40 <_fwalk>

00802da0 <_cleanup>:
  802da0:	00802074 	movhi	r2,129
  802da4:	109b3104 	addi	r2,r2,27844
  802da8:	11000017 	ldw	r4,0(r2)
  802dac:	0802d941 	jmpi	802d94 <_cleanup_r>

00802db0 <__sfmoreglue>:
  802db0:	defffc04 	addi	sp,sp,-16
  802db4:	dc000015 	stw	r16,0(sp)
  802db8:	2821883a 	mov	r16,r5
  802dbc:	dc400115 	stw	r17,4(sp)
  802dc0:	01401704 	movi	r5,92
  802dc4:	2023883a 	mov	r17,r4
  802dc8:	8009883a 	mov	r4,r16
  802dcc:	dfc00315 	stw	ra,12(sp)
  802dd0:	dcc00215 	stw	r19,8(sp)
  802dd4:	0801fec0 	call	801fec <__mulsi3>
  802dd8:	11400304 	addi	r5,r2,12
  802ddc:	8809883a 	mov	r4,r17
  802de0:	1027883a 	mov	r19,r2
  802de4:	08040a00 	call	8040a0 <_malloc_r>
  802de8:	10c00304 	addi	r3,r2,12
  802dec:	1023883a 	mov	r17,r2
  802df0:	1809883a 	mov	r4,r3
  802df4:	980d883a 	mov	r6,r19
  802df8:	000b883a 	mov	r5,zero
  802dfc:	10000b26 	beq	r2,zero,802e2c <__sfmoreglue+0x7c>
  802e00:	14000115 	stw	r16,4(r2)
  802e04:	10c00215 	stw	r3,8(r2)
  802e08:	10000015 	stw	zero,0(r2)
  802e0c:	08049640 	call	804964 <memset>
  802e10:	8805883a 	mov	r2,r17
  802e14:	dfc00317 	ldw	ra,12(sp)
  802e18:	dcc00217 	ldw	r19,8(sp)
  802e1c:	dc400117 	ldw	r17,4(sp)
  802e20:	dc000017 	ldw	r16,0(sp)
  802e24:	dec00404 	addi	sp,sp,16
  802e28:	f800283a 	ret
  802e2c:	0023883a 	mov	r17,zero
  802e30:	8805883a 	mov	r2,r17
  802e34:	dfc00317 	ldw	ra,12(sp)
  802e38:	dcc00217 	ldw	r19,8(sp)
  802e3c:	dc400117 	ldw	r17,4(sp)
  802e40:	dc000017 	ldw	r16,0(sp)
  802e44:	dec00404 	addi	sp,sp,16
  802e48:	f800283a 	ret

00802e4c <__sfp>:
  802e4c:	defffd04 	addi	sp,sp,-12
  802e50:	00802074 	movhi	r2,129
  802e54:	109b3104 	addi	r2,r2,27844
  802e58:	dc000015 	stw	r16,0(sp)
  802e5c:	14000017 	ldw	r16,0(r2)
  802e60:	dc400115 	stw	r17,4(sp)
  802e64:	dfc00215 	stw	ra,8(sp)
  802e68:	80800e17 	ldw	r2,56(r16)
  802e6c:	2023883a 	mov	r17,r4
  802e70:	10002626 	beq	r2,zero,802f0c <__sfp+0xc0>
  802e74:	8400b804 	addi	r16,r16,736
  802e78:	80800117 	ldw	r2,4(r16)
  802e7c:	81000217 	ldw	r4,8(r16)
  802e80:	10ffffc4 	addi	r3,r2,-1
  802e84:	18000916 	blt	r3,zero,802eac <__sfp+0x60>
  802e88:	2080030f 	ldh	r2,12(r4)
  802e8c:	10000b26 	beq	r2,zero,802ebc <__sfp+0x70>
  802e90:	017fffc4 	movi	r5,-1
  802e94:	00000206 	br	802ea0 <__sfp+0x54>
  802e98:	2080030f 	ldh	r2,12(r4)
  802e9c:	10000726 	beq	r2,zero,802ebc <__sfp+0x70>
  802ea0:	18ffffc4 	addi	r3,r3,-1
  802ea4:	21001704 	addi	r4,r4,92
  802ea8:	197ffb1e 	bne	r3,r5,802e98 <__sfp+0x4c>
  802eac:	80800017 	ldw	r2,0(r16)
  802eb0:	10001926 	beq	r2,zero,802f18 <__sfp+0xcc>
  802eb4:	1021883a 	mov	r16,r2
  802eb8:	003fef06 	br	802e78 <__sfp+0x2c>
  802ebc:	00bfffc4 	movi	r2,-1
  802ec0:	00c00044 	movi	r3,1
  802ec4:	2080038d 	sth	r2,14(r4)
  802ec8:	20c0030d 	sth	r3,12(r4)
  802ecc:	20000015 	stw	zero,0(r4)
  802ed0:	20000215 	stw	zero,8(r4)
  802ed4:	20000115 	stw	zero,4(r4)
  802ed8:	20000415 	stw	zero,16(r4)
  802edc:	20000515 	stw	zero,20(r4)
  802ee0:	20000615 	stw	zero,24(r4)
  802ee4:	20000c15 	stw	zero,48(r4)
  802ee8:	20000d15 	stw	zero,52(r4)
  802eec:	20001115 	stw	zero,68(r4)
  802ef0:	20001215 	stw	zero,72(r4)
  802ef4:	2005883a 	mov	r2,r4
  802ef8:	dfc00217 	ldw	ra,8(sp)
  802efc:	dc400117 	ldw	r17,4(sp)
  802f00:	dc000017 	ldw	r16,0(sp)
  802f04:	dec00304 	addi	sp,sp,12
  802f08:	f800283a 	ret
  802f0c:	8009883a 	mov	r4,r16
  802f10:	0802cb00 	call	802cb0 <__sinit>
  802f14:	003fd706 	br	802e74 <__sfp+0x28>
  802f18:	8809883a 	mov	r4,r17
  802f1c:	01400104 	movi	r5,4
  802f20:	0802db00 	call	802db0 <__sfmoreglue>
  802f24:	80800015 	stw	r2,0(r16)
  802f28:	103fe21e 	bne	r2,zero,802eb4 <__sfp+0x68>
  802f2c:	00800304 	movi	r2,12
  802f30:	0009883a 	mov	r4,zero
  802f34:	88800015 	stw	r2,0(r17)
  802f38:	003fee06 	br	802ef4 <__sfp+0xa8>

00802f3c <_fopen_r>:
  802f3c:	defffa04 	addi	sp,sp,-24
  802f40:	dcc00415 	stw	r19,16(sp)
  802f44:	2827883a 	mov	r19,r5
  802f48:	300b883a 	mov	r5,r6
  802f4c:	d80d883a 	mov	r6,sp
  802f50:	dc800315 	stw	r18,12(sp)
  802f54:	dc400215 	stw	r17,8(sp)
  802f58:	dc000115 	stw	r16,4(sp)
  802f5c:	dfc00515 	stw	ra,20(sp)
  802f60:	2021883a 	mov	r16,r4
  802f64:	080a7480 	call	80a748 <__sflags>
  802f68:	1025883a 	mov	r18,r2
  802f6c:	8009883a 	mov	r4,r16
  802f70:	0023883a 	mov	r17,zero
  802f74:	1000081e 	bne	r2,zero,802f98 <_fopen_r+0x5c>
  802f78:	8805883a 	mov	r2,r17
  802f7c:	dfc00517 	ldw	ra,20(sp)
  802f80:	dcc00417 	ldw	r19,16(sp)
  802f84:	dc800317 	ldw	r18,12(sp)
  802f88:	dc400217 	ldw	r17,8(sp)
  802f8c:	dc000117 	ldw	r16,4(sp)
  802f90:	dec00604 	addi	sp,sp,24
  802f94:	f800283a 	ret
  802f98:	0802e4c0 	call	802e4c <__sfp>
  802f9c:	1023883a 	mov	r17,r2
  802fa0:	980b883a 	mov	r5,r19
  802fa4:	8009883a 	mov	r4,r16
  802fa8:	01c06d84 	movi	r7,438
  802fac:	103ff226 	beq	r2,zero,802f78 <_fopen_r+0x3c>
  802fb0:	d9800017 	ldw	r6,0(sp)
  802fb4:	08049fc0 	call	8049fc <_open_r>
  802fb8:	10001816 	blt	r2,zero,80301c <_fopen_r+0xe0>
  802fbc:	00c02034 	movhi	r3,128
  802fc0:	18d3f504 	addi	r3,r3,20436
  802fc4:	923fffcc 	andi	r8,r18,65535
  802fc8:	8880038d 	sth	r2,14(r17)
  802fcc:	00802034 	movhi	r2,128
  802fd0:	10941404 	addi	r2,r2,20560
  802fd4:	88800815 	stw	r2,32(r17)
  802fd8:	88c00915 	stw	r3,36(r17)
  802fdc:	00802034 	movhi	r2,128
  802fe0:	1093db04 	addi	r2,r2,20332
  802fe4:	00c02034 	movhi	r3,128
  802fe8:	18d3d904 	addi	r3,r3,20324
  802fec:	4200400c 	andi	r8,r8,256
  802ff0:	8c80030d 	sth	r18,12(r17)
  802ff4:	8009883a 	mov	r4,r16
  802ff8:	880b883a 	mov	r5,r17
  802ffc:	000d883a 	mov	r6,zero
  803000:	01c00084 	movi	r7,2
  803004:	88800a15 	stw	r2,40(r17)
  803008:	88c00b15 	stw	r3,44(r17)
  80300c:	8c400715 	stw	r17,28(r17)
  803010:	403fd926 	beq	r8,zero,802f78 <_fopen_r+0x3c>
  803014:	08037a40 	call	8037a4 <_fseek_r>
  803018:	003fd706 	br	802f78 <_fopen_r+0x3c>
  80301c:	0802ca00 	call	802ca0 <__sfp_lock_acquire>
  803020:	8800030d 	sth	zero,12(r17)
  803024:	0802ca40 	call	802ca4 <__sfp_lock_release>
  803028:	0023883a 	mov	r17,zero
  80302c:	003fd206 	br	802f78 <_fopen_r+0x3c>

00803030 <fopen>:
  803030:	01802074 	movhi	r6,129
  803034:	319b3004 	addi	r6,r6,27840
  803038:	2007883a 	mov	r3,r4
  80303c:	31000017 	ldw	r4,0(r6)
  803040:	280d883a 	mov	r6,r5
  803044:	180b883a 	mov	r5,r3
  803048:	0802f3c1 	jmpi	802f3c <_fopen_r>

0080304c <fprintf>:
  80304c:	defffc04 	addi	sp,sp,-16
  803050:	dfc00115 	stw	ra,4(sp)
  803054:	d9800215 	stw	r6,8(sp)
  803058:	d9c00315 	stw	r7,12(sp)
  80305c:	d8800204 	addi	r2,sp,8
  803060:	100d883a 	mov	r6,r2
  803064:	d8800015 	stw	r2,0(sp)
  803068:	08073cc0 	call	8073cc <__vfprintf_internal>
  80306c:	dfc00117 	ldw	ra,4(sp)
  803070:	dec00404 	addi	sp,sp,16
  803074:	f800283a 	ret

00803078 <_fprintf_r>:
  803078:	defffd04 	addi	sp,sp,-12
  80307c:	2807883a 	mov	r3,r5
  803080:	dfc00115 	stw	ra,4(sp)
  803084:	d9c00215 	stw	r7,8(sp)
  803088:	d8800204 	addi	r2,sp,8
  80308c:	300b883a 	mov	r5,r6
  803090:	1809883a 	mov	r4,r3
  803094:	100d883a 	mov	r6,r2
  803098:	d8800015 	stw	r2,0(sp)
  80309c:	08073cc0 	call	8073cc <__vfprintf_internal>
  8030a0:	dfc00117 	ldw	ra,4(sp)
  8030a4:	dec00304 	addi	sp,sp,12
  8030a8:	f800283a 	ret

008030ac <_fread_r>:
  8030ac:	defff504 	addi	sp,sp,-44
  8030b0:	dd800715 	stw	r22,28(sp)
  8030b4:	dc000115 	stw	r16,4(sp)
  8030b8:	202d883a 	mov	r22,r4
  8030bc:	2821883a 	mov	r16,r5
  8030c0:	3809883a 	mov	r4,r7
  8030c4:	300b883a 	mov	r5,r6
  8030c8:	df000915 	stw	fp,36(sp)
  8030cc:	ddc00815 	stw	r23,32(sp)
  8030d0:	dcc00415 	stw	r19,16(sp)
  8030d4:	dfc00a15 	stw	ra,40(sp)
  8030d8:	dd400615 	stw	r21,24(sp)
  8030dc:	dd000515 	stw	r20,20(sp)
  8030e0:	dc800315 	stw	r18,12(sp)
  8030e4:	dc400215 	stw	r17,8(sp)
  8030e8:	d9800015 	stw	r6,0(sp)
  8030ec:	3839883a 	mov	fp,r7
  8030f0:	0801fec0 	call	801fec <__mulsi3>
  8030f4:	102f883a 	mov	r23,r2
  8030f8:	dcc00b17 	ldw	r19,44(sp)
  8030fc:	10005926 	beq	r2,zero,803264 <_fread_r+0x1b8>
  803100:	b0000226 	beq	r22,zero,80310c <_fread_r+0x60>
  803104:	b0800e17 	ldw	r2,56(r22)
  803108:	10005826 	beq	r2,zero,80326c <_fread_r+0x1c0>
  80310c:	9c400117 	ldw	r17,4(r19)
  803110:	88005a16 	blt	r17,zero,80327c <_fread_r+0x1d0>
  803114:	9880030b 	ldhu	r2,12(r19)
  803118:	8029883a 	mov	r20,r16
  80311c:	1080008c 	andi	r2,r2,2
  803120:	1000221e 	bne	r2,zero,8031ac <_fread_r+0x100>
  803124:	b825883a 	mov	r18,r23
  803128:	00000106 	br	803130 <_fread_r+0x84>
  80312c:	9c400117 	ldw	r17,4(r19)
  803130:	a009883a 	mov	r4,r20
  803134:	880d883a 	mov	r6,r17
  803138:	8c80552e 	bgeu	r17,r18,803290 <_fread_r+0x1e4>
  80313c:	99400017 	ldw	r5,0(r19)
  803140:	a469883a 	add	r20,r20,r17
  803144:	9465c83a 	sub	r18,r18,r17
  803148:	08048c40 	call	8048c4 <memcpy>
  80314c:	98800017 	ldw	r2,0(r19)
  803150:	b009883a 	mov	r4,r22
  803154:	980b883a 	mov	r5,r19
  803158:	1461883a 	add	r16,r2,r17
  80315c:	9c000015 	stw	r16,0(r19)
  803160:	0804ba00 	call	804ba0 <__srefill_r>
  803164:	103ff126 	beq	r2,zero,80312c <_fread_r+0x80>
  803168:	d9400017 	ldw	r5,0(sp)
  80316c:	bc89c83a 	sub	r4,r23,r18
  803170:	08117700 	call	811770 <__udivsi3>
  803174:	1039883a 	mov	fp,r2
  803178:	e005883a 	mov	r2,fp
  80317c:	dfc00a17 	ldw	ra,40(sp)
  803180:	df000917 	ldw	fp,36(sp)
  803184:	ddc00817 	ldw	r23,32(sp)
  803188:	dd800717 	ldw	r22,28(sp)
  80318c:	dd400617 	ldw	r21,24(sp)
  803190:	dd000517 	ldw	r20,20(sp)
  803194:	dcc00417 	ldw	r19,16(sp)
  803198:	dc800317 	ldw	r18,12(sp)
  80319c:	dc400217 	ldw	r17,8(sp)
  8031a0:	dc000117 	ldw	r16,4(sp)
  8031a4:	dec00b04 	addi	sp,sp,44
  8031a8:	f800283a 	ret
  8031ac:	b825883a 	mov	r18,r23
  8031b0:	8dc03536 	bltu	r17,r23,803288 <_fread_r+0x1dc>
  8031b4:	99400017 	ldw	r5,0(r19)
  8031b8:	a009883a 	mov	r4,r20
  8031bc:	900d883a 	mov	r6,r18
  8031c0:	08048c40 	call	8048c4 <memcpy>
  8031c4:	9c000017 	ldw	r16,0(r19)
  8031c8:	98800117 	ldw	r2,4(r19)
  8031cc:	99400c17 	ldw	r5,48(r19)
  8031d0:	84a1883a 	add	r16,r16,r18
  8031d4:	14a3c83a 	sub	r17,r2,r18
  8031d8:	a4ab883a 	add	r21,r20,r18
  8031dc:	9c400115 	stw	r17,4(r19)
  8031e0:	9c000015 	stw	r16,0(r19)
  8031e4:	bca9c83a 	sub	r20,r23,r18
  8031e8:	28000826 	beq	r5,zero,80320c <_fread_r+0x160>
  8031ec:	a03fe226 	beq	r20,zero,803178 <_fread_r+0xcc>
  8031f0:	98801004 	addi	r2,r19,64
  8031f4:	28800326 	beq	r5,r2,803204 <_fread_r+0x158>
  8031f8:	b009883a 	mov	r4,r22
  8031fc:	08034240 	call	803424 <_free_r>
  803200:	9c000017 	ldw	r16,0(r19)
  803204:	98000c15 	stw	zero,48(r19)
  803208:	00000106 	br	803210 <_fread_r+0x164>
  80320c:	a03fda26 	beq	r20,zero,803178 <_fread_r+0xcc>
  803210:	9c800417 	ldw	r18,16(r19)
  803214:	9c400517 	ldw	r17,20(r19)
  803218:	9d400015 	stw	r21,0(r19)
  80321c:	9d400415 	stw	r21,16(r19)
  803220:	9d000515 	stw	r20,20(r19)
  803224:	b009883a 	mov	r4,r22
  803228:	980b883a 	mov	r5,r19
  80322c:	0804ba00 	call	804ba0 <__srefill_r>
  803230:	98c00117 	ldw	r3,4(r19)
  803234:	9c800415 	stw	r18,16(r19)
  803238:	9c400515 	stw	r17,20(r19)
  80323c:	a8eb883a 	add	r21,r21,r3
  803240:	9c000015 	stw	r16,0(r19)
  803244:	a0e9c83a 	sub	r20,r20,r3
  803248:	98000115 	stw	zero,4(r19)
  80324c:	103fef26 	beq	r2,zero,80320c <_fread_r+0x160>
  803250:	d9400017 	ldw	r5,0(sp)
  803254:	bd09c83a 	sub	r4,r23,r20
  803258:	08117700 	call	811770 <__udivsi3>
  80325c:	1039883a 	mov	fp,r2
  803260:	003fc506 	br	803178 <_fread_r+0xcc>
  803264:	0039883a 	mov	fp,zero
  803268:	003fc306 	br	803178 <_fread_r+0xcc>
  80326c:	b009883a 	mov	r4,r22
  803270:	0802cb00 	call	802cb0 <__sinit>
  803274:	9c400117 	ldw	r17,4(r19)
  803278:	883fa60e 	bge	r17,zero,803114 <_fread_r+0x68>
  80327c:	0023883a 	mov	r17,zero
  803280:	98000115 	stw	zero,4(r19)
  803284:	003fa306 	br	803114 <_fread_r+0x68>
  803288:	8825883a 	mov	r18,r17
  80328c:	003fc906 	br	8031b4 <_fread_r+0x108>
  803290:	99400017 	ldw	r5,0(r19)
  803294:	900d883a 	mov	r6,r18
  803298:	08048c40 	call	8048c4 <memcpy>
  80329c:	98c00117 	ldw	r3,4(r19)
  8032a0:	98800017 	ldw	r2,0(r19)
  8032a4:	1c87c83a 	sub	r3,r3,r18
  8032a8:	1485883a 	add	r2,r2,r18
  8032ac:	98800015 	stw	r2,0(r19)
  8032b0:	98c00115 	stw	r3,4(r19)
  8032b4:	003fb006 	br	803178 <_fread_r+0xcc>

008032b8 <fread>:
  8032b8:	00802074 	movhi	r2,129
  8032bc:	109b3004 	addi	r2,r2,27840
  8032c0:	2017883a 	mov	r11,r4
  8032c4:	11000017 	ldw	r4,0(r2)
  8032c8:	defffe04 	addi	sp,sp,-8
  8032cc:	3013883a 	mov	r9,r6
  8032d0:	2805883a 	mov	r2,r5
  8032d4:	d9c00015 	stw	r7,0(sp)
  8032d8:	580b883a 	mov	r5,r11
  8032dc:	100d883a 	mov	r6,r2
  8032e0:	480f883a 	mov	r7,r9
  8032e4:	dfc00115 	stw	ra,4(sp)
  8032e8:	08030ac0 	call	8030ac <_fread_r>
  8032ec:	dfc00117 	ldw	ra,4(sp)
  8032f0:	dec00204 	addi	sp,sp,8
  8032f4:	f800283a 	ret

008032f8 <_malloc_trim_r>:
  8032f8:	defffb04 	addi	sp,sp,-20
  8032fc:	dcc00315 	stw	r19,12(sp)
  803300:	04c02074 	movhi	r19,129
  803304:	9cd59404 	addi	r19,r19,22096
  803308:	dc800215 	stw	r18,8(sp)
  80330c:	dc400115 	stw	r17,4(sp)
  803310:	dc000015 	stw	r16,0(sp)
  803314:	2823883a 	mov	r17,r5
  803318:	2025883a 	mov	r18,r4
  80331c:	dfc00415 	stw	ra,16(sp)
  803320:	08122280 	call	812228 <__malloc_lock>
  803324:	98800217 	ldw	r2,8(r19)
  803328:	9009883a 	mov	r4,r18
  80332c:	000b883a 	mov	r5,zero
  803330:	10c00117 	ldw	r3,4(r2)
  803334:	00bfff04 	movi	r2,-4
  803338:	18a0703a 	and	r16,r3,r2
  80333c:	8463c83a 	sub	r17,r16,r17
  803340:	8c43fbc4 	addi	r17,r17,4079
  803344:	8822d33a 	srli	r17,r17,12
  803348:	0083ffc4 	movi	r2,4095
  80334c:	8c7fffc4 	addi	r17,r17,-1
  803350:	8822933a 	slli	r17,r17,12
  803354:	1440060e 	bge	r2,r17,803370 <_malloc_trim_r+0x78>
  803358:	0804de00 	call	804de0 <_sbrk_r>
  80335c:	98c00217 	ldw	r3,8(r19)
  803360:	9009883a 	mov	r4,r18
  803364:	044bc83a 	sub	r5,zero,r17
  803368:	80c7883a 	add	r3,r16,r3
  80336c:	10c00926 	beq	r2,r3,803394 <_malloc_trim_r+0x9c>
  803370:	08122480 	call	812248 <__malloc_unlock>
  803374:	0005883a 	mov	r2,zero
  803378:	dfc00417 	ldw	ra,16(sp)
  80337c:	dcc00317 	ldw	r19,12(sp)
  803380:	dc800217 	ldw	r18,8(sp)
  803384:	dc400117 	ldw	r17,4(sp)
  803388:	dc000017 	ldw	r16,0(sp)
  80338c:	dec00504 	addi	sp,sp,20
  803390:	f800283a 	ret
  803394:	9009883a 	mov	r4,r18
  803398:	0804de00 	call	804de0 <_sbrk_r>
  80339c:	844dc83a 	sub	r6,r16,r17
  8033a0:	00ffffc4 	movi	r3,-1
  8033a4:	9009883a 	mov	r4,r18
  8033a8:	000b883a 	mov	r5,zero
  8033ac:	01c020b4 	movhi	r7,130
  8033b0:	39e22804 	addi	r7,r7,-30560
  8033b4:	31800054 	ori	r6,r6,1
  8033b8:	10c00926 	beq	r2,r3,8033e0 <_malloc_trim_r+0xe8>
  8033bc:	38800017 	ldw	r2,0(r7)
  8033c0:	98c00217 	ldw	r3,8(r19)
  8033c4:	9009883a 	mov	r4,r18
  8033c8:	1445c83a 	sub	r2,r2,r17
  8033cc:	38800015 	stw	r2,0(r7)
  8033d0:	19800115 	stw	r6,4(r3)
  8033d4:	08122480 	call	812248 <__malloc_unlock>
  8033d8:	00800044 	movi	r2,1
  8033dc:	003fe606 	br	803378 <_malloc_trim_r+0x80>
  8033e0:	0804de00 	call	804de0 <_sbrk_r>
  8033e4:	99800217 	ldw	r6,8(r19)
  8033e8:	100f883a 	mov	r7,r2
  8033ec:	9009883a 	mov	r4,r18
  8033f0:	1187c83a 	sub	r3,r2,r6
  8033f4:	008003c4 	movi	r2,15
  8033f8:	19400054 	ori	r5,r3,1
  8033fc:	10ffdc0e 	bge	r2,r3,803370 <_malloc_trim_r+0x78>
  803400:	00802074 	movhi	r2,129
  803404:	109b3304 	addi	r2,r2,27852
  803408:	10c00017 	ldw	r3,0(r2)
  80340c:	008020b4 	movhi	r2,130
  803410:	10a22804 	addi	r2,r2,-30560
  803414:	31400115 	stw	r5,4(r6)
  803418:	38c7c83a 	sub	r3,r7,r3
  80341c:	10c00015 	stw	r3,0(r2)
  803420:	003fd306 	br	803370 <_malloc_trim_r+0x78>

00803424 <_free_r>:
  803424:	defffd04 	addi	sp,sp,-12
  803428:	dc400115 	stw	r17,4(sp)
  80342c:	dc000015 	stw	r16,0(sp)
  803430:	dfc00215 	stw	ra,8(sp)
  803434:	2821883a 	mov	r16,r5
  803438:	2023883a 	mov	r17,r4
  80343c:	28005a26 	beq	r5,zero,8035a8 <_free_r+0x184>
  803440:	08122280 	call	812228 <__malloc_lock>
  803444:	823ffe04 	addi	r8,r16,-8
  803448:	41400117 	ldw	r5,4(r8)
  80344c:	00bfff84 	movi	r2,-2
  803450:	02802074 	movhi	r10,129
  803454:	52959404 	addi	r10,r10,22096
  803458:	288e703a 	and	r7,r5,r2
  80345c:	41cd883a 	add	r6,r8,r7
  803460:	30c00117 	ldw	r3,4(r6)
  803464:	51000217 	ldw	r4,8(r10)
  803468:	00bfff04 	movi	r2,-4
  80346c:	1892703a 	and	r9,r3,r2
  803470:	5017883a 	mov	r11,r10
  803474:	31006726 	beq	r6,r4,803614 <_free_r+0x1f0>
  803478:	2880004c 	andi	r2,r5,1
  80347c:	1005003a 	cmpeq	r2,r2,zero
  803480:	32400115 	stw	r9,4(r6)
  803484:	10001a1e 	bne	r2,zero,8034f0 <_free_r+0xcc>
  803488:	000b883a 	mov	r5,zero
  80348c:	3247883a 	add	r3,r6,r9
  803490:	18800117 	ldw	r2,4(r3)
  803494:	1080004c 	andi	r2,r2,1
  803498:	1000231e 	bne	r2,zero,803528 <_free_r+0x104>
  80349c:	280ac03a 	cmpne	r5,r5,zero
  8034a0:	3a4f883a 	add	r7,r7,r9
  8034a4:	2800451e 	bne	r5,zero,8035bc <_free_r+0x198>
  8034a8:	31000217 	ldw	r4,8(r6)
  8034ac:	00802074 	movhi	r2,129
  8034b0:	10959604 	addi	r2,r2,22104
  8034b4:	20807b26 	beq	r4,r2,8036a4 <_free_r+0x280>
  8034b8:	30800317 	ldw	r2,12(r6)
  8034bc:	3a07883a 	add	r3,r7,r8
  8034c0:	19c00015 	stw	r7,0(r3)
  8034c4:	11000215 	stw	r4,8(r2)
  8034c8:	20800315 	stw	r2,12(r4)
  8034cc:	38800054 	ori	r2,r7,1
  8034d0:	40800115 	stw	r2,4(r8)
  8034d4:	28001a26 	beq	r5,zero,803540 <_free_r+0x11c>
  8034d8:	8809883a 	mov	r4,r17
  8034dc:	dfc00217 	ldw	ra,8(sp)
  8034e0:	dc400117 	ldw	r17,4(sp)
  8034e4:	dc000017 	ldw	r16,0(sp)
  8034e8:	dec00304 	addi	sp,sp,12
  8034ec:	08122481 	jmpi	812248 <__malloc_unlock>
  8034f0:	80bffe17 	ldw	r2,-8(r16)
  8034f4:	50c00204 	addi	r3,r10,8
  8034f8:	4091c83a 	sub	r8,r8,r2
  8034fc:	41000217 	ldw	r4,8(r8)
  803500:	388f883a 	add	r7,r7,r2
  803504:	20c06126 	beq	r4,r3,80368c <_free_r+0x268>
  803508:	40800317 	ldw	r2,12(r8)
  80350c:	3247883a 	add	r3,r6,r9
  803510:	000b883a 	mov	r5,zero
  803514:	11000215 	stw	r4,8(r2)
  803518:	20800315 	stw	r2,12(r4)
  80351c:	18800117 	ldw	r2,4(r3)
  803520:	1080004c 	andi	r2,r2,1
  803524:	103fdd26 	beq	r2,zero,80349c <_free_r+0x78>
  803528:	38800054 	ori	r2,r7,1
  80352c:	3a07883a 	add	r3,r7,r8
  803530:	280ac03a 	cmpne	r5,r5,zero
  803534:	40800115 	stw	r2,4(r8)
  803538:	19c00015 	stw	r7,0(r3)
  80353c:	283fe61e 	bne	r5,zero,8034d8 <_free_r+0xb4>
  803540:	00807fc4 	movi	r2,511
  803544:	11c01f2e 	bgeu	r2,r7,8035c4 <_free_r+0x1a0>
  803548:	3806d27a 	srli	r3,r7,9
  80354c:	1800481e 	bne	r3,zero,803670 <_free_r+0x24c>
  803550:	3804d0fa 	srli	r2,r7,3
  803554:	100690fa 	slli	r3,r2,3
  803558:	1acd883a 	add	r6,r3,r11
  80355c:	31400217 	ldw	r5,8(r6)
  803560:	31405926 	beq	r6,r5,8036c8 <_free_r+0x2a4>
  803564:	28800117 	ldw	r2,4(r5)
  803568:	00ffff04 	movi	r3,-4
  80356c:	10c4703a 	and	r2,r2,r3
  803570:	3880022e 	bgeu	r7,r2,80357c <_free_r+0x158>
  803574:	29400217 	ldw	r5,8(r5)
  803578:	317ffa1e 	bne	r6,r5,803564 <_free_r+0x140>
  80357c:	29800317 	ldw	r6,12(r5)
  803580:	41800315 	stw	r6,12(r8)
  803584:	41400215 	stw	r5,8(r8)
  803588:	8809883a 	mov	r4,r17
  80358c:	2a000315 	stw	r8,12(r5)
  803590:	32000215 	stw	r8,8(r6)
  803594:	dfc00217 	ldw	ra,8(sp)
  803598:	dc400117 	ldw	r17,4(sp)
  80359c:	dc000017 	ldw	r16,0(sp)
  8035a0:	dec00304 	addi	sp,sp,12
  8035a4:	08122481 	jmpi	812248 <__malloc_unlock>
  8035a8:	dfc00217 	ldw	ra,8(sp)
  8035ac:	dc400117 	ldw	r17,4(sp)
  8035b0:	dc000017 	ldw	r16,0(sp)
  8035b4:	dec00304 	addi	sp,sp,12
  8035b8:	f800283a 	ret
  8035bc:	31000217 	ldw	r4,8(r6)
  8035c0:	003fbd06 	br	8034b8 <_free_r+0x94>
  8035c4:	3806d0fa 	srli	r3,r7,3
  8035c8:	00800044 	movi	r2,1
  8035cc:	51400117 	ldw	r5,4(r10)
  8035d0:	180890fa 	slli	r4,r3,3
  8035d4:	1807d0ba 	srai	r3,r3,2
  8035d8:	22c9883a 	add	r4,r4,r11
  8035dc:	21800217 	ldw	r6,8(r4)
  8035e0:	10c4983a 	sll	r2,r2,r3
  8035e4:	41000315 	stw	r4,12(r8)
  8035e8:	41800215 	stw	r6,8(r8)
  8035ec:	288ab03a 	or	r5,r5,r2
  8035f0:	22000215 	stw	r8,8(r4)
  8035f4:	8809883a 	mov	r4,r17
  8035f8:	51400115 	stw	r5,4(r10)
  8035fc:	32000315 	stw	r8,12(r6)
  803600:	dfc00217 	ldw	ra,8(sp)
  803604:	dc400117 	ldw	r17,4(sp)
  803608:	dc000017 	ldw	r16,0(sp)
  80360c:	dec00304 	addi	sp,sp,12
  803610:	08122481 	jmpi	812248 <__malloc_unlock>
  803614:	2880004c 	andi	r2,r5,1
  803618:	3a4d883a 	add	r6,r7,r9
  80361c:	1000071e 	bne	r2,zero,80363c <_free_r+0x218>
  803620:	80bffe17 	ldw	r2,-8(r16)
  803624:	4091c83a 	sub	r8,r8,r2
  803628:	41000317 	ldw	r4,12(r8)
  80362c:	40c00217 	ldw	r3,8(r8)
  803630:	308d883a 	add	r6,r6,r2
  803634:	20c00215 	stw	r3,8(r4)
  803638:	19000315 	stw	r4,12(r3)
  80363c:	00802074 	movhi	r2,129
  803640:	109b3204 	addi	r2,r2,27848
  803644:	11000017 	ldw	r4,0(r2)
  803648:	30c00054 	ori	r3,r6,1
  80364c:	52000215 	stw	r8,8(r10)
  803650:	40c00115 	stw	r3,4(r8)
  803654:	313fa036 	bltu	r6,r4,8034d8 <_free_r+0xb4>
  803658:	008020b4 	movhi	r2,130
  80365c:	10a21a04 	addi	r2,r2,-30616
  803660:	11400017 	ldw	r5,0(r2)
  803664:	8809883a 	mov	r4,r17
  803668:	08032f80 	call	8032f8 <_malloc_trim_r>
  80366c:	003f9a06 	br	8034d8 <_free_r+0xb4>
  803670:	00800104 	movi	r2,4
  803674:	10c0072e 	bgeu	r2,r3,803694 <_free_r+0x270>
  803678:	00800504 	movi	r2,20
  80367c:	10c01936 	bltu	r2,r3,8036e4 <_free_r+0x2c0>
  803680:	188016c4 	addi	r2,r3,91
  803684:	100690fa 	slli	r3,r2,3
  803688:	003fb306 	br	803558 <_free_r+0x134>
  80368c:	01400044 	movi	r5,1
  803690:	003f7e06 	br	80348c <_free_r+0x68>
  803694:	3804d1ba 	srli	r2,r7,6
  803698:	10800e04 	addi	r2,r2,56
  80369c:	100690fa 	slli	r3,r2,3
  8036a0:	003fad06 	br	803558 <_free_r+0x134>
  8036a4:	22000315 	stw	r8,12(r4)
  8036a8:	22000215 	stw	r8,8(r4)
  8036ac:	3a05883a 	add	r2,r7,r8
  8036b0:	38c00054 	ori	r3,r7,1
  8036b4:	11c00015 	stw	r7,0(r2)
  8036b8:	41000215 	stw	r4,8(r8)
  8036bc:	40c00115 	stw	r3,4(r8)
  8036c0:	41000315 	stw	r4,12(r8)
  8036c4:	003f8406 	br	8034d8 <_free_r+0xb4>
  8036c8:	1005d0ba 	srai	r2,r2,2
  8036cc:	00c00044 	movi	r3,1
  8036d0:	51000117 	ldw	r4,4(r10)
  8036d4:	1886983a 	sll	r3,r3,r2
  8036d8:	20c8b03a 	or	r4,r4,r3
  8036dc:	51000115 	stw	r4,4(r10)
  8036e0:	003fa706 	br	803580 <_free_r+0x15c>
  8036e4:	00801504 	movi	r2,84
  8036e8:	10c00436 	bltu	r2,r3,8036fc <_free_r+0x2d8>
  8036ec:	3804d33a 	srli	r2,r7,12
  8036f0:	10801b84 	addi	r2,r2,110
  8036f4:	100690fa 	slli	r3,r2,3
  8036f8:	003f9706 	br	803558 <_free_r+0x134>
  8036fc:	00805504 	movi	r2,340
  803700:	10c00436 	bltu	r2,r3,803714 <_free_r+0x2f0>
  803704:	3804d3fa 	srli	r2,r7,15
  803708:	10801dc4 	addi	r2,r2,119
  80370c:	100690fa 	slli	r3,r2,3
  803710:	003f9106 	br	803558 <_free_r+0x134>
  803714:	00815504 	movi	r2,1364
  803718:	10c0032e 	bgeu	r2,r3,803728 <_free_r+0x304>
  80371c:	00801f84 	movi	r2,126
  803720:	00c0fc04 	movi	r3,1008
  803724:	003f8c06 	br	803558 <_free_r+0x134>
  803728:	3804d4ba 	srli	r2,r7,18
  80372c:	10801f04 	addi	r2,r2,124
  803730:	100690fa 	slli	r3,r2,3
  803734:	003f8806 	br	803558 <_free_r+0x134>

00803738 <_fscanf_r>:
  803738:	defffd04 	addi	sp,sp,-12
  80373c:	dfc00115 	stw	ra,4(sp)
  803740:	d9c00215 	stw	r7,8(sp)
  803744:	d8800204 	addi	r2,sp,8
  803748:	100f883a 	mov	r7,r2
  80374c:	d8800015 	stw	r2,0(sp)
  803750:	08073f00 	call	8073f0 <__svfscanf_r>
  803754:	dfc00117 	ldw	ra,4(sp)
  803758:	dec00304 	addi	sp,sp,12
  80375c:	f800283a 	ret

00803760 <fscanf>:
  803760:	defffc04 	addi	sp,sp,-16
  803764:	2007883a 	mov	r3,r4
  803768:	dfc00115 	stw	ra,4(sp)
  80376c:	d9800215 	stw	r6,8(sp)
  803770:	d9c00315 	stw	r7,12(sp)
  803774:	01802074 	movhi	r6,129
  803778:	319b3004 	addi	r6,r6,27840
  80377c:	31000017 	ldw	r4,0(r6)
  803780:	d8800204 	addi	r2,sp,8
  803784:	280d883a 	mov	r6,r5
  803788:	100f883a 	mov	r7,r2
  80378c:	180b883a 	mov	r5,r3
  803790:	d8800015 	stw	r2,0(sp)
  803794:	08073f00 	call	8073f0 <__svfscanf_r>
  803798:	dfc00117 	ldw	ra,4(sp)
  80379c:	dec00404 	addi	sp,sp,16
  8037a0:	f800283a 	ret

008037a4 <_fseek_r>:
  8037a4:	deffe804 	addi	sp,sp,-96
  8037a8:	dd801515 	stw	r22,84(sp)
  8037ac:	dcc01215 	stw	r19,72(sp)
  8037b0:	dc801115 	stw	r18,68(sp)
  8037b4:	dc000f15 	stw	r16,60(sp)
  8037b8:	dfc01715 	stw	ra,92(sp)
  8037bc:	ddc01615 	stw	r23,88(sp)
  8037c0:	dd401415 	stw	r21,80(sp)
  8037c4:	dd001315 	stw	r20,76(sp)
  8037c8:	dc401015 	stw	r17,64(sp)
  8037cc:	2025883a 	mov	r18,r4
  8037d0:	2821883a 	mov	r16,r5
  8037d4:	302d883a 	mov	r22,r6
  8037d8:	3827883a 	mov	r19,r7
  8037dc:	20000226 	beq	r4,zero,8037e8 <_fseek_r+0x44>
  8037e0:	20800e17 	ldw	r2,56(r4)
  8037e4:	10007826 	beq	r2,zero,8039c8 <_fseek_r+0x224>
  8037e8:	8080030b 	ldhu	r2,12(r16)
  8037ec:	00c04204 	movi	r3,264
  8037f0:	1080420c 	andi	r2,r2,264
  8037f4:	10c07926 	beq	r2,r3,8039dc <_fseek_r+0x238>
  8037f8:	85400a17 	ldw	r21,40(r16)
  8037fc:	a800ea26 	beq	r21,zero,803ba8 <_fseek_r+0x404>
  803800:	00800044 	movi	r2,1
  803804:	98805f26 	beq	r19,r2,803984 <_fseek_r+0x1e0>
  803808:	00800084 	movi	r2,2
  80380c:	98801026 	beq	r19,r2,803850 <_fseek_r+0xac>
  803810:	98000f26 	beq	r19,zero,803850 <_fseek_r+0xac>
  803814:	00800584 	movi	r2,22
  803818:	013fffc4 	movi	r4,-1
  80381c:	90800015 	stw	r2,0(r18)
  803820:	2005883a 	mov	r2,r4
  803824:	dfc01717 	ldw	ra,92(sp)
  803828:	ddc01617 	ldw	r23,88(sp)
  80382c:	dd801517 	ldw	r22,84(sp)
  803830:	dd401417 	ldw	r21,80(sp)
  803834:	dd001317 	ldw	r20,76(sp)
  803838:	dcc01217 	ldw	r19,72(sp)
  80383c:	dc801117 	ldw	r18,68(sp)
  803840:	dc401017 	ldw	r17,64(sp)
  803844:	dc000f17 	ldw	r16,60(sp)
  803848:	dec01804 	addi	sp,sp,96
  80384c:	f800283a 	ret
  803850:	81800417 	ldw	r6,16(r16)
  803854:	0023883a 	mov	r17,zero
  803858:	002f883a 	mov	r23,zero
  80385c:	3000a626 	beq	r6,zero,803af8 <_fseek_r+0x354>
  803860:	8100030b 	ldhu	r4,12(r16)
  803864:	2082068c 	andi	r2,r4,2074
  803868:	1000081e 	bne	r2,zero,80388c <_fseek_r+0xe8>
  80386c:	2081000c 	andi	r2,r4,1024
  803870:	10001b1e 	bne	r2,zero,8038e0 <_fseek_r+0x13c>
  803874:	00802034 	movhi	r2,128
  803878:	1093db04 	addi	r2,r2,20332
  80387c:	a8800926 	beq	r21,r2,8038a4 <_fseek_r+0x100>
  803880:	8080030b 	ldhu	r2,12(r16)
  803884:	10820014 	ori	r2,r2,2048
  803888:	8080030d 	sth	r2,12(r16)
  80388c:	9009883a 	mov	r4,r18
  803890:	800b883a 	mov	r5,r16
  803894:	08027840 	call	802784 <_fflush_r>
  803898:	1000a326 	beq	r2,zero,803b28 <_fseek_r+0x384>
  80389c:	013fffc4 	movi	r4,-1
  8038a0:	003fdf06 	br	803820 <_fseek_r+0x7c>
  8038a4:	8140038f 	ldh	r5,14(r16)
  8038a8:	283ff516 	blt	r5,zero,803880 <_fseek_r+0xdc>
  8038ac:	9009883a 	mov	r4,r18
  8038b0:	d80d883a 	mov	r6,sp
  8038b4:	0803c040 	call	803c04 <_fstat_r>
  8038b8:	103ff11e 	bne	r2,zero,803880 <_fseek_r+0xdc>
  8038bc:	d8800117 	ldw	r2,4(sp)
  8038c0:	00e00014 	movui	r3,32768
  8038c4:	10bc000c 	andi	r2,r2,61440
  8038c8:	10ffed1e 	bne	r2,r3,803880 <_fseek_r+0xdc>
  8038cc:	80c0030b 	ldhu	r3,12(r16)
  8038d0:	00810004 	movi	r2,1024
  8038d4:	80801315 	stw	r2,76(r16)
  8038d8:	1886b03a 	or	r3,r3,r2
  8038dc:	80c0030d 	sth	r3,12(r16)
  8038e0:	9800701e 	bne	r19,zero,803aa4 <_fseek_r+0x300>
  8038e4:	b029883a 	mov	r20,r22
  8038e8:	b804c03a 	cmpne	r2,r23,zero
  8038ec:	10003f1e 	bne	r2,zero,8039ec <_fseek_r+0x248>
  8038f0:	8100030b 	ldhu	r4,12(r16)
  8038f4:	2084000c 	andi	r2,r4,4096
  8038f8:	1000a126 	beq	r2,zero,803b80 <_fseek_r+0x3dc>
  8038fc:	81801417 	ldw	r6,80(r16)
  803900:	80c00117 	ldw	r3,4(r16)
  803904:	81400c17 	ldw	r5,48(r16)
  803908:	30e3c83a 	sub	r17,r6,r3
  80390c:	28008026 	beq	r5,zero,803b10 <_fseek_r+0x36c>
  803910:	81c00f17 	ldw	r7,60(r16)
  803914:	89e3c83a 	sub	r17,r17,r7
  803918:	80800e17 	ldw	r2,56(r16)
  80391c:	81800417 	ldw	r6,16(r16)
  803920:	88c7883a 	add	r3,r17,r3
  803924:	1185c83a 	sub	r2,r2,r6
  803928:	11cf883a 	add	r7,r2,r7
  80392c:	1887c83a 	sub	r3,r3,r2
  803930:	2088000c 	andi	r2,r4,8192
  803934:	10003e1e 	bne	r2,zero,803a30 <_fseek_r+0x28c>
  803938:	a0c03d16 	blt	r20,r3,803a30 <_fseek_r+0x28c>
  80393c:	38c5883a 	add	r2,r7,r3
  803940:	a0803b2e 	bgeu	r20,r2,803a30 <_fseek_r+0x28c>
  803944:	a0c5c83a 	sub	r2,r20,r3
  803948:	3887c83a 	sub	r3,r7,r2
  80394c:	3085883a 	add	r2,r6,r2
  803950:	80800015 	stw	r2,0(r16)
  803954:	80c00115 	stw	r3,4(r16)
  803958:	28000526 	beq	r5,zero,803970 <_fseek_r+0x1cc>
  80395c:	80801004 	addi	r2,r16,64
  803960:	28800226 	beq	r5,r2,80396c <_fseek_r+0x1c8>
  803964:	9009883a 	mov	r4,r18
  803968:	08034240 	call	803424 <_free_r>
  80396c:	80000c15 	stw	zero,48(r16)
  803970:	8080030b 	ldhu	r2,12(r16)
  803974:	0009883a 	mov	r4,zero
  803978:	10bff7cc 	andi	r2,r2,65503
  80397c:	8080030d 	sth	r2,12(r16)
  803980:	003fa706 	br	803820 <_fseek_r+0x7c>
  803984:	9009883a 	mov	r4,r18
  803988:	800b883a 	mov	r5,r16
  80398c:	08027840 	call	802784 <_fflush_r>
  803990:	8100030b 	ldhu	r4,12(r16)
  803994:	2084000c 	andi	r2,r4,4096
  803998:	10008726 	beq	r2,zero,803bb8 <_fseek_r+0x414>
  80399c:	84401417 	ldw	r17,80(r16)
  8039a0:	2080010c 	andi	r2,r4,4
  8039a4:	1000171e 	bne	r2,zero,803a04 <_fseek_r+0x260>
  8039a8:	2080020c 	andi	r2,r4,8
  8039ac:	10003b26 	beq	r2,zero,803a9c <_fseek_r+0x2f8>
  8039b0:	80800017 	ldw	r2,0(r16)
  8039b4:	10003926 	beq	r2,zero,803a9c <_fseek_r+0x2f8>
  8039b8:	81800417 	ldw	r6,16(r16)
  8039bc:	1185c83a 	sub	r2,r2,r6
  8039c0:	88a3883a 	add	r17,r17,r2
  8039c4:	00001606 	br	803a20 <_fseek_r+0x27c>
  8039c8:	0802cb00 	call	802cb0 <__sinit>
  8039cc:	8080030b 	ldhu	r2,12(r16)
  8039d0:	00c04204 	movi	r3,264
  8039d4:	1080420c 	andi	r2,r2,264
  8039d8:	10ff871e 	bne	r2,r3,8037f8 <_fseek_r+0x54>
  8039dc:	9009883a 	mov	r4,r18
  8039e0:	800b883a 	mov	r5,r16
  8039e4:	08027840 	call	802784 <_fflush_r>
  8039e8:	003f8306 	br	8037f8 <_fseek_r+0x54>
  8039ec:	81400c17 	ldw	r5,48(r16)
  8039f0:	28004526 	beq	r5,zero,803b08 <_fseek_r+0x364>
  8039f4:	8100030b 	ldhu	r4,12(r16)
  8039f8:	80c00117 	ldw	r3,4(r16)
  8039fc:	81c00f17 	ldw	r7,60(r16)
  803a00:	003fc506 	br	803918 <_fseek_r+0x174>
  803a04:	80c00117 	ldw	r3,4(r16)
  803a08:	80800c17 	ldw	r2,48(r16)
  803a0c:	88e3c83a 	sub	r17,r17,r3
  803a10:	10002226 	beq	r2,zero,803a9c <_fseek_r+0x2f8>
  803a14:	81c00f17 	ldw	r7,60(r16)
  803a18:	81800417 	ldw	r6,16(r16)
  803a1c:	89e3c83a 	sub	r17,r17,r7
  803a20:	b46d883a 	add	r22,r22,r17
  803a24:	0027883a 	mov	r19,zero
  803a28:	05c00044 	movi	r23,1
  803a2c:	003f8b06 	br	80385c <_fseek_r+0xb8>
  803a30:	80801317 	ldw	r2,76(r16)
  803a34:	81400717 	ldw	r5,28(r16)
  803a38:	9009883a 	mov	r4,r18
  803a3c:	0085c83a 	sub	r2,zero,r2
  803a40:	a0a2703a 	and	r17,r20,r2
  803a44:	880d883a 	mov	r6,r17
  803a48:	000f883a 	mov	r7,zero
  803a4c:	a83ee83a 	callr	r21
  803a50:	00ffffc4 	movi	r3,-1
  803a54:	10ff8d26 	beq	r2,r3,80388c <_fseek_r+0xe8>
  803a58:	80800417 	ldw	r2,16(r16)
  803a5c:	81400c17 	ldw	r5,48(r16)
  803a60:	80000115 	stw	zero,4(r16)
  803a64:	80800015 	stw	r2,0(r16)
  803a68:	28000526 	beq	r5,zero,803a80 <_fseek_r+0x2dc>
  803a6c:	80801004 	addi	r2,r16,64
  803a70:	28800226 	beq	r5,r2,803a7c <_fseek_r+0x2d8>
  803a74:	9009883a 	mov	r4,r18
  803a78:	08034240 	call	803424 <_free_r>
  803a7c:	80000c15 	stw	zero,48(r16)
  803a80:	8080030b 	ldhu	r2,12(r16)
  803a84:	a463c83a 	sub	r17,r20,r17
  803a88:	10bff7cc 	andi	r2,r2,65503
  803a8c:	8080030d 	sth	r2,12(r16)
  803a90:	88000c1e 	bne	r17,zero,803ac4 <_fseek_r+0x320>
  803a94:	0009883a 	mov	r4,zero
  803a98:	003f6106 	br	803820 <_fseek_r+0x7c>
  803a9c:	81800417 	ldw	r6,16(r16)
  803aa0:	003fdf06 	br	803a20 <_fseek_r+0x27c>
  803aa4:	8140038f 	ldh	r5,14(r16)
  803aa8:	9009883a 	mov	r4,r18
  803aac:	d80d883a 	mov	r6,sp
  803ab0:	0803c040 	call	803c04 <_fstat_r>
  803ab4:	103f751e 	bne	r2,zero,80388c <_fseek_r+0xe8>
  803ab8:	d8800417 	ldw	r2,16(sp)
  803abc:	b0a9883a 	add	r20,r22,r2
  803ac0:	003f8906 	br	8038e8 <_fseek_r+0x144>
  803ac4:	9009883a 	mov	r4,r18
  803ac8:	800b883a 	mov	r5,r16
  803acc:	0804ba00 	call	804ba0 <__srefill_r>
  803ad0:	103f6e1e 	bne	r2,zero,80388c <_fseek_r+0xe8>
  803ad4:	80c00117 	ldw	r3,4(r16)
  803ad8:	1c7f6c36 	bltu	r3,r17,80388c <_fseek_r+0xe8>
  803adc:	80800017 	ldw	r2,0(r16)
  803ae0:	1c47c83a 	sub	r3,r3,r17
  803ae4:	0009883a 	mov	r4,zero
  803ae8:	1445883a 	add	r2,r2,r17
  803aec:	80c00115 	stw	r3,4(r16)
  803af0:	80800015 	stw	r2,0(r16)
  803af4:	003f4a06 	br	803820 <_fseek_r+0x7c>
  803af8:	9009883a 	mov	r4,r18
  803afc:	800b883a 	mov	r5,r16
  803b00:	0803ee40 	call	803ee4 <__smakebuf_r>
  803b04:	003f5606 	br	803860 <_fseek_r+0xbc>
  803b08:	8100030b 	ldhu	r4,12(r16)
  803b0c:	80c00117 	ldw	r3,4(r16)
  803b10:	80800017 	ldw	r2,0(r16)
  803b14:	81800417 	ldw	r6,16(r16)
  803b18:	1185c83a 	sub	r2,r2,r6
  803b1c:	10cf883a 	add	r7,r2,r3
  803b20:	8887c83a 	sub	r3,r17,r2
  803b24:	003f8206 	br	803930 <_fseek_r+0x18c>
  803b28:	81400717 	ldw	r5,28(r16)
  803b2c:	b00d883a 	mov	r6,r22
  803b30:	980f883a 	mov	r7,r19
  803b34:	9009883a 	mov	r4,r18
  803b38:	a83ee83a 	callr	r21
  803b3c:	00ffffc4 	movi	r3,-1
  803b40:	10ff5626 	beq	r2,r3,80389c <_fseek_r+0xf8>
  803b44:	81400c17 	ldw	r5,48(r16)
  803b48:	28000526 	beq	r5,zero,803b60 <_fseek_r+0x3bc>
  803b4c:	80801004 	addi	r2,r16,64
  803b50:	28800226 	beq	r5,r2,803b5c <_fseek_r+0x3b8>
  803b54:	9009883a 	mov	r4,r18
  803b58:	08034240 	call	803424 <_free_r>
  803b5c:	80000c15 	stw	zero,48(r16)
  803b60:	8080030b 	ldhu	r2,12(r16)
  803b64:	80c00417 	ldw	r3,16(r16)
  803b68:	0009883a 	mov	r4,zero
  803b6c:	10bdf7cc 	andi	r2,r2,63455
  803b70:	8080030d 	sth	r2,12(r16)
  803b74:	80c00015 	stw	r3,0(r16)
  803b78:	80000115 	stw	zero,4(r16)
  803b7c:	003f2806 	br	803820 <_fseek_r+0x7c>
  803b80:	81400717 	ldw	r5,28(r16)
  803b84:	000d883a 	mov	r6,zero
  803b88:	9009883a 	mov	r4,r18
  803b8c:	01c00044 	movi	r7,1
  803b90:	a83ee83a 	callr	r21
  803b94:	100d883a 	mov	r6,r2
  803b98:	00bfffc4 	movi	r2,-1
  803b9c:	30bf3b26 	beq	r6,r2,80388c <_fseek_r+0xe8>
  803ba0:	8100030b 	ldhu	r4,12(r16)
  803ba4:	003f5606 	br	803900 <_fseek_r+0x15c>
  803ba8:	00800744 	movi	r2,29
  803bac:	013fffc4 	movi	r4,-1
  803bb0:	90800015 	stw	r2,0(r18)
  803bb4:	003f1a06 	br	803820 <_fseek_r+0x7c>
  803bb8:	81400717 	ldw	r5,28(r16)
  803bbc:	980f883a 	mov	r7,r19
  803bc0:	9009883a 	mov	r4,r18
  803bc4:	000d883a 	mov	r6,zero
  803bc8:	a83ee83a 	callr	r21
  803bcc:	1023883a 	mov	r17,r2
  803bd0:	00bfffc4 	movi	r2,-1
  803bd4:	88bf3126 	beq	r17,r2,80389c <_fseek_r+0xf8>
  803bd8:	8100030b 	ldhu	r4,12(r16)
  803bdc:	003f7006 	br	8039a0 <_fseek_r+0x1fc>

00803be0 <fseek>:
  803be0:	00802074 	movhi	r2,129
  803be4:	109b3004 	addi	r2,r2,27840
  803be8:	2013883a 	mov	r9,r4
  803bec:	11000017 	ldw	r4,0(r2)
  803bf0:	2805883a 	mov	r2,r5
  803bf4:	300f883a 	mov	r7,r6
  803bf8:	480b883a 	mov	r5,r9
  803bfc:	100d883a 	mov	r6,r2
  803c00:	08037a41 	jmpi	8037a4 <_fseek_r>

00803c04 <_fstat_r>:
  803c04:	defffd04 	addi	sp,sp,-12
  803c08:	dc000015 	stw	r16,0(sp)
  803c0c:	040020b4 	movhi	r16,130
  803c10:	84221904 	addi	r16,r16,-30620
  803c14:	dc400115 	stw	r17,4(sp)
  803c18:	80000015 	stw	zero,0(r16)
  803c1c:	2023883a 	mov	r17,r4
  803c20:	2809883a 	mov	r4,r5
  803c24:	300b883a 	mov	r5,r6
  803c28:	dfc00215 	stw	ra,8(sp)
  803c2c:	0811d300 	call	811d30 <fstat>
  803c30:	1007883a 	mov	r3,r2
  803c34:	00bfffc4 	movi	r2,-1
  803c38:	18800626 	beq	r3,r2,803c54 <_fstat_r+0x50>
  803c3c:	1805883a 	mov	r2,r3
  803c40:	dfc00217 	ldw	ra,8(sp)
  803c44:	dc400117 	ldw	r17,4(sp)
  803c48:	dc000017 	ldw	r16,0(sp)
  803c4c:	dec00304 	addi	sp,sp,12
  803c50:	f800283a 	ret
  803c54:	80800017 	ldw	r2,0(r16)
  803c58:	103ff826 	beq	r2,zero,803c3c <_fstat_r+0x38>
  803c5c:	88800015 	stw	r2,0(r17)
  803c60:	1805883a 	mov	r2,r3
  803c64:	dfc00217 	ldw	ra,8(sp)
  803c68:	dc400117 	ldw	r17,4(sp)
  803c6c:	dc000017 	ldw	r16,0(sp)
  803c70:	dec00304 	addi	sp,sp,12
  803c74:	f800283a 	ret

00803c78 <_fwalk_reent>:
  803c78:	defff704 	addi	sp,sp,-36
  803c7c:	dcc00315 	stw	r19,12(sp)
  803c80:	24c0b804 	addi	r19,r4,736
  803c84:	dd800615 	stw	r22,24(sp)
  803c88:	dd400515 	stw	r21,20(sp)
  803c8c:	dfc00815 	stw	ra,32(sp)
  803c90:	ddc00715 	stw	r23,28(sp)
  803c94:	dd000415 	stw	r20,16(sp)
  803c98:	dc800215 	stw	r18,8(sp)
  803c9c:	dc400115 	stw	r17,4(sp)
  803ca0:	dc000015 	stw	r16,0(sp)
  803ca4:	202b883a 	mov	r21,r4
  803ca8:	282d883a 	mov	r22,r5
  803cac:	0802ca00 	call	802ca0 <__sfp_lock_acquire>
  803cb0:	98002126 	beq	r19,zero,803d38 <_fwalk_reent+0xc0>
  803cb4:	002f883a 	mov	r23,zero
  803cb8:	9c800117 	ldw	r18,4(r19)
  803cbc:	9c000217 	ldw	r16,8(r19)
  803cc0:	90bfffc4 	addi	r2,r18,-1
  803cc4:	10000d16 	blt	r2,zero,803cfc <_fwalk_reent+0x84>
  803cc8:	0023883a 	mov	r17,zero
  803ccc:	053fffc4 	movi	r20,-1
  803cd0:	8080030f 	ldh	r2,12(r16)
  803cd4:	8c400044 	addi	r17,r17,1
  803cd8:	10000626 	beq	r2,zero,803cf4 <_fwalk_reent+0x7c>
  803cdc:	8080038f 	ldh	r2,14(r16)
  803ce0:	800b883a 	mov	r5,r16
  803ce4:	a809883a 	mov	r4,r21
  803ce8:	15000226 	beq	r2,r20,803cf4 <_fwalk_reent+0x7c>
  803cec:	b03ee83a 	callr	r22
  803cf0:	b8aeb03a 	or	r23,r23,r2
  803cf4:	84001704 	addi	r16,r16,92
  803cf8:	947ff51e 	bne	r18,r17,803cd0 <_fwalk_reent+0x58>
  803cfc:	9cc00017 	ldw	r19,0(r19)
  803d00:	983fed1e 	bne	r19,zero,803cb8 <_fwalk_reent+0x40>
  803d04:	0802ca40 	call	802ca4 <__sfp_lock_release>
  803d08:	b805883a 	mov	r2,r23
  803d0c:	dfc00817 	ldw	ra,32(sp)
  803d10:	ddc00717 	ldw	r23,28(sp)
  803d14:	dd800617 	ldw	r22,24(sp)
  803d18:	dd400517 	ldw	r21,20(sp)
  803d1c:	dd000417 	ldw	r20,16(sp)
  803d20:	dcc00317 	ldw	r19,12(sp)
  803d24:	dc800217 	ldw	r18,8(sp)
  803d28:	dc400117 	ldw	r17,4(sp)
  803d2c:	dc000017 	ldw	r16,0(sp)
  803d30:	dec00904 	addi	sp,sp,36
  803d34:	f800283a 	ret
  803d38:	002f883a 	mov	r23,zero
  803d3c:	003ff106 	br	803d04 <_fwalk_reent+0x8c>

00803d40 <_fwalk>:
  803d40:	defff804 	addi	sp,sp,-32
  803d44:	dcc00315 	stw	r19,12(sp)
  803d48:	24c0b804 	addi	r19,r4,736
  803d4c:	dd400515 	stw	r21,20(sp)
  803d50:	dfc00715 	stw	ra,28(sp)
  803d54:	dd800615 	stw	r22,24(sp)
  803d58:	dd000415 	stw	r20,16(sp)
  803d5c:	dc800215 	stw	r18,8(sp)
  803d60:	dc400115 	stw	r17,4(sp)
  803d64:	dc000015 	stw	r16,0(sp)
  803d68:	282b883a 	mov	r21,r5
  803d6c:	0802ca00 	call	802ca0 <__sfp_lock_acquire>
  803d70:	98001f26 	beq	r19,zero,803df0 <_fwalk+0xb0>
  803d74:	002d883a 	mov	r22,zero
  803d78:	9c800117 	ldw	r18,4(r19)
  803d7c:	9c000217 	ldw	r16,8(r19)
  803d80:	90bfffc4 	addi	r2,r18,-1
  803d84:	10000c16 	blt	r2,zero,803db8 <_fwalk+0x78>
  803d88:	0023883a 	mov	r17,zero
  803d8c:	053fffc4 	movi	r20,-1
  803d90:	8080030f 	ldh	r2,12(r16)
  803d94:	8c400044 	addi	r17,r17,1
  803d98:	10000526 	beq	r2,zero,803db0 <_fwalk+0x70>
  803d9c:	8080038f 	ldh	r2,14(r16)
  803da0:	8009883a 	mov	r4,r16
  803da4:	15000226 	beq	r2,r20,803db0 <_fwalk+0x70>
  803da8:	a83ee83a 	callr	r21
  803dac:	b0acb03a 	or	r22,r22,r2
  803db0:	84001704 	addi	r16,r16,92
  803db4:	947ff61e 	bne	r18,r17,803d90 <_fwalk+0x50>
  803db8:	9cc00017 	ldw	r19,0(r19)
  803dbc:	983fee1e 	bne	r19,zero,803d78 <_fwalk+0x38>
  803dc0:	0802ca40 	call	802ca4 <__sfp_lock_release>
  803dc4:	b005883a 	mov	r2,r22
  803dc8:	dfc00717 	ldw	ra,28(sp)
  803dcc:	dd800617 	ldw	r22,24(sp)
  803dd0:	dd400517 	ldw	r21,20(sp)
  803dd4:	dd000417 	ldw	r20,16(sp)
  803dd8:	dcc00317 	ldw	r19,12(sp)
  803ddc:	dc800217 	ldw	r18,8(sp)
  803de0:	dc400117 	ldw	r17,4(sp)
  803de4:	dc000017 	ldw	r16,0(sp)
  803de8:	dec00804 	addi	sp,sp,32
  803dec:	f800283a 	ret
  803df0:	002d883a 	mov	r22,zero
  803df4:	003ff206 	br	803dc0 <_fwalk+0x80>

00803df8 <_fwrite_r>:
  803df8:	defff604 	addi	sp,sp,-40
  803dfc:	dc000515 	stw	r16,20(sp)
  803e00:	d9400015 	stw	r5,0(sp)
  803e04:	2021883a 	mov	r16,r4
  803e08:	300b883a 	mov	r5,r6
  803e0c:	3809883a 	mov	r4,r7
  803e10:	dcc00815 	stw	r19,32(sp)
  803e14:	dc800715 	stw	r18,28(sp)
  803e18:	dc400615 	stw	r17,24(sp)
  803e1c:	dfc00915 	stw	ra,36(sp)
  803e20:	3825883a 	mov	r18,r7
  803e24:	3027883a 	mov	r19,r6
  803e28:	0801fec0 	call	801fec <__mulsi3>
  803e2c:	1023883a 	mov	r17,r2
  803e30:	00800044 	movi	r2,1
  803e34:	d8800315 	stw	r2,12(sp)
  803e38:	dc400115 	stw	r17,4(sp)
  803e3c:	dc400415 	stw	r17,16(sp)
  803e40:	dec00215 	stw	sp,8(sp)
  803e44:	80000326 	beq	r16,zero,803e54 <_fwrite_r+0x5c>
  803e48:	80800e17 	ldw	r2,56(r16)
  803e4c:	8009883a 	mov	r4,r16
  803e50:	10001226 	beq	r2,zero,803e9c <_fwrite_r+0xa4>
  803e54:	d9400a17 	ldw	r5,40(sp)
  803e58:	8009883a 	mov	r4,r16
  803e5c:	d9800204 	addi	r6,sp,8
  803e60:	080a7e80 	call	80a7e8 <__sfvwrite_r>
  803e64:	980b883a 	mov	r5,r19
  803e68:	10000426 	beq	r2,zero,803e7c <_fwrite_r+0x84>
  803e6c:	d9000417 	ldw	r4,16(sp)
  803e70:	8909c83a 	sub	r4,r17,r4
  803e74:	08117700 	call	811770 <__udivsi3>
  803e78:	1025883a 	mov	r18,r2
  803e7c:	9005883a 	mov	r2,r18
  803e80:	dfc00917 	ldw	ra,36(sp)
  803e84:	dcc00817 	ldw	r19,32(sp)
  803e88:	dc800717 	ldw	r18,28(sp)
  803e8c:	dc400617 	ldw	r17,24(sp)
  803e90:	dc000517 	ldw	r16,20(sp)
  803e94:	dec00a04 	addi	sp,sp,40
  803e98:	f800283a 	ret
  803e9c:	0802cb00 	call	802cb0 <__sinit>
  803ea0:	003fec06 	br	803e54 <_fwrite_r+0x5c>

00803ea4 <fwrite>:
  803ea4:	00802074 	movhi	r2,129
  803ea8:	109b3004 	addi	r2,r2,27840
  803eac:	2017883a 	mov	r11,r4
  803eb0:	11000017 	ldw	r4,0(r2)
  803eb4:	defffe04 	addi	sp,sp,-8
  803eb8:	3013883a 	mov	r9,r6
  803ebc:	2805883a 	mov	r2,r5
  803ec0:	d9c00015 	stw	r7,0(sp)
  803ec4:	580b883a 	mov	r5,r11
  803ec8:	100d883a 	mov	r6,r2
  803ecc:	480f883a 	mov	r7,r9
  803ed0:	dfc00115 	stw	ra,4(sp)
  803ed4:	0803df80 	call	803df8 <_fwrite_r>
  803ed8:	dfc00117 	ldw	ra,4(sp)
  803edc:	dec00204 	addi	sp,sp,8
  803ee0:	f800283a 	ret

00803ee4 <__smakebuf_r>:
  803ee4:	2880030b 	ldhu	r2,12(r5)
  803ee8:	deffed04 	addi	sp,sp,-76
  803eec:	dc401015 	stw	r17,64(sp)
  803ef0:	1080008c 	andi	r2,r2,2
  803ef4:	dc000f15 	stw	r16,60(sp)
  803ef8:	dfc01215 	stw	ra,72(sp)
  803efc:	dc801115 	stw	r18,68(sp)
  803f00:	2821883a 	mov	r16,r5
  803f04:	2023883a 	mov	r17,r4
  803f08:	10000b26 	beq	r2,zero,803f38 <__smakebuf_r+0x54>
  803f0c:	28c010c4 	addi	r3,r5,67
  803f10:	00800044 	movi	r2,1
  803f14:	28800515 	stw	r2,20(r5)
  803f18:	28c00415 	stw	r3,16(r5)
  803f1c:	28c00015 	stw	r3,0(r5)
  803f20:	dfc01217 	ldw	ra,72(sp)
  803f24:	dc801117 	ldw	r18,68(sp)
  803f28:	dc401017 	ldw	r17,64(sp)
  803f2c:	dc000f17 	ldw	r16,60(sp)
  803f30:	dec01304 	addi	sp,sp,76
  803f34:	f800283a 	ret
  803f38:	2940038f 	ldh	r5,14(r5)
  803f3c:	28002116 	blt	r5,zero,803fc4 <__smakebuf_r+0xe0>
  803f40:	d80d883a 	mov	r6,sp
  803f44:	0803c040 	call	803c04 <_fstat_r>
  803f48:	10001e16 	blt	r2,zero,803fc4 <__smakebuf_r+0xe0>
  803f4c:	d8800117 	ldw	r2,4(sp)
  803f50:	00e00014 	movui	r3,32768
  803f54:	113c000c 	andi	r4,r2,61440
  803f58:	20c03126 	beq	r4,r3,804020 <__smakebuf_r+0x13c>
  803f5c:	8080030b 	ldhu	r2,12(r16)
  803f60:	00c80004 	movi	r3,8192
  803f64:	10820014 	ori	r2,r2,2048
  803f68:	8080030d 	sth	r2,12(r16)
  803f6c:	20c01e26 	beq	r4,r3,803fe8 <__smakebuf_r+0x104>
  803f70:	04810004 	movi	r18,1024
  803f74:	8809883a 	mov	r4,r17
  803f78:	900b883a 	mov	r5,r18
  803f7c:	08040a00 	call	8040a0 <_malloc_r>
  803f80:	1009883a 	mov	r4,r2
  803f84:	10003126 	beq	r2,zero,80404c <__smakebuf_r+0x168>
  803f88:	80c0030b 	ldhu	r3,12(r16)
  803f8c:	00802034 	movhi	r2,128
  803f90:	108b6504 	addi	r2,r2,11668
  803f94:	88800f15 	stw	r2,60(r17)
  803f98:	18c02014 	ori	r3,r3,128
  803f9c:	84800515 	stw	r18,20(r16)
  803fa0:	80c0030d 	sth	r3,12(r16)
  803fa4:	81000415 	stw	r4,16(r16)
  803fa8:	81000015 	stw	r4,0(r16)
  803fac:	dfc01217 	ldw	ra,72(sp)
  803fb0:	dc801117 	ldw	r18,68(sp)
  803fb4:	dc401017 	ldw	r17,64(sp)
  803fb8:	dc000f17 	ldw	r16,60(sp)
  803fbc:	dec01304 	addi	sp,sp,76
  803fc0:	f800283a 	ret
  803fc4:	80c0030b 	ldhu	r3,12(r16)
  803fc8:	1880200c 	andi	r2,r3,128
  803fcc:	10000426 	beq	r2,zero,803fe0 <__smakebuf_r+0xfc>
  803fd0:	04801004 	movi	r18,64
  803fd4:	18820014 	ori	r2,r3,2048
  803fd8:	8080030d 	sth	r2,12(r16)
  803fdc:	003fe506 	br	803f74 <__smakebuf_r+0x90>
  803fe0:	04810004 	movi	r18,1024
  803fe4:	003ffb06 	br	803fd4 <__smakebuf_r+0xf0>
  803fe8:	8140038f 	ldh	r5,14(r16)
  803fec:	8809883a 	mov	r4,r17
  803ff0:	080ac840 	call	80ac84 <_isatty_r>
  803ff4:	103fde26 	beq	r2,zero,803f70 <__smakebuf_r+0x8c>
  803ff8:	8080030b 	ldhu	r2,12(r16)
  803ffc:	80c010c4 	addi	r3,r16,67
  804000:	04810004 	movi	r18,1024
  804004:	10800054 	ori	r2,r2,1
  804008:	8080030d 	sth	r2,12(r16)
  80400c:	00800044 	movi	r2,1
  804010:	80c00415 	stw	r3,16(r16)
  804014:	80800515 	stw	r2,20(r16)
  804018:	80c00015 	stw	r3,0(r16)
  80401c:	003fd506 	br	803f74 <__smakebuf_r+0x90>
  804020:	80c00a17 	ldw	r3,40(r16)
  804024:	00802034 	movhi	r2,128
  804028:	1093db04 	addi	r2,r2,20332
  80402c:	18bfcb1e 	bne	r3,r2,803f5c <__smakebuf_r+0x78>
  804030:	8080030b 	ldhu	r2,12(r16)
  804034:	00c10004 	movi	r3,1024
  804038:	1825883a 	mov	r18,r3
  80403c:	10c4b03a 	or	r2,r2,r3
  804040:	8080030d 	sth	r2,12(r16)
  804044:	80c01315 	stw	r3,76(r16)
  804048:	003fca06 	br	803f74 <__smakebuf_r+0x90>
  80404c:	8100030b 	ldhu	r4,12(r16)
  804050:	2080800c 	andi	r2,r4,512
  804054:	103fb21e 	bne	r2,zero,803f20 <__smakebuf_r+0x3c>
  804058:	80c010c4 	addi	r3,r16,67
  80405c:	21000094 	ori	r4,r4,2
  804060:	00800044 	movi	r2,1
  804064:	80800515 	stw	r2,20(r16)
  804068:	8100030d 	sth	r4,12(r16)
  80406c:	80c00415 	stw	r3,16(r16)
  804070:	80c00015 	stw	r3,0(r16)
  804074:	003faa06 	br	803f20 <__smakebuf_r+0x3c>

00804078 <free>:
  804078:	00802074 	movhi	r2,129
  80407c:	109b3004 	addi	r2,r2,27840
  804080:	200b883a 	mov	r5,r4
  804084:	11000017 	ldw	r4,0(r2)
  804088:	08034241 	jmpi	803424 <_free_r>

0080408c <malloc>:
  80408c:	00802074 	movhi	r2,129
  804090:	109b3004 	addi	r2,r2,27840
  804094:	200b883a 	mov	r5,r4
  804098:	11000017 	ldw	r4,0(r2)
  80409c:	08040a01 	jmpi	8040a0 <_malloc_r>

008040a0 <_malloc_r>:
  8040a0:	defff604 	addi	sp,sp,-40
  8040a4:	28c002c4 	addi	r3,r5,11
  8040a8:	00800584 	movi	r2,22
  8040ac:	dc800215 	stw	r18,8(sp)
  8040b0:	dfc00915 	stw	ra,36(sp)
  8040b4:	df000815 	stw	fp,32(sp)
  8040b8:	ddc00715 	stw	r23,28(sp)
  8040bc:	dd800615 	stw	r22,24(sp)
  8040c0:	dd400515 	stw	r21,20(sp)
  8040c4:	dd000415 	stw	r20,16(sp)
  8040c8:	dcc00315 	stw	r19,12(sp)
  8040cc:	dc400115 	stw	r17,4(sp)
  8040d0:	dc000015 	stw	r16,0(sp)
  8040d4:	2025883a 	mov	r18,r4
  8040d8:	10c01236 	bltu	r2,r3,804124 <_malloc_r+0x84>
  8040dc:	04400404 	movi	r17,16
  8040e0:	8940142e 	bgeu	r17,r5,804134 <_malloc_r+0x94>
  8040e4:	00800304 	movi	r2,12
  8040e8:	0007883a 	mov	r3,zero
  8040ec:	90800015 	stw	r2,0(r18)
  8040f0:	1805883a 	mov	r2,r3
  8040f4:	dfc00917 	ldw	ra,36(sp)
  8040f8:	df000817 	ldw	fp,32(sp)
  8040fc:	ddc00717 	ldw	r23,28(sp)
  804100:	dd800617 	ldw	r22,24(sp)
  804104:	dd400517 	ldw	r21,20(sp)
  804108:	dd000417 	ldw	r20,16(sp)
  80410c:	dcc00317 	ldw	r19,12(sp)
  804110:	dc800217 	ldw	r18,8(sp)
  804114:	dc400117 	ldw	r17,4(sp)
  804118:	dc000017 	ldw	r16,0(sp)
  80411c:	dec00a04 	addi	sp,sp,40
  804120:	f800283a 	ret
  804124:	00bffe04 	movi	r2,-8
  804128:	18a2703a 	and	r17,r3,r2
  80412c:	883fed16 	blt	r17,zero,8040e4 <_malloc_r+0x44>
  804130:	897fec36 	bltu	r17,r5,8040e4 <_malloc_r+0x44>
  804134:	9009883a 	mov	r4,r18
  804138:	08122280 	call	812228 <__malloc_lock>
  80413c:	00807dc4 	movi	r2,503
  804140:	14402b2e 	bgeu	r2,r17,8041f0 <_malloc_r+0x150>
  804144:	8806d27a 	srli	r3,r17,9
  804148:	18003f1e 	bne	r3,zero,804248 <_malloc_r+0x1a8>
  80414c:	880cd0fa 	srli	r6,r17,3
  804150:	300490fa 	slli	r2,r6,3
  804154:	02c02074 	movhi	r11,129
  804158:	5ad59404 	addi	r11,r11,22096
  80415c:	12cb883a 	add	r5,r2,r11
  804160:	2c000317 	ldw	r16,12(r5)
  804164:	580f883a 	mov	r7,r11
  804168:	2c00041e 	bne	r5,r16,80417c <_malloc_r+0xdc>
  80416c:	00000a06 	br	804198 <_malloc_r+0xf8>
  804170:	1800860e 	bge	r3,zero,80438c <_malloc_r+0x2ec>
  804174:	84000317 	ldw	r16,12(r16)
  804178:	2c000726 	beq	r5,r16,804198 <_malloc_r+0xf8>
  80417c:	80800117 	ldw	r2,4(r16)
  804180:	00ffff04 	movi	r3,-4
  804184:	10c8703a 	and	r4,r2,r3
  804188:	2447c83a 	sub	r3,r4,r17
  80418c:	008003c4 	movi	r2,15
  804190:	10fff70e 	bge	r2,r3,804170 <_malloc_r+0xd0>
  804194:	31bfffc4 	addi	r6,r6,-1
  804198:	32400044 	addi	r9,r6,1
  80419c:	02802074 	movhi	r10,129
  8041a0:	52959604 	addi	r10,r10,22104
  8041a4:	54000217 	ldw	r16,8(r10)
  8041a8:	8280a026 	beq	r16,r10,80442c <_malloc_r+0x38c>
  8041ac:	80800117 	ldw	r2,4(r16)
  8041b0:	00ffff04 	movi	r3,-4
  8041b4:	10ca703a 	and	r5,r2,r3
  8041b8:	2c4dc83a 	sub	r6,r5,r17
  8041bc:	008003c4 	movi	r2,15
  8041c0:	11808316 	blt	r2,r6,8043d0 <_malloc_r+0x330>
  8041c4:	52800315 	stw	r10,12(r10)
  8041c8:	52800215 	stw	r10,8(r10)
  8041cc:	30002916 	blt	r6,zero,804274 <_malloc_r+0x1d4>
  8041d0:	8147883a 	add	r3,r16,r5
  8041d4:	18800117 	ldw	r2,4(r3)
  8041d8:	9009883a 	mov	r4,r18
  8041dc:	10800054 	ori	r2,r2,1
  8041e0:	18800115 	stw	r2,4(r3)
  8041e4:	08122480 	call	812248 <__malloc_unlock>
  8041e8:	80c00204 	addi	r3,r16,8
  8041ec:	003fc006 	br	8040f0 <_malloc_r+0x50>
  8041f0:	02c02074 	movhi	r11,129
  8041f4:	5ad59404 	addi	r11,r11,22096
  8041f8:	8ac5883a 	add	r2,r17,r11
  8041fc:	14000317 	ldw	r16,12(r2)
  804200:	580f883a 	mov	r7,r11
  804204:	8806d0fa 	srli	r3,r17,3
  804208:	14006c26 	beq	r2,r16,8043bc <_malloc_r+0x31c>
  80420c:	80c00117 	ldw	r3,4(r16)
  804210:	00bfff04 	movi	r2,-4
  804214:	81800317 	ldw	r6,12(r16)
  804218:	1886703a 	and	r3,r3,r2
  80421c:	80c7883a 	add	r3,r16,r3
  804220:	18800117 	ldw	r2,4(r3)
  804224:	81400217 	ldw	r5,8(r16)
  804228:	9009883a 	mov	r4,r18
  80422c:	10800054 	ori	r2,r2,1
  804230:	18800115 	stw	r2,4(r3)
  804234:	31400215 	stw	r5,8(r6)
  804238:	29800315 	stw	r6,12(r5)
  80423c:	08122480 	call	812248 <__malloc_unlock>
  804240:	80c00204 	addi	r3,r16,8
  804244:	003faa06 	br	8040f0 <_malloc_r+0x50>
  804248:	00800104 	movi	r2,4
  80424c:	10c0052e 	bgeu	r2,r3,804264 <_malloc_r+0x1c4>
  804250:	00800504 	movi	r2,20
  804254:	10c07836 	bltu	r2,r3,804438 <_malloc_r+0x398>
  804258:	198016c4 	addi	r6,r3,91
  80425c:	300490fa 	slli	r2,r6,3
  804260:	003fbc06 	br	804154 <_malloc_r+0xb4>
  804264:	8804d1ba 	srli	r2,r17,6
  804268:	11800e04 	addi	r6,r2,56
  80426c:	300490fa 	slli	r2,r6,3
  804270:	003fb806 	br	804154 <_malloc_r+0xb4>
  804274:	00807fc4 	movi	r2,511
  804278:	1140bb36 	bltu	r2,r5,804568 <_malloc_r+0x4c8>
  80427c:	2806d0fa 	srli	r3,r5,3
  804280:	573ffe04 	addi	fp,r10,-8
  804284:	00800044 	movi	r2,1
  804288:	180890fa 	slli	r4,r3,3
  80428c:	1807d0ba 	srai	r3,r3,2
  804290:	e1c00117 	ldw	r7,4(fp)
  804294:	5909883a 	add	r4,r11,r4
  804298:	21400217 	ldw	r5,8(r4)
  80429c:	10c4983a 	sll	r2,r2,r3
  8042a0:	81000315 	stw	r4,12(r16)
  8042a4:	81400215 	stw	r5,8(r16)
  8042a8:	388eb03a 	or	r7,r7,r2
  8042ac:	2c000315 	stw	r16,12(r5)
  8042b0:	24000215 	stw	r16,8(r4)
  8042b4:	e1c00115 	stw	r7,4(fp)
  8042b8:	4807883a 	mov	r3,r9
  8042bc:	4800cd16 	blt	r9,zero,8045f4 <_malloc_r+0x554>
  8042c0:	1807d0ba 	srai	r3,r3,2
  8042c4:	00800044 	movi	r2,1
  8042c8:	10c8983a 	sll	r4,r2,r3
  8042cc:	39004436 	bltu	r7,r4,8043e0 <_malloc_r+0x340>
  8042d0:	21c4703a 	and	r2,r4,r7
  8042d4:	10000a1e 	bne	r2,zero,804300 <_malloc_r+0x260>
  8042d8:	2109883a 	add	r4,r4,r4
  8042dc:	00bfff04 	movi	r2,-4
  8042e0:	4884703a 	and	r2,r9,r2
  8042e4:	3906703a 	and	r3,r7,r4
  8042e8:	12400104 	addi	r9,r2,4
  8042ec:	1800041e 	bne	r3,zero,804300 <_malloc_r+0x260>
  8042f0:	2109883a 	add	r4,r4,r4
  8042f4:	3904703a 	and	r2,r7,r4
  8042f8:	4a400104 	addi	r9,r9,4
  8042fc:	103ffc26 	beq	r2,zero,8042f0 <_malloc_r+0x250>
  804300:	480490fa 	slli	r2,r9,3
  804304:	4819883a 	mov	r12,r9
  804308:	023fff04 	movi	r8,-4
  80430c:	589b883a 	add	r13,r11,r2
  804310:	6807883a 	mov	r3,r13
  804314:	014003c4 	movi	r5,15
  804318:	1c000317 	ldw	r16,12(r3)
  80431c:	1c00041e 	bne	r3,r16,804330 <_malloc_r+0x290>
  804320:	0000a706 	br	8045c0 <_malloc_r+0x520>
  804324:	3000ab0e 	bge	r6,zero,8045d4 <_malloc_r+0x534>
  804328:	84000317 	ldw	r16,12(r16)
  80432c:	1c00a426 	beq	r3,r16,8045c0 <_malloc_r+0x520>
  804330:	80800117 	ldw	r2,4(r16)
  804334:	1204703a 	and	r2,r2,r8
  804338:	144dc83a 	sub	r6,r2,r17
  80433c:	29bff90e 	bge	r5,r6,804324 <_malloc_r+0x284>
  804340:	81000317 	ldw	r4,12(r16)
  804344:	80c00217 	ldw	r3,8(r16)
  804348:	89400054 	ori	r5,r17,1
  80434c:	8445883a 	add	r2,r16,r17
  804350:	20c00215 	stw	r3,8(r4)
  804354:	19000315 	stw	r4,12(r3)
  804358:	81400115 	stw	r5,4(r16)
  80435c:	1187883a 	add	r3,r2,r6
  804360:	31000054 	ori	r4,r6,1
  804364:	50800315 	stw	r2,12(r10)
  804368:	50800215 	stw	r2,8(r10)
  80436c:	19800015 	stw	r6,0(r3)
  804370:	11000115 	stw	r4,4(r2)
  804374:	12800215 	stw	r10,8(r2)
  804378:	12800315 	stw	r10,12(r2)
  80437c:	9009883a 	mov	r4,r18
  804380:	08122480 	call	812248 <__malloc_unlock>
  804384:	80c00204 	addi	r3,r16,8
  804388:	003f5906 	br	8040f0 <_malloc_r+0x50>
  80438c:	8109883a 	add	r4,r16,r4
  804390:	20800117 	ldw	r2,4(r4)
  804394:	80c00217 	ldw	r3,8(r16)
  804398:	81400317 	ldw	r5,12(r16)
  80439c:	10800054 	ori	r2,r2,1
  8043a0:	20800115 	stw	r2,4(r4)
  8043a4:	28c00215 	stw	r3,8(r5)
  8043a8:	19400315 	stw	r5,12(r3)
  8043ac:	9009883a 	mov	r4,r18
  8043b0:	08122480 	call	812248 <__malloc_unlock>
  8043b4:	80c00204 	addi	r3,r16,8
  8043b8:	003f4d06 	br	8040f0 <_malloc_r+0x50>
  8043bc:	80800204 	addi	r2,r16,8
  8043c0:	14000317 	ldw	r16,12(r2)
  8043c4:	143f911e 	bne	r2,r16,80420c <_malloc_r+0x16c>
  8043c8:	1a400084 	addi	r9,r3,2
  8043cc:	003f7306 	br	80419c <_malloc_r+0xfc>
  8043d0:	88c00054 	ori	r3,r17,1
  8043d4:	8445883a 	add	r2,r16,r17
  8043d8:	80c00115 	stw	r3,4(r16)
  8043dc:	003fdf06 	br	80435c <_malloc_r+0x2bc>
  8043e0:	e4000217 	ldw	r16,8(fp)
  8043e4:	00bfff04 	movi	r2,-4
  8043e8:	80c00117 	ldw	r3,4(r16)
  8043ec:	802d883a 	mov	r22,r16
  8043f0:	18aa703a 	and	r21,r3,r2
  8043f4:	ac401636 	bltu	r21,r17,804450 <_malloc_r+0x3b0>
  8043f8:	ac49c83a 	sub	r4,r21,r17
  8043fc:	008003c4 	movi	r2,15
  804400:	1100130e 	bge	r2,r4,804450 <_malloc_r+0x3b0>
  804404:	88800054 	ori	r2,r17,1
  804408:	8447883a 	add	r3,r16,r17
  80440c:	80800115 	stw	r2,4(r16)
  804410:	20800054 	ori	r2,r4,1
  804414:	18800115 	stw	r2,4(r3)
  804418:	e0c00215 	stw	r3,8(fp)
  80441c:	9009883a 	mov	r4,r18
  804420:	08122480 	call	812248 <__malloc_unlock>
  804424:	80c00204 	addi	r3,r16,8
  804428:	003f3106 	br	8040f0 <_malloc_r+0x50>
  80442c:	39c00117 	ldw	r7,4(r7)
  804430:	573ffe04 	addi	fp,r10,-8
  804434:	003fa006 	br	8042b8 <_malloc_r+0x218>
  804438:	00801504 	movi	r2,84
  80443c:	10c06736 	bltu	r2,r3,8045dc <_malloc_r+0x53c>
  804440:	8804d33a 	srli	r2,r17,12
  804444:	11801b84 	addi	r6,r2,110
  804448:	300490fa 	slli	r2,r6,3
  80444c:	003f4106 	br	804154 <_malloc_r+0xb4>
  804450:	d0a6eb17 	ldw	r2,-25684(gp)
  804454:	d0e00417 	ldw	r3,-32752(gp)
  804458:	053fffc4 	movi	r20,-1
  80445c:	10800404 	addi	r2,r2,16
  804460:	88a7883a 	add	r19,r17,r2
  804464:	1d000326 	beq	r3,r20,804474 <_malloc_r+0x3d4>
  804468:	98c3ffc4 	addi	r3,r19,4095
  80446c:	00bc0004 	movi	r2,-4096
  804470:	18a6703a 	and	r19,r3,r2
  804474:	9009883a 	mov	r4,r18
  804478:	980b883a 	mov	r5,r19
  80447c:	0804de00 	call	804de0 <_sbrk_r>
  804480:	1009883a 	mov	r4,r2
  804484:	15000426 	beq	r2,r20,804498 <_malloc_r+0x3f8>
  804488:	854b883a 	add	r5,r16,r21
  80448c:	1029883a 	mov	r20,r2
  804490:	11405a2e 	bgeu	r2,r5,8045fc <_malloc_r+0x55c>
  804494:	87000c26 	beq	r16,fp,8044c8 <_malloc_r+0x428>
  804498:	e4000217 	ldw	r16,8(fp)
  80449c:	80c00117 	ldw	r3,4(r16)
  8044a0:	00bfff04 	movi	r2,-4
  8044a4:	1884703a 	and	r2,r3,r2
  8044a8:	14400336 	bltu	r2,r17,8044b8 <_malloc_r+0x418>
  8044ac:	1449c83a 	sub	r4,r2,r17
  8044b0:	008003c4 	movi	r2,15
  8044b4:	113fd316 	blt	r2,r4,804404 <_malloc_r+0x364>
  8044b8:	9009883a 	mov	r4,r18
  8044bc:	08122480 	call	812248 <__malloc_unlock>
  8044c0:	0007883a 	mov	r3,zero
  8044c4:	003f0a06 	br	8040f0 <_malloc_r+0x50>
  8044c8:	05c020b4 	movhi	r23,130
  8044cc:	bde22804 	addi	r23,r23,-30560
  8044d0:	b8800017 	ldw	r2,0(r23)
  8044d4:	988d883a 	add	r6,r19,r2
  8044d8:	b9800015 	stw	r6,0(r23)
  8044dc:	d0e00417 	ldw	r3,-32752(gp)
  8044e0:	00bfffc4 	movi	r2,-1
  8044e4:	18808e26 	beq	r3,r2,804720 <_malloc_r+0x680>
  8044e8:	2145c83a 	sub	r2,r4,r5
  8044ec:	3085883a 	add	r2,r6,r2
  8044f0:	b8800015 	stw	r2,0(r23)
  8044f4:	20c001cc 	andi	r3,r4,7
  8044f8:	18005f1e 	bne	r3,zero,804678 <_malloc_r+0x5d8>
  8044fc:	000b883a 	mov	r5,zero
  804500:	a4c5883a 	add	r2,r20,r19
  804504:	1083ffcc 	andi	r2,r2,4095
  804508:	00c40004 	movi	r3,4096
  80450c:	1887c83a 	sub	r3,r3,r2
  804510:	28e7883a 	add	r19,r5,r3
  804514:	9009883a 	mov	r4,r18
  804518:	980b883a 	mov	r5,r19
  80451c:	0804de00 	call	804de0 <_sbrk_r>
  804520:	1007883a 	mov	r3,r2
  804524:	00bfffc4 	movi	r2,-1
  804528:	18807a26 	beq	r3,r2,804714 <_malloc_r+0x674>
  80452c:	1d05c83a 	sub	r2,r3,r20
  804530:	9885883a 	add	r2,r19,r2
  804534:	10c00054 	ori	r3,r2,1
  804538:	b8800017 	ldw	r2,0(r23)
  80453c:	a021883a 	mov	r16,r20
  804540:	a0c00115 	stw	r3,4(r20)
  804544:	9885883a 	add	r2,r19,r2
  804548:	b8800015 	stw	r2,0(r23)
  80454c:	e5000215 	stw	r20,8(fp)
  804550:	b7003626 	beq	r22,fp,80462c <_malloc_r+0x58c>
  804554:	018003c4 	movi	r6,15
  804558:	35404b36 	bltu	r6,r21,804688 <_malloc_r+0x5e8>
  80455c:	00800044 	movi	r2,1
  804560:	a0800115 	stw	r2,4(r20)
  804564:	003fcd06 	br	80449c <_malloc_r+0x3fc>
  804568:	2808d27a 	srli	r4,r5,9
  80456c:	2000371e 	bne	r4,zero,80464c <_malloc_r+0x5ac>
  804570:	2808d0fa 	srli	r4,r5,3
  804574:	200690fa 	slli	r3,r4,3
  804578:	1ad1883a 	add	r8,r3,r11
  80457c:	41800217 	ldw	r6,8(r8)
  804580:	41805b26 	beq	r8,r6,8046f0 <_malloc_r+0x650>
  804584:	30800117 	ldw	r2,4(r6)
  804588:	00ffff04 	movi	r3,-4
  80458c:	10c4703a 	and	r2,r2,r3
  804590:	2880022e 	bgeu	r5,r2,80459c <_malloc_r+0x4fc>
  804594:	31800217 	ldw	r6,8(r6)
  804598:	41bffa1e 	bne	r8,r6,804584 <_malloc_r+0x4e4>
  80459c:	32000317 	ldw	r8,12(r6)
  8045a0:	39c00117 	ldw	r7,4(r7)
  8045a4:	82000315 	stw	r8,12(r16)
  8045a8:	81800215 	stw	r6,8(r16)
  8045ac:	07002074 	movhi	fp,129
  8045b0:	e7159404 	addi	fp,fp,22096
  8045b4:	34000315 	stw	r16,12(r6)
  8045b8:	44000215 	stw	r16,8(r8)
  8045bc:	003f3e06 	br	8042b8 <_malloc_r+0x218>
  8045c0:	63000044 	addi	r12,r12,1
  8045c4:	608000cc 	andi	r2,r12,3
  8045c8:	10005d26 	beq	r2,zero,804740 <_malloc_r+0x6a0>
  8045cc:	18c00204 	addi	r3,r3,8
  8045d0:	003f5106 	br	804318 <_malloc_r+0x278>
  8045d4:	8089883a 	add	r4,r16,r2
  8045d8:	003f6d06 	br	804390 <_malloc_r+0x2f0>
  8045dc:	00805504 	movi	r2,340
  8045e0:	10c02036 	bltu	r2,r3,804664 <_malloc_r+0x5c4>
  8045e4:	8804d3fa 	srli	r2,r17,15
  8045e8:	11801dc4 	addi	r6,r2,119
  8045ec:	300490fa 	slli	r2,r6,3
  8045f0:	003ed806 	br	804154 <_malloc_r+0xb4>
  8045f4:	48c000c4 	addi	r3,r9,3
  8045f8:	003f3106 	br	8042c0 <_malloc_r+0x220>
  8045fc:	05c020b4 	movhi	r23,130
  804600:	bde22804 	addi	r23,r23,-30560
  804604:	b8800017 	ldw	r2,0(r23)
  804608:	988d883a 	add	r6,r19,r2
  80460c:	b9800015 	stw	r6,0(r23)
  804610:	293fb21e 	bne	r5,r4,8044dc <_malloc_r+0x43c>
  804614:	2083ffcc 	andi	r2,r4,4095
  804618:	103fb01e 	bne	r2,zero,8044dc <_malloc_r+0x43c>
  80461c:	e4000217 	ldw	r16,8(fp)
  804620:	9d45883a 	add	r2,r19,r21
  804624:	10800054 	ori	r2,r2,1
  804628:	80800115 	stw	r2,4(r16)
  80462c:	b8c00017 	ldw	r3,0(r23)
  804630:	d0a6ec17 	ldw	r2,-25680(gp)
  804634:	10c0012e 	bgeu	r2,r3,80463c <_malloc_r+0x59c>
  804638:	d0e6ec15 	stw	r3,-25680(gp)
  80463c:	d0a6ed17 	ldw	r2,-25676(gp)
  804640:	10ff962e 	bgeu	r2,r3,80449c <_malloc_r+0x3fc>
  804644:	d0e6ed15 	stw	r3,-25676(gp)
  804648:	003f9406 	br	80449c <_malloc_r+0x3fc>
  80464c:	00800104 	movi	r2,4
  804650:	11001e36 	bltu	r2,r4,8046cc <_malloc_r+0x62c>
  804654:	2804d1ba 	srli	r2,r5,6
  804658:	11000e04 	addi	r4,r2,56
  80465c:	200690fa 	slli	r3,r4,3
  804660:	003fc506 	br	804578 <_malloc_r+0x4d8>
  804664:	00815504 	movi	r2,1364
  804668:	10c01d2e 	bgeu	r2,r3,8046e0 <_malloc_r+0x640>
  80466c:	01801f84 	movi	r6,126
  804670:	0080fc04 	movi	r2,1008
  804674:	003eb706 	br	804154 <_malloc_r+0xb4>
  804678:	00800204 	movi	r2,8
  80467c:	10cbc83a 	sub	r5,r2,r3
  804680:	2169883a 	add	r20,r4,r5
  804684:	003f9e06 	br	804500 <_malloc_r+0x460>
  804688:	00bffe04 	movi	r2,-8
  80468c:	a93ffd04 	addi	r4,r21,-12
  804690:	2088703a 	and	r4,r4,r2
  804694:	b10b883a 	add	r5,r22,r4
  804698:	00c00144 	movi	r3,5
  80469c:	28c00215 	stw	r3,8(r5)
  8046a0:	28c00115 	stw	r3,4(r5)
  8046a4:	b0800117 	ldw	r2,4(r22)
  8046a8:	1080004c 	andi	r2,r2,1
  8046ac:	2084b03a 	or	r2,r4,r2
  8046b0:	b0800115 	stw	r2,4(r22)
  8046b4:	313fdd2e 	bgeu	r6,r4,80462c <_malloc_r+0x58c>
  8046b8:	b1400204 	addi	r5,r22,8
  8046bc:	9009883a 	mov	r4,r18
  8046c0:	08034240 	call	803424 <_free_r>
  8046c4:	e4000217 	ldw	r16,8(fp)
  8046c8:	003fd806 	br	80462c <_malloc_r+0x58c>
  8046cc:	00800504 	movi	r2,20
  8046d0:	11001536 	bltu	r2,r4,804728 <_malloc_r+0x688>
  8046d4:	210016c4 	addi	r4,r4,91
  8046d8:	200690fa 	slli	r3,r4,3
  8046dc:	003fa606 	br	804578 <_malloc_r+0x4d8>
  8046e0:	8804d4ba 	srli	r2,r17,18
  8046e4:	11801f04 	addi	r6,r2,124
  8046e8:	300490fa 	slli	r2,r6,3
  8046ec:	003e9906 	br	804154 <_malloc_r+0xb4>
  8046f0:	2009d0ba 	srai	r4,r4,2
  8046f4:	01402074 	movhi	r5,129
  8046f8:	29559404 	addi	r5,r5,22096
  8046fc:	00c00044 	movi	r3,1
  804700:	28800117 	ldw	r2,4(r5)
  804704:	1906983a 	sll	r3,r3,r4
  804708:	10c4b03a 	or	r2,r2,r3
  80470c:	28800115 	stw	r2,4(r5)
  804710:	003fa306 	br	8045a0 <_malloc_r+0x500>
  804714:	0027883a 	mov	r19,zero
  804718:	00c00044 	movi	r3,1
  80471c:	003f8606 	br	804538 <_malloc_r+0x498>
  804720:	d1200415 	stw	r4,-32752(gp)
  804724:	003f7306 	br	8044f4 <_malloc_r+0x454>
  804728:	00801504 	movi	r2,84
  80472c:	11001936 	bltu	r2,r4,804794 <_malloc_r+0x6f4>
  804730:	2804d33a 	srli	r2,r5,12
  804734:	11001b84 	addi	r4,r2,110
  804738:	200690fa 	slli	r3,r4,3
  80473c:	003f8e06 	br	804578 <_malloc_r+0x4d8>
  804740:	480b883a 	mov	r5,r9
  804744:	6807883a 	mov	r3,r13
  804748:	288000cc 	andi	r2,r5,3
  80474c:	18fffe04 	addi	r3,r3,-8
  804750:	297fffc4 	addi	r5,r5,-1
  804754:	10001526 	beq	r2,zero,8047ac <_malloc_r+0x70c>
  804758:	18800217 	ldw	r2,8(r3)
  80475c:	10fffa26 	beq	r2,r3,804748 <_malloc_r+0x6a8>
  804760:	2109883a 	add	r4,r4,r4
  804764:	393f1e36 	bltu	r7,r4,8043e0 <_malloc_r+0x340>
  804768:	203f1d26 	beq	r4,zero,8043e0 <_malloc_r+0x340>
  80476c:	21c4703a 	and	r2,r4,r7
  804770:	10000226 	beq	r2,zero,80477c <_malloc_r+0x6dc>
  804774:	6013883a 	mov	r9,r12
  804778:	003ee106 	br	804300 <_malloc_r+0x260>
  80477c:	2109883a 	add	r4,r4,r4
  804780:	3904703a 	and	r2,r7,r4
  804784:	63000104 	addi	r12,r12,4
  804788:	103ffc26 	beq	r2,zero,80477c <_malloc_r+0x6dc>
  80478c:	6013883a 	mov	r9,r12
  804790:	003edb06 	br	804300 <_malloc_r+0x260>
  804794:	00805504 	movi	r2,340
  804798:	11000836 	bltu	r2,r4,8047bc <_malloc_r+0x71c>
  80479c:	2804d3fa 	srli	r2,r5,15
  8047a0:	11001dc4 	addi	r4,r2,119
  8047a4:	200690fa 	slli	r3,r4,3
  8047a8:	003f7306 	br	804578 <_malloc_r+0x4d8>
  8047ac:	0104303a 	nor	r2,zero,r4
  8047b0:	388e703a 	and	r7,r7,r2
  8047b4:	e1c00115 	stw	r7,4(fp)
  8047b8:	003fe906 	br	804760 <_malloc_r+0x6c0>
  8047bc:	00815504 	movi	r2,1364
  8047c0:	1100032e 	bgeu	r2,r4,8047d0 <_malloc_r+0x730>
  8047c4:	01001f84 	movi	r4,126
  8047c8:	00c0fc04 	movi	r3,1008
  8047cc:	003f6a06 	br	804578 <_malloc_r+0x4d8>
  8047d0:	2804d4ba 	srli	r2,r5,18
  8047d4:	11001f04 	addi	r4,r2,124
  8047d8:	200690fa 	slli	r3,r4,3
  8047dc:	003f6606 	br	804578 <_malloc_r+0x4d8>

008047e0 <memchr>:
  8047e0:	008000c4 	movi	r2,3
  8047e4:	29403fcc 	andi	r5,r5,255
  8047e8:	2007883a 	mov	r3,r4
  8047ec:	1180022e 	bgeu	r2,r6,8047f8 <memchr+0x18>
  8047f0:	2084703a 	and	r2,r4,r2
  8047f4:	10000b26 	beq	r2,zero,804824 <memchr+0x44>
  8047f8:	313fffc4 	addi	r4,r6,-1
  8047fc:	3000051e 	bne	r6,zero,804814 <memchr+0x34>
  804800:	00002c06 	br	8048b4 <memchr+0xd4>
  804804:	213fffc4 	addi	r4,r4,-1
  804808:	00bfffc4 	movi	r2,-1
  80480c:	18c00044 	addi	r3,r3,1
  804810:	20802826 	beq	r4,r2,8048b4 <memchr+0xd4>
  804814:	18800003 	ldbu	r2,0(r3)
  804818:	28bffa1e 	bne	r5,r2,804804 <memchr+0x24>
  80481c:	1805883a 	mov	r2,r3
  804820:	f800283a 	ret
  804824:	0011883a 	mov	r8,zero
  804828:	0007883a 	mov	r3,zero
  80482c:	01c00104 	movi	r7,4
  804830:	4004923a 	slli	r2,r8,8
  804834:	18c00044 	addi	r3,r3,1
  804838:	1151883a 	add	r8,r2,r5
  80483c:	19fffc1e 	bne	r3,r7,804830 <memchr+0x50>
  804840:	02bfbff4 	movhi	r10,65279
  804844:	52bfbfc4 	addi	r10,r10,-257
  804848:	02602074 	movhi	r9,32897
  80484c:	4a602004 	addi	r9,r9,-32640
  804850:	02c000c4 	movi	r11,3
  804854:	20800017 	ldw	r2,0(r4)
  804858:	31bfff04 	addi	r6,r6,-4
  80485c:	200f883a 	mov	r7,r4
  804860:	1204f03a 	xor	r2,r2,r8
  804864:	1287883a 	add	r3,r2,r10
  804868:	1a46703a 	and	r3,r3,r9
  80486c:	0084303a 	nor	r2,zero,r2
  804870:	10c4703a 	and	r2,r2,r3
  804874:	10000b26 	beq	r2,zero,8048a4 <memchr+0xc4>
  804878:	20800003 	ldbu	r2,0(r4)
  80487c:	28800f26 	beq	r5,r2,8048bc <memchr+0xdc>
  804880:	20800043 	ldbu	r2,1(r4)
  804884:	21c00044 	addi	r7,r4,1
  804888:	28800c26 	beq	r5,r2,8048bc <memchr+0xdc>
  80488c:	20800083 	ldbu	r2,2(r4)
  804890:	21c00084 	addi	r7,r4,2
  804894:	28800926 	beq	r5,r2,8048bc <memchr+0xdc>
  804898:	208000c3 	ldbu	r2,3(r4)
  80489c:	21c000c4 	addi	r7,r4,3
  8048a0:	28800626 	beq	r5,r2,8048bc <memchr+0xdc>
  8048a4:	21000104 	addi	r4,r4,4
  8048a8:	59bfea36 	bltu	r11,r6,804854 <memchr+0x74>
  8048ac:	2007883a 	mov	r3,r4
  8048b0:	003fd106 	br	8047f8 <memchr+0x18>
  8048b4:	0005883a 	mov	r2,zero
  8048b8:	f800283a 	ret
  8048bc:	3805883a 	mov	r2,r7
  8048c0:	f800283a 	ret

008048c4 <memcpy>:
  8048c4:	01c003c4 	movi	r7,15
  8048c8:	2007883a 	mov	r3,r4
  8048cc:	3980032e 	bgeu	r7,r6,8048dc <memcpy+0x18>
  8048d0:	2904b03a 	or	r2,r5,r4
  8048d4:	108000cc 	andi	r2,r2,3
  8048d8:	10000926 	beq	r2,zero,804900 <memcpy+0x3c>
  8048dc:	30000626 	beq	r6,zero,8048f8 <memcpy+0x34>
  8048e0:	30cd883a 	add	r6,r6,r3
  8048e4:	28800003 	ldbu	r2,0(r5)
  8048e8:	29400044 	addi	r5,r5,1
  8048ec:	18800005 	stb	r2,0(r3)
  8048f0:	18c00044 	addi	r3,r3,1
  8048f4:	30fffb1e 	bne	r6,r3,8048e4 <memcpy+0x20>
  8048f8:	2005883a 	mov	r2,r4
  8048fc:	f800283a 	ret
  804900:	3811883a 	mov	r8,r7
  804904:	200f883a 	mov	r7,r4
  804908:	28c00017 	ldw	r3,0(r5)
  80490c:	31bffc04 	addi	r6,r6,-16
  804910:	38c00015 	stw	r3,0(r7)
  804914:	28800117 	ldw	r2,4(r5)
  804918:	38800115 	stw	r2,4(r7)
  80491c:	28c00217 	ldw	r3,8(r5)
  804920:	38c00215 	stw	r3,8(r7)
  804924:	28800317 	ldw	r2,12(r5)
  804928:	29400404 	addi	r5,r5,16
  80492c:	38800315 	stw	r2,12(r7)
  804930:	39c00404 	addi	r7,r7,16
  804934:	41bff436 	bltu	r8,r6,804908 <memcpy+0x44>
  804938:	008000c4 	movi	r2,3
  80493c:	1180072e 	bgeu	r2,r6,80495c <memcpy+0x98>
  804940:	1007883a 	mov	r3,r2
  804944:	28800017 	ldw	r2,0(r5)
  804948:	31bfff04 	addi	r6,r6,-4
  80494c:	29400104 	addi	r5,r5,4
  804950:	38800015 	stw	r2,0(r7)
  804954:	39c00104 	addi	r7,r7,4
  804958:	19bffa36 	bltu	r3,r6,804944 <memcpy+0x80>
  80495c:	3807883a 	mov	r3,r7
  804960:	003fde06 	br	8048dc <memcpy+0x18>

00804964 <memset>:
  804964:	008000c4 	movi	r2,3
  804968:	29403fcc 	andi	r5,r5,255
  80496c:	2007883a 	mov	r3,r4
  804970:	1180022e 	bgeu	r2,r6,80497c <memset+0x18>
  804974:	2084703a 	and	r2,r4,r2
  804978:	10000826 	beq	r2,zero,80499c <memset+0x38>
  80497c:	30000526 	beq	r6,zero,804994 <memset+0x30>
  804980:	2805883a 	mov	r2,r5
  804984:	30cd883a 	add	r6,r6,r3
  804988:	18800005 	stb	r2,0(r3)
  80498c:	18c00044 	addi	r3,r3,1
  804990:	19bffd1e 	bne	r3,r6,804988 <memset+0x24>
  804994:	2005883a 	mov	r2,r4
  804998:	f800283a 	ret
  80499c:	2804923a 	slli	r2,r5,8
  8049a0:	020003c4 	movi	r8,15
  8049a4:	200f883a 	mov	r7,r4
  8049a8:	2884b03a 	or	r2,r5,r2
  8049ac:	1006943a 	slli	r3,r2,16
  8049b0:	10c6b03a 	or	r3,r2,r3
  8049b4:	41800a2e 	bgeu	r8,r6,8049e0 <memset+0x7c>
  8049b8:	4005883a 	mov	r2,r8
  8049bc:	31bffc04 	addi	r6,r6,-16
  8049c0:	38c00015 	stw	r3,0(r7)
  8049c4:	38c00115 	stw	r3,4(r7)
  8049c8:	38c00215 	stw	r3,8(r7)
  8049cc:	38c00315 	stw	r3,12(r7)
  8049d0:	39c00404 	addi	r7,r7,16
  8049d4:	11bff936 	bltu	r2,r6,8049bc <memset+0x58>
  8049d8:	008000c4 	movi	r2,3
  8049dc:	1180052e 	bgeu	r2,r6,8049f4 <memset+0x90>
  8049e0:	31bfff04 	addi	r6,r6,-4
  8049e4:	008000c4 	movi	r2,3
  8049e8:	38c00015 	stw	r3,0(r7)
  8049ec:	39c00104 	addi	r7,r7,4
  8049f0:	11bffb36 	bltu	r2,r6,8049e0 <memset+0x7c>
  8049f4:	3807883a 	mov	r3,r7
  8049f8:	003fe006 	br	80497c <memset+0x18>

008049fc <_open_r>:
  8049fc:	defffd04 	addi	sp,sp,-12
  804a00:	dc000015 	stw	r16,0(sp)
  804a04:	040020b4 	movhi	r16,130
  804a08:	84221904 	addi	r16,r16,-30620
  804a0c:	dc400115 	stw	r17,4(sp)
  804a10:	80000015 	stw	zero,0(r16)
  804a14:	2023883a 	mov	r17,r4
  804a18:	2809883a 	mov	r4,r5
  804a1c:	300b883a 	mov	r5,r6
  804a20:	380d883a 	mov	r6,r7
  804a24:	dfc00215 	stw	ra,8(sp)
  804a28:	08123600 	call	812360 <open>
  804a2c:	1007883a 	mov	r3,r2
  804a30:	00bfffc4 	movi	r2,-1
  804a34:	18800626 	beq	r3,r2,804a50 <_open_r+0x54>
  804a38:	1805883a 	mov	r2,r3
  804a3c:	dfc00217 	ldw	ra,8(sp)
  804a40:	dc400117 	ldw	r17,4(sp)
  804a44:	dc000017 	ldw	r16,0(sp)
  804a48:	dec00304 	addi	sp,sp,12
  804a4c:	f800283a 	ret
  804a50:	80800017 	ldw	r2,0(r16)
  804a54:	103ff826 	beq	r2,zero,804a38 <_open_r+0x3c>
  804a58:	88800015 	stw	r2,0(r17)
  804a5c:	1805883a 	mov	r2,r3
  804a60:	dfc00217 	ldw	ra,8(sp)
  804a64:	dc400117 	ldw	r17,4(sp)
  804a68:	dc000017 	ldw	r16,0(sp)
  804a6c:	dec00304 	addi	sp,sp,12
  804a70:	f800283a 	ret

00804a74 <printf>:
  804a74:	defffb04 	addi	sp,sp,-20
  804a78:	dfc00115 	stw	ra,4(sp)
  804a7c:	d9400215 	stw	r5,8(sp)
  804a80:	d9800315 	stw	r6,12(sp)
  804a84:	d9c00415 	stw	r7,16(sp)
  804a88:	00802074 	movhi	r2,129
  804a8c:	109b3004 	addi	r2,r2,27840
  804a90:	10c00017 	ldw	r3,0(r2)
  804a94:	200b883a 	mov	r5,r4
  804a98:	d8800204 	addi	r2,sp,8
  804a9c:	19000217 	ldw	r4,8(r3)
  804aa0:	100d883a 	mov	r6,r2
  804aa4:	d8800015 	stw	r2,0(sp)
  804aa8:	08073cc0 	call	8073cc <__vfprintf_internal>
  804aac:	dfc00117 	ldw	ra,4(sp)
  804ab0:	dec00504 	addi	sp,sp,20
  804ab4:	f800283a 	ret

00804ab8 <_printf_r>:
  804ab8:	defffc04 	addi	sp,sp,-16
  804abc:	dfc00115 	stw	ra,4(sp)
  804ac0:	d9800215 	stw	r6,8(sp)
  804ac4:	d9c00315 	stw	r7,12(sp)
  804ac8:	280d883a 	mov	r6,r5
  804acc:	21400217 	ldw	r5,8(r4)
  804ad0:	d8c00204 	addi	r3,sp,8
  804ad4:	180f883a 	mov	r7,r3
  804ad8:	d8c00015 	stw	r3,0(sp)
  804adc:	08055080 	call	805508 <___vfprintf_internal_r>
  804ae0:	dfc00117 	ldw	ra,4(sp)
  804ae4:	dec00404 	addi	sp,sp,16
  804ae8:	f800283a 	ret

00804aec <_puts_r>:
  804aec:	defff604 	addi	sp,sp,-40
  804af0:	dc400715 	stw	r17,28(sp)
  804af4:	2023883a 	mov	r17,r4
  804af8:	2809883a 	mov	r4,r5
  804afc:	dfc00915 	stw	ra,36(sp)
  804b00:	dcc00815 	stw	r19,32(sp)
  804b04:	2827883a 	mov	r19,r5
  804b08:	08050b00 	call	8050b0 <strlen>
  804b0c:	89400217 	ldw	r5,8(r17)
  804b10:	00c02074 	movhi	r3,129
  804b14:	18d3e004 	addi	r3,r3,20352
  804b18:	01c00044 	movi	r7,1
  804b1c:	12000044 	addi	r8,r2,1
  804b20:	d8c00515 	stw	r3,20(sp)
  804b24:	d9c00615 	stw	r7,24(sp)
  804b28:	d8c00304 	addi	r3,sp,12
  804b2c:	01c00084 	movi	r7,2
  804b30:	8809883a 	mov	r4,r17
  804b34:	d80d883a 	mov	r6,sp
  804b38:	d8c00015 	stw	r3,0(sp)
  804b3c:	dcc00315 	stw	r19,12(sp)
  804b40:	da000215 	stw	r8,8(sp)
  804b44:	d9c00115 	stw	r7,4(sp)
  804b48:	d8800415 	stw	r2,16(sp)
  804b4c:	080a7e80 	call	80a7e8 <__sfvwrite_r>
  804b50:	00ffffc4 	movi	r3,-1
  804b54:	10000626 	beq	r2,zero,804b70 <_puts_r+0x84>
  804b58:	1805883a 	mov	r2,r3
  804b5c:	dfc00917 	ldw	ra,36(sp)
  804b60:	dcc00817 	ldw	r19,32(sp)
  804b64:	dc400717 	ldw	r17,28(sp)
  804b68:	dec00a04 	addi	sp,sp,40
  804b6c:	f800283a 	ret
  804b70:	00c00284 	movi	r3,10
  804b74:	1805883a 	mov	r2,r3
  804b78:	dfc00917 	ldw	ra,36(sp)
  804b7c:	dcc00817 	ldw	r19,32(sp)
  804b80:	dc400717 	ldw	r17,28(sp)
  804b84:	dec00a04 	addi	sp,sp,40
  804b88:	f800283a 	ret

00804b8c <puts>:
  804b8c:	00802074 	movhi	r2,129
  804b90:	109b3004 	addi	r2,r2,27840
  804b94:	200b883a 	mov	r5,r4
  804b98:	11000017 	ldw	r4,0(r2)
  804b9c:	0804aec1 	jmpi	804aec <_puts_r>

00804ba0 <__srefill_r>:
  804ba0:	defffd04 	addi	sp,sp,-12
  804ba4:	dc400115 	stw	r17,4(sp)
  804ba8:	dc000015 	stw	r16,0(sp)
  804bac:	dfc00215 	stw	ra,8(sp)
  804bb0:	2023883a 	mov	r17,r4
  804bb4:	2821883a 	mov	r16,r5
  804bb8:	20000226 	beq	r4,zero,804bc4 <__srefill_r+0x24>
  804bbc:	20800e17 	ldw	r2,56(r4)
  804bc0:	10004126 	beq	r2,zero,804cc8 <__srefill_r+0x128>
  804bc4:	80c0030b 	ldhu	r3,12(r16)
  804bc8:	80000115 	stw	zero,4(r16)
  804bcc:	1880080c 	andi	r2,r3,32
  804bd0:	1000361e 	bne	r2,zero,804cac <__srefill_r+0x10c>
  804bd4:	1880010c 	andi	r2,r3,4
  804bd8:	1000211e 	bne	r2,zero,804c60 <__srefill_r+0xc0>
  804bdc:	1880040c 	andi	r2,r3,16
  804be0:	10005026 	beq	r2,zero,804d24 <__srefill_r+0x184>
  804be4:	1880020c 	andi	r2,r3,8
  804be8:	1000541e 	bne	r2,zero,804d3c <__srefill_r+0x19c>
  804bec:	8080030b 	ldhu	r2,12(r16)
  804bf0:	10800114 	ori	r2,r2,4
  804bf4:	8080030d 	sth	r2,12(r16)
  804bf8:	80800417 	ldw	r2,16(r16)
  804bfc:	10004526 	beq	r2,zero,804d14 <__srefill_r+0x174>
  804c00:	8080030b 	ldhu	r2,12(r16)
  804c04:	108000cc 	andi	r2,r2,3
  804c08:	1000361e 	bne	r2,zero,804ce4 <__srefill_r+0x144>
  804c0c:	81800417 	ldw	r6,16(r16)
  804c10:	80c00817 	ldw	r3,32(r16)
  804c14:	81400717 	ldw	r5,28(r16)
  804c18:	81c00517 	ldw	r7,20(r16)
  804c1c:	8809883a 	mov	r4,r17
  804c20:	81800015 	stw	r6,0(r16)
  804c24:	183ee83a 	callr	r3
  804c28:	80c0030b 	ldhu	r3,12(r16)
  804c2c:	1009883a 	mov	r4,r2
  804c30:	80800115 	stw	r2,4(r16)
  804c34:	00b7ffc4 	movi	r2,-8193
  804c38:	1884703a 	and	r2,r3,r2
  804c3c:	8080030d 	sth	r2,12(r16)
  804c40:	0100230e 	bge	zero,r4,804cd0 <__srefill_r+0x130>
  804c44:	0009883a 	mov	r4,zero
  804c48:	2005883a 	mov	r2,r4
  804c4c:	dfc00217 	ldw	ra,8(sp)
  804c50:	dc400117 	ldw	r17,4(sp)
  804c54:	dc000017 	ldw	r16,0(sp)
  804c58:	dec00304 	addi	sp,sp,12
  804c5c:	f800283a 	ret
  804c60:	81400c17 	ldw	r5,48(r16)
  804c64:	283fe426 	beq	r5,zero,804bf8 <__srefill_r+0x58>
  804c68:	80801004 	addi	r2,r16,64
  804c6c:	28800226 	beq	r5,r2,804c78 <__srefill_r+0xd8>
  804c70:	8809883a 	mov	r4,r17
  804c74:	08034240 	call	803424 <_free_r>
  804c78:	80800f17 	ldw	r2,60(r16)
  804c7c:	80000c15 	stw	zero,48(r16)
  804c80:	80800115 	stw	r2,4(r16)
  804c84:	103fdc26 	beq	r2,zero,804bf8 <__srefill_r+0x58>
  804c88:	80800e17 	ldw	r2,56(r16)
  804c8c:	0009883a 	mov	r4,zero
  804c90:	80800015 	stw	r2,0(r16)
  804c94:	2005883a 	mov	r2,r4
  804c98:	dfc00217 	ldw	ra,8(sp)
  804c9c:	dc400117 	ldw	r17,4(sp)
  804ca0:	dc000017 	ldw	r16,0(sp)
  804ca4:	dec00304 	addi	sp,sp,12
  804ca8:	f800283a 	ret
  804cac:	013fffc4 	movi	r4,-1
  804cb0:	2005883a 	mov	r2,r4
  804cb4:	dfc00217 	ldw	ra,8(sp)
  804cb8:	dc400117 	ldw	r17,4(sp)
  804cbc:	dc000017 	ldw	r16,0(sp)
  804cc0:	dec00304 	addi	sp,sp,12
  804cc4:	f800283a 	ret
  804cc8:	0802cb00 	call	802cb0 <__sinit>
  804ccc:	003fbd06 	br	804bc4 <__srefill_r+0x24>
  804cd0:	20000b1e 	bne	r4,zero,804d00 <__srefill_r+0x160>
  804cd4:	10800814 	ori	r2,r2,32
  804cd8:	013fffc4 	movi	r4,-1
  804cdc:	8080030d 	sth	r2,12(r16)
  804ce0:	003fd906 	br	804c48 <__srefill_r+0xa8>
  804ce4:	00802074 	movhi	r2,129
  804ce8:	109b3104 	addi	r2,r2,27844
  804cec:	11000017 	ldw	r4,0(r2)
  804cf0:	01402034 	movhi	r5,128
  804cf4:	29535904 	addi	r5,r5,19812
  804cf8:	0803d400 	call	803d40 <_fwalk>
  804cfc:	003fc306 	br	804c0c <__srefill_r+0x6c>
  804d00:	10801014 	ori	r2,r2,64
  804d04:	013fffc4 	movi	r4,-1
  804d08:	8080030d 	sth	r2,12(r16)
  804d0c:	80000115 	stw	zero,4(r16)
  804d10:	003fcd06 	br	804c48 <__srefill_r+0xa8>
  804d14:	8809883a 	mov	r4,r17
  804d18:	800b883a 	mov	r5,r16
  804d1c:	0803ee40 	call	803ee4 <__smakebuf_r>
  804d20:	003fb706 	br	804c00 <__srefill_r+0x60>
  804d24:	18c01014 	ori	r3,r3,64
  804d28:	00800244 	movi	r2,9
  804d2c:	013fffc4 	movi	r4,-1
  804d30:	88800015 	stw	r2,0(r17)
  804d34:	80c0030d 	sth	r3,12(r16)
  804d38:	003fc306 	br	804c48 <__srefill_r+0xa8>
  804d3c:	8809883a 	mov	r4,r17
  804d40:	800b883a 	mov	r5,r16
  804d44:	08027840 	call	802784 <_fflush_r>
  804d48:	103fd81e 	bne	r2,zero,804cac <__srefill_r+0x10c>
  804d4c:	8080030b 	ldhu	r2,12(r16)
  804d50:	80000215 	stw	zero,8(r16)
  804d54:	80000615 	stw	zero,24(r16)
  804d58:	10bffdcc 	andi	r2,r2,65527
  804d5c:	8080030d 	sth	r2,12(r16)
  804d60:	003fa206 	br	804bec <__srefill_r+0x4c>

00804d64 <lflush>:
  804d64:	20c0030b 	ldhu	r3,12(r4)
  804d68:	01400244 	movi	r5,9
  804d6c:	0005883a 	mov	r2,zero
  804d70:	18c0024c 	andi	r3,r3,9
  804d74:	19400126 	beq	r3,r5,804d7c <lflush+0x18>
  804d78:	f800283a 	ret
  804d7c:	08029801 	jmpi	802980 <fflush>

00804d80 <__srget_r>:
  804d80:	defffe04 	addi	sp,sp,-8
  804d84:	dc000015 	stw	r16,0(sp)
  804d88:	dfc00115 	stw	ra,4(sp)
  804d8c:	2821883a 	mov	r16,r5
  804d90:	0804ba00 	call	804ba0 <__srefill_r>
  804d94:	013fffc4 	movi	r4,-1
  804d98:	1000071e 	bne	r2,zero,804db8 <__srget_r+0x38>
  804d9c:	80800117 	ldw	r2,4(r16)
  804da0:	81000017 	ldw	r4,0(r16)
  804da4:	10bfffc4 	addi	r2,r2,-1
  804da8:	20c00044 	addi	r3,r4,1
  804dac:	80800115 	stw	r2,4(r16)
  804db0:	21000003 	ldbu	r4,0(r4)
  804db4:	80c00015 	stw	r3,0(r16)
  804db8:	2005883a 	mov	r2,r4
  804dbc:	dfc00117 	ldw	ra,4(sp)
  804dc0:	dc000017 	ldw	r16,0(sp)
  804dc4:	dec00204 	addi	sp,sp,8
  804dc8:	f800283a 	ret

00804dcc <__srget>:
  804dcc:	00802074 	movhi	r2,129
  804dd0:	109b3004 	addi	r2,r2,27840
  804dd4:	200b883a 	mov	r5,r4
  804dd8:	11000017 	ldw	r4,0(r2)
  804ddc:	0804d801 	jmpi	804d80 <__srget_r>

00804de0 <_sbrk_r>:
  804de0:	defffd04 	addi	sp,sp,-12
  804de4:	dc000015 	stw	r16,0(sp)
  804de8:	040020b4 	movhi	r16,130
  804dec:	84221904 	addi	r16,r16,-30620
  804df0:	dc400115 	stw	r17,4(sp)
  804df4:	80000015 	stw	zero,0(r16)
  804df8:	2023883a 	mov	r17,r4
  804dfc:	2809883a 	mov	r4,r5
  804e00:	dfc00215 	stw	ra,8(sp)
  804e04:	08127480 	call	812748 <sbrk>
  804e08:	1007883a 	mov	r3,r2
  804e0c:	00bfffc4 	movi	r2,-1
  804e10:	18800626 	beq	r3,r2,804e2c <_sbrk_r+0x4c>
  804e14:	1805883a 	mov	r2,r3
  804e18:	dfc00217 	ldw	ra,8(sp)
  804e1c:	dc400117 	ldw	r17,4(sp)
  804e20:	dc000017 	ldw	r16,0(sp)
  804e24:	dec00304 	addi	sp,sp,12
  804e28:	f800283a 	ret
  804e2c:	80800017 	ldw	r2,0(r16)
  804e30:	103ff826 	beq	r2,zero,804e14 <_sbrk_r+0x34>
  804e34:	88800015 	stw	r2,0(r17)
  804e38:	1805883a 	mov	r2,r3
  804e3c:	dfc00217 	ldw	ra,8(sp)
  804e40:	dc400117 	ldw	r17,4(sp)
  804e44:	dc000017 	ldw	r16,0(sp)
  804e48:	dec00304 	addi	sp,sp,12
  804e4c:	f800283a 	ret

00804e50 <eofread>:
  804e50:	0005883a 	mov	r2,zero
  804e54:	f800283a 	ret

00804e58 <_sscanf_r>:
  804e58:	deffe404 	addi	sp,sp,-112
  804e5c:	dcc01915 	stw	r19,100(sp)
  804e60:	2027883a 	mov	r19,r4
  804e64:	dfc01a15 	stw	ra,104(sp)
  804e68:	dc401815 	stw	r17,96(sp)
  804e6c:	d9c01b15 	stw	r7,108(sp)
  804e70:	00808104 	movi	r2,516
  804e74:	2809883a 	mov	r4,r5
  804e78:	3023883a 	mov	r17,r6
  804e7c:	d9400115 	stw	r5,4(sp)
  804e80:	d9400515 	stw	r5,20(sp)
  804e84:	d880040d 	sth	r2,16(sp)
  804e88:	08050b00 	call	8050b0 <strlen>
  804e8c:	d8c01b04 	addi	r3,sp,108
  804e90:	d8c00015 	stw	r3,0(sp)
  804e94:	180f883a 	mov	r7,r3
  804e98:	023fffc4 	movi	r8,-1
  804e9c:	00c02034 	movhi	r3,128
  804ea0:	18d39404 	addi	r3,r3,20048
  804ea4:	9809883a 	mov	r4,r19
  804ea8:	880d883a 	mov	r6,r17
  804eac:	d9400104 	addi	r5,sp,4
  804eb0:	d8800615 	stw	r2,24(sp)
  804eb4:	d8c00915 	stw	r3,36(sp)
  804eb8:	da00048d 	sth	r8,18(sp)
  804ebc:	d8800215 	stw	r2,8(sp)
  804ec0:	d8000d15 	stw	zero,52(sp)
  804ec4:	d8001215 	stw	zero,72(sp)
  804ec8:	08073f00 	call	8073f0 <__svfscanf_r>
  804ecc:	dfc01a17 	ldw	ra,104(sp)
  804ed0:	dcc01917 	ldw	r19,100(sp)
  804ed4:	dc401817 	ldw	r17,96(sp)
  804ed8:	dec01c04 	addi	sp,sp,112
  804edc:	f800283a 	ret

00804ee0 <sscanf>:
  804ee0:	deffe404 	addi	sp,sp,-112
  804ee4:	dfc01915 	stw	ra,100(sp)
  804ee8:	dc401815 	stw	r17,96(sp)
  804eec:	d9801a15 	stw	r6,104(sp)
  804ef0:	d9c01b15 	stw	r7,108(sp)
  804ef4:	00808104 	movi	r2,516
  804ef8:	2823883a 	mov	r17,r5
  804efc:	d9000515 	stw	r4,20(sp)
  804f00:	d9000115 	stw	r4,4(sp)
  804f04:	d880040d 	sth	r2,16(sp)
  804f08:	08050b00 	call	8050b0 <strlen>
  804f0c:	d8c01a04 	addi	r3,sp,104
  804f10:	d8c00015 	stw	r3,0(sp)
  804f14:	00c02074 	movhi	r3,129
  804f18:	18db3004 	addi	r3,r3,27840
  804f1c:	19000017 	ldw	r4,0(r3)
  804f20:	d9c00017 	ldw	r7,0(sp)
  804f24:	00c02034 	movhi	r3,128
  804f28:	18d39404 	addi	r3,r3,20048
  804f2c:	023fffc4 	movi	r8,-1
  804f30:	880d883a 	mov	r6,r17
  804f34:	d9400104 	addi	r5,sp,4
  804f38:	d8800615 	stw	r2,24(sp)
  804f3c:	d8c00915 	stw	r3,36(sp)
  804f40:	da00048d 	sth	r8,18(sp)
  804f44:	d8800215 	stw	r2,8(sp)
  804f48:	d8000d15 	stw	zero,52(sp)
  804f4c:	d8001215 	stw	zero,72(sp)
  804f50:	08073f00 	call	8073f0 <__svfscanf_r>
  804f54:	dfc01917 	ldw	ra,100(sp)
  804f58:	dc401817 	ldw	r17,96(sp)
  804f5c:	dec01c04 	addi	sp,sp,112
  804f60:	f800283a 	ret

00804f64 <__sclose>:
  804f64:	2940038f 	ldh	r5,14(r5)
  804f68:	0808ee01 	jmpi	808ee0 <_close_r>

00804f6c <__sseek>:
  804f6c:	defffe04 	addi	sp,sp,-8
  804f70:	dc000015 	stw	r16,0(sp)
  804f74:	2821883a 	mov	r16,r5
  804f78:	2940038f 	ldh	r5,14(r5)
  804f7c:	dfc00115 	stw	ra,4(sp)
  804f80:	080ade40 	call	80ade4 <_lseek_r>
  804f84:	1007883a 	mov	r3,r2
  804f88:	00bfffc4 	movi	r2,-1
  804f8c:	18800926 	beq	r3,r2,804fb4 <__sseek+0x48>
  804f90:	8080030b 	ldhu	r2,12(r16)
  804f94:	80c01415 	stw	r3,80(r16)
  804f98:	10840014 	ori	r2,r2,4096
  804f9c:	8080030d 	sth	r2,12(r16)
  804fa0:	1805883a 	mov	r2,r3
  804fa4:	dfc00117 	ldw	ra,4(sp)
  804fa8:	dc000017 	ldw	r16,0(sp)
  804fac:	dec00204 	addi	sp,sp,8
  804fb0:	f800283a 	ret
  804fb4:	8080030b 	ldhu	r2,12(r16)
  804fb8:	10bbffcc 	andi	r2,r2,61439
  804fbc:	8080030d 	sth	r2,12(r16)
  804fc0:	1805883a 	mov	r2,r3
  804fc4:	dfc00117 	ldw	ra,4(sp)
  804fc8:	dc000017 	ldw	r16,0(sp)
  804fcc:	dec00204 	addi	sp,sp,8
  804fd0:	f800283a 	ret

00804fd4 <__swrite>:
  804fd4:	2880030b 	ldhu	r2,12(r5)
  804fd8:	defffb04 	addi	sp,sp,-20
  804fdc:	dcc00315 	stw	r19,12(sp)
  804fe0:	1080400c 	andi	r2,r2,256
  804fe4:	dc800215 	stw	r18,8(sp)
  804fe8:	dc400115 	stw	r17,4(sp)
  804fec:	dc000015 	stw	r16,0(sp)
  804ff0:	3027883a 	mov	r19,r6
  804ff4:	3825883a 	mov	r18,r7
  804ff8:	dfc00415 	stw	ra,16(sp)
  804ffc:	2821883a 	mov	r16,r5
  805000:	000d883a 	mov	r6,zero
  805004:	01c00084 	movi	r7,2
  805008:	2023883a 	mov	r17,r4
  80500c:	10000226 	beq	r2,zero,805018 <__swrite+0x44>
  805010:	2940038f 	ldh	r5,14(r5)
  805014:	080ade40 	call	80ade4 <_lseek_r>
  805018:	8080030b 	ldhu	r2,12(r16)
  80501c:	8140038f 	ldh	r5,14(r16)
  805020:	8809883a 	mov	r4,r17
  805024:	10bbffcc 	andi	r2,r2,61439
  805028:	980d883a 	mov	r6,r19
  80502c:	900f883a 	mov	r7,r18
  805030:	8080030d 	sth	r2,12(r16)
  805034:	dfc00417 	ldw	ra,16(sp)
  805038:	dcc00317 	ldw	r19,12(sp)
  80503c:	dc800217 	ldw	r18,8(sp)
  805040:	dc400117 	ldw	r17,4(sp)
  805044:	dc000017 	ldw	r16,0(sp)
  805048:	dec00504 	addi	sp,sp,20
  80504c:	0808b781 	jmpi	808b78 <_write_r>

00805050 <__sread>:
  805050:	defffe04 	addi	sp,sp,-8
  805054:	dc000015 	stw	r16,0(sp)
  805058:	2821883a 	mov	r16,r5
  80505c:	2940038f 	ldh	r5,14(r5)
  805060:	dfc00115 	stw	ra,4(sp)
  805064:	080c0c80 	call	80c0c8 <_read_r>
  805068:	1007883a 	mov	r3,r2
  80506c:	10000816 	blt	r2,zero,805090 <__sread+0x40>
  805070:	80801417 	ldw	r2,80(r16)
  805074:	10c5883a 	add	r2,r2,r3
  805078:	80801415 	stw	r2,80(r16)
  80507c:	1805883a 	mov	r2,r3
  805080:	dfc00117 	ldw	ra,4(sp)
  805084:	dc000017 	ldw	r16,0(sp)
  805088:	dec00204 	addi	sp,sp,8
  80508c:	f800283a 	ret
  805090:	8080030b 	ldhu	r2,12(r16)
  805094:	10bbffcc 	andi	r2,r2,61439
  805098:	8080030d 	sth	r2,12(r16)
  80509c:	1805883a 	mov	r2,r3
  8050a0:	dfc00117 	ldw	ra,4(sp)
  8050a4:	dc000017 	ldw	r16,0(sp)
  8050a8:	dec00204 	addi	sp,sp,8
  8050ac:	f800283a 	ret

008050b0 <strlen>:
  8050b0:	208000cc 	andi	r2,r4,3
  8050b4:	2011883a 	mov	r8,r4
  8050b8:	1000161e 	bne	r2,zero,805114 <strlen+0x64>
  8050bc:	20c00017 	ldw	r3,0(r4)
  8050c0:	017fbff4 	movhi	r5,65279
  8050c4:	297fbfc4 	addi	r5,r5,-257
  8050c8:	01e02074 	movhi	r7,32897
  8050cc:	39e02004 	addi	r7,r7,-32640
  8050d0:	1945883a 	add	r2,r3,r5
  8050d4:	11c4703a 	and	r2,r2,r7
  8050d8:	00c6303a 	nor	r3,zero,r3
  8050dc:	1886703a 	and	r3,r3,r2
  8050e0:	18000c1e 	bne	r3,zero,805114 <strlen+0x64>
  8050e4:	280d883a 	mov	r6,r5
  8050e8:	380b883a 	mov	r5,r7
  8050ec:	21000104 	addi	r4,r4,4
  8050f0:	20800017 	ldw	r2,0(r4)
  8050f4:	1187883a 	add	r3,r2,r6
  8050f8:	1946703a 	and	r3,r3,r5
  8050fc:	0084303a 	nor	r2,zero,r2
  805100:	10c4703a 	and	r2,r2,r3
  805104:	103ff926 	beq	r2,zero,8050ec <strlen+0x3c>
  805108:	20800007 	ldb	r2,0(r4)
  80510c:	10000326 	beq	r2,zero,80511c <strlen+0x6c>
  805110:	21000044 	addi	r4,r4,1
  805114:	20800007 	ldb	r2,0(r4)
  805118:	103ffd1e 	bne	r2,zero,805110 <strlen+0x60>
  80511c:	2205c83a 	sub	r2,r4,r8
  805120:	f800283a 	ret

00805124 <strncmp>:
  805124:	30003926 	beq	r6,zero,80520c <strncmp+0xe8>
  805128:	2144b03a 	or	r2,r4,r5
  80512c:	108000cc 	andi	r2,r2,3
  805130:	028000c4 	movi	r10,3
  805134:	1000241e 	bne	r2,zero,8051c8 <strncmp+0xa4>
  805138:	2011883a 	mov	r8,r4
  80513c:	280f883a 	mov	r7,r5
  805140:	51801f2e 	bgeu	r10,r6,8051c0 <strncmp+0x9c>
  805144:	21000017 	ldw	r4,0(r4)
  805148:	28800017 	ldw	r2,0(r5)
  80514c:	20801c1e 	bne	r4,r2,8051c0 <strncmp+0x9c>
  805150:	31bfff04 	addi	r6,r6,-4
  805154:	30002d26 	beq	r6,zero,80520c <strncmp+0xe8>
  805158:	027fbff4 	movhi	r9,65279
  80515c:	4a7fbfc4 	addi	r9,r9,-257
  805160:	2247883a 	add	r3,r4,r9
  805164:	01602074 	movhi	r5,32897
  805168:	29602004 	addi	r5,r5,-32640
  80516c:	1946703a 	and	r3,r3,r5
  805170:	0104303a 	nor	r2,zero,r4
  805174:	10c4703a 	and	r2,r2,r3
  805178:	1000241e 	bne	r2,zero,80520c <strncmp+0xe8>
  80517c:	5017883a 	mov	r11,r10
  805180:	4815883a 	mov	r10,r9
  805184:	2813883a 	mov	r9,r5
  805188:	00000a06 	br	8051b4 <strncmp+0x90>
  80518c:	41000017 	ldw	r4,0(r8)
  805190:	39400017 	ldw	r5,0(r7)
  805194:	2285883a 	add	r2,r4,r10
  805198:	1244703a 	and	r2,r2,r9
  80519c:	0106303a 	nor	r3,zero,r4
  8051a0:	1886703a 	and	r3,r3,r2
  8051a4:	2140061e 	bne	r4,r5,8051c0 <strncmp+0x9c>
  8051a8:	31bfff04 	addi	r6,r6,-4
  8051ac:	30001726 	beq	r6,zero,80520c <strncmp+0xe8>
  8051b0:	1800161e 	bne	r3,zero,80520c <strncmp+0xe8>
  8051b4:	42000104 	addi	r8,r8,4
  8051b8:	39c00104 	addi	r7,r7,4
  8051bc:	59bff336 	bltu	r11,r6,80518c <strncmp+0x68>
  8051c0:	4009883a 	mov	r4,r8
  8051c4:	380b883a 	mov	r5,r7
  8051c8:	31bfffc4 	addi	r6,r6,-1
  8051cc:	01ffffc4 	movi	r7,-1
  8051d0:	31c00a1e 	bne	r6,r7,8051fc <strncmp+0xd8>
  8051d4:	20c00003 	ldbu	r3,0(r4)
  8051d8:	28800003 	ldbu	r2,0(r5)
  8051dc:	1885c83a 	sub	r2,r3,r2
  8051e0:	f800283a 	ret
  8051e4:	30000926 	beq	r6,zero,80520c <strncmp+0xe8>
  8051e8:	18000826 	beq	r3,zero,80520c <strncmp+0xe8>
  8051ec:	31bfffc4 	addi	r6,r6,-1
  8051f0:	21000044 	addi	r4,r4,1
  8051f4:	29400044 	addi	r5,r5,1
  8051f8:	31fff626 	beq	r6,r7,8051d4 <strncmp+0xb0>
  8051fc:	20c00007 	ldb	r3,0(r4)
  805200:	28800007 	ldb	r2,0(r5)
  805204:	18bff726 	beq	r3,r2,8051e4 <strncmp+0xc0>
  805208:	003ff206 	br	8051d4 <strncmp+0xb0>
  80520c:	0005883a 	mov	r2,zero
  805210:	f800283a 	ret

00805214 <_times_r>:
  805214:	2809883a 	mov	r4,r5
  805218:	08128041 	jmpi	812804 <times>

0080521c <__submore>:
  80521c:	defffa04 	addi	sp,sp,-24
  805220:	28c00c17 	ldw	r3,48(r5)
  805224:	dc800215 	stw	r18,8(sp)
  805228:	2825883a 	mov	r18,r5
  80522c:	dc000015 	stw	r16,0(sp)
  805230:	90801004 	addi	r2,r18,64
  805234:	04010004 	movi	r16,1024
  805238:	dfc00515 	stw	ra,20(sp)
  80523c:	dd000415 	stw	r20,16(sp)
  805240:	dcc00315 	stw	r19,12(sp)
  805244:	dc400115 	stw	r17,4(sp)
  805248:	800b883a 	mov	r5,r16
  80524c:	18801b26 	beq	r3,r2,8052bc <__submore+0xa0>
  805250:	94400d17 	ldw	r17,52(r18)
  805254:	180b883a 	mov	r5,r3
  805258:	8c69883a 	add	r20,r17,r17
  80525c:	a00d883a 	mov	r6,r20
  805260:	080c1400 	call	80c140 <_realloc_r>
  805264:	1467883a 	add	r19,r2,r17
  805268:	1021883a 	mov	r16,r2
  80526c:	880d883a 	mov	r6,r17
  805270:	9809883a 	mov	r4,r19
  805274:	100b883a 	mov	r5,r2
  805278:	10000e26 	beq	r2,zero,8052b4 <__submore+0x98>
  80527c:	08048c40 	call	8048c4 <memcpy>
  805280:	000d883a 	mov	r6,zero
  805284:	95000d15 	stw	r20,52(r18)
  805288:	94c00015 	stw	r19,0(r18)
  80528c:	94000c15 	stw	r16,48(r18)
  805290:	3005883a 	mov	r2,r6
  805294:	dfc00517 	ldw	ra,20(sp)
  805298:	dd000417 	ldw	r20,16(sp)
  80529c:	dcc00317 	ldw	r19,12(sp)
  8052a0:	dc800217 	ldw	r18,8(sp)
  8052a4:	dc400117 	ldw	r17,4(sp)
  8052a8:	dc000017 	ldw	r16,0(sp)
  8052ac:	dec00604 	addi	sp,sp,24
  8052b0:	f800283a 	ret
  8052b4:	01bfffc4 	movi	r6,-1
  8052b8:	003ff506 	br	805290 <__submore+0x74>
  8052bc:	08040a00 	call	8040a0 <_malloc_r>
  8052c0:	1009883a 	mov	r4,r2
  8052c4:	1140ff44 	addi	r5,r2,1021
  8052c8:	000d883a 	mov	r6,zero
  8052cc:	103ff926 	beq	r2,zero,8052b4 <__submore+0x98>
  8052d0:	90801083 	ldbu	r2,66(r18)
  8052d4:	94000d15 	stw	r16,52(r18)
  8052d8:	91000c15 	stw	r4,48(r18)
  8052dc:	28800085 	stb	r2,2(r5)
  8052e0:	90c01043 	ldbu	r3,65(r18)
  8052e4:	28c00045 	stb	r3,1(r5)
  8052e8:	90801003 	ldbu	r2,64(r18)
  8052ec:	2080ff45 	stb	r2,1021(r4)
  8052f0:	91400015 	stw	r5,0(r18)
  8052f4:	003fe606 	br	805290 <__submore+0x74>

008052f8 <_ungetc_r>:
  8052f8:	defffc04 	addi	sp,sp,-16
  8052fc:	00bfffc4 	movi	r2,-1
  805300:	dc400215 	stw	r17,8(sp)
  805304:	dc000115 	stw	r16,4(sp)
  805308:	dfc00315 	stw	ra,12(sp)
  80530c:	2821883a 	mov	r16,r5
  805310:	2023883a 	mov	r17,r4
  805314:	28801826 	beq	r5,r2,805378 <_ungetc_r+0x80>
  805318:	20000226 	beq	r4,zero,805324 <_ungetc_r+0x2c>
  80531c:	20800e17 	ldw	r2,56(r4)
  805320:	10001b26 	beq	r2,zero,805390 <_ungetc_r+0x98>
  805324:	3100030b 	ldhu	r4,12(r6)
  805328:	00bff7c4 	movi	r2,-33
  80532c:	2084703a 	and	r2,r4,r2
  805330:	117fffcc 	andi	r5,r2,65535
  805334:	28c0010c 	andi	r3,r5,4
  805338:	1009883a 	mov	r4,r2
  80533c:	3080030d 	sth	r2,12(r6)
  805340:	18003526 	beq	r3,zero,805418 <_ungetc_r+0x120>
  805344:	30800c17 	ldw	r2,48(r6)
  805348:	84003fcc 	andi	r16,r16,255
  80534c:	10001426 	beq	r2,zero,8053a0 <_ungetc_r+0xa8>
  805350:	30c00117 	ldw	r3,4(r6)
  805354:	30800d17 	ldw	r2,52(r6)
  805358:	1880380e 	bge	r3,r2,80543c <_ungetc_r+0x144>
  80535c:	30c00017 	ldw	r3,0(r6)
  805360:	19ffffc4 	addi	r7,r3,-1
  805364:	31c00015 	stw	r7,0(r6)
  805368:	1c3fffc5 	stb	r16,-1(r3)
  80536c:	30800117 	ldw	r2,4(r6)
  805370:	10800044 	addi	r2,r2,1
  805374:	30800115 	stw	r2,4(r6)
  805378:	8005883a 	mov	r2,r16
  80537c:	dfc00317 	ldw	ra,12(sp)
  805380:	dc400217 	ldw	r17,8(sp)
  805384:	dc000117 	ldw	r16,4(sp)
  805388:	dec00404 	addi	sp,sp,16
  80538c:	f800283a 	ret
  805390:	d9800015 	stw	r6,0(sp)
  805394:	0802cb00 	call	802cb0 <__sinit>
  805398:	d9800017 	ldw	r6,0(sp)
  80539c:	003fe106 	br	805324 <_ungetc_r+0x2c>
  8053a0:	30800417 	ldw	r2,16(r6)
  8053a4:	10002326 	beq	r2,zero,805434 <_ungetc_r+0x13c>
  8053a8:	31c00017 	ldw	r7,0(r6)
  8053ac:	11c0022e 	bgeu	r2,r7,8053b8 <_ungetc_r+0xc0>
  8053b0:	38bfffc3 	ldbu	r2,-1(r7)
  8053b4:	80801226 	beq	r16,r2,805400 <_ungetc_r+0x108>
  8053b8:	30c00117 	ldw	r3,4(r6)
  8053bc:	00800044 	movi	r2,1
  8053c0:	30800115 	stw	r2,4(r6)
  8053c4:	008000c4 	movi	r2,3
  8053c8:	31001004 	addi	r4,r6,64
  8053cc:	31401084 	addi	r5,r6,66
  8053d0:	30800d15 	stw	r2,52(r6)
  8053d4:	8005883a 	mov	r2,r16
  8053d8:	30c00f15 	stw	r3,60(r6)
  8053dc:	31c00e15 	stw	r7,56(r6)
  8053e0:	31000c15 	stw	r4,48(r6)
  8053e4:	31400015 	stw	r5,0(r6)
  8053e8:	34001085 	stb	r16,66(r6)
  8053ec:	dfc00317 	ldw	ra,12(sp)
  8053f0:	dc400217 	ldw	r17,8(sp)
  8053f4:	dc000117 	ldw	r16,4(sp)
  8053f8:	dec00404 	addi	sp,sp,16
  8053fc:	f800283a 	ret
  805400:	30800117 	ldw	r2,4(r6)
  805404:	39ffffc4 	addi	r7,r7,-1
  805408:	31c00015 	stw	r7,0(r6)
  80540c:	10800044 	addi	r2,r2,1
  805410:	30800115 	stw	r2,4(r6)
  805414:	003fd806 	br	805378 <_ungetc_r+0x80>
  805418:	2880040c 	andi	r2,r5,16
  80541c:	10000d26 	beq	r2,zero,805454 <_ungetc_r+0x15c>
  805420:	2880020c 	andi	r2,r5,8
  805424:	10000d1e 	bne	r2,zero,80545c <_ungetc_r+0x164>
  805428:	20800114 	ori	r2,r4,4
  80542c:	3080030d 	sth	r2,12(r6)
  805430:	003fc406 	br	805344 <_ungetc_r+0x4c>
  805434:	31c00017 	ldw	r7,0(r6)
  805438:	003fdf06 	br	8053b8 <_ungetc_r+0xc0>
  80543c:	300b883a 	mov	r5,r6
  805440:	8809883a 	mov	r4,r17
  805444:	d9800015 	stw	r6,0(sp)
  805448:	080521c0 	call	80521c <__submore>
  80544c:	d9800017 	ldw	r6,0(sp)
  805450:	103fc226 	beq	r2,zero,80535c <_ungetc_r+0x64>
  805454:	043fffc4 	movi	r16,-1
  805458:	003fc706 	br	805378 <_ungetc_r+0x80>
  80545c:	300b883a 	mov	r5,r6
  805460:	8809883a 	mov	r4,r17
  805464:	d9800015 	stw	r6,0(sp)
  805468:	08027840 	call	802784 <_fflush_r>
  80546c:	d9800017 	ldw	r6,0(sp)
  805470:	103ff81e 	bne	r2,zero,805454 <_ungetc_r+0x15c>
  805474:	3100030b 	ldhu	r4,12(r6)
  805478:	00bffdc4 	movi	r2,-9
  80547c:	30000215 	stw	zero,8(r6)
  805480:	2084703a 	and	r2,r4,r2
  805484:	1009883a 	mov	r4,r2
  805488:	3080030d 	sth	r2,12(r6)
  80548c:	30000615 	stw	zero,24(r6)
  805490:	003fe506 	br	805428 <_ungetc_r+0x130>

00805494 <ungetc>:
  805494:	01802074 	movhi	r6,129
  805498:	319b3004 	addi	r6,r6,27840
  80549c:	2007883a 	mov	r3,r4
  8054a0:	31000017 	ldw	r4,0(r6)
  8054a4:	280d883a 	mov	r6,r5
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	08052f81 	jmpi	8052f8 <_ungetc_r>

008054b0 <__sprint_r>:
  8054b0:	30800217 	ldw	r2,8(r6)
  8054b4:	defffe04 	addi	sp,sp,-8
  8054b8:	dc000015 	stw	r16,0(sp)
  8054bc:	dfc00115 	stw	ra,4(sp)
  8054c0:	3021883a 	mov	r16,r6
  8054c4:	0007883a 	mov	r3,zero
  8054c8:	1000061e 	bne	r2,zero,8054e4 <__sprint_r+0x34>
  8054cc:	1805883a 	mov	r2,r3
  8054d0:	30000115 	stw	zero,4(r6)
  8054d4:	dfc00117 	ldw	ra,4(sp)
  8054d8:	dc000017 	ldw	r16,0(sp)
  8054dc:	dec00204 	addi	sp,sp,8
  8054e0:	f800283a 	ret
  8054e4:	080a7e80 	call	80a7e8 <__sfvwrite_r>
  8054e8:	1007883a 	mov	r3,r2
  8054ec:	1805883a 	mov	r2,r3
  8054f0:	80000115 	stw	zero,4(r16)
  8054f4:	80000215 	stw	zero,8(r16)
  8054f8:	dfc00117 	ldw	ra,4(sp)
  8054fc:	dc000017 	ldw	r16,0(sp)
  805500:	dec00204 	addi	sp,sp,8
  805504:	f800283a 	ret

00805508 <___vfprintf_internal_r>:
  805508:	defea404 	addi	sp,sp,-1392
  80550c:	dd815815 	stw	r22,1376(sp)
  805510:	dc015215 	stw	r16,1352(sp)
  805514:	d9c15115 	stw	r7,1348(sp)
  805518:	dfc15b15 	stw	ra,1388(sp)
  80551c:	df015a15 	stw	fp,1384(sp)
  805520:	ddc15915 	stw	r23,1380(sp)
  805524:	dd415715 	stw	r21,1372(sp)
  805528:	dd015615 	stw	r20,1368(sp)
  80552c:	dcc15515 	stw	r19,1364(sp)
  805530:	dc815415 	stw	r18,1360(sp)
  805534:	dc415315 	stw	r17,1356(sp)
  805538:	282d883a 	mov	r22,r5
  80553c:	3021883a 	mov	r16,r6
  805540:	d9014f15 	stw	r4,1340(sp)
  805544:	080ad280 	call	80ad28 <_localeconv_r>
  805548:	10800017 	ldw	r2,0(r2)
  80554c:	d9c15117 	ldw	r7,1348(sp)
  805550:	d8814915 	stw	r2,1316(sp)
  805554:	d8814f17 	ldw	r2,1340(sp)
  805558:	10000226 	beq	r2,zero,805564 <___vfprintf_internal_r+0x5c>
  80555c:	10800e17 	ldw	r2,56(r2)
  805560:	10020d26 	beq	r2,zero,805d98 <___vfprintf_internal_r+0x890>
  805564:	b080030b 	ldhu	r2,12(r22)
  805568:	1080020c 	andi	r2,r2,8
  80556c:	10020e26 	beq	r2,zero,805da8 <___vfprintf_internal_r+0x8a0>
  805570:	b0800417 	ldw	r2,16(r22)
  805574:	10020c26 	beq	r2,zero,805da8 <___vfprintf_internal_r+0x8a0>
  805578:	b200030b 	ldhu	r8,12(r22)
  80557c:	00800284 	movi	r2,10
  805580:	40c0068c 	andi	r3,r8,26
  805584:	18802f1e 	bne	r3,r2,805644 <___vfprintf_internal_r+0x13c>
  805588:	b080038f 	ldh	r2,14(r22)
  80558c:	10002d16 	blt	r2,zero,805644 <___vfprintf_internal_r+0x13c>
  805590:	b240038b 	ldhu	r9,14(r22)
  805594:	b2800717 	ldw	r10,28(r22)
  805598:	b2c00917 	ldw	r11,36(r22)
  80559c:	d9014f17 	ldw	r4,1340(sp)
  8055a0:	dc402904 	addi	r17,sp,164
  8055a4:	d8804004 	addi	r2,sp,256
  8055a8:	00c10004 	movi	r3,1024
  8055ac:	423fff4c 	andi	r8,r8,65533
  8055b0:	800d883a 	mov	r6,r16
  8055b4:	880b883a 	mov	r5,r17
  8055b8:	da002c0d 	sth	r8,176(sp)
  8055bc:	da402c8d 	sth	r9,178(sp)
  8055c0:	da803015 	stw	r10,192(sp)
  8055c4:	dac03215 	stw	r11,200(sp)
  8055c8:	d8802d15 	stw	r2,180(sp)
  8055cc:	d8c02e15 	stw	r3,184(sp)
  8055d0:	d8802915 	stw	r2,164(sp)
  8055d4:	d8c02b15 	stw	r3,172(sp)
  8055d8:	d8002f15 	stw	zero,188(sp)
  8055dc:	08055080 	call	805508 <___vfprintf_internal_r>
  8055e0:	d8814b15 	stw	r2,1324(sp)
  8055e4:	10000416 	blt	r2,zero,8055f8 <___vfprintf_internal_r+0xf0>
  8055e8:	d9014f17 	ldw	r4,1340(sp)
  8055ec:	880b883a 	mov	r5,r17
  8055f0:	08027840 	call	802784 <_fflush_r>
  8055f4:	1002321e 	bne	r2,zero,805ec0 <___vfprintf_internal_r+0x9b8>
  8055f8:	d8802c0b 	ldhu	r2,176(sp)
  8055fc:	1080100c 	andi	r2,r2,64
  805600:	10000326 	beq	r2,zero,805610 <___vfprintf_internal_r+0x108>
  805604:	b080030b 	ldhu	r2,12(r22)
  805608:	10801014 	ori	r2,r2,64
  80560c:	b080030d 	sth	r2,12(r22)
  805610:	d8814b17 	ldw	r2,1324(sp)
  805614:	dfc15b17 	ldw	ra,1388(sp)
  805618:	df015a17 	ldw	fp,1384(sp)
  80561c:	ddc15917 	ldw	r23,1380(sp)
  805620:	dd815817 	ldw	r22,1376(sp)
  805624:	dd415717 	ldw	r21,1372(sp)
  805628:	dd015617 	ldw	r20,1368(sp)
  80562c:	dcc15517 	ldw	r19,1364(sp)
  805630:	dc815417 	ldw	r18,1360(sp)
  805634:	dc415317 	ldw	r17,1356(sp)
  805638:	dc015217 	ldw	r16,1352(sp)
  80563c:	dec15c04 	addi	sp,sp,1392
  805640:	f800283a 	ret
  805644:	0005883a 	mov	r2,zero
  805648:	0007883a 	mov	r3,zero
  80564c:	dd401904 	addi	r21,sp,100
  805650:	d8814215 	stw	r2,1288(sp)
  805654:	802f883a 	mov	r23,r16
  805658:	d8c14315 	stw	r3,1292(sp)
  80565c:	d8014b15 	stw	zero,1324(sp)
  805660:	d8014815 	stw	zero,1312(sp)
  805664:	d8014415 	stw	zero,1296(sp)
  805668:	d8014715 	stw	zero,1308(sp)
  80566c:	dd400c15 	stw	r21,48(sp)
  805670:	d8000e15 	stw	zero,56(sp)
  805674:	d8000d15 	stw	zero,52(sp)
  805678:	b8800007 	ldb	r2,0(r23)
  80567c:	10001926 	beq	r2,zero,8056e4 <___vfprintf_internal_r+0x1dc>
  805680:	00c00944 	movi	r3,37
  805684:	10c01726 	beq	r2,r3,8056e4 <___vfprintf_internal_r+0x1dc>
  805688:	b821883a 	mov	r16,r23
  80568c:	00000106 	br	805694 <___vfprintf_internal_r+0x18c>
  805690:	10c00326 	beq	r2,r3,8056a0 <___vfprintf_internal_r+0x198>
  805694:	84000044 	addi	r16,r16,1
  805698:	80800007 	ldb	r2,0(r16)
  80569c:	103ffc1e 	bne	r2,zero,805690 <___vfprintf_internal_r+0x188>
  8056a0:	85e7c83a 	sub	r19,r16,r23
  8056a4:	98000e26 	beq	r19,zero,8056e0 <___vfprintf_internal_r+0x1d8>
  8056a8:	dc800e17 	ldw	r18,56(sp)
  8056ac:	dc400d17 	ldw	r17,52(sp)
  8056b0:	008001c4 	movi	r2,7
  8056b4:	94e5883a 	add	r18,r18,r19
  8056b8:	8c400044 	addi	r17,r17,1
  8056bc:	adc00015 	stw	r23,0(r21)
  8056c0:	dc800e15 	stw	r18,56(sp)
  8056c4:	acc00115 	stw	r19,4(r21)
  8056c8:	dc400d15 	stw	r17,52(sp)
  8056cc:	14428b16 	blt	r2,r17,8060fc <___vfprintf_internal_r+0xbf4>
  8056d0:	ad400204 	addi	r21,r21,8
  8056d4:	d9014b17 	ldw	r4,1324(sp)
  8056d8:	24c9883a 	add	r4,r4,r19
  8056dc:	d9014b15 	stw	r4,1324(sp)
  8056e0:	802f883a 	mov	r23,r16
  8056e4:	b8800007 	ldb	r2,0(r23)
  8056e8:	10013c26 	beq	r2,zero,805bdc <___vfprintf_internal_r+0x6d4>
  8056ec:	bdc00044 	addi	r23,r23,1
  8056f0:	d8000405 	stb	zero,16(sp)
  8056f4:	b8c00007 	ldb	r3,0(r23)
  8056f8:	04ffffc4 	movi	r19,-1
  8056fc:	d8014c15 	stw	zero,1328(sp)
  805700:	d8014a15 	stw	zero,1320(sp)
  805704:	d8c14d15 	stw	r3,1332(sp)
  805708:	bdc00044 	addi	r23,r23,1
  80570c:	d9414d17 	ldw	r5,1332(sp)
  805710:	00801604 	movi	r2,88
  805714:	28fff804 	addi	r3,r5,-32
  805718:	10c06036 	bltu	r2,r3,80589c <___vfprintf_internal_r+0x394>
  80571c:	18c5883a 	add	r2,r3,r3
  805720:	1085883a 	add	r2,r2,r2
  805724:	00c02034 	movhi	r3,128
  805728:	18d5ce04 	addi	r3,r3,22328
  80572c:	10c5883a 	add	r2,r2,r3
  805730:	11000017 	ldw	r4,0(r2)
  805734:	2000683a 	jmp	r4
  805738:	008066ac 	andhi	r2,zero,410
  80573c:	0080589c 	xori	r2,zero,354
  805740:	0080589c 	xori	r2,zero,354
  805744:	00806698 	cmpnei	r2,zero,410
  805748:	0080589c 	xori	r2,zero,354
  80574c:	0080589c 	xori	r2,zero,354
  805750:	0080589c 	xori	r2,zero,354
  805754:	0080589c 	xori	r2,zero,354
  805758:	0080589c 	xori	r2,zero,354
  80575c:	0080589c 	xori	r2,zero,354
  805760:	00806478 	rdprs	r2,zero,401
  805764:	00806688 	cmpgei	r2,zero,410
  805768:	0080589c 	xori	r2,zero,354
  80576c:	00806490 	cmplti	r2,zero,402
  805770:	00806730 	cmpltui	r2,zero,412
  805774:	0080589c 	xori	r2,zero,354
  805778:	0080671c 	xori	r2,zero,412
  80577c:	008066d8 	cmpnei	r2,zero,411
  805780:	008066d8 	cmpnei	r2,zero,411
  805784:	008066d8 	cmpnei	r2,zero,411
  805788:	008066d8 	cmpnei	r2,zero,411
  80578c:	008066d8 	cmpnei	r2,zero,411
  805790:	008066d8 	cmpnei	r2,zero,411
  805794:	008066d8 	cmpnei	r2,zero,411
  805798:	008066d8 	cmpnei	r2,zero,411
  80579c:	008066d8 	cmpnei	r2,zero,411
  8057a0:	0080589c 	xori	r2,zero,354
  8057a4:	0080589c 	xori	r2,zero,354
  8057a8:	0080589c 	xori	r2,zero,354
  8057ac:	0080589c 	xori	r2,zero,354
  8057b0:	0080589c 	xori	r2,zero,354
  8057b4:	0080589c 	xori	r2,zero,354
  8057b8:	0080589c 	xori	r2,zero,354
  8057bc:	0080589c 	xori	r2,zero,354
  8057c0:	0080589c 	xori	r2,zero,354
  8057c4:	0080589c 	xori	r2,zero,354
  8057c8:	00805ef4 	movhi	r2,379
  8057cc:	00806560 	cmpeqi	r2,zero,405
  8057d0:	0080589c 	xori	r2,zero,354
  8057d4:	00806560 	cmpeqi	r2,zero,405
  8057d8:	0080589c 	xori	r2,zero,354
  8057dc:	0080589c 	xori	r2,zero,354
  8057e0:	0080589c 	xori	r2,zero,354
  8057e4:	0080589c 	xori	r2,zero,354
  8057e8:	008066c4 	movi	r2,411
  8057ec:	0080589c 	xori	r2,zero,354
  8057f0:	0080589c 	xori	r2,zero,354
  8057f4:	00805fa8 	cmpgeui	r2,zero,382
  8057f8:	0080589c 	xori	r2,zero,354
  8057fc:	0080589c 	xori	r2,zero,354
  805800:	0080589c 	xori	r2,zero,354
  805804:	0080589c 	xori	r2,zero,354
  805808:	0080589c 	xori	r2,zero,354
  80580c:	00805ff4 	movhi	r2,383
  805810:	0080589c 	xori	r2,zero,354
  805814:	0080589c 	xori	r2,zero,354
  805818:	00806614 	movui	r2,408
  80581c:	0080589c 	xori	r2,zero,354
  805820:	0080589c 	xori	r2,zero,354
  805824:	0080589c 	xori	r2,zero,354
  805828:	0080589c 	xori	r2,zero,354
  80582c:	0080589c 	xori	r2,zero,354
  805830:	0080589c 	xori	r2,zero,354
  805834:	0080589c 	xori	r2,zero,354
  805838:	0080589c 	xori	r2,zero,354
  80583c:	0080589c 	xori	r2,zero,354
  805840:	0080589c 	xori	r2,zero,354
  805844:	008065e8 	cmpgeui	r2,zero,407
  805848:	00805f00 	call	805f0 <__alt_mem_sdram-0x77fa10>
  80584c:	00806560 	cmpeqi	r2,zero,405
  805850:	00806560 	cmpeqi	r2,zero,405
  805854:	00806560 	cmpeqi	r2,zero,405
  805858:	0080654c 	andi	r2,zero,405
  80585c:	00805f00 	call	805f0 <__alt_mem_sdram-0x77fa10>
  805860:	0080589c 	xori	r2,zero,354
  805864:	0080589c 	xori	r2,zero,354
  805868:	008064d4 	movui	r2,403
  80586c:	0080589c 	xori	r2,zero,354
  805870:	008064a4 	muli	r2,zero,402
  805874:	00805fb4 	movhi	r2,382
  805878:	00806504 	movi	r2,404
  80587c:	008064f0 	cmpltui	r2,zero,403
  805880:	0080589c 	xori	r2,zero,354
  805884:	00806798 	cmpnei	r2,zero,414
  805888:	0080589c 	xori	r2,zero,354
  80588c:	00806000 	call	80600 <__alt_mem_sdram-0x77fa00>
  805890:	0080589c 	xori	r2,zero,354
  805894:	0080589c 	xori	r2,zero,354
  805898:	00806678 	rdprs	r2,zero,409
  80589c:	d9014d17 	ldw	r4,1332(sp)
  8058a0:	2000ce26 	beq	r4,zero,805bdc <___vfprintf_internal_r+0x6d4>
  8058a4:	01400044 	movi	r5,1
  8058a8:	d9800f04 	addi	r6,sp,60
  8058ac:	d9c14015 	stw	r7,1280(sp)
  8058b0:	d9414515 	stw	r5,1300(sp)
  8058b4:	d9814115 	stw	r6,1284(sp)
  8058b8:	280f883a 	mov	r7,r5
  8058bc:	d9000f05 	stb	r4,60(sp)
  8058c0:	d8000405 	stb	zero,16(sp)
  8058c4:	d8014615 	stw	zero,1304(sp)
  8058c8:	d8c14c17 	ldw	r3,1328(sp)
  8058cc:	1880008c 	andi	r2,r3,2
  8058d0:	1005003a 	cmpeq	r2,r2,zero
  8058d4:	d8815015 	stw	r2,1344(sp)
  8058d8:	1000031e 	bne	r2,zero,8058e8 <___vfprintf_internal_r+0x3e0>
  8058dc:	d9014517 	ldw	r4,1300(sp)
  8058e0:	21000084 	addi	r4,r4,2
  8058e4:	d9014515 	stw	r4,1300(sp)
  8058e8:	d9414c17 	ldw	r5,1328(sp)
  8058ec:	2940210c 	andi	r5,r5,132
  8058f0:	d9414e15 	stw	r5,1336(sp)
  8058f4:	28002d1e 	bne	r5,zero,8059ac <___vfprintf_internal_r+0x4a4>
  8058f8:	d9814a17 	ldw	r6,1320(sp)
  8058fc:	d8814517 	ldw	r2,1300(sp)
  805900:	30a1c83a 	sub	r16,r6,r2
  805904:	0400290e 	bge	zero,r16,8059ac <___vfprintf_internal_r+0x4a4>
  805908:	00800404 	movi	r2,16
  80590c:	14045e0e 	bge	r2,r16,806a88 <___vfprintf_internal_r+0x1580>
  805910:	dc800e17 	ldw	r18,56(sp)
  805914:	dc400d17 	ldw	r17,52(sp)
  805918:	1027883a 	mov	r19,r2
  80591c:	07002074 	movhi	fp,129
  805920:	e713fc84 	addi	fp,fp,20466
  805924:	050001c4 	movi	r20,7
  805928:	00000306 	br	805938 <___vfprintf_internal_r+0x430>
  80592c:	843ffc04 	addi	r16,r16,-16
  805930:	ad400204 	addi	r21,r21,8
  805934:	9c00130e 	bge	r19,r16,805984 <___vfprintf_internal_r+0x47c>
  805938:	94800404 	addi	r18,r18,16
  80593c:	8c400044 	addi	r17,r17,1
  805940:	af000015 	stw	fp,0(r21)
  805944:	acc00115 	stw	r19,4(r21)
  805948:	dc800e15 	stw	r18,56(sp)
  80594c:	dc400d15 	stw	r17,52(sp)
  805950:	a47ff60e 	bge	r20,r17,80592c <___vfprintf_internal_r+0x424>
  805954:	d9014f17 	ldw	r4,1340(sp)
  805958:	b00b883a 	mov	r5,r22
  80595c:	d9800c04 	addi	r6,sp,48
  805960:	d9c15115 	stw	r7,1348(sp)
  805964:	08054b00 	call	8054b0 <__sprint_r>
  805968:	d9c15117 	ldw	r7,1348(sp)
  80596c:	10009e1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805970:	843ffc04 	addi	r16,r16,-16
  805974:	dc800e17 	ldw	r18,56(sp)
  805978:	dc400d17 	ldw	r17,52(sp)
  80597c:	dd401904 	addi	r21,sp,100
  805980:	9c3fed16 	blt	r19,r16,805938 <___vfprintf_internal_r+0x430>
  805984:	9425883a 	add	r18,r18,r16
  805988:	8c400044 	addi	r17,r17,1
  80598c:	008001c4 	movi	r2,7
  805990:	af000015 	stw	fp,0(r21)
  805994:	ac000115 	stw	r16,4(r21)
  805998:	dc800e15 	stw	r18,56(sp)
  80599c:	dc400d15 	stw	r17,52(sp)
  8059a0:	1441f516 	blt	r2,r17,806178 <___vfprintf_internal_r+0xc70>
  8059a4:	ad400204 	addi	r21,r21,8
  8059a8:	00000206 	br	8059b4 <___vfprintf_internal_r+0x4ac>
  8059ac:	dc800e17 	ldw	r18,56(sp)
  8059b0:	dc400d17 	ldw	r17,52(sp)
  8059b4:	d8800407 	ldb	r2,16(sp)
  8059b8:	10000b26 	beq	r2,zero,8059e8 <___vfprintf_internal_r+0x4e0>
  8059bc:	00800044 	movi	r2,1
  8059c0:	94800044 	addi	r18,r18,1
  8059c4:	8c400044 	addi	r17,r17,1
  8059c8:	a8800115 	stw	r2,4(r21)
  8059cc:	d8c00404 	addi	r3,sp,16
  8059d0:	008001c4 	movi	r2,7
  8059d4:	a8c00015 	stw	r3,0(r21)
  8059d8:	dc800e15 	stw	r18,56(sp)
  8059dc:	dc400d15 	stw	r17,52(sp)
  8059e0:	1441da16 	blt	r2,r17,80614c <___vfprintf_internal_r+0xc44>
  8059e4:	ad400204 	addi	r21,r21,8
  8059e8:	d9015017 	ldw	r4,1344(sp)
  8059ec:	20000b1e 	bne	r4,zero,805a1c <___vfprintf_internal_r+0x514>
  8059f0:	d8800444 	addi	r2,sp,17
  8059f4:	94800084 	addi	r18,r18,2
  8059f8:	8c400044 	addi	r17,r17,1
  8059fc:	a8800015 	stw	r2,0(r21)
  805a00:	00c00084 	movi	r3,2
  805a04:	008001c4 	movi	r2,7
  805a08:	a8c00115 	stw	r3,4(r21)
  805a0c:	dc800e15 	stw	r18,56(sp)
  805a10:	dc400d15 	stw	r17,52(sp)
  805a14:	1441c216 	blt	r2,r17,806120 <___vfprintf_internal_r+0xc18>
  805a18:	ad400204 	addi	r21,r21,8
  805a1c:	d9414e17 	ldw	r5,1336(sp)
  805a20:	00802004 	movi	r2,128
  805a24:	2880b126 	beq	r5,r2,805cec <___vfprintf_internal_r+0x7e4>
  805a28:	d8c14617 	ldw	r3,1304(sp)
  805a2c:	19e1c83a 	sub	r16,r3,r7
  805a30:	0400260e 	bge	zero,r16,805acc <___vfprintf_internal_r+0x5c4>
  805a34:	00800404 	movi	r2,16
  805a38:	1403cf0e 	bge	r2,r16,806978 <___vfprintf_internal_r+0x1470>
  805a3c:	1027883a 	mov	r19,r2
  805a40:	07002074 	movhi	fp,129
  805a44:	e713f884 	addi	fp,fp,20450
  805a48:	050001c4 	movi	r20,7
  805a4c:	00000306 	br	805a5c <___vfprintf_internal_r+0x554>
  805a50:	843ffc04 	addi	r16,r16,-16
  805a54:	ad400204 	addi	r21,r21,8
  805a58:	9c00130e 	bge	r19,r16,805aa8 <___vfprintf_internal_r+0x5a0>
  805a5c:	94800404 	addi	r18,r18,16
  805a60:	8c400044 	addi	r17,r17,1
  805a64:	af000015 	stw	fp,0(r21)
  805a68:	acc00115 	stw	r19,4(r21)
  805a6c:	dc800e15 	stw	r18,56(sp)
  805a70:	dc400d15 	stw	r17,52(sp)
  805a74:	a47ff60e 	bge	r20,r17,805a50 <___vfprintf_internal_r+0x548>
  805a78:	d9014f17 	ldw	r4,1340(sp)
  805a7c:	b00b883a 	mov	r5,r22
  805a80:	d9800c04 	addi	r6,sp,48
  805a84:	d9c15115 	stw	r7,1348(sp)
  805a88:	08054b00 	call	8054b0 <__sprint_r>
  805a8c:	d9c15117 	ldw	r7,1348(sp)
  805a90:	1000551e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805a94:	843ffc04 	addi	r16,r16,-16
  805a98:	dc800e17 	ldw	r18,56(sp)
  805a9c:	dc400d17 	ldw	r17,52(sp)
  805aa0:	dd401904 	addi	r21,sp,100
  805aa4:	9c3fed16 	blt	r19,r16,805a5c <___vfprintf_internal_r+0x554>
  805aa8:	9425883a 	add	r18,r18,r16
  805aac:	8c400044 	addi	r17,r17,1
  805ab0:	008001c4 	movi	r2,7
  805ab4:	af000015 	stw	fp,0(r21)
  805ab8:	ac000115 	stw	r16,4(r21)
  805abc:	dc800e15 	stw	r18,56(sp)
  805ac0:	dc400d15 	stw	r17,52(sp)
  805ac4:	14418216 	blt	r2,r17,8060d0 <___vfprintf_internal_r+0xbc8>
  805ac8:	ad400204 	addi	r21,r21,8
  805acc:	d9014c17 	ldw	r4,1328(sp)
  805ad0:	2080400c 	andi	r2,r4,256
  805ad4:	10004a1e 	bne	r2,zero,805c00 <___vfprintf_internal_r+0x6f8>
  805ad8:	d9414117 	ldw	r5,1284(sp)
  805adc:	91e5883a 	add	r18,r18,r7
  805ae0:	8c400044 	addi	r17,r17,1
  805ae4:	008001c4 	movi	r2,7
  805ae8:	a9400015 	stw	r5,0(r21)
  805aec:	a9c00115 	stw	r7,4(r21)
  805af0:	dc800e15 	stw	r18,56(sp)
  805af4:	dc400d15 	stw	r17,52(sp)
  805af8:	14416716 	blt	r2,r17,806098 <___vfprintf_internal_r+0xb90>
  805afc:	a8c00204 	addi	r3,r21,8
  805b00:	d9814c17 	ldw	r6,1328(sp)
  805b04:	3080010c 	andi	r2,r6,4
  805b08:	10002826 	beq	r2,zero,805bac <___vfprintf_internal_r+0x6a4>
  805b0c:	d8814a17 	ldw	r2,1320(sp)
  805b10:	d9014517 	ldw	r4,1300(sp)
  805b14:	1121c83a 	sub	r16,r2,r4
  805b18:	0400240e 	bge	zero,r16,805bac <___vfprintf_internal_r+0x6a4>
  805b1c:	00800404 	movi	r2,16
  805b20:	1404550e 	bge	r2,r16,806c78 <___vfprintf_internal_r+0x1770>
  805b24:	dc400d17 	ldw	r17,52(sp)
  805b28:	1027883a 	mov	r19,r2
  805b2c:	07002074 	movhi	fp,129
  805b30:	e713fc84 	addi	fp,fp,20466
  805b34:	050001c4 	movi	r20,7
  805b38:	00000306 	br	805b48 <___vfprintf_internal_r+0x640>
  805b3c:	843ffc04 	addi	r16,r16,-16
  805b40:	18c00204 	addi	r3,r3,8
  805b44:	9c00110e 	bge	r19,r16,805b8c <___vfprintf_internal_r+0x684>
  805b48:	94800404 	addi	r18,r18,16
  805b4c:	8c400044 	addi	r17,r17,1
  805b50:	1f000015 	stw	fp,0(r3)
  805b54:	1cc00115 	stw	r19,4(r3)
  805b58:	dc800e15 	stw	r18,56(sp)
  805b5c:	dc400d15 	stw	r17,52(sp)
  805b60:	a47ff60e 	bge	r20,r17,805b3c <___vfprintf_internal_r+0x634>
  805b64:	d9014f17 	ldw	r4,1340(sp)
  805b68:	b00b883a 	mov	r5,r22
  805b6c:	d9800c04 	addi	r6,sp,48
  805b70:	08054b00 	call	8054b0 <__sprint_r>
  805b74:	10001c1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805b78:	843ffc04 	addi	r16,r16,-16
  805b7c:	dc800e17 	ldw	r18,56(sp)
  805b80:	dc400d17 	ldw	r17,52(sp)
  805b84:	d8c01904 	addi	r3,sp,100
  805b88:	9c3fef16 	blt	r19,r16,805b48 <___vfprintf_internal_r+0x640>
  805b8c:	9425883a 	add	r18,r18,r16
  805b90:	8c400044 	addi	r17,r17,1
  805b94:	008001c4 	movi	r2,7
  805b98:	1f000015 	stw	fp,0(r3)
  805b9c:	1c000115 	stw	r16,4(r3)
  805ba0:	dc800e15 	stw	r18,56(sp)
  805ba4:	dc400d15 	stw	r17,52(sp)
  805ba8:	1440cb16 	blt	r2,r17,805ed8 <___vfprintf_internal_r+0x9d0>
  805bac:	d8814a17 	ldw	r2,1320(sp)
  805bb0:	d9414517 	ldw	r5,1300(sp)
  805bb4:	1140010e 	bge	r2,r5,805bbc <___vfprintf_internal_r+0x6b4>
  805bb8:	2805883a 	mov	r2,r5
  805bbc:	d9814b17 	ldw	r6,1324(sp)
  805bc0:	308d883a 	add	r6,r6,r2
  805bc4:	d9814b15 	stw	r6,1324(sp)
  805bc8:	90013b1e 	bne	r18,zero,8060b8 <___vfprintf_internal_r+0xbb0>
  805bcc:	d9c14017 	ldw	r7,1280(sp)
  805bd0:	dd401904 	addi	r21,sp,100
  805bd4:	d8000d15 	stw	zero,52(sp)
  805bd8:	003ea706 	br	805678 <___vfprintf_internal_r+0x170>
  805bdc:	d8800e17 	ldw	r2,56(sp)
  805be0:	1005451e 	bne	r2,zero,8070f8 <___vfprintf_internal_r+0x1bf0>
  805be4:	d8000d15 	stw	zero,52(sp)
  805be8:	b080030b 	ldhu	r2,12(r22)
  805bec:	1080100c 	andi	r2,r2,64
  805bf0:	103e8726 	beq	r2,zero,805610 <___vfprintf_internal_r+0x108>
  805bf4:	00bfffc4 	movi	r2,-1
  805bf8:	d8814b15 	stw	r2,1324(sp)
  805bfc:	003e8406 	br	805610 <___vfprintf_internal_r+0x108>
  805c00:	d9814d17 	ldw	r6,1332(sp)
  805c04:	00801944 	movi	r2,101
  805c08:	11806e16 	blt	r2,r6,805dc4 <___vfprintf_internal_r+0x8bc>
  805c0c:	d9414717 	ldw	r5,1308(sp)
  805c10:	00c00044 	movi	r3,1
  805c14:	1943490e 	bge	r3,r5,80693c <___vfprintf_internal_r+0x1434>
  805c18:	d8814117 	ldw	r2,1284(sp)
  805c1c:	94800044 	addi	r18,r18,1
  805c20:	8c400044 	addi	r17,r17,1
  805c24:	a8800015 	stw	r2,0(r21)
  805c28:	008001c4 	movi	r2,7
  805c2c:	a8c00115 	stw	r3,4(r21)
  805c30:	dc800e15 	stw	r18,56(sp)
  805c34:	dc400d15 	stw	r17,52(sp)
  805c38:	1441ca16 	blt	r2,r17,806364 <___vfprintf_internal_r+0xe5c>
  805c3c:	a8c00204 	addi	r3,r21,8
  805c40:	d9014917 	ldw	r4,1316(sp)
  805c44:	00800044 	movi	r2,1
  805c48:	94800044 	addi	r18,r18,1
  805c4c:	8c400044 	addi	r17,r17,1
  805c50:	18800115 	stw	r2,4(r3)
  805c54:	008001c4 	movi	r2,7
  805c58:	19000015 	stw	r4,0(r3)
  805c5c:	dc800e15 	stw	r18,56(sp)
  805c60:	dc400d15 	stw	r17,52(sp)
  805c64:	1441b616 	blt	r2,r17,806340 <___vfprintf_internal_r+0xe38>
  805c68:	1cc00204 	addi	r19,r3,8
  805c6c:	d9014217 	ldw	r4,1288(sp)
  805c70:	d9414317 	ldw	r5,1292(sp)
  805c74:	000d883a 	mov	r6,zero
  805c78:	000f883a 	mov	r7,zero
  805c7c:	08111480 	call	811148 <__nedf2>
  805c80:	10017426 	beq	r2,zero,806254 <___vfprintf_internal_r+0xd4c>
  805c84:	d9414717 	ldw	r5,1308(sp)
  805c88:	d9814117 	ldw	r6,1284(sp)
  805c8c:	8c400044 	addi	r17,r17,1
  805c90:	2c85883a 	add	r2,r5,r18
  805c94:	14bfffc4 	addi	r18,r2,-1
  805c98:	28bfffc4 	addi	r2,r5,-1
  805c9c:	30c00044 	addi	r3,r6,1
  805ca0:	98800115 	stw	r2,4(r19)
  805ca4:	008001c4 	movi	r2,7
  805ca8:	98c00015 	stw	r3,0(r19)
  805cac:	dc800e15 	stw	r18,56(sp)
  805cb0:	dc400d15 	stw	r17,52(sp)
  805cb4:	14418e16 	blt	r2,r17,8062f0 <___vfprintf_internal_r+0xde8>
  805cb8:	9cc00204 	addi	r19,r19,8
  805cbc:	d9414817 	ldw	r5,1312(sp)
  805cc0:	d8800804 	addi	r2,sp,32
  805cc4:	8c400044 	addi	r17,r17,1
  805cc8:	9165883a 	add	r18,r18,r5
  805ccc:	98800015 	stw	r2,0(r19)
  805cd0:	008001c4 	movi	r2,7
  805cd4:	99400115 	stw	r5,4(r19)
  805cd8:	dc800e15 	stw	r18,56(sp)
  805cdc:	dc400d15 	stw	r17,52(sp)
  805ce0:	1440ed16 	blt	r2,r17,806098 <___vfprintf_internal_r+0xb90>
  805ce4:	98c00204 	addi	r3,r19,8
  805ce8:	003f8506 	br	805b00 <___vfprintf_internal_r+0x5f8>
  805cec:	d9814a17 	ldw	r6,1320(sp)
  805cf0:	d8814517 	ldw	r2,1300(sp)
  805cf4:	30a1c83a 	sub	r16,r6,r2
  805cf8:	043f4b0e 	bge	zero,r16,805a28 <___vfprintf_internal_r+0x520>
  805cfc:	00800404 	movi	r2,16
  805d00:	14043a0e 	bge	r2,r16,806dec <___vfprintf_internal_r+0x18e4>
  805d04:	1027883a 	mov	r19,r2
  805d08:	07002074 	movhi	fp,129
  805d0c:	e713f884 	addi	fp,fp,20450
  805d10:	050001c4 	movi	r20,7
  805d14:	00000306 	br	805d24 <___vfprintf_internal_r+0x81c>
  805d18:	843ffc04 	addi	r16,r16,-16
  805d1c:	ad400204 	addi	r21,r21,8
  805d20:	9c00130e 	bge	r19,r16,805d70 <___vfprintf_internal_r+0x868>
  805d24:	94800404 	addi	r18,r18,16
  805d28:	8c400044 	addi	r17,r17,1
  805d2c:	af000015 	stw	fp,0(r21)
  805d30:	acc00115 	stw	r19,4(r21)
  805d34:	dc800e15 	stw	r18,56(sp)
  805d38:	dc400d15 	stw	r17,52(sp)
  805d3c:	a47ff60e 	bge	r20,r17,805d18 <___vfprintf_internal_r+0x810>
  805d40:	d9014f17 	ldw	r4,1340(sp)
  805d44:	b00b883a 	mov	r5,r22
  805d48:	d9800c04 	addi	r6,sp,48
  805d4c:	d9c15115 	stw	r7,1348(sp)
  805d50:	08054b00 	call	8054b0 <__sprint_r>
  805d54:	d9c15117 	ldw	r7,1348(sp)
  805d58:	103fa31e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805d5c:	843ffc04 	addi	r16,r16,-16
  805d60:	dc800e17 	ldw	r18,56(sp)
  805d64:	dc400d17 	ldw	r17,52(sp)
  805d68:	dd401904 	addi	r21,sp,100
  805d6c:	9c3fed16 	blt	r19,r16,805d24 <___vfprintf_internal_r+0x81c>
  805d70:	9425883a 	add	r18,r18,r16
  805d74:	8c400044 	addi	r17,r17,1
  805d78:	008001c4 	movi	r2,7
  805d7c:	af000015 	stw	fp,0(r21)
  805d80:	ac000115 	stw	r16,4(r21)
  805d84:	dc800e15 	stw	r18,56(sp)
  805d88:	dc400d15 	stw	r17,52(sp)
  805d8c:	14416116 	blt	r2,r17,806314 <___vfprintf_internal_r+0xe0c>
  805d90:	ad400204 	addi	r21,r21,8
  805d94:	003f2406 	br	805a28 <___vfprintf_internal_r+0x520>
  805d98:	d9014f17 	ldw	r4,1340(sp)
  805d9c:	0802cb00 	call	802cb0 <__sinit>
  805da0:	d9c15117 	ldw	r7,1348(sp)
  805da4:	003def06 	br	805564 <___vfprintf_internal_r+0x5c>
  805da8:	d9014f17 	ldw	r4,1340(sp)
  805dac:	b00b883a 	mov	r5,r22
  805db0:	d9c15115 	stw	r7,1348(sp)
  805db4:	0808bf00 	call	808bf0 <__swsetup_r>
  805db8:	d9c15117 	ldw	r7,1348(sp)
  805dbc:	103dee26 	beq	r2,zero,805578 <___vfprintf_internal_r+0x70>
  805dc0:	003f8c06 	br	805bf4 <___vfprintf_internal_r+0x6ec>
  805dc4:	d9014217 	ldw	r4,1288(sp)
  805dc8:	d9414317 	ldw	r5,1292(sp)
  805dcc:	000d883a 	mov	r6,zero
  805dd0:	000f883a 	mov	r7,zero
  805dd4:	08110c00 	call	8110c0 <__eqdf2>
  805dd8:	1000f21e 	bne	r2,zero,8061a4 <___vfprintf_internal_r+0xc9c>
  805ddc:	00802074 	movhi	r2,129
  805de0:	1093f804 	addi	r2,r2,20448
  805de4:	94800044 	addi	r18,r18,1
  805de8:	8c400044 	addi	r17,r17,1
  805dec:	a8800015 	stw	r2,0(r21)
  805df0:	00c00044 	movi	r3,1
  805df4:	008001c4 	movi	r2,7
  805df8:	a8c00115 	stw	r3,4(r21)
  805dfc:	dc800e15 	stw	r18,56(sp)
  805e00:	dc400d15 	stw	r17,52(sp)
  805e04:	14430016 	blt	r2,r17,806a08 <___vfprintf_internal_r+0x1500>
  805e08:	a8c00204 	addi	r3,r21,8
  805e0c:	d8800517 	ldw	r2,20(sp)
  805e10:	d9014717 	ldw	r4,1308(sp)
  805e14:	11015c0e 	bge	r2,r4,806388 <___vfprintf_internal_r+0xe80>
  805e18:	dc400d17 	ldw	r17,52(sp)
  805e1c:	d9814917 	ldw	r6,1316(sp)
  805e20:	00800044 	movi	r2,1
  805e24:	94800044 	addi	r18,r18,1
  805e28:	8c400044 	addi	r17,r17,1
  805e2c:	18800115 	stw	r2,4(r3)
  805e30:	008001c4 	movi	r2,7
  805e34:	19800015 	stw	r6,0(r3)
  805e38:	dc800e15 	stw	r18,56(sp)
  805e3c:	dc400d15 	stw	r17,52(sp)
  805e40:	14431616 	blt	r2,r17,806a9c <___vfprintf_internal_r+0x1594>
  805e44:	18c00204 	addi	r3,r3,8
  805e48:	d8814717 	ldw	r2,1308(sp)
  805e4c:	143fffc4 	addi	r16,r2,-1
  805e50:	043f2b0e 	bge	zero,r16,805b00 <___vfprintf_internal_r+0x5f8>
  805e54:	00800404 	movi	r2,16
  805e58:	1402a80e 	bge	r2,r16,8068fc <___vfprintf_internal_r+0x13f4>
  805e5c:	dc400d17 	ldw	r17,52(sp)
  805e60:	1027883a 	mov	r19,r2
  805e64:	07002074 	movhi	fp,129
  805e68:	e713f884 	addi	fp,fp,20450
  805e6c:	050001c4 	movi	r20,7
  805e70:	00000306 	br	805e80 <___vfprintf_internal_r+0x978>
  805e74:	18c00204 	addi	r3,r3,8
  805e78:	843ffc04 	addi	r16,r16,-16
  805e7c:	9c02a20e 	bge	r19,r16,806908 <___vfprintf_internal_r+0x1400>
  805e80:	94800404 	addi	r18,r18,16
  805e84:	8c400044 	addi	r17,r17,1
  805e88:	1f000015 	stw	fp,0(r3)
  805e8c:	1cc00115 	stw	r19,4(r3)
  805e90:	dc800e15 	stw	r18,56(sp)
  805e94:	dc400d15 	stw	r17,52(sp)
  805e98:	a47ff60e 	bge	r20,r17,805e74 <___vfprintf_internal_r+0x96c>
  805e9c:	d9014f17 	ldw	r4,1340(sp)
  805ea0:	b00b883a 	mov	r5,r22
  805ea4:	d9800c04 	addi	r6,sp,48
  805ea8:	08054b00 	call	8054b0 <__sprint_r>
  805eac:	103f4e1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805eb0:	dc800e17 	ldw	r18,56(sp)
  805eb4:	dc400d17 	ldw	r17,52(sp)
  805eb8:	d8c01904 	addi	r3,sp,100
  805ebc:	003fee06 	br	805e78 <___vfprintf_internal_r+0x970>
  805ec0:	d8802c0b 	ldhu	r2,176(sp)
  805ec4:	00ffffc4 	movi	r3,-1
  805ec8:	d8c14b15 	stw	r3,1324(sp)
  805ecc:	1080100c 	andi	r2,r2,64
  805ed0:	103dcc1e 	bne	r2,zero,805604 <___vfprintf_internal_r+0xfc>
  805ed4:	003dce06 	br	805610 <___vfprintf_internal_r+0x108>
  805ed8:	d9014f17 	ldw	r4,1340(sp)
  805edc:	b00b883a 	mov	r5,r22
  805ee0:	d9800c04 	addi	r6,sp,48
  805ee4:	08054b00 	call	8054b0 <__sprint_r>
  805ee8:	103f3f1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  805eec:	dc800e17 	ldw	r18,56(sp)
  805ef0:	003f2e06 	br	805bac <___vfprintf_internal_r+0x6a4>
  805ef4:	d9414c17 	ldw	r5,1328(sp)
  805ef8:	29400414 	ori	r5,r5,16
  805efc:	d9414c15 	stw	r5,1328(sp)
  805f00:	d9814c17 	ldw	r6,1328(sp)
  805f04:	3080080c 	andi	r2,r6,32
  805f08:	10014f1e 	bne	r2,zero,806448 <___vfprintf_internal_r+0xf40>
  805f0c:	d8c14c17 	ldw	r3,1328(sp)
  805f10:	1880040c 	andi	r2,r3,16
  805f14:	1002f01e 	bne	r2,zero,806ad8 <___vfprintf_internal_r+0x15d0>
  805f18:	d9014c17 	ldw	r4,1328(sp)
  805f1c:	2080100c 	andi	r2,r4,64
  805f20:	1002ed26 	beq	r2,zero,806ad8 <___vfprintf_internal_r+0x15d0>
  805f24:	3880000f 	ldh	r2,0(r7)
  805f28:	39c00104 	addi	r7,r7,4
  805f2c:	d9c14015 	stw	r7,1280(sp)
  805f30:	1023d7fa 	srai	r17,r2,31
  805f34:	1021883a 	mov	r16,r2
  805f38:	88037816 	blt	r17,zero,806d1c <___vfprintf_internal_r+0x1814>
  805f3c:	01000044 	movi	r4,1
  805f40:	98000416 	blt	r19,zero,805f54 <___vfprintf_internal_r+0xa4c>
  805f44:	d8c14c17 	ldw	r3,1328(sp)
  805f48:	00bfdfc4 	movi	r2,-129
  805f4c:	1886703a 	and	r3,r3,r2
  805f50:	d8c14c15 	stw	r3,1328(sp)
  805f54:	8444b03a 	or	r2,r16,r17
  805f58:	10022c1e 	bne	r2,zero,80680c <___vfprintf_internal_r+0x1304>
  805f5c:	98022b1e 	bne	r19,zero,80680c <___vfprintf_internal_r+0x1304>
  805f60:	20803fcc 	andi	r2,r4,255
  805f64:	1002a126 	beq	r2,zero,8069ec <___vfprintf_internal_r+0x14e4>
  805f68:	d8c01904 	addi	r3,sp,100
  805f6c:	dd000f04 	addi	r20,sp,60
  805f70:	d8c14115 	stw	r3,1284(sp)
  805f74:	d8c14117 	ldw	r3,1284(sp)
  805f78:	dcc14515 	stw	r19,1300(sp)
  805f7c:	a0c5c83a 	sub	r2,r20,r3
  805f80:	11c00a04 	addi	r7,r2,40
  805f84:	99c0010e 	bge	r19,r7,805f8c <___vfprintf_internal_r+0xa84>
  805f88:	d9c14515 	stw	r7,1300(sp)
  805f8c:	dcc14615 	stw	r19,1304(sp)
  805f90:	d8800407 	ldb	r2,16(sp)
  805f94:	103e4c26 	beq	r2,zero,8058c8 <___vfprintf_internal_r+0x3c0>
  805f98:	d8814517 	ldw	r2,1300(sp)
  805f9c:	10800044 	addi	r2,r2,1
  805fa0:	d8814515 	stw	r2,1300(sp)
  805fa4:	003e4806 	br	8058c8 <___vfprintf_internal_r+0x3c0>
  805fa8:	d9814c17 	ldw	r6,1328(sp)
  805fac:	31800414 	ori	r6,r6,16
  805fb0:	d9814c15 	stw	r6,1328(sp)
  805fb4:	d8c14c17 	ldw	r3,1328(sp)
  805fb8:	1880080c 	andi	r2,r3,32
  805fbc:	1001271e 	bne	r2,zero,80645c <___vfprintf_internal_r+0xf54>
  805fc0:	d9414c17 	ldw	r5,1328(sp)
  805fc4:	2880040c 	andi	r2,r5,16
  805fc8:	1002bc1e 	bne	r2,zero,806abc <___vfprintf_internal_r+0x15b4>
  805fcc:	d9814c17 	ldw	r6,1328(sp)
  805fd0:	3080100c 	andi	r2,r6,64
  805fd4:	1002b926 	beq	r2,zero,806abc <___vfprintf_internal_r+0x15b4>
  805fd8:	3c00000b 	ldhu	r16,0(r7)
  805fdc:	0009883a 	mov	r4,zero
  805fe0:	39c00104 	addi	r7,r7,4
  805fe4:	0023883a 	mov	r17,zero
  805fe8:	d9c14015 	stw	r7,1280(sp)
  805fec:	d8000405 	stb	zero,16(sp)
  805ff0:	003fd306 	br	805f40 <___vfprintf_internal_r+0xa38>
  805ff4:	d9014c17 	ldw	r4,1328(sp)
  805ff8:	21000414 	ori	r4,r4,16
  805ffc:	d9014c15 	stw	r4,1328(sp)
  806000:	d9414c17 	ldw	r5,1328(sp)
  806004:	2880080c 	andi	r2,r5,32
  806008:	1001081e 	bne	r2,zero,80642c <___vfprintf_internal_r+0xf24>
  80600c:	d8c14c17 	ldw	r3,1328(sp)
  806010:	1880040c 	andi	r2,r3,16
  806014:	1002b61e 	bne	r2,zero,806af0 <___vfprintf_internal_r+0x15e8>
  806018:	d9014c17 	ldw	r4,1328(sp)
  80601c:	2080100c 	andi	r2,r4,64
  806020:	1002b326 	beq	r2,zero,806af0 <___vfprintf_internal_r+0x15e8>
  806024:	3c00000b 	ldhu	r16,0(r7)
  806028:	01000044 	movi	r4,1
  80602c:	39c00104 	addi	r7,r7,4
  806030:	0023883a 	mov	r17,zero
  806034:	d9c14015 	stw	r7,1280(sp)
  806038:	d8000405 	stb	zero,16(sp)
  80603c:	003fc006 	br	805f40 <___vfprintf_internal_r+0xa38>
  806040:	d9014f17 	ldw	r4,1340(sp)
  806044:	b00b883a 	mov	r5,r22
  806048:	d9800c04 	addi	r6,sp,48
  80604c:	08054b00 	call	8054b0 <__sprint_r>
  806050:	103ee51e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806054:	dc800e17 	ldw	r18,56(sp)
  806058:	d8c01904 	addi	r3,sp,100
  80605c:	d9814c17 	ldw	r6,1328(sp)
  806060:	3080004c 	andi	r2,r6,1
  806064:	1005003a 	cmpeq	r2,r2,zero
  806068:	103ea51e 	bne	r2,zero,805b00 <___vfprintf_internal_r+0x5f8>
  80606c:	00800044 	movi	r2,1
  806070:	dc400d17 	ldw	r17,52(sp)
  806074:	18800115 	stw	r2,4(r3)
  806078:	d8814917 	ldw	r2,1316(sp)
  80607c:	94800044 	addi	r18,r18,1
  806080:	8c400044 	addi	r17,r17,1
  806084:	18800015 	stw	r2,0(r3)
  806088:	008001c4 	movi	r2,7
  80608c:	dc800e15 	stw	r18,56(sp)
  806090:	dc400d15 	stw	r17,52(sp)
  806094:	1442240e 	bge	r2,r17,806928 <___vfprintf_internal_r+0x1420>
  806098:	d9014f17 	ldw	r4,1340(sp)
  80609c:	b00b883a 	mov	r5,r22
  8060a0:	d9800c04 	addi	r6,sp,48
  8060a4:	08054b00 	call	8054b0 <__sprint_r>
  8060a8:	103ecf1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  8060ac:	dc800e17 	ldw	r18,56(sp)
  8060b0:	d8c01904 	addi	r3,sp,100
  8060b4:	003e9206 	br	805b00 <___vfprintf_internal_r+0x5f8>
  8060b8:	d9014f17 	ldw	r4,1340(sp)
  8060bc:	b00b883a 	mov	r5,r22
  8060c0:	d9800c04 	addi	r6,sp,48
  8060c4:	08054b00 	call	8054b0 <__sprint_r>
  8060c8:	103ec026 	beq	r2,zero,805bcc <___vfprintf_internal_r+0x6c4>
  8060cc:	003ec606 	br	805be8 <___vfprintf_internal_r+0x6e0>
  8060d0:	d9014f17 	ldw	r4,1340(sp)
  8060d4:	b00b883a 	mov	r5,r22
  8060d8:	d9800c04 	addi	r6,sp,48
  8060dc:	d9c15115 	stw	r7,1348(sp)
  8060e0:	08054b00 	call	8054b0 <__sprint_r>
  8060e4:	d9c15117 	ldw	r7,1348(sp)
  8060e8:	103ebf1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  8060ec:	dc800e17 	ldw	r18,56(sp)
  8060f0:	dc400d17 	ldw	r17,52(sp)
  8060f4:	dd401904 	addi	r21,sp,100
  8060f8:	003e7406 	br	805acc <___vfprintf_internal_r+0x5c4>
  8060fc:	d9014f17 	ldw	r4,1340(sp)
  806100:	b00b883a 	mov	r5,r22
  806104:	d9800c04 	addi	r6,sp,48
  806108:	d9c15115 	stw	r7,1348(sp)
  80610c:	08054b00 	call	8054b0 <__sprint_r>
  806110:	d9c15117 	ldw	r7,1348(sp)
  806114:	103eb41e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806118:	dd401904 	addi	r21,sp,100
  80611c:	003d6d06 	br	8056d4 <___vfprintf_internal_r+0x1cc>
  806120:	d9014f17 	ldw	r4,1340(sp)
  806124:	b00b883a 	mov	r5,r22
  806128:	d9800c04 	addi	r6,sp,48
  80612c:	d9c15115 	stw	r7,1348(sp)
  806130:	08054b00 	call	8054b0 <__sprint_r>
  806134:	d9c15117 	ldw	r7,1348(sp)
  806138:	103eab1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  80613c:	dc800e17 	ldw	r18,56(sp)
  806140:	dc400d17 	ldw	r17,52(sp)
  806144:	dd401904 	addi	r21,sp,100
  806148:	003e3406 	br	805a1c <___vfprintf_internal_r+0x514>
  80614c:	d9014f17 	ldw	r4,1340(sp)
  806150:	b00b883a 	mov	r5,r22
  806154:	d9800c04 	addi	r6,sp,48
  806158:	d9c15115 	stw	r7,1348(sp)
  80615c:	08054b00 	call	8054b0 <__sprint_r>
  806160:	d9c15117 	ldw	r7,1348(sp)
  806164:	103ea01e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806168:	dc800e17 	ldw	r18,56(sp)
  80616c:	dc400d17 	ldw	r17,52(sp)
  806170:	dd401904 	addi	r21,sp,100
  806174:	003e1c06 	br	8059e8 <___vfprintf_internal_r+0x4e0>
  806178:	d9014f17 	ldw	r4,1340(sp)
  80617c:	b00b883a 	mov	r5,r22
  806180:	d9800c04 	addi	r6,sp,48
  806184:	d9c15115 	stw	r7,1348(sp)
  806188:	08054b00 	call	8054b0 <__sprint_r>
  80618c:	d9c15117 	ldw	r7,1348(sp)
  806190:	103e951e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806194:	dc800e17 	ldw	r18,56(sp)
  806198:	dc400d17 	ldw	r17,52(sp)
  80619c:	dd401904 	addi	r21,sp,100
  8061a0:	003e0406 	br	8059b4 <___vfprintf_internal_r+0x4ac>
  8061a4:	d9000517 	ldw	r4,20(sp)
  8061a8:	0102580e 	bge	zero,r4,806b0c <___vfprintf_internal_r+0x1604>
  8061ac:	d9814717 	ldw	r6,1308(sp)
  8061b0:	21807a16 	blt	r4,r6,80639c <___vfprintf_internal_r+0xe94>
  8061b4:	d8814117 	ldw	r2,1284(sp)
  8061b8:	91a5883a 	add	r18,r18,r6
  8061bc:	8c400044 	addi	r17,r17,1
  8061c0:	a8800015 	stw	r2,0(r21)
  8061c4:	008001c4 	movi	r2,7
  8061c8:	a9800115 	stw	r6,4(r21)
  8061cc:	dc800e15 	stw	r18,56(sp)
  8061d0:	dc400d15 	stw	r17,52(sp)
  8061d4:	1442fc16 	blt	r2,r17,806dc8 <___vfprintf_internal_r+0x18c0>
  8061d8:	a8c00204 	addi	r3,r21,8
  8061dc:	d9414717 	ldw	r5,1308(sp)
  8061e0:	2161c83a 	sub	r16,r4,r5
  8061e4:	043f9d0e 	bge	zero,r16,80605c <___vfprintf_internal_r+0xb54>
  8061e8:	00800404 	movi	r2,16
  8061ec:	1402190e 	bge	r2,r16,806a54 <___vfprintf_internal_r+0x154c>
  8061f0:	dc400d17 	ldw	r17,52(sp)
  8061f4:	1027883a 	mov	r19,r2
  8061f8:	07002074 	movhi	fp,129
  8061fc:	e713f884 	addi	fp,fp,20450
  806200:	050001c4 	movi	r20,7
  806204:	00000306 	br	806214 <___vfprintf_internal_r+0xd0c>
  806208:	18c00204 	addi	r3,r3,8
  80620c:	843ffc04 	addi	r16,r16,-16
  806210:	9c02130e 	bge	r19,r16,806a60 <___vfprintf_internal_r+0x1558>
  806214:	94800404 	addi	r18,r18,16
  806218:	8c400044 	addi	r17,r17,1
  80621c:	1f000015 	stw	fp,0(r3)
  806220:	1cc00115 	stw	r19,4(r3)
  806224:	dc800e15 	stw	r18,56(sp)
  806228:	dc400d15 	stw	r17,52(sp)
  80622c:	a47ff60e 	bge	r20,r17,806208 <___vfprintf_internal_r+0xd00>
  806230:	d9014f17 	ldw	r4,1340(sp)
  806234:	b00b883a 	mov	r5,r22
  806238:	d9800c04 	addi	r6,sp,48
  80623c:	08054b00 	call	8054b0 <__sprint_r>
  806240:	103e691e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806244:	dc800e17 	ldw	r18,56(sp)
  806248:	dc400d17 	ldw	r17,52(sp)
  80624c:	d8c01904 	addi	r3,sp,100
  806250:	003fee06 	br	80620c <___vfprintf_internal_r+0xd04>
  806254:	d8814717 	ldw	r2,1308(sp)
  806258:	143fffc4 	addi	r16,r2,-1
  80625c:	043e970e 	bge	zero,r16,805cbc <___vfprintf_internal_r+0x7b4>
  806260:	00800404 	movi	r2,16
  806264:	1400180e 	bge	r2,r16,8062c8 <___vfprintf_internal_r+0xdc0>
  806268:	1029883a 	mov	r20,r2
  80626c:	07002074 	movhi	fp,129
  806270:	e713f884 	addi	fp,fp,20450
  806274:	054001c4 	movi	r21,7
  806278:	00000306 	br	806288 <___vfprintf_internal_r+0xd80>
  80627c:	9cc00204 	addi	r19,r19,8
  806280:	843ffc04 	addi	r16,r16,-16
  806284:	a400120e 	bge	r20,r16,8062d0 <___vfprintf_internal_r+0xdc8>
  806288:	94800404 	addi	r18,r18,16
  80628c:	8c400044 	addi	r17,r17,1
  806290:	9f000015 	stw	fp,0(r19)
  806294:	9d000115 	stw	r20,4(r19)
  806298:	dc800e15 	stw	r18,56(sp)
  80629c:	dc400d15 	stw	r17,52(sp)
  8062a0:	ac7ff60e 	bge	r21,r17,80627c <___vfprintf_internal_r+0xd74>
  8062a4:	d9014f17 	ldw	r4,1340(sp)
  8062a8:	b00b883a 	mov	r5,r22
  8062ac:	d9800c04 	addi	r6,sp,48
  8062b0:	08054b00 	call	8054b0 <__sprint_r>
  8062b4:	103e4c1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  8062b8:	dc800e17 	ldw	r18,56(sp)
  8062bc:	dc400d17 	ldw	r17,52(sp)
  8062c0:	dcc01904 	addi	r19,sp,100
  8062c4:	003fee06 	br	806280 <___vfprintf_internal_r+0xd78>
  8062c8:	07002074 	movhi	fp,129
  8062cc:	e713f884 	addi	fp,fp,20450
  8062d0:	9425883a 	add	r18,r18,r16
  8062d4:	8c400044 	addi	r17,r17,1
  8062d8:	008001c4 	movi	r2,7
  8062dc:	9f000015 	stw	fp,0(r19)
  8062e0:	9c000115 	stw	r16,4(r19)
  8062e4:	dc800e15 	stw	r18,56(sp)
  8062e8:	dc400d15 	stw	r17,52(sp)
  8062ec:	147e720e 	bge	r2,r17,805cb8 <___vfprintf_internal_r+0x7b0>
  8062f0:	d9014f17 	ldw	r4,1340(sp)
  8062f4:	b00b883a 	mov	r5,r22
  8062f8:	d9800c04 	addi	r6,sp,48
  8062fc:	08054b00 	call	8054b0 <__sprint_r>
  806300:	103e391e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806304:	dc800e17 	ldw	r18,56(sp)
  806308:	dc400d17 	ldw	r17,52(sp)
  80630c:	dcc01904 	addi	r19,sp,100
  806310:	003e6a06 	br	805cbc <___vfprintf_internal_r+0x7b4>
  806314:	d9014f17 	ldw	r4,1340(sp)
  806318:	b00b883a 	mov	r5,r22
  80631c:	d9800c04 	addi	r6,sp,48
  806320:	d9c15115 	stw	r7,1348(sp)
  806324:	08054b00 	call	8054b0 <__sprint_r>
  806328:	d9c15117 	ldw	r7,1348(sp)
  80632c:	103e2e1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806330:	dc800e17 	ldw	r18,56(sp)
  806334:	dc400d17 	ldw	r17,52(sp)
  806338:	dd401904 	addi	r21,sp,100
  80633c:	003dba06 	br	805a28 <___vfprintf_internal_r+0x520>
  806340:	d9014f17 	ldw	r4,1340(sp)
  806344:	b00b883a 	mov	r5,r22
  806348:	d9800c04 	addi	r6,sp,48
  80634c:	08054b00 	call	8054b0 <__sprint_r>
  806350:	103e251e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806354:	dc800e17 	ldw	r18,56(sp)
  806358:	dc400d17 	ldw	r17,52(sp)
  80635c:	dcc01904 	addi	r19,sp,100
  806360:	003e4206 	br	805c6c <___vfprintf_internal_r+0x764>
  806364:	d9014f17 	ldw	r4,1340(sp)
  806368:	b00b883a 	mov	r5,r22
  80636c:	d9800c04 	addi	r6,sp,48
  806370:	08054b00 	call	8054b0 <__sprint_r>
  806374:	103e1c1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806378:	dc800e17 	ldw	r18,56(sp)
  80637c:	dc400d17 	ldw	r17,52(sp)
  806380:	d8c01904 	addi	r3,sp,100
  806384:	003e2e06 	br	805c40 <___vfprintf_internal_r+0x738>
  806388:	d9414c17 	ldw	r5,1328(sp)
  80638c:	2880004c 	andi	r2,r5,1
  806390:	1005003a 	cmpeq	r2,r2,zero
  806394:	103dda1e 	bne	r2,zero,805b00 <___vfprintf_internal_r+0x5f8>
  806398:	003e9f06 	br	805e18 <___vfprintf_internal_r+0x910>
  80639c:	d8c14117 	ldw	r3,1284(sp)
  8063a0:	9125883a 	add	r18,r18,r4
  8063a4:	8c400044 	addi	r17,r17,1
  8063a8:	008001c4 	movi	r2,7
  8063ac:	a8c00015 	stw	r3,0(r21)
  8063b0:	a9000115 	stw	r4,4(r21)
  8063b4:	dc800e15 	stw	r18,56(sp)
  8063b8:	dc400d15 	stw	r17,52(sp)
  8063bc:	14426c16 	blt	r2,r17,806d70 <___vfprintf_internal_r+0x1868>
  8063c0:	a8c00204 	addi	r3,r21,8
  8063c4:	d9414917 	ldw	r5,1316(sp)
  8063c8:	00800044 	movi	r2,1
  8063cc:	94800044 	addi	r18,r18,1
  8063d0:	8c400044 	addi	r17,r17,1
  8063d4:	18800115 	stw	r2,4(r3)
  8063d8:	008001c4 	movi	r2,7
  8063dc:	19400015 	stw	r5,0(r3)
  8063e0:	dc800e15 	stw	r18,56(sp)
  8063e4:	dc400d15 	stw	r17,52(sp)
  8063e8:	2021883a 	mov	r16,r4
  8063ec:	14425616 	blt	r2,r17,806d48 <___vfprintf_internal_r+0x1840>
  8063f0:	19400204 	addi	r5,r3,8
  8063f4:	d9814717 	ldw	r6,1308(sp)
  8063f8:	8c400044 	addi	r17,r17,1
  8063fc:	dc400d15 	stw	r17,52(sp)
  806400:	3107c83a 	sub	r3,r6,r4
  806404:	d9014117 	ldw	r4,1284(sp)
  806408:	90e5883a 	add	r18,r18,r3
  80640c:	28c00115 	stw	r3,4(r5)
  806410:	8105883a 	add	r2,r16,r4
  806414:	28800015 	stw	r2,0(r5)
  806418:	008001c4 	movi	r2,7
  80641c:	dc800e15 	stw	r18,56(sp)
  806420:	147f1d16 	blt	r2,r17,806098 <___vfprintf_internal_r+0xb90>
  806424:	28c00204 	addi	r3,r5,8
  806428:	003db506 	br	805b00 <___vfprintf_internal_r+0x5f8>
  80642c:	3c000017 	ldw	r16,0(r7)
  806430:	3c400117 	ldw	r17,4(r7)
  806434:	39800204 	addi	r6,r7,8
  806438:	01000044 	movi	r4,1
  80643c:	d9814015 	stw	r6,1280(sp)
  806440:	d8000405 	stb	zero,16(sp)
  806444:	003ebe06 	br	805f40 <___vfprintf_internal_r+0xa38>
  806448:	3c000017 	ldw	r16,0(r7)
  80644c:	3c400117 	ldw	r17,4(r7)
  806450:	38800204 	addi	r2,r7,8
  806454:	d8814015 	stw	r2,1280(sp)
  806458:	003eb706 	br	805f38 <___vfprintf_internal_r+0xa30>
  80645c:	3c000017 	ldw	r16,0(r7)
  806460:	3c400117 	ldw	r17,4(r7)
  806464:	39000204 	addi	r4,r7,8
  806468:	d9014015 	stw	r4,1280(sp)
  80646c:	0009883a 	mov	r4,zero
  806470:	d8000405 	stb	zero,16(sp)
  806474:	003eb206 	br	805f40 <___vfprintf_internal_r+0xa38>
  806478:	38c00017 	ldw	r3,0(r7)
  80647c:	39c00104 	addi	r7,r7,4
  806480:	d8c14a15 	stw	r3,1320(sp)
  806484:	1800d70e 	bge	r3,zero,8067e4 <___vfprintf_internal_r+0x12dc>
  806488:	00c7c83a 	sub	r3,zero,r3
  80648c:	d8c14a15 	stw	r3,1320(sp)
  806490:	d9014c17 	ldw	r4,1328(sp)
  806494:	b8c00007 	ldb	r3,0(r23)
  806498:	21000114 	ori	r4,r4,4
  80649c:	d9014c15 	stw	r4,1328(sp)
  8064a0:	003c9806 	br	805704 <___vfprintf_internal_r+0x1fc>
  8064a4:	d9814c17 	ldw	r6,1328(sp)
  8064a8:	3080080c 	andi	r2,r6,32
  8064ac:	1001f626 	beq	r2,zero,806c88 <___vfprintf_internal_r+0x1780>
  8064b0:	d9014b17 	ldw	r4,1324(sp)
  8064b4:	38800017 	ldw	r2,0(r7)
  8064b8:	39c00104 	addi	r7,r7,4
  8064bc:	d9c14015 	stw	r7,1280(sp)
  8064c0:	2007d7fa 	srai	r3,r4,31
  8064c4:	d9c14017 	ldw	r7,1280(sp)
  8064c8:	11000015 	stw	r4,0(r2)
  8064cc:	10c00115 	stw	r3,4(r2)
  8064d0:	003c6906 	br	805678 <___vfprintf_internal_r+0x170>
  8064d4:	b8c00007 	ldb	r3,0(r23)
  8064d8:	00801b04 	movi	r2,108
  8064dc:	18825526 	beq	r3,r2,806e34 <___vfprintf_internal_r+0x192c>
  8064e0:	d9414c17 	ldw	r5,1328(sp)
  8064e4:	29400414 	ori	r5,r5,16
  8064e8:	d9414c15 	stw	r5,1328(sp)
  8064ec:	003c8506 	br	805704 <___vfprintf_internal_r+0x1fc>
  8064f0:	d9814c17 	ldw	r6,1328(sp)
  8064f4:	b8c00007 	ldb	r3,0(r23)
  8064f8:	31800814 	ori	r6,r6,32
  8064fc:	d9814c15 	stw	r6,1328(sp)
  806500:	003c8006 	br	805704 <___vfprintf_internal_r+0x1fc>
  806504:	d8814c17 	ldw	r2,1328(sp)
  806508:	3c000017 	ldw	r16,0(r7)
  80650c:	00c01e04 	movi	r3,120
  806510:	10800094 	ori	r2,r2,2
  806514:	d8814c15 	stw	r2,1328(sp)
  806518:	39c00104 	addi	r7,r7,4
  80651c:	01402074 	movhi	r5,129
  806520:	2953e104 	addi	r5,r5,20356
  806524:	00800c04 	movi	r2,48
  806528:	0023883a 	mov	r17,zero
  80652c:	01000084 	movi	r4,2
  806530:	d9c14015 	stw	r7,1280(sp)
  806534:	d8c14d15 	stw	r3,1332(sp)
  806538:	d9414415 	stw	r5,1296(sp)
  80653c:	d8800445 	stb	r2,17(sp)
  806540:	d8c00485 	stb	r3,18(sp)
  806544:	d8000405 	stb	zero,16(sp)
  806548:	003e7d06 	br	805f40 <___vfprintf_internal_r+0xa38>
  80654c:	d8814c17 	ldw	r2,1328(sp)
  806550:	b8c00007 	ldb	r3,0(r23)
  806554:	10801014 	ori	r2,r2,64
  806558:	d8814c15 	stw	r2,1328(sp)
  80655c:	003c6906 	br	805704 <___vfprintf_internal_r+0x1fc>
  806560:	d9414c17 	ldw	r5,1328(sp)
  806564:	2880020c 	andi	r2,r5,8
  806568:	1001e526 	beq	r2,zero,806d00 <___vfprintf_internal_r+0x17f8>
  80656c:	39800017 	ldw	r6,0(r7)
  806570:	38800204 	addi	r2,r7,8
  806574:	d8814015 	stw	r2,1280(sp)
  806578:	d9814215 	stw	r6,1288(sp)
  80657c:	39c00117 	ldw	r7,4(r7)
  806580:	d9c14315 	stw	r7,1292(sp)
  806584:	d9014217 	ldw	r4,1288(sp)
  806588:	d9414317 	ldw	r5,1292(sp)
  80658c:	080c7340 	call	80c734 <__isinfd>
  806590:	10021d26 	beq	r2,zero,806e08 <___vfprintf_internal_r+0x1900>
  806594:	d9014217 	ldw	r4,1288(sp)
  806598:	d9414317 	ldw	r5,1292(sp)
  80659c:	000d883a 	mov	r6,zero
  8065a0:	000f883a 	mov	r7,zero
  8065a4:	08112e00 	call	8112e0 <__ltdf2>
  8065a8:	1002d016 	blt	r2,zero,8070ec <___vfprintf_internal_r+0x1be4>
  8065ac:	d9414d17 	ldw	r5,1332(sp)
  8065b0:	008011c4 	movi	r2,71
  8065b4:	11421016 	blt	r2,r5,806df8 <___vfprintf_internal_r+0x18f0>
  8065b8:	01802074 	movhi	r6,129
  8065bc:	3193e604 	addi	r6,r6,20376
  8065c0:	d9814115 	stw	r6,1284(sp)
  8065c4:	d9014c17 	ldw	r4,1328(sp)
  8065c8:	00c000c4 	movi	r3,3
  8065cc:	00bfdfc4 	movi	r2,-129
  8065d0:	2088703a 	and	r4,r4,r2
  8065d4:	180f883a 	mov	r7,r3
  8065d8:	d8c14515 	stw	r3,1300(sp)
  8065dc:	d9014c15 	stw	r4,1328(sp)
  8065e0:	d8014615 	stw	zero,1304(sp)
  8065e4:	003e6a06 	br	805f90 <___vfprintf_internal_r+0xa88>
  8065e8:	38800017 	ldw	r2,0(r7)
  8065ec:	00c00044 	movi	r3,1
  8065f0:	39c00104 	addi	r7,r7,4
  8065f4:	d9c14015 	stw	r7,1280(sp)
  8065f8:	d9000f04 	addi	r4,sp,60
  8065fc:	180f883a 	mov	r7,r3
  806600:	d8c14515 	stw	r3,1300(sp)
  806604:	d9014115 	stw	r4,1284(sp)
  806608:	d8800f05 	stb	r2,60(sp)
  80660c:	d8000405 	stb	zero,16(sp)
  806610:	003cac06 	br	8058c4 <___vfprintf_internal_r+0x3bc>
  806614:	01402074 	movhi	r5,129
  806618:	2953ec04 	addi	r5,r5,20400
  80661c:	d9414415 	stw	r5,1296(sp)
  806620:	d9814c17 	ldw	r6,1328(sp)
  806624:	3080080c 	andi	r2,r6,32
  806628:	1000ff26 	beq	r2,zero,806a28 <___vfprintf_internal_r+0x1520>
  80662c:	3c000017 	ldw	r16,0(r7)
  806630:	3c400117 	ldw	r17,4(r7)
  806634:	38800204 	addi	r2,r7,8
  806638:	d8814015 	stw	r2,1280(sp)
  80663c:	d9414c17 	ldw	r5,1328(sp)
  806640:	2880004c 	andi	r2,r5,1
  806644:	1005003a 	cmpeq	r2,r2,zero
  806648:	1000b91e 	bne	r2,zero,806930 <___vfprintf_internal_r+0x1428>
  80664c:	8444b03a 	or	r2,r16,r17
  806650:	1000b726 	beq	r2,zero,806930 <___vfprintf_internal_r+0x1428>
  806654:	d9814d17 	ldw	r6,1332(sp)
  806658:	29400094 	ori	r5,r5,2
  80665c:	00800c04 	movi	r2,48
  806660:	01000084 	movi	r4,2
  806664:	d9414c15 	stw	r5,1328(sp)
  806668:	d8800445 	stb	r2,17(sp)
  80666c:	d9800485 	stb	r6,18(sp)
  806670:	d8000405 	stb	zero,16(sp)
  806674:	003e3206 	br	805f40 <___vfprintf_internal_r+0xa38>
  806678:	01802074 	movhi	r6,129
  80667c:	3193e104 	addi	r6,r6,20356
  806680:	d9814415 	stw	r6,1296(sp)
  806684:	003fe606 	br	806620 <___vfprintf_internal_r+0x1118>
  806688:	00800ac4 	movi	r2,43
  80668c:	d8800405 	stb	r2,16(sp)
  806690:	b8c00007 	ldb	r3,0(r23)
  806694:	003c1b06 	br	805704 <___vfprintf_internal_r+0x1fc>
  806698:	d8814c17 	ldw	r2,1328(sp)
  80669c:	b8c00007 	ldb	r3,0(r23)
  8066a0:	10800054 	ori	r2,r2,1
  8066a4:	d8814c15 	stw	r2,1328(sp)
  8066a8:	003c1606 	br	805704 <___vfprintf_internal_r+0x1fc>
  8066ac:	d8800407 	ldb	r2,16(sp)
  8066b0:	10004c1e 	bne	r2,zero,8067e4 <___vfprintf_internal_r+0x12dc>
  8066b4:	00800804 	movi	r2,32
  8066b8:	d8800405 	stb	r2,16(sp)
  8066bc:	b8c00007 	ldb	r3,0(r23)
  8066c0:	003c1006 	br	805704 <___vfprintf_internal_r+0x1fc>
  8066c4:	d9814c17 	ldw	r6,1328(sp)
  8066c8:	b8c00007 	ldb	r3,0(r23)
  8066cc:	31800214 	ori	r6,r6,8
  8066d0:	d9814c15 	stw	r6,1328(sp)
  8066d4:	003c0b06 	br	805704 <___vfprintf_internal_r+0x1fc>
  8066d8:	0009883a 	mov	r4,zero
  8066dc:	04000244 	movi	r16,9
  8066e0:	01400284 	movi	r5,10
  8066e4:	d9c15115 	stw	r7,1348(sp)
  8066e8:	0801fec0 	call	801fec <__mulsi3>
  8066ec:	b9000007 	ldb	r4,0(r23)
  8066f0:	d8c14d17 	ldw	r3,1332(sp)
  8066f4:	bdc00044 	addi	r23,r23,1
  8066f8:	d9014d15 	stw	r4,1332(sp)
  8066fc:	d9414d17 	ldw	r5,1332(sp)
  806700:	1885883a 	add	r2,r3,r2
  806704:	113ff404 	addi	r4,r2,-48
  806708:	28bff404 	addi	r2,r5,-48
  80670c:	d9c15117 	ldw	r7,1348(sp)
  806710:	80bff32e 	bgeu	r16,r2,8066e0 <___vfprintf_internal_r+0x11d8>
  806714:	d9014a15 	stw	r4,1320(sp)
  806718:	003bfc06 	br	80570c <___vfprintf_internal_r+0x204>
  80671c:	d8814c17 	ldw	r2,1328(sp)
  806720:	b8c00007 	ldb	r3,0(r23)
  806724:	10802014 	ori	r2,r2,128
  806728:	d8814c15 	stw	r2,1328(sp)
  80672c:	003bf506 	br	805704 <___vfprintf_internal_r+0x1fc>
  806730:	b8c00007 	ldb	r3,0(r23)
  806734:	00800a84 	movi	r2,42
  806738:	bdc00044 	addi	r23,r23,1
  80673c:	18831826 	beq	r3,r2,8073a0 <___vfprintf_internal_r+0x1e98>
  806740:	d8c14d15 	stw	r3,1332(sp)
  806744:	18bff404 	addi	r2,r3,-48
  806748:	00c00244 	movi	r3,9
  80674c:	18827b36 	bltu	r3,r2,80713c <___vfprintf_internal_r+0x1c34>
  806750:	1821883a 	mov	r16,r3
  806754:	0009883a 	mov	r4,zero
  806758:	01400284 	movi	r5,10
  80675c:	d9c15115 	stw	r7,1348(sp)
  806760:	0801fec0 	call	801fec <__mulsi3>
  806764:	d9414d17 	ldw	r5,1332(sp)
  806768:	b9800007 	ldb	r6,0(r23)
  80676c:	d9c15117 	ldw	r7,1348(sp)
  806770:	1145883a 	add	r2,r2,r5
  806774:	113ff404 	addi	r4,r2,-48
  806778:	30bff404 	addi	r2,r6,-48
  80677c:	d9814d15 	stw	r6,1332(sp)
  806780:	bdc00044 	addi	r23,r23,1
  806784:	80bff42e 	bgeu	r16,r2,806758 <___vfprintf_internal_r+0x1250>
  806788:	2027883a 	mov	r19,r4
  80678c:	203bdf0e 	bge	r4,zero,80570c <___vfprintf_internal_r+0x204>
  806790:	04ffffc4 	movi	r19,-1
  806794:	003bdd06 	br	80570c <___vfprintf_internal_r+0x204>
  806798:	d8000405 	stb	zero,16(sp)
  80679c:	39800017 	ldw	r6,0(r7)
  8067a0:	39c00104 	addi	r7,r7,4
  8067a4:	d9c14015 	stw	r7,1280(sp)
  8067a8:	d9814115 	stw	r6,1284(sp)
  8067ac:	3001c926 	beq	r6,zero,806ed4 <___vfprintf_internal_r+0x19cc>
  8067b0:	98000e16 	blt	r19,zero,8067ec <___vfprintf_internal_r+0x12e4>
  8067b4:	d9014117 	ldw	r4,1284(sp)
  8067b8:	000b883a 	mov	r5,zero
  8067bc:	980d883a 	mov	r6,r19
  8067c0:	08047e00 	call	8047e0 <memchr>
  8067c4:	10025926 	beq	r2,zero,80712c <___vfprintf_internal_r+0x1c24>
  8067c8:	d8c14117 	ldw	r3,1284(sp)
  8067cc:	10cfc83a 	sub	r7,r2,r3
  8067d0:	99c19e16 	blt	r19,r7,806e4c <___vfprintf_internal_r+0x1944>
  8067d4:	d9c14515 	stw	r7,1300(sp)
  8067d8:	38000916 	blt	r7,zero,806800 <___vfprintf_internal_r+0x12f8>
  8067dc:	d8014615 	stw	zero,1304(sp)
  8067e0:	003deb06 	br	805f90 <___vfprintf_internal_r+0xa88>
  8067e4:	b8c00007 	ldb	r3,0(r23)
  8067e8:	003bc606 	br	805704 <___vfprintf_internal_r+0x1fc>
  8067ec:	d9014117 	ldw	r4,1284(sp)
  8067f0:	08050b00 	call	8050b0 <strlen>
  8067f4:	d8814515 	stw	r2,1300(sp)
  8067f8:	100f883a 	mov	r7,r2
  8067fc:	103ff70e 	bge	r2,zero,8067dc <___vfprintf_internal_r+0x12d4>
  806800:	d8014515 	stw	zero,1300(sp)
  806804:	d8014615 	stw	zero,1304(sp)
  806808:	003de106 	br	805f90 <___vfprintf_internal_r+0xa88>
  80680c:	20c03fcc 	andi	r3,r4,255
  806810:	00800044 	movi	r2,1
  806814:	18802d26 	beq	r3,r2,8068cc <___vfprintf_internal_r+0x13c4>
  806818:	18800e36 	bltu	r3,r2,806854 <___vfprintf_internal_r+0x134c>
  80681c:	00800084 	movi	r2,2
  806820:	1880fa26 	beq	r3,r2,806c0c <___vfprintf_internal_r+0x1704>
  806824:	01002074 	movhi	r4,129
  806828:	2113f104 	addi	r4,r4,20420
  80682c:	08050b00 	call	8050b0 <strlen>
  806830:	100f883a 	mov	r7,r2
  806834:	dcc14515 	stw	r19,1300(sp)
  806838:	9880010e 	bge	r19,r2,806840 <___vfprintf_internal_r+0x1338>
  80683c:	d8814515 	stw	r2,1300(sp)
  806840:	00802074 	movhi	r2,129
  806844:	1093f104 	addi	r2,r2,20420
  806848:	dcc14615 	stw	r19,1304(sp)
  80684c:	d8814115 	stw	r2,1284(sp)
  806850:	003dcf06 	br	805f90 <___vfprintf_internal_r+0xa88>
  806854:	d9401904 	addi	r5,sp,100
  806858:	dd000f04 	addi	r20,sp,60
  80685c:	d9414115 	stw	r5,1284(sp)
  806860:	880a977a 	slli	r5,r17,29
  806864:	d9814117 	ldw	r6,1284(sp)
  806868:	8004d0fa 	srli	r2,r16,3
  80686c:	8806d0fa 	srli	r3,r17,3
  806870:	810001cc 	andi	r4,r16,7
  806874:	2884b03a 	or	r2,r5,r2
  806878:	31bfffc4 	addi	r6,r6,-1
  80687c:	21000c04 	addi	r4,r4,48
  806880:	d9814115 	stw	r6,1284(sp)
  806884:	10cab03a 	or	r5,r2,r3
  806888:	31000005 	stb	r4,0(r6)
  80688c:	1021883a 	mov	r16,r2
  806890:	1823883a 	mov	r17,r3
  806894:	283ff21e 	bne	r5,zero,806860 <___vfprintf_internal_r+0x1358>
  806898:	d8c14c17 	ldw	r3,1328(sp)
  80689c:	1880004c 	andi	r2,r3,1
  8068a0:	1005003a 	cmpeq	r2,r2,zero
  8068a4:	103db31e 	bne	r2,zero,805f74 <___vfprintf_internal_r+0xa6c>
  8068a8:	20803fcc 	andi	r2,r4,255
  8068ac:	1080201c 	xori	r2,r2,128
  8068b0:	10bfe004 	addi	r2,r2,-128
  8068b4:	00c00c04 	movi	r3,48
  8068b8:	10fdae26 	beq	r2,r3,805f74 <___vfprintf_internal_r+0xa6c>
  8068bc:	31bfffc4 	addi	r6,r6,-1
  8068c0:	d9814115 	stw	r6,1284(sp)
  8068c4:	30c00005 	stb	r3,0(r6)
  8068c8:	003daa06 	br	805f74 <___vfprintf_internal_r+0xa6c>
  8068cc:	88800068 	cmpgeui	r2,r17,1
  8068d0:	10002c1e 	bne	r2,zero,806984 <___vfprintf_internal_r+0x147c>
  8068d4:	8800021e 	bne	r17,zero,8068e0 <___vfprintf_internal_r+0x13d8>
  8068d8:	00800244 	movi	r2,9
  8068dc:	14002936 	bltu	r2,r16,806984 <___vfprintf_internal_r+0x147c>
  8068e0:	d90018c4 	addi	r4,sp,99
  8068e4:	dd000f04 	addi	r20,sp,60
  8068e8:	d9014115 	stw	r4,1284(sp)
  8068ec:	d9014117 	ldw	r4,1284(sp)
  8068f0:	80800c04 	addi	r2,r16,48
  8068f4:	20800005 	stb	r2,0(r4)
  8068f8:	003d9e06 	br	805f74 <___vfprintf_internal_r+0xa6c>
  8068fc:	dc400d17 	ldw	r17,52(sp)
  806900:	07002074 	movhi	fp,129
  806904:	e713f884 	addi	fp,fp,20450
  806908:	9425883a 	add	r18,r18,r16
  80690c:	8c400044 	addi	r17,r17,1
  806910:	008001c4 	movi	r2,7
  806914:	1f000015 	stw	fp,0(r3)
  806918:	1c000115 	stw	r16,4(r3)
  80691c:	dc800e15 	stw	r18,56(sp)
  806920:	dc400d15 	stw	r17,52(sp)
  806924:	147ddc16 	blt	r2,r17,806098 <___vfprintf_internal_r+0xb90>
  806928:	18c00204 	addi	r3,r3,8
  80692c:	003c7406 	br	805b00 <___vfprintf_internal_r+0x5f8>
  806930:	01000084 	movi	r4,2
  806934:	d8000405 	stb	zero,16(sp)
  806938:	003d8106 	br	805f40 <___vfprintf_internal_r+0xa38>
  80693c:	d9814c17 	ldw	r6,1328(sp)
  806940:	30c4703a 	and	r2,r6,r3
  806944:	1005003a 	cmpeq	r2,r2,zero
  806948:	103cb326 	beq	r2,zero,805c18 <___vfprintf_internal_r+0x710>
  80694c:	d9014117 	ldw	r4,1284(sp)
  806950:	94800044 	addi	r18,r18,1
  806954:	8c400044 	addi	r17,r17,1
  806958:	008001c4 	movi	r2,7
  80695c:	a9000015 	stw	r4,0(r21)
  806960:	a8c00115 	stw	r3,4(r21)
  806964:	dc800e15 	stw	r18,56(sp)
  806968:	dc400d15 	stw	r17,52(sp)
  80696c:	147e6016 	blt	r2,r17,8062f0 <___vfprintf_internal_r+0xde8>
  806970:	acc00204 	addi	r19,r21,8
  806974:	003cd106 	br	805cbc <___vfprintf_internal_r+0x7b4>
  806978:	07002074 	movhi	fp,129
  80697c:	e713f884 	addi	fp,fp,20450
  806980:	003c4906 	br	805aa8 <___vfprintf_internal_r+0x5a0>
  806984:	dd000f04 	addi	r20,sp,60
  806988:	dc801904 	addi	r18,sp,100
  80698c:	8009883a 	mov	r4,r16
  806990:	880b883a 	mov	r5,r17
  806994:	01800284 	movi	r6,10
  806998:	000f883a 	mov	r7,zero
  80699c:	08100300 	call	810030 <__umoddi3>
  8069a0:	12000c04 	addi	r8,r2,48
  8069a4:	94bfffc4 	addi	r18,r18,-1
  8069a8:	8009883a 	mov	r4,r16
  8069ac:	880b883a 	mov	r5,r17
  8069b0:	01800284 	movi	r6,10
  8069b4:	000f883a 	mov	r7,zero
  8069b8:	92000005 	stb	r8,0(r18)
  8069bc:	080f9c40 	call	80f9c4 <__udivdi3>
  8069c0:	1009883a 	mov	r4,r2
  8069c4:	1021883a 	mov	r16,r2
  8069c8:	18800068 	cmpgeui	r2,r3,1
  8069cc:	1823883a 	mov	r17,r3
  8069d0:	103fee1e 	bne	r2,zero,80698c <___vfprintf_internal_r+0x1484>
  8069d4:	1800021e 	bne	r3,zero,8069e0 <___vfprintf_internal_r+0x14d8>
  8069d8:	00800244 	movi	r2,9
  8069dc:	113feb36 	bltu	r2,r4,80698c <___vfprintf_internal_r+0x1484>
  8069e0:	94bfffc4 	addi	r18,r18,-1
  8069e4:	dc814115 	stw	r18,1284(sp)
  8069e8:	003fc006 	br	8068ec <___vfprintf_internal_r+0x13e4>
  8069ec:	d9014c17 	ldw	r4,1328(sp)
  8069f0:	2080004c 	andi	r2,r4,1
  8069f4:	10009a1e 	bne	r2,zero,806c60 <___vfprintf_internal_r+0x1758>
  8069f8:	d9401904 	addi	r5,sp,100
  8069fc:	dd000f04 	addi	r20,sp,60
  806a00:	d9414115 	stw	r5,1284(sp)
  806a04:	003d5b06 	br	805f74 <___vfprintf_internal_r+0xa6c>
  806a08:	d9014f17 	ldw	r4,1340(sp)
  806a0c:	b00b883a 	mov	r5,r22
  806a10:	d9800c04 	addi	r6,sp,48
  806a14:	08054b00 	call	8054b0 <__sprint_r>
  806a18:	103c731e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806a1c:	dc800e17 	ldw	r18,56(sp)
  806a20:	d8c01904 	addi	r3,sp,100
  806a24:	003cf906 	br	805e0c <___vfprintf_internal_r+0x904>
  806a28:	d8c14c17 	ldw	r3,1328(sp)
  806a2c:	1880040c 	andi	r2,r3,16
  806a30:	1000711e 	bne	r2,zero,806bf8 <___vfprintf_internal_r+0x16f0>
  806a34:	d9014c17 	ldw	r4,1328(sp)
  806a38:	2080100c 	andi	r2,r4,64
  806a3c:	10006e26 	beq	r2,zero,806bf8 <___vfprintf_internal_r+0x16f0>
  806a40:	3c00000b 	ldhu	r16,0(r7)
  806a44:	0023883a 	mov	r17,zero
  806a48:	39c00104 	addi	r7,r7,4
  806a4c:	d9c14015 	stw	r7,1280(sp)
  806a50:	003efa06 	br	80663c <___vfprintf_internal_r+0x1134>
  806a54:	dc400d17 	ldw	r17,52(sp)
  806a58:	07002074 	movhi	fp,129
  806a5c:	e713f884 	addi	fp,fp,20450
  806a60:	9425883a 	add	r18,r18,r16
  806a64:	8c400044 	addi	r17,r17,1
  806a68:	008001c4 	movi	r2,7
  806a6c:	1f000015 	stw	fp,0(r3)
  806a70:	1c000115 	stw	r16,4(r3)
  806a74:	dc800e15 	stw	r18,56(sp)
  806a78:	dc400d15 	stw	r17,52(sp)
  806a7c:	147d7016 	blt	r2,r17,806040 <___vfprintf_internal_r+0xb38>
  806a80:	18c00204 	addi	r3,r3,8
  806a84:	003d7506 	br	80605c <___vfprintf_internal_r+0xb54>
  806a88:	dc800e17 	ldw	r18,56(sp)
  806a8c:	dc400d17 	ldw	r17,52(sp)
  806a90:	07002074 	movhi	fp,129
  806a94:	e713fc84 	addi	fp,fp,20466
  806a98:	003bba06 	br	805984 <___vfprintf_internal_r+0x47c>
  806a9c:	d9014f17 	ldw	r4,1340(sp)
  806aa0:	b00b883a 	mov	r5,r22
  806aa4:	d9800c04 	addi	r6,sp,48
  806aa8:	08054b00 	call	8054b0 <__sprint_r>
  806aac:	103c4e1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806ab0:	dc800e17 	ldw	r18,56(sp)
  806ab4:	d8c01904 	addi	r3,sp,100
  806ab8:	003ce306 	br	805e48 <___vfprintf_internal_r+0x940>
  806abc:	3c000017 	ldw	r16,0(r7)
  806ac0:	0009883a 	mov	r4,zero
  806ac4:	39c00104 	addi	r7,r7,4
  806ac8:	0023883a 	mov	r17,zero
  806acc:	d9c14015 	stw	r7,1280(sp)
  806ad0:	d8000405 	stb	zero,16(sp)
  806ad4:	003d1a06 	br	805f40 <___vfprintf_internal_r+0xa38>
  806ad8:	38800017 	ldw	r2,0(r7)
  806adc:	39c00104 	addi	r7,r7,4
  806ae0:	d9c14015 	stw	r7,1280(sp)
  806ae4:	1023d7fa 	srai	r17,r2,31
  806ae8:	1021883a 	mov	r16,r2
  806aec:	003d1206 	br	805f38 <___vfprintf_internal_r+0xa30>
  806af0:	3c000017 	ldw	r16,0(r7)
  806af4:	01000044 	movi	r4,1
  806af8:	39c00104 	addi	r7,r7,4
  806afc:	0023883a 	mov	r17,zero
  806b00:	d9c14015 	stw	r7,1280(sp)
  806b04:	d8000405 	stb	zero,16(sp)
  806b08:	003d0d06 	br	805f40 <___vfprintf_internal_r+0xa38>
  806b0c:	00802074 	movhi	r2,129
  806b10:	1093f804 	addi	r2,r2,20448
  806b14:	94800044 	addi	r18,r18,1
  806b18:	8c400044 	addi	r17,r17,1
  806b1c:	a8800015 	stw	r2,0(r21)
  806b20:	00c00044 	movi	r3,1
  806b24:	008001c4 	movi	r2,7
  806b28:	a8c00115 	stw	r3,4(r21)
  806b2c:	dc800e15 	stw	r18,56(sp)
  806b30:	dc400d15 	stw	r17,52(sp)
  806b34:	1440ca16 	blt	r2,r17,806e60 <___vfprintf_internal_r+0x1958>
  806b38:	a8c00204 	addi	r3,r21,8
  806b3c:	2000061e 	bne	r4,zero,806b58 <___vfprintf_internal_r+0x1650>
  806b40:	d9414717 	ldw	r5,1308(sp)
  806b44:	2800041e 	bne	r5,zero,806b58 <___vfprintf_internal_r+0x1650>
  806b48:	d9814c17 	ldw	r6,1328(sp)
  806b4c:	3080004c 	andi	r2,r6,1
  806b50:	1005003a 	cmpeq	r2,r2,zero
  806b54:	103bea1e 	bne	r2,zero,805b00 <___vfprintf_internal_r+0x5f8>
  806b58:	00800044 	movi	r2,1
  806b5c:	dc400d17 	ldw	r17,52(sp)
  806b60:	18800115 	stw	r2,4(r3)
  806b64:	d8814917 	ldw	r2,1316(sp)
  806b68:	94800044 	addi	r18,r18,1
  806b6c:	8c400044 	addi	r17,r17,1
  806b70:	18800015 	stw	r2,0(r3)
  806b74:	008001c4 	movi	r2,7
  806b78:	dc800e15 	stw	r18,56(sp)
  806b7c:	dc400d15 	stw	r17,52(sp)
  806b80:	1440ca16 	blt	r2,r17,806eac <___vfprintf_internal_r+0x19a4>
  806b84:	18c00204 	addi	r3,r3,8
  806b88:	0121c83a 	sub	r16,zero,r4
  806b8c:	0400500e 	bge	zero,r16,806cd0 <___vfprintf_internal_r+0x17c8>
  806b90:	00800404 	movi	r2,16
  806b94:	1400800e 	bge	r2,r16,806d98 <___vfprintf_internal_r+0x1890>
  806b98:	1027883a 	mov	r19,r2
  806b9c:	07002074 	movhi	fp,129
  806ba0:	e713f884 	addi	fp,fp,20450
  806ba4:	050001c4 	movi	r20,7
  806ba8:	00000306 	br	806bb8 <___vfprintf_internal_r+0x16b0>
  806bac:	18c00204 	addi	r3,r3,8
  806bb0:	843ffc04 	addi	r16,r16,-16
  806bb4:	9c007a0e 	bge	r19,r16,806da0 <___vfprintf_internal_r+0x1898>
  806bb8:	94800404 	addi	r18,r18,16
  806bbc:	8c400044 	addi	r17,r17,1
  806bc0:	1f000015 	stw	fp,0(r3)
  806bc4:	1cc00115 	stw	r19,4(r3)
  806bc8:	dc800e15 	stw	r18,56(sp)
  806bcc:	dc400d15 	stw	r17,52(sp)
  806bd0:	a47ff60e 	bge	r20,r17,806bac <___vfprintf_internal_r+0x16a4>
  806bd4:	d9014f17 	ldw	r4,1340(sp)
  806bd8:	b00b883a 	mov	r5,r22
  806bdc:	d9800c04 	addi	r6,sp,48
  806be0:	08054b00 	call	8054b0 <__sprint_r>
  806be4:	103c001e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806be8:	dc800e17 	ldw	r18,56(sp)
  806bec:	dc400d17 	ldw	r17,52(sp)
  806bf0:	d8c01904 	addi	r3,sp,100
  806bf4:	003fee06 	br	806bb0 <___vfprintf_internal_r+0x16a8>
  806bf8:	3c000017 	ldw	r16,0(r7)
  806bfc:	0023883a 	mov	r17,zero
  806c00:	39c00104 	addi	r7,r7,4
  806c04:	d9c14015 	stw	r7,1280(sp)
  806c08:	003e8c06 	br	80663c <___vfprintf_internal_r+0x1134>
  806c0c:	d9401904 	addi	r5,sp,100
  806c10:	dd000f04 	addi	r20,sp,60
  806c14:	d9414115 	stw	r5,1284(sp)
  806c18:	d9814417 	ldw	r6,1296(sp)
  806c1c:	880a973a 	slli	r5,r17,28
  806c20:	8004d13a 	srli	r2,r16,4
  806c24:	810003cc 	andi	r4,r16,15
  806c28:	3109883a 	add	r4,r6,r4
  806c2c:	2884b03a 	or	r2,r5,r2
  806c30:	21400003 	ldbu	r5,0(r4)
  806c34:	d9014117 	ldw	r4,1284(sp)
  806c38:	8806d13a 	srli	r3,r17,4
  806c3c:	1021883a 	mov	r16,r2
  806c40:	213fffc4 	addi	r4,r4,-1
  806c44:	d9014115 	stw	r4,1284(sp)
  806c48:	d9814117 	ldw	r6,1284(sp)
  806c4c:	10c8b03a 	or	r4,r2,r3
  806c50:	1823883a 	mov	r17,r3
  806c54:	31400005 	stb	r5,0(r6)
  806c58:	203fef1e 	bne	r4,zero,806c18 <___vfprintf_internal_r+0x1710>
  806c5c:	003cc506 	br	805f74 <___vfprintf_internal_r+0xa6c>
  806c60:	00800c04 	movi	r2,48
  806c64:	d98018c4 	addi	r6,sp,99
  806c68:	dd000f04 	addi	r20,sp,60
  806c6c:	d88018c5 	stb	r2,99(sp)
  806c70:	d9814115 	stw	r6,1284(sp)
  806c74:	003cbf06 	br	805f74 <___vfprintf_internal_r+0xa6c>
  806c78:	dc400d17 	ldw	r17,52(sp)
  806c7c:	07002074 	movhi	fp,129
  806c80:	e713fc84 	addi	fp,fp,20466
  806c84:	003bc106 	br	805b8c <___vfprintf_internal_r+0x684>
  806c88:	d9414c17 	ldw	r5,1328(sp)
  806c8c:	2880040c 	andi	r2,r5,16
  806c90:	10007c26 	beq	r2,zero,806e84 <___vfprintf_internal_r+0x197c>
  806c94:	38800017 	ldw	r2,0(r7)
  806c98:	39c00104 	addi	r7,r7,4
  806c9c:	d9c14015 	stw	r7,1280(sp)
  806ca0:	d9814b17 	ldw	r6,1324(sp)
  806ca4:	d9c14017 	ldw	r7,1280(sp)
  806ca8:	11800015 	stw	r6,0(r2)
  806cac:	003a7206 	br	805678 <___vfprintf_internal_r+0x170>
  806cb0:	d9014f17 	ldw	r4,1340(sp)
  806cb4:	b00b883a 	mov	r5,r22
  806cb8:	d9800c04 	addi	r6,sp,48
  806cbc:	08054b00 	call	8054b0 <__sprint_r>
  806cc0:	103bc91e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806cc4:	dc800e17 	ldw	r18,56(sp)
  806cc8:	dc400d17 	ldw	r17,52(sp)
  806ccc:	d8c01904 	addi	r3,sp,100
  806cd0:	d9014717 	ldw	r4,1308(sp)
  806cd4:	d9414117 	ldw	r5,1284(sp)
  806cd8:	8c400044 	addi	r17,r17,1
  806cdc:	9125883a 	add	r18,r18,r4
  806ce0:	008001c4 	movi	r2,7
  806ce4:	19400015 	stw	r5,0(r3)
  806ce8:	19000115 	stw	r4,4(r3)
  806cec:	dc800e15 	stw	r18,56(sp)
  806cf0:	dc400d15 	stw	r17,52(sp)
  806cf4:	147ce816 	blt	r2,r17,806098 <___vfprintf_internal_r+0xb90>
  806cf8:	18c00204 	addi	r3,r3,8
  806cfc:	003b8006 	br	805b00 <___vfprintf_internal_r+0x5f8>
  806d00:	38c00017 	ldw	r3,0(r7)
  806d04:	39000204 	addi	r4,r7,8
  806d08:	d9014015 	stw	r4,1280(sp)
  806d0c:	d8c14215 	stw	r3,1288(sp)
  806d10:	39c00117 	ldw	r7,4(r7)
  806d14:	d9c14315 	stw	r7,1292(sp)
  806d18:	003e1a06 	br	806584 <___vfprintf_internal_r+0x107c>
  806d1c:	0005883a 	mov	r2,zero
  806d20:	1409c83a 	sub	r4,r2,r16
  806d24:	1105803a 	cmpltu	r2,r2,r4
  806d28:	044bc83a 	sub	r5,zero,r17
  806d2c:	2885c83a 	sub	r2,r5,r2
  806d30:	2021883a 	mov	r16,r4
  806d34:	1023883a 	mov	r17,r2
  806d38:	01000044 	movi	r4,1
  806d3c:	00800b44 	movi	r2,45
  806d40:	d8800405 	stb	r2,16(sp)
  806d44:	003c7e06 	br	805f40 <___vfprintf_internal_r+0xa38>
  806d48:	d9014f17 	ldw	r4,1340(sp)
  806d4c:	b00b883a 	mov	r5,r22
  806d50:	d9800c04 	addi	r6,sp,48
  806d54:	08054b00 	call	8054b0 <__sprint_r>
  806d58:	103ba31e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806d5c:	dc800e17 	ldw	r18,56(sp)
  806d60:	dc400d17 	ldw	r17,52(sp)
  806d64:	d9000517 	ldw	r4,20(sp)
  806d68:	d9401904 	addi	r5,sp,100
  806d6c:	003da106 	br	8063f4 <___vfprintf_internal_r+0xeec>
  806d70:	d9014f17 	ldw	r4,1340(sp)
  806d74:	b00b883a 	mov	r5,r22
  806d78:	d9800c04 	addi	r6,sp,48
  806d7c:	08054b00 	call	8054b0 <__sprint_r>
  806d80:	103b991e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806d84:	dc800e17 	ldw	r18,56(sp)
  806d88:	dc400d17 	ldw	r17,52(sp)
  806d8c:	d9000517 	ldw	r4,20(sp)
  806d90:	d8c01904 	addi	r3,sp,100
  806d94:	003d8b06 	br	8063c4 <___vfprintf_internal_r+0xebc>
  806d98:	07002074 	movhi	fp,129
  806d9c:	e713f884 	addi	fp,fp,20450
  806da0:	9425883a 	add	r18,r18,r16
  806da4:	8c400044 	addi	r17,r17,1
  806da8:	008001c4 	movi	r2,7
  806dac:	1f000015 	stw	fp,0(r3)
  806db0:	1c000115 	stw	r16,4(r3)
  806db4:	dc800e15 	stw	r18,56(sp)
  806db8:	dc400d15 	stw	r17,52(sp)
  806dbc:	147fbc16 	blt	r2,r17,806cb0 <___vfprintf_internal_r+0x17a8>
  806dc0:	18c00204 	addi	r3,r3,8
  806dc4:	003fc206 	br	806cd0 <___vfprintf_internal_r+0x17c8>
  806dc8:	d9014f17 	ldw	r4,1340(sp)
  806dcc:	b00b883a 	mov	r5,r22
  806dd0:	d9800c04 	addi	r6,sp,48
  806dd4:	08054b00 	call	8054b0 <__sprint_r>
  806dd8:	103b831e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806ddc:	dc800e17 	ldw	r18,56(sp)
  806de0:	d9000517 	ldw	r4,20(sp)
  806de4:	d8c01904 	addi	r3,sp,100
  806de8:	003cfc06 	br	8061dc <___vfprintf_internal_r+0xcd4>
  806dec:	07002074 	movhi	fp,129
  806df0:	e713f884 	addi	fp,fp,20450
  806df4:	003bde06 	br	805d70 <___vfprintf_internal_r+0x868>
  806df8:	00802074 	movhi	r2,129
  806dfc:	1093e704 	addi	r2,r2,20380
  806e00:	d8814115 	stw	r2,1284(sp)
  806e04:	003def06 	br	8065c4 <___vfprintf_internal_r+0x10bc>
  806e08:	d9014217 	ldw	r4,1288(sp)
  806e0c:	d9414317 	ldw	r5,1292(sp)
  806e10:	080c7740 	call	80c774 <__isnand>
  806e14:	10003926 	beq	r2,zero,806efc <___vfprintf_internal_r+0x19f4>
  806e18:	d9414d17 	ldw	r5,1332(sp)
  806e1c:	008011c4 	movi	r2,71
  806e20:	1140ce16 	blt	r2,r5,80715c <___vfprintf_internal_r+0x1c54>
  806e24:	01802074 	movhi	r6,129
  806e28:	3193e804 	addi	r6,r6,20384
  806e2c:	d9814115 	stw	r6,1284(sp)
  806e30:	003de406 	br	8065c4 <___vfprintf_internal_r+0x10bc>
  806e34:	d9014c17 	ldw	r4,1328(sp)
  806e38:	bdc00044 	addi	r23,r23,1
  806e3c:	b8c00007 	ldb	r3,0(r23)
  806e40:	21000814 	ori	r4,r4,32
  806e44:	d9014c15 	stw	r4,1328(sp)
  806e48:	003a2e06 	br	805704 <___vfprintf_internal_r+0x1fc>
  806e4c:	dcc14515 	stw	r19,1300(sp)
  806e50:	98011016 	blt	r19,zero,807294 <___vfprintf_internal_r+0x1d8c>
  806e54:	980f883a 	mov	r7,r19
  806e58:	d8014615 	stw	zero,1304(sp)
  806e5c:	003c4c06 	br	805f90 <___vfprintf_internal_r+0xa88>
  806e60:	d9014f17 	ldw	r4,1340(sp)
  806e64:	b00b883a 	mov	r5,r22
  806e68:	d9800c04 	addi	r6,sp,48
  806e6c:	08054b00 	call	8054b0 <__sprint_r>
  806e70:	103b5d1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806e74:	dc800e17 	ldw	r18,56(sp)
  806e78:	d9000517 	ldw	r4,20(sp)
  806e7c:	d8c01904 	addi	r3,sp,100
  806e80:	003f2e06 	br	806b3c <___vfprintf_internal_r+0x1634>
  806e84:	d8c14c17 	ldw	r3,1328(sp)
  806e88:	1880100c 	andi	r2,r3,64
  806e8c:	1000a026 	beq	r2,zero,807110 <___vfprintf_internal_r+0x1c08>
  806e90:	38800017 	ldw	r2,0(r7)
  806e94:	39c00104 	addi	r7,r7,4
  806e98:	d9c14015 	stw	r7,1280(sp)
  806e9c:	d9014b17 	ldw	r4,1324(sp)
  806ea0:	d9c14017 	ldw	r7,1280(sp)
  806ea4:	1100000d 	sth	r4,0(r2)
  806ea8:	0039f306 	br	805678 <___vfprintf_internal_r+0x170>
  806eac:	d9014f17 	ldw	r4,1340(sp)
  806eb0:	b00b883a 	mov	r5,r22
  806eb4:	d9800c04 	addi	r6,sp,48
  806eb8:	08054b00 	call	8054b0 <__sprint_r>
  806ebc:	103b4a1e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  806ec0:	dc800e17 	ldw	r18,56(sp)
  806ec4:	dc400d17 	ldw	r17,52(sp)
  806ec8:	d9000517 	ldw	r4,20(sp)
  806ecc:	d8c01904 	addi	r3,sp,100
  806ed0:	003f2d06 	br	806b88 <___vfprintf_internal_r+0x1680>
  806ed4:	00800184 	movi	r2,6
  806ed8:	14c09a36 	bltu	r2,r19,807144 <___vfprintf_internal_r+0x1c3c>
  806edc:	dcc14515 	stw	r19,1300(sp)
  806ee0:	9800010e 	bge	r19,zero,806ee8 <___vfprintf_internal_r+0x19e0>
  806ee4:	d8014515 	stw	zero,1300(sp)
  806ee8:	00802074 	movhi	r2,129
  806eec:	1093ea04 	addi	r2,r2,20392
  806ef0:	980f883a 	mov	r7,r19
  806ef4:	d8814115 	stw	r2,1284(sp)
  806ef8:	003a7206 	br	8058c4 <___vfprintf_internal_r+0x3bc>
  806efc:	00bfffc4 	movi	r2,-1
  806f00:	9880e226 	beq	r19,r2,80728c <___vfprintf_internal_r+0x1d84>
  806f04:	d9414d17 	ldw	r5,1332(sp)
  806f08:	008019c4 	movi	r2,103
  806f0c:	2880dc26 	beq	r5,r2,807280 <___vfprintf_internal_r+0x1d78>
  806f10:	008011c4 	movi	r2,71
  806f14:	2880da26 	beq	r5,r2,807280 <___vfprintf_internal_r+0x1d78>
  806f18:	d9414c17 	ldw	r5,1328(sp)
  806f1c:	d9014317 	ldw	r4,1292(sp)
  806f20:	d9814217 	ldw	r6,1288(sp)
  806f24:	29404014 	ori	r5,r5,256
  806f28:	d9414c15 	stw	r5,1328(sp)
  806f2c:	2000cc16 	blt	r4,zero,807260 <___vfprintf_internal_r+0x1d58>
  806f30:	3021883a 	mov	r16,r6
  806f34:	2023883a 	mov	r17,r4
  806f38:	0039883a 	mov	fp,zero
  806f3c:	d9414d17 	ldw	r5,1332(sp)
  806f40:	00801984 	movi	r2,102
  806f44:	2880b726 	beq	r5,r2,807224 <___vfprintf_internal_r+0x1d1c>
  806f48:	00801184 	movi	r2,70
  806f4c:	2880b526 	beq	r5,r2,807224 <___vfprintf_internal_r+0x1d1c>
  806f50:	00801944 	movi	r2,101
  806f54:	2880c826 	beq	r5,r2,807278 <___vfprintf_internal_r+0x1d70>
  806f58:	00801144 	movi	r2,69
  806f5c:	2880c626 	beq	r5,r2,807278 <___vfprintf_internal_r+0x1d70>
  806f60:	9829883a 	mov	r20,r19
  806f64:	d9014f17 	ldw	r4,1340(sp)
  806f68:	d8800504 	addi	r2,sp,20
  806f6c:	880d883a 	mov	r6,r17
  806f70:	d8800115 	stw	r2,4(sp)
  806f74:	d8c00604 	addi	r3,sp,24
  806f78:	d8800704 	addi	r2,sp,28
  806f7c:	800b883a 	mov	r5,r16
  806f80:	01c00084 	movi	r7,2
  806f84:	d8c00215 	stw	r3,8(sp)
  806f88:	d8800315 	stw	r2,12(sp)
  806f8c:	dd000015 	stw	r20,0(sp)
  806f90:	08091940 	call	809194 <_dtoa_r>
  806f94:	d9814d17 	ldw	r6,1332(sp)
  806f98:	d8814115 	stw	r2,1284(sp)
  806f9c:	008019c4 	movi	r2,103
  806fa0:	30809526 	beq	r6,r2,8071f8 <___vfprintf_internal_r+0x1cf0>
  806fa4:	d8c14d17 	ldw	r3,1332(sp)
  806fa8:	008011c4 	movi	r2,71
  806fac:	18809226 	beq	r3,r2,8071f8 <___vfprintf_internal_r+0x1cf0>
  806fb0:	d9414117 	ldw	r5,1284(sp)
  806fb4:	d9814d17 	ldw	r6,1332(sp)
  806fb8:	00801984 	movi	r2,102
  806fbc:	2d25883a 	add	r18,r5,r20
  806fc0:	30808626 	beq	r6,r2,8071dc <___vfprintf_internal_r+0x1cd4>
  806fc4:	00801184 	movi	r2,70
  806fc8:	30808426 	beq	r6,r2,8071dc <___vfprintf_internal_r+0x1cd4>
  806fcc:	000d883a 	mov	r6,zero
  806fd0:	000f883a 	mov	r7,zero
  806fd4:	880b883a 	mov	r5,r17
  806fd8:	8009883a 	mov	r4,r16
  806fdc:	08110c00 	call	8110c0 <__eqdf2>
  806fe0:	1000751e 	bne	r2,zero,8071b8 <___vfprintf_internal_r+0x1cb0>
  806fe4:	9005883a 	mov	r2,r18
  806fe8:	dc800715 	stw	r18,28(sp)
  806fec:	d9014117 	ldw	r4,1284(sp)
  806ff0:	d9414d17 	ldw	r5,1332(sp)
  806ff4:	00c019c4 	movi	r3,103
  806ff8:	1125c83a 	sub	r18,r2,r4
  806ffc:	28c06826 	beq	r5,r3,8071a0 <___vfprintf_internal_r+0x1c98>
  807000:	008011c4 	movi	r2,71
  807004:	28806626 	beq	r5,r2,8071a0 <___vfprintf_internal_r+0x1c98>
  807008:	d9000517 	ldw	r4,20(sp)
  80700c:	d8c14d17 	ldw	r3,1332(sp)
  807010:	00801944 	movi	r2,101
  807014:	10c05516 	blt	r2,r3,80716c <___vfprintf_internal_r+0x1c64>
  807018:	213fffc4 	addi	r4,r4,-1
  80701c:	d9000515 	stw	r4,20(sp)
  807020:	d8c00805 	stb	r3,32(sp)
  807024:	2021883a 	mov	r16,r4
  807028:	2000c116 	blt	r4,zero,807330 <___vfprintf_internal_r+0x1e28>
  80702c:	00800ac4 	movi	r2,43
  807030:	d8800845 	stb	r2,33(sp)
  807034:	00800244 	movi	r2,9
  807038:	1400af0e 	bge	r2,r16,8072f8 <___vfprintf_internal_r+0x1df0>
  80703c:	1027883a 	mov	r19,r2
  807040:	dc400b84 	addi	r17,sp,46
  807044:	8009883a 	mov	r4,r16
  807048:	01400284 	movi	r5,10
  80704c:	08117100 	call	811710 <__modsi3>
  807050:	10800c04 	addi	r2,r2,48
  807054:	8c7fffc4 	addi	r17,r17,-1
  807058:	8009883a 	mov	r4,r16
  80705c:	01400284 	movi	r5,10
  807060:	88800005 	stb	r2,0(r17)
  807064:	08116b00 	call	8116b0 <__divsi3>
  807068:	1021883a 	mov	r16,r2
  80706c:	98bff516 	blt	r19,r2,807044 <___vfprintf_internal_r+0x1b3c>
  807070:	10c00c04 	addi	r3,r2,48
  807074:	d88009c4 	addi	r2,sp,39
  807078:	108001c4 	addi	r2,r2,7
  80707c:	897fffc4 	addi	r5,r17,-1
  807080:	88ffffc5 	stb	r3,-1(r17)
  807084:	2880a72e 	bgeu	r5,r2,807324 <___vfprintf_internal_r+0x1e1c>
  807088:	1009883a 	mov	r4,r2
  80708c:	d9800804 	addi	r6,sp,32
  807090:	d8c00884 	addi	r3,sp,34
  807094:	28800003 	ldbu	r2,0(r5)
  807098:	29400044 	addi	r5,r5,1
  80709c:	18800005 	stb	r2,0(r3)
  8070a0:	18c00044 	addi	r3,r3,1
  8070a4:	293ffb36 	bltu	r5,r4,807094 <___vfprintf_internal_r+0x1b8c>
  8070a8:	1987c83a 	sub	r3,r3,r6
  8070ac:	00800044 	movi	r2,1
  8070b0:	d8c14815 	stw	r3,1312(sp)
  8070b4:	90cf883a 	add	r7,r18,r3
  8070b8:	1480960e 	bge	r2,r18,807314 <___vfprintf_internal_r+0x1e0c>
  8070bc:	39c00044 	addi	r7,r7,1
  8070c0:	d9c14515 	stw	r7,1300(sp)
  8070c4:	38003416 	blt	r7,zero,807198 <___vfprintf_internal_r+0x1c90>
  8070c8:	e0803fcc 	andi	r2,fp,255
  8070cc:	1080201c 	xori	r2,r2,128
  8070d0:	10bfe004 	addi	r2,r2,-128
  8070d4:	10004e26 	beq	r2,zero,807210 <___vfprintf_internal_r+0x1d08>
  8070d8:	00800b44 	movi	r2,45
  8070dc:	dc814715 	stw	r18,1308(sp)
  8070e0:	d8014615 	stw	zero,1304(sp)
  8070e4:	d8800405 	stb	r2,16(sp)
  8070e8:	003bab06 	br	805f98 <___vfprintf_internal_r+0xa90>
  8070ec:	00800b44 	movi	r2,45
  8070f0:	d8800405 	stb	r2,16(sp)
  8070f4:	003d2d06 	br	8065ac <___vfprintf_internal_r+0x10a4>
  8070f8:	d9014f17 	ldw	r4,1340(sp)
  8070fc:	b00b883a 	mov	r5,r22
  807100:	d9800c04 	addi	r6,sp,48
  807104:	08054b00 	call	8054b0 <__sprint_r>
  807108:	103ab71e 	bne	r2,zero,805be8 <___vfprintf_internal_r+0x6e0>
  80710c:	003ab506 	br	805be4 <___vfprintf_internal_r+0x6dc>
  807110:	38800017 	ldw	r2,0(r7)
  807114:	39c00104 	addi	r7,r7,4
  807118:	d9c14015 	stw	r7,1280(sp)
  80711c:	d9414b17 	ldw	r5,1324(sp)
  807120:	d9c14017 	ldw	r7,1280(sp)
  807124:	11400015 	stw	r5,0(r2)
  807128:	00395306 	br	805678 <___vfprintf_internal_r+0x170>
  80712c:	980f883a 	mov	r7,r19
  807130:	dcc14515 	stw	r19,1300(sp)
  807134:	d8014615 	stw	zero,1304(sp)
  807138:	003b9506 	br	805f90 <___vfprintf_internal_r+0xa88>
  80713c:	0027883a 	mov	r19,zero
  807140:	00397206 	br	80570c <___vfprintf_internal_r+0x204>
  807144:	00c02074 	movhi	r3,129
  807148:	18d3ea04 	addi	r3,r3,20392
  80714c:	100f883a 	mov	r7,r2
  807150:	d8814515 	stw	r2,1300(sp)
  807154:	d8c14115 	stw	r3,1284(sp)
  807158:	0039da06 	br	8058c4 <___vfprintf_internal_r+0x3bc>
  80715c:	00802074 	movhi	r2,129
  807160:	1093e904 	addi	r2,r2,20388
  807164:	d8814115 	stw	r2,1284(sp)
  807168:	003d1606 	br	8065c4 <___vfprintf_internal_r+0x10bc>
  80716c:	d9414d17 	ldw	r5,1332(sp)
  807170:	00801984 	movi	r2,102
  807174:	28804926 	beq	r5,r2,80729c <___vfprintf_internal_r+0x1d94>
  807178:	200f883a 	mov	r7,r4
  80717c:	24805716 	blt	r4,r18,8072dc <___vfprintf_internal_r+0x1dd4>
  807180:	d9414c17 	ldw	r5,1328(sp)
  807184:	2880004c 	andi	r2,r5,1
  807188:	10000126 	beq	r2,zero,807190 <___vfprintf_internal_r+0x1c88>
  80718c:	21c00044 	addi	r7,r4,1
  807190:	d9c14515 	stw	r7,1300(sp)
  807194:	383fcc0e 	bge	r7,zero,8070c8 <___vfprintf_internal_r+0x1bc0>
  807198:	d8014515 	stw	zero,1300(sp)
  80719c:	003fca06 	br	8070c8 <___vfprintf_internal_r+0x1bc0>
  8071a0:	d9000517 	ldw	r4,20(sp)
  8071a4:	00bfff04 	movi	r2,-4
  8071a8:	1100480e 	bge	r2,r4,8072cc <___vfprintf_internal_r+0x1dc4>
  8071ac:	99004716 	blt	r19,r4,8072cc <___vfprintf_internal_r+0x1dc4>
  8071b0:	d8c14d15 	stw	r3,1332(sp)
  8071b4:	003ff006 	br	807178 <___vfprintf_internal_r+0x1c70>
  8071b8:	d8800717 	ldw	r2,28(sp)
  8071bc:	14bf8b2e 	bgeu	r2,r18,806fec <___vfprintf_internal_r+0x1ae4>
  8071c0:	9007883a 	mov	r3,r18
  8071c4:	01000c04 	movi	r4,48
  8071c8:	11000005 	stb	r4,0(r2)
  8071cc:	10800044 	addi	r2,r2,1
  8071d0:	d8800715 	stw	r2,28(sp)
  8071d4:	18bffc1e 	bne	r3,r2,8071c8 <___vfprintf_internal_r+0x1cc0>
  8071d8:	003f8406 	br	806fec <___vfprintf_internal_r+0x1ae4>
  8071dc:	d8814117 	ldw	r2,1284(sp)
  8071e0:	10c00007 	ldb	r3,0(r2)
  8071e4:	00800c04 	movi	r2,48
  8071e8:	18805b26 	beq	r3,r2,807358 <___vfprintf_internal_r+0x1e50>
  8071ec:	d9000517 	ldw	r4,20(sp)
  8071f0:	9125883a 	add	r18,r18,r4
  8071f4:	003f7506 	br	806fcc <___vfprintf_internal_r+0x1ac4>
  8071f8:	d9014c17 	ldw	r4,1328(sp)
  8071fc:	2080004c 	andi	r2,r4,1
  807200:	1005003a 	cmpeq	r2,r2,zero
  807204:	103f6a26 	beq	r2,zero,806fb0 <___vfprintf_internal_r+0x1aa8>
  807208:	d8800717 	ldw	r2,28(sp)
  80720c:	003f7706 	br	806fec <___vfprintf_internal_r+0x1ae4>
  807210:	d9c14515 	stw	r7,1300(sp)
  807214:	38004d16 	blt	r7,zero,80734c <___vfprintf_internal_r+0x1e44>
  807218:	dc814715 	stw	r18,1308(sp)
  80721c:	d8014615 	stw	zero,1304(sp)
  807220:	003b5b06 	br	805f90 <___vfprintf_internal_r+0xa88>
  807224:	d9014f17 	ldw	r4,1340(sp)
  807228:	d8800504 	addi	r2,sp,20
  80722c:	d8800115 	stw	r2,4(sp)
  807230:	d8c00604 	addi	r3,sp,24
  807234:	d8800704 	addi	r2,sp,28
  807238:	800b883a 	mov	r5,r16
  80723c:	880d883a 	mov	r6,r17
  807240:	01c000c4 	movi	r7,3
  807244:	d8c00215 	stw	r3,8(sp)
  807248:	d8800315 	stw	r2,12(sp)
  80724c:	dcc00015 	stw	r19,0(sp)
  807250:	9829883a 	mov	r20,r19
  807254:	08091940 	call	809194 <_dtoa_r>
  807258:	d8814115 	stw	r2,1284(sp)
  80725c:	003f5106 	br	806fa4 <___vfprintf_internal_r+0x1a9c>
  807260:	d8c14217 	ldw	r3,1288(sp)
  807264:	d9014317 	ldw	r4,1292(sp)
  807268:	07000b44 	movi	fp,45
  80726c:	1821883a 	mov	r16,r3
  807270:	2460003c 	xorhi	r17,r4,32768
  807274:	003f3106 	br	806f3c <___vfprintf_internal_r+0x1a34>
  807278:	9d000044 	addi	r20,r19,1
  80727c:	003f3906 	br	806f64 <___vfprintf_internal_r+0x1a5c>
  807280:	983f251e 	bne	r19,zero,806f18 <___vfprintf_internal_r+0x1a10>
  807284:	04c00044 	movi	r19,1
  807288:	003f2306 	br	806f18 <___vfprintf_internal_r+0x1a10>
  80728c:	04c00184 	movi	r19,6
  807290:	003f2106 	br	806f18 <___vfprintf_internal_r+0x1a10>
  807294:	d8014515 	stw	zero,1300(sp)
  807298:	003eee06 	br	806e54 <___vfprintf_internal_r+0x194c>
  80729c:	200f883a 	mov	r7,r4
  8072a0:	0100370e 	bge	zero,r4,807380 <___vfprintf_internal_r+0x1e78>
  8072a4:	9800031e 	bne	r19,zero,8072b4 <___vfprintf_internal_r+0x1dac>
  8072a8:	d9814c17 	ldw	r6,1328(sp)
  8072ac:	3080004c 	andi	r2,r6,1
  8072b0:	103fb726 	beq	r2,zero,807190 <___vfprintf_internal_r+0x1c88>
  8072b4:	20800044 	addi	r2,r4,1
  8072b8:	98a7883a 	add	r19,r19,r2
  8072bc:	dcc14515 	stw	r19,1300(sp)
  8072c0:	980f883a 	mov	r7,r19
  8072c4:	983f800e 	bge	r19,zero,8070c8 <___vfprintf_internal_r+0x1bc0>
  8072c8:	003fb306 	br	807198 <___vfprintf_internal_r+0x1c90>
  8072cc:	d9814d17 	ldw	r6,1332(sp)
  8072d0:	31bfff84 	addi	r6,r6,-2
  8072d4:	d9814d15 	stw	r6,1332(sp)
  8072d8:	003f4c06 	br	80700c <___vfprintf_internal_r+0x1b04>
  8072dc:	0100180e 	bge	zero,r4,807340 <___vfprintf_internal_r+0x1e38>
  8072e0:	00800044 	movi	r2,1
  8072e4:	1485883a 	add	r2,r2,r18
  8072e8:	d8814515 	stw	r2,1300(sp)
  8072ec:	100f883a 	mov	r7,r2
  8072f0:	103f750e 	bge	r2,zero,8070c8 <___vfprintf_internal_r+0x1bc0>
  8072f4:	003fa806 	br	807198 <___vfprintf_internal_r+0x1c90>
  8072f8:	80c00c04 	addi	r3,r16,48
  8072fc:	00800c04 	movi	r2,48
  807300:	d8c008c5 	stb	r3,35(sp)
  807304:	d9800804 	addi	r6,sp,32
  807308:	d8c00904 	addi	r3,sp,36
  80730c:	d8800885 	stb	r2,34(sp)
  807310:	003f6506 	br	8070a8 <___vfprintf_internal_r+0x1ba0>
  807314:	d9014c17 	ldw	r4,1328(sp)
  807318:	2084703a 	and	r2,r4,r2
  80731c:	103f9c26 	beq	r2,zero,807190 <___vfprintf_internal_r+0x1c88>
  807320:	003f6606 	br	8070bc <___vfprintf_internal_r+0x1bb4>
  807324:	d9800804 	addi	r6,sp,32
  807328:	d8c00884 	addi	r3,sp,34
  80732c:	003f5e06 	br	8070a8 <___vfprintf_internal_r+0x1ba0>
  807330:	00800b44 	movi	r2,45
  807334:	0121c83a 	sub	r16,zero,r4
  807338:	d8800845 	stb	r2,33(sp)
  80733c:	003f3d06 	br	807034 <___vfprintf_internal_r+0x1b2c>
  807340:	00800084 	movi	r2,2
  807344:	1105c83a 	sub	r2,r2,r4
  807348:	003fe606 	br	8072e4 <___vfprintf_internal_r+0x1ddc>
  80734c:	d8014515 	stw	zero,1300(sp)
  807350:	dc814715 	stw	r18,1308(sp)
  807354:	003fb106 	br	80721c <___vfprintf_internal_r+0x1d14>
  807358:	000d883a 	mov	r6,zero
  80735c:	000f883a 	mov	r7,zero
  807360:	8009883a 	mov	r4,r16
  807364:	880b883a 	mov	r5,r17
  807368:	08111480 	call	811148 <__nedf2>
  80736c:	103f9f26 	beq	r2,zero,8071ec <___vfprintf_internal_r+0x1ce4>
  807370:	00800044 	movi	r2,1
  807374:	1509c83a 	sub	r4,r2,r20
  807378:	d9000515 	stw	r4,20(sp)
  80737c:	003f9b06 	br	8071ec <___vfprintf_internal_r+0x1ce4>
  807380:	98000d1e 	bne	r19,zero,8073b8 <___vfprintf_internal_r+0x1eb0>
  807384:	d8c14c17 	ldw	r3,1328(sp)
  807388:	1880004c 	andi	r2,r3,1
  80738c:	10000a1e 	bne	r2,zero,8073b8 <___vfprintf_internal_r+0x1eb0>
  807390:	01000044 	movi	r4,1
  807394:	200f883a 	mov	r7,r4
  807398:	d9014515 	stw	r4,1300(sp)
  80739c:	003f4a06 	br	8070c8 <___vfprintf_internal_r+0x1bc0>
  8073a0:	3cc00017 	ldw	r19,0(r7)
  8073a4:	39c00104 	addi	r7,r7,4
  8073a8:	983d0e0e 	bge	r19,zero,8067e4 <___vfprintf_internal_r+0x12dc>
  8073ac:	b8c00007 	ldb	r3,0(r23)
  8073b0:	04ffffc4 	movi	r19,-1
  8073b4:	0038d306 	br	805704 <___vfprintf_internal_r+0x1fc>
  8073b8:	9cc00084 	addi	r19,r19,2
  8073bc:	dcc14515 	stw	r19,1300(sp)
  8073c0:	980f883a 	mov	r7,r19
  8073c4:	983f400e 	bge	r19,zero,8070c8 <___vfprintf_internal_r+0x1bc0>
  8073c8:	003f7306 	br	807198 <___vfprintf_internal_r+0x1c90>

008073cc <__vfprintf_internal>:
  8073cc:	00802074 	movhi	r2,129
  8073d0:	109b3004 	addi	r2,r2,27840
  8073d4:	2013883a 	mov	r9,r4
  8073d8:	11000017 	ldw	r4,0(r2)
  8073dc:	2805883a 	mov	r2,r5
  8073e0:	300f883a 	mov	r7,r6
  8073e4:	480b883a 	mov	r5,r9
  8073e8:	100d883a 	mov	r6,r2
  8073ec:	08055081 	jmpi	805508 <___vfprintf_internal_r>

008073f0 <__svfscanf_r>:
  8073f0:	deff4e04 	addi	sp,sp,-712
  8073f4:	dd80ae15 	stw	r22,696(sp)
  8073f8:	dd00ac15 	stw	r20,688(sp)
  8073fc:	dc40a915 	stw	r17,676(sp)
  807400:	dc00a815 	stw	r16,672(sp)
  807404:	dfc0b115 	stw	ra,708(sp)
  807408:	df00b015 	stw	fp,704(sp)
  80740c:	ddc0af15 	stw	r23,700(sp)
  807410:	dd40ad15 	stw	r21,692(sp)
  807414:	dcc0ab15 	stw	r19,684(sp)
  807418:	dc80aa15 	stw	r18,680(sp)
  80741c:	202d883a 	mov	r22,r4
  807420:	2821883a 	mov	r16,r5
  807424:	d9c0a415 	stw	r7,656(sp)
  807428:	3029883a 	mov	r20,r6
  80742c:	d800a215 	stw	zero,648(sp)
  807430:	0023883a 	mov	r17,zero
  807434:	d800a115 	stw	zero,644(sp)
  807438:	d800a015 	stw	zero,640(sp)
  80743c:	a1000007 	ldb	r4,0(r20)
  807440:	d9000115 	stw	r4,4(sp)
  807444:	20001f26 	beq	r4,zero,8074c4 <__svfscanf_r+0xd4>
  807448:	04c02074 	movhi	r19,129
  80744c:	9cdb2f04 	addi	r19,r19,27836
  807450:	9c800017 	ldw	r18,0(r19)
  807454:	a5000044 	addi	r20,r20,1
  807458:	9107883a 	add	r3,r18,r4
  80745c:	18800003 	ldbu	r2,0(r3)
  807460:	1080020c 	andi	r2,r2,8
  807464:	10002426 	beq	r2,zero,8074f8 <__svfscanf_r+0x108>
  807468:	80c00117 	ldw	r3,4(r16)
  80746c:	00c00e0e 	bge	zero,r3,8074a8 <__svfscanf_r+0xb8>
  807470:	81400017 	ldw	r5,0(r16)
  807474:	98800017 	ldw	r2,0(r19)
  807478:	28c00003 	ldbu	r3,0(r5)
  80747c:	1887883a 	add	r3,r3,r2
  807480:	19000003 	ldbu	r4,0(r3)
  807484:	2100020c 	andi	r4,r4,8
  807488:	203fec26 	beq	r4,zero,80743c <__svfscanf_r+0x4c>
  80748c:	80c00117 	ldw	r3,4(r16)
  807490:	29800044 	addi	r6,r5,1
  807494:	8c400044 	addi	r17,r17,1
  807498:	18ffffc4 	addi	r3,r3,-1
  80749c:	81800015 	stw	r6,0(r16)
  8074a0:	80c00115 	stw	r3,4(r16)
  8074a4:	00fff216 	blt	zero,r3,807470 <__svfscanf_r+0x80>
  8074a8:	b009883a 	mov	r4,r22
  8074ac:	800b883a 	mov	r5,r16
  8074b0:	0804ba00 	call	804ba0 <__srefill_r>
  8074b4:	103fee26 	beq	r2,zero,807470 <__svfscanf_r+0x80>
  8074b8:	a1000007 	ldb	r4,0(r20)
  8074bc:	d9000115 	stw	r4,4(sp)
  8074c0:	203fe11e 	bne	r4,zero,807448 <__svfscanf_r+0x58>
  8074c4:	d880a217 	ldw	r2,648(sp)
  8074c8:	dfc0b117 	ldw	ra,708(sp)
  8074cc:	df00b017 	ldw	fp,704(sp)
  8074d0:	ddc0af17 	ldw	r23,700(sp)
  8074d4:	dd80ae17 	ldw	r22,696(sp)
  8074d8:	dd40ad17 	ldw	r21,692(sp)
  8074dc:	dd00ac17 	ldw	r20,688(sp)
  8074e0:	dcc0ab17 	ldw	r19,684(sp)
  8074e4:	dc80aa17 	ldw	r18,680(sp)
  8074e8:	dc40a917 	ldw	r17,676(sp)
  8074ec:	dc00a817 	ldw	r16,672(sp)
  8074f0:	dec0b204 	addi	sp,sp,712
  8074f4:	f800283a 	ret
  8074f8:	00800944 	movi	r2,37
  8074fc:	20801626 	beq	r4,r2,807558 <__svfscanf_r+0x168>
  807500:	80800117 	ldw	r2,4(r16)
  807504:	00800b0e 	bge	zero,r2,807534 <__svfscanf_r+0x144>
  807508:	81000017 	ldw	r4,0(r16)
  80750c:	a0ffffc7 	ldb	r3,-1(r20)
  807510:	20800003 	ldbu	r2,0(r4)
  807514:	10ffeb1e 	bne	r2,r3,8074c4 <__svfscanf_r+0xd4>
  807518:	80c00117 	ldw	r3,4(r16)
  80751c:	21800044 	addi	r6,r4,1
  807520:	8c400044 	addi	r17,r17,1
  807524:	18ffffc4 	addi	r3,r3,-1
  807528:	80c00115 	stw	r3,4(r16)
  80752c:	81800015 	stw	r6,0(r16)
  807530:	003fc206 	br	80743c <__svfscanf_r+0x4c>
  807534:	b009883a 	mov	r4,r22
  807538:	800b883a 	mov	r5,r16
  80753c:	0804ba00 	call	804ba0 <__srefill_r>
  807540:	103ff126 	beq	r2,zero,807508 <__svfscanf_r+0x118>
  807544:	d900a217 	ldw	r4,648(sp)
  807548:	2004981e 	bne	r4,zero,8087ac <__svfscanf_r+0x13bc>
  80754c:	00bfffc4 	movi	r2,-1
  807550:	d880a215 	stw	r2,648(sp)
  807554:	003fdb06 	br	8074c4 <__svfscanf_r+0xd4>
  807558:	d800a315 	stw	zero,652(sp)
  80755c:	002b883a 	mov	r21,zero
  807560:	a0c00003 	ldbu	r3,0(r20)
  807564:	00801e04 	movi	r2,120
  807568:	a5000044 	addi	r20,r20,1
  80756c:	1dc03fcc 	andi	r23,r3,255
  807570:	bdc0201c 	xori	r23,r23,128
  807574:	bdffe004 	addi	r23,r23,-128
  807578:	10c08036 	bltu	r2,r3,80777c <__svfscanf_r+0x38c>
  80757c:	18c5883a 	add	r2,r3,r3
  807580:	1085883a 	add	r2,r2,r2
  807584:	00c02034 	movhi	r3,128
  807588:	18dd6604 	addi	r3,r3,30104
  80758c:	10c5883a 	add	r2,r2,r3
  807590:	11000017 	ldw	r4,0(r2)
  807594:	2000683a 	jmp	r4
  807598:	0080754c 	andi	r2,zero,469
  80759c:	0080777c 	xorhi	r2,zero,477
  8075a0:	0080777c 	xorhi	r2,zero,477
  8075a4:	0080777c 	xorhi	r2,zero,477
  8075a8:	0080777c 	xorhi	r2,zero,477
  8075ac:	0080777c 	xorhi	r2,zero,477
  8075b0:	0080777c 	xorhi	r2,zero,477
  8075b4:	0080777c 	xorhi	r2,zero,477
  8075b8:	0080777c 	xorhi	r2,zero,477
  8075bc:	0080777c 	xorhi	r2,zero,477
  8075c0:	0080777c 	xorhi	r2,zero,477
  8075c4:	0080777c 	xorhi	r2,zero,477
  8075c8:	0080777c 	xorhi	r2,zero,477
  8075cc:	0080777c 	xorhi	r2,zero,477
  8075d0:	0080777c 	xorhi	r2,zero,477
  8075d4:	0080777c 	xorhi	r2,zero,477
  8075d8:	0080777c 	xorhi	r2,zero,477
  8075dc:	0080777c 	xorhi	r2,zero,477
  8075e0:	0080777c 	xorhi	r2,zero,477
  8075e4:	0080777c 	xorhi	r2,zero,477
  8075e8:	0080777c 	xorhi	r2,zero,477
  8075ec:	0080777c 	xorhi	r2,zero,477
  8075f0:	0080777c 	xorhi	r2,zero,477
  8075f4:	0080777c 	xorhi	r2,zero,477
  8075f8:	0080777c 	xorhi	r2,zero,477
  8075fc:	0080777c 	xorhi	r2,zero,477
  807600:	0080777c 	xorhi	r2,zero,477
  807604:	0080777c 	xorhi	r2,zero,477
  807608:	0080777c 	xorhi	r2,zero,477
  80760c:	0080777c 	xorhi	r2,zero,477
  807610:	0080777c 	xorhi	r2,zero,477
  807614:	0080777c 	xorhi	r2,zero,477
  807618:	0080777c 	xorhi	r2,zero,477
  80761c:	0080777c 	xorhi	r2,zero,477
  807620:	0080777c 	xorhi	r2,zero,477
  807624:	0080777c 	xorhi	r2,zero,477
  807628:	0080777c 	xorhi	r2,zero,477
  80762c:	00807500 	call	80750 <__alt_mem_sdram-0x77f8b0>
  807630:	0080777c 	xorhi	r2,zero,477
  807634:	0080777c 	xorhi	r2,zero,477
  807638:	0080777c 	xorhi	r2,zero,477
  80763c:	0080777c 	xorhi	r2,zero,477
  807640:	0080861c 	xori	r2,zero,536
  807644:	0080777c 	xorhi	r2,zero,477
  807648:	0080777c 	xorhi	r2,zero,477
  80764c:	0080777c 	xorhi	r2,zero,477
  807650:	0080777c 	xorhi	r2,zero,477
  807654:	0080777c 	xorhi	r2,zero,477
  807658:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  80765c:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807660:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807664:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807668:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  80766c:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807670:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807674:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807678:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  80767c:	00808600 	call	80860 <__alt_mem_sdram-0x77f7a0>
  807680:	0080777c 	xorhi	r2,zero,477
  807684:	0080777c 	xorhi	r2,zero,477
  807688:	0080777c 	xorhi	r2,zero,477
  80768c:	0080777c 	xorhi	r2,zero,477
  807690:	0080777c 	xorhi	r2,zero,477
  807694:	0080777c 	xorhi	r2,zero,477
  807698:	0080777c 	xorhi	r2,zero,477
  80769c:	0080777c 	xorhi	r2,zero,477
  8076a0:	0080777c 	xorhi	r2,zero,477
  8076a4:	0080777c 	xorhi	r2,zero,477
  8076a8:	00807790 	cmplti	r2,zero,478
  8076ac:	00808704 	movi	r2,540
  8076b0:	0080777c 	xorhi	r2,zero,477
  8076b4:	00808704 	movi	r2,540
  8076b8:	0080777c 	xorhi	r2,zero,477
  8076bc:	0080777c 	xorhi	r2,zero,477
  8076c0:	0080777c 	xorhi	r2,zero,477
  8076c4:	0080777c 	xorhi	r2,zero,477
  8076c8:	008085f8 	rdprs	r2,zero,535
  8076cc:	0080777c 	xorhi	r2,zero,477
  8076d0:	0080777c 	xorhi	r2,zero,477
  8076d4:	008085d8 	cmpnei	r2,zero,535
  8076d8:	0080777c 	xorhi	r2,zero,477
  8076dc:	0080777c 	xorhi	r2,zero,477
  8076e0:	0080777c 	xorhi	r2,zero,477
  8076e4:	0080777c 	xorhi	r2,zero,477
  8076e8:	0080777c 	xorhi	r2,zero,477
  8076ec:	0080777c 	xorhi	r2,zero,477
  8076f0:	0080777c 	xorhi	r2,zero,477
  8076f4:	0080777c 	xorhi	r2,zero,477
  8076f8:	00808624 	muli	r2,zero,536
  8076fc:	0080777c 	xorhi	r2,zero,477
  807700:	0080777c 	xorhi	r2,zero,477
  807704:	008085bc 	xorhi	r2,zero,534
  807708:	0080777c 	xorhi	r2,zero,477
  80770c:	0080777c 	xorhi	r2,zero,477
  807710:	0080777c 	xorhi	r2,zero,477
  807714:	0080777c 	xorhi	r2,zero,477
  807718:	0080777c 	xorhi	r2,zero,477
  80771c:	0080777c 	xorhi	r2,zero,477
  807720:	0080777c 	xorhi	r2,zero,477
  807724:	0080870c 	andi	r2,zero,540
  807728:	00807794 	movui	r2,478
  80772c:	00808704 	movi	r2,540
  807730:	00808704 	movi	r2,540
  807734:	00808704 	movi	r2,540
  807738:	00808718 	cmpnei	r2,zero,540
  80773c:	00808660 	cmpeqi	r2,zero,537
  807740:	0080777c 	xorhi	r2,zero,477
  807744:	0080777c 	xorhi	r2,zero,477
  807748:	00807d28 	cmpgeui	r2,zero,500
  80774c:	0080777c 	xorhi	r2,zero,477
  807750:	00808814 	movui	r2,544
  807754:	008087d0 	cmplti	r2,zero,543
  807758:	008087f4 	movhi	r2,543
  80775c:	0080777c 	xorhi	r2,zero,477
  807760:	0080777c 	xorhi	r2,zero,477
  807764:	008087ec 	andhi	r2,zero,543
  807768:	0080777c 	xorhi	r2,zero,477
  80776c:	00808644 	movi	r2,537
  807770:	0080777c 	xorhi	r2,zero,477
  807774:	0080777c 	xorhi	r2,zero,477
  807778:	00808624 	muli	r2,zero,536
  80777c:	bc87883a 	add	r3,r23,r18
  807780:	18800003 	ldbu	r2,0(r3)
  807784:	1080004c 	andi	r2,r2,1
  807788:	1005003a 	cmpeq	r2,r2,zero
  80778c:	1000011e 	bne	r2,zero,807794 <__svfscanf_r+0x3a4>
  807790:	ad400054 	ori	r21,r21,1
  807794:	01002074 	movhi	r4,129
  807798:	21385404 	addi	r4,r4,-7856
  80779c:	00800284 	movi	r2,10
  8077a0:	d900a015 	stw	r4,640(sp)
  8077a4:	048000c4 	movi	r18,3
  8077a8:	d880a115 	stw	r2,644(sp)
  8077ac:	80c00117 	ldw	r3,4(r16)
  8077b0:	00c13f0e 	bge	zero,r3,807cb0 <__svfscanf_r+0x8c0>
  8077b4:	a880100c 	andi	r2,r21,64
  8077b8:	10001326 	beq	r2,zero,807808 <__svfscanf_r+0x418>
  8077bc:	00800104 	movi	r2,4
  8077c0:	14bf1e36 	bltu	r2,r18,80743c <__svfscanf_r+0x4c>
  8077c4:	9485883a 	add	r2,r18,r18
  8077c8:	1085883a 	add	r2,r2,r2
  8077cc:	00c02034 	movhi	r3,128
  8077d0:	18ddf804 	addi	r3,r3,30688
  8077d4:	10c5883a 	add	r2,r2,r3
  8077d8:	11000017 	ldw	r4,0(r2)
  8077dc:	2000683a 	jmp	r4
  8077e0:	00807844 	movi	r2,481
  8077e4:	00807944 	movi	r2,485
  8077e8:	00807b54 	movui	r2,493
  8077ec:	008079b8 	rdprs	r2,zero,486
  8077f0:	00807c8c 	andi	r2,zero,498
  8077f4:	b009883a 	mov	r4,r22
  8077f8:	800b883a 	mov	r5,r16
  8077fc:	0804ba00 	call	804ba0 <__srefill_r>
  807800:	103f501e 	bne	r2,zero,807544 <__svfscanf_r+0x154>
  807804:	8c400044 	addi	r17,r17,1
  807808:	81400017 	ldw	r5,0(r16)
  80780c:	98800017 	ldw	r2,0(r19)
  807810:	28c00003 	ldbu	r3,0(r5)
  807814:	1887883a 	add	r3,r3,r2
  807818:	19000003 	ldbu	r4,0(r3)
  80781c:	2100020c 	andi	r4,r4,8
  807820:	203fe626 	beq	r4,zero,8077bc <__svfscanf_r+0x3cc>
  807824:	80c00117 	ldw	r3,4(r16)
  807828:	18ffffc4 	addi	r3,r3,-1
  80782c:	80c00115 	stw	r3,4(r16)
  807830:	00fff00e 	bge	zero,r3,8077f4 <__svfscanf_r+0x404>
  807834:	29800044 	addi	r6,r5,1
  807838:	8c400044 	addi	r17,r17,1
  80783c:	81800015 	stw	r6,0(r16)
  807840:	003ff106 	br	807808 <__svfscanf_r+0x418>
  807844:	d8c0a317 	ldw	r3,652(sp)
  807848:	1800021e 	bne	r3,zero,807854 <__svfscanf_r+0x464>
  80784c:	01000044 	movi	r4,1
  807850:	d900a315 	stw	r4,652(sp)
  807854:	a880004c 	andi	r2,r21,1
  807858:	1005003a 	cmpeq	r2,r2,zero
  80785c:	1002811e 	bne	r2,zero,808264 <__svfscanf_r+0xe74>
  807860:	ad40040c 	andi	r21,r21,16
  807864:	a805003a 	cmpeq	r2,r21,zero
  807868:	d880a615 	stw	r2,664(sp)
  80786c:	1003d31e 	bne	r2,zero,8087bc <__svfscanf_r+0x13cc>
  807870:	0027883a 	mov	r19,zero
  807874:	d900a317 	ldw	r4,652(sp)
  807878:	2003c726 	beq	r4,zero,808798 <__svfscanf_r+0x13a8>
  80787c:	07002074 	movhi	fp,129
  807880:	e71b3404 	addi	fp,fp,27856
  807884:	e0800017 	ldw	r2,0(fp)
  807888:	103f2e26 	beq	r2,zero,807544 <__svfscanf_r+0x154>
  80788c:	d8804404 	addi	r2,sp,272
  807890:	0025883a 	mov	r18,zero
  807894:	d880a515 	stw	r2,660(sp)
  807898:	05ffffc4 	movi	r23,-1
  80789c:	80800017 	ldw	r2,0(r16)
  8078a0:	80c00117 	ldw	r3,4(r16)
  8078a4:	d900a517 	ldw	r4,660(sp)
  8078a8:	12000003 	ldbu	r8,0(r2)
  8078ac:	18ffffc4 	addi	r3,r3,-1
  8078b0:	11800044 	addi	r6,r2,1
  8078b4:	248f883a 	add	r7,r4,r18
  8078b8:	80c00115 	stw	r3,4(r16)
  8078bc:	81800015 	stw	r6,0(r16)
  8078c0:	3a000005 	stb	r8,0(r7)
  8078c4:	d9000204 	addi	r4,sp,8
  8078c8:	000b883a 	mov	r5,zero
  8078cc:	01800204 	movi	r6,8
  8078d0:	08049640 	call	804964 <memset>
  8078d4:	d980a517 	ldw	r6,660(sp)
  8078d8:	94800044 	addi	r18,r18,1
  8078dc:	d8800204 	addi	r2,sp,8
  8078e0:	b009883a 	mov	r4,r22
  8078e4:	980b883a 	mov	r5,r19
  8078e8:	900f883a 	mov	r7,r18
  8078ec:	d8800015 	stw	r2,0(sp)
  8078f0:	080ae5c0 	call	80ae5c <_mbrtowc_r>
  8078f4:	1007883a 	mov	r3,r2
  8078f8:	15ff1226 	beq	r2,r23,807544 <__svfscanf_r+0x154>
  8078fc:	10039e1e 	bne	r2,zero,808778 <__svfscanf_r+0x1388>
  807900:	a800011e 	bne	r21,zero,807908 <__svfscanf_r+0x518>
  807904:	98000015 	stw	zero,0(r19)
  807908:	d8c0a317 	ldw	r3,652(sp)
  80790c:	d900a617 	ldw	r4,664(sp)
  807910:	8ca3883a 	add	r17,r17,r18
  807914:	18ffffc4 	addi	r3,r3,-1
  807918:	d8c0a315 	stw	r3,652(sp)
  80791c:	20000126 	beq	r4,zero,807924 <__svfscanf_r+0x534>
  807920:	9cc00104 	addi	r19,r19,4
  807924:	0025883a 	mov	r18,zero
  807928:	80c00117 	ldw	r3,4(r16)
  80792c:	00c3950e 	bge	zero,r3,808784 <__svfscanf_r+0x1394>
  807930:	d880a317 	ldw	r2,652(sp)
  807934:	10039826 	beq	r2,zero,808798 <__svfscanf_r+0x13a8>
  807938:	e0800017 	ldw	r2,0(fp)
  80793c:	90bfd71e 	bne	r18,r2,80789c <__svfscanf_r+0x4ac>
  807940:	003f0006 	br	807544 <__svfscanf_r+0x154>
  807944:	d880a317 	ldw	r2,652(sp)
  807948:	1000021e 	bne	r2,zero,807954 <__svfscanf_r+0x564>
  80794c:	00ffffc4 	movi	r3,-1
  807950:	d8c0a315 	stw	r3,652(sp)
  807954:	a880040c 	andi	r2,r21,16
  807958:	1003b826 	beq	r2,zero,80883c <__svfscanf_r+0x144c>
  80795c:	0027883a 	mov	r19,zero
  807960:	dd400404 	addi	r21,sp,16
  807964:	81000017 	ldw	r4,0(r16)
  807968:	20800003 	ldbu	r2,0(r4)
  80796c:	a885883a 	add	r2,r21,r2
  807970:	10c00007 	ldb	r3,0(r2)
  807974:	18037d26 	beq	r3,zero,80876c <__svfscanf_r+0x137c>
  807978:	80c00117 	ldw	r3,4(r16)
  80797c:	21800044 	addi	r6,r4,1
  807980:	d900a317 	ldw	r4,652(sp)
  807984:	18ffffc4 	addi	r3,r3,-1
  807988:	9cc00044 	addi	r19,r19,1
  80798c:	81800015 	stw	r6,0(r16)
  807990:	80c00115 	stw	r3,4(r16)
  807994:	24c37526 	beq	r4,r19,80876c <__svfscanf_r+0x137c>
  807998:	00fff216 	blt	zero,r3,807964 <__svfscanf_r+0x574>
  80799c:	b009883a 	mov	r4,r22
  8079a0:	800b883a 	mov	r5,r16
  8079a4:	0804ba00 	call	804ba0 <__srefill_r>
  8079a8:	103fee26 	beq	r2,zero,807964 <__svfscanf_r+0x574>
  8079ac:	983ee526 	beq	r19,zero,807544 <__svfscanf_r+0x154>
  8079b0:	8ce3883a 	add	r17,r17,r19
  8079b4:	003ea106 	br	80743c <__svfscanf_r+0x4c>
  8079b8:	d900a317 	ldw	r4,652(sp)
  8079bc:	00805704 	movi	r2,348
  8079c0:	20ffffc4 	addi	r3,r4,-1
  8079c4:	10c0bf2e 	bgeu	r2,r3,807cc4 <__svfscanf_r+0x8d4>
  8079c8:	00805744 	movi	r2,349
  8079cc:	24ffa8c4 	addi	r19,r4,-349
  8079d0:	ac836014 	ori	r18,r21,3456
  8079d4:	d880a315 	stw	r2,652(sp)
  8079d8:	d8c04404 	addi	r3,sp,272
  8079dc:	d8c0a515 	stw	r3,660(sp)
  8079e0:	002f883a 	mov	r23,zero
  8079e4:	182b883a 	mov	r21,r3
  8079e8:	81800017 	ldw	r6,0(r16)
  8079ec:	00c01344 	movi	r3,77
  8079f0:	31400003 	ldbu	r5,0(r6)
  8079f4:	28bff544 	addi	r2,r5,-43
  8079f8:	10803fcc 	andi	r2,r2,255
  8079fc:	1880b836 	bltu	r3,r2,807ce0 <__svfscanf_r+0x8f0>
  807a00:	1085883a 	add	r2,r2,r2
  807a04:	1085883a 	add	r2,r2,r2
  807a08:	00c02034 	movhi	r3,128
  807a0c:	18de8704 	addi	r3,r3,31260
  807a10:	10c5883a 	add	r2,r2,r3
  807a14:	11000017 	ldw	r4,0(r2)
  807a18:	2000683a 	jmp	r4
  807a1c:	00807e30 	cmpltui	r2,zero,504
  807a20:	00807ce0 	cmpeqi	r2,zero,499
  807a24:	00807e30 	cmpltui	r2,zero,504
  807a28:	00807ce0 	cmpeqi	r2,zero,499
  807a2c:	00807ce0 	cmpeqi	r2,zero,499
  807a30:	00807e74 	movhi	r2,505
  807a34:	00808678 	rdprs	r2,zero,537
  807a38:	00808678 	rdprs	r2,zero,537
  807a3c:	00808678 	rdprs	r2,zero,537
  807a40:	00808678 	rdprs	r2,zero,537
  807a44:	00808678 	rdprs	r2,zero,537
  807a48:	00808678 	rdprs	r2,zero,537
  807a4c:	00808678 	rdprs	r2,zero,537
  807a50:	008086a0 	cmpeqi	r2,zero,538
  807a54:	008086a0 	cmpeqi	r2,zero,538
  807a58:	00807ce0 	cmpeqi	r2,zero,499
  807a5c:	00807ce0 	cmpeqi	r2,zero,499
  807a60:	00807ce0 	cmpeqi	r2,zero,499
  807a64:	00807ce0 	cmpeqi	r2,zero,499
  807a68:	00807ce0 	cmpeqi	r2,zero,499
  807a6c:	00807ce0 	cmpeqi	r2,zero,499
  807a70:	00807ce0 	cmpeqi	r2,zero,499
  807a74:	008086d0 	cmplti	r2,zero,539
  807a78:	008086d0 	cmplti	r2,zero,539
  807a7c:	008086d0 	cmplti	r2,zero,539
  807a80:	008086d0 	cmplti	r2,zero,539
  807a84:	008086d0 	cmplti	r2,zero,539
  807a88:	008086d0 	cmplti	r2,zero,539
  807a8c:	00807ce0 	cmpeqi	r2,zero,499
  807a90:	00807ce0 	cmpeqi	r2,zero,499
  807a94:	00807ce0 	cmpeqi	r2,zero,499
  807a98:	00807ce0 	cmpeqi	r2,zero,499
  807a9c:	00807ce0 	cmpeqi	r2,zero,499
  807aa0:	00807ce0 	cmpeqi	r2,zero,499
  807aa4:	00807ce0 	cmpeqi	r2,zero,499
  807aa8:	00807ce0 	cmpeqi	r2,zero,499
  807aac:	00807ce0 	cmpeqi	r2,zero,499
  807ab0:	00807ce0 	cmpeqi	r2,zero,499
  807ab4:	00807ce0 	cmpeqi	r2,zero,499
  807ab8:	00807ce0 	cmpeqi	r2,zero,499
  807abc:	00807ce0 	cmpeqi	r2,zero,499
  807ac0:	00807ce0 	cmpeqi	r2,zero,499
  807ac4:	00807ce0 	cmpeqi	r2,zero,499
  807ac8:	00807ce0 	cmpeqi	r2,zero,499
  807acc:	00807ce0 	cmpeqi	r2,zero,499
  807ad0:	008086e0 	cmpeqi	r2,zero,539
  807ad4:	00807ce0 	cmpeqi	r2,zero,499
  807ad8:	00807ce0 	cmpeqi	r2,zero,499
  807adc:	00807ce0 	cmpeqi	r2,zero,499
  807ae0:	00807ce0 	cmpeqi	r2,zero,499
  807ae4:	00807ce0 	cmpeqi	r2,zero,499
  807ae8:	00807ce0 	cmpeqi	r2,zero,499
  807aec:	00807ce0 	cmpeqi	r2,zero,499
  807af0:	00807ce0 	cmpeqi	r2,zero,499
  807af4:	008086d0 	cmplti	r2,zero,539
  807af8:	008086d0 	cmplti	r2,zero,539
  807afc:	008086d0 	cmplti	r2,zero,539
  807b00:	008086d0 	cmplti	r2,zero,539
  807b04:	008086d0 	cmplti	r2,zero,539
  807b08:	008086d0 	cmplti	r2,zero,539
  807b0c:	00807ce0 	cmpeqi	r2,zero,499
  807b10:	00807ce0 	cmpeqi	r2,zero,499
  807b14:	00807ce0 	cmpeqi	r2,zero,499
  807b18:	00807ce0 	cmpeqi	r2,zero,499
  807b1c:	00807ce0 	cmpeqi	r2,zero,499
  807b20:	00807ce0 	cmpeqi	r2,zero,499
  807b24:	00807ce0 	cmpeqi	r2,zero,499
  807b28:	00807ce0 	cmpeqi	r2,zero,499
  807b2c:	00807ce0 	cmpeqi	r2,zero,499
  807b30:	00807ce0 	cmpeqi	r2,zero,499
  807b34:	00807ce0 	cmpeqi	r2,zero,499
  807b38:	00807ce0 	cmpeqi	r2,zero,499
  807b3c:	00807ce0 	cmpeqi	r2,zero,499
  807b40:	00807ce0 	cmpeqi	r2,zero,499
  807b44:	00807ce0 	cmpeqi	r2,zero,499
  807b48:	00807ce0 	cmpeqi	r2,zero,499
  807b4c:	00807ce0 	cmpeqi	r2,zero,499
  807b50:	008086e0 	cmpeqi	r2,zero,539
  807b54:	d900a317 	ldw	r4,652(sp)
  807b58:	2000021e 	bne	r4,zero,807b64 <__svfscanf_r+0x774>
  807b5c:	00bfffc4 	movi	r2,-1
  807b60:	d880a315 	stw	r2,652(sp)
  807b64:	a880004c 	andi	r2,r21,1
  807b68:	1005003a 	cmpeq	r2,r2,zero
  807b6c:	1003651e 	bne	r2,zero,808904 <__svfscanf_r+0x1514>
  807b70:	adc0040c 	andi	r23,r21,16
  807b74:	b807003a 	cmpeq	r3,r23,zero
  807b78:	d8c0a715 	stw	r3,668(sp)
  807b7c:	1802f61e 	bne	r3,zero,808758 <__svfscanf_r+0x1368>
  807b80:	dd400104 	addi	r21,sp,4
  807b84:	0025883a 	mov	r18,zero
  807b88:	073fffc4 	movi	fp,-1
  807b8c:	81400017 	ldw	r5,0(r16)
  807b90:	98800017 	ldw	r2,0(r19)
  807b94:	29c00003 	ldbu	r7,0(r5)
  807b98:	38c03fcc 	andi	r3,r7,255
  807b9c:	1887883a 	add	r3,r3,r2
  807ba0:	19000003 	ldbu	r4,0(r3)
  807ba4:	2100020c 	andi	r4,r4,8
  807ba8:	2000321e 	bne	r4,zero,807c74 <__svfscanf_r+0x884>
  807bac:	d8c0a317 	ldw	r3,652(sp)
  807bb0:	18003026 	beq	r3,zero,807c74 <__svfscanf_r+0x884>
  807bb4:	00802074 	movhi	r2,129
  807bb8:	109b3404 	addi	r2,r2,27856
  807bbc:	10c00017 	ldw	r3,0(r2)
  807bc0:	90fe6026 	beq	r18,r3,807544 <__svfscanf_r+0x154>
  807bc4:	d8c04404 	addi	r3,sp,272
  807bc8:	80800117 	ldw	r2,4(r16)
  807bcc:	d8c0a515 	stw	r3,660(sp)
  807bd0:	d900a517 	ldw	r4,660(sp)
  807bd4:	10ffffc4 	addi	r3,r2,-1
  807bd8:	29800044 	addi	r6,r5,1
  807bdc:	80c00115 	stw	r3,4(r16)
  807be0:	2485883a 	add	r2,r4,r18
  807be4:	81800015 	stw	r6,0(r16)
  807be8:	d9000204 	addi	r4,sp,8
  807bec:	000b883a 	mov	r5,zero
  807bf0:	01800204 	movi	r6,8
  807bf4:	11c00005 	stb	r7,0(r2)
  807bf8:	08049640 	call	804964 <memset>
  807bfc:	d980a517 	ldw	r6,660(sp)
  807c00:	94800044 	addi	r18,r18,1
  807c04:	d8800204 	addi	r2,sp,8
  807c08:	b009883a 	mov	r4,r22
  807c0c:	a80b883a 	mov	r5,r21
  807c10:	900f883a 	mov	r7,r18
  807c14:	d8800015 	stw	r2,0(sp)
  807c18:	080ae5c0 	call	80ae5c <_mbrtowc_r>
  807c1c:	1007883a 	mov	r3,r2
  807c20:	173e4826 	beq	r2,fp,807544 <__svfscanf_r+0x154>
  807c24:	1002c91e 	bne	r2,zero,80874c <__svfscanf_r+0x135c>
  807c28:	a8000015 	stw	zero,0(r21)
  807c2c:	a9000017 	ldw	r4,0(r21)
  807c30:	080acf40 	call	80acf4 <iswspace>
  807c34:	1002bc1e 	bne	r2,zero,808728 <__svfscanf_r+0x1338>
  807c38:	d900a317 	ldw	r4,652(sp)
  807c3c:	d880a717 	ldw	r2,668(sp)
  807c40:	8ca3883a 	add	r17,r17,r18
  807c44:	213fffc4 	addi	r4,r4,-1
  807c48:	d900a315 	stw	r4,652(sp)
  807c4c:	10000126 	beq	r2,zero,807c54 <__svfscanf_r+0x864>
  807c50:	ad400104 	addi	r21,r21,4
  807c54:	0025883a 	mov	r18,zero
  807c58:	80c00117 	ldw	r3,4(r16)
  807c5c:	00ffcb16 	blt	zero,r3,807b8c <__svfscanf_r+0x79c>
  807c60:	b009883a 	mov	r4,r22
  807c64:	800b883a 	mov	r5,r16
  807c68:	0804ba00 	call	804ba0 <__srefill_r>
  807c6c:	103fc726 	beq	r2,zero,807b8c <__svfscanf_r+0x79c>
  807c70:	903e341e 	bne	r18,zero,807544 <__svfscanf_r+0x154>
  807c74:	b83df11e 	bne	r23,zero,80743c <__svfscanf_r+0x4c>
  807c78:	d900a217 	ldw	r4,648(sp)
  807c7c:	a8000015 	stw	zero,0(r21)
  807c80:	21000044 	addi	r4,r4,1
  807c84:	d900a215 	stw	r4,648(sp)
  807c88:	003dec06 	br	80743c <__svfscanf_r+0x4c>
  807c8c:	d900a317 	ldw	r4,652(sp)
  807c90:	00805704 	movi	r2,348
  807c94:	20ffffc4 	addi	r3,r4,-1
  807c98:	10c0902e 	bgeu	r2,r3,807edc <__svfscanf_r+0xaec>
  807c9c:	00805744 	movi	r2,349
  807ca0:	24ffa8c4 	addi	r19,r4,-349
  807ca4:	ad41e014 	ori	r21,r21,1920
  807ca8:	d880a315 	stw	r2,652(sp)
  807cac:	00010806 	br	8080d0 <__svfscanf_r+0xce0>
  807cb0:	b009883a 	mov	r4,r22
  807cb4:	800b883a 	mov	r5,r16
  807cb8:	0804ba00 	call	804ba0 <__srefill_r>
  807cbc:	103ebd26 	beq	r2,zero,8077b4 <__svfscanf_r+0x3c4>
  807cc0:	003e2006 	br	807544 <__svfscanf_r+0x154>
  807cc4:	d900a317 	ldw	r4,652(sp)
  807cc8:	ac836014 	ori	r18,r21,3456
  807ccc:	2002941e 	bne	r4,zero,808720 <__svfscanf_r+0x1330>
  807cd0:	d8804404 	addi	r2,sp,272
  807cd4:	d880a515 	stw	r2,660(sp)
  807cd8:	002f883a 	mov	r23,zero
  807cdc:	102b883a 	mov	r21,r2
  807ce0:	9080400c 	andi	r2,r18,256
  807ce4:	10000926 	beq	r2,zero,807d0c <__svfscanf_r+0x91c>
  807ce8:	d8c0a517 	ldw	r3,660(sp)
  807cec:	1d40052e 	bgeu	r3,r21,807d04 <__svfscanf_r+0x914>
  807cf0:	ad7fffc4 	addi	r21,r21,-1
  807cf4:	a9400007 	ldb	r5,0(r21)
  807cf8:	b009883a 	mov	r4,r22
  807cfc:	800d883a 	mov	r6,r16
  807d00:	08052f80 	call	8052f8 <_ungetc_r>
  807d04:	d900a517 	ldw	r4,660(sp)
  807d08:	257dee26 	beq	r4,r21,8074c4 <__svfscanf_r+0xd4>
  807d0c:	9080040c 	andi	r2,r18,16
  807d10:	10000a26 	beq	r2,zero,807d3c <__svfscanf_r+0x94c>
  807d14:	d8c0a517 	ldw	r3,660(sp)
  807d18:	a8c5c83a 	sub	r2,r21,r3
  807d1c:	b885883a 	add	r2,r23,r2
  807d20:	88a3883a 	add	r17,r17,r2
  807d24:	003dc506 	br	80743c <__svfscanf_r+0x4c>
  807d28:	a0c00007 	ldb	r3,0(r20)
  807d2c:	00801b04 	movi	r2,108
  807d30:	18801726 	beq	r3,r2,807d90 <__svfscanf_r+0x9a0>
  807d34:	ad400054 	ori	r21,r21,1
  807d38:	003e0906 	br	807560 <__svfscanf_r+0x170>
  807d3c:	a8000005 	stb	zero,0(r21)
  807d40:	d8c0a017 	ldw	r3,640(sp)
  807d44:	d940a517 	ldw	r5,660(sp)
  807d48:	d9c0a117 	ldw	r7,644(sp)
  807d4c:	b009883a 	mov	r4,r22
  807d50:	000d883a 	mov	r6,zero
  807d54:	183ee83a 	callr	r3
  807d58:	1007883a 	mov	r3,r2
  807d5c:	9080080c 	andi	r2,r18,32
  807d60:	1000251e 	bne	r2,zero,807df8 <__svfscanf_r+0xa08>
  807d64:	9080010c 	andi	r2,r18,4
  807d68:	10000c26 	beq	r2,zero,807d9c <__svfscanf_r+0x9ac>
  807d6c:	d900a417 	ldw	r4,656(sp)
  807d70:	20800017 	ldw	r2,0(r4)
  807d74:	21000104 	addi	r4,r4,4
  807d78:	d900a415 	stw	r4,656(sp)
  807d7c:	10c0000d 	sth	r3,0(r2)
  807d80:	d880a217 	ldw	r2,648(sp)
  807d84:	10800044 	addi	r2,r2,1
  807d88:	d880a215 	stw	r2,648(sp)
  807d8c:	003fe106 	br	807d14 <__svfscanf_r+0x924>
  807d90:	a5000044 	addi	r20,r20,1
  807d94:	ad400094 	ori	r21,r21,2
  807d98:	003df106 	br	807560 <__svfscanf_r+0x170>
  807d9c:	9080004c 	andi	r2,r18,1
  807da0:	1005003a 	cmpeq	r2,r2,zero
  807da4:	10001426 	beq	r2,zero,807df8 <__svfscanf_r+0xa08>
  807da8:	9080008c 	andi	r2,r18,2
  807dac:	10001226 	beq	r2,zero,807df8 <__svfscanf_r+0xa08>
  807db0:	d8c0a017 	ldw	r3,640(sp)
  807db4:	00802074 	movhi	r2,129
  807db8:	10b9b704 	addi	r2,r2,-6436
  807dbc:	18801426 	beq	r3,r2,807e10 <__svfscanf_r+0xa20>
  807dc0:	d9c0a117 	ldw	r7,644(sp)
  807dc4:	d940a517 	ldw	r5,660(sp)
  807dc8:	000d883a 	mov	r6,zero
  807dcc:	b009883a 	mov	r4,r22
  807dd0:	080e3c40 	call	80e3c4 <_strtoll_r>
  807dd4:	100d883a 	mov	r6,r2
  807dd8:	180f883a 	mov	r7,r3
  807ddc:	d900a417 	ldw	r4,656(sp)
  807de0:	20800017 	ldw	r2,0(r4)
  807de4:	21000104 	addi	r4,r4,4
  807de8:	d900a415 	stw	r4,656(sp)
  807dec:	11c00115 	stw	r7,4(r2)
  807df0:	11800015 	stw	r6,0(r2)
  807df4:	003fe206 	br	807d80 <__svfscanf_r+0x990>
  807df8:	d900a417 	ldw	r4,656(sp)
  807dfc:	20800017 	ldw	r2,0(r4)
  807e00:	21000104 	addi	r4,r4,4
  807e04:	d900a415 	stw	r4,656(sp)
  807e08:	10c00015 	stw	r3,0(r2)
  807e0c:	003fdc06 	br	807d80 <__svfscanf_r+0x990>
  807e10:	d9c0a117 	ldw	r7,644(sp)
  807e14:	d940a517 	ldw	r5,660(sp)
  807e18:	000d883a 	mov	r6,zero
  807e1c:	b009883a 	mov	r4,r22
  807e20:	080e9400 	call	80e940 <_strtoull_r>
  807e24:	100d883a 	mov	r6,r2
  807e28:	180f883a 	mov	r7,r3
  807e2c:	003feb06 	br	807ddc <__svfscanf_r+0x9ec>
  807e30:	9080200c 	andi	r2,r18,128
  807e34:	103faa26 	beq	r2,zero,807ce0 <__svfscanf_r+0x8f0>
  807e38:	00bfdfc4 	movi	r2,-129
  807e3c:	90a4703a 	and	r18,r18,r2
  807e40:	a9400005 	stb	r5,0(r21)
  807e44:	ad400044 	addi	r21,r21,1
  807e48:	80c00117 	ldw	r3,4(r16)
  807e4c:	18ffffc4 	addi	r3,r3,-1
  807e50:	80c00115 	stw	r3,4(r16)
  807e54:	00c0130e 	bge	zero,r3,807ea4 <__svfscanf_r+0xab4>
  807e58:	31800044 	addi	r6,r6,1
  807e5c:	81800015 	stw	r6,0(r16)
  807e60:	d880a317 	ldw	r2,652(sp)
  807e64:	10bfffc4 	addi	r2,r2,-1
  807e68:	d880a315 	stw	r2,652(sp)
  807e6c:	103ede1e 	bne	r2,zero,8079e8 <__svfscanf_r+0x5f8>
  807e70:	003f9b06 	br	807ce0 <__svfscanf_r+0x8f0>
  807e74:	9082000c 	andi	r2,r18,2048
  807e78:	103ff126 	beq	r2,zero,807e40 <__svfscanf_r+0xa50>
  807e7c:	d8c0a117 	ldw	r3,644(sp)
  807e80:	1800031e 	bne	r3,zero,807e90 <__svfscanf_r+0xaa0>
  807e84:	01000204 	movi	r4,8
  807e88:	94808014 	ori	r18,r18,512
  807e8c:	d900a115 	stw	r4,644(sp)
  807e90:	9081000c 	andi	r2,r18,1024
  807e94:	10000826 	beq	r2,zero,807eb8 <__svfscanf_r+0xac8>
  807e98:	00be9fc4 	movi	r2,-1409
  807e9c:	90a4703a 	and	r18,r18,r2
  807ea0:	003fe706 	br	807e40 <__svfscanf_r+0xa50>
  807ea4:	b009883a 	mov	r4,r22
  807ea8:	800b883a 	mov	r5,r16
  807eac:	0804ba00 	call	804ba0 <__srefill_r>
  807eb0:	103feb26 	beq	r2,zero,807e60 <__svfscanf_r+0xa70>
  807eb4:	003f8a06 	br	807ce0 <__svfscanf_r+0x8f0>
  807eb8:	98000426 	beq	r19,zero,807ecc <__svfscanf_r+0xadc>
  807ebc:	d880a317 	ldw	r2,652(sp)
  807ec0:	9cffffc4 	addi	r19,r19,-1
  807ec4:	10800044 	addi	r2,r2,1
  807ec8:	d880a315 	stw	r2,652(sp)
  807ecc:	00bf1fc4 	movi	r2,-897
  807ed0:	90a4703a 	and	r18,r18,r2
  807ed4:	bdc00044 	addi	r23,r23,1
  807ed8:	003fdb06 	br	807e48 <__svfscanf_r+0xa58>
  807edc:	d900a317 	ldw	r4,652(sp)
  807ee0:	ad41e014 	ori	r21,r21,1920
  807ee4:	2000791e 	bne	r4,zero,8080cc <__svfscanf_r+0xcdc>
  807ee8:	d8c04404 	addi	r3,sp,272
  807eec:	d8c0a515 	stw	r3,660(sp)
  807ef0:	182f883a 	mov	r23,r3
  807ef4:	d8009c15 	stw	zero,624(sp)
  807ef8:	d8009d15 	stw	zero,628(sp)
  807efc:	d8009f15 	stw	zero,636(sp)
  807f00:	d8009e15 	stw	zero,632(sp)
  807f04:	0039883a 	mov	fp,zero
  807f08:	e1003fcc 	andi	r4,fp,255
  807f0c:	2100201c 	xori	r4,r4,128
  807f10:	213fe004 	addi	r4,r4,-128
  807f14:	20ffffc4 	addi	r3,r4,-1
  807f18:	00800184 	movi	r2,6
  807f1c:	10c01736 	bltu	r2,r3,807f7c <__svfscanf_r+0xb8c>
  807f20:	00c00084 	movi	r3,2
  807f24:	19026d0e 	bge	r3,r4,8088dc <__svfscanf_r+0x14ec>
  807f28:	008000c4 	movi	r2,3
  807f2c:	1100130e 	bge	r2,r4,807f7c <__svfscanf_r+0xb8c>
  807f30:	e4ffffc4 	addi	r19,fp,-1
  807f34:	b825883a 	mov	r18,r23
  807f38:	94bfffc4 	addi	r18,r18,-1
  807f3c:	91400007 	ldb	r5,0(r18)
  807f40:	b009883a 	mov	r4,r22
  807f44:	800d883a 	mov	r6,r16
  807f48:	08052f80 	call	8052f8 <_ungetc_r>
  807f4c:	9cffffc4 	addi	r19,r19,-1
  807f50:	98c03fcc 	andi	r3,r19,255
  807f54:	18c0201c 	xori	r3,r3,128
  807f58:	18ffe004 	addi	r3,r3,-128
  807f5c:	00800084 	movi	r2,2
  807f60:	18bff51e 	bne	r3,r2,807f38 <__svfscanf_r+0xb48>
  807f64:	e0bfff04 	addi	r2,fp,-4
  807f68:	10803fcc 	andi	r2,r2,255
  807f6c:	b887c83a 	sub	r3,r23,r2
  807f70:	8885c83a 	sub	r2,r17,r2
  807f74:	147fffc4 	addi	r17,r2,-1
  807f78:	1dffffc4 	addi	r23,r3,-1
  807f7c:	a880400c 	andi	r2,r21,256
  807f80:	10001226 	beq	r2,zero,807fcc <__svfscanf_r+0xbdc>
  807f84:	a881000c 	andi	r2,r21,1024
  807f88:	10002b1e 	bne	r2,zero,808038 <__svfscanf_r+0xc48>
  807f8c:	bdffffc4 	addi	r23,r23,-1
  807f90:	b9400007 	ldb	r5,0(r23)
  807f94:	00801944 	movi	r2,101
  807f98:	8c7fffc4 	addi	r17,r17,-1
  807f9c:	28800826 	beq	r5,r2,807fc0 <__svfscanf_r+0xbd0>
  807fa0:	00801144 	movi	r2,69
  807fa4:	28800626 	beq	r5,r2,807fc0 <__svfscanf_r+0xbd0>
  807fa8:	bdffffc4 	addi	r23,r23,-1
  807fac:	b009883a 	mov	r4,r22
  807fb0:	800d883a 	mov	r6,r16
  807fb4:	08052f80 	call	8052f8 <_ungetc_r>
  807fb8:	b9400007 	ldb	r5,0(r23)
  807fbc:	8c7fffc4 	addi	r17,r17,-1
  807fc0:	b009883a 	mov	r4,r22
  807fc4:	800d883a 	mov	r6,r16
  807fc8:	08052f80 	call	8052f8 <_ungetc_r>
  807fcc:	a880040c 	andi	r2,r21,16
  807fd0:	103d1a1e 	bne	r2,zero,80743c <__svfscanf_r+0x4c>
  807fd4:	a8c1800c 	andi	r3,r21,1536
  807fd8:	00810004 	movi	r2,1024
  807fdc:	b8000005 	stb	zero,0(r23)
  807fe0:	18813326 	beq	r3,r2,8084b0 <__svfscanf_r+0x10c0>
  807fe4:	d8809d17 	ldw	r2,628(sp)
  807fe8:	1000251e 	bne	r2,zero,808080 <__svfscanf_r+0xc90>
  807fec:	d940a517 	ldw	r5,660(sp)
  807ff0:	b009883a 	mov	r4,r22
  807ff4:	000d883a 	mov	r6,zero
  807ff8:	080ca440 	call	80ca44 <_strtod_r>
  807ffc:	a900004c 	andi	r4,r21,1
  808000:	2009003a 	cmpeq	r4,r4,zero
  808004:	1025883a 	mov	r18,r2
  808008:	1827883a 	mov	r19,r3
  80800c:	2000141e 	bne	r4,zero,808060 <__svfscanf_r+0xc70>
  808010:	d8c0a417 	ldw	r3,656(sp)
  808014:	18800017 	ldw	r2,0(r3)
  808018:	1d400104 	addi	r21,r3,4
  80801c:	14c00115 	stw	r19,4(r2)
  808020:	14800015 	stw	r18,0(r2)
  808024:	d8c0a217 	ldw	r3,648(sp)
  808028:	dd40a415 	stw	r21,656(sp)
  80802c:	18c00044 	addi	r3,r3,1
  808030:	d8c0a215 	stw	r3,648(sp)
  808034:	003d0106 	br	80743c <__svfscanf_r+0x4c>
  808038:	d900a517 	ldw	r4,660(sp)
  80803c:	25fd212e 	bgeu	r4,r23,8074c4 <__svfscanf_r+0xd4>
  808040:	bdffffc4 	addi	r23,r23,-1
  808044:	b9400007 	ldb	r5,0(r23)
  808048:	b009883a 	mov	r4,r22
  80804c:	800d883a 	mov	r6,r16
  808050:	08052f80 	call	8052f8 <_ungetc_r>
  808054:	d880a517 	ldw	r2,660(sp)
  808058:	15fff936 	bltu	r2,r23,808040 <__svfscanf_r+0xc50>
  80805c:	003d1906 	br	8074c4 <__svfscanf_r+0xd4>
  808060:	a880008c 	andi	r2,r21,2
  808064:	10011926 	beq	r2,zero,8084cc <__svfscanf_r+0x10dc>
  808068:	d900a417 	ldw	r4,656(sp)
  80806c:	20800017 	ldw	r2,0(r4)
  808070:	25400104 	addi	r21,r4,4
  808074:	10c00115 	stw	r3,4(r2)
  808078:	14800015 	stw	r18,0(r2)
  80807c:	003fe906 	br	808024 <__svfscanf_r+0xc34>
  808080:	d8c09c17 	ldw	r3,624(sp)
  808084:	b009883a 	mov	r4,r22
  808088:	000d883a 	mov	r6,zero
  80808c:	19400044 	addi	r5,r3,1
  808090:	01c00284 	movi	r7,10
  808094:	080e1500 	call	80e150 <_strtol_r>
  808098:	d9009d17 	ldw	r4,628(sp)
  80809c:	110dc83a 	sub	r6,r2,r4
  8080a0:	d8c0a517 	ldw	r3,660(sp)
  8080a4:	d9009c17 	ldw	r4,624(sp)
  8080a8:	188054c4 	addi	r2,r3,339
  8080ac:	20800236 	bltu	r4,r2,8080b8 <__svfscanf_r+0xcc8>
  8080b0:	18805484 	addi	r2,r3,338
  8080b4:	d8809c15 	stw	r2,624(sp)
  8080b8:	d9009c17 	ldw	r4,624(sp)
  8080bc:	01402074 	movhi	r5,129
  8080c0:	29540104 	addi	r5,r5,20484
  8080c4:	080c86c0 	call	80c86c <sprintf>
  8080c8:	003fc806 	br	807fec <__svfscanf_r+0xbfc>
  8080cc:	0027883a 	mov	r19,zero
  8080d0:	d8c04404 	addi	r3,sp,272
  8080d4:	d8c0a515 	stw	r3,660(sp)
  8080d8:	182f883a 	mov	r23,r3
  8080dc:	d8009f15 	stw	zero,636(sp)
  8080e0:	d8009e15 	stw	zero,632(sp)
  8080e4:	d8009d15 	stw	zero,628(sp)
  8080e8:	d8009c15 	stw	zero,624(sp)
  8080ec:	0039883a 	mov	fp,zero
  8080f0:	0025883a 	mov	r18,zero
  8080f4:	80800017 	ldw	r2,0(r16)
  8080f8:	11400003 	ldbu	r5,0(r2)
  8080fc:	00801384 	movi	r2,78
  808100:	28fff544 	addi	r3,r5,-43
  808104:	18c03fcc 	andi	r3,r3,255
  808108:	10c08336 	bltu	r2,r3,808318 <__svfscanf_r+0xf28>
  80810c:	18c5883a 	add	r2,r3,r3
  808110:	1085883a 	add	r2,r2,r2
  808114:	00c02074 	movhi	r3,129
  808118:	18e04a04 	addi	r3,r3,-32472
  80811c:	10c5883a 	add	r2,r2,r3
  808120:	11000017 	ldw	r4,0(r2)
  808124:	2000683a 	jmp	r4
  808128:	008082d0 	cmplti	r2,zero,523
  80812c:	00808318 	cmpnei	r2,zero,524
  808130:	008082d0 	cmplti	r2,zero,523
  808134:	0080835c 	xori	r2,zero,525
  808138:	00808318 	cmpnei	r2,zero,524
  80813c:	008083c8 	cmpgei	r2,zero,527
  808140:	008083fc 	xorhi	r2,zero,527
  808144:	008083fc 	xorhi	r2,zero,527
  808148:	008083fc 	xorhi	r2,zero,527
  80814c:	008083fc 	xorhi	r2,zero,527
  808150:	008083fc 	xorhi	r2,zero,527
  808154:	008083fc 	xorhi	r2,zero,527
  808158:	008083fc 	xorhi	r2,zero,527
  80815c:	008083fc 	xorhi	r2,zero,527
  808160:	008083fc 	xorhi	r2,zero,527
  808164:	00808318 	cmpnei	r2,zero,524
  808168:	00808318 	cmpnei	r2,zero,524
  80816c:	00808318 	cmpnei	r2,zero,524
  808170:	00808318 	cmpnei	r2,zero,524
  808174:	00808318 	cmpnei	r2,zero,524
  808178:	00808318 	cmpnei	r2,zero,524
  80817c:	00808318 	cmpnei	r2,zero,524
  808180:	0080841c 	xori	r2,zero,528
  808184:	00808318 	cmpnei	r2,zero,524
  808188:	00808318 	cmpnei	r2,zero,524
  80818c:	00808318 	cmpnei	r2,zero,524
  808190:	0080842c 	andhi	r2,zero,528
  808194:	00808478 	rdprs	r2,zero,529
  808198:	00808318 	cmpnei	r2,zero,524
  80819c:	00808318 	cmpnei	r2,zero,524
  8081a0:	00808550 	cmplti	r2,zero,533
  8081a4:	00808318 	cmpnei	r2,zero,524
  8081a8:	00808318 	cmpnei	r2,zero,524
  8081ac:	00808318 	cmpnei	r2,zero,524
  8081b0:	00808318 	cmpnei	r2,zero,524
  8081b4:	008084fc 	xorhi	r2,zero,531
  8081b8:	00808318 	cmpnei	r2,zero,524
  8081bc:	00808318 	cmpnei	r2,zero,524
  8081c0:	00808318 	cmpnei	r2,zero,524
  8081c4:	00808318 	cmpnei	r2,zero,524
  8081c8:	00808318 	cmpnei	r2,zero,524
  8081cc:	00808590 	cmplti	r2,zero,534
  8081d0:	00808318 	cmpnei	r2,zero,524
  8081d4:	00808318 	cmpnei	r2,zero,524
  8081d8:	00808318 	cmpnei	r2,zero,524
  8081dc:	00808318 	cmpnei	r2,zero,524
  8081e0:	00808494 	movui	r2,530
  8081e4:	00808318 	cmpnei	r2,zero,524
  8081e8:	00808318 	cmpnei	r2,zero,524
  8081ec:	00808318 	cmpnei	r2,zero,524
  8081f0:	00808318 	cmpnei	r2,zero,524
  8081f4:	00808318 	cmpnei	r2,zero,524
  8081f8:	00808318 	cmpnei	r2,zero,524
  8081fc:	00808318 	cmpnei	r2,zero,524
  808200:	0080841c 	xori	r2,zero,528
  808204:	00808318 	cmpnei	r2,zero,524
  808208:	00808318 	cmpnei	r2,zero,524
  80820c:	00808318 	cmpnei	r2,zero,524
  808210:	0080842c 	andhi	r2,zero,528
  808214:	00808478 	rdprs	r2,zero,529
  808218:	00808318 	cmpnei	r2,zero,524
  80821c:	00808318 	cmpnei	r2,zero,524
  808220:	00808550 	cmplti	r2,zero,533
  808224:	00808318 	cmpnei	r2,zero,524
  808228:	00808318 	cmpnei	r2,zero,524
  80822c:	00808318 	cmpnei	r2,zero,524
  808230:	00808318 	cmpnei	r2,zero,524
  808234:	008084fc 	xorhi	r2,zero,531
  808238:	00808318 	cmpnei	r2,zero,524
  80823c:	00808318 	cmpnei	r2,zero,524
  808240:	00808318 	cmpnei	r2,zero,524
  808244:	00808318 	cmpnei	r2,zero,524
  808248:	00808318 	cmpnei	r2,zero,524
  80824c:	00808590 	cmplti	r2,zero,534
  808250:	00808318 	cmpnei	r2,zero,524
  808254:	00808318 	cmpnei	r2,zero,524
  808258:	00808318 	cmpnei	r2,zero,524
  80825c:	00808318 	cmpnei	r2,zero,524
  808260:	00808494 	movui	r2,530
  808264:	a880040c 	andi	r2,r21,16
  808268:	10004826 	beq	r2,zero,80838c <__svfscanf_r+0xf9c>
  80826c:	0027883a 	mov	r19,zero
  808270:	00000b06 	br	8082a0 <__svfscanf_r+0xeb0>
  808274:	80800017 	ldw	r2,0(r16)
  808278:	b009883a 	mov	r4,r22
  80827c:	800b883a 	mov	r5,r16
  808280:	148d883a 	add	r6,r2,r18
  808284:	81800015 	stw	r6,0(r16)
  808288:	9ca7883a 	add	r19,r19,r18
  80828c:	0804ba00 	call	804ba0 <__srefill_r>
  808290:	103dc61e 	bne	r2,zero,8079ac <__svfscanf_r+0x5bc>
  808294:	d880a317 	ldw	r2,652(sp)
  808298:	1485c83a 	sub	r2,r2,r18
  80829c:	d880a315 	stw	r2,652(sp)
  8082a0:	84800117 	ldw	r18,4(r16)
  8082a4:	d900a317 	ldw	r4,652(sp)
  8082a8:	913ff216 	blt	r18,r4,808274 <__svfscanf_r+0xe84>
  8082ac:	d900a317 	ldw	r4,652(sp)
  8082b0:	80800017 	ldw	r2,0(r16)
  8082b4:	9927883a 	add	r19,r19,r4
  8082b8:	9107c83a 	sub	r3,r18,r4
  8082bc:	110d883a 	add	r6,r2,r4
  8082c0:	8ce3883a 	add	r17,r17,r19
  8082c4:	80c00115 	stw	r3,4(r16)
  8082c8:	81800015 	stw	r6,0(r16)
  8082cc:	003c5b06 	br	80743c <__svfscanf_r+0x4c>
  8082d0:	a880200c 	andi	r2,r21,128
  8082d4:	10001026 	beq	r2,zero,808318 <__svfscanf_r+0xf28>
  8082d8:	00bfdfc4 	movi	r2,-129
  8082dc:	a8aa703a 	and	r21,r21,r2
  8082e0:	b9400005 	stb	r5,0(r23)
  8082e4:	bdc00044 	addi	r23,r23,1
  8082e8:	80c00117 	ldw	r3,4(r16)
  8082ec:	8c400044 	addi	r17,r17,1
  8082f0:	18bfffc4 	addi	r2,r3,-1
  8082f4:	80800115 	stw	r2,4(r16)
  8082f8:	00801f0e 	bge	zero,r2,808378 <__svfscanf_r+0xf88>
  8082fc:	80800017 	ldw	r2,0(r16)
  808300:	10800044 	addi	r2,r2,1
  808304:	80800015 	stw	r2,0(r16)
  808308:	d880a317 	ldw	r2,652(sp)
  80830c:	10bfffc4 	addi	r2,r2,-1
  808310:	d880a315 	stw	r2,652(sp)
  808314:	103f771e 	bne	r2,zero,8080f4 <__svfscanf_r+0xd04>
  808318:	d8c09e17 	ldw	r3,632(sp)
  80831c:	18000226 	beq	r3,zero,808328 <__svfscanf_r+0xf38>
  808320:	00bfbfc4 	movi	r2,-257
  808324:	a8aa703a 	and	r21,r21,r2
  808328:	90ffffc4 	addi	r3,r18,-1
  80832c:	00800044 	movi	r2,1
  808330:	10fef536 	bltu	r2,r3,807f08 <__svfscanf_r+0xb18>
  808334:	d900a517 	ldw	r4,660(sp)
  808338:	25fc622e 	bgeu	r4,r23,8074c4 <__svfscanf_r+0xd4>
  80833c:	bdffffc4 	addi	r23,r23,-1
  808340:	b9400007 	ldb	r5,0(r23)
  808344:	b009883a 	mov	r4,r22
  808348:	800d883a 	mov	r6,r16
  80834c:	08052f80 	call	8052f8 <_ungetc_r>
  808350:	d880a517 	ldw	r2,660(sp)
  808354:	15fff936 	bltu	r2,r23,80833c <__svfscanf_r+0xf4c>
  808358:	003c5a06 	br	8074c4 <__svfscanf_r+0xd4>
  80835c:	a880800c 	andi	r2,r21,512
  808360:	103fed26 	beq	r2,zero,808318 <__svfscanf_r+0xf28>
  808364:	d9009e17 	ldw	r4,632(sp)
  808368:	00bf5fc4 	movi	r2,-641
  80836c:	a8aa703a 	and	r21,r21,r2
  808370:	d9009f15 	stw	r4,636(sp)
  808374:	003fda06 	br	8082e0 <__svfscanf_r+0xef0>
  808378:	b009883a 	mov	r4,r22
  80837c:	800b883a 	mov	r5,r16
  808380:	0804ba00 	call	804ba0 <__srefill_r>
  808384:	103fe026 	beq	r2,zero,808308 <__svfscanf_r+0xf18>
  808388:	003fe306 	br	808318 <__svfscanf_r+0xf28>
  80838c:	d880a417 	ldw	r2,656(sp)
  808390:	d980a317 	ldw	r6,652(sp)
  808394:	01400044 	movi	r5,1
  808398:	11000017 	ldw	r4,0(r2)
  80839c:	800f883a 	mov	r7,r16
  8083a0:	08032b80 	call	8032b8 <fread>
  8083a4:	103c6726 	beq	r2,zero,807544 <__svfscanf_r+0x154>
  8083a8:	d8c0a417 	ldw	r3,656(sp)
  8083ac:	d900a217 	ldw	r4,648(sp)
  8083b0:	88a3883a 	add	r17,r17,r2
  8083b4:	18c00104 	addi	r3,r3,4
  8083b8:	21000044 	addi	r4,r4,1
  8083bc:	d8c0a415 	stw	r3,656(sp)
  8083c0:	d900a215 	stw	r4,648(sp)
  8083c4:	003c1d06 	br	80743c <__svfscanf_r+0x4c>
  8083c8:	a880400c 	andi	r2,r21,256
  8083cc:	10000b26 	beq	r2,zero,8083fc <__svfscanf_r+0x100c>
  8083d0:	00bfdfc4 	movi	r2,-129
  8083d4:	a8aa703a 	and	r21,r21,r2
  8083d8:	d8809e17 	ldw	r2,632(sp)
  8083dc:	10800044 	addi	r2,r2,1
  8083e0:	d8809e15 	stw	r2,632(sp)
  8083e4:	983fc026 	beq	r19,zero,8082e8 <__svfscanf_r+0xef8>
  8083e8:	d8c0a317 	ldw	r3,652(sp)
  8083ec:	9cffffc4 	addi	r19,r19,-1
  8083f0:	18c00044 	addi	r3,r3,1
  8083f4:	d8c0a315 	stw	r3,652(sp)
  8083f8:	003fbb06 	br	8082e8 <__svfscanf_r+0xef8>
  8083fc:	e0803fcc 	andi	r2,fp,255
  808400:	1080201c 	xori	r2,r2,128
  808404:	10bfe004 	addi	r2,r2,-128
  808408:	9085883a 	add	r2,r18,r2
  80840c:	103fc21e 	bne	r2,zero,808318 <__svfscanf_r+0xf28>
  808410:	00bf9fc4 	movi	r2,-385
  808414:	a8aa703a 	and	r21,r21,r2
  808418:	003fb106 	br	8082e0 <__svfscanf_r+0xef0>
  80841c:	00800044 	movi	r2,1
  808420:	90bfbd1e 	bne	r18,r2,808318 <__svfscanf_r+0xf28>
  808424:	04800084 	movi	r18,2
  808428:	003fad06 	br	8082e0 <__svfscanf_r+0xef0>
  80842c:	a8c1400c 	andi	r3,r21,1280
  808430:	00810004 	movi	r2,1024
  808434:	18800426 	beq	r3,r2,808448 <__svfscanf_r+0x1058>
  808438:	a884703a 	and	r2,r21,r2
  80843c:	103fb626 	beq	r2,zero,808318 <__svfscanf_r+0xf28>
  808440:	d8809e17 	ldw	r2,632(sp)
  808444:	103fb826 	beq	r2,zero,808328 <__svfscanf_r+0xf38>
  808448:	a880800c 	andi	r2,r21,512
  80844c:	1000051e 	bne	r2,zero,808464 <__svfscanf_r+0x1074>
  808450:	d8c09e17 	ldw	r3,632(sp)
  808454:	d9009f17 	ldw	r4,636(sp)
  808458:	ddc09c15 	stw	r23,624(sp)
  80845c:	1907c83a 	sub	r3,r3,r4
  808460:	d8c09d15 	stw	r3,628(sp)
  808464:	00be7fc4 	movi	r2,-1537
  808468:	a884703a 	and	r2,r21,r2
  80846c:	15406014 	ori	r21,r2,384
  808470:	d8009e15 	stw	zero,632(sp)
  808474:	003f9a06 	br	8082e0 <__svfscanf_r+0xef0>
  808478:	e0c03fcc 	andi	r3,fp,255
  80847c:	18c0201c 	xori	r3,r3,128
  808480:	18ffe004 	addi	r3,r3,-128
  808484:	00800084 	movi	r2,2
  808488:	18bfa31e 	bne	r3,r2,808318 <__svfscanf_r+0xf28>
  80848c:	070000c4 	movi	fp,3
  808490:	003f9306 	br	8082e0 <__svfscanf_r+0xef0>
  808494:	e0c03fcc 	andi	r3,fp,255
  808498:	18c0201c 	xori	r3,r3,128
  80849c:	18ffe004 	addi	r3,r3,-128
  8084a0:	008001c4 	movi	r2,7
  8084a4:	18bf9c1e 	bne	r3,r2,808318 <__svfscanf_r+0xf28>
  8084a8:	07000204 	movi	fp,8
  8084ac:	003f8c06 	br	8082e0 <__svfscanf_r+0xef0>
  8084b0:	d8c09e17 	ldw	r3,632(sp)
  8084b4:	d9009f17 	ldw	r4,636(sp)
  8084b8:	1905c83a 	sub	r2,r3,r4
  8084bc:	103ecb26 	beq	r2,zero,807fec <__svfscanf_r+0xbfc>
  8084c0:	008dc83a 	sub	r6,zero,r2
  8084c4:	ddc09c15 	stw	r23,624(sp)
  8084c8:	003ef506 	br	8080a0 <__svfscanf_r+0xcb0>
  8084cc:	d880a417 	ldw	r2,656(sp)
  8084d0:	9009883a 	mov	r4,r18
  8084d4:	180b883a 	mov	r5,r3
  8084d8:	15c00017 	ldw	r23,0(r2)
  8084dc:	15400104 	addi	r21,r2,4
  8084e0:	080c7740 	call	80c774 <__isnand>
  8084e4:	1000311e 	bne	r2,zero,8085ac <__svfscanf_r+0x11bc>
  8084e8:	980b883a 	mov	r5,r19
  8084ec:	9009883a 	mov	r4,r18
  8084f0:	08115c00 	call	8115c0 <__truncdfsf2>
  8084f4:	b8800015 	stw	r2,0(r23)
  8084f8:	003eca06 	br	808024 <__svfscanf_r+0xc34>
  8084fc:	9000101e 	bne	r18,zero,808540 <__svfscanf_r+0x1150>
  808500:	a8c1c00c 	andi	r3,r21,1792
  808504:	0081c004 	movi	r2,1792
  808508:	18800926 	beq	r3,r2,808530 <__svfscanf_r+0x1140>
  80850c:	e0c03fcc 	andi	r3,fp,255
  808510:	18c0201c 	xori	r3,r3,128
  808514:	18ffe004 	addi	r3,r3,-128
  808518:	00800044 	movi	r2,1
  80851c:	18800226 	beq	r3,r2,808528 <__svfscanf_r+0x1138>
  808520:	00800104 	movi	r2,4
  808524:	18bf7c1e 	bne	r3,r2,808318 <__svfscanf_r+0xf28>
  808528:	e7000044 	addi	fp,fp,1
  80852c:	003f6c06 	br	8082e0 <__svfscanf_r+0xef0>
  808530:	00be1fc4 	movi	r2,-1921
  808534:	a8aa703a 	and	r21,r21,r2
  808538:	04800044 	movi	r18,1
  80853c:	003f6806 	br	8082e0 <__svfscanf_r+0xef0>
  808540:	00800084 	movi	r2,2
  808544:	90bff11e 	bne	r18,r2,80850c <__svfscanf_r+0x111c>
  808548:	048000c4 	movi	r18,3
  80854c:	003f6406 	br	8082e0 <__svfscanf_r+0xef0>
  808550:	e0c03fcc 	andi	r3,fp,255
  808554:	18c0201c 	xori	r3,r3,128
  808558:	18ffe004 	addi	r3,r3,-128
  80855c:	1800071e 	bne	r3,zero,80857c <__svfscanf_r+0x118c>
  808560:	a8c1c00c 	andi	r3,r21,1792
  808564:	0081c004 	movi	r2,1792
  808568:	18bf6b1e 	bne	r3,r2,808318 <__svfscanf_r+0xf28>
  80856c:	00be1fc4 	movi	r2,-1921
  808570:	a8aa703a 	and	r21,r21,r2
  808574:	07000044 	movi	fp,1
  808578:	003f5906 	br	8082e0 <__svfscanf_r+0xef0>
  80857c:	008000c4 	movi	r2,3
  808580:	18bfe926 	beq	r3,r2,808528 <__svfscanf_r+0x1138>
  808584:	00800144 	movi	r2,5
  808588:	18bfe726 	beq	r3,r2,808528 <__svfscanf_r+0x1138>
  80858c:	003f6206 	br	808318 <__svfscanf_r+0xf28>
  808590:	e0c03fcc 	andi	r3,fp,255
  808594:	18c0201c 	xori	r3,r3,128
  808598:	18ffe004 	addi	r3,r3,-128
  80859c:	00800184 	movi	r2,6
  8085a0:	18bf5d1e 	bne	r3,r2,808318 <__svfscanf_r+0xf28>
  8085a4:	070001c4 	movi	fp,7
  8085a8:	003f4d06 	br	8082e0 <__svfscanf_r+0xef0>
  8085ac:	0009883a 	mov	r4,zero
  8085b0:	080c8640 	call	80c864 <nanf>
  8085b4:	b8800015 	stw	r2,0(r23)
  8085b8:	003e9a06 	br	808024 <__svfscanf_r+0xc34>
  8085bc:	a00b883a 	mov	r5,r20
  8085c0:	d9000404 	addi	r4,sp,16
  8085c4:	080c7a40 	call	80c7a4 <__sccl>
  8085c8:	1029883a 	mov	r20,r2
  8085cc:	ad401014 	ori	r21,r21,64
  8085d0:	04800044 	movi	r18,1
  8085d4:	003c7506 	br	8077ac <__svfscanf_r+0x3bc>
  8085d8:	01000204 	movi	r4,8
  8085dc:	00802074 	movhi	r2,129
  8085e0:	10b9b704 	addi	r2,r2,-6436
  8085e4:	ad400054 	ori	r21,r21,1
  8085e8:	048000c4 	movi	r18,3
  8085ec:	d900a115 	stw	r4,644(sp)
  8085f0:	d880a015 	stw	r2,640(sp)
  8085f4:	003c6d06 	br	8077ac <__svfscanf_r+0x3bc>
  8085f8:	ad400094 	ori	r21,r21,2
  8085fc:	003bd806 	br	807560 <__svfscanf_r+0x170>
  808600:	d900a317 	ldw	r4,652(sp)
  808604:	01400284 	movi	r5,10
  808608:	0801fec0 	call	801fec <__mulsi3>
  80860c:	15c5883a 	add	r2,r2,r23
  808610:	10bff404 	addi	r2,r2,-48
  808614:	d880a315 	stw	r2,652(sp)
  808618:	003bd106 	br	807560 <__svfscanf_r+0x170>
  80861c:	ad400414 	ori	r21,r21,16
  808620:	003bcf06 	br	807560 <__svfscanf_r+0x170>
  808624:	00800404 	movi	r2,16
  808628:	00c02074 	movhi	r3,129
  80862c:	18f9b704 	addi	r3,r3,-6436
  808630:	ad408014 	ori	r21,r21,512
  808634:	048000c4 	movi	r18,3
  808638:	d880a115 	stw	r2,644(sp)
  80863c:	d8c0a015 	stw	r3,640(sp)
  808640:	003c5a06 	br	8077ac <__svfscanf_r+0x3bc>
  808644:	00c00284 	movi	r3,10
  808648:	01002074 	movhi	r4,129
  80864c:	2139b704 	addi	r4,r4,-6436
  808650:	048000c4 	movi	r18,3
  808654:	d8c0a115 	stw	r3,644(sp)
  808658:	d900a015 	stw	r4,640(sp)
  80865c:	003c5306 	br	8077ac <__svfscanf_r+0x3bc>
  808660:	00c02074 	movhi	r3,129
  808664:	18f85404 	addi	r3,r3,-7856
  808668:	048000c4 	movi	r18,3
  80866c:	d8c0a015 	stw	r3,640(sp)
  808670:	d800a115 	stw	zero,644(sp)
  808674:	003c4d06 	br	8077ac <__svfscanf_r+0x3bc>
  808678:	d8c0a117 	ldw	r3,644(sp)
  80867c:	18c5883a 	add	r2,r3,r3
  808680:	00c02074 	movhi	r3,129
  808684:	18d40284 	addi	r3,r3,20490
  808688:	10c5883a 	add	r2,r2,r3
  80868c:	1080000f 	ldh	r2,0(r2)
  808690:	00fd1fc4 	movi	r3,-2945
  808694:	90e4703a 	and	r18,r18,r3
  808698:	d880a115 	stw	r2,644(sp)
  80869c:	003de806 	br	807e40 <__svfscanf_r+0xa50>
  8086a0:	d900a117 	ldw	r4,644(sp)
  8086a4:	00c02074 	movhi	r3,129
  8086a8:	18d40284 	addi	r3,r3,20490
  8086ac:	2105883a 	add	r2,r4,r4
  8086b0:	10c5883a 	add	r2,r2,r3
  8086b4:	1080000f 	ldh	r2,0(r2)
  8086b8:	00c00204 	movi	r3,8
  8086bc:	d880a115 	stw	r2,644(sp)
  8086c0:	18bd870e 	bge	r3,r2,807ce0 <__svfscanf_r+0x8f0>
  8086c4:	00bd1fc4 	movi	r2,-2945
  8086c8:	90a4703a 	and	r18,r18,r2
  8086cc:	003ddc06 	br	807e40 <__svfscanf_r+0xa50>
  8086d0:	d8c0a117 	ldw	r3,644(sp)
  8086d4:	00800284 	movi	r2,10
  8086d8:	10fffa16 	blt	r2,r3,8086c4 <__svfscanf_r+0x12d4>
  8086dc:	003d8006 	br	807ce0 <__svfscanf_r+0x8f0>
  8086e0:	90c1800c 	andi	r3,r18,1536
  8086e4:	00808004 	movi	r2,512
  8086e8:	18bd7d1e 	bne	r3,r2,807ce0 <__svfscanf_r+0x8f0>
  8086ec:	00bf7fc4 	movi	r2,-513
  8086f0:	9084703a 	and	r2,r18,r2
  8086f4:	01000404 	movi	r4,16
  8086f8:	14814014 	ori	r18,r2,1280
  8086fc:	d900a115 	stw	r4,644(sp)
  808700:	003dcf06 	br	807e40 <__svfscanf_r+0xa50>
  808704:	04800104 	movi	r18,4
  808708:	003c2806 	br	8077ac <__svfscanf_r+0x3bc>
  80870c:	ad401014 	ori	r21,r21,64
  808710:	0025883a 	mov	r18,zero
  808714:	003c2506 	br	8077ac <__svfscanf_r+0x3bc>
  808718:	ad400114 	ori	r21,r21,4
  80871c:	003b9006 	br	807560 <__svfscanf_r+0x170>
  808720:	0027883a 	mov	r19,zero
  808724:	003cac06 	br	8079d8 <__svfscanf_r+0x5e8>
  808728:	903d5226 	beq	r18,zero,807c74 <__svfscanf_r+0x884>
  80872c:	94bfffc4 	addi	r18,r18,-1
  808730:	d8c04404 	addi	r3,sp,272
  808734:	1c85883a 	add	r2,r3,r18
  808738:	11400003 	ldbu	r5,0(r2)
  80873c:	b009883a 	mov	r4,r22
  808740:	800d883a 	mov	r6,r16
  808744:	08052f80 	call	8052f8 <_ungetc_r>
  808748:	003ff706 	br	808728 <__svfscanf_r+0x1338>
  80874c:	00bfff84 	movi	r2,-2
  808750:	18bd361e 	bne	r3,r2,807c2c <__svfscanf_r+0x83c>
  808754:	003d4006 	br	807c58 <__svfscanf_r+0x868>
  808758:	d900a417 	ldw	r4,656(sp)
  80875c:	25400017 	ldw	r21,0(r4)
  808760:	21000104 	addi	r4,r4,4
  808764:	d900a415 	stw	r4,656(sp)
  808768:	003d0606 	br	807b84 <__svfscanf_r+0x794>
  80876c:	983b5526 	beq	r19,zero,8074c4 <__svfscanf_r+0xd4>
  808770:	8ce3883a 	add	r17,r17,r19
  808774:	003b3106 	br	80743c <__svfscanf_r+0x4c>
  808778:	00bfff84 	movi	r2,-2
  80877c:	18bc621e 	bne	r3,r2,807908 <__svfscanf_r+0x518>
  808780:	003c6906 	br	807928 <__svfscanf_r+0x538>
  808784:	b009883a 	mov	r4,r22
  808788:	800b883a 	mov	r5,r16
  80878c:	0804ba00 	call	804ba0 <__srefill_r>
  808790:	103c6726 	beq	r2,zero,807930 <__svfscanf_r+0x540>
  808794:	903b6b1e 	bne	r18,zero,807544 <__svfscanf_r+0x154>
  808798:	a83b281e 	bne	r21,zero,80743c <__svfscanf_r+0x4c>
  80879c:	d8c0a217 	ldw	r3,648(sp)
  8087a0:	18c00044 	addi	r3,r3,1
  8087a4:	d8c0a215 	stw	r3,648(sp)
  8087a8:	003b2406 	br	80743c <__svfscanf_r+0x4c>
  8087ac:	8080030b 	ldhu	r2,12(r16)
  8087b0:	1080100c 	andi	r2,r2,64
  8087b4:	103b4326 	beq	r2,zero,8074c4 <__svfscanf_r+0xd4>
  8087b8:	003b6406 	br	80754c <__svfscanf_r+0x15c>
  8087bc:	d8c0a417 	ldw	r3,656(sp)
  8087c0:	1cc00017 	ldw	r19,0(r3)
  8087c4:	18c00104 	addi	r3,r3,4
  8087c8:	d8c0a415 	stw	r3,656(sp)
  8087cc:	003c2906 	br	807874 <__svfscanf_r+0x484>
  8087d0:	00800204 	movi	r2,8
  8087d4:	00c02074 	movhi	r3,129
  8087d8:	18f9b704 	addi	r3,r3,-6436
  8087dc:	048000c4 	movi	r18,3
  8087e0:	d880a115 	stw	r2,644(sp)
  8087e4:	d8c0a015 	stw	r3,640(sp)
  8087e8:	003bf006 	br	8077ac <__svfscanf_r+0x3bc>
  8087ec:	04800084 	movi	r18,2
  8087f0:	003bee06 	br	8077ac <__svfscanf_r+0x3bc>
  8087f4:	01000404 	movi	r4,16
  8087f8:	00802074 	movhi	r2,129
  8087fc:	10b9b704 	addi	r2,r2,-6436
  808800:	ad408814 	ori	r21,r21,544
  808804:	048000c4 	movi	r18,3
  808808:	d900a115 	stw	r4,644(sp)
  80880c:	d880a015 	stw	r2,640(sp)
  808810:	003be606 	br	8077ac <__svfscanf_r+0x3bc>
  808814:	a880040c 	andi	r2,r21,16
  808818:	103b081e 	bne	r2,zero,80743c <__svfscanf_r+0x4c>
  80881c:	a880010c 	andi	r2,r21,4
  808820:	10004e26 	beq	r2,zero,80895c <__svfscanf_r+0x156c>
  808824:	d8c0a417 	ldw	r3,656(sp)
  808828:	18800017 	ldw	r2,0(r3)
  80882c:	18c00104 	addi	r3,r3,4
  808830:	d8c0a415 	stw	r3,656(sp)
  808834:	1440000d 	sth	r17,0(r2)
  808838:	003b0006 	br	80743c <__svfscanf_r+0x4c>
  80883c:	d880a417 	ldw	r2,656(sp)
  808840:	dd400404 	addi	r21,sp,16
  808844:	14800017 	ldw	r18,0(r2)
  808848:	9027883a 	mov	r19,r18
  80884c:	81000017 	ldw	r4,0(r16)
  808850:	20800003 	ldbu	r2,0(r4)
  808854:	a885883a 	add	r2,r21,r2
  808858:	10c00007 	ldb	r3,0(r2)
  80885c:	18001426 	beq	r3,zero,8088b0 <__svfscanf_r+0x14c0>
  808860:	d8c0a317 	ldw	r3,652(sp)
  808864:	80800117 	ldw	r2,4(r16)
  808868:	21800044 	addi	r6,r4,1
  80886c:	18ffffc4 	addi	r3,r3,-1
  808870:	d8c0a315 	stw	r3,652(sp)
  808874:	10ffffc4 	addi	r3,r2,-1
  808878:	80c00115 	stw	r3,4(r16)
  80887c:	20800003 	ldbu	r2,0(r4)
  808880:	90800005 	stb	r2,0(r18)
  808884:	d900a317 	ldw	r4,652(sp)
  808888:	81800015 	stw	r6,0(r16)
  80888c:	94800044 	addi	r18,r18,1
  808890:	20000726 	beq	r4,zero,8088b0 <__svfscanf_r+0x14c0>
  808894:	80800117 	ldw	r2,4(r16)
  808898:	00bfec16 	blt	zero,r2,80884c <__svfscanf_r+0x145c>
  80889c:	b009883a 	mov	r4,r22
  8088a0:	800b883a 	mov	r5,r16
  8088a4:	0804ba00 	call	804ba0 <__srefill_r>
  8088a8:	103fe826 	beq	r2,zero,80884c <__svfscanf_r+0x145c>
  8088ac:	9cbb2526 	beq	r19,r18,807544 <__svfscanf_r+0x154>
  8088b0:	94e7c83a 	sub	r19,r18,r19
  8088b4:	983b0326 	beq	r19,zero,8074c4 <__svfscanf_r+0xd4>
  8088b8:	90000005 	stb	zero,0(r18)
  8088bc:	d880a417 	ldw	r2,656(sp)
  8088c0:	d8c0a217 	ldw	r3,648(sp)
  8088c4:	8ce3883a 	add	r17,r17,r19
  8088c8:	10800104 	addi	r2,r2,4
  8088cc:	18c00044 	addi	r3,r3,1
  8088d0:	d880a415 	stw	r2,656(sp)
  8088d4:	d8c0a215 	stw	r3,648(sp)
  8088d8:	003ad806 	br	80743c <__svfscanf_r+0x4c>
  8088dc:	d900a517 	ldw	r4,660(sp)
  8088e0:	25faf82e 	bgeu	r4,r23,8074c4 <__svfscanf_r+0xd4>
  8088e4:	bdffffc4 	addi	r23,r23,-1
  8088e8:	b9400007 	ldb	r5,0(r23)
  8088ec:	b009883a 	mov	r4,r22
  8088f0:	800d883a 	mov	r6,r16
  8088f4:	08052f80 	call	8052f8 <_ungetc_r>
  8088f8:	d8c0a517 	ldw	r3,660(sp)
  8088fc:	1dfff936 	bltu	r3,r23,8088e4 <__svfscanf_r+0x14f4>
  808900:	003af006 	br	8074c4 <__svfscanf_r+0xd4>
  808904:	a880040c 	andi	r2,r21,16
  808908:	10002d26 	beq	r2,zero,8089c0 <__svfscanf_r+0x15d0>
  80890c:	0025883a 	mov	r18,zero
  808910:	00000906 	br	808938 <__svfscanf_r+0x1548>
  808914:	80c00117 	ldw	r3,4(r16)
  808918:	d880a317 	ldw	r2,652(sp)
  80891c:	29800044 	addi	r6,r5,1
  808920:	18ffffc4 	addi	r3,r3,-1
  808924:	94800044 	addi	r18,r18,1
  808928:	81800015 	stw	r6,0(r16)
  80892c:	80c00115 	stw	r3,4(r16)
  808930:	14800826 	beq	r2,r18,808954 <__svfscanf_r+0x1564>
  808934:	00c0120e 	bge	zero,r3,808980 <__svfscanf_r+0x1590>
  808938:	81400017 	ldw	r5,0(r16)
  80893c:	98800017 	ldw	r2,0(r19)
  808940:	28c00003 	ldbu	r3,0(r5)
  808944:	1887883a 	add	r3,r3,r2
  808948:	19000003 	ldbu	r4,0(r3)
  80894c:	2100020c 	andi	r4,r4,8
  808950:	203ff026 	beq	r4,zero,808914 <__svfscanf_r+0x1524>
  808954:	8ca3883a 	add	r17,r17,r18
  808958:	003ab806 	br	80743c <__svfscanf_r+0x4c>
  80895c:	a880004c 	andi	r2,r21,1
  808960:	1005003a 	cmpeq	r2,r2,zero
  808964:	10000b1e 	bne	r2,zero,808994 <__svfscanf_r+0x15a4>
  808968:	d900a417 	ldw	r4,656(sp)
  80896c:	20800017 	ldw	r2,0(r4)
  808970:	21000104 	addi	r4,r4,4
  808974:	d900a415 	stw	r4,656(sp)
  808978:	14400015 	stw	r17,0(r2)
  80897c:	003aaf06 	br	80743c <__svfscanf_r+0x4c>
  808980:	b009883a 	mov	r4,r22
  808984:	800b883a 	mov	r5,r16
  808988:	0804ba00 	call	804ba0 <__srefill_r>
  80898c:	103fea26 	beq	r2,zero,808938 <__svfscanf_r+0x1548>
  808990:	003ff006 	br	808954 <__svfscanf_r+0x1564>
  808994:	a880008c 	andi	r2,r21,2
  808998:	10002c26 	beq	r2,zero,808a4c <__svfscanf_r+0x165c>
  80899c:	d8c0a417 	ldw	r3,656(sp)
  8089a0:	d900a417 	ldw	r4,656(sp)
  8089a4:	18800017 	ldw	r2,0(r3)
  8089a8:	8807d7fa 	srai	r3,r17,31
  8089ac:	21000104 	addi	r4,r4,4
  8089b0:	d900a415 	stw	r4,656(sp)
  8089b4:	14400015 	stw	r17,0(r2)
  8089b8:	10c00115 	stw	r3,4(r2)
  8089bc:	003a9f06 	br	80743c <__svfscanf_r+0x4c>
  8089c0:	d8c0a417 	ldw	r3,656(sp)
  8089c4:	1d400017 	ldw	r21,0(r3)
  8089c8:	a825883a 	mov	r18,r21
  8089cc:	00000e06 	br	808a08 <__svfscanf_r+0x1618>
  8089d0:	80800117 	ldw	r2,4(r16)
  8089d4:	d900a317 	ldw	r4,652(sp)
  8089d8:	29800044 	addi	r6,r5,1
  8089dc:	10ffffc4 	addi	r3,r2,-1
  8089e0:	213fffc4 	addi	r4,r4,-1
  8089e4:	d900a315 	stw	r4,652(sp)
  8089e8:	80c00115 	stw	r3,4(r16)
  8089ec:	28800003 	ldbu	r2,0(r5)
  8089f0:	90800005 	stb	r2,0(r18)
  8089f4:	81800015 	stw	r6,0(r16)
  8089f8:	94800044 	addi	r18,r18,1
  8089fc:	20000926 	beq	r4,zero,808a24 <__svfscanf_r+0x1634>
  808a00:	80800117 	ldw	r2,4(r16)
  808a04:	0080170e 	bge	zero,r2,808a64 <__svfscanf_r+0x1674>
  808a08:	81400017 	ldw	r5,0(r16)
  808a0c:	98800017 	ldw	r2,0(r19)
  808a10:	28c00003 	ldbu	r3,0(r5)
  808a14:	1887883a 	add	r3,r3,r2
  808a18:	19000003 	ldbu	r4,0(r3)
  808a1c:	2100020c 	andi	r4,r4,8
  808a20:	203feb26 	beq	r4,zero,8089d0 <__svfscanf_r+0x15e0>
  808a24:	9545c83a 	sub	r2,r18,r21
  808a28:	d8c0a217 	ldw	r3,648(sp)
  808a2c:	88a3883a 	add	r17,r17,r2
  808a30:	d880a417 	ldw	r2,656(sp)
  808a34:	18c00044 	addi	r3,r3,1
  808a38:	d8c0a215 	stw	r3,648(sp)
  808a3c:	10800104 	addi	r2,r2,4
  808a40:	d880a415 	stw	r2,656(sp)
  808a44:	90000005 	stb	zero,0(r18)
  808a48:	003a7c06 	br	80743c <__svfscanf_r+0x4c>
  808a4c:	d8c0a417 	ldw	r3,656(sp)
  808a50:	18800017 	ldw	r2,0(r3)
  808a54:	18c00104 	addi	r3,r3,4
  808a58:	d8c0a415 	stw	r3,656(sp)
  808a5c:	14400015 	stw	r17,0(r2)
  808a60:	003a7606 	br	80743c <__svfscanf_r+0x4c>
  808a64:	b009883a 	mov	r4,r22
  808a68:	800b883a 	mov	r5,r16
  808a6c:	0804ba00 	call	804ba0 <__srefill_r>
  808a70:	103fe526 	beq	r2,zero,808a08 <__svfscanf_r+0x1618>
  808a74:	003feb06 	br	808a24 <__svfscanf_r+0x1634>

00808a78 <__svfscanf>:
  808a78:	00802074 	movhi	r2,129
  808a7c:	109b3004 	addi	r2,r2,27840
  808a80:	2013883a 	mov	r9,r4
  808a84:	11000017 	ldw	r4,0(r2)
  808a88:	2805883a 	mov	r2,r5
  808a8c:	300f883a 	mov	r7,r6
  808a90:	480b883a 	mov	r5,r9
  808a94:	100d883a 	mov	r6,r2
  808a98:	08073f01 	jmpi	8073f0 <__svfscanf_r>

00808a9c <_vfscanf_r>:
  808a9c:	defffb04 	addi	sp,sp,-20
  808aa0:	dcc00315 	stw	r19,12(sp)
  808aa4:	dc800215 	stw	r18,8(sp)
  808aa8:	dc400115 	stw	r17,4(sp)
  808aac:	dc000015 	stw	r16,0(sp)
  808ab0:	dfc00415 	stw	ra,16(sp)
  808ab4:	2021883a 	mov	r16,r4
  808ab8:	2823883a 	mov	r17,r5
  808abc:	3025883a 	mov	r18,r6
  808ac0:	3827883a 	mov	r19,r7
  808ac4:	20000226 	beq	r4,zero,808ad0 <_vfscanf_r+0x34>
  808ac8:	20800e17 	ldw	r2,56(r4)
  808acc:	10000b26 	beq	r2,zero,808afc <_vfscanf_r+0x60>
  808ad0:	8009883a 	mov	r4,r16
  808ad4:	880b883a 	mov	r5,r17
  808ad8:	900d883a 	mov	r6,r18
  808adc:	980f883a 	mov	r7,r19
  808ae0:	dfc00417 	ldw	ra,16(sp)
  808ae4:	dcc00317 	ldw	r19,12(sp)
  808ae8:	dc800217 	ldw	r18,8(sp)
  808aec:	dc400117 	ldw	r17,4(sp)
  808af0:	dc000017 	ldw	r16,0(sp)
  808af4:	dec00504 	addi	sp,sp,20
  808af8:	08073f01 	jmpi	8073f0 <__svfscanf_r>
  808afc:	0802cb00 	call	802cb0 <__sinit>
  808b00:	003ff306 	br	808ad0 <_vfscanf_r+0x34>

00808b04 <vfscanf>:
  808b04:	defffb04 	addi	sp,sp,-20
  808b08:	dcc00315 	stw	r19,12(sp)
  808b0c:	04c02074 	movhi	r19,129
  808b10:	9cdb3004 	addi	r19,r19,27840
  808b14:	98c00017 	ldw	r3,0(r19)
  808b18:	dc800215 	stw	r18,8(sp)
  808b1c:	dc400115 	stw	r17,4(sp)
  808b20:	dc000015 	stw	r16,0(sp)
  808b24:	dfc00415 	stw	ra,16(sp)
  808b28:	2021883a 	mov	r16,r4
  808b2c:	2823883a 	mov	r17,r5
  808b30:	3025883a 	mov	r18,r6
  808b34:	18000326 	beq	r3,zero,808b44 <vfscanf+0x40>
  808b38:	18800e17 	ldw	r2,56(r3)
  808b3c:	1809883a 	mov	r4,r3
  808b40:	10000b26 	beq	r2,zero,808b70 <vfscanf+0x6c>
  808b44:	99000017 	ldw	r4,0(r19)
  808b48:	800b883a 	mov	r5,r16
  808b4c:	880d883a 	mov	r6,r17
  808b50:	900f883a 	mov	r7,r18
  808b54:	dfc00417 	ldw	ra,16(sp)
  808b58:	dcc00317 	ldw	r19,12(sp)
  808b5c:	dc800217 	ldw	r18,8(sp)
  808b60:	dc400117 	ldw	r17,4(sp)
  808b64:	dc000017 	ldw	r16,0(sp)
  808b68:	dec00504 	addi	sp,sp,20
  808b6c:	08073f01 	jmpi	8073f0 <__svfscanf_r>
  808b70:	0802cb00 	call	802cb0 <__sinit>
  808b74:	003ff306 	br	808b44 <vfscanf+0x40>

00808b78 <_write_r>:
  808b78:	defffd04 	addi	sp,sp,-12
  808b7c:	dc000015 	stw	r16,0(sp)
  808b80:	040020b4 	movhi	r16,130
  808b84:	84221904 	addi	r16,r16,-30620
  808b88:	dc400115 	stw	r17,4(sp)
  808b8c:	80000015 	stw	zero,0(r16)
  808b90:	2023883a 	mov	r17,r4
  808b94:	2809883a 	mov	r4,r5
  808b98:	300b883a 	mov	r5,r6
  808b9c:	380d883a 	mov	r6,r7
  808ba0:	dfc00215 	stw	ra,8(sp)
  808ba4:	08128f80 	call	8128f8 <write>
  808ba8:	1007883a 	mov	r3,r2
  808bac:	00bfffc4 	movi	r2,-1
  808bb0:	18800626 	beq	r3,r2,808bcc <_write_r+0x54>
  808bb4:	1805883a 	mov	r2,r3
  808bb8:	dfc00217 	ldw	ra,8(sp)
  808bbc:	dc400117 	ldw	r17,4(sp)
  808bc0:	dc000017 	ldw	r16,0(sp)
  808bc4:	dec00304 	addi	sp,sp,12
  808bc8:	f800283a 	ret
  808bcc:	80800017 	ldw	r2,0(r16)
  808bd0:	103ff826 	beq	r2,zero,808bb4 <_write_r+0x3c>
  808bd4:	88800015 	stw	r2,0(r17)
  808bd8:	1805883a 	mov	r2,r3
  808bdc:	dfc00217 	ldw	ra,8(sp)
  808be0:	dc400117 	ldw	r17,4(sp)
  808be4:	dc000017 	ldw	r16,0(sp)
  808be8:	dec00304 	addi	sp,sp,12
  808bec:	f800283a 	ret

00808bf0 <__swsetup_r>:
  808bf0:	00802074 	movhi	r2,129
  808bf4:	109b3004 	addi	r2,r2,27840
  808bf8:	10c00017 	ldw	r3,0(r2)
  808bfc:	defffd04 	addi	sp,sp,-12
  808c00:	dc400115 	stw	r17,4(sp)
  808c04:	dc000015 	stw	r16,0(sp)
  808c08:	dfc00215 	stw	ra,8(sp)
  808c0c:	2023883a 	mov	r17,r4
  808c10:	2821883a 	mov	r16,r5
  808c14:	18000226 	beq	r3,zero,808c20 <__swsetup_r+0x30>
  808c18:	18800e17 	ldw	r2,56(r3)
  808c1c:	10001f26 	beq	r2,zero,808c9c <__swsetup_r+0xac>
  808c20:	8100030b 	ldhu	r4,12(r16)
  808c24:	2080020c 	andi	r2,r4,8
  808c28:	10002826 	beq	r2,zero,808ccc <__swsetup_r+0xdc>
  808c2c:	81400417 	ldw	r5,16(r16)
  808c30:	28001d26 	beq	r5,zero,808ca8 <__swsetup_r+0xb8>
  808c34:	2080004c 	andi	r2,r4,1
  808c38:	1005003a 	cmpeq	r2,r2,zero
  808c3c:	10000b26 	beq	r2,zero,808c6c <__swsetup_r+0x7c>
  808c40:	2080008c 	andi	r2,r4,2
  808c44:	10001226 	beq	r2,zero,808c90 <__swsetup_r+0xa0>
  808c48:	0005883a 	mov	r2,zero
  808c4c:	80800215 	stw	r2,8(r16)
  808c50:	28000b26 	beq	r5,zero,808c80 <__swsetup_r+0x90>
  808c54:	0005883a 	mov	r2,zero
  808c58:	dfc00217 	ldw	ra,8(sp)
  808c5c:	dc400117 	ldw	r17,4(sp)
  808c60:	dc000017 	ldw	r16,0(sp)
  808c64:	dec00304 	addi	sp,sp,12
  808c68:	f800283a 	ret
  808c6c:	80800517 	ldw	r2,20(r16)
  808c70:	80000215 	stw	zero,8(r16)
  808c74:	0085c83a 	sub	r2,zero,r2
  808c78:	80800615 	stw	r2,24(r16)
  808c7c:	283ff51e 	bne	r5,zero,808c54 <__swsetup_r+0x64>
  808c80:	2080200c 	andi	r2,r4,128
  808c84:	103ff326 	beq	r2,zero,808c54 <__swsetup_r+0x64>
  808c88:	00bfffc4 	movi	r2,-1
  808c8c:	003ff206 	br	808c58 <__swsetup_r+0x68>
  808c90:	80800517 	ldw	r2,20(r16)
  808c94:	80800215 	stw	r2,8(r16)
  808c98:	003fed06 	br	808c50 <__swsetup_r+0x60>
  808c9c:	1809883a 	mov	r4,r3
  808ca0:	0802cb00 	call	802cb0 <__sinit>
  808ca4:	003fde06 	br	808c20 <__swsetup_r+0x30>
  808ca8:	20c0a00c 	andi	r3,r4,640
  808cac:	00808004 	movi	r2,512
  808cb0:	18bfe026 	beq	r3,r2,808c34 <__swsetup_r+0x44>
  808cb4:	8809883a 	mov	r4,r17
  808cb8:	800b883a 	mov	r5,r16
  808cbc:	0803ee40 	call	803ee4 <__smakebuf_r>
  808cc0:	8100030b 	ldhu	r4,12(r16)
  808cc4:	81400417 	ldw	r5,16(r16)
  808cc8:	003fda06 	br	808c34 <__swsetup_r+0x44>
  808ccc:	2080040c 	andi	r2,r4,16
  808cd0:	103fed26 	beq	r2,zero,808c88 <__swsetup_r+0x98>
  808cd4:	2080010c 	andi	r2,r4,4
  808cd8:	10001226 	beq	r2,zero,808d24 <__swsetup_r+0x134>
  808cdc:	81400c17 	ldw	r5,48(r16)
  808ce0:	28000526 	beq	r5,zero,808cf8 <__swsetup_r+0x108>
  808ce4:	80801004 	addi	r2,r16,64
  808ce8:	28800226 	beq	r5,r2,808cf4 <__swsetup_r+0x104>
  808cec:	8809883a 	mov	r4,r17
  808cf0:	08034240 	call	803424 <_free_r>
  808cf4:	80000c15 	stw	zero,48(r16)
  808cf8:	8080030b 	ldhu	r2,12(r16)
  808cfc:	81400417 	ldw	r5,16(r16)
  808d00:	80000115 	stw	zero,4(r16)
  808d04:	10bff6cc 	andi	r2,r2,65499
  808d08:	8080030d 	sth	r2,12(r16)
  808d0c:	81400015 	stw	r5,0(r16)
  808d10:	8080030b 	ldhu	r2,12(r16)
  808d14:	10800214 	ori	r2,r2,8
  808d18:	113fffcc 	andi	r4,r2,65535
  808d1c:	8080030d 	sth	r2,12(r16)
  808d20:	003fc306 	br	808c30 <__swsetup_r+0x40>
  808d24:	81400417 	ldw	r5,16(r16)
  808d28:	003ff906 	br	808d10 <__swsetup_r+0x120>

00808d2c <register_fini>:
  808d2c:	f800283a 	ret

00808d30 <__call_exitprocs>:
  808d30:	00802074 	movhi	r2,129
  808d34:	109b3104 	addi	r2,r2,27844
  808d38:	10800017 	ldw	r2,0(r2)
  808d3c:	defff304 	addi	sp,sp,-52
  808d40:	df000b15 	stw	fp,44(sp)
  808d44:	d8800115 	stw	r2,4(sp)
  808d48:	00802034 	movhi	r2,128
  808d4c:	10901e04 	addi	r2,r2,16504
  808d50:	1005003a 	cmpeq	r2,r2,zero
  808d54:	d8800215 	stw	r2,8(sp)
  808d58:	d8800117 	ldw	r2,4(sp)
  808d5c:	dd400815 	stw	r21,32(sp)
  808d60:	dd000715 	stw	r20,28(sp)
  808d64:	10805204 	addi	r2,r2,328
  808d68:	dfc00c15 	stw	ra,48(sp)
  808d6c:	ddc00a15 	stw	r23,40(sp)
  808d70:	dd800915 	stw	r22,36(sp)
  808d74:	dcc00615 	stw	r19,24(sp)
  808d78:	dc800515 	stw	r18,20(sp)
  808d7c:	dc400415 	stw	r17,16(sp)
  808d80:	dc000315 	stw	r16,12(sp)
  808d84:	282b883a 	mov	r21,r5
  808d88:	2039883a 	mov	fp,r4
  808d8c:	d8800015 	stw	r2,0(sp)
  808d90:	2829003a 	cmpeq	r20,r5,zero
  808d94:	d8800117 	ldw	r2,4(sp)
  808d98:	14405217 	ldw	r17,328(r2)
  808d9c:	88001026 	beq	r17,zero,808de0 <__call_exitprocs+0xb0>
  808da0:	ddc00017 	ldw	r23,0(sp)
  808da4:	88800117 	ldw	r2,4(r17)
  808da8:	8c802204 	addi	r18,r17,136
  808dac:	143fffc4 	addi	r16,r2,-1
  808db0:	80000916 	blt	r16,zero,808dd8 <__call_exitprocs+0xa8>
  808db4:	05bfffc4 	movi	r22,-1
  808db8:	a000151e 	bne	r20,zero,808e10 <__call_exitprocs+0xe0>
  808dbc:	8409883a 	add	r4,r16,r16
  808dc0:	2105883a 	add	r2,r4,r4
  808dc4:	1485883a 	add	r2,r2,r18
  808dc8:	10c02017 	ldw	r3,128(r2)
  808dcc:	a8c01126 	beq	r21,r3,808e14 <__call_exitprocs+0xe4>
  808dd0:	843fffc4 	addi	r16,r16,-1
  808dd4:	85bff81e 	bne	r16,r22,808db8 <__call_exitprocs+0x88>
  808dd8:	d8800217 	ldw	r2,8(sp)
  808ddc:	10003126 	beq	r2,zero,808ea4 <__call_exitprocs+0x174>
  808de0:	dfc00c17 	ldw	ra,48(sp)
  808de4:	df000b17 	ldw	fp,44(sp)
  808de8:	ddc00a17 	ldw	r23,40(sp)
  808dec:	dd800917 	ldw	r22,36(sp)
  808df0:	dd400817 	ldw	r21,32(sp)
  808df4:	dd000717 	ldw	r20,28(sp)
  808df8:	dcc00617 	ldw	r19,24(sp)
  808dfc:	dc800517 	ldw	r18,20(sp)
  808e00:	dc400417 	ldw	r17,16(sp)
  808e04:	dc000317 	ldw	r16,12(sp)
  808e08:	dec00d04 	addi	sp,sp,52
  808e0c:	f800283a 	ret
  808e10:	8409883a 	add	r4,r16,r16
  808e14:	88c00117 	ldw	r3,4(r17)
  808e18:	2105883a 	add	r2,r4,r4
  808e1c:	1445883a 	add	r2,r2,r17
  808e20:	18ffffc4 	addi	r3,r3,-1
  808e24:	11800217 	ldw	r6,8(r2)
  808e28:	1c001526 	beq	r3,r16,808e80 <__call_exitprocs+0x150>
  808e2c:	10000215 	stw	zero,8(r2)
  808e30:	303fe726 	beq	r6,zero,808dd0 <__call_exitprocs+0xa0>
  808e34:	00c00044 	movi	r3,1
  808e38:	1c06983a 	sll	r3,r3,r16
  808e3c:	90804017 	ldw	r2,256(r18)
  808e40:	8cc00117 	ldw	r19,4(r17)
  808e44:	1884703a 	and	r2,r3,r2
  808e48:	10001426 	beq	r2,zero,808e9c <__call_exitprocs+0x16c>
  808e4c:	90804117 	ldw	r2,260(r18)
  808e50:	1884703a 	and	r2,r3,r2
  808e54:	10000c1e 	bne	r2,zero,808e88 <__call_exitprocs+0x158>
  808e58:	2105883a 	add	r2,r4,r4
  808e5c:	1485883a 	add	r2,r2,r18
  808e60:	11400017 	ldw	r5,0(r2)
  808e64:	e009883a 	mov	r4,fp
  808e68:	303ee83a 	callr	r6
  808e6c:	88800117 	ldw	r2,4(r17)
  808e70:	98bfc81e 	bne	r19,r2,808d94 <__call_exitprocs+0x64>
  808e74:	b8800017 	ldw	r2,0(r23)
  808e78:	147fd526 	beq	r2,r17,808dd0 <__call_exitprocs+0xa0>
  808e7c:	003fc506 	br	808d94 <__call_exitprocs+0x64>
  808e80:	8c000115 	stw	r16,4(r17)
  808e84:	003fea06 	br	808e30 <__call_exitprocs+0x100>
  808e88:	2105883a 	add	r2,r4,r4
  808e8c:	1485883a 	add	r2,r2,r18
  808e90:	11000017 	ldw	r4,0(r2)
  808e94:	303ee83a 	callr	r6
  808e98:	003ff406 	br	808e6c <__call_exitprocs+0x13c>
  808e9c:	303ee83a 	callr	r6
  808ea0:	003ff206 	br	808e6c <__call_exitprocs+0x13c>
  808ea4:	88800117 	ldw	r2,4(r17)
  808ea8:	1000081e 	bne	r2,zero,808ecc <__call_exitprocs+0x19c>
  808eac:	89000017 	ldw	r4,0(r17)
  808eb0:	20000726 	beq	r4,zero,808ed0 <__call_exitprocs+0x1a0>
  808eb4:	b9000015 	stw	r4,0(r23)
  808eb8:	8809883a 	mov	r4,r17
  808ebc:	08040780 	call	804078 <free>
  808ec0:	bc400017 	ldw	r17,0(r23)
  808ec4:	883fb71e 	bne	r17,zero,808da4 <__call_exitprocs+0x74>
  808ec8:	003fc506 	br	808de0 <__call_exitprocs+0xb0>
  808ecc:	89000017 	ldw	r4,0(r17)
  808ed0:	882f883a 	mov	r23,r17
  808ed4:	2023883a 	mov	r17,r4
  808ed8:	883fb21e 	bne	r17,zero,808da4 <__call_exitprocs+0x74>
  808edc:	003fc006 	br	808de0 <__call_exitprocs+0xb0>

00808ee0 <_close_r>:
  808ee0:	defffd04 	addi	sp,sp,-12
  808ee4:	dc000015 	stw	r16,0(sp)
  808ee8:	040020b4 	movhi	r16,130
  808eec:	84221904 	addi	r16,r16,-30620
  808ef0:	dc400115 	stw	r17,4(sp)
  808ef4:	80000015 	stw	zero,0(r16)
  808ef8:	2023883a 	mov	r17,r4
  808efc:	2809883a 	mov	r4,r5
  808f00:	dfc00215 	stw	ra,8(sp)
  808f04:	0811b440 	call	811b44 <close>
  808f08:	1007883a 	mov	r3,r2
  808f0c:	00bfffc4 	movi	r2,-1
  808f10:	18800626 	beq	r3,r2,808f2c <_close_r+0x4c>
  808f14:	1805883a 	mov	r2,r3
  808f18:	dfc00217 	ldw	ra,8(sp)
  808f1c:	dc400117 	ldw	r17,4(sp)
  808f20:	dc000017 	ldw	r16,0(sp)
  808f24:	dec00304 	addi	sp,sp,12
  808f28:	f800283a 	ret
  808f2c:	80800017 	ldw	r2,0(r16)
  808f30:	103ff826 	beq	r2,zero,808f14 <_close_r+0x34>
  808f34:	88800015 	stw	r2,0(r17)
  808f38:	1805883a 	mov	r2,r3
  808f3c:	dfc00217 	ldw	ra,8(sp)
  808f40:	dc400117 	ldw	r17,4(sp)
  808f44:	dc000017 	ldw	r16,0(sp)
  808f48:	dec00304 	addi	sp,sp,12
  808f4c:	f800283a 	ret

00808f50 <quorem>:
  808f50:	28c00417 	ldw	r3,16(r5)
  808f54:	20800417 	ldw	r2,16(r4)
  808f58:	defff104 	addi	sp,sp,-60
  808f5c:	dfc00e15 	stw	ra,56(sp)
  808f60:	df000d15 	stw	fp,52(sp)
  808f64:	ddc00c15 	stw	r23,48(sp)
  808f68:	dd800b15 	stw	r22,44(sp)
  808f6c:	dd400a15 	stw	r21,40(sp)
  808f70:	dd000915 	stw	r20,36(sp)
  808f74:	dcc00815 	stw	r19,32(sp)
  808f78:	dc800715 	stw	r18,28(sp)
  808f7c:	dc400615 	stw	r17,24(sp)
  808f80:	dc000515 	stw	r16,20(sp)
  808f84:	d9000315 	stw	r4,12(sp)
  808f88:	d9400415 	stw	r5,16(sp)
  808f8c:	10c07f16 	blt	r2,r3,80918c <quorem+0x23c>
  808f90:	1d3fffc4 	addi	r20,r3,-1
  808f94:	d8c00417 	ldw	r3,16(sp)
  808f98:	d9000317 	ldw	r4,12(sp)
  808f9c:	a505883a 	add	r2,r20,r20
  808fa0:	1085883a 	add	r2,r2,r2
  808fa4:	1cc00504 	addi	r19,r3,20
  808fa8:	25c00504 	addi	r23,r4,20
  808fac:	98ad883a 	add	r22,r19,r2
  808fb0:	15c7883a 	add	r3,r2,r23
  808fb4:	b1400017 	ldw	r5,0(r22)
  808fb8:	19000017 	ldw	r4,0(r3)
  808fbc:	d8c00015 	stw	r3,0(sp)
  808fc0:	29400044 	addi	r5,r5,1
  808fc4:	d9000215 	stw	r4,8(sp)
  808fc8:	08117700 	call	811770 <__udivsi3>
  808fcc:	1039883a 	mov	fp,r2
  808fd0:	10003d1e 	bne	r2,zero,8090c8 <quorem+0x178>
  808fd4:	d9400417 	ldw	r5,16(sp)
  808fd8:	d9000317 	ldw	r4,12(sp)
  808fdc:	080b1980 	call	80b198 <__mcmp>
  808fe0:	10002c16 	blt	r2,zero,809094 <quorem+0x144>
  808fe4:	e7000044 	addi	fp,fp,1
  808fe8:	b80f883a 	mov	r7,r23
  808fec:	0011883a 	mov	r8,zero
  808ff0:	0009883a 	mov	r4,zero
  808ff4:	99400017 	ldw	r5,0(r19)
  808ff8:	38c00017 	ldw	r3,0(r7)
  808ffc:	9cc00104 	addi	r19,r19,4
  809000:	28bfffcc 	andi	r2,r5,65535
  809004:	2085883a 	add	r2,r4,r2
  809008:	11bfffcc 	andi	r6,r2,65535
  80900c:	193fffcc 	andi	r4,r3,65535
  809010:	1004d43a 	srli	r2,r2,16
  809014:	280ad43a 	srli	r5,r5,16
  809018:	2189c83a 	sub	r4,r4,r6
  80901c:	2209883a 	add	r4,r4,r8
  809020:	1806d43a 	srli	r3,r3,16
  809024:	288b883a 	add	r5,r5,r2
  809028:	200dd43a 	srai	r6,r4,16
  80902c:	28bfffcc 	andi	r2,r5,65535
  809030:	1887c83a 	sub	r3,r3,r2
  809034:	1987883a 	add	r3,r3,r6
  809038:	3900000d 	sth	r4,0(r7)
  80903c:	38c0008d 	sth	r3,2(r7)
  809040:	2808d43a 	srli	r4,r5,16
  809044:	39c00104 	addi	r7,r7,4
  809048:	1811d43a 	srai	r8,r3,16
  80904c:	b4ffe92e 	bgeu	r22,r19,808ff4 <quorem+0xa4>
  809050:	a505883a 	add	r2,r20,r20
  809054:	1085883a 	add	r2,r2,r2
  809058:	b885883a 	add	r2,r23,r2
  80905c:	10c00017 	ldw	r3,0(r2)
  809060:	18000c1e 	bne	r3,zero,809094 <quorem+0x144>
  809064:	113fff04 	addi	r4,r2,-4
  809068:	b900082e 	bgeu	r23,r4,80908c <quorem+0x13c>
  80906c:	10bfff17 	ldw	r2,-4(r2)
  809070:	10000326 	beq	r2,zero,809080 <quorem+0x130>
  809074:	00000506 	br	80908c <quorem+0x13c>
  809078:	20800017 	ldw	r2,0(r4)
  80907c:	1000031e 	bne	r2,zero,80908c <quorem+0x13c>
  809080:	213fff04 	addi	r4,r4,-4
  809084:	a53fffc4 	addi	r20,r20,-1
  809088:	b93ffb36 	bltu	r23,r4,809078 <quorem+0x128>
  80908c:	d9000317 	ldw	r4,12(sp)
  809090:	25000415 	stw	r20,16(r4)
  809094:	e005883a 	mov	r2,fp
  809098:	dfc00e17 	ldw	ra,56(sp)
  80909c:	df000d17 	ldw	fp,52(sp)
  8090a0:	ddc00c17 	ldw	r23,48(sp)
  8090a4:	dd800b17 	ldw	r22,44(sp)
  8090a8:	dd400a17 	ldw	r21,40(sp)
  8090ac:	dd000917 	ldw	r20,36(sp)
  8090b0:	dcc00817 	ldw	r19,32(sp)
  8090b4:	dc800717 	ldw	r18,28(sp)
  8090b8:	dc400617 	ldw	r17,24(sp)
  8090bc:	dc000517 	ldw	r16,20(sp)
  8090c0:	dec00f04 	addi	sp,sp,60
  8090c4:	f800283a 	ret
  8090c8:	b823883a 	mov	r17,r23
  8090cc:	9825883a 	mov	r18,r19
  8090d0:	d8000115 	stw	zero,4(sp)
  8090d4:	002b883a 	mov	r21,zero
  8090d8:	94000017 	ldw	r16,0(r18)
  8090dc:	e009883a 	mov	r4,fp
  8090e0:	94800104 	addi	r18,r18,4
  8090e4:	817fffcc 	andi	r5,r16,65535
  8090e8:	0801fec0 	call	801fec <__mulsi3>
  8090ec:	800ad43a 	srli	r5,r16,16
  8090f0:	e009883a 	mov	r4,fp
  8090f4:	a8a1883a 	add	r16,r21,r2
  8090f8:	0801fec0 	call	801fec <__mulsi3>
  8090fc:	89000017 	ldw	r4,0(r17)
  809100:	80ffffcc 	andi	r3,r16,65535
  809104:	8020d43a 	srli	r16,r16,16
  809108:	217fffcc 	andi	r5,r4,65535
  80910c:	28cbc83a 	sub	r5,r5,r3
  809110:	d8c00117 	ldw	r3,4(sp)
  809114:	2008d43a 	srli	r4,r4,16
  809118:	1405883a 	add	r2,r2,r16
  80911c:	28cb883a 	add	r5,r5,r3
  809120:	280dd43a 	srai	r6,r5,16
  809124:	10ffffcc 	andi	r3,r2,65535
  809128:	20c9c83a 	sub	r4,r4,r3
  80912c:	2189883a 	add	r4,r4,r6
  809130:	8900008d 	sth	r4,2(r17)
  809134:	2009d43a 	srai	r4,r4,16
  809138:	8940000d 	sth	r5,0(r17)
  80913c:	102ad43a 	srli	r21,r2,16
  809140:	8c400104 	addi	r17,r17,4
  809144:	d9000115 	stw	r4,4(sp)
  809148:	b4bfe32e 	bgeu	r22,r18,8090d8 <quorem+0x188>
  80914c:	d9000217 	ldw	r4,8(sp)
  809150:	203fa01e 	bne	r4,zero,808fd4 <quorem+0x84>
  809154:	d8800017 	ldw	r2,0(sp)
  809158:	10ffff04 	addi	r3,r2,-4
  80915c:	b8c0082e 	bgeu	r23,r3,809180 <quorem+0x230>
  809160:	10bfff17 	ldw	r2,-4(r2)
  809164:	10000326 	beq	r2,zero,809174 <quorem+0x224>
  809168:	00000506 	br	809180 <quorem+0x230>
  80916c:	18800017 	ldw	r2,0(r3)
  809170:	1000031e 	bne	r2,zero,809180 <quorem+0x230>
  809174:	18ffff04 	addi	r3,r3,-4
  809178:	a53fffc4 	addi	r20,r20,-1
  80917c:	b8fffb36 	bltu	r23,r3,80916c <quorem+0x21c>
  809180:	d8c00317 	ldw	r3,12(sp)
  809184:	1d000415 	stw	r20,16(r3)
  809188:	003f9206 	br	808fd4 <quorem+0x84>
  80918c:	0005883a 	mov	r2,zero
  809190:	003fc106 	br	809098 <quorem+0x148>

00809194 <_dtoa_r>:
  809194:	22001017 	ldw	r8,64(r4)
  809198:	deffda04 	addi	sp,sp,-152
  80919c:	dd402115 	stw	r21,132(sp)
  8091a0:	dd002015 	stw	r20,128(sp)
  8091a4:	dc801e15 	stw	r18,120(sp)
  8091a8:	dc401d15 	stw	r17,116(sp)
  8091ac:	dfc02515 	stw	ra,148(sp)
  8091b0:	df002415 	stw	fp,144(sp)
  8091b4:	ddc02315 	stw	r23,140(sp)
  8091b8:	dd802215 	stw	r22,136(sp)
  8091bc:	dcc01f15 	stw	r19,124(sp)
  8091c0:	dc001c15 	stw	r16,112(sp)
  8091c4:	d9001615 	stw	r4,88(sp)
  8091c8:	3023883a 	mov	r17,r6
  8091cc:	2829883a 	mov	r20,r5
  8091d0:	d9c01715 	stw	r7,92(sp)
  8091d4:	dc802817 	ldw	r18,160(sp)
  8091d8:	302b883a 	mov	r21,r6
  8091dc:	40000a26 	beq	r8,zero,809208 <_dtoa_r+0x74>
  8091e0:	20801117 	ldw	r2,68(r4)
  8091e4:	400b883a 	mov	r5,r8
  8091e8:	40800115 	stw	r2,4(r8)
  8091ec:	20c01117 	ldw	r3,68(r4)
  8091f0:	00800044 	movi	r2,1
  8091f4:	10c4983a 	sll	r2,r2,r3
  8091f8:	40800215 	stw	r2,8(r8)
  8091fc:	080b03c0 	call	80b03c <_Bfree>
  809200:	d8c01617 	ldw	r3,88(sp)
  809204:	18001015 	stw	zero,64(r3)
  809208:	8800a316 	blt	r17,zero,809498 <_dtoa_r+0x304>
  80920c:	90000015 	stw	zero,0(r18)
  809210:	a8dffc2c 	andhi	r3,r21,32752
  809214:	009ffc34 	movhi	r2,32752
  809218:	18809126 	beq	r3,r2,809460 <_dtoa_r+0x2cc>
  80921c:	000d883a 	mov	r6,zero
  809220:	000f883a 	mov	r7,zero
  809224:	a009883a 	mov	r4,r20
  809228:	a80b883a 	mov	r5,r21
  80922c:	dd001215 	stw	r20,72(sp)
  809230:	dd401315 	stw	r21,76(sp)
  809234:	08111480 	call	811148 <__nedf2>
  809238:	1000171e 	bne	r2,zero,809298 <_dtoa_r+0x104>
  80923c:	d9802717 	ldw	r6,156(sp)
  809240:	00800044 	movi	r2,1
  809244:	30800015 	stw	r2,0(r6)
  809248:	d8802917 	ldw	r2,164(sp)
  80924c:	10029b26 	beq	r2,zero,809cbc <_dtoa_r+0xb28>
  809250:	d9002917 	ldw	r4,164(sp)
  809254:	00802074 	movhi	r2,129
  809258:	1093f844 	addi	r2,r2,20449
  80925c:	10ffffc4 	addi	r3,r2,-1
  809260:	20800015 	stw	r2,0(r4)
  809264:	1805883a 	mov	r2,r3
  809268:	dfc02517 	ldw	ra,148(sp)
  80926c:	df002417 	ldw	fp,144(sp)
  809270:	ddc02317 	ldw	r23,140(sp)
  809274:	dd802217 	ldw	r22,136(sp)
  809278:	dd402117 	ldw	r21,132(sp)
  80927c:	dd002017 	ldw	r20,128(sp)
  809280:	dcc01f17 	ldw	r19,124(sp)
  809284:	dc801e17 	ldw	r18,120(sp)
  809288:	dc401d17 	ldw	r17,116(sp)
  80928c:	dc001c17 	ldw	r16,112(sp)
  809290:	dec02604 	addi	sp,sp,152
  809294:	f800283a 	ret
  809298:	d9001617 	ldw	r4,88(sp)
  80929c:	d9401217 	ldw	r5,72(sp)
  8092a0:	d8800104 	addi	r2,sp,4
  8092a4:	a80d883a 	mov	r6,r21
  8092a8:	d9c00204 	addi	r7,sp,8
  8092ac:	d8800015 	stw	r2,0(sp)
  8092b0:	080b6780 	call	80b678 <__d2b>
  8092b4:	d8800715 	stw	r2,28(sp)
  8092b8:	a804d53a 	srli	r2,r21,20
  8092bc:	1101ffcc 	andi	r4,r2,2047
  8092c0:	20008626 	beq	r4,zero,8094dc <_dtoa_r+0x348>
  8092c4:	d8c01217 	ldw	r3,72(sp)
  8092c8:	00800434 	movhi	r2,16
  8092cc:	10bfffc4 	addi	r2,r2,-1
  8092d0:	ddc00117 	ldw	r23,4(sp)
  8092d4:	a884703a 	and	r2,r21,r2
  8092d8:	1811883a 	mov	r8,r3
  8092dc:	124ffc34 	orhi	r9,r2,16368
  8092e0:	25bf0044 	addi	r22,r4,-1023
  8092e4:	d8000815 	stw	zero,32(sp)
  8092e8:	0005883a 	mov	r2,zero
  8092ec:	00cffe34 	movhi	r3,16376
  8092f0:	480b883a 	mov	r5,r9
  8092f4:	4009883a 	mov	r4,r8
  8092f8:	180f883a 	mov	r7,r3
  8092fc:	100d883a 	mov	r6,r2
  809300:	0810c080 	call	810c08 <__subdf3>
  809304:	0218dbf4 	movhi	r8,25455
  809308:	4210d844 	addi	r8,r8,17249
  80930c:	024ff4f4 	movhi	r9,16339
  809310:	4a61e9c4 	addi	r9,r9,-30809
  809314:	480f883a 	mov	r7,r9
  809318:	400d883a 	mov	r6,r8
  80931c:	180b883a 	mov	r5,r3
  809320:	1009883a 	mov	r4,r2
  809324:	0810cfc0 	call	810cfc <__muldf3>
  809328:	0222d874 	movhi	r8,35681
  80932c:	42322cc4 	addi	r8,r8,-14157
  809330:	024ff1f4 	movhi	r9,16327
  809334:	4a628a04 	addi	r9,r9,-30168
  809338:	480f883a 	mov	r7,r9
  80933c:	400d883a 	mov	r6,r8
  809340:	180b883a 	mov	r5,r3
  809344:	1009883a 	mov	r4,r2
  809348:	0810c880 	call	810c88 <__adddf3>
  80934c:	b009883a 	mov	r4,r22
  809350:	1021883a 	mov	r16,r2
  809354:	1823883a 	mov	r17,r3
  809358:	08113f00 	call	8113f0 <__floatsidf>
  80935c:	021427f4 	movhi	r8,20639
  809360:	421e7ec4 	addi	r8,r8,31227
  809364:	024ff4f4 	movhi	r9,16339
  809368:	4a5104c4 	addi	r9,r9,17427
  80936c:	480f883a 	mov	r7,r9
  809370:	400d883a 	mov	r6,r8
  809374:	180b883a 	mov	r5,r3
  809378:	1009883a 	mov	r4,r2
  80937c:	0810cfc0 	call	810cfc <__muldf3>
  809380:	180f883a 	mov	r7,r3
  809384:	880b883a 	mov	r5,r17
  809388:	100d883a 	mov	r6,r2
  80938c:	8009883a 	mov	r4,r16
  809390:	0810c880 	call	810c88 <__adddf3>
  809394:	1009883a 	mov	r4,r2
  809398:	180b883a 	mov	r5,r3
  80939c:	1021883a 	mov	r16,r2
  8093a0:	1823883a 	mov	r17,r3
  8093a4:	08114e80 	call	8114e8 <__fixdfsi>
  8093a8:	000d883a 	mov	r6,zero
  8093ac:	000f883a 	mov	r7,zero
  8093b0:	8009883a 	mov	r4,r16
  8093b4:	880b883a 	mov	r5,r17
  8093b8:	d8800d15 	stw	r2,52(sp)
  8093bc:	08112e00 	call	8112e0 <__ltdf2>
  8093c0:	10031716 	blt	r2,zero,80a020 <_dtoa_r+0xe8c>
  8093c4:	d8c00d17 	ldw	r3,52(sp)
  8093c8:	00800584 	movi	r2,22
  8093cc:	10c1482e 	bgeu	r2,r3,8098f0 <_dtoa_r+0x75c>
  8093d0:	01000044 	movi	r4,1
  8093d4:	d9000c15 	stw	r4,48(sp)
  8093d8:	bd85c83a 	sub	r2,r23,r22
  8093dc:	11bfffc4 	addi	r6,r2,-1
  8093e0:	30030b16 	blt	r6,zero,80a010 <_dtoa_r+0xe7c>
  8093e4:	d9800a15 	stw	r6,40(sp)
  8093e8:	d8001115 	stw	zero,68(sp)
  8093ec:	d8c00d17 	ldw	r3,52(sp)
  8093f0:	1802ff16 	blt	r3,zero,809ff0 <_dtoa_r+0xe5c>
  8093f4:	d9000a17 	ldw	r4,40(sp)
  8093f8:	d8c00915 	stw	r3,36(sp)
  8093fc:	d8001015 	stw	zero,64(sp)
  809400:	20c9883a 	add	r4,r4,r3
  809404:	d9000a15 	stw	r4,40(sp)
  809408:	d9001717 	ldw	r4,92(sp)
  80940c:	00800244 	movi	r2,9
  809410:	11004636 	bltu	r2,r4,80952c <_dtoa_r+0x398>
  809414:	00800144 	movi	r2,5
  809418:	11020416 	blt	r2,r4,809c2c <_dtoa_r+0xa98>
  80941c:	04400044 	movi	r17,1
  809420:	d8c01717 	ldw	r3,92(sp)
  809424:	00800144 	movi	r2,5
  809428:	10c1ed36 	bltu	r2,r3,809be0 <_dtoa_r+0xa4c>
  80942c:	18c5883a 	add	r2,r3,r3
  809430:	1085883a 	add	r2,r2,r2
  809434:	00c02074 	movhi	r3,129
  809438:	18e51204 	addi	r3,r3,-27576
  80943c:	10c5883a 	add	r2,r2,r3
  809440:	11000017 	ldw	r4,0(r2)
  809444:	2000683a 	jmp	r4
  809448:	00809534 	movhi	r2,596
  80944c:	00809534 	movhi	r2,596
  809450:	00809f34 	movhi	r2,636
  809454:	00809f0c 	andi	r2,zero,636
  809458:	00809f50 	cmplti	r2,zero,637
  80945c:	00809f5c 	xori	r2,zero,637
  809460:	d9002717 	ldw	r4,156(sp)
  809464:	0089c3c4 	movi	r2,9999
  809468:	20800015 	stw	r2,0(r4)
  80946c:	a0001026 	beq	r20,zero,8094b0 <_dtoa_r+0x31c>
  809470:	00c02074 	movhi	r3,129
  809474:	18d40e04 	addi	r3,r3,20536
  809478:	d9802917 	ldw	r6,164(sp)
  80947c:	303f7926 	beq	r6,zero,809264 <_dtoa_r+0xd0>
  809480:	188000c7 	ldb	r2,3(r3)
  809484:	190000c4 	addi	r4,r3,3
  809488:	1000101e 	bne	r2,zero,8094cc <_dtoa_r+0x338>
  80948c:	d8802917 	ldw	r2,164(sp)
  809490:	11000015 	stw	r4,0(r2)
  809494:	003f7306 	br	809264 <_dtoa_r+0xd0>
  809498:	00a00034 	movhi	r2,32768
  80949c:	10bfffc4 	addi	r2,r2,-1
  8094a0:	00c00044 	movi	r3,1
  8094a4:	88aa703a 	and	r21,r17,r2
  8094a8:	90c00015 	stw	r3,0(r18)
  8094ac:	003f5806 	br	809210 <_dtoa_r+0x7c>
  8094b0:	00800434 	movhi	r2,16
  8094b4:	10bfffc4 	addi	r2,r2,-1
  8094b8:	a884703a 	and	r2,r21,r2
  8094bc:	103fec1e 	bne	r2,zero,809470 <_dtoa_r+0x2dc>
  8094c0:	00c02074 	movhi	r3,129
  8094c4:	18d40b04 	addi	r3,r3,20524
  8094c8:	003feb06 	br	809478 <_dtoa_r+0x2e4>
  8094cc:	d8802917 	ldw	r2,164(sp)
  8094d0:	19000204 	addi	r4,r3,8
  8094d4:	11000015 	stw	r4,0(r2)
  8094d8:	003f6206 	br	809264 <_dtoa_r+0xd0>
  8094dc:	ddc00117 	ldw	r23,4(sp)
  8094e0:	d8800217 	ldw	r2,8(sp)
  8094e4:	01000804 	movi	r4,32
  8094e8:	b8c10c84 	addi	r3,r23,1074
  8094ec:	18a3883a 	add	r17,r3,r2
  8094f0:	2441b80e 	bge	r4,r17,809bd4 <_dtoa_r+0xa40>
  8094f4:	00c01004 	movi	r3,64
  8094f8:	1c47c83a 	sub	r3,r3,r17
  8094fc:	88bff804 	addi	r2,r17,-32
  809500:	a8c6983a 	sll	r3,r21,r3
  809504:	a084d83a 	srl	r2,r20,r2
  809508:	1888b03a 	or	r4,r3,r2
  80950c:	0801e580 	call	801e58 <__floatunsidf>
  809510:	1011883a 	mov	r8,r2
  809514:	00bf8434 	movhi	r2,65040
  809518:	01000044 	movi	r4,1
  80951c:	10d3883a 	add	r9,r2,r3
  809520:	8dbef344 	addi	r22,r17,-1075
  809524:	d9000815 	stw	r4,32(sp)
  809528:	003f6f06 	br	8092e8 <_dtoa_r+0x154>
  80952c:	d8001715 	stw	zero,92(sp)
  809530:	04400044 	movi	r17,1
  809534:	00bfffc4 	movi	r2,-1
  809538:	00c00044 	movi	r3,1
  80953c:	d8800e15 	stw	r2,56(sp)
  809540:	d8002615 	stw	zero,152(sp)
  809544:	d8800f15 	stw	r2,60(sp)
  809548:	d8c00b15 	stw	r3,44(sp)
  80954c:	1021883a 	mov	r16,r2
  809550:	d8801617 	ldw	r2,88(sp)
  809554:	10001115 	stw	zero,68(r2)
  809558:	d8801617 	ldw	r2,88(sp)
  80955c:	11401117 	ldw	r5,68(r2)
  809560:	1009883a 	mov	r4,r2
  809564:	080b5bc0 	call	80b5bc <_Balloc>
  809568:	d8c01617 	ldw	r3,88(sp)
  80956c:	d8800515 	stw	r2,20(sp)
  809570:	18801015 	stw	r2,64(r3)
  809574:	00800384 	movi	r2,14
  809578:	14006836 	bltu	r2,r16,80971c <_dtoa_r+0x588>
  80957c:	8805003a 	cmpeq	r2,r17,zero
  809580:	1000661e 	bne	r2,zero,80971c <_dtoa_r+0x588>
  809584:	d9000d17 	ldw	r4,52(sp)
  809588:	0102300e 	bge	zero,r4,809e4c <_dtoa_r+0xcb8>
  80958c:	208003cc 	andi	r2,r4,15
  809590:	100490fa 	slli	r2,r2,3
  809594:	2025d13a 	srai	r18,r4,4
  809598:	00c02074 	movhi	r3,129
  80959c:	18d41f04 	addi	r3,r3,20604
  8095a0:	10c5883a 	add	r2,r2,r3
  8095a4:	90c0040c 	andi	r3,r18,16
  8095a8:	14000017 	ldw	r16,0(r2)
  8095ac:	14400117 	ldw	r17,4(r2)
  8095b0:	18036a1e 	bne	r3,zero,80a35c <_dtoa_r+0x11c8>
  8095b4:	05800084 	movi	r22,2
  8095b8:	90001026 	beq	r18,zero,8095fc <_dtoa_r+0x468>
  8095bc:	04c02074 	movhi	r19,129
  8095c0:	9cd45104 	addi	r19,r19,20804
  8095c4:	9080004c 	andi	r2,r18,1
  8095c8:	1005003a 	cmpeq	r2,r2,zero
  8095cc:	1000081e 	bne	r2,zero,8095f0 <_dtoa_r+0x45c>
  8095d0:	99800017 	ldw	r6,0(r19)
  8095d4:	99c00117 	ldw	r7,4(r19)
  8095d8:	880b883a 	mov	r5,r17
  8095dc:	8009883a 	mov	r4,r16
  8095e0:	0810cfc0 	call	810cfc <__muldf3>
  8095e4:	1021883a 	mov	r16,r2
  8095e8:	b5800044 	addi	r22,r22,1
  8095ec:	1823883a 	mov	r17,r3
  8095f0:	9025d07a 	srai	r18,r18,1
  8095f4:	9cc00204 	addi	r19,r19,8
  8095f8:	903ff21e 	bne	r18,zero,8095c4 <_dtoa_r+0x430>
  8095fc:	a80b883a 	mov	r5,r21
  809600:	a009883a 	mov	r4,r20
  809604:	880f883a 	mov	r7,r17
  809608:	800d883a 	mov	r6,r16
  80960c:	0801c000 	call	801c00 <__divdf3>
  809610:	1029883a 	mov	r20,r2
  809614:	182b883a 	mov	r21,r3
  809618:	d8c00c17 	ldw	r3,48(sp)
  80961c:	1805003a 	cmpeq	r2,r3,zero
  809620:	1000081e 	bne	r2,zero,809644 <_dtoa_r+0x4b0>
  809624:	0005883a 	mov	r2,zero
  809628:	00cffc34 	movhi	r3,16368
  80962c:	180f883a 	mov	r7,r3
  809630:	a009883a 	mov	r4,r20
  809634:	a80b883a 	mov	r5,r21
  809638:	100d883a 	mov	r6,r2
  80963c:	08112e00 	call	8112e0 <__ltdf2>
  809640:	1003fe16 	blt	r2,zero,80a63c <_dtoa_r+0x14a8>
  809644:	b009883a 	mov	r4,r22
  809648:	08113f00 	call	8113f0 <__floatsidf>
  80964c:	180b883a 	mov	r5,r3
  809650:	1009883a 	mov	r4,r2
  809654:	a00d883a 	mov	r6,r20
  809658:	a80f883a 	mov	r7,r21
  80965c:	0810cfc0 	call	810cfc <__muldf3>
  809660:	0011883a 	mov	r8,zero
  809664:	02500734 	movhi	r9,16412
  809668:	1009883a 	mov	r4,r2
  80966c:	180b883a 	mov	r5,r3
  809670:	480f883a 	mov	r7,r9
  809674:	400d883a 	mov	r6,r8
  809678:	0810c880 	call	810c88 <__adddf3>
  80967c:	d9000f17 	ldw	r4,60(sp)
  809680:	102d883a 	mov	r22,r2
  809684:	00bf3034 	movhi	r2,64704
  809688:	18b9883a 	add	fp,r3,r2
  80968c:	e02f883a 	mov	r23,fp
  809690:	20028f1e 	bne	r4,zero,80a0d0 <_dtoa_r+0xf3c>
  809694:	0005883a 	mov	r2,zero
  809698:	00d00534 	movhi	r3,16404
  80969c:	a009883a 	mov	r4,r20
  8096a0:	a80b883a 	mov	r5,r21
  8096a4:	180f883a 	mov	r7,r3
  8096a8:	100d883a 	mov	r6,r2
  8096ac:	0810c080 	call	810c08 <__subdf3>
  8096b0:	1009883a 	mov	r4,r2
  8096b4:	e00f883a 	mov	r7,fp
  8096b8:	180b883a 	mov	r5,r3
  8096bc:	b00d883a 	mov	r6,r22
  8096c0:	1025883a 	mov	r18,r2
  8096c4:	1827883a 	mov	r19,r3
  8096c8:	08111d00 	call	8111d0 <__gtdf2>
  8096cc:	00834f16 	blt	zero,r2,80a40c <_dtoa_r+0x1278>
  8096d0:	e0e0003c 	xorhi	r3,fp,32768
  8096d4:	9009883a 	mov	r4,r18
  8096d8:	980b883a 	mov	r5,r19
  8096dc:	180f883a 	mov	r7,r3
  8096e0:	b00d883a 	mov	r6,r22
  8096e4:	08112e00 	call	8112e0 <__ltdf2>
  8096e8:	1000080e 	bge	r2,zero,80970c <_dtoa_r+0x578>
  8096ec:	0027883a 	mov	r19,zero
  8096f0:	0025883a 	mov	r18,zero
  8096f4:	d8802617 	ldw	r2,152(sp)
  8096f8:	df000517 	ldw	fp,20(sp)
  8096fc:	d8000615 	stw	zero,24(sp)
  809700:	0084303a 	nor	r2,zero,r2
  809704:	d8800d15 	stw	r2,52(sp)
  809708:	00019b06 	br	809d78 <_dtoa_r+0xbe4>
  80970c:	d9801217 	ldw	r6,72(sp)
  809710:	d8801317 	ldw	r2,76(sp)
  809714:	3029883a 	mov	r20,r6
  809718:	102b883a 	mov	r21,r2
  80971c:	d8c00217 	ldw	r3,8(sp)
  809720:	18008516 	blt	r3,zero,809938 <_dtoa_r+0x7a4>
  809724:	d9000d17 	ldw	r4,52(sp)
  809728:	00800384 	movi	r2,14
  80972c:	11008216 	blt	r2,r4,809938 <_dtoa_r+0x7a4>
  809730:	200490fa 	slli	r2,r4,3
  809734:	d9802617 	ldw	r6,152(sp)
  809738:	00c02074 	movhi	r3,129
  80973c:	18d41f04 	addi	r3,r3,20604
  809740:	10c5883a 	add	r2,r2,r3
  809744:	14800017 	ldw	r18,0(r2)
  809748:	14c00117 	ldw	r19,4(r2)
  80974c:	30031e16 	blt	r6,zero,80a3c8 <_dtoa_r+0x1234>
  809750:	d9000517 	ldw	r4,20(sp)
  809754:	d8c00f17 	ldw	r3,60(sp)
  809758:	a823883a 	mov	r17,r21
  80975c:	a021883a 	mov	r16,r20
  809760:	192b883a 	add	r21,r3,r4
  809764:	2039883a 	mov	fp,r4
  809768:	00000f06 	br	8097a8 <_dtoa_r+0x614>
  80976c:	0005883a 	mov	r2,zero
  809770:	00d00934 	movhi	r3,16420
  809774:	5009883a 	mov	r4,r10
  809778:	580b883a 	mov	r5,r11
  80977c:	180f883a 	mov	r7,r3
  809780:	100d883a 	mov	r6,r2
  809784:	0810cfc0 	call	810cfc <__muldf3>
  809788:	180b883a 	mov	r5,r3
  80978c:	000d883a 	mov	r6,zero
  809790:	000f883a 	mov	r7,zero
  809794:	1009883a 	mov	r4,r2
  809798:	1021883a 	mov	r16,r2
  80979c:	1823883a 	mov	r17,r3
  8097a0:	08111480 	call	811148 <__nedf2>
  8097a4:	10004526 	beq	r2,zero,8098bc <_dtoa_r+0x728>
  8097a8:	900d883a 	mov	r6,r18
  8097ac:	980f883a 	mov	r7,r19
  8097b0:	8009883a 	mov	r4,r16
  8097b4:	880b883a 	mov	r5,r17
  8097b8:	0801c000 	call	801c00 <__divdf3>
  8097bc:	180b883a 	mov	r5,r3
  8097c0:	1009883a 	mov	r4,r2
  8097c4:	08114e80 	call	8114e8 <__fixdfsi>
  8097c8:	1009883a 	mov	r4,r2
  8097cc:	1029883a 	mov	r20,r2
  8097d0:	08113f00 	call	8113f0 <__floatsidf>
  8097d4:	180f883a 	mov	r7,r3
  8097d8:	9009883a 	mov	r4,r18
  8097dc:	980b883a 	mov	r5,r19
  8097e0:	100d883a 	mov	r6,r2
  8097e4:	0810cfc0 	call	810cfc <__muldf3>
  8097e8:	180f883a 	mov	r7,r3
  8097ec:	880b883a 	mov	r5,r17
  8097f0:	8009883a 	mov	r4,r16
  8097f4:	100d883a 	mov	r6,r2
  8097f8:	0810c080 	call	810c08 <__subdf3>
  8097fc:	1015883a 	mov	r10,r2
  809800:	a0800c04 	addi	r2,r20,48
  809804:	e0800005 	stb	r2,0(fp)
  809808:	e7000044 	addi	fp,fp,1
  80980c:	1817883a 	mov	r11,r3
  809810:	e57fd61e 	bne	fp,r21,80976c <_dtoa_r+0x5d8>
  809814:	500d883a 	mov	r6,r10
  809818:	180f883a 	mov	r7,r3
  80981c:	5009883a 	mov	r4,r10
  809820:	180b883a 	mov	r5,r3
  809824:	0810c880 	call	810c88 <__adddf3>
  809828:	100d883a 	mov	r6,r2
  80982c:	9009883a 	mov	r4,r18
  809830:	980b883a 	mov	r5,r19
  809834:	180f883a 	mov	r7,r3
  809838:	1021883a 	mov	r16,r2
  80983c:	1823883a 	mov	r17,r3
  809840:	08112e00 	call	8112e0 <__ltdf2>
  809844:	10000816 	blt	r2,zero,809868 <_dtoa_r+0x6d4>
  809848:	980b883a 	mov	r5,r19
  80984c:	800d883a 	mov	r6,r16
  809850:	880f883a 	mov	r7,r17
  809854:	9009883a 	mov	r4,r18
  809858:	08110c00 	call	8110c0 <__eqdf2>
  80985c:	1000171e 	bne	r2,zero,8098bc <_dtoa_r+0x728>
  809860:	a080004c 	andi	r2,r20,1
  809864:	10001526 	beq	r2,zero,8098bc <_dtoa_r+0x728>
  809868:	d8800d17 	ldw	r2,52(sp)
  80986c:	d8800415 	stw	r2,16(sp)
  809870:	e009883a 	mov	r4,fp
  809874:	213fffc4 	addi	r4,r4,-1
  809878:	20c00007 	ldb	r3,0(r4)
  80987c:	00800e44 	movi	r2,57
  809880:	1880081e 	bne	r3,r2,8098a4 <_dtoa_r+0x710>
  809884:	d8800517 	ldw	r2,20(sp)
  809888:	113ffa1e 	bne	r2,r4,809874 <_dtoa_r+0x6e0>
  80988c:	d8c00417 	ldw	r3,16(sp)
  809890:	d9800517 	ldw	r6,20(sp)
  809894:	00800c04 	movi	r2,48
  809898:	18c00044 	addi	r3,r3,1
  80989c:	d8c00415 	stw	r3,16(sp)
  8098a0:	30800005 	stb	r2,0(r6)
  8098a4:	20800003 	ldbu	r2,0(r4)
  8098a8:	d8c00417 	ldw	r3,16(sp)
  8098ac:	27000044 	addi	fp,r4,1
  8098b0:	10800044 	addi	r2,r2,1
  8098b4:	d8c00d15 	stw	r3,52(sp)
  8098b8:	20800005 	stb	r2,0(r4)
  8098bc:	d9001617 	ldw	r4,88(sp)
  8098c0:	d9400717 	ldw	r5,28(sp)
  8098c4:	080b03c0 	call	80b03c <_Bfree>
  8098c8:	e0000005 	stb	zero,0(fp)
  8098cc:	d9800d17 	ldw	r6,52(sp)
  8098d0:	d8c02717 	ldw	r3,156(sp)
  8098d4:	d9002917 	ldw	r4,164(sp)
  8098d8:	30800044 	addi	r2,r6,1
  8098dc:	18800015 	stw	r2,0(r3)
  8098e0:	20029c26 	beq	r4,zero,80a354 <_dtoa_r+0x11c0>
  8098e4:	d8c00517 	ldw	r3,20(sp)
  8098e8:	27000015 	stw	fp,0(r4)
  8098ec:	003e5d06 	br	809264 <_dtoa_r+0xd0>
  8098f0:	d9800d17 	ldw	r6,52(sp)
  8098f4:	00c02074 	movhi	r3,129
  8098f8:	18d41f04 	addi	r3,r3,20604
  8098fc:	d9001217 	ldw	r4,72(sp)
  809900:	300490fa 	slli	r2,r6,3
  809904:	d9401317 	ldw	r5,76(sp)
  809908:	10c5883a 	add	r2,r2,r3
  80990c:	12000017 	ldw	r8,0(r2)
  809910:	12400117 	ldw	r9,4(r2)
  809914:	400d883a 	mov	r6,r8
  809918:	480f883a 	mov	r7,r9
  80991c:	08112e00 	call	8112e0 <__ltdf2>
  809920:	1000030e 	bge	r2,zero,809930 <_dtoa_r+0x79c>
  809924:	d8800d17 	ldw	r2,52(sp)
  809928:	10bfffc4 	addi	r2,r2,-1
  80992c:	d8800d15 	stw	r2,52(sp)
  809930:	d8000c15 	stw	zero,48(sp)
  809934:	003ea806 	br	8093d8 <_dtoa_r+0x244>
  809938:	d9000b17 	ldw	r4,44(sp)
  80993c:	202cc03a 	cmpne	r22,r4,zero
  809940:	b000c71e 	bne	r22,zero,809c60 <_dtoa_r+0xacc>
  809944:	dc001117 	ldw	r16,68(sp)
  809948:	dc801017 	ldw	r18,64(sp)
  80994c:	0027883a 	mov	r19,zero
  809950:	04000b0e 	bge	zero,r16,809980 <_dtoa_r+0x7ec>
  809954:	d8c00a17 	ldw	r3,40(sp)
  809958:	00c0090e 	bge	zero,r3,809980 <_dtoa_r+0x7ec>
  80995c:	8005883a 	mov	r2,r16
  809960:	1c011316 	blt	r3,r16,809db0 <_dtoa_r+0xc1c>
  809964:	d9000a17 	ldw	r4,40(sp)
  809968:	d9801117 	ldw	r6,68(sp)
  80996c:	80a1c83a 	sub	r16,r16,r2
  809970:	2089c83a 	sub	r4,r4,r2
  809974:	308dc83a 	sub	r6,r6,r2
  809978:	d9000a15 	stw	r4,40(sp)
  80997c:	d9801115 	stw	r6,68(sp)
  809980:	d8801017 	ldw	r2,64(sp)
  809984:	0080150e 	bge	zero,r2,8099dc <_dtoa_r+0x848>
  809988:	d8c00b17 	ldw	r3,44(sp)
  80998c:	1805003a 	cmpeq	r2,r3,zero
  809990:	1001c91e 	bne	r2,zero,80a0b8 <_dtoa_r+0xf24>
  809994:	04800e0e 	bge	zero,r18,8099d0 <_dtoa_r+0x83c>
  809998:	d9001617 	ldw	r4,88(sp)
  80999c:	980b883a 	mov	r5,r19
  8099a0:	900d883a 	mov	r6,r18
  8099a4:	080be880 	call	80be88 <__pow5mult>
  8099a8:	d9001617 	ldw	r4,88(sp)
  8099ac:	d9800717 	ldw	r6,28(sp)
  8099b0:	100b883a 	mov	r5,r2
  8099b4:	1027883a 	mov	r19,r2
  8099b8:	080bacc0 	call	80bacc <__multiply>
  8099bc:	d9001617 	ldw	r4,88(sp)
  8099c0:	d9400717 	ldw	r5,28(sp)
  8099c4:	1023883a 	mov	r17,r2
  8099c8:	080b03c0 	call	80b03c <_Bfree>
  8099cc:	dc400715 	stw	r17,28(sp)
  8099d0:	d9001017 	ldw	r4,64(sp)
  8099d4:	248dc83a 	sub	r6,r4,r18
  8099d8:	30010e1e 	bne	r6,zero,809e14 <_dtoa_r+0xc80>
  8099dc:	d9001617 	ldw	r4,88(sp)
  8099e0:	04400044 	movi	r17,1
  8099e4:	880b883a 	mov	r5,r17
  8099e8:	080bd200 	call	80bd20 <__i2b>
  8099ec:	d9800917 	ldw	r6,36(sp)
  8099f0:	1025883a 	mov	r18,r2
  8099f4:	0180040e 	bge	zero,r6,809a08 <_dtoa_r+0x874>
  8099f8:	d9001617 	ldw	r4,88(sp)
  8099fc:	100b883a 	mov	r5,r2
  809a00:	080be880 	call	80be88 <__pow5mult>
  809a04:	1025883a 	mov	r18,r2
  809a08:	d8801717 	ldw	r2,92(sp)
  809a0c:	8880f30e 	bge	r17,r2,809ddc <_dtoa_r+0xc48>
  809a10:	0023883a 	mov	r17,zero
  809a14:	d9800917 	ldw	r6,36(sp)
  809a18:	30019e1e 	bne	r6,zero,80a094 <_dtoa_r+0xf00>
  809a1c:	00c00044 	movi	r3,1
  809a20:	d9000a17 	ldw	r4,40(sp)
  809a24:	20c5883a 	add	r2,r4,r3
  809a28:	10c007cc 	andi	r3,r2,31
  809a2c:	1800841e 	bne	r3,zero,809c40 <_dtoa_r+0xaac>
  809a30:	00800704 	movi	r2,28
  809a34:	d9000a17 	ldw	r4,40(sp)
  809a38:	d9801117 	ldw	r6,68(sp)
  809a3c:	80a1883a 	add	r16,r16,r2
  809a40:	2089883a 	add	r4,r4,r2
  809a44:	308d883a 	add	r6,r6,r2
  809a48:	d9000a15 	stw	r4,40(sp)
  809a4c:	d9801115 	stw	r6,68(sp)
  809a50:	d8801117 	ldw	r2,68(sp)
  809a54:	0080050e 	bge	zero,r2,809a6c <_dtoa_r+0x8d8>
  809a58:	d9400717 	ldw	r5,28(sp)
  809a5c:	d9001617 	ldw	r4,88(sp)
  809a60:	100d883a 	mov	r6,r2
  809a64:	080b9800 	call	80b980 <__lshift>
  809a68:	d8800715 	stw	r2,28(sp)
  809a6c:	d8c00a17 	ldw	r3,40(sp)
  809a70:	00c0050e 	bge	zero,r3,809a88 <_dtoa_r+0x8f4>
  809a74:	d9001617 	ldw	r4,88(sp)
  809a78:	900b883a 	mov	r5,r18
  809a7c:	180d883a 	mov	r6,r3
  809a80:	080b9800 	call	80b980 <__lshift>
  809a84:	1025883a 	mov	r18,r2
  809a88:	d9000c17 	ldw	r4,48(sp)
  809a8c:	2005003a 	cmpeq	r2,r4,zero
  809a90:	10016f26 	beq	r2,zero,80a050 <_dtoa_r+0xebc>
  809a94:	d9000f17 	ldw	r4,60(sp)
  809a98:	0102170e 	bge	zero,r4,80a2f8 <_dtoa_r+0x1164>
  809a9c:	d9800b17 	ldw	r6,44(sp)
  809aa0:	3005003a 	cmpeq	r2,r6,zero
  809aa4:	1000881e 	bne	r2,zero,809cc8 <_dtoa_r+0xb34>
  809aa8:	0400050e 	bge	zero,r16,809ac0 <_dtoa_r+0x92c>
  809aac:	d9001617 	ldw	r4,88(sp)
  809ab0:	980b883a 	mov	r5,r19
  809ab4:	800d883a 	mov	r6,r16
  809ab8:	080b9800 	call	80b980 <__lshift>
  809abc:	1027883a 	mov	r19,r2
  809ac0:	8804c03a 	cmpne	r2,r17,zero
  809ac4:	1002541e 	bne	r2,zero,80a418 <_dtoa_r+0x1284>
  809ac8:	980b883a 	mov	r5,r19
  809acc:	dd800517 	ldw	r22,20(sp)
  809ad0:	dcc00615 	stw	r19,24(sp)
  809ad4:	a700004c 	andi	fp,r20,1
  809ad8:	2827883a 	mov	r19,r5
  809adc:	d9000717 	ldw	r4,28(sp)
  809ae0:	900b883a 	mov	r5,r18
  809ae4:	0808f500 	call	808f50 <quorem>
  809ae8:	d9000717 	ldw	r4,28(sp)
  809aec:	d9400617 	ldw	r5,24(sp)
  809af0:	1023883a 	mov	r17,r2
  809af4:	8dc00c04 	addi	r23,r17,48
  809af8:	080b1980 	call	80b198 <__mcmp>
  809afc:	d9001617 	ldw	r4,88(sp)
  809b00:	900b883a 	mov	r5,r18
  809b04:	980d883a 	mov	r6,r19
  809b08:	1029883a 	mov	r20,r2
  809b0c:	080b7f40 	call	80b7f4 <__mdiff>
  809b10:	102b883a 	mov	r21,r2
  809b14:	10800317 	ldw	r2,12(r2)
  809b18:	1001281e 	bne	r2,zero,809fbc <_dtoa_r+0xe28>
  809b1c:	d9000717 	ldw	r4,28(sp)
  809b20:	a80b883a 	mov	r5,r21
  809b24:	080b1980 	call	80b198 <__mcmp>
  809b28:	d9001617 	ldw	r4,88(sp)
  809b2c:	1021883a 	mov	r16,r2
  809b30:	a80b883a 	mov	r5,r21
  809b34:	080b03c0 	call	80b03c <_Bfree>
  809b38:	8000041e 	bne	r16,zero,809b4c <_dtoa_r+0x9b8>
  809b3c:	d8801717 	ldw	r2,92(sp)
  809b40:	1000021e 	bne	r2,zero,809b4c <_dtoa_r+0x9b8>
  809b44:	e004c03a 	cmpne	r2,fp,zero
  809b48:	10011726 	beq	r2,zero,809fa8 <_dtoa_r+0xe14>
  809b4c:	a0010616 	blt	r20,zero,809f68 <_dtoa_r+0xdd4>
  809b50:	a000041e 	bne	r20,zero,809b64 <_dtoa_r+0x9d0>
  809b54:	d8c01717 	ldw	r3,92(sp)
  809b58:	1800021e 	bne	r3,zero,809b64 <_dtoa_r+0x9d0>
  809b5c:	e004c03a 	cmpne	r2,fp,zero
  809b60:	10010126 	beq	r2,zero,809f68 <_dtoa_r+0xdd4>
  809b64:	04023d16 	blt	zero,r16,80a45c <_dtoa_r+0x12c8>
  809b68:	b5c00005 	stb	r23,0(r22)
  809b6c:	d9800517 	ldw	r6,20(sp)
  809b70:	d9000f17 	ldw	r4,60(sp)
  809b74:	b5800044 	addi	r22,r22,1
  809b78:	3105883a 	add	r2,r6,r4
  809b7c:	b0806526 	beq	r22,r2,809d14 <_dtoa_r+0xb80>
  809b80:	d9400717 	ldw	r5,28(sp)
  809b84:	d9001617 	ldw	r4,88(sp)
  809b88:	01800284 	movi	r6,10
  809b8c:	000f883a 	mov	r7,zero
  809b90:	080bd5c0 	call	80bd5c <__multadd>
  809b94:	d8800715 	stw	r2,28(sp)
  809b98:	d8800617 	ldw	r2,24(sp)
  809b9c:	14c10c26 	beq	r2,r19,809fd0 <_dtoa_r+0xe3c>
  809ba0:	d9400617 	ldw	r5,24(sp)
  809ba4:	d9001617 	ldw	r4,88(sp)
  809ba8:	01800284 	movi	r6,10
  809bac:	000f883a 	mov	r7,zero
  809bb0:	080bd5c0 	call	80bd5c <__multadd>
  809bb4:	d9001617 	ldw	r4,88(sp)
  809bb8:	980b883a 	mov	r5,r19
  809bbc:	01800284 	movi	r6,10
  809bc0:	000f883a 	mov	r7,zero
  809bc4:	d8800615 	stw	r2,24(sp)
  809bc8:	080bd5c0 	call	80bd5c <__multadd>
  809bcc:	1027883a 	mov	r19,r2
  809bd0:	003fc206 	br	809adc <_dtoa_r+0x948>
  809bd4:	2445c83a 	sub	r2,r4,r17
  809bd8:	a088983a 	sll	r4,r20,r2
  809bdc:	003e4b06 	br	80950c <_dtoa_r+0x378>
  809be0:	01bfffc4 	movi	r6,-1
  809be4:	00800044 	movi	r2,1
  809be8:	d9800e15 	stw	r6,56(sp)
  809bec:	d9800f15 	stw	r6,60(sp)
  809bf0:	d8800b15 	stw	r2,44(sp)
  809bf4:	d8c01617 	ldw	r3,88(sp)
  809bf8:	008005c4 	movi	r2,23
  809bfc:	18001115 	stw	zero,68(r3)
  809c00:	1580082e 	bgeu	r2,r22,809c24 <_dtoa_r+0xa90>
  809c04:	00c00104 	movi	r3,4
  809c08:	0009883a 	mov	r4,zero
  809c0c:	18c7883a 	add	r3,r3,r3
  809c10:	18800504 	addi	r2,r3,20
  809c14:	21000044 	addi	r4,r4,1
  809c18:	b0bffc2e 	bgeu	r22,r2,809c0c <_dtoa_r+0xa78>
  809c1c:	d9801617 	ldw	r6,88(sp)
  809c20:	31001115 	stw	r4,68(r6)
  809c24:	dc000f17 	ldw	r16,60(sp)
  809c28:	003e4b06 	br	809558 <_dtoa_r+0x3c4>
  809c2c:	d9801717 	ldw	r6,92(sp)
  809c30:	0023883a 	mov	r17,zero
  809c34:	31bfff04 	addi	r6,r6,-4
  809c38:	d9801715 	stw	r6,92(sp)
  809c3c:	003df806 	br	809420 <_dtoa_r+0x28c>
  809c40:	00800804 	movi	r2,32
  809c44:	10c9c83a 	sub	r4,r2,r3
  809c48:	00c00104 	movi	r3,4
  809c4c:	19005a16 	blt	r3,r4,809db8 <_dtoa_r+0xc24>
  809c50:	008000c4 	movi	r2,3
  809c54:	113f7e16 	blt	r2,r4,809a50 <_dtoa_r+0x8bc>
  809c58:	20800704 	addi	r2,r4,28
  809c5c:	003f7506 	br	809a34 <_dtoa_r+0x8a0>
  809c60:	d9801717 	ldw	r6,92(sp)
  809c64:	00800044 	movi	r2,1
  809c68:	1180a10e 	bge	r2,r6,809ef0 <_dtoa_r+0xd5c>
  809c6c:	d9800f17 	ldw	r6,60(sp)
  809c70:	d8c01017 	ldw	r3,64(sp)
  809c74:	30bfffc4 	addi	r2,r6,-1
  809c78:	1881c616 	blt	r3,r2,80a394 <_dtoa_r+0x1200>
  809c7c:	18a5c83a 	sub	r18,r3,r2
  809c80:	d8800f17 	ldw	r2,60(sp)
  809c84:	10026216 	blt	r2,zero,80a610 <_dtoa_r+0x147c>
  809c88:	dc001117 	ldw	r16,68(sp)
  809c8c:	1007883a 	mov	r3,r2
  809c90:	d9800a17 	ldw	r6,40(sp)
  809c94:	d8801117 	ldw	r2,68(sp)
  809c98:	d9001617 	ldw	r4,88(sp)
  809c9c:	30cd883a 	add	r6,r6,r3
  809ca0:	10c5883a 	add	r2,r2,r3
  809ca4:	01400044 	movi	r5,1
  809ca8:	d9800a15 	stw	r6,40(sp)
  809cac:	d8801115 	stw	r2,68(sp)
  809cb0:	080bd200 	call	80bd20 <__i2b>
  809cb4:	1027883a 	mov	r19,r2
  809cb8:	003f2506 	br	809950 <_dtoa_r+0x7bc>
  809cbc:	00c02074 	movhi	r3,129
  809cc0:	18d3f804 	addi	r3,r3,20448
  809cc4:	003d6706 	br	809264 <_dtoa_r+0xd0>
  809cc8:	dd800517 	ldw	r22,20(sp)
  809ccc:	04000044 	movi	r16,1
  809cd0:	00000706 	br	809cf0 <_dtoa_r+0xb5c>
  809cd4:	d9400717 	ldw	r5,28(sp)
  809cd8:	d9001617 	ldw	r4,88(sp)
  809cdc:	01800284 	movi	r6,10
  809ce0:	000f883a 	mov	r7,zero
  809ce4:	080bd5c0 	call	80bd5c <__multadd>
  809ce8:	d8800715 	stw	r2,28(sp)
  809cec:	84000044 	addi	r16,r16,1
  809cf0:	d9000717 	ldw	r4,28(sp)
  809cf4:	900b883a 	mov	r5,r18
  809cf8:	0808f500 	call	808f50 <quorem>
  809cfc:	15c00c04 	addi	r23,r2,48
  809d00:	b5c00005 	stb	r23,0(r22)
  809d04:	d8c00f17 	ldw	r3,60(sp)
  809d08:	b5800044 	addi	r22,r22,1
  809d0c:	80fff116 	blt	r16,r3,809cd4 <_dtoa_r+0xb40>
  809d10:	d8000615 	stw	zero,24(sp)
  809d14:	d9400717 	ldw	r5,28(sp)
  809d18:	d9001617 	ldw	r4,88(sp)
  809d1c:	01800044 	movi	r6,1
  809d20:	080b9800 	call	80b980 <__lshift>
  809d24:	1009883a 	mov	r4,r2
  809d28:	900b883a 	mov	r5,r18
  809d2c:	d8800715 	stw	r2,28(sp)
  809d30:	080b1980 	call	80b198 <__mcmp>
  809d34:	00803c0e 	bge	zero,r2,809e28 <_dtoa_r+0xc94>
  809d38:	b009883a 	mov	r4,r22
  809d3c:	213fffc4 	addi	r4,r4,-1
  809d40:	21400003 	ldbu	r5,0(r4)
  809d44:	00800e44 	movi	r2,57
  809d48:	28c03fcc 	andi	r3,r5,255
  809d4c:	18c0201c 	xori	r3,r3,128
  809d50:	18ffe004 	addi	r3,r3,-128
  809d54:	1881981e 	bne	r3,r2,80a3b8 <_dtoa_r+0x1224>
  809d58:	d9800517 	ldw	r6,20(sp)
  809d5c:	21bff71e 	bne	r4,r6,809d3c <_dtoa_r+0xba8>
  809d60:	d8800d17 	ldw	r2,52(sp)
  809d64:	37000044 	addi	fp,r6,1
  809d68:	10800044 	addi	r2,r2,1
  809d6c:	d8800d15 	stw	r2,52(sp)
  809d70:	00800c44 	movi	r2,49
  809d74:	30800005 	stb	r2,0(r6)
  809d78:	d9001617 	ldw	r4,88(sp)
  809d7c:	900b883a 	mov	r5,r18
  809d80:	080b03c0 	call	80b03c <_Bfree>
  809d84:	983ecd26 	beq	r19,zero,8098bc <_dtoa_r+0x728>
  809d88:	d8c00617 	ldw	r3,24(sp)
  809d8c:	18000426 	beq	r3,zero,809da0 <_dtoa_r+0xc0c>
  809d90:	1cc00326 	beq	r3,r19,809da0 <_dtoa_r+0xc0c>
  809d94:	d9001617 	ldw	r4,88(sp)
  809d98:	180b883a 	mov	r5,r3
  809d9c:	080b03c0 	call	80b03c <_Bfree>
  809da0:	d9001617 	ldw	r4,88(sp)
  809da4:	980b883a 	mov	r5,r19
  809da8:	080b03c0 	call	80b03c <_Bfree>
  809dac:	003ec306 	br	8098bc <_dtoa_r+0x728>
  809db0:	1805883a 	mov	r2,r3
  809db4:	003eeb06 	br	809964 <_dtoa_r+0x7d0>
  809db8:	d9800a17 	ldw	r6,40(sp)
  809dbc:	d8c01117 	ldw	r3,68(sp)
  809dc0:	20bfff04 	addi	r2,r4,-4
  809dc4:	308d883a 	add	r6,r6,r2
  809dc8:	1887883a 	add	r3,r3,r2
  809dcc:	80a1883a 	add	r16,r16,r2
  809dd0:	d9800a15 	stw	r6,40(sp)
  809dd4:	d8c01115 	stw	r3,68(sp)
  809dd8:	003f1d06 	br	809a50 <_dtoa_r+0x8bc>
  809ddc:	a03f0c1e 	bne	r20,zero,809a10 <_dtoa_r+0x87c>
  809de0:	00800434 	movhi	r2,16
  809de4:	10bfffc4 	addi	r2,r2,-1
  809de8:	a884703a 	and	r2,r21,r2
  809dec:	103f081e 	bne	r2,zero,809a10 <_dtoa_r+0x87c>
  809df0:	a89ffc2c 	andhi	r2,r21,32752
  809df4:	103f0626 	beq	r2,zero,809a10 <_dtoa_r+0x87c>
  809df8:	d8c01117 	ldw	r3,68(sp)
  809dfc:	d9000a17 	ldw	r4,40(sp)
  809e00:	18c00044 	addi	r3,r3,1
  809e04:	21000044 	addi	r4,r4,1
  809e08:	d8c01115 	stw	r3,68(sp)
  809e0c:	d9000a15 	stw	r4,40(sp)
  809e10:	003f0006 	br	809a14 <_dtoa_r+0x880>
  809e14:	d9400717 	ldw	r5,28(sp)
  809e18:	d9001617 	ldw	r4,88(sp)
  809e1c:	080be880 	call	80be88 <__pow5mult>
  809e20:	d8800715 	stw	r2,28(sp)
  809e24:	003eed06 	br	8099dc <_dtoa_r+0x848>
  809e28:	1000021e 	bne	r2,zero,809e34 <_dtoa_r+0xca0>
  809e2c:	b880004c 	andi	r2,r23,1
  809e30:	103fc11e 	bne	r2,zero,809d38 <_dtoa_r+0xba4>
  809e34:	b5bfffc4 	addi	r22,r22,-1
  809e38:	b0c00007 	ldb	r3,0(r22)
  809e3c:	00800c04 	movi	r2,48
  809e40:	18bffc26 	beq	r3,r2,809e34 <_dtoa_r+0xca0>
  809e44:	b7000044 	addi	fp,r22,1
  809e48:	003fcb06 	br	809d78 <_dtoa_r+0xbe4>
  809e4c:	d9800d17 	ldw	r6,52(sp)
  809e50:	018fc83a 	sub	r7,zero,r6
  809e54:	3801f726 	beq	r7,zero,80a634 <_dtoa_r+0x14a0>
  809e58:	398003cc 	andi	r6,r7,15
  809e5c:	300c90fa 	slli	r6,r6,3
  809e60:	01402074 	movhi	r5,129
  809e64:	29541f04 	addi	r5,r5,20604
  809e68:	d9001217 	ldw	r4,72(sp)
  809e6c:	314d883a 	add	r6,r6,r5
  809e70:	30c00117 	ldw	r3,4(r6)
  809e74:	30800017 	ldw	r2,0(r6)
  809e78:	d9401317 	ldw	r5,76(sp)
  809e7c:	3821d13a 	srai	r16,r7,4
  809e80:	100d883a 	mov	r6,r2
  809e84:	180f883a 	mov	r7,r3
  809e88:	0810cfc0 	call	810cfc <__muldf3>
  809e8c:	1011883a 	mov	r8,r2
  809e90:	1813883a 	mov	r9,r3
  809e94:	1029883a 	mov	r20,r2
  809e98:	182b883a 	mov	r21,r3
  809e9c:	8001e526 	beq	r16,zero,80a634 <_dtoa_r+0x14a0>
  809ea0:	05800084 	movi	r22,2
  809ea4:	04402074 	movhi	r17,129
  809ea8:	8c545104 	addi	r17,r17,20804
  809eac:	8080004c 	andi	r2,r16,1
  809eb0:	1005003a 	cmpeq	r2,r2,zero
  809eb4:	1000081e 	bne	r2,zero,809ed8 <_dtoa_r+0xd44>
  809eb8:	89800017 	ldw	r6,0(r17)
  809ebc:	89c00117 	ldw	r7,4(r17)
  809ec0:	480b883a 	mov	r5,r9
  809ec4:	4009883a 	mov	r4,r8
  809ec8:	0810cfc0 	call	810cfc <__muldf3>
  809ecc:	1011883a 	mov	r8,r2
  809ed0:	b5800044 	addi	r22,r22,1
  809ed4:	1813883a 	mov	r9,r3
  809ed8:	8021d07a 	srai	r16,r16,1
  809edc:	8c400204 	addi	r17,r17,8
  809ee0:	803ff21e 	bne	r16,zero,809eac <_dtoa_r+0xd18>
  809ee4:	4029883a 	mov	r20,r8
  809ee8:	482b883a 	mov	r21,r9
  809eec:	003dca06 	br	809618 <_dtoa_r+0x484>
  809ef0:	d9000817 	ldw	r4,32(sp)
  809ef4:	2005003a 	cmpeq	r2,r4,zero
  809ef8:	1001f61e 	bne	r2,zero,80a6d4 <_dtoa_r+0x1540>
  809efc:	dc001117 	ldw	r16,68(sp)
  809f00:	dc801017 	ldw	r18,64(sp)
  809f04:	18c10cc4 	addi	r3,r3,1075
  809f08:	003f6106 	br	809c90 <_dtoa_r+0xafc>
  809f0c:	d8000b15 	stw	zero,44(sp)
  809f10:	d9802617 	ldw	r6,152(sp)
  809f14:	d8c00d17 	ldw	r3,52(sp)
  809f18:	30800044 	addi	r2,r6,1
  809f1c:	18ad883a 	add	r22,r3,r2
  809f20:	b13fffc4 	addi	r4,r22,-1
  809f24:	d9000e15 	stw	r4,56(sp)
  809f28:	0581f60e 	bge	zero,r22,80a704 <_dtoa_r+0x1570>
  809f2c:	dd800f15 	stw	r22,60(sp)
  809f30:	003f3006 	br	809bf4 <_dtoa_r+0xa60>
  809f34:	d8000b15 	stw	zero,44(sp)
  809f38:	d9002617 	ldw	r4,152(sp)
  809f3c:	0101eb0e 	bge	zero,r4,80a6ec <_dtoa_r+0x1558>
  809f40:	202d883a 	mov	r22,r4
  809f44:	d9000e15 	stw	r4,56(sp)
  809f48:	d9000f15 	stw	r4,60(sp)
  809f4c:	003f2906 	br	809bf4 <_dtoa_r+0xa60>
  809f50:	01800044 	movi	r6,1
  809f54:	d9800b15 	stw	r6,44(sp)
  809f58:	003ff706 	br	809f38 <_dtoa_r+0xda4>
  809f5c:	01000044 	movi	r4,1
  809f60:	d9000b15 	stw	r4,44(sp)
  809f64:	003fea06 	br	809f10 <_dtoa_r+0xd7c>
  809f68:	04000c0e 	bge	zero,r16,809f9c <_dtoa_r+0xe08>
  809f6c:	d9400717 	ldw	r5,28(sp)
  809f70:	d9001617 	ldw	r4,88(sp)
  809f74:	01800044 	movi	r6,1
  809f78:	080b9800 	call	80b980 <__lshift>
  809f7c:	1009883a 	mov	r4,r2
  809f80:	900b883a 	mov	r5,r18
  809f84:	d8800715 	stw	r2,28(sp)
  809f88:	080b1980 	call	80b198 <__mcmp>
  809f8c:	0081e00e 	bge	zero,r2,80a710 <_dtoa_r+0x157c>
  809f90:	bdc00044 	addi	r23,r23,1
  809f94:	00800e84 	movi	r2,58
  809f98:	b881a226 	beq	r23,r2,80a624 <_dtoa_r+0x1490>
  809f9c:	b7000044 	addi	fp,r22,1
  809fa0:	b5c00005 	stb	r23,0(r22)
  809fa4:	003f7406 	br	809d78 <_dtoa_r+0xbe4>
  809fa8:	00800e44 	movi	r2,57
  809fac:	b8819d26 	beq	r23,r2,80a624 <_dtoa_r+0x1490>
  809fb0:	053ffa0e 	bge	zero,r20,809f9c <_dtoa_r+0xe08>
  809fb4:	8dc00c44 	addi	r23,r17,49
  809fb8:	003ff806 	br	809f9c <_dtoa_r+0xe08>
  809fbc:	d9001617 	ldw	r4,88(sp)
  809fc0:	a80b883a 	mov	r5,r21
  809fc4:	04000044 	movi	r16,1
  809fc8:	080b03c0 	call	80b03c <_Bfree>
  809fcc:	003edf06 	br	809b4c <_dtoa_r+0x9b8>
  809fd0:	d9001617 	ldw	r4,88(sp)
  809fd4:	980b883a 	mov	r5,r19
  809fd8:	01800284 	movi	r6,10
  809fdc:	000f883a 	mov	r7,zero
  809fe0:	080bd5c0 	call	80bd5c <__multadd>
  809fe4:	1027883a 	mov	r19,r2
  809fe8:	d8800615 	stw	r2,24(sp)
  809fec:	003ebb06 	br	809adc <_dtoa_r+0x948>
  809ff0:	d9801117 	ldw	r6,68(sp)
  809ff4:	d8800d17 	ldw	r2,52(sp)
  809ff8:	d8000915 	stw	zero,36(sp)
  809ffc:	308dc83a 	sub	r6,r6,r2
  80a000:	0087c83a 	sub	r3,zero,r2
  80a004:	d9801115 	stw	r6,68(sp)
  80a008:	d8c01015 	stw	r3,64(sp)
  80a00c:	003cfe06 	br	809408 <_dtoa_r+0x274>
  80a010:	018dc83a 	sub	r6,zero,r6
  80a014:	d9801115 	stw	r6,68(sp)
  80a018:	d8000a15 	stw	zero,40(sp)
  80a01c:	003cf306 	br	8093ec <_dtoa_r+0x258>
  80a020:	d9000d17 	ldw	r4,52(sp)
  80a024:	08113f00 	call	8113f0 <__floatsidf>
  80a028:	880b883a 	mov	r5,r17
  80a02c:	8009883a 	mov	r4,r16
  80a030:	180f883a 	mov	r7,r3
  80a034:	100d883a 	mov	r6,r2
  80a038:	08111480 	call	811148 <__nedf2>
  80a03c:	103ce126 	beq	r2,zero,8093c4 <_dtoa_r+0x230>
  80a040:	d9800d17 	ldw	r6,52(sp)
  80a044:	31bfffc4 	addi	r6,r6,-1
  80a048:	d9800d15 	stw	r6,52(sp)
  80a04c:	003cdd06 	br	8093c4 <_dtoa_r+0x230>
  80a050:	d9000717 	ldw	r4,28(sp)
  80a054:	900b883a 	mov	r5,r18
  80a058:	080b1980 	call	80b198 <__mcmp>
  80a05c:	103e8d0e 	bge	r2,zero,809a94 <_dtoa_r+0x900>
  80a060:	d9400717 	ldw	r5,28(sp)
  80a064:	d9001617 	ldw	r4,88(sp)
  80a068:	01800284 	movi	r6,10
  80a06c:	000f883a 	mov	r7,zero
  80a070:	080bd5c0 	call	80bd5c <__multadd>
  80a074:	d9800d17 	ldw	r6,52(sp)
  80a078:	d8800715 	stw	r2,28(sp)
  80a07c:	31bfffc4 	addi	r6,r6,-1
  80a080:	d9800d15 	stw	r6,52(sp)
  80a084:	b001a71e 	bne	r22,zero,80a724 <_dtoa_r+0x1590>
  80a088:	d8800e17 	ldw	r2,56(sp)
  80a08c:	d8800f15 	stw	r2,60(sp)
  80a090:	003e8006 	br	809a94 <_dtoa_r+0x900>
  80a094:	90800417 	ldw	r2,16(r18)
  80a098:	1085883a 	add	r2,r2,r2
  80a09c:	1085883a 	add	r2,r2,r2
  80a0a0:	1485883a 	add	r2,r2,r18
  80a0a4:	11000417 	ldw	r4,16(r2)
  80a0a8:	080b0640 	call	80b064 <__hi0bits>
  80a0ac:	00c00804 	movi	r3,32
  80a0b0:	1887c83a 	sub	r3,r3,r2
  80a0b4:	003e5a06 	br	809a20 <_dtoa_r+0x88c>
  80a0b8:	d9400717 	ldw	r5,28(sp)
  80a0bc:	d9801017 	ldw	r6,64(sp)
  80a0c0:	d9001617 	ldw	r4,88(sp)
  80a0c4:	080be880 	call	80be88 <__pow5mult>
  80a0c8:	d8800715 	stw	r2,28(sp)
  80a0cc:	003e4306 	br	8099dc <_dtoa_r+0x848>
  80a0d0:	d9800f17 	ldw	r6,60(sp)
  80a0d4:	d8800d17 	ldw	r2,52(sp)
  80a0d8:	d9800315 	stw	r6,12(sp)
  80a0dc:	d8800415 	stw	r2,16(sp)
  80a0e0:	d8c00b17 	ldw	r3,44(sp)
  80a0e4:	1805003a 	cmpeq	r2,r3,zero
  80a0e8:	1000e21e 	bne	r2,zero,80a474 <_dtoa_r+0x12e0>
  80a0ec:	d9000317 	ldw	r4,12(sp)
  80a0f0:	0005883a 	mov	r2,zero
  80a0f4:	00cff834 	movhi	r3,16352
  80a0f8:	200c90fa 	slli	r6,r4,3
  80a0fc:	01002074 	movhi	r4,129
  80a100:	21141f04 	addi	r4,r4,20604
  80a104:	180b883a 	mov	r5,r3
  80a108:	310d883a 	add	r6,r6,r4
  80a10c:	327fff17 	ldw	r9,-4(r6)
  80a110:	323ffe17 	ldw	r8,-8(r6)
  80a114:	1009883a 	mov	r4,r2
  80a118:	480f883a 	mov	r7,r9
  80a11c:	400d883a 	mov	r6,r8
  80a120:	0801c000 	call	801c00 <__divdf3>
  80a124:	180b883a 	mov	r5,r3
  80a128:	b00d883a 	mov	r6,r22
  80a12c:	b80f883a 	mov	r7,r23
  80a130:	1009883a 	mov	r4,r2
  80a134:	0810c080 	call	810c08 <__subdf3>
  80a138:	a80b883a 	mov	r5,r21
  80a13c:	a009883a 	mov	r4,r20
  80a140:	d8c01915 	stw	r3,100(sp)
  80a144:	d8801815 	stw	r2,96(sp)
  80a148:	08114e80 	call	8114e8 <__fixdfsi>
  80a14c:	1009883a 	mov	r4,r2
  80a150:	1027883a 	mov	r19,r2
  80a154:	08113f00 	call	8113f0 <__floatsidf>
  80a158:	a80b883a 	mov	r5,r21
  80a15c:	a009883a 	mov	r4,r20
  80a160:	180f883a 	mov	r7,r3
  80a164:	100d883a 	mov	r6,r2
  80a168:	0810c080 	call	810c08 <__subdf3>
  80a16c:	d9801817 	ldw	r6,96(sp)
  80a170:	1823883a 	mov	r17,r3
  80a174:	d8801415 	stw	r2,80(sp)
  80a178:	302d883a 	mov	r22,r6
  80a17c:	d9800517 	ldw	r6,20(sp)
  80a180:	9cc00c04 	addi	r19,r19,48
  80a184:	dc401515 	stw	r17,84(sp)
  80a188:	d8c01917 	ldw	r3,100(sp)
  80a18c:	34c00005 	stb	r19,0(r6)
  80a190:	d8800517 	ldw	r2,20(sp)
  80a194:	d9401917 	ldw	r5,100(sp)
  80a198:	d9801417 	ldw	r6,80(sp)
  80a19c:	b009883a 	mov	r4,r22
  80a1a0:	880f883a 	mov	r7,r17
  80a1a4:	182f883a 	mov	r23,r3
  80a1a8:	17000044 	addi	fp,r2,1
  80a1ac:	08111d00 	call	8111d0 <__gtdf2>
  80a1b0:	00804e16 	blt	zero,r2,80a2ec <_dtoa_r+0x1158>
  80a1b4:	d9801417 	ldw	r6,80(sp)
  80a1b8:	0005883a 	mov	r2,zero
  80a1bc:	00cffc34 	movhi	r3,16368
  80a1c0:	180b883a 	mov	r5,r3
  80a1c4:	880f883a 	mov	r7,r17
  80a1c8:	1009883a 	mov	r4,r2
  80a1cc:	0810c080 	call	810c08 <__subdf3>
  80a1d0:	d9401917 	ldw	r5,100(sp)
  80a1d4:	180f883a 	mov	r7,r3
  80a1d8:	b009883a 	mov	r4,r22
  80a1dc:	100d883a 	mov	r6,r2
  80a1e0:	08111d00 	call	8111d0 <__gtdf2>
  80a1e4:	00bda216 	blt	zero,r2,809870 <_dtoa_r+0x6dc>
  80a1e8:	d8c00317 	ldw	r3,12(sp)
  80a1ec:	00800044 	movi	r2,1
  80a1f0:	10c01216 	blt	r2,r3,80a23c <_dtoa_r+0x10a8>
  80a1f4:	003d4506 	br	80970c <_dtoa_r+0x578>
  80a1f8:	d9801417 	ldw	r6,80(sp)
  80a1fc:	0005883a 	mov	r2,zero
  80a200:	00cffc34 	movhi	r3,16368
  80a204:	180b883a 	mov	r5,r3
  80a208:	880f883a 	mov	r7,r17
  80a20c:	1009883a 	mov	r4,r2
  80a210:	0810c080 	call	810c08 <__subdf3>
  80a214:	d9c01b17 	ldw	r7,108(sp)
  80a218:	180b883a 	mov	r5,r3
  80a21c:	1009883a 	mov	r4,r2
  80a220:	b00d883a 	mov	r6,r22
  80a224:	08112e00 	call	8112e0 <__ltdf2>
  80a228:	103d9116 	blt	r2,zero,809870 <_dtoa_r+0x6dc>
  80a22c:	d9800517 	ldw	r6,20(sp)
  80a230:	d9000317 	ldw	r4,12(sp)
  80a234:	3105883a 	add	r2,r6,r4
  80a238:	e0bd3426 	beq	fp,r2,80970c <_dtoa_r+0x578>
  80a23c:	04500934 	movhi	r17,16420
  80a240:	0021883a 	mov	r16,zero
  80a244:	b80b883a 	mov	r5,r23
  80a248:	b009883a 	mov	r4,r22
  80a24c:	800d883a 	mov	r6,r16
  80a250:	880f883a 	mov	r7,r17
  80a254:	0810cfc0 	call	810cfc <__muldf3>
  80a258:	d9401517 	ldw	r5,84(sp)
  80a25c:	d9001417 	ldw	r4,80(sp)
  80a260:	880f883a 	mov	r7,r17
  80a264:	000d883a 	mov	r6,zero
  80a268:	d8801a15 	stw	r2,104(sp)
  80a26c:	d8c01b15 	stw	r3,108(sp)
  80a270:	0810cfc0 	call	810cfc <__muldf3>
  80a274:	180b883a 	mov	r5,r3
  80a278:	1009883a 	mov	r4,r2
  80a27c:	1823883a 	mov	r17,r3
  80a280:	1021883a 	mov	r16,r2
  80a284:	08114e80 	call	8114e8 <__fixdfsi>
  80a288:	1009883a 	mov	r4,r2
  80a28c:	102b883a 	mov	r21,r2
  80a290:	08113f00 	call	8113f0 <__floatsidf>
  80a294:	880b883a 	mov	r5,r17
  80a298:	8009883a 	mov	r4,r16
  80a29c:	180f883a 	mov	r7,r3
  80a2a0:	100d883a 	mov	r6,r2
  80a2a4:	0810c080 	call	810c08 <__subdf3>
  80a2a8:	1021883a 	mov	r16,r2
  80a2ac:	d9001b17 	ldw	r4,108(sp)
  80a2b0:	1823883a 	mov	r17,r3
  80a2b4:	dc001415 	stw	r16,80(sp)
  80a2b8:	ad400c04 	addi	r21,r21,48
  80a2bc:	dc401515 	stw	r17,84(sp)
  80a2c0:	d8801a17 	ldw	r2,104(sp)
  80a2c4:	e5400005 	stb	r21,0(fp)
  80a2c8:	202f883a 	mov	r23,r4
  80a2cc:	d9c01b17 	ldw	r7,108(sp)
  80a2d0:	d9001417 	ldw	r4,80(sp)
  80a2d4:	880b883a 	mov	r5,r17
  80a2d8:	100d883a 	mov	r6,r2
  80a2dc:	102d883a 	mov	r22,r2
  80a2e0:	e7000044 	addi	fp,fp,1
  80a2e4:	08112e00 	call	8112e0 <__ltdf2>
  80a2e8:	103fc30e 	bge	r2,zero,80a1f8 <_dtoa_r+0x1064>
  80a2ec:	d9000417 	ldw	r4,16(sp)
  80a2f0:	d9000d15 	stw	r4,52(sp)
  80a2f4:	003d7106 	br	8098bc <_dtoa_r+0x728>
  80a2f8:	d9801717 	ldw	r6,92(sp)
  80a2fc:	00800084 	movi	r2,2
  80a300:	11bde60e 	bge	r2,r6,809a9c <_dtoa_r+0x908>
  80a304:	203cfb1e 	bne	r4,zero,8096f4 <_dtoa_r+0x560>
  80a308:	d9001617 	ldw	r4,88(sp)
  80a30c:	900b883a 	mov	r5,r18
  80a310:	01800144 	movi	r6,5
  80a314:	000f883a 	mov	r7,zero
  80a318:	080bd5c0 	call	80bd5c <__multadd>
  80a31c:	d9000717 	ldw	r4,28(sp)
  80a320:	100b883a 	mov	r5,r2
  80a324:	1025883a 	mov	r18,r2
  80a328:	080b1980 	call	80b198 <__mcmp>
  80a32c:	00bcf10e 	bge	zero,r2,8096f4 <_dtoa_r+0x560>
  80a330:	d8c00d17 	ldw	r3,52(sp)
  80a334:	d9000517 	ldw	r4,20(sp)
  80a338:	d8000615 	stw	zero,24(sp)
  80a33c:	18c00044 	addi	r3,r3,1
  80a340:	d8c00d15 	stw	r3,52(sp)
  80a344:	00800c44 	movi	r2,49
  80a348:	27000044 	addi	fp,r4,1
  80a34c:	20800005 	stb	r2,0(r4)
  80a350:	003e8906 	br	809d78 <_dtoa_r+0xbe4>
  80a354:	d8c00517 	ldw	r3,20(sp)
  80a358:	003bc206 	br	809264 <_dtoa_r+0xd0>
  80a35c:	01802074 	movhi	r6,129
  80a360:	31945104 	addi	r6,r6,20804
  80a364:	30c00917 	ldw	r3,36(r6)
  80a368:	30800817 	ldw	r2,32(r6)
  80a36c:	d9001217 	ldw	r4,72(sp)
  80a370:	d9401317 	ldw	r5,76(sp)
  80a374:	180f883a 	mov	r7,r3
  80a378:	100d883a 	mov	r6,r2
  80a37c:	0801c000 	call	801c00 <__divdf3>
  80a380:	948003cc 	andi	r18,r18,15
  80a384:	058000c4 	movi	r22,3
  80a388:	1029883a 	mov	r20,r2
  80a38c:	182b883a 	mov	r21,r3
  80a390:	003c8906 	br	8095b8 <_dtoa_r+0x424>
  80a394:	d9001017 	ldw	r4,64(sp)
  80a398:	d9800917 	ldw	r6,36(sp)
  80a39c:	0025883a 	mov	r18,zero
  80a3a0:	1105c83a 	sub	r2,r2,r4
  80a3a4:	2089883a 	add	r4,r4,r2
  80a3a8:	308d883a 	add	r6,r6,r2
  80a3ac:	d9001015 	stw	r4,64(sp)
  80a3b0:	d9800915 	stw	r6,36(sp)
  80a3b4:	003e3206 	br	809c80 <_dtoa_r+0xaec>
  80a3b8:	28800044 	addi	r2,r5,1
  80a3bc:	27000044 	addi	fp,r4,1
  80a3c0:	20800005 	stb	r2,0(r4)
  80a3c4:	003e6c06 	br	809d78 <_dtoa_r+0xbe4>
  80a3c8:	d8800f17 	ldw	r2,60(sp)
  80a3cc:	00bce016 	blt	zero,r2,809750 <_dtoa_r+0x5bc>
  80a3d0:	d9800f17 	ldw	r6,60(sp)
  80a3d4:	303cc51e 	bne	r6,zero,8096ec <_dtoa_r+0x558>
  80a3d8:	0005883a 	mov	r2,zero
  80a3dc:	00d00534 	movhi	r3,16404
  80a3e0:	980b883a 	mov	r5,r19
  80a3e4:	180f883a 	mov	r7,r3
  80a3e8:	9009883a 	mov	r4,r18
  80a3ec:	100d883a 	mov	r6,r2
  80a3f0:	0810cfc0 	call	810cfc <__muldf3>
  80a3f4:	180b883a 	mov	r5,r3
  80a3f8:	a80f883a 	mov	r7,r21
  80a3fc:	1009883a 	mov	r4,r2
  80a400:	a00d883a 	mov	r6,r20
  80a404:	08112580 	call	811258 <__gedf2>
  80a408:	103cb80e 	bge	r2,zero,8096ec <_dtoa_r+0x558>
  80a40c:	0027883a 	mov	r19,zero
  80a410:	0025883a 	mov	r18,zero
  80a414:	003fc606 	br	80a330 <_dtoa_r+0x119c>
  80a418:	99400117 	ldw	r5,4(r19)
  80a41c:	d9001617 	ldw	r4,88(sp)
  80a420:	080b5bc0 	call	80b5bc <_Balloc>
  80a424:	99800417 	ldw	r6,16(r19)
  80a428:	11000304 	addi	r4,r2,12
  80a42c:	99400304 	addi	r5,r19,12
  80a430:	318d883a 	add	r6,r6,r6
  80a434:	318d883a 	add	r6,r6,r6
  80a438:	31800204 	addi	r6,r6,8
  80a43c:	1023883a 	mov	r17,r2
  80a440:	08048c40 	call	8048c4 <memcpy>
  80a444:	d9001617 	ldw	r4,88(sp)
  80a448:	880b883a 	mov	r5,r17
  80a44c:	01800044 	movi	r6,1
  80a450:	080b9800 	call	80b980 <__lshift>
  80a454:	100b883a 	mov	r5,r2
  80a458:	003d9c06 	br	809acc <_dtoa_r+0x938>
  80a45c:	00800e44 	movi	r2,57
  80a460:	b8807026 	beq	r23,r2,80a624 <_dtoa_r+0x1490>
  80a464:	b8800044 	addi	r2,r23,1
  80a468:	b7000044 	addi	fp,r22,1
  80a46c:	b0800005 	stb	r2,0(r22)
  80a470:	003e4106 	br	809d78 <_dtoa_r+0xbe4>
  80a474:	d8800317 	ldw	r2,12(sp)
  80a478:	01802074 	movhi	r6,129
  80a47c:	31941f04 	addi	r6,r6,20604
  80a480:	b009883a 	mov	r4,r22
  80a484:	100e90fa 	slli	r7,r2,3
  80a488:	b80b883a 	mov	r5,r23
  80a48c:	398f883a 	add	r7,r7,r6
  80a490:	38bffe17 	ldw	r2,-8(r7)
  80a494:	d9800517 	ldw	r6,20(sp)
  80a498:	38ffff17 	ldw	r3,-4(r7)
  80a49c:	37000044 	addi	fp,r6,1
  80a4a0:	180f883a 	mov	r7,r3
  80a4a4:	100d883a 	mov	r6,r2
  80a4a8:	0810cfc0 	call	810cfc <__muldf3>
  80a4ac:	a80b883a 	mov	r5,r21
  80a4b0:	a009883a 	mov	r4,r20
  80a4b4:	182f883a 	mov	r23,r3
  80a4b8:	102d883a 	mov	r22,r2
  80a4bc:	08114e80 	call	8114e8 <__fixdfsi>
  80a4c0:	1009883a 	mov	r4,r2
  80a4c4:	1027883a 	mov	r19,r2
  80a4c8:	08113f00 	call	8113f0 <__floatsidf>
  80a4cc:	a80b883a 	mov	r5,r21
  80a4d0:	a009883a 	mov	r4,r20
  80a4d4:	180f883a 	mov	r7,r3
  80a4d8:	100d883a 	mov	r6,r2
  80a4dc:	0810c080 	call	810c08 <__subdf3>
  80a4e0:	180b883a 	mov	r5,r3
  80a4e4:	d8c00517 	ldw	r3,20(sp)
  80a4e8:	9cc00c04 	addi	r19,r19,48
  80a4ec:	1009883a 	mov	r4,r2
  80a4f0:	1cc00005 	stb	r19,0(r3)
  80a4f4:	2021883a 	mov	r16,r4
  80a4f8:	d9000317 	ldw	r4,12(sp)
  80a4fc:	00800044 	movi	r2,1
  80a500:	2823883a 	mov	r17,r5
  80a504:	20802226 	beq	r4,r2,80a590 <_dtoa_r+0x13fc>
  80a508:	1029883a 	mov	r20,r2
  80a50c:	0005883a 	mov	r2,zero
  80a510:	00d00934 	movhi	r3,16420
  80a514:	180f883a 	mov	r7,r3
  80a518:	100d883a 	mov	r6,r2
  80a51c:	880b883a 	mov	r5,r17
  80a520:	8009883a 	mov	r4,r16
  80a524:	0810cfc0 	call	810cfc <__muldf3>
  80a528:	180b883a 	mov	r5,r3
  80a52c:	1009883a 	mov	r4,r2
  80a530:	1823883a 	mov	r17,r3
  80a534:	1021883a 	mov	r16,r2
  80a538:	08114e80 	call	8114e8 <__fixdfsi>
  80a53c:	1009883a 	mov	r4,r2
  80a540:	102b883a 	mov	r21,r2
  80a544:	08113f00 	call	8113f0 <__floatsidf>
  80a548:	880b883a 	mov	r5,r17
  80a54c:	8009883a 	mov	r4,r16
  80a550:	180f883a 	mov	r7,r3
  80a554:	100d883a 	mov	r6,r2
  80a558:	0810c080 	call	810c08 <__subdf3>
  80a55c:	180b883a 	mov	r5,r3
  80a560:	d8c00517 	ldw	r3,20(sp)
  80a564:	1009883a 	mov	r4,r2
  80a568:	ad400c04 	addi	r21,r21,48
  80a56c:	1d05883a 	add	r2,r3,r20
  80a570:	15400005 	stb	r21,0(r2)
  80a574:	2021883a 	mov	r16,r4
  80a578:	d9000317 	ldw	r4,12(sp)
  80a57c:	a5000044 	addi	r20,r20,1
  80a580:	2823883a 	mov	r17,r5
  80a584:	a13fe11e 	bne	r20,r4,80a50c <_dtoa_r+0x1378>
  80a588:	e505883a 	add	r2,fp,r20
  80a58c:	173fffc4 	addi	fp,r2,-1
  80a590:	0025883a 	mov	r18,zero
  80a594:	04cff834 	movhi	r19,16352
  80a598:	b009883a 	mov	r4,r22
  80a59c:	b80b883a 	mov	r5,r23
  80a5a0:	900d883a 	mov	r6,r18
  80a5a4:	980f883a 	mov	r7,r19
  80a5a8:	0810c880 	call	810c88 <__adddf3>
  80a5ac:	180b883a 	mov	r5,r3
  80a5b0:	1009883a 	mov	r4,r2
  80a5b4:	800d883a 	mov	r6,r16
  80a5b8:	880f883a 	mov	r7,r17
  80a5bc:	08112e00 	call	8112e0 <__ltdf2>
  80a5c0:	103cab16 	blt	r2,zero,809870 <_dtoa_r+0x6dc>
  80a5c4:	0009883a 	mov	r4,zero
  80a5c8:	980b883a 	mov	r5,r19
  80a5cc:	b80f883a 	mov	r7,r23
  80a5d0:	b00d883a 	mov	r6,r22
  80a5d4:	0810c080 	call	810c08 <__subdf3>
  80a5d8:	180b883a 	mov	r5,r3
  80a5dc:	880f883a 	mov	r7,r17
  80a5e0:	1009883a 	mov	r4,r2
  80a5e4:	800d883a 	mov	r6,r16
  80a5e8:	08111d00 	call	8111d0 <__gtdf2>
  80a5ec:	00bc470e 	bge	zero,r2,80970c <_dtoa_r+0x578>
  80a5f0:	00c00c04 	movi	r3,48
  80a5f4:	e73fffc4 	addi	fp,fp,-1
  80a5f8:	e0800007 	ldb	r2,0(fp)
  80a5fc:	10fffd26 	beq	r2,r3,80a5f4 <_dtoa_r+0x1460>
  80a600:	d9800417 	ldw	r6,16(sp)
  80a604:	e7000044 	addi	fp,fp,1
  80a608:	d9800d15 	stw	r6,52(sp)
  80a60c:	003cab06 	br	8098bc <_dtoa_r+0x728>
  80a610:	d8c00f17 	ldw	r3,60(sp)
  80a614:	d9001117 	ldw	r4,68(sp)
  80a618:	20e1c83a 	sub	r16,r4,r3
  80a61c:	0007883a 	mov	r3,zero
  80a620:	003d9b06 	br	809c90 <_dtoa_r+0xafc>
  80a624:	00800e44 	movi	r2,57
  80a628:	b0800005 	stb	r2,0(r22)
  80a62c:	b5800044 	addi	r22,r22,1
  80a630:	003dc106 	br	809d38 <_dtoa_r+0xba4>
  80a634:	05800084 	movi	r22,2
  80a638:	003bf706 	br	809618 <_dtoa_r+0x484>
  80a63c:	d9000f17 	ldw	r4,60(sp)
  80a640:	013c000e 	bge	zero,r4,809644 <_dtoa_r+0x4b0>
  80a644:	d9800e17 	ldw	r6,56(sp)
  80a648:	01bc300e 	bge	zero,r6,80970c <_dtoa_r+0x578>
  80a64c:	0005883a 	mov	r2,zero
  80a650:	00d00934 	movhi	r3,16420
  80a654:	a80b883a 	mov	r5,r21
  80a658:	180f883a 	mov	r7,r3
  80a65c:	a009883a 	mov	r4,r20
  80a660:	100d883a 	mov	r6,r2
  80a664:	0810cfc0 	call	810cfc <__muldf3>
  80a668:	b1000044 	addi	r4,r22,1
  80a66c:	1021883a 	mov	r16,r2
  80a670:	1823883a 	mov	r17,r3
  80a674:	08113f00 	call	8113f0 <__floatsidf>
  80a678:	880b883a 	mov	r5,r17
  80a67c:	8009883a 	mov	r4,r16
  80a680:	180f883a 	mov	r7,r3
  80a684:	100d883a 	mov	r6,r2
  80a688:	0810cfc0 	call	810cfc <__muldf3>
  80a68c:	0011883a 	mov	r8,zero
  80a690:	02500734 	movhi	r9,16412
  80a694:	180b883a 	mov	r5,r3
  80a698:	480f883a 	mov	r7,r9
  80a69c:	1009883a 	mov	r4,r2
  80a6a0:	400d883a 	mov	r6,r8
  80a6a4:	0810c880 	call	810c88 <__adddf3>
  80a6a8:	102d883a 	mov	r22,r2
  80a6ac:	00bf3034 	movhi	r2,64704
  80a6b0:	10ef883a 	add	r23,r2,r3
  80a6b4:	d8800d17 	ldw	r2,52(sp)
  80a6b8:	d8c00e17 	ldw	r3,56(sp)
  80a6bc:	8029883a 	mov	r20,r16
  80a6c0:	10bfffc4 	addi	r2,r2,-1
  80a6c4:	882b883a 	mov	r21,r17
  80a6c8:	d8800415 	stw	r2,16(sp)
  80a6cc:	d8c00315 	stw	r3,12(sp)
  80a6d0:	003e8306 	br	80a0e0 <_dtoa_r+0xf4c>
  80a6d4:	d8800117 	ldw	r2,4(sp)
  80a6d8:	dc001117 	ldw	r16,68(sp)
  80a6dc:	dc801017 	ldw	r18,64(sp)
  80a6e0:	00c00d84 	movi	r3,54
  80a6e4:	1887c83a 	sub	r3,r3,r2
  80a6e8:	003d6906 	br	809c90 <_dtoa_r+0xafc>
  80a6ec:	01800044 	movi	r6,1
  80a6f0:	3021883a 	mov	r16,r6
  80a6f4:	d9800f15 	stw	r6,60(sp)
  80a6f8:	d9802615 	stw	r6,152(sp)
  80a6fc:	d9800e15 	stw	r6,56(sp)
  80a700:	003b9306 	br	809550 <_dtoa_r+0x3bc>
  80a704:	b021883a 	mov	r16,r22
  80a708:	dd800f15 	stw	r22,60(sp)
  80a70c:	003b9006 	br	809550 <_dtoa_r+0x3bc>
  80a710:	103e221e 	bne	r2,zero,809f9c <_dtoa_r+0xe08>
  80a714:	b880004c 	andi	r2,r23,1
  80a718:	1005003a 	cmpeq	r2,r2,zero
  80a71c:	103e1f1e 	bne	r2,zero,809f9c <_dtoa_r+0xe08>
  80a720:	003e1b06 	br	809f90 <_dtoa_r+0xdfc>
  80a724:	d9001617 	ldw	r4,88(sp)
  80a728:	980b883a 	mov	r5,r19
  80a72c:	01800284 	movi	r6,10
  80a730:	000f883a 	mov	r7,zero
  80a734:	080bd5c0 	call	80bd5c <__multadd>
  80a738:	d8c00e17 	ldw	r3,56(sp)
  80a73c:	1027883a 	mov	r19,r2
  80a740:	d8c00f15 	stw	r3,60(sp)
  80a744:	003cd306 	br	809a94 <_dtoa_r+0x900>

0080a748 <__sflags>:
  80a748:	28c00007 	ldb	r3,0(r5)
  80a74c:	00801c84 	movi	r2,114
  80a750:	18800926 	beq	r3,r2,80a778 <__sflags+0x30>
  80a754:	00801dc4 	movi	r2,119
  80a758:	18801426 	beq	r3,r2,80a7ac <__sflags+0x64>
  80a75c:	00801844 	movi	r2,97
  80a760:	18801626 	beq	r3,r2,80a7bc <__sflags+0x74>
  80a764:	0007883a 	mov	r3,zero
  80a768:	00800584 	movi	r2,22
  80a76c:	20800015 	stw	r2,0(r4)
  80a770:	1805883a 	mov	r2,r3
  80a774:	f800283a 	ret
  80a778:	000f883a 	mov	r7,zero
  80a77c:	0011883a 	mov	r8,zero
  80a780:	00c00104 	movi	r3,4
  80a784:	28800047 	ldb	r2,1(r5)
  80a788:	10000426 	beq	r2,zero,80a79c <__sflags+0x54>
  80a78c:	01000ac4 	movi	r4,43
  80a790:	11000e26 	beq	r2,r4,80a7cc <__sflags+0x84>
  80a794:	28800087 	ldb	r2,2(r5)
  80a798:	11000c26 	beq	r2,r4,80a7cc <__sflags+0x84>
  80a79c:	3a04b03a 	or	r2,r7,r8
  80a7a0:	30800015 	stw	r2,0(r6)
  80a7a4:	1805883a 	mov	r2,r3
  80a7a8:	f800283a 	ret
  80a7ac:	01c00044 	movi	r7,1
  80a7b0:	02018004 	movi	r8,1536
  80a7b4:	00c00204 	movi	r3,8
  80a7b8:	003ff206 	br	80a784 <__sflags+0x3c>
  80a7bc:	01c00044 	movi	r7,1
  80a7c0:	02008204 	movi	r8,520
  80a7c4:	00c04204 	movi	r3,264
  80a7c8:	003fee06 	br	80a784 <__sflags+0x3c>
  80a7cc:	00bffcc4 	movi	r2,-13
  80a7d0:	1884703a 	and	r2,r3,r2
  80a7d4:	01c00084 	movi	r7,2
  80a7d8:	10c00414 	ori	r3,r2,16
  80a7dc:	3a04b03a 	or	r2,r7,r8
  80a7e0:	30800015 	stw	r2,0(r6)
  80a7e4:	003fef06 	br	80a7a4 <__sflags+0x5c>

0080a7e8 <__sfvwrite_r>:
  80a7e8:	30800217 	ldw	r2,8(r6)
  80a7ec:	defff504 	addi	sp,sp,-44
  80a7f0:	df000915 	stw	fp,36(sp)
  80a7f4:	dd800715 	stw	r22,28(sp)
  80a7f8:	dc800315 	stw	r18,12(sp)
  80a7fc:	dfc00a15 	stw	ra,40(sp)
  80a800:	ddc00815 	stw	r23,32(sp)
  80a804:	dd400615 	stw	r21,24(sp)
  80a808:	dd000515 	stw	r20,20(sp)
  80a80c:	dcc00415 	stw	r19,16(sp)
  80a810:	dc400215 	stw	r17,8(sp)
  80a814:	dc000115 	stw	r16,4(sp)
  80a818:	302d883a 	mov	r22,r6
  80a81c:	2039883a 	mov	fp,r4
  80a820:	2825883a 	mov	r18,r5
  80a824:	10001c26 	beq	r2,zero,80a898 <__sfvwrite_r+0xb0>
  80a828:	29c0030b 	ldhu	r7,12(r5)
  80a82c:	3880020c 	andi	r2,r7,8
  80a830:	10002726 	beq	r2,zero,80a8d0 <__sfvwrite_r+0xe8>
  80a834:	28800417 	ldw	r2,16(r5)
  80a838:	10002526 	beq	r2,zero,80a8d0 <__sfvwrite_r+0xe8>
  80a83c:	3880008c 	andi	r2,r7,2
  80a840:	b5400017 	ldw	r21,0(r22)
  80a844:	10002826 	beq	r2,zero,80a8e8 <__sfvwrite_r+0x100>
  80a848:	0021883a 	mov	r16,zero
  80a84c:	0023883a 	mov	r17,zero
  80a850:	880d883a 	mov	r6,r17
  80a854:	e009883a 	mov	r4,fp
  80a858:	00810004 	movi	r2,1024
  80a85c:	80006e26 	beq	r16,zero,80aa18 <__sfvwrite_r+0x230>
  80a860:	800f883a 	mov	r7,r16
  80a864:	91400717 	ldw	r5,28(r18)
  80a868:	1400012e 	bgeu	r2,r16,80a870 <__sfvwrite_r+0x88>
  80a86c:	100f883a 	mov	r7,r2
  80a870:	90c00917 	ldw	r3,36(r18)
  80a874:	183ee83a 	callr	r3
  80a878:	1007883a 	mov	r3,r2
  80a87c:	80a1c83a 	sub	r16,r16,r2
  80a880:	88a3883a 	add	r17,r17,r2
  80a884:	00806d0e 	bge	zero,r2,80aa3c <__sfvwrite_r+0x254>
  80a888:	b0800217 	ldw	r2,8(r22)
  80a88c:	10c5c83a 	sub	r2,r2,r3
  80a890:	b0800215 	stw	r2,8(r22)
  80a894:	103fee1e 	bne	r2,zero,80a850 <__sfvwrite_r+0x68>
  80a898:	0009883a 	mov	r4,zero
  80a89c:	2005883a 	mov	r2,r4
  80a8a0:	dfc00a17 	ldw	ra,40(sp)
  80a8a4:	df000917 	ldw	fp,36(sp)
  80a8a8:	ddc00817 	ldw	r23,32(sp)
  80a8ac:	dd800717 	ldw	r22,28(sp)
  80a8b0:	dd400617 	ldw	r21,24(sp)
  80a8b4:	dd000517 	ldw	r20,20(sp)
  80a8b8:	dcc00417 	ldw	r19,16(sp)
  80a8bc:	dc800317 	ldw	r18,12(sp)
  80a8c0:	dc400217 	ldw	r17,8(sp)
  80a8c4:	dc000117 	ldw	r16,4(sp)
  80a8c8:	dec00b04 	addi	sp,sp,44
  80a8cc:	f800283a 	ret
  80a8d0:	0808bf00 	call	808bf0 <__swsetup_r>
  80a8d4:	1000e41e 	bne	r2,zero,80ac68 <__sfvwrite_r+0x480>
  80a8d8:	91c0030b 	ldhu	r7,12(r18)
  80a8dc:	b5400017 	ldw	r21,0(r22)
  80a8e0:	3880008c 	andi	r2,r7,2
  80a8e4:	103fd81e 	bne	r2,zero,80a848 <__sfvwrite_r+0x60>
  80a8e8:	3880004c 	andi	r2,r7,1
  80a8ec:	1005003a 	cmpeq	r2,r2,zero
  80a8f0:	10005726 	beq	r2,zero,80aa50 <__sfvwrite_r+0x268>
  80a8f4:	0029883a 	mov	r20,zero
  80a8f8:	002f883a 	mov	r23,zero
  80a8fc:	a0004226 	beq	r20,zero,80aa08 <__sfvwrite_r+0x220>
  80a900:	3880800c 	andi	r2,r7,512
  80a904:	94000217 	ldw	r16,8(r18)
  80a908:	10008b26 	beq	r2,zero,80ab38 <__sfvwrite_r+0x350>
  80a90c:	800d883a 	mov	r6,r16
  80a910:	a400a536 	bltu	r20,r16,80aba8 <__sfvwrite_r+0x3c0>
  80a914:	3881200c 	andi	r2,r7,1152
  80a918:	10002726 	beq	r2,zero,80a9b8 <__sfvwrite_r+0x1d0>
  80a91c:	90800517 	ldw	r2,20(r18)
  80a920:	92000417 	ldw	r8,16(r18)
  80a924:	91400017 	ldw	r5,0(r18)
  80a928:	1087883a 	add	r3,r2,r2
  80a92c:	1887883a 	add	r3,r3,r2
  80a930:	1808d7fa 	srli	r4,r3,31
  80a934:	2a21c83a 	sub	r16,r5,r8
  80a938:	80800044 	addi	r2,r16,1
  80a93c:	20c9883a 	add	r4,r4,r3
  80a940:	2027d07a 	srai	r19,r4,1
  80a944:	a085883a 	add	r2,r20,r2
  80a948:	980d883a 	mov	r6,r19
  80a94c:	9880022e 	bgeu	r19,r2,80a958 <__sfvwrite_r+0x170>
  80a950:	1027883a 	mov	r19,r2
  80a954:	100d883a 	mov	r6,r2
  80a958:	3881000c 	andi	r2,r7,1024
  80a95c:	1000b826 	beq	r2,zero,80ac40 <__sfvwrite_r+0x458>
  80a960:	300b883a 	mov	r5,r6
  80a964:	e009883a 	mov	r4,fp
  80a968:	08040a00 	call	8040a0 <_malloc_r>
  80a96c:	10003126 	beq	r2,zero,80aa34 <__sfvwrite_r+0x24c>
  80a970:	91400417 	ldw	r5,16(r18)
  80a974:	1009883a 	mov	r4,r2
  80a978:	800d883a 	mov	r6,r16
  80a97c:	1023883a 	mov	r17,r2
  80a980:	08048c40 	call	8048c4 <memcpy>
  80a984:	90c0030b 	ldhu	r3,12(r18)
  80a988:	00beffc4 	movi	r2,-1025
  80a98c:	1886703a 	and	r3,r3,r2
  80a990:	18c02014 	ori	r3,r3,128
  80a994:	90c0030d 	sth	r3,12(r18)
  80a998:	9c07c83a 	sub	r3,r19,r16
  80a99c:	8c05883a 	add	r2,r17,r16
  80a9a0:	a00d883a 	mov	r6,r20
  80a9a4:	a021883a 	mov	r16,r20
  80a9a8:	90800015 	stw	r2,0(r18)
  80a9ac:	90c00215 	stw	r3,8(r18)
  80a9b0:	94400415 	stw	r17,16(r18)
  80a9b4:	94c00515 	stw	r19,20(r18)
  80a9b8:	91000017 	ldw	r4,0(r18)
  80a9bc:	b80b883a 	mov	r5,r23
  80a9c0:	a023883a 	mov	r17,r20
  80a9c4:	080af5c0 	call	80af5c <memmove>
  80a9c8:	90c00217 	ldw	r3,8(r18)
  80a9cc:	90800017 	ldw	r2,0(r18)
  80a9d0:	a027883a 	mov	r19,r20
  80a9d4:	1c07c83a 	sub	r3,r3,r16
  80a9d8:	1405883a 	add	r2,r2,r16
  80a9dc:	90c00215 	stw	r3,8(r18)
  80a9e0:	a021883a 	mov	r16,r20
  80a9e4:	90800015 	stw	r2,0(r18)
  80a9e8:	b0800217 	ldw	r2,8(r22)
  80a9ec:	1405c83a 	sub	r2,r2,r16
  80a9f0:	b0800215 	stw	r2,8(r22)
  80a9f4:	103fa826 	beq	r2,zero,80a898 <__sfvwrite_r+0xb0>
  80a9f8:	a469c83a 	sub	r20,r20,r17
  80a9fc:	91c0030b 	ldhu	r7,12(r18)
  80aa00:	bcef883a 	add	r23,r23,r19
  80aa04:	a03fbe1e 	bne	r20,zero,80a900 <__sfvwrite_r+0x118>
  80aa08:	adc00017 	ldw	r23,0(r21)
  80aa0c:	ad000117 	ldw	r20,4(r21)
  80aa10:	ad400204 	addi	r21,r21,8
  80aa14:	003fb906 	br	80a8fc <__sfvwrite_r+0x114>
  80aa18:	ac400017 	ldw	r17,0(r21)
  80aa1c:	ac000117 	ldw	r16,4(r21)
  80aa20:	ad400204 	addi	r21,r21,8
  80aa24:	003f8a06 	br	80a850 <__sfvwrite_r+0x68>
  80aa28:	91400417 	ldw	r5,16(r18)
  80aa2c:	e009883a 	mov	r4,fp
  80aa30:	08034240 	call	803424 <_free_r>
  80aa34:	00800304 	movi	r2,12
  80aa38:	e0800015 	stw	r2,0(fp)
  80aa3c:	9080030b 	ldhu	r2,12(r18)
  80aa40:	013fffc4 	movi	r4,-1
  80aa44:	10801014 	ori	r2,r2,64
  80aa48:	9080030d 	sth	r2,12(r18)
  80aa4c:	003f9306 	br	80a89c <__sfvwrite_r+0xb4>
  80aa50:	0027883a 	mov	r19,zero
  80aa54:	002f883a 	mov	r23,zero
  80aa58:	d8000015 	stw	zero,0(sp)
  80aa5c:	0029883a 	mov	r20,zero
  80aa60:	98001e26 	beq	r19,zero,80aadc <__sfvwrite_r+0x2f4>
  80aa64:	d8c00017 	ldw	r3,0(sp)
  80aa68:	1804c03a 	cmpne	r2,r3,zero
  80aa6c:	10005e26 	beq	r2,zero,80abe8 <__sfvwrite_r+0x400>
  80aa70:	9821883a 	mov	r16,r19
  80aa74:	a4c0012e 	bgeu	r20,r19,80aa7c <__sfvwrite_r+0x294>
  80aa78:	a021883a 	mov	r16,r20
  80aa7c:	91000017 	ldw	r4,0(r18)
  80aa80:	90800417 	ldw	r2,16(r18)
  80aa84:	91800217 	ldw	r6,8(r18)
  80aa88:	91c00517 	ldw	r7,20(r18)
  80aa8c:	1100022e 	bgeu	r2,r4,80aa98 <__sfvwrite_r+0x2b0>
  80aa90:	31e3883a 	add	r17,r6,r7
  80aa94:	8c001616 	blt	r17,r16,80aaf0 <__sfvwrite_r+0x308>
  80aa98:	81c03816 	blt	r16,r7,80ab7c <__sfvwrite_r+0x394>
  80aa9c:	90c00917 	ldw	r3,36(r18)
  80aaa0:	91400717 	ldw	r5,28(r18)
  80aaa4:	e009883a 	mov	r4,fp
  80aaa8:	b80d883a 	mov	r6,r23
  80aaac:	183ee83a 	callr	r3
  80aab0:	1023883a 	mov	r17,r2
  80aab4:	00bfe10e 	bge	zero,r2,80aa3c <__sfvwrite_r+0x254>
  80aab8:	a469c83a 	sub	r20,r20,r17
  80aabc:	a0001826 	beq	r20,zero,80ab20 <__sfvwrite_r+0x338>
  80aac0:	b0800217 	ldw	r2,8(r22)
  80aac4:	1445c83a 	sub	r2,r2,r17
  80aac8:	b0800215 	stw	r2,8(r22)
  80aacc:	103f7226 	beq	r2,zero,80a898 <__sfvwrite_r+0xb0>
  80aad0:	9c67c83a 	sub	r19,r19,r17
  80aad4:	bc6f883a 	add	r23,r23,r17
  80aad8:	983fe21e 	bne	r19,zero,80aa64 <__sfvwrite_r+0x27c>
  80aadc:	adc00017 	ldw	r23,0(r21)
  80aae0:	acc00117 	ldw	r19,4(r21)
  80aae4:	ad400204 	addi	r21,r21,8
  80aae8:	d8000015 	stw	zero,0(sp)
  80aaec:	003fdc06 	br	80aa60 <__sfvwrite_r+0x278>
  80aaf0:	b80b883a 	mov	r5,r23
  80aaf4:	880d883a 	mov	r6,r17
  80aaf8:	080af5c0 	call	80af5c <memmove>
  80aafc:	90c00017 	ldw	r3,0(r18)
  80ab00:	e009883a 	mov	r4,fp
  80ab04:	900b883a 	mov	r5,r18
  80ab08:	1c47883a 	add	r3,r3,r17
  80ab0c:	90c00015 	stw	r3,0(r18)
  80ab10:	08027840 	call	802784 <_fflush_r>
  80ab14:	103fc91e 	bne	r2,zero,80aa3c <__sfvwrite_r+0x254>
  80ab18:	a469c83a 	sub	r20,r20,r17
  80ab1c:	a03fe81e 	bne	r20,zero,80aac0 <__sfvwrite_r+0x2d8>
  80ab20:	e009883a 	mov	r4,fp
  80ab24:	900b883a 	mov	r5,r18
  80ab28:	08027840 	call	802784 <_fflush_r>
  80ab2c:	103fc31e 	bne	r2,zero,80aa3c <__sfvwrite_r+0x254>
  80ab30:	d8000015 	stw	zero,0(sp)
  80ab34:	003fe206 	br	80aac0 <__sfvwrite_r+0x2d8>
  80ab38:	91000017 	ldw	r4,0(r18)
  80ab3c:	90800417 	ldw	r2,16(r18)
  80ab40:	1100022e 	bgeu	r2,r4,80ab4c <__sfvwrite_r+0x364>
  80ab44:	8023883a 	mov	r17,r16
  80ab48:	85003136 	bltu	r16,r20,80ac10 <__sfvwrite_r+0x428>
  80ab4c:	91c00517 	ldw	r7,20(r18)
  80ab50:	a1c01836 	bltu	r20,r7,80abb4 <__sfvwrite_r+0x3cc>
  80ab54:	90c00917 	ldw	r3,36(r18)
  80ab58:	91400717 	ldw	r5,28(r18)
  80ab5c:	e009883a 	mov	r4,fp
  80ab60:	b80d883a 	mov	r6,r23
  80ab64:	183ee83a 	callr	r3
  80ab68:	1021883a 	mov	r16,r2
  80ab6c:	00bfb30e 	bge	zero,r2,80aa3c <__sfvwrite_r+0x254>
  80ab70:	1023883a 	mov	r17,r2
  80ab74:	1027883a 	mov	r19,r2
  80ab78:	003f9b06 	br	80a9e8 <__sfvwrite_r+0x200>
  80ab7c:	b80b883a 	mov	r5,r23
  80ab80:	800d883a 	mov	r6,r16
  80ab84:	080af5c0 	call	80af5c <memmove>
  80ab88:	90c00217 	ldw	r3,8(r18)
  80ab8c:	90800017 	ldw	r2,0(r18)
  80ab90:	8023883a 	mov	r17,r16
  80ab94:	1c07c83a 	sub	r3,r3,r16
  80ab98:	1405883a 	add	r2,r2,r16
  80ab9c:	90c00215 	stw	r3,8(r18)
  80aba0:	90800015 	stw	r2,0(r18)
  80aba4:	003fc406 	br	80aab8 <__sfvwrite_r+0x2d0>
  80aba8:	a00d883a 	mov	r6,r20
  80abac:	a021883a 	mov	r16,r20
  80abb0:	003f8106 	br	80a9b8 <__sfvwrite_r+0x1d0>
  80abb4:	b80b883a 	mov	r5,r23
  80abb8:	a00d883a 	mov	r6,r20
  80abbc:	080af5c0 	call	80af5c <memmove>
  80abc0:	90c00217 	ldw	r3,8(r18)
  80abc4:	90800017 	ldw	r2,0(r18)
  80abc8:	a021883a 	mov	r16,r20
  80abcc:	1d07c83a 	sub	r3,r3,r20
  80abd0:	1505883a 	add	r2,r2,r20
  80abd4:	a023883a 	mov	r17,r20
  80abd8:	a027883a 	mov	r19,r20
  80abdc:	90c00215 	stw	r3,8(r18)
  80abe0:	90800015 	stw	r2,0(r18)
  80abe4:	003f8006 	br	80a9e8 <__sfvwrite_r+0x200>
  80abe8:	b809883a 	mov	r4,r23
  80abec:	01400284 	movi	r5,10
  80abf0:	980d883a 	mov	r6,r19
  80abf4:	08047e00 	call	8047e0 <memchr>
  80abf8:	10001726 	beq	r2,zero,80ac58 <__sfvwrite_r+0x470>
  80abfc:	15c5c83a 	sub	r2,r2,r23
  80ac00:	15000044 	addi	r20,r2,1
  80ac04:	00800044 	movi	r2,1
  80ac08:	d8800015 	stw	r2,0(sp)
  80ac0c:	003f9806 	br	80aa70 <__sfvwrite_r+0x288>
  80ac10:	b80b883a 	mov	r5,r23
  80ac14:	800d883a 	mov	r6,r16
  80ac18:	080af5c0 	call	80af5c <memmove>
  80ac1c:	90c00017 	ldw	r3,0(r18)
  80ac20:	e009883a 	mov	r4,fp
  80ac24:	900b883a 	mov	r5,r18
  80ac28:	1c07883a 	add	r3,r3,r16
  80ac2c:	90c00015 	stw	r3,0(r18)
  80ac30:	8027883a 	mov	r19,r16
  80ac34:	08027840 	call	802784 <_fflush_r>
  80ac38:	103f6b26 	beq	r2,zero,80a9e8 <__sfvwrite_r+0x200>
  80ac3c:	003f7f06 	br	80aa3c <__sfvwrite_r+0x254>
  80ac40:	400b883a 	mov	r5,r8
  80ac44:	e009883a 	mov	r4,fp
  80ac48:	080c1400 	call	80c140 <_realloc_r>
  80ac4c:	103f7626 	beq	r2,zero,80aa28 <__sfvwrite_r+0x240>
  80ac50:	1023883a 	mov	r17,r2
  80ac54:	003f5006 	br	80a998 <__sfvwrite_r+0x1b0>
  80ac58:	00c00044 	movi	r3,1
  80ac5c:	9d000044 	addi	r20,r19,1
  80ac60:	d8c00015 	stw	r3,0(sp)
  80ac64:	003f8206 	br	80aa70 <__sfvwrite_r+0x288>
  80ac68:	9080030b 	ldhu	r2,12(r18)
  80ac6c:	00c00244 	movi	r3,9
  80ac70:	013fffc4 	movi	r4,-1
  80ac74:	10801014 	ori	r2,r2,64
  80ac78:	9080030d 	sth	r2,12(r18)
  80ac7c:	e0c00015 	stw	r3,0(fp)
  80ac80:	003f0606 	br	80a89c <__sfvwrite_r+0xb4>

0080ac84 <_isatty_r>:
  80ac84:	defffd04 	addi	sp,sp,-12
  80ac88:	dc000015 	stw	r16,0(sp)
  80ac8c:	040020b4 	movhi	r16,130
  80ac90:	84221904 	addi	r16,r16,-30620
  80ac94:	dc400115 	stw	r17,4(sp)
  80ac98:	80000015 	stw	zero,0(r16)
  80ac9c:	2023883a 	mov	r17,r4
  80aca0:	2809883a 	mov	r4,r5
  80aca4:	dfc00215 	stw	ra,8(sp)
  80aca8:	0811e680 	call	811e68 <isatty>
  80acac:	1007883a 	mov	r3,r2
  80acb0:	00bfffc4 	movi	r2,-1
  80acb4:	18800626 	beq	r3,r2,80acd0 <_isatty_r+0x4c>
  80acb8:	1805883a 	mov	r2,r3
  80acbc:	dfc00217 	ldw	ra,8(sp)
  80acc0:	dc400117 	ldw	r17,4(sp)
  80acc4:	dc000017 	ldw	r16,0(sp)
  80acc8:	dec00304 	addi	sp,sp,12
  80accc:	f800283a 	ret
  80acd0:	80800017 	ldw	r2,0(r16)
  80acd4:	103ff826 	beq	r2,zero,80acb8 <_isatty_r+0x34>
  80acd8:	88800015 	stw	r2,0(r17)
  80acdc:	1805883a 	mov	r2,r3
  80ace0:	dfc00217 	ldw	ra,8(sp)
  80ace4:	dc400117 	ldw	r17,4(sp)
  80ace8:	dc000017 	ldw	r16,0(sp)
  80acec:	dec00304 	addi	sp,sp,12
  80acf0:	f800283a 	ret

0080acf4 <iswspace>:
  80acf4:	00803fc4 	movi	r2,255
  80acf8:	0007883a 	mov	r3,zero
  80acfc:	11000636 	bltu	r2,r4,80ad18 <iswspace+0x24>
  80ad00:	00802074 	movhi	r2,129
  80ad04:	109b2f04 	addi	r2,r2,27836
  80ad08:	10c00017 	ldw	r3,0(r2)
  80ad0c:	1907883a 	add	r3,r3,r4
  80ad10:	18800003 	ldbu	r2,0(r3)
  80ad14:	10c0020c 	andi	r3,r2,8
  80ad18:	1805883a 	mov	r2,r3
  80ad1c:	f800283a 	ret

0080ad20 <__locale_charset>:
  80ad20:	d0a00617 	ldw	r2,-32744(gp)
  80ad24:	f800283a 	ret

0080ad28 <_localeconv_r>:
  80ad28:	00802074 	movhi	r2,129
  80ad2c:	10941304 	addi	r2,r2,20556
  80ad30:	f800283a 	ret

0080ad34 <localeconv>:
  80ad34:	00802074 	movhi	r2,129
  80ad38:	109b3004 	addi	r2,r2,27840
  80ad3c:	11000017 	ldw	r4,0(r2)
  80ad40:	080ad281 	jmpi	80ad28 <_localeconv_r>

0080ad44 <_setlocale_r>:
  80ad44:	defffc04 	addi	sp,sp,-16
  80ad48:	00c02074 	movhi	r3,129
  80ad4c:	18d3df04 	addi	r3,r3,20348
  80ad50:	dc800215 	stw	r18,8(sp)
  80ad54:	dc400115 	stw	r17,4(sp)
  80ad58:	dc000015 	stw	r16,0(sp)
  80ad5c:	2023883a 	mov	r17,r4
  80ad60:	2825883a 	mov	r18,r5
  80ad64:	dfc00315 	stw	ra,12(sp)
  80ad68:	3021883a 	mov	r16,r6
  80ad6c:	3009883a 	mov	r4,r6
  80ad70:	180b883a 	mov	r5,r3
  80ad74:	30000926 	beq	r6,zero,80ad9c <_setlocale_r+0x58>
  80ad78:	080c9400 	call	80c940 <strcmp>
  80ad7c:	8009883a 	mov	r4,r16
  80ad80:	01402074 	movhi	r5,129
  80ad84:	2953f004 	addi	r5,r5,20416
  80ad88:	10000b1e 	bne	r2,zero,80adb8 <_setlocale_r+0x74>
  80ad8c:	8c000d15 	stw	r16,52(r17)
  80ad90:	8c800c15 	stw	r18,48(r17)
  80ad94:	00c02074 	movhi	r3,129
  80ad98:	18d3df04 	addi	r3,r3,20348
  80ad9c:	1805883a 	mov	r2,r3
  80ada0:	dfc00317 	ldw	ra,12(sp)
  80ada4:	dc800217 	ldw	r18,8(sp)
  80ada8:	dc400117 	ldw	r17,4(sp)
  80adac:	dc000017 	ldw	r16,0(sp)
  80adb0:	dec00404 	addi	sp,sp,16
  80adb4:	f800283a 	ret
  80adb8:	080c9400 	call	80c940 <strcmp>
  80adbc:	0007883a 	mov	r3,zero
  80adc0:	103ff226 	beq	r2,zero,80ad8c <_setlocale_r+0x48>
  80adc4:	003ff506 	br	80ad9c <_setlocale_r+0x58>

0080adc8 <setlocale>:
  80adc8:	01802074 	movhi	r6,129
  80adcc:	319b3004 	addi	r6,r6,27840
  80add0:	2007883a 	mov	r3,r4
  80add4:	31000017 	ldw	r4,0(r6)
  80add8:	280d883a 	mov	r6,r5
  80addc:	180b883a 	mov	r5,r3
  80ade0:	080ad441 	jmpi	80ad44 <_setlocale_r>

0080ade4 <_lseek_r>:
  80ade4:	defffd04 	addi	sp,sp,-12
  80ade8:	dc000015 	stw	r16,0(sp)
  80adec:	040020b4 	movhi	r16,130
  80adf0:	84221904 	addi	r16,r16,-30620
  80adf4:	dc400115 	stw	r17,4(sp)
  80adf8:	80000015 	stw	zero,0(r16)
  80adfc:	2023883a 	mov	r17,r4
  80ae00:	2809883a 	mov	r4,r5
  80ae04:	300b883a 	mov	r5,r6
  80ae08:	380d883a 	mov	r6,r7
  80ae0c:	dfc00215 	stw	ra,8(sp)
  80ae10:	08120780 	call	812078 <lseek>
  80ae14:	1007883a 	mov	r3,r2
  80ae18:	00bfffc4 	movi	r2,-1
  80ae1c:	18800626 	beq	r3,r2,80ae38 <_lseek_r+0x54>
  80ae20:	1805883a 	mov	r2,r3
  80ae24:	dfc00217 	ldw	ra,8(sp)
  80ae28:	dc400117 	ldw	r17,4(sp)
  80ae2c:	dc000017 	ldw	r16,0(sp)
  80ae30:	dec00304 	addi	sp,sp,12
  80ae34:	f800283a 	ret
  80ae38:	80800017 	ldw	r2,0(r16)
  80ae3c:	103ff826 	beq	r2,zero,80ae20 <_lseek_r+0x3c>
  80ae40:	88800015 	stw	r2,0(r17)
  80ae44:	1805883a 	mov	r2,r3
  80ae48:	dfc00217 	ldw	ra,8(sp)
  80ae4c:	dc400117 	ldw	r17,4(sp)
  80ae50:	dc000017 	ldw	r16,0(sp)
  80ae54:	dec00304 	addi	sp,sp,12
  80ae58:	f800283a 	ret

0080ae5c <_mbrtowc_r>:
  80ae5c:	defffc04 	addi	sp,sp,-16
  80ae60:	dc400215 	stw	r17,8(sp)
  80ae64:	dc000115 	stw	r16,4(sp)
  80ae68:	dfc00315 	stw	ra,12(sp)
  80ae6c:	dc000417 	ldw	r16,16(sp)
  80ae70:	2023883a 	mov	r17,r4
  80ae74:	30000f26 	beq	r6,zero,80aeb4 <_mbrtowc_r+0x58>
  80ae78:	dc000015 	stw	r16,0(sp)
  80ae7c:	080af1c0 	call	80af1c <_mbtowc_r>
  80ae80:	1007883a 	mov	r3,r2
  80ae84:	00bfffc4 	movi	r2,-1
  80ae88:	1809883a 	mov	r4,r3
  80ae8c:	1880111e 	bne	r3,r2,80aed4 <_mbrtowc_r+0x78>
  80ae90:	80000015 	stw	zero,0(r16)
  80ae94:	00802284 	movi	r2,138
  80ae98:	88800015 	stw	r2,0(r17)
  80ae9c:	2005883a 	mov	r2,r4
  80aea0:	dfc00317 	ldw	ra,12(sp)
  80aea4:	dc400217 	ldw	r17,8(sp)
  80aea8:	dc000117 	ldw	r16,4(sp)
  80aeac:	dec00404 	addi	sp,sp,16
  80aeb0:	f800283a 	ret
  80aeb4:	000b883a 	mov	r5,zero
  80aeb8:	01802074 	movhi	r6,129
  80aebc:	3193f004 	addi	r6,r6,20416
  80aec0:	01c00044 	movi	r7,1
  80aec4:	dc000015 	stw	r16,0(sp)
  80aec8:	080af1c0 	call	80af1c <_mbtowc_r>
  80aecc:	1007883a 	mov	r3,r2
  80aed0:	003fec06 	br	80ae84 <_mbrtowc_r+0x28>
  80aed4:	1809883a 	mov	r4,r3
  80aed8:	003ff006 	br	80ae9c <_mbrtowc_r+0x40>

0080aedc <mbrtowc>:
  80aedc:	00802074 	movhi	r2,129
  80aee0:	109b3004 	addi	r2,r2,27840
  80aee4:	2017883a 	mov	r11,r4
  80aee8:	11000017 	ldw	r4,0(r2)
  80aeec:	defffe04 	addi	sp,sp,-8
  80aef0:	3013883a 	mov	r9,r6
  80aef4:	2805883a 	mov	r2,r5
  80aef8:	d9c00015 	stw	r7,0(sp)
  80aefc:	580b883a 	mov	r5,r11
  80af00:	100d883a 	mov	r6,r2
  80af04:	480f883a 	mov	r7,r9
  80af08:	dfc00115 	stw	ra,4(sp)
  80af0c:	080ae5c0 	call	80ae5c <_mbrtowc_r>
  80af10:	dfc00117 	ldw	ra,4(sp)
  80af14:	dec00204 	addi	sp,sp,8
  80af18:	f800283a 	ret

0080af1c <_mbtowc_r>:
  80af1c:	deffff04 	addi	sp,sp,-4
  80af20:	0005883a 	mov	r2,zero
  80af24:	28000326 	beq	r5,zero,80af34 <_mbtowc_r+0x18>
  80af28:	3000041e 	bne	r6,zero,80af3c <_mbtowc_r+0x20>
  80af2c:	dec00104 	addi	sp,sp,4
  80af30:	f800283a 	ret
  80af34:	d80b883a 	mov	r5,sp
  80af38:	303ffc26 	beq	r6,zero,80af2c <_mbtowc_r+0x10>
  80af3c:	00bfff84 	movi	r2,-2
  80af40:	383ffa26 	beq	r7,zero,80af2c <_mbtowc_r+0x10>
  80af44:	30800003 	ldbu	r2,0(r6)
  80af48:	28800015 	stw	r2,0(r5)
  80af4c:	30c00003 	ldbu	r3,0(r6)
  80af50:	1804c03a 	cmpne	r2,r3,zero
  80af54:	dec00104 	addi	sp,sp,4
  80af58:	f800283a 	ret

0080af5c <memmove>:
  80af5c:	2807883a 	mov	r3,r5
  80af60:	2011883a 	mov	r8,r4
  80af64:	29000c2e 	bgeu	r5,r4,80af98 <memmove+0x3c>
  80af68:	298f883a 	add	r7,r5,r6
  80af6c:	21c00a2e 	bgeu	r4,r7,80af98 <memmove+0x3c>
  80af70:	30000726 	beq	r6,zero,80af90 <memmove+0x34>
  80af74:	2187883a 	add	r3,r4,r6
  80af78:	198dc83a 	sub	r6,r3,r6
  80af7c:	39ffffc4 	addi	r7,r7,-1
  80af80:	38800003 	ldbu	r2,0(r7)
  80af84:	18ffffc4 	addi	r3,r3,-1
  80af88:	18800005 	stb	r2,0(r3)
  80af8c:	19bffb1e 	bne	r3,r6,80af7c <memmove+0x20>
  80af90:	2005883a 	mov	r2,r4
  80af94:	f800283a 	ret
  80af98:	01c003c4 	movi	r7,15
  80af9c:	39800a36 	bltu	r7,r6,80afc8 <memmove+0x6c>
  80afa0:	303ffb26 	beq	r6,zero,80af90 <memmove+0x34>
  80afa4:	400f883a 	mov	r7,r8
  80afa8:	320d883a 	add	r6,r6,r8
  80afac:	28800003 	ldbu	r2,0(r5)
  80afb0:	29400044 	addi	r5,r5,1
  80afb4:	38800005 	stb	r2,0(r7)
  80afb8:	39c00044 	addi	r7,r7,1
  80afbc:	39bffb1e 	bne	r7,r6,80afac <memmove+0x50>
  80afc0:	2005883a 	mov	r2,r4
  80afc4:	f800283a 	ret
  80afc8:	1904b03a 	or	r2,r3,r4
  80afcc:	108000cc 	andi	r2,r2,3
  80afd0:	103ff31e 	bne	r2,zero,80afa0 <memmove+0x44>
  80afd4:	3811883a 	mov	r8,r7
  80afd8:	180b883a 	mov	r5,r3
  80afdc:	200f883a 	mov	r7,r4
  80afe0:	28c00017 	ldw	r3,0(r5)
  80afe4:	31bffc04 	addi	r6,r6,-16
  80afe8:	38c00015 	stw	r3,0(r7)
  80afec:	28800117 	ldw	r2,4(r5)
  80aff0:	38800115 	stw	r2,4(r7)
  80aff4:	28c00217 	ldw	r3,8(r5)
  80aff8:	38c00215 	stw	r3,8(r7)
  80affc:	28800317 	ldw	r2,12(r5)
  80b000:	29400404 	addi	r5,r5,16
  80b004:	38800315 	stw	r2,12(r7)
  80b008:	39c00404 	addi	r7,r7,16
  80b00c:	41bff436 	bltu	r8,r6,80afe0 <memmove+0x84>
  80b010:	008000c4 	movi	r2,3
  80b014:	1180072e 	bgeu	r2,r6,80b034 <memmove+0xd8>
  80b018:	1007883a 	mov	r3,r2
  80b01c:	28800017 	ldw	r2,0(r5)
  80b020:	31bfff04 	addi	r6,r6,-4
  80b024:	29400104 	addi	r5,r5,4
  80b028:	38800015 	stw	r2,0(r7)
  80b02c:	39c00104 	addi	r7,r7,4
  80b030:	19bffa36 	bltu	r3,r6,80b01c <memmove+0xc0>
  80b034:	3811883a 	mov	r8,r7
  80b038:	003fd906 	br	80afa0 <memmove+0x44>

0080b03c <_Bfree>:
  80b03c:	28000826 	beq	r5,zero,80b060 <_Bfree+0x24>
  80b040:	28800117 	ldw	r2,4(r5)
  80b044:	21001317 	ldw	r4,76(r4)
  80b048:	1085883a 	add	r2,r2,r2
  80b04c:	1085883a 	add	r2,r2,r2
  80b050:	1105883a 	add	r2,r2,r4
  80b054:	10c00017 	ldw	r3,0(r2)
  80b058:	28c00015 	stw	r3,0(r5)
  80b05c:	11400015 	stw	r5,0(r2)
  80b060:	f800283a 	ret

0080b064 <__hi0bits>:
  80b064:	20bfffec 	andhi	r2,r4,65535
  80b068:	10001426 	beq	r2,zero,80b0bc <__hi0bits+0x58>
  80b06c:	0007883a 	mov	r3,zero
  80b070:	20bfc02c 	andhi	r2,r4,65280
  80b074:	1000021e 	bne	r2,zero,80b080 <__hi0bits+0x1c>
  80b078:	2008923a 	slli	r4,r4,8
  80b07c:	18c00204 	addi	r3,r3,8
  80b080:	20bc002c 	andhi	r2,r4,61440
  80b084:	1000021e 	bne	r2,zero,80b090 <__hi0bits+0x2c>
  80b088:	2008913a 	slli	r4,r4,4
  80b08c:	18c00104 	addi	r3,r3,4
  80b090:	20b0002c 	andhi	r2,r4,49152
  80b094:	1000031e 	bne	r2,zero,80b0a4 <__hi0bits+0x40>
  80b098:	2105883a 	add	r2,r4,r4
  80b09c:	18c00084 	addi	r3,r3,2
  80b0a0:	1089883a 	add	r4,r2,r2
  80b0a4:	20000316 	blt	r4,zero,80b0b4 <__hi0bits+0x50>
  80b0a8:	2090002c 	andhi	r2,r4,16384
  80b0ac:	10000626 	beq	r2,zero,80b0c8 <__hi0bits+0x64>
  80b0b0:	18c00044 	addi	r3,r3,1
  80b0b4:	1805883a 	mov	r2,r3
  80b0b8:	f800283a 	ret
  80b0bc:	2008943a 	slli	r4,r4,16
  80b0c0:	00c00404 	movi	r3,16
  80b0c4:	003fea06 	br	80b070 <__hi0bits+0xc>
  80b0c8:	00c00804 	movi	r3,32
  80b0cc:	1805883a 	mov	r2,r3
  80b0d0:	f800283a 	ret

0080b0d4 <__lo0bits>:
  80b0d4:	20c00017 	ldw	r3,0(r4)
  80b0d8:	188001cc 	andi	r2,r3,7
  80b0dc:	10000a26 	beq	r2,zero,80b108 <__lo0bits+0x34>
  80b0e0:	1880004c 	andi	r2,r3,1
  80b0e4:	1005003a 	cmpeq	r2,r2,zero
  80b0e8:	10002126 	beq	r2,zero,80b170 <__lo0bits+0x9c>
  80b0ec:	1880008c 	andi	r2,r3,2
  80b0f0:	1000251e 	bne	r2,zero,80b188 <__lo0bits+0xb4>
  80b0f4:	1804d0ba 	srli	r2,r3,2
  80b0f8:	01400084 	movi	r5,2
  80b0fc:	20800015 	stw	r2,0(r4)
  80b100:	2805883a 	mov	r2,r5
  80b104:	f800283a 	ret
  80b108:	18bfffcc 	andi	r2,r3,65535
  80b10c:	10001526 	beq	r2,zero,80b164 <__lo0bits+0x90>
  80b110:	000b883a 	mov	r5,zero
  80b114:	18803fcc 	andi	r2,r3,255
  80b118:	1000021e 	bne	r2,zero,80b124 <__lo0bits+0x50>
  80b11c:	1806d23a 	srli	r3,r3,8
  80b120:	29400204 	addi	r5,r5,8
  80b124:	188003cc 	andi	r2,r3,15
  80b128:	1000021e 	bne	r2,zero,80b134 <__lo0bits+0x60>
  80b12c:	1806d13a 	srli	r3,r3,4
  80b130:	29400104 	addi	r5,r5,4
  80b134:	188000cc 	andi	r2,r3,3
  80b138:	1000021e 	bne	r2,zero,80b144 <__lo0bits+0x70>
  80b13c:	1806d0ba 	srli	r3,r3,2
  80b140:	29400084 	addi	r5,r5,2
  80b144:	1880004c 	andi	r2,r3,1
  80b148:	1000031e 	bne	r2,zero,80b158 <__lo0bits+0x84>
  80b14c:	1806d07a 	srli	r3,r3,1
  80b150:	18000a26 	beq	r3,zero,80b17c <__lo0bits+0xa8>
  80b154:	29400044 	addi	r5,r5,1
  80b158:	2805883a 	mov	r2,r5
  80b15c:	20c00015 	stw	r3,0(r4)
  80b160:	f800283a 	ret
  80b164:	1806d43a 	srli	r3,r3,16
  80b168:	01400404 	movi	r5,16
  80b16c:	003fe906 	br	80b114 <__lo0bits+0x40>
  80b170:	000b883a 	mov	r5,zero
  80b174:	2805883a 	mov	r2,r5
  80b178:	f800283a 	ret
  80b17c:	01400804 	movi	r5,32
  80b180:	2805883a 	mov	r2,r5
  80b184:	f800283a 	ret
  80b188:	1804d07a 	srli	r2,r3,1
  80b18c:	01400044 	movi	r5,1
  80b190:	20800015 	stw	r2,0(r4)
  80b194:	003fda06 	br	80b100 <__lo0bits+0x2c>

0080b198 <__mcmp>:
  80b198:	20800417 	ldw	r2,16(r4)
  80b19c:	28c00417 	ldw	r3,16(r5)
  80b1a0:	10cfc83a 	sub	r7,r2,r3
  80b1a4:	38000c1e 	bne	r7,zero,80b1d8 <__mcmp+0x40>
  80b1a8:	18c5883a 	add	r2,r3,r3
  80b1ac:	1085883a 	add	r2,r2,r2
  80b1b0:	10c00504 	addi	r3,r2,20
  80b1b4:	21000504 	addi	r4,r4,20
  80b1b8:	28cb883a 	add	r5,r5,r3
  80b1bc:	2085883a 	add	r2,r4,r2
  80b1c0:	10bfff04 	addi	r2,r2,-4
  80b1c4:	297fff04 	addi	r5,r5,-4
  80b1c8:	11800017 	ldw	r6,0(r2)
  80b1cc:	28c00017 	ldw	r3,0(r5)
  80b1d0:	30c0031e 	bne	r6,r3,80b1e0 <__mcmp+0x48>
  80b1d4:	20bffa36 	bltu	r4,r2,80b1c0 <__mcmp+0x28>
  80b1d8:	3805883a 	mov	r2,r7
  80b1dc:	f800283a 	ret
  80b1e0:	30c00336 	bltu	r6,r3,80b1f0 <__mcmp+0x58>
  80b1e4:	01c00044 	movi	r7,1
  80b1e8:	3805883a 	mov	r2,r7
  80b1ec:	f800283a 	ret
  80b1f0:	01ffffc4 	movi	r7,-1
  80b1f4:	003ff806 	br	80b1d8 <__mcmp+0x40>

0080b1f8 <__ulp>:
  80b1f8:	295ffc2c 	andhi	r5,r5,32752
  80b1fc:	013f3034 	movhi	r4,64704
  80b200:	290b883a 	add	r5,r5,r4
  80b204:	0145c83a 	sub	r2,zero,r5
  80b208:	1007d53a 	srai	r3,r2,20
  80b20c:	000d883a 	mov	r6,zero
  80b210:	0140040e 	bge	zero,r5,80b224 <__ulp+0x2c>
  80b214:	280f883a 	mov	r7,r5
  80b218:	3807883a 	mov	r3,r7
  80b21c:	3005883a 	mov	r2,r6
  80b220:	f800283a 	ret
  80b224:	008004c4 	movi	r2,19
  80b228:	193ffb04 	addi	r4,r3,-20
  80b22c:	10c00c0e 	bge	r2,r3,80b260 <__ulp+0x68>
  80b230:	008007c4 	movi	r2,31
  80b234:	1107c83a 	sub	r3,r2,r4
  80b238:	00800784 	movi	r2,30
  80b23c:	01400044 	movi	r5,1
  80b240:	11000216 	blt	r2,r4,80b24c <__ulp+0x54>
  80b244:	00800044 	movi	r2,1
  80b248:	10ca983a 	sll	r5,r2,r3
  80b24c:	000f883a 	mov	r7,zero
  80b250:	280d883a 	mov	r6,r5
  80b254:	3807883a 	mov	r3,r7
  80b258:	3005883a 	mov	r2,r6
  80b25c:	f800283a 	ret
  80b260:	00800234 	movhi	r2,8
  80b264:	10cfd83a 	sra	r7,r2,r3
  80b268:	000d883a 	mov	r6,zero
  80b26c:	3005883a 	mov	r2,r6
  80b270:	3807883a 	mov	r3,r7
  80b274:	f800283a 	ret

0080b278 <__b2d>:
  80b278:	20800417 	ldw	r2,16(r4)
  80b27c:	defff904 	addi	sp,sp,-28
  80b280:	dd000415 	stw	r20,16(sp)
  80b284:	1085883a 	add	r2,r2,r2
  80b288:	25000504 	addi	r20,r4,20
  80b28c:	1085883a 	add	r2,r2,r2
  80b290:	dc000015 	stw	r16,0(sp)
  80b294:	a0a1883a 	add	r16,r20,r2
  80b298:	dd400515 	stw	r21,20(sp)
  80b29c:	857fff17 	ldw	r21,-4(r16)
  80b2a0:	dc400115 	stw	r17,4(sp)
  80b2a4:	dfc00615 	stw	ra,24(sp)
  80b2a8:	a809883a 	mov	r4,r21
  80b2ac:	2823883a 	mov	r17,r5
  80b2b0:	dcc00315 	stw	r19,12(sp)
  80b2b4:	dc800215 	stw	r18,8(sp)
  80b2b8:	080b0640 	call	80b064 <__hi0bits>
  80b2bc:	100b883a 	mov	r5,r2
  80b2c0:	00800804 	movi	r2,32
  80b2c4:	1145c83a 	sub	r2,r2,r5
  80b2c8:	88800015 	stw	r2,0(r17)
  80b2cc:	00800284 	movi	r2,10
  80b2d0:	80ffff04 	addi	r3,r16,-4
  80b2d4:	11401416 	blt	r2,r5,80b328 <__b2d+0xb0>
  80b2d8:	008002c4 	movi	r2,11
  80b2dc:	1149c83a 	sub	r4,r2,r5
  80b2e0:	a0c02736 	bltu	r20,r3,80b380 <__b2d+0x108>
  80b2e4:	000d883a 	mov	r6,zero
  80b2e8:	28800544 	addi	r2,r5,21
  80b2ec:	a906d83a 	srl	r3,r21,r4
  80b2f0:	a884983a 	sll	r2,r21,r2
  80b2f4:	1ccffc34 	orhi	r19,r3,16368
  80b2f8:	11a4b03a 	or	r18,r2,r6
  80b2fc:	9005883a 	mov	r2,r18
  80b300:	9807883a 	mov	r3,r19
  80b304:	dfc00617 	ldw	ra,24(sp)
  80b308:	dd400517 	ldw	r21,20(sp)
  80b30c:	dd000417 	ldw	r20,16(sp)
  80b310:	dcc00317 	ldw	r19,12(sp)
  80b314:	dc800217 	ldw	r18,8(sp)
  80b318:	dc400117 	ldw	r17,4(sp)
  80b31c:	dc000017 	ldw	r16,0(sp)
  80b320:	dec00704 	addi	sp,sp,28
  80b324:	f800283a 	ret
  80b328:	a0c00e36 	bltu	r20,r3,80b364 <__b2d+0xec>
  80b32c:	293ffd44 	addi	r4,r5,-11
  80b330:	000d883a 	mov	r6,zero
  80b334:	20000f26 	beq	r4,zero,80b374 <__b2d+0xfc>
  80b338:	00800804 	movi	r2,32
  80b33c:	110bc83a 	sub	r5,r2,r4
  80b340:	a0c01236 	bltu	r20,r3,80b38c <__b2d+0x114>
  80b344:	000f883a 	mov	r7,zero
  80b348:	a904983a 	sll	r2,r21,r4
  80b34c:	3146d83a 	srl	r3,r6,r5
  80b350:	3108983a 	sll	r4,r6,r4
  80b354:	108ffc34 	orhi	r2,r2,16368
  80b358:	18a6b03a 	or	r19,r3,r2
  80b35c:	3924b03a 	or	r18,r7,r4
  80b360:	003fe606 	br	80b2fc <__b2d+0x84>
  80b364:	293ffd44 	addi	r4,r5,-11
  80b368:	81bffe17 	ldw	r6,-8(r16)
  80b36c:	80fffe04 	addi	r3,r16,-8
  80b370:	203ff11e 	bne	r4,zero,80b338 <__b2d+0xc0>
  80b374:	accffc34 	orhi	r19,r21,16368
  80b378:	3025883a 	mov	r18,r6
  80b37c:	003fdf06 	br	80b2fc <__b2d+0x84>
  80b380:	18bfff17 	ldw	r2,-4(r3)
  80b384:	110cd83a 	srl	r6,r2,r4
  80b388:	003fd706 	br	80b2e8 <__b2d+0x70>
  80b38c:	18bfff17 	ldw	r2,-4(r3)
  80b390:	114ed83a 	srl	r7,r2,r5
  80b394:	003fec06 	br	80b348 <__b2d+0xd0>

0080b398 <__ratio>:
  80b398:	defff904 	addi	sp,sp,-28
  80b39c:	dc400215 	stw	r17,8(sp)
  80b3a0:	2823883a 	mov	r17,r5
  80b3a4:	d80b883a 	mov	r5,sp
  80b3a8:	dfc00615 	stw	ra,24(sp)
  80b3ac:	dd000515 	stw	r20,20(sp)
  80b3b0:	dcc00415 	stw	r19,16(sp)
  80b3b4:	dc800315 	stw	r18,12(sp)
  80b3b8:	2025883a 	mov	r18,r4
  80b3bc:	080b2780 	call	80b278 <__b2d>
  80b3c0:	8809883a 	mov	r4,r17
  80b3c4:	d9400104 	addi	r5,sp,4
  80b3c8:	1027883a 	mov	r19,r2
  80b3cc:	1829883a 	mov	r20,r3
  80b3d0:	080b2780 	call	80b278 <__b2d>
  80b3d4:	89000417 	ldw	r4,16(r17)
  80b3d8:	91c00417 	ldw	r7,16(r18)
  80b3dc:	d9800117 	ldw	r6,4(sp)
  80b3e0:	180b883a 	mov	r5,r3
  80b3e4:	390fc83a 	sub	r7,r7,r4
  80b3e8:	1009883a 	mov	r4,r2
  80b3ec:	d8800017 	ldw	r2,0(sp)
  80b3f0:	380e917a 	slli	r7,r7,5
  80b3f4:	2011883a 	mov	r8,r4
  80b3f8:	1185c83a 	sub	r2,r2,r6
  80b3fc:	11c5883a 	add	r2,r2,r7
  80b400:	1006953a 	slli	r3,r2,20
  80b404:	2813883a 	mov	r9,r5
  80b408:	00800d0e 	bge	zero,r2,80b440 <__ratio+0xa8>
  80b40c:	1d29883a 	add	r20,r3,r20
  80b410:	a00b883a 	mov	r5,r20
  80b414:	480f883a 	mov	r7,r9
  80b418:	9809883a 	mov	r4,r19
  80b41c:	400d883a 	mov	r6,r8
  80b420:	0801c000 	call	801c00 <__divdf3>
  80b424:	dfc00617 	ldw	ra,24(sp)
  80b428:	dd000517 	ldw	r20,20(sp)
  80b42c:	dcc00417 	ldw	r19,16(sp)
  80b430:	dc800317 	ldw	r18,12(sp)
  80b434:	dc400217 	ldw	r17,8(sp)
  80b438:	dec00704 	addi	sp,sp,28
  80b43c:	f800283a 	ret
  80b440:	28d3c83a 	sub	r9,r5,r3
  80b444:	003ff206 	br	80b410 <__ratio+0x78>

0080b448 <_mprec_log10>:
  80b448:	defffe04 	addi	sp,sp,-8
  80b44c:	008005c4 	movi	r2,23
  80b450:	dc000015 	stw	r16,0(sp)
  80b454:	dfc00115 	stw	ra,4(sp)
  80b458:	2021883a 	mov	r16,r4
  80b45c:	11000c16 	blt	r2,r4,80b490 <_mprec_log10+0x48>
  80b460:	200490fa 	slli	r2,r4,3
  80b464:	00c02074 	movhi	r3,129
  80b468:	18d41f04 	addi	r3,r3,20604
  80b46c:	10c5883a 	add	r2,r2,r3
  80b470:	12400117 	ldw	r9,4(r2)
  80b474:	12000017 	ldw	r8,0(r2)
  80b478:	4807883a 	mov	r3,r9
  80b47c:	4005883a 	mov	r2,r8
  80b480:	dfc00117 	ldw	ra,4(sp)
  80b484:	dc000017 	ldw	r16,0(sp)
  80b488:	dec00204 	addi	sp,sp,8
  80b48c:	f800283a 	ret
  80b490:	0011883a 	mov	r8,zero
  80b494:	024ffc34 	movhi	r9,16368
  80b498:	0005883a 	mov	r2,zero
  80b49c:	00d00934 	movhi	r3,16420
  80b4a0:	480b883a 	mov	r5,r9
  80b4a4:	4009883a 	mov	r4,r8
  80b4a8:	180f883a 	mov	r7,r3
  80b4ac:	100d883a 	mov	r6,r2
  80b4b0:	0810cfc0 	call	810cfc <__muldf3>
  80b4b4:	843fffc4 	addi	r16,r16,-1
  80b4b8:	1011883a 	mov	r8,r2
  80b4bc:	1813883a 	mov	r9,r3
  80b4c0:	803ff51e 	bne	r16,zero,80b498 <_mprec_log10+0x50>
  80b4c4:	4005883a 	mov	r2,r8
  80b4c8:	4807883a 	mov	r3,r9
  80b4cc:	dfc00117 	ldw	ra,4(sp)
  80b4d0:	dc000017 	ldw	r16,0(sp)
  80b4d4:	dec00204 	addi	sp,sp,8
  80b4d8:	f800283a 	ret

0080b4dc <__copybits>:
  80b4dc:	297fffc4 	addi	r5,r5,-1
  80b4e0:	30800417 	ldw	r2,16(r6)
  80b4e4:	280bd17a 	srai	r5,r5,5
  80b4e8:	31800504 	addi	r6,r6,20
  80b4ec:	1085883a 	add	r2,r2,r2
  80b4f0:	294b883a 	add	r5,r5,r5
  80b4f4:	294b883a 	add	r5,r5,r5
  80b4f8:	1085883a 	add	r2,r2,r2
  80b4fc:	290b883a 	add	r5,r5,r4
  80b500:	3087883a 	add	r3,r6,r2
  80b504:	29400104 	addi	r5,r5,4
  80b508:	30c0052e 	bgeu	r6,r3,80b520 <__copybits+0x44>
  80b50c:	30800017 	ldw	r2,0(r6)
  80b510:	31800104 	addi	r6,r6,4
  80b514:	20800015 	stw	r2,0(r4)
  80b518:	21000104 	addi	r4,r4,4
  80b51c:	30fffb36 	bltu	r6,r3,80b50c <__copybits+0x30>
  80b520:	2140032e 	bgeu	r4,r5,80b530 <__copybits+0x54>
  80b524:	20000015 	stw	zero,0(r4)
  80b528:	21000104 	addi	r4,r4,4
  80b52c:	217ffd36 	bltu	r4,r5,80b524 <__copybits+0x48>
  80b530:	f800283a 	ret

0080b534 <__any_on>:
  80b534:	20800417 	ldw	r2,16(r4)
  80b538:	2807d17a 	srai	r3,r5,5
  80b53c:	21000504 	addi	r4,r4,20
  80b540:	10c00d0e 	bge	r2,r3,80b578 <__any_on+0x44>
  80b544:	1085883a 	add	r2,r2,r2
  80b548:	1085883a 	add	r2,r2,r2
  80b54c:	208d883a 	add	r6,r4,r2
  80b550:	2180182e 	bgeu	r4,r6,80b5b4 <__any_on+0x80>
  80b554:	30bfff17 	ldw	r2,-4(r6)
  80b558:	30ffff04 	addi	r3,r6,-4
  80b55c:	1000041e 	bne	r2,zero,80b570 <__any_on+0x3c>
  80b560:	20c0142e 	bgeu	r4,r3,80b5b4 <__any_on+0x80>
  80b564:	18ffff04 	addi	r3,r3,-4
  80b568:	18800017 	ldw	r2,0(r3)
  80b56c:	103ffc26 	beq	r2,zero,80b560 <__any_on+0x2c>
  80b570:	00800044 	movi	r2,1
  80b574:	f800283a 	ret
  80b578:	18800a0e 	bge	r3,r2,80b5a4 <__any_on+0x70>
  80b57c:	294007cc 	andi	r5,r5,31
  80b580:	28000826 	beq	r5,zero,80b5a4 <__any_on+0x70>
  80b584:	18c5883a 	add	r2,r3,r3
  80b588:	1085883a 	add	r2,r2,r2
  80b58c:	208d883a 	add	r6,r4,r2
  80b590:	30c00017 	ldw	r3,0(r6)
  80b594:	1944d83a 	srl	r2,r3,r5
  80b598:	1144983a 	sll	r2,r2,r5
  80b59c:	18bff41e 	bne	r3,r2,80b570 <__any_on+0x3c>
  80b5a0:	003feb06 	br	80b550 <__any_on+0x1c>
  80b5a4:	18c5883a 	add	r2,r3,r3
  80b5a8:	1085883a 	add	r2,r2,r2
  80b5ac:	208d883a 	add	r6,r4,r2
  80b5b0:	003fe706 	br	80b550 <__any_on+0x1c>
  80b5b4:	0005883a 	mov	r2,zero
  80b5b8:	f800283a 	ret

0080b5bc <_Balloc>:
  80b5bc:	20c01317 	ldw	r3,76(r4)
  80b5c0:	defffb04 	addi	sp,sp,-20
  80b5c4:	dcc00315 	stw	r19,12(sp)
  80b5c8:	dc800215 	stw	r18,8(sp)
  80b5cc:	dfc00415 	stw	ra,16(sp)
  80b5d0:	2825883a 	mov	r18,r5
  80b5d4:	dc400115 	stw	r17,4(sp)
  80b5d8:	dc000015 	stw	r16,0(sp)
  80b5dc:	2027883a 	mov	r19,r4
  80b5e0:	01800404 	movi	r6,16
  80b5e4:	01400104 	movi	r5,4
  80b5e8:	18001726 	beq	r3,zero,80b648 <_Balloc+0x8c>
  80b5ec:	01400044 	movi	r5,1
  80b5f0:	9485883a 	add	r2,r18,r18
  80b5f4:	2ca2983a 	sll	r17,r5,r18
  80b5f8:	1085883a 	add	r2,r2,r2
  80b5fc:	10c7883a 	add	r3,r2,r3
  80b600:	1c000017 	ldw	r16,0(r3)
  80b604:	8c4d883a 	add	r6,r17,r17
  80b608:	318d883a 	add	r6,r6,r6
  80b60c:	9809883a 	mov	r4,r19
  80b610:	31800504 	addi	r6,r6,20
  80b614:	80001226 	beq	r16,zero,80b660 <_Balloc+0xa4>
  80b618:	80800017 	ldw	r2,0(r16)
  80b61c:	18800015 	stw	r2,0(r3)
  80b620:	80000415 	stw	zero,16(r16)
  80b624:	80000315 	stw	zero,12(r16)
  80b628:	8005883a 	mov	r2,r16
  80b62c:	dfc00417 	ldw	ra,16(sp)
  80b630:	dcc00317 	ldw	r19,12(sp)
  80b634:	dc800217 	ldw	r18,8(sp)
  80b638:	dc400117 	ldw	r17,4(sp)
  80b63c:	dc000017 	ldw	r16,0(sp)
  80b640:	dec00504 	addi	sp,sp,20
  80b644:	f800283a 	ret
  80b648:	080250c0 	call	80250c <_calloc_r>
  80b64c:	1007883a 	mov	r3,r2
  80b650:	0021883a 	mov	r16,zero
  80b654:	98801315 	stw	r2,76(r19)
  80b658:	103fe41e 	bne	r2,zero,80b5ec <_Balloc+0x30>
  80b65c:	003ff206 	br	80b628 <_Balloc+0x6c>
  80b660:	080250c0 	call	80250c <_calloc_r>
  80b664:	103ff026 	beq	r2,zero,80b628 <_Balloc+0x6c>
  80b668:	1021883a 	mov	r16,r2
  80b66c:	14800115 	stw	r18,4(r2)
  80b670:	14400215 	stw	r17,8(r2)
  80b674:	003fea06 	br	80b620 <_Balloc+0x64>

0080b678 <__d2b>:
  80b678:	defff504 	addi	sp,sp,-44
  80b67c:	dcc00515 	stw	r19,20(sp)
  80b680:	04c00044 	movi	r19,1
  80b684:	dc000215 	stw	r16,8(sp)
  80b688:	2821883a 	mov	r16,r5
  80b68c:	980b883a 	mov	r5,r19
  80b690:	ddc00915 	stw	r23,36(sp)
  80b694:	dd800815 	stw	r22,32(sp)
  80b698:	dd400715 	stw	r21,28(sp)
  80b69c:	dd000615 	stw	r20,24(sp)
  80b6a0:	dc800415 	stw	r18,16(sp)
  80b6a4:	dc400315 	stw	r17,12(sp)
  80b6a8:	dfc00a15 	stw	ra,40(sp)
  80b6ac:	3023883a 	mov	r17,r6
  80b6b0:	382d883a 	mov	r22,r7
  80b6b4:	ddc00b17 	ldw	r23,44(sp)
  80b6b8:	080b5bc0 	call	80b5bc <_Balloc>
  80b6bc:	1025883a 	mov	r18,r2
  80b6c0:	00a00034 	movhi	r2,32768
  80b6c4:	10bfffc4 	addi	r2,r2,-1
  80b6c8:	8888703a 	and	r4,r17,r2
  80b6cc:	202ad53a 	srli	r21,r4,20
  80b6d0:	00800434 	movhi	r2,16
  80b6d4:	10bfffc4 	addi	r2,r2,-1
  80b6d8:	8886703a 	and	r3,r17,r2
  80b6dc:	a829003a 	cmpeq	r20,r21,zero
  80b6e0:	800b883a 	mov	r5,r16
  80b6e4:	d8c00115 	stw	r3,4(sp)
  80b6e8:	94000504 	addi	r16,r18,20
  80b6ec:	a000021e 	bne	r20,zero,80b6f8 <__d2b+0x80>
  80b6f0:	18c00434 	orhi	r3,r3,16
  80b6f4:	d8c00115 	stw	r3,4(sp)
  80b6f8:	28002726 	beq	r5,zero,80b798 <__d2b+0x120>
  80b6fc:	d809883a 	mov	r4,sp
  80b700:	d9400015 	stw	r5,0(sp)
  80b704:	080b0d40 	call	80b0d4 <__lo0bits>
  80b708:	100d883a 	mov	r6,r2
  80b70c:	10003526 	beq	r2,zero,80b7e4 <__d2b+0x16c>
  80b710:	d8c00117 	ldw	r3,4(sp)
  80b714:	00800804 	movi	r2,32
  80b718:	1185c83a 	sub	r2,r2,r6
  80b71c:	d9000017 	ldw	r4,0(sp)
  80b720:	1886983a 	sll	r3,r3,r2
  80b724:	1906b03a 	or	r3,r3,r4
  80b728:	90c00515 	stw	r3,20(r18)
  80b72c:	d8c00117 	ldw	r3,4(sp)
  80b730:	1986d83a 	srl	r3,r3,r6
  80b734:	d8c00115 	stw	r3,4(sp)
  80b738:	180b003a 	cmpeq	r5,r3,zero
  80b73c:	00800084 	movi	r2,2
  80b740:	114bc83a 	sub	r5,r2,r5
  80b744:	80c00115 	stw	r3,4(r16)
  80b748:	91400415 	stw	r5,16(r18)
  80b74c:	a0001a1e 	bne	r20,zero,80b7b8 <__d2b+0x140>
  80b750:	3545883a 	add	r2,r6,r21
  80b754:	10bef344 	addi	r2,r2,-1075
  80b758:	00c00d44 	movi	r3,53
  80b75c:	b0800015 	stw	r2,0(r22)
  80b760:	1987c83a 	sub	r3,r3,r6
  80b764:	b8c00015 	stw	r3,0(r23)
  80b768:	9005883a 	mov	r2,r18
  80b76c:	dfc00a17 	ldw	ra,40(sp)
  80b770:	ddc00917 	ldw	r23,36(sp)
  80b774:	dd800817 	ldw	r22,32(sp)
  80b778:	dd400717 	ldw	r21,28(sp)
  80b77c:	dd000617 	ldw	r20,24(sp)
  80b780:	dcc00517 	ldw	r19,20(sp)
  80b784:	dc800417 	ldw	r18,16(sp)
  80b788:	dc400317 	ldw	r17,12(sp)
  80b78c:	dc000217 	ldw	r16,8(sp)
  80b790:	dec00b04 	addi	sp,sp,44
  80b794:	f800283a 	ret
  80b798:	d9000104 	addi	r4,sp,4
  80b79c:	080b0d40 	call	80b0d4 <__lo0bits>
  80b7a0:	11800804 	addi	r6,r2,32
  80b7a4:	d8800117 	ldw	r2,4(sp)
  80b7a8:	94c00415 	stw	r19,16(r18)
  80b7ac:	980b883a 	mov	r5,r19
  80b7b0:	90800515 	stw	r2,20(r18)
  80b7b4:	a03fe626 	beq	r20,zero,80b750 <__d2b+0xd8>
  80b7b8:	2945883a 	add	r2,r5,r5
  80b7bc:	1085883a 	add	r2,r2,r2
  80b7c0:	1405883a 	add	r2,r2,r16
  80b7c4:	113fff17 	ldw	r4,-4(r2)
  80b7c8:	30fef384 	addi	r3,r6,-1074
  80b7cc:	2820917a 	slli	r16,r5,5
  80b7d0:	b0c00015 	stw	r3,0(r22)
  80b7d4:	080b0640 	call	80b064 <__hi0bits>
  80b7d8:	80a1c83a 	sub	r16,r16,r2
  80b7dc:	bc000015 	stw	r16,0(r23)
  80b7e0:	003fe106 	br	80b768 <__d2b+0xf0>
  80b7e4:	d8800017 	ldw	r2,0(sp)
  80b7e8:	90800515 	stw	r2,20(r18)
  80b7ec:	d8c00117 	ldw	r3,4(sp)
  80b7f0:	003fd106 	br	80b738 <__d2b+0xc0>

0080b7f4 <__mdiff>:
  80b7f4:	defffb04 	addi	sp,sp,-20
  80b7f8:	dc000015 	stw	r16,0(sp)
  80b7fc:	2821883a 	mov	r16,r5
  80b800:	dc800215 	stw	r18,8(sp)
  80b804:	300b883a 	mov	r5,r6
  80b808:	2025883a 	mov	r18,r4
  80b80c:	8009883a 	mov	r4,r16
  80b810:	dc400115 	stw	r17,4(sp)
  80b814:	dfc00415 	stw	ra,16(sp)
  80b818:	dcc00315 	stw	r19,12(sp)
  80b81c:	3023883a 	mov	r17,r6
  80b820:	080b1980 	call	80b198 <__mcmp>
  80b824:	10004226 	beq	r2,zero,80b930 <__mdiff+0x13c>
  80b828:	10005016 	blt	r2,zero,80b96c <__mdiff+0x178>
  80b82c:	0027883a 	mov	r19,zero
  80b830:	81400117 	ldw	r5,4(r16)
  80b834:	9009883a 	mov	r4,r18
  80b838:	080b5bc0 	call	80b5bc <_Balloc>
  80b83c:	1019883a 	mov	r12,r2
  80b840:	82800417 	ldw	r10,16(r16)
  80b844:	88800417 	ldw	r2,16(r17)
  80b848:	81800504 	addi	r6,r16,20
  80b84c:	5287883a 	add	r3,r10,r10
  80b850:	1085883a 	add	r2,r2,r2
  80b854:	18c7883a 	add	r3,r3,r3
  80b858:	1085883a 	add	r2,r2,r2
  80b85c:	8a000504 	addi	r8,r17,20
  80b860:	64c00315 	stw	r19,12(r12)
  80b864:	30db883a 	add	r13,r6,r3
  80b868:	4097883a 	add	r11,r8,r2
  80b86c:	61c00504 	addi	r7,r12,20
  80b870:	0013883a 	mov	r9,zero
  80b874:	31000017 	ldw	r4,0(r6)
  80b878:	41400017 	ldw	r5,0(r8)
  80b87c:	42000104 	addi	r8,r8,4
  80b880:	20bfffcc 	andi	r2,r4,65535
  80b884:	28ffffcc 	andi	r3,r5,65535
  80b888:	10c5c83a 	sub	r2,r2,r3
  80b88c:	1245883a 	add	r2,r2,r9
  80b890:	2008d43a 	srli	r4,r4,16
  80b894:	280ad43a 	srli	r5,r5,16
  80b898:	1007d43a 	srai	r3,r2,16
  80b89c:	3880000d 	sth	r2,0(r7)
  80b8a0:	2149c83a 	sub	r4,r4,r5
  80b8a4:	20c9883a 	add	r4,r4,r3
  80b8a8:	3900008d 	sth	r4,2(r7)
  80b8ac:	31800104 	addi	r6,r6,4
  80b8b0:	39c00104 	addi	r7,r7,4
  80b8b4:	2013d43a 	srai	r9,r4,16
  80b8b8:	42ffee36 	bltu	r8,r11,80b874 <__mdiff+0x80>
  80b8bc:	33400c2e 	bgeu	r6,r13,80b8f0 <__mdiff+0xfc>
  80b8c0:	30800017 	ldw	r2,0(r6)
  80b8c4:	31800104 	addi	r6,r6,4
  80b8c8:	10ffffcc 	andi	r3,r2,65535
  80b8cc:	1a47883a 	add	r3,r3,r9
  80b8d0:	1004d43a 	srli	r2,r2,16
  80b8d4:	1809d43a 	srai	r4,r3,16
  80b8d8:	38c0000d 	sth	r3,0(r7)
  80b8dc:	1105883a 	add	r2,r2,r4
  80b8e0:	3880008d 	sth	r2,2(r7)
  80b8e4:	1013d43a 	srai	r9,r2,16
  80b8e8:	39c00104 	addi	r7,r7,4
  80b8ec:	337ff436 	bltu	r6,r13,80b8c0 <__mdiff+0xcc>
  80b8f0:	38bfff17 	ldw	r2,-4(r7)
  80b8f4:	38ffff04 	addi	r3,r7,-4
  80b8f8:	1000041e 	bne	r2,zero,80b90c <__mdiff+0x118>
  80b8fc:	18ffff04 	addi	r3,r3,-4
  80b900:	18800017 	ldw	r2,0(r3)
  80b904:	52bfffc4 	addi	r10,r10,-1
  80b908:	103ffc26 	beq	r2,zero,80b8fc <__mdiff+0x108>
  80b90c:	6005883a 	mov	r2,r12
  80b910:	62800415 	stw	r10,16(r12)
  80b914:	dfc00417 	ldw	ra,16(sp)
  80b918:	dcc00317 	ldw	r19,12(sp)
  80b91c:	dc800217 	ldw	r18,8(sp)
  80b920:	dc400117 	ldw	r17,4(sp)
  80b924:	dc000017 	ldw	r16,0(sp)
  80b928:	dec00504 	addi	sp,sp,20
  80b92c:	f800283a 	ret
  80b930:	9009883a 	mov	r4,r18
  80b934:	000b883a 	mov	r5,zero
  80b938:	080b5bc0 	call	80b5bc <_Balloc>
  80b93c:	1019883a 	mov	r12,r2
  80b940:	00800044 	movi	r2,1
  80b944:	60800415 	stw	r2,16(r12)
  80b948:	6005883a 	mov	r2,r12
  80b94c:	60000515 	stw	zero,20(r12)
  80b950:	dfc00417 	ldw	ra,16(sp)
  80b954:	dcc00317 	ldw	r19,12(sp)
  80b958:	dc800217 	ldw	r18,8(sp)
  80b95c:	dc400117 	ldw	r17,4(sp)
  80b960:	dc000017 	ldw	r16,0(sp)
  80b964:	dec00504 	addi	sp,sp,20
  80b968:	f800283a 	ret
  80b96c:	880d883a 	mov	r6,r17
  80b970:	04c00044 	movi	r19,1
  80b974:	8023883a 	mov	r17,r16
  80b978:	3021883a 	mov	r16,r6
  80b97c:	003fac06 	br	80b830 <__mdiff+0x3c>

0080b980 <__lshift>:
  80b980:	defff904 	addi	sp,sp,-28
  80b984:	28800417 	ldw	r2,16(r5)
  80b988:	dc000015 	stw	r16,0(sp)
  80b98c:	3021d17a 	srai	r16,r6,5
  80b990:	28c00217 	ldw	r3,8(r5)
  80b994:	10800044 	addi	r2,r2,1
  80b998:	dc400115 	stw	r17,4(sp)
  80b99c:	80a3883a 	add	r17,r16,r2
  80b9a0:	dd400515 	stw	r21,20(sp)
  80b9a4:	dd000415 	stw	r20,16(sp)
  80b9a8:	dc800215 	stw	r18,8(sp)
  80b9ac:	dfc00615 	stw	ra,24(sp)
  80b9b0:	2825883a 	mov	r18,r5
  80b9b4:	dcc00315 	stw	r19,12(sp)
  80b9b8:	3029883a 	mov	r20,r6
  80b9bc:	202b883a 	mov	r21,r4
  80b9c0:	29400117 	ldw	r5,4(r5)
  80b9c4:	1c40030e 	bge	r3,r17,80b9d4 <__lshift+0x54>
  80b9c8:	18c7883a 	add	r3,r3,r3
  80b9cc:	29400044 	addi	r5,r5,1
  80b9d0:	1c7ffd16 	blt	r3,r17,80b9c8 <__lshift+0x48>
  80b9d4:	a809883a 	mov	r4,r21
  80b9d8:	080b5bc0 	call	80b5bc <_Balloc>
  80b9dc:	1027883a 	mov	r19,r2
  80b9e0:	11400504 	addi	r5,r2,20
  80b9e4:	0400090e 	bge	zero,r16,80ba0c <__lshift+0x8c>
  80b9e8:	2805883a 	mov	r2,r5
  80b9ec:	0007883a 	mov	r3,zero
  80b9f0:	18c00044 	addi	r3,r3,1
  80b9f4:	10000015 	stw	zero,0(r2)
  80b9f8:	10800104 	addi	r2,r2,4
  80b9fc:	80fffc1e 	bne	r16,r3,80b9f0 <__lshift+0x70>
  80ba00:	8405883a 	add	r2,r16,r16
  80ba04:	1085883a 	add	r2,r2,r2
  80ba08:	288b883a 	add	r5,r5,r2
  80ba0c:	90800417 	ldw	r2,16(r18)
  80ba10:	91000504 	addi	r4,r18,20
  80ba14:	a18007cc 	andi	r6,r20,31
  80ba18:	1085883a 	add	r2,r2,r2
  80ba1c:	1085883a 	add	r2,r2,r2
  80ba20:	208f883a 	add	r7,r4,r2
  80ba24:	30001e26 	beq	r6,zero,80baa0 <__lshift+0x120>
  80ba28:	00800804 	movi	r2,32
  80ba2c:	1191c83a 	sub	r8,r2,r6
  80ba30:	0007883a 	mov	r3,zero
  80ba34:	20800017 	ldw	r2,0(r4)
  80ba38:	1184983a 	sll	r2,r2,r6
  80ba3c:	1884b03a 	or	r2,r3,r2
  80ba40:	28800015 	stw	r2,0(r5)
  80ba44:	20c00017 	ldw	r3,0(r4)
  80ba48:	21000104 	addi	r4,r4,4
  80ba4c:	29400104 	addi	r5,r5,4
  80ba50:	1a06d83a 	srl	r3,r3,r8
  80ba54:	21fff736 	bltu	r4,r7,80ba34 <__lshift+0xb4>
  80ba58:	28c00015 	stw	r3,0(r5)
  80ba5c:	18000126 	beq	r3,zero,80ba64 <__lshift+0xe4>
  80ba60:	8c400044 	addi	r17,r17,1
  80ba64:	88bfffc4 	addi	r2,r17,-1
  80ba68:	98800415 	stw	r2,16(r19)
  80ba6c:	a809883a 	mov	r4,r21
  80ba70:	900b883a 	mov	r5,r18
  80ba74:	080b03c0 	call	80b03c <_Bfree>
  80ba78:	9805883a 	mov	r2,r19
  80ba7c:	dfc00617 	ldw	ra,24(sp)
  80ba80:	dd400517 	ldw	r21,20(sp)
  80ba84:	dd000417 	ldw	r20,16(sp)
  80ba88:	dcc00317 	ldw	r19,12(sp)
  80ba8c:	dc800217 	ldw	r18,8(sp)
  80ba90:	dc400117 	ldw	r17,4(sp)
  80ba94:	dc000017 	ldw	r16,0(sp)
  80ba98:	dec00704 	addi	sp,sp,28
  80ba9c:	f800283a 	ret
  80baa0:	20800017 	ldw	r2,0(r4)
  80baa4:	21000104 	addi	r4,r4,4
  80baa8:	28800015 	stw	r2,0(r5)
  80baac:	29400104 	addi	r5,r5,4
  80bab0:	21ffec2e 	bgeu	r4,r7,80ba64 <__lshift+0xe4>
  80bab4:	20800017 	ldw	r2,0(r4)
  80bab8:	21000104 	addi	r4,r4,4
  80babc:	28800015 	stw	r2,0(r5)
  80bac0:	29400104 	addi	r5,r5,4
  80bac4:	21fff636 	bltu	r4,r7,80baa0 <__lshift+0x120>
  80bac8:	003fe606 	br	80ba64 <__lshift+0xe4>

0080bacc <__multiply>:
  80bacc:	defff004 	addi	sp,sp,-64
  80bad0:	dc800815 	stw	r18,32(sp)
  80bad4:	dc400715 	stw	r17,28(sp)
  80bad8:	2c800417 	ldw	r18,16(r5)
  80badc:	34400417 	ldw	r17,16(r6)
  80bae0:	dcc00915 	stw	r19,36(sp)
  80bae4:	dc000615 	stw	r16,24(sp)
  80bae8:	dfc00f15 	stw	ra,60(sp)
  80baec:	df000e15 	stw	fp,56(sp)
  80baf0:	ddc00d15 	stw	r23,52(sp)
  80baf4:	dd800c15 	stw	r22,48(sp)
  80baf8:	dd400b15 	stw	r21,44(sp)
  80bafc:	dd000a15 	stw	r20,40(sp)
  80bb00:	2821883a 	mov	r16,r5
  80bb04:	3027883a 	mov	r19,r6
  80bb08:	9440040e 	bge	r18,r17,80bb1c <__multiply+0x50>
  80bb0c:	8825883a 	mov	r18,r17
  80bb10:	2c400417 	ldw	r17,16(r5)
  80bb14:	2827883a 	mov	r19,r5
  80bb18:	3021883a 	mov	r16,r6
  80bb1c:	80800217 	ldw	r2,8(r16)
  80bb20:	9447883a 	add	r3,r18,r17
  80bb24:	d8c00415 	stw	r3,16(sp)
  80bb28:	81400117 	ldw	r5,4(r16)
  80bb2c:	10c0010e 	bge	r2,r3,80bb34 <__multiply+0x68>
  80bb30:	29400044 	addi	r5,r5,1
  80bb34:	080b5bc0 	call	80b5bc <_Balloc>
  80bb38:	d8800515 	stw	r2,20(sp)
  80bb3c:	d9000417 	ldw	r4,16(sp)
  80bb40:	d8c00517 	ldw	r3,20(sp)
  80bb44:	2105883a 	add	r2,r4,r4
  80bb48:	1085883a 	add	r2,r2,r2
  80bb4c:	19000504 	addi	r4,r3,20
  80bb50:	2085883a 	add	r2,r4,r2
  80bb54:	d8800315 	stw	r2,12(sp)
  80bb58:	2080052e 	bgeu	r4,r2,80bb70 <__multiply+0xa4>
  80bb5c:	2005883a 	mov	r2,r4
  80bb60:	d8c00317 	ldw	r3,12(sp)
  80bb64:	10000015 	stw	zero,0(r2)
  80bb68:	10800104 	addi	r2,r2,4
  80bb6c:	10fffc36 	bltu	r2,r3,80bb60 <__multiply+0x94>
  80bb70:	8c45883a 	add	r2,r17,r17
  80bb74:	9487883a 	add	r3,r18,r18
  80bb78:	9dc00504 	addi	r23,r19,20
  80bb7c:	1085883a 	add	r2,r2,r2
  80bb80:	84000504 	addi	r16,r16,20
  80bb84:	18c7883a 	add	r3,r3,r3
  80bb88:	b885883a 	add	r2,r23,r2
  80bb8c:	dc000015 	stw	r16,0(sp)
  80bb90:	d8800215 	stw	r2,8(sp)
  80bb94:	80f9883a 	add	fp,r16,r3
  80bb98:	b880432e 	bgeu	r23,r2,80bca8 <__multiply+0x1dc>
  80bb9c:	d9000115 	stw	r4,4(sp)
  80bba0:	b9000017 	ldw	r4,0(r23)
  80bba4:	253fffcc 	andi	r20,r4,65535
  80bba8:	a0001a26 	beq	r20,zero,80bc14 <__multiply+0x148>
  80bbac:	dcc00017 	ldw	r19,0(sp)
  80bbb0:	dc800117 	ldw	r18,4(sp)
  80bbb4:	002b883a 	mov	r21,zero
  80bbb8:	9c400017 	ldw	r17,0(r19)
  80bbbc:	94000017 	ldw	r16,0(r18)
  80bbc0:	a009883a 	mov	r4,r20
  80bbc4:	897fffcc 	andi	r5,r17,65535
  80bbc8:	0801fec0 	call	801fec <__mulsi3>
  80bbcc:	880ad43a 	srli	r5,r17,16
  80bbd0:	80ffffcc 	andi	r3,r16,65535
  80bbd4:	a8c7883a 	add	r3,r21,r3
  80bbd8:	a009883a 	mov	r4,r20
  80bbdc:	10e3883a 	add	r17,r2,r3
  80bbe0:	8020d43a 	srli	r16,r16,16
  80bbe4:	0801fec0 	call	801fec <__mulsi3>
  80bbe8:	8806d43a 	srli	r3,r17,16
  80bbec:	1405883a 	add	r2,r2,r16
  80bbf0:	9cc00104 	addi	r19,r19,4
  80bbf4:	1887883a 	add	r3,r3,r2
  80bbf8:	90c0008d 	sth	r3,2(r18)
  80bbfc:	9440000d 	sth	r17,0(r18)
  80bc00:	182ad43a 	srli	r21,r3,16
  80bc04:	94800104 	addi	r18,r18,4
  80bc08:	9f3feb36 	bltu	r19,fp,80bbb8 <__multiply+0xec>
  80bc0c:	95400015 	stw	r21,0(r18)
  80bc10:	b9000017 	ldw	r4,0(r23)
  80bc14:	202ad43a 	srli	r21,r4,16
  80bc18:	a8001c26 	beq	r21,zero,80bc8c <__multiply+0x1c0>
  80bc1c:	d9000117 	ldw	r4,4(sp)
  80bc20:	dd000017 	ldw	r20,0(sp)
  80bc24:	002d883a 	mov	r22,zero
  80bc28:	24c00017 	ldw	r19,0(r4)
  80bc2c:	2025883a 	mov	r18,r4
  80bc30:	9823883a 	mov	r17,r19
  80bc34:	a4000017 	ldw	r16,0(r20)
  80bc38:	a809883a 	mov	r4,r21
  80bc3c:	a5000104 	addi	r20,r20,4
  80bc40:	817fffcc 	andi	r5,r16,65535
  80bc44:	0801fec0 	call	801fec <__mulsi3>
  80bc48:	8806d43a 	srli	r3,r17,16
  80bc4c:	800ad43a 	srli	r5,r16,16
  80bc50:	94c0000d 	sth	r19,0(r18)
  80bc54:	b0c7883a 	add	r3,r22,r3
  80bc58:	10e1883a 	add	r16,r2,r3
  80bc5c:	9400008d 	sth	r16,2(r18)
  80bc60:	a809883a 	mov	r4,r21
  80bc64:	94800104 	addi	r18,r18,4
  80bc68:	0801fec0 	call	801fec <__mulsi3>
  80bc6c:	94400017 	ldw	r17,0(r18)
  80bc70:	8020d43a 	srli	r16,r16,16
  80bc74:	88ffffcc 	andi	r3,r17,65535
  80bc78:	10c5883a 	add	r2,r2,r3
  80bc7c:	80a7883a 	add	r19,r16,r2
  80bc80:	982cd43a 	srli	r22,r19,16
  80bc84:	a73feb36 	bltu	r20,fp,80bc34 <__multiply+0x168>
  80bc88:	94c00015 	stw	r19,0(r18)
  80bc8c:	d8800217 	ldw	r2,8(sp)
  80bc90:	bdc00104 	addi	r23,r23,4
  80bc94:	b880042e 	bgeu	r23,r2,80bca8 <__multiply+0x1dc>
  80bc98:	d8c00117 	ldw	r3,4(sp)
  80bc9c:	18c00104 	addi	r3,r3,4
  80bca0:	d8c00115 	stw	r3,4(sp)
  80bca4:	003fbe06 	br	80bba0 <__multiply+0xd4>
  80bca8:	d9000417 	ldw	r4,16(sp)
  80bcac:	01000c0e 	bge	zero,r4,80bce0 <__multiply+0x214>
  80bcb0:	d8c00317 	ldw	r3,12(sp)
  80bcb4:	18bfff17 	ldw	r2,-4(r3)
  80bcb8:	18ffff04 	addi	r3,r3,-4
  80bcbc:	10000326 	beq	r2,zero,80bccc <__multiply+0x200>
  80bcc0:	00000706 	br	80bce0 <__multiply+0x214>
  80bcc4:	18800017 	ldw	r2,0(r3)
  80bcc8:	1000051e 	bne	r2,zero,80bce0 <__multiply+0x214>
  80bccc:	d9000417 	ldw	r4,16(sp)
  80bcd0:	18ffff04 	addi	r3,r3,-4
  80bcd4:	213fffc4 	addi	r4,r4,-1
  80bcd8:	d9000415 	stw	r4,16(sp)
  80bcdc:	203ff91e 	bne	r4,zero,80bcc4 <__multiply+0x1f8>
  80bce0:	d8800417 	ldw	r2,16(sp)
  80bce4:	d8c00517 	ldw	r3,20(sp)
  80bce8:	18800415 	stw	r2,16(r3)
  80bcec:	1805883a 	mov	r2,r3
  80bcf0:	dfc00f17 	ldw	ra,60(sp)
  80bcf4:	df000e17 	ldw	fp,56(sp)
  80bcf8:	ddc00d17 	ldw	r23,52(sp)
  80bcfc:	dd800c17 	ldw	r22,48(sp)
  80bd00:	dd400b17 	ldw	r21,44(sp)
  80bd04:	dd000a17 	ldw	r20,40(sp)
  80bd08:	dcc00917 	ldw	r19,36(sp)
  80bd0c:	dc800817 	ldw	r18,32(sp)
  80bd10:	dc400717 	ldw	r17,28(sp)
  80bd14:	dc000617 	ldw	r16,24(sp)
  80bd18:	dec01004 	addi	sp,sp,64
  80bd1c:	f800283a 	ret

0080bd20 <__i2b>:
  80bd20:	defffd04 	addi	sp,sp,-12
  80bd24:	dc000015 	stw	r16,0(sp)
  80bd28:	04000044 	movi	r16,1
  80bd2c:	dc800115 	stw	r18,4(sp)
  80bd30:	2825883a 	mov	r18,r5
  80bd34:	800b883a 	mov	r5,r16
  80bd38:	dfc00215 	stw	ra,8(sp)
  80bd3c:	080b5bc0 	call	80b5bc <_Balloc>
  80bd40:	14000415 	stw	r16,16(r2)
  80bd44:	14800515 	stw	r18,20(r2)
  80bd48:	dfc00217 	ldw	ra,8(sp)
  80bd4c:	dc800117 	ldw	r18,4(sp)
  80bd50:	dc000017 	ldw	r16,0(sp)
  80bd54:	dec00304 	addi	sp,sp,12
  80bd58:	f800283a 	ret

0080bd5c <__multadd>:
  80bd5c:	defff604 	addi	sp,sp,-40
  80bd60:	dd800615 	stw	r22,24(sp)
  80bd64:	2d800417 	ldw	r22,16(r5)
  80bd68:	df000815 	stw	fp,32(sp)
  80bd6c:	ddc00715 	stw	r23,28(sp)
  80bd70:	dd400515 	stw	r21,20(sp)
  80bd74:	dd000415 	stw	r20,16(sp)
  80bd78:	dcc00315 	stw	r19,12(sp)
  80bd7c:	dc800215 	stw	r18,8(sp)
  80bd80:	dfc00915 	stw	ra,36(sp)
  80bd84:	dc400115 	stw	r17,4(sp)
  80bd88:	dc000015 	stw	r16,0(sp)
  80bd8c:	282f883a 	mov	r23,r5
  80bd90:	2039883a 	mov	fp,r4
  80bd94:	302b883a 	mov	r21,r6
  80bd98:	3829883a 	mov	r20,r7
  80bd9c:	2c800504 	addi	r18,r5,20
  80bda0:	0027883a 	mov	r19,zero
  80bda4:	94400017 	ldw	r17,0(r18)
  80bda8:	a80b883a 	mov	r5,r21
  80bdac:	9cc00044 	addi	r19,r19,1
  80bdb0:	893fffcc 	andi	r4,r17,65535
  80bdb4:	0801fec0 	call	801fec <__mulsi3>
  80bdb8:	8808d43a 	srli	r4,r17,16
  80bdbc:	1521883a 	add	r16,r2,r20
  80bdc0:	a80b883a 	mov	r5,r21
  80bdc4:	0801fec0 	call	801fec <__mulsi3>
  80bdc8:	8008d43a 	srli	r4,r16,16
  80bdcc:	843fffcc 	andi	r16,r16,65535
  80bdd0:	1105883a 	add	r2,r2,r4
  80bdd4:	1006943a 	slli	r3,r2,16
  80bdd8:	1028d43a 	srli	r20,r2,16
  80bddc:	1c07883a 	add	r3,r3,r16
  80bde0:	90c00015 	stw	r3,0(r18)
  80bde4:	94800104 	addi	r18,r18,4
  80bde8:	9dbfee16 	blt	r19,r22,80bda4 <__multadd+0x48>
  80bdec:	a0000826 	beq	r20,zero,80be10 <__multadd+0xb4>
  80bdf0:	b8800217 	ldw	r2,8(r23)
  80bdf4:	b080130e 	bge	r22,r2,80be44 <__multadd+0xe8>
  80bdf8:	b585883a 	add	r2,r22,r22
  80bdfc:	1085883a 	add	r2,r2,r2
  80be00:	15c5883a 	add	r2,r2,r23
  80be04:	b0c00044 	addi	r3,r22,1
  80be08:	15000515 	stw	r20,20(r2)
  80be0c:	b8c00415 	stw	r3,16(r23)
  80be10:	b805883a 	mov	r2,r23
  80be14:	dfc00917 	ldw	ra,36(sp)
  80be18:	df000817 	ldw	fp,32(sp)
  80be1c:	ddc00717 	ldw	r23,28(sp)
  80be20:	dd800617 	ldw	r22,24(sp)
  80be24:	dd400517 	ldw	r21,20(sp)
  80be28:	dd000417 	ldw	r20,16(sp)
  80be2c:	dcc00317 	ldw	r19,12(sp)
  80be30:	dc800217 	ldw	r18,8(sp)
  80be34:	dc400117 	ldw	r17,4(sp)
  80be38:	dc000017 	ldw	r16,0(sp)
  80be3c:	dec00a04 	addi	sp,sp,40
  80be40:	f800283a 	ret
  80be44:	b9400117 	ldw	r5,4(r23)
  80be48:	e009883a 	mov	r4,fp
  80be4c:	29400044 	addi	r5,r5,1
  80be50:	080b5bc0 	call	80b5bc <_Balloc>
  80be54:	b9800417 	ldw	r6,16(r23)
  80be58:	b9400304 	addi	r5,r23,12
  80be5c:	11000304 	addi	r4,r2,12
  80be60:	318d883a 	add	r6,r6,r6
  80be64:	318d883a 	add	r6,r6,r6
  80be68:	31800204 	addi	r6,r6,8
  80be6c:	1023883a 	mov	r17,r2
  80be70:	08048c40 	call	8048c4 <memcpy>
  80be74:	b80b883a 	mov	r5,r23
  80be78:	e009883a 	mov	r4,fp
  80be7c:	080b03c0 	call	80b03c <_Bfree>
  80be80:	882f883a 	mov	r23,r17
  80be84:	003fdc06 	br	80bdf8 <__multadd+0x9c>

0080be88 <__pow5mult>:
  80be88:	defffa04 	addi	sp,sp,-24
  80be8c:	308000cc 	andi	r2,r6,3
  80be90:	dd000415 	stw	r20,16(sp)
  80be94:	dcc00315 	stw	r19,12(sp)
  80be98:	dc000015 	stw	r16,0(sp)
  80be9c:	dfc00515 	stw	ra,20(sp)
  80bea0:	dc800215 	stw	r18,8(sp)
  80bea4:	dc400115 	stw	r17,4(sp)
  80bea8:	3021883a 	mov	r16,r6
  80beac:	2027883a 	mov	r19,r4
  80beb0:	2829883a 	mov	r20,r5
  80beb4:	10002b1e 	bne	r2,zero,80bf64 <__pow5mult+0xdc>
  80beb8:	8025d0ba 	srai	r18,r16,2
  80bebc:	90001b26 	beq	r18,zero,80bf2c <__pow5mult+0xa4>
  80bec0:	9c001217 	ldw	r16,72(r19)
  80bec4:	8000081e 	bne	r16,zero,80bee8 <__pow5mult+0x60>
  80bec8:	00003006 	br	80bf8c <__pow5mult+0x104>
  80becc:	800b883a 	mov	r5,r16
  80bed0:	800d883a 	mov	r6,r16
  80bed4:	9809883a 	mov	r4,r19
  80bed8:	90001426 	beq	r18,zero,80bf2c <__pow5mult+0xa4>
  80bedc:	80800017 	ldw	r2,0(r16)
  80bee0:	10001b26 	beq	r2,zero,80bf50 <__pow5mult+0xc8>
  80bee4:	1021883a 	mov	r16,r2
  80bee8:	9080004c 	andi	r2,r18,1
  80beec:	1005003a 	cmpeq	r2,r2,zero
  80bef0:	9025d07a 	srai	r18,r18,1
  80bef4:	800d883a 	mov	r6,r16
  80bef8:	9809883a 	mov	r4,r19
  80befc:	a00b883a 	mov	r5,r20
  80bf00:	103ff21e 	bne	r2,zero,80becc <__pow5mult+0x44>
  80bf04:	080bacc0 	call	80bacc <__multiply>
  80bf08:	a00b883a 	mov	r5,r20
  80bf0c:	9809883a 	mov	r4,r19
  80bf10:	1023883a 	mov	r17,r2
  80bf14:	080b03c0 	call	80b03c <_Bfree>
  80bf18:	8829883a 	mov	r20,r17
  80bf1c:	800b883a 	mov	r5,r16
  80bf20:	800d883a 	mov	r6,r16
  80bf24:	9809883a 	mov	r4,r19
  80bf28:	903fec1e 	bne	r18,zero,80bedc <__pow5mult+0x54>
  80bf2c:	a005883a 	mov	r2,r20
  80bf30:	dfc00517 	ldw	ra,20(sp)
  80bf34:	dd000417 	ldw	r20,16(sp)
  80bf38:	dcc00317 	ldw	r19,12(sp)
  80bf3c:	dc800217 	ldw	r18,8(sp)
  80bf40:	dc400117 	ldw	r17,4(sp)
  80bf44:	dc000017 	ldw	r16,0(sp)
  80bf48:	dec00604 	addi	sp,sp,24
  80bf4c:	f800283a 	ret
  80bf50:	080bacc0 	call	80bacc <__multiply>
  80bf54:	80800015 	stw	r2,0(r16)
  80bf58:	1021883a 	mov	r16,r2
  80bf5c:	10000015 	stw	zero,0(r2)
  80bf60:	003fe106 	br	80bee8 <__pow5mult+0x60>
  80bf64:	1085883a 	add	r2,r2,r2
  80bf68:	00c02074 	movhi	r3,129
  80bf6c:	18d46504 	addi	r3,r3,20884
  80bf70:	1085883a 	add	r2,r2,r2
  80bf74:	10c5883a 	add	r2,r2,r3
  80bf78:	11bfff17 	ldw	r6,-4(r2)
  80bf7c:	000f883a 	mov	r7,zero
  80bf80:	080bd5c0 	call	80bd5c <__multadd>
  80bf84:	1029883a 	mov	r20,r2
  80bf88:	003fcb06 	br	80beb8 <__pow5mult+0x30>
  80bf8c:	9809883a 	mov	r4,r19
  80bf90:	01409c44 	movi	r5,625
  80bf94:	080bd200 	call	80bd20 <__i2b>
  80bf98:	98801215 	stw	r2,72(r19)
  80bf9c:	1021883a 	mov	r16,r2
  80bfa0:	10000015 	stw	zero,0(r2)
  80bfa4:	003fd006 	br	80bee8 <__pow5mult+0x60>

0080bfa8 <__s2b>:
  80bfa8:	defff904 	addi	sp,sp,-28
  80bfac:	dcc00315 	stw	r19,12(sp)
  80bfb0:	dc800215 	stw	r18,8(sp)
  80bfb4:	2827883a 	mov	r19,r5
  80bfb8:	2025883a 	mov	r18,r4
  80bfbc:	01400244 	movi	r5,9
  80bfc0:	39000204 	addi	r4,r7,8
  80bfc4:	dd000415 	stw	r20,16(sp)
  80bfc8:	dc400115 	stw	r17,4(sp)
  80bfcc:	dfc00615 	stw	ra,24(sp)
  80bfd0:	dd400515 	stw	r21,20(sp)
  80bfd4:	dc000015 	stw	r16,0(sp)
  80bfd8:	3829883a 	mov	r20,r7
  80bfdc:	3023883a 	mov	r17,r6
  80bfe0:	08116b00 	call	8116b0 <__divsi3>
  80bfe4:	00c00044 	movi	r3,1
  80bfe8:	1880350e 	bge	r3,r2,80c0c0 <__s2b+0x118>
  80bfec:	000b883a 	mov	r5,zero
  80bff0:	18c7883a 	add	r3,r3,r3
  80bff4:	29400044 	addi	r5,r5,1
  80bff8:	18bffd16 	blt	r3,r2,80bff0 <__s2b+0x48>
  80bffc:	9009883a 	mov	r4,r18
  80c000:	080b5bc0 	call	80b5bc <_Balloc>
  80c004:	1011883a 	mov	r8,r2
  80c008:	d8800717 	ldw	r2,28(sp)
  80c00c:	00c00044 	movi	r3,1
  80c010:	01800244 	movi	r6,9
  80c014:	40800515 	stw	r2,20(r8)
  80c018:	40c00415 	stw	r3,16(r8)
  80c01c:	3440260e 	bge	r6,r17,80c0b8 <__s2b+0x110>
  80c020:	3021883a 	mov	r16,r6
  80c024:	99ab883a 	add	r21,r19,r6
  80c028:	9c05883a 	add	r2,r19,r16
  80c02c:	11c00007 	ldb	r7,0(r2)
  80c030:	400b883a 	mov	r5,r8
  80c034:	9009883a 	mov	r4,r18
  80c038:	39fff404 	addi	r7,r7,-48
  80c03c:	01800284 	movi	r6,10
  80c040:	080bd5c0 	call	80bd5c <__multadd>
  80c044:	84000044 	addi	r16,r16,1
  80c048:	1011883a 	mov	r8,r2
  80c04c:	8c3ff61e 	bne	r17,r16,80c028 <__s2b+0x80>
  80c050:	ac45883a 	add	r2,r21,r17
  80c054:	117ffe04 	addi	r5,r2,-8
  80c058:	880d883a 	mov	r6,r17
  80c05c:	35000c0e 	bge	r6,r20,80c090 <__s2b+0xe8>
  80c060:	a185c83a 	sub	r2,r20,r6
  80c064:	2821883a 	mov	r16,r5
  80c068:	28a3883a 	add	r17,r5,r2
  80c06c:	81c00007 	ldb	r7,0(r16)
  80c070:	400b883a 	mov	r5,r8
  80c074:	9009883a 	mov	r4,r18
  80c078:	39fff404 	addi	r7,r7,-48
  80c07c:	01800284 	movi	r6,10
  80c080:	080bd5c0 	call	80bd5c <__multadd>
  80c084:	84000044 	addi	r16,r16,1
  80c088:	1011883a 	mov	r8,r2
  80c08c:	847ff71e 	bne	r16,r17,80c06c <__s2b+0xc4>
  80c090:	4005883a 	mov	r2,r8
  80c094:	dfc00617 	ldw	ra,24(sp)
  80c098:	dd400517 	ldw	r21,20(sp)
  80c09c:	dd000417 	ldw	r20,16(sp)
  80c0a0:	dcc00317 	ldw	r19,12(sp)
  80c0a4:	dc800217 	ldw	r18,8(sp)
  80c0a8:	dc400117 	ldw	r17,4(sp)
  80c0ac:	dc000017 	ldw	r16,0(sp)
  80c0b0:	dec00704 	addi	sp,sp,28
  80c0b4:	f800283a 	ret
  80c0b8:	99400284 	addi	r5,r19,10
  80c0bc:	003fe706 	br	80c05c <__s2b+0xb4>
  80c0c0:	000b883a 	mov	r5,zero
  80c0c4:	003fcd06 	br	80bffc <__s2b+0x54>

0080c0c8 <_read_r>:
  80c0c8:	defffd04 	addi	sp,sp,-12
  80c0cc:	dc000015 	stw	r16,0(sp)
  80c0d0:	040020b4 	movhi	r16,130
  80c0d4:	84221904 	addi	r16,r16,-30620
  80c0d8:	dc400115 	stw	r17,4(sp)
  80c0dc:	80000015 	stw	zero,0(r16)
  80c0e0:	2023883a 	mov	r17,r4
  80c0e4:	2809883a 	mov	r4,r5
  80c0e8:	300b883a 	mov	r5,r6
  80c0ec:	380d883a 	mov	r6,r7
  80c0f0:	dfc00215 	stw	ra,8(sp)
  80c0f4:	081254c0 	call	81254c <read>
  80c0f8:	1007883a 	mov	r3,r2
  80c0fc:	00bfffc4 	movi	r2,-1
  80c100:	18800626 	beq	r3,r2,80c11c <_read_r+0x54>
  80c104:	1805883a 	mov	r2,r3
  80c108:	dfc00217 	ldw	ra,8(sp)
  80c10c:	dc400117 	ldw	r17,4(sp)
  80c110:	dc000017 	ldw	r16,0(sp)
  80c114:	dec00304 	addi	sp,sp,12
  80c118:	f800283a 	ret
  80c11c:	80800017 	ldw	r2,0(r16)
  80c120:	103ff826 	beq	r2,zero,80c104 <_read_r+0x3c>
  80c124:	88800015 	stw	r2,0(r17)
  80c128:	1805883a 	mov	r2,r3
  80c12c:	dfc00217 	ldw	ra,8(sp)
  80c130:	dc400117 	ldw	r17,4(sp)
  80c134:	dc000017 	ldw	r16,0(sp)
  80c138:	dec00304 	addi	sp,sp,12
  80c13c:	f800283a 	ret

0080c140 <_realloc_r>:
  80c140:	defff404 	addi	sp,sp,-48
  80c144:	dd800815 	stw	r22,32(sp)
  80c148:	dc800415 	stw	r18,16(sp)
  80c14c:	dc400315 	stw	r17,12(sp)
  80c150:	dfc00b15 	stw	ra,44(sp)
  80c154:	df000a15 	stw	fp,40(sp)
  80c158:	ddc00915 	stw	r23,36(sp)
  80c15c:	dd400715 	stw	r21,28(sp)
  80c160:	dd000615 	stw	r20,24(sp)
  80c164:	dcc00515 	stw	r19,20(sp)
  80c168:	dc000215 	stw	r16,8(sp)
  80c16c:	2825883a 	mov	r18,r5
  80c170:	3023883a 	mov	r17,r6
  80c174:	202d883a 	mov	r22,r4
  80c178:	2800c926 	beq	r5,zero,80c4a0 <_realloc_r+0x360>
  80c17c:	08122280 	call	812228 <__malloc_lock>
  80c180:	943ffe04 	addi	r16,r18,-8
  80c184:	88c002c4 	addi	r3,r17,11
  80c188:	00800584 	movi	r2,22
  80c18c:	82000117 	ldw	r8,4(r16)
  80c190:	10c01b2e 	bgeu	r2,r3,80c200 <_realloc_r+0xc0>
  80c194:	00bffe04 	movi	r2,-8
  80c198:	188e703a 	and	r7,r3,r2
  80c19c:	3839883a 	mov	fp,r7
  80c1a0:	38001a16 	blt	r7,zero,80c20c <_realloc_r+0xcc>
  80c1a4:	e4401936 	bltu	fp,r17,80c20c <_realloc_r+0xcc>
  80c1a8:	013fff04 	movi	r4,-4
  80c1ac:	4126703a 	and	r19,r8,r4
  80c1b0:	99c02616 	blt	r19,r7,80c24c <_realloc_r+0x10c>
  80c1b4:	802b883a 	mov	r21,r16
  80c1b8:	9829883a 	mov	r20,r19
  80c1bc:	84000204 	addi	r16,r16,8
  80c1c0:	a80f883a 	mov	r7,r21
  80c1c4:	a70dc83a 	sub	r6,r20,fp
  80c1c8:	008003c4 	movi	r2,15
  80c1cc:	1180c136 	bltu	r2,r6,80c4d4 <_realloc_r+0x394>
  80c1d0:	38800117 	ldw	r2,4(r7)
  80c1d4:	a549883a 	add	r4,r20,r21
  80c1d8:	1080004c 	andi	r2,r2,1
  80c1dc:	a084b03a 	or	r2,r20,r2
  80c1e0:	38800115 	stw	r2,4(r7)
  80c1e4:	20c00117 	ldw	r3,4(r4)
  80c1e8:	18c00054 	ori	r3,r3,1
  80c1ec:	20c00115 	stw	r3,4(r4)
  80c1f0:	b009883a 	mov	r4,r22
  80c1f4:	08122480 	call	812248 <__malloc_unlock>
  80c1f8:	8023883a 	mov	r17,r16
  80c1fc:	00000606 	br	80c218 <_realloc_r+0xd8>
  80c200:	01c00404 	movi	r7,16
  80c204:	3839883a 	mov	fp,r7
  80c208:	e47fe72e 	bgeu	fp,r17,80c1a8 <_realloc_r+0x68>
  80c20c:	00800304 	movi	r2,12
  80c210:	0023883a 	mov	r17,zero
  80c214:	b0800015 	stw	r2,0(r22)
  80c218:	8805883a 	mov	r2,r17
  80c21c:	dfc00b17 	ldw	ra,44(sp)
  80c220:	df000a17 	ldw	fp,40(sp)
  80c224:	ddc00917 	ldw	r23,36(sp)
  80c228:	dd800817 	ldw	r22,32(sp)
  80c22c:	dd400717 	ldw	r21,28(sp)
  80c230:	dd000617 	ldw	r20,24(sp)
  80c234:	dcc00517 	ldw	r19,20(sp)
  80c238:	dc800417 	ldw	r18,16(sp)
  80c23c:	dc400317 	ldw	r17,12(sp)
  80c240:	dc000217 	ldw	r16,8(sp)
  80c244:	dec00c04 	addi	sp,sp,48
  80c248:	f800283a 	ret
  80c24c:	00802074 	movhi	r2,129
  80c250:	10959404 	addi	r2,r2,22096
  80c254:	12400217 	ldw	r9,8(r2)
  80c258:	84cd883a 	add	r6,r16,r19
  80c25c:	802b883a 	mov	r21,r16
  80c260:	3240b926 	beq	r6,r9,80c548 <_realloc_r+0x408>
  80c264:	31400117 	ldw	r5,4(r6)
  80c268:	00bfff84 	movi	r2,-2
  80c26c:	2884703a 	and	r2,r5,r2
  80c270:	1185883a 	add	r2,r2,r6
  80c274:	10c00117 	ldw	r3,4(r2)
  80c278:	18c0004c 	andi	r3,r3,1
  80c27c:	1807003a 	cmpeq	r3,r3,zero
  80c280:	1800a326 	beq	r3,zero,80c510 <_realloc_r+0x3d0>
  80c284:	2908703a 	and	r4,r5,r4
  80c288:	9929883a 	add	r20,r19,r4
  80c28c:	a1c0a30e 	bge	r20,r7,80c51c <_realloc_r+0x3dc>
  80c290:	4080004c 	andi	r2,r8,1
  80c294:	1000551e 	bne	r2,zero,80c3ec <_realloc_r+0x2ac>
  80c298:	80800017 	ldw	r2,0(r16)
  80c29c:	80afc83a 	sub	r23,r16,r2
  80c2a0:	b8c00117 	ldw	r3,4(r23)
  80c2a4:	00bfff04 	movi	r2,-4
  80c2a8:	1884703a 	and	r2,r3,r2
  80c2ac:	30002e26 	beq	r6,zero,80c368 <_realloc_r+0x228>
  80c2b0:	3240b926 	beq	r6,r9,80c598 <_realloc_r+0x458>
  80c2b4:	98a9883a 	add	r20,r19,r2
  80c2b8:	2509883a 	add	r4,r4,r20
  80c2bc:	d9000015 	stw	r4,0(sp)
  80c2c0:	21c02a16 	blt	r4,r7,80c36c <_realloc_r+0x22c>
  80c2c4:	30800317 	ldw	r2,12(r6)
  80c2c8:	30c00217 	ldw	r3,8(r6)
  80c2cc:	01400904 	movi	r5,36
  80c2d0:	99bfff04 	addi	r6,r19,-4
  80c2d4:	18800315 	stw	r2,12(r3)
  80c2d8:	10c00215 	stw	r3,8(r2)
  80c2dc:	b9000317 	ldw	r4,12(r23)
  80c2e0:	b8800217 	ldw	r2,8(r23)
  80c2e4:	b82b883a 	mov	r21,r23
  80c2e8:	bc000204 	addi	r16,r23,8
  80c2ec:	20800215 	stw	r2,8(r4)
  80c2f0:	11000315 	stw	r4,12(r2)
  80c2f4:	2980e436 	bltu	r5,r6,80c688 <_realloc_r+0x548>
  80c2f8:	008004c4 	movi	r2,19
  80c2fc:	9009883a 	mov	r4,r18
  80c300:	8011883a 	mov	r8,r16
  80c304:	11800f2e 	bgeu	r2,r6,80c344 <_realloc_r+0x204>
  80c308:	90800017 	ldw	r2,0(r18)
  80c30c:	ba000404 	addi	r8,r23,16
  80c310:	91000204 	addi	r4,r18,8
  80c314:	b8800215 	stw	r2,8(r23)
  80c318:	90c00117 	ldw	r3,4(r18)
  80c31c:	008006c4 	movi	r2,27
  80c320:	b8c00315 	stw	r3,12(r23)
  80c324:	1180072e 	bgeu	r2,r6,80c344 <_realloc_r+0x204>
  80c328:	90c00217 	ldw	r3,8(r18)
  80c32c:	ba000604 	addi	r8,r23,24
  80c330:	91000404 	addi	r4,r18,16
  80c334:	b8c00415 	stw	r3,16(r23)
  80c338:	90800317 	ldw	r2,12(r18)
  80c33c:	b8800515 	stw	r2,20(r23)
  80c340:	3140e726 	beq	r6,r5,80c6e0 <_realloc_r+0x5a0>
  80c344:	20800017 	ldw	r2,0(r4)
  80c348:	dd000017 	ldw	r20,0(sp)
  80c34c:	b80f883a 	mov	r7,r23
  80c350:	40800015 	stw	r2,0(r8)
  80c354:	20c00117 	ldw	r3,4(r4)
  80c358:	40c00115 	stw	r3,4(r8)
  80c35c:	20800217 	ldw	r2,8(r4)
  80c360:	40800215 	stw	r2,8(r8)
  80c364:	003f9706 	br	80c1c4 <_realloc_r+0x84>
  80c368:	98a9883a 	add	r20,r19,r2
  80c36c:	a1c01f16 	blt	r20,r7,80c3ec <_realloc_r+0x2ac>
  80c370:	b8c00317 	ldw	r3,12(r23)
  80c374:	b8800217 	ldw	r2,8(r23)
  80c378:	99bfff04 	addi	r6,r19,-4
  80c37c:	01400904 	movi	r5,36
  80c380:	b82b883a 	mov	r21,r23
  80c384:	18800215 	stw	r2,8(r3)
  80c388:	10c00315 	stw	r3,12(r2)
  80c38c:	bc000204 	addi	r16,r23,8
  80c390:	2980c336 	bltu	r5,r6,80c6a0 <_realloc_r+0x560>
  80c394:	008004c4 	movi	r2,19
  80c398:	9009883a 	mov	r4,r18
  80c39c:	8011883a 	mov	r8,r16
  80c3a0:	11800f2e 	bgeu	r2,r6,80c3e0 <_realloc_r+0x2a0>
  80c3a4:	90800017 	ldw	r2,0(r18)
  80c3a8:	ba000404 	addi	r8,r23,16
  80c3ac:	91000204 	addi	r4,r18,8
  80c3b0:	b8800215 	stw	r2,8(r23)
  80c3b4:	90c00117 	ldw	r3,4(r18)
  80c3b8:	008006c4 	movi	r2,27
  80c3bc:	b8c00315 	stw	r3,12(r23)
  80c3c0:	1180072e 	bgeu	r2,r6,80c3e0 <_realloc_r+0x2a0>
  80c3c4:	90c00217 	ldw	r3,8(r18)
  80c3c8:	ba000604 	addi	r8,r23,24
  80c3cc:	91000404 	addi	r4,r18,16
  80c3d0:	b8c00415 	stw	r3,16(r23)
  80c3d4:	90800317 	ldw	r2,12(r18)
  80c3d8:	b8800515 	stw	r2,20(r23)
  80c3dc:	3140c726 	beq	r6,r5,80c6fc <_realloc_r+0x5bc>
  80c3e0:	20800017 	ldw	r2,0(r4)
  80c3e4:	b80f883a 	mov	r7,r23
  80c3e8:	003fd906 	br	80c350 <_realloc_r+0x210>
  80c3ec:	880b883a 	mov	r5,r17
  80c3f0:	b009883a 	mov	r4,r22
  80c3f4:	08040a00 	call	8040a0 <_malloc_r>
  80c3f8:	1023883a 	mov	r17,r2
  80c3fc:	10002526 	beq	r2,zero,80c494 <_realloc_r+0x354>
  80c400:	80800117 	ldw	r2,4(r16)
  80c404:	00ffff84 	movi	r3,-2
  80c408:	893ffe04 	addi	r4,r17,-8
  80c40c:	10c4703a 	and	r2,r2,r3
  80c410:	8085883a 	add	r2,r16,r2
  80c414:	20809526 	beq	r4,r2,80c66c <_realloc_r+0x52c>
  80c418:	99bfff04 	addi	r6,r19,-4
  80c41c:	01c00904 	movi	r7,36
  80c420:	39804536 	bltu	r7,r6,80c538 <_realloc_r+0x3f8>
  80c424:	008004c4 	movi	r2,19
  80c428:	9009883a 	mov	r4,r18
  80c42c:	880b883a 	mov	r5,r17
  80c430:	11800f2e 	bgeu	r2,r6,80c470 <_realloc_r+0x330>
  80c434:	90800017 	ldw	r2,0(r18)
  80c438:	89400204 	addi	r5,r17,8
  80c43c:	91000204 	addi	r4,r18,8
  80c440:	88800015 	stw	r2,0(r17)
  80c444:	90c00117 	ldw	r3,4(r18)
  80c448:	008006c4 	movi	r2,27
  80c44c:	88c00115 	stw	r3,4(r17)
  80c450:	1180072e 	bgeu	r2,r6,80c470 <_realloc_r+0x330>
  80c454:	90c00217 	ldw	r3,8(r18)
  80c458:	89400404 	addi	r5,r17,16
  80c45c:	91000404 	addi	r4,r18,16
  80c460:	88c00215 	stw	r3,8(r17)
  80c464:	90800317 	ldw	r2,12(r18)
  80c468:	88800315 	stw	r2,12(r17)
  80c46c:	31c09126 	beq	r6,r7,80c6b4 <_realloc_r+0x574>
  80c470:	20800017 	ldw	r2,0(r4)
  80c474:	28800015 	stw	r2,0(r5)
  80c478:	20c00117 	ldw	r3,4(r4)
  80c47c:	28c00115 	stw	r3,4(r5)
  80c480:	20800217 	ldw	r2,8(r4)
  80c484:	28800215 	stw	r2,8(r5)
  80c488:	900b883a 	mov	r5,r18
  80c48c:	b009883a 	mov	r4,r22
  80c490:	08034240 	call	803424 <_free_r>
  80c494:	b009883a 	mov	r4,r22
  80c498:	08122480 	call	812248 <__malloc_unlock>
  80c49c:	003f5e06 	br	80c218 <_realloc_r+0xd8>
  80c4a0:	300b883a 	mov	r5,r6
  80c4a4:	dfc00b17 	ldw	ra,44(sp)
  80c4a8:	df000a17 	ldw	fp,40(sp)
  80c4ac:	ddc00917 	ldw	r23,36(sp)
  80c4b0:	dd800817 	ldw	r22,32(sp)
  80c4b4:	dd400717 	ldw	r21,28(sp)
  80c4b8:	dd000617 	ldw	r20,24(sp)
  80c4bc:	dcc00517 	ldw	r19,20(sp)
  80c4c0:	dc800417 	ldw	r18,16(sp)
  80c4c4:	dc400317 	ldw	r17,12(sp)
  80c4c8:	dc000217 	ldw	r16,8(sp)
  80c4cc:	dec00c04 	addi	sp,sp,48
  80c4d0:	08040a01 	jmpi	8040a0 <_malloc_r>
  80c4d4:	38800117 	ldw	r2,4(r7)
  80c4d8:	e54b883a 	add	r5,fp,r21
  80c4dc:	31000054 	ori	r4,r6,1
  80c4e0:	1080004c 	andi	r2,r2,1
  80c4e4:	1704b03a 	or	r2,r2,fp
  80c4e8:	38800115 	stw	r2,4(r7)
  80c4ec:	29000115 	stw	r4,4(r5)
  80c4f0:	2987883a 	add	r3,r5,r6
  80c4f4:	18800117 	ldw	r2,4(r3)
  80c4f8:	29400204 	addi	r5,r5,8
  80c4fc:	b009883a 	mov	r4,r22
  80c500:	10800054 	ori	r2,r2,1
  80c504:	18800115 	stw	r2,4(r3)
  80c508:	08034240 	call	803424 <_free_r>
  80c50c:	003f3806 	br	80c1f0 <_realloc_r+0xb0>
  80c510:	000d883a 	mov	r6,zero
  80c514:	0009883a 	mov	r4,zero
  80c518:	003f5d06 	br	80c290 <_realloc_r+0x150>
  80c51c:	30c00217 	ldw	r3,8(r6)
  80c520:	30800317 	ldw	r2,12(r6)
  80c524:	800f883a 	mov	r7,r16
  80c528:	84000204 	addi	r16,r16,8
  80c52c:	10c00215 	stw	r3,8(r2)
  80c530:	18800315 	stw	r2,12(r3)
  80c534:	003f2306 	br	80c1c4 <_realloc_r+0x84>
  80c538:	8809883a 	mov	r4,r17
  80c53c:	900b883a 	mov	r5,r18
  80c540:	080af5c0 	call	80af5c <memmove>
  80c544:	003fd006 	br	80c488 <_realloc_r+0x348>
  80c548:	30800117 	ldw	r2,4(r6)
  80c54c:	e0c00404 	addi	r3,fp,16
  80c550:	1108703a 	and	r4,r2,r4
  80c554:	9905883a 	add	r2,r19,r4
  80c558:	10ff4d16 	blt	r2,r3,80c290 <_realloc_r+0x150>
  80c55c:	1705c83a 	sub	r2,r2,fp
  80c560:	870b883a 	add	r5,r16,fp
  80c564:	10800054 	ori	r2,r2,1
  80c568:	28800115 	stw	r2,4(r5)
  80c56c:	80c00117 	ldw	r3,4(r16)
  80c570:	00802074 	movhi	r2,129
  80c574:	10959404 	addi	r2,r2,22096
  80c578:	b009883a 	mov	r4,r22
  80c57c:	18c0004c 	andi	r3,r3,1
  80c580:	e0c6b03a 	or	r3,fp,r3
  80c584:	11400215 	stw	r5,8(r2)
  80c588:	80c00115 	stw	r3,4(r16)
  80c58c:	08122480 	call	812248 <__malloc_unlock>
  80c590:	84400204 	addi	r17,r16,8
  80c594:	003f2006 	br	80c218 <_realloc_r+0xd8>
  80c598:	98a9883a 	add	r20,r19,r2
  80c59c:	2509883a 	add	r4,r4,r20
  80c5a0:	e0800404 	addi	r2,fp,16
  80c5a4:	d9000115 	stw	r4,4(sp)
  80c5a8:	20bf7016 	blt	r4,r2,80c36c <_realloc_r+0x22c>
  80c5ac:	b8c00317 	ldw	r3,12(r23)
  80c5b0:	b8800217 	ldw	r2,8(r23)
  80c5b4:	99bfff04 	addi	r6,r19,-4
  80c5b8:	01400904 	movi	r5,36
  80c5bc:	18800215 	stw	r2,8(r3)
  80c5c0:	10c00315 	stw	r3,12(r2)
  80c5c4:	bc400204 	addi	r17,r23,8
  80c5c8:	29804136 	bltu	r5,r6,80c6d0 <_realloc_r+0x590>
  80c5cc:	008004c4 	movi	r2,19
  80c5d0:	9009883a 	mov	r4,r18
  80c5d4:	880f883a 	mov	r7,r17
  80c5d8:	11800f2e 	bgeu	r2,r6,80c618 <_realloc_r+0x4d8>
  80c5dc:	90800017 	ldw	r2,0(r18)
  80c5e0:	b9c00404 	addi	r7,r23,16
  80c5e4:	91000204 	addi	r4,r18,8
  80c5e8:	b8800215 	stw	r2,8(r23)
  80c5ec:	90c00117 	ldw	r3,4(r18)
  80c5f0:	008006c4 	movi	r2,27
  80c5f4:	b8c00315 	stw	r3,12(r23)
  80c5f8:	1180072e 	bgeu	r2,r6,80c618 <_realloc_r+0x4d8>
  80c5fc:	90c00217 	ldw	r3,8(r18)
  80c600:	b9c00604 	addi	r7,r23,24
  80c604:	91000404 	addi	r4,r18,16
  80c608:	b8c00415 	stw	r3,16(r23)
  80c60c:	90800317 	ldw	r2,12(r18)
  80c610:	b8800515 	stw	r2,20(r23)
  80c614:	31404026 	beq	r6,r5,80c718 <_realloc_r+0x5d8>
  80c618:	20800017 	ldw	r2,0(r4)
  80c61c:	38800015 	stw	r2,0(r7)
  80c620:	20c00117 	ldw	r3,4(r4)
  80c624:	38c00115 	stw	r3,4(r7)
  80c628:	20800217 	ldw	r2,8(r4)
  80c62c:	38800215 	stw	r2,8(r7)
  80c630:	d8c00117 	ldw	r3,4(sp)
  80c634:	bf0b883a 	add	r5,r23,fp
  80c638:	b009883a 	mov	r4,r22
  80c63c:	1f05c83a 	sub	r2,r3,fp
  80c640:	10800054 	ori	r2,r2,1
  80c644:	28800115 	stw	r2,4(r5)
  80c648:	b8c00117 	ldw	r3,4(r23)
  80c64c:	00802074 	movhi	r2,129
  80c650:	10959404 	addi	r2,r2,22096
  80c654:	11400215 	stw	r5,8(r2)
  80c658:	18c0004c 	andi	r3,r3,1
  80c65c:	e0c6b03a 	or	r3,fp,r3
  80c660:	b8c00115 	stw	r3,4(r23)
  80c664:	08122480 	call	812248 <__malloc_unlock>
  80c668:	003eeb06 	br	80c218 <_realloc_r+0xd8>
  80c66c:	20800117 	ldw	r2,4(r4)
  80c670:	00ffff04 	movi	r3,-4
  80c674:	800f883a 	mov	r7,r16
  80c678:	10c4703a 	and	r2,r2,r3
  80c67c:	98a9883a 	add	r20,r19,r2
  80c680:	84000204 	addi	r16,r16,8
  80c684:	003ecf06 	br	80c1c4 <_realloc_r+0x84>
  80c688:	900b883a 	mov	r5,r18
  80c68c:	8009883a 	mov	r4,r16
  80c690:	080af5c0 	call	80af5c <memmove>
  80c694:	dd000017 	ldw	r20,0(sp)
  80c698:	b80f883a 	mov	r7,r23
  80c69c:	003ec906 	br	80c1c4 <_realloc_r+0x84>
  80c6a0:	900b883a 	mov	r5,r18
  80c6a4:	8009883a 	mov	r4,r16
  80c6a8:	080af5c0 	call	80af5c <memmove>
  80c6ac:	b80f883a 	mov	r7,r23
  80c6b0:	003ec406 	br	80c1c4 <_realloc_r+0x84>
  80c6b4:	90c00417 	ldw	r3,16(r18)
  80c6b8:	89400604 	addi	r5,r17,24
  80c6bc:	91000604 	addi	r4,r18,24
  80c6c0:	88c00415 	stw	r3,16(r17)
  80c6c4:	90800517 	ldw	r2,20(r18)
  80c6c8:	88800515 	stw	r2,20(r17)
  80c6cc:	003f6806 	br	80c470 <_realloc_r+0x330>
  80c6d0:	900b883a 	mov	r5,r18
  80c6d4:	8809883a 	mov	r4,r17
  80c6d8:	080af5c0 	call	80af5c <memmove>
  80c6dc:	003fd406 	br	80c630 <_realloc_r+0x4f0>
  80c6e0:	90c00417 	ldw	r3,16(r18)
  80c6e4:	91000604 	addi	r4,r18,24
  80c6e8:	ba000804 	addi	r8,r23,32
  80c6ec:	b8c00615 	stw	r3,24(r23)
  80c6f0:	90800517 	ldw	r2,20(r18)
  80c6f4:	b8800715 	stw	r2,28(r23)
  80c6f8:	003f1206 	br	80c344 <_realloc_r+0x204>
  80c6fc:	90c00417 	ldw	r3,16(r18)
  80c700:	91000604 	addi	r4,r18,24
  80c704:	ba000804 	addi	r8,r23,32
  80c708:	b8c00615 	stw	r3,24(r23)
  80c70c:	90800517 	ldw	r2,20(r18)
  80c710:	b8800715 	stw	r2,28(r23)
  80c714:	003f3206 	br	80c3e0 <_realloc_r+0x2a0>
  80c718:	90c00417 	ldw	r3,16(r18)
  80c71c:	91000604 	addi	r4,r18,24
  80c720:	b9c00804 	addi	r7,r23,32
  80c724:	b8c00615 	stw	r3,24(r23)
  80c728:	90800517 	ldw	r2,20(r18)
  80c72c:	b8800715 	stw	r2,28(r23)
  80c730:	003fb906 	br	80c618 <_realloc_r+0x4d8>

0080c734 <__isinfd>:
  80c734:	200d883a 	mov	r6,r4
  80c738:	0109c83a 	sub	r4,zero,r4
  80c73c:	2188b03a 	or	r4,r4,r6
  80c740:	2008d7fa 	srli	r4,r4,31
  80c744:	00a00034 	movhi	r2,32768
  80c748:	10bfffc4 	addi	r2,r2,-1
  80c74c:	1144703a 	and	r2,r2,r5
  80c750:	2088b03a 	or	r4,r4,r2
  80c754:	009ffc34 	movhi	r2,32752
  80c758:	1105c83a 	sub	r2,r2,r4
  80c75c:	0087c83a 	sub	r3,zero,r2
  80c760:	10c4b03a 	or	r2,r2,r3
  80c764:	1004d7fa 	srli	r2,r2,31
  80c768:	00c00044 	movi	r3,1
  80c76c:	1885c83a 	sub	r2,r3,r2
  80c770:	f800283a 	ret

0080c774 <__isnand>:
  80c774:	200d883a 	mov	r6,r4
  80c778:	0109c83a 	sub	r4,zero,r4
  80c77c:	2188b03a 	or	r4,r4,r6
  80c780:	2008d7fa 	srli	r4,r4,31
  80c784:	00a00034 	movhi	r2,32768
  80c788:	10bfffc4 	addi	r2,r2,-1
  80c78c:	1144703a 	and	r2,r2,r5
  80c790:	2088b03a 	or	r4,r4,r2
  80c794:	009ffc34 	movhi	r2,32752
  80c798:	1105c83a 	sub	r2,r2,r4
  80c79c:	1004d7fa 	srli	r2,r2,31
  80c7a0:	f800283a 	ret

0080c7a4 <__sccl>:
  80c7a4:	28c00003 	ldbu	r3,0(r5)
  80c7a8:	00801784 	movi	r2,94
  80c7ac:	2a000044 	addi	r8,r5,1
  80c7b0:	18802526 	beq	r3,r2,80c848 <__sccl+0xa4>
  80c7b4:	180f883a 	mov	r7,r3
  80c7b8:	0013883a 	mov	r9,zero
  80c7bc:	000d883a 	mov	r6,zero
  80c7c0:	0007883a 	mov	r3,zero
  80c7c4:	01404004 	movi	r5,256
  80c7c8:	1905883a 	add	r2,r3,r4
  80c7cc:	18c00044 	addi	r3,r3,1
  80c7d0:	11800005 	stb	r6,0(r2)
  80c7d4:	197ffc1e 	bne	r3,r5,80c7c8 <__sccl+0x24>
  80c7d8:	38000c26 	beq	r7,zero,80c80c <__sccl+0x68>
  80c7dc:	00800044 	movi	r2,1
  80c7e0:	124dc83a 	sub	r6,r2,r9
  80c7e4:	3905883a 	add	r2,r7,r4
  80c7e8:	11800005 	stb	r6,0(r2)
  80c7ec:	41400044 	addi	r5,r8,1
  80c7f0:	02400b44 	movi	r9,45
  80c7f4:	02801744 	movi	r10,93
  80c7f8:	28bfffc3 	ldbu	r2,-1(r5)
  80c7fc:	2811883a 	mov	r8,r5
  80c800:	12400726 	beq	r2,r9,80c820 <__sccl+0x7c>
  80c804:	12800226 	beq	r2,r10,80c810 <__sccl+0x6c>
  80c808:	1000031e 	bne	r2,zero,80c818 <__sccl+0x74>
  80c80c:	423fffc4 	addi	r8,r8,-1
  80c810:	4005883a 	mov	r2,r8
  80c814:	f800283a 	ret
  80c818:	100f883a 	mov	r7,r2
  80c81c:	003ff106 	br	80c7e4 <__sccl+0x40>
  80c820:	28c00003 	ldbu	r3,0(r5)
  80c824:	1a800d26 	beq	r3,r10,80c85c <__sccl+0xb8>
  80c828:	19c00c16 	blt	r3,r7,80c85c <__sccl+0xb8>
  80c82c:	21c5883a 	add	r2,r4,r7
  80c830:	39c00044 	addi	r7,r7,1
  80c834:	11800045 	stb	r6,1(r2)
  80c838:	10800044 	addi	r2,r2,1
  80c83c:	38fffc16 	blt	r7,r3,80c830 <__sccl+0x8c>
  80c840:	29400084 	addi	r5,r5,2
  80c844:	003fec06 	br	80c7f8 <__sccl+0x54>
  80c848:	29c00043 	ldbu	r7,1(r5)
  80c84c:	02400044 	movi	r9,1
  80c850:	2a000084 	addi	r8,r5,2
  80c854:	480d883a 	mov	r6,r9
  80c858:	003fd906 	br	80c7c0 <__sccl+0x1c>
  80c85c:	01c00b44 	movi	r7,45
  80c860:	003fe006 	br	80c7e4 <__sccl+0x40>

0080c864 <nanf>:
  80c864:	009ff034 	movhi	r2,32704
  80c868:	f800283a 	ret

0080c86c <sprintf>:
  80c86c:	deffe504 	addi	sp,sp,-108
  80c870:	2013883a 	mov	r9,r4
  80c874:	dfc01815 	stw	ra,96(sp)
  80c878:	d9801915 	stw	r6,100(sp)
  80c87c:	d9c01a15 	stw	r7,104(sp)
  80c880:	d8801904 	addi	r2,sp,100
  80c884:	d8800015 	stw	r2,0(sp)
  80c888:	00802074 	movhi	r2,129
  80c88c:	109b3004 	addi	r2,r2,27840
  80c890:	11000017 	ldw	r4,0(r2)
  80c894:	d9c00017 	ldw	r7,0(sp)
  80c898:	00808204 	movi	r2,520
  80c89c:	00e00034 	movhi	r3,32768
  80c8a0:	18ffffc4 	addi	r3,r3,-1
  80c8a4:	280d883a 	mov	r6,r5
  80c8a8:	d880040d 	sth	r2,16(sp)
  80c8ac:	d9400104 	addi	r5,sp,4
  80c8b0:	00bfffc4 	movi	r2,-1
  80c8b4:	d8c00615 	stw	r3,24(sp)
  80c8b8:	d8c00315 	stw	r3,12(sp)
  80c8bc:	da400515 	stw	r9,20(sp)
  80c8c0:	d880048d 	sth	r2,18(sp)
  80c8c4:	da400115 	stw	r9,4(sp)
  80c8c8:	08055080 	call	805508 <___vfprintf_internal_r>
  80c8cc:	d8c00117 	ldw	r3,4(sp)
  80c8d0:	18000005 	stb	zero,0(r3)
  80c8d4:	dfc01817 	ldw	ra,96(sp)
  80c8d8:	dec01b04 	addi	sp,sp,108
  80c8dc:	f800283a 	ret

0080c8e0 <_sprintf_r>:
  80c8e0:	deffe604 	addi	sp,sp,-104
  80c8e4:	2813883a 	mov	r9,r5
  80c8e8:	dfc01815 	stw	ra,96(sp)
  80c8ec:	d9c01915 	stw	r7,100(sp)
  80c8f0:	d8801904 	addi	r2,sp,100
  80c8f4:	d8800015 	stw	r2,0(sp)
  80c8f8:	100f883a 	mov	r7,r2
  80c8fc:	00808204 	movi	r2,520
  80c900:	00e00034 	movhi	r3,32768
  80c904:	18ffffc4 	addi	r3,r3,-1
  80c908:	d880040d 	sth	r2,16(sp)
  80c90c:	d9400104 	addi	r5,sp,4
  80c910:	00bfffc4 	movi	r2,-1
  80c914:	d8c00615 	stw	r3,24(sp)
  80c918:	d8c00315 	stw	r3,12(sp)
  80c91c:	da400515 	stw	r9,20(sp)
  80c920:	d880048d 	sth	r2,18(sp)
  80c924:	da400115 	stw	r9,4(sp)
  80c928:	08055080 	call	805508 <___vfprintf_internal_r>
  80c92c:	d8c00117 	ldw	r3,4(sp)
  80c930:	18000005 	stb	zero,0(r3)
  80c934:	dfc01817 	ldw	ra,96(sp)
  80c938:	dec01a04 	addi	sp,sp,104
  80c93c:	f800283a 	ret

0080c940 <strcmp>:
  80c940:	2144b03a 	or	r2,r4,r5
  80c944:	108000cc 	andi	r2,r2,3
  80c948:	10001d1e 	bne	r2,zero,80c9c0 <strcmp+0x80>
  80c94c:	200f883a 	mov	r7,r4
  80c950:	28800017 	ldw	r2,0(r5)
  80c954:	21000017 	ldw	r4,0(r4)
  80c958:	280d883a 	mov	r6,r5
  80c95c:	2080161e 	bne	r4,r2,80c9b8 <strcmp+0x78>
  80c960:	023fbff4 	movhi	r8,65279
  80c964:	423fbfc4 	addi	r8,r8,-257
  80c968:	2207883a 	add	r3,r4,r8
  80c96c:	01602074 	movhi	r5,32897
  80c970:	29602004 	addi	r5,r5,-32640
  80c974:	1946703a 	and	r3,r3,r5
  80c978:	0104303a 	nor	r2,zero,r4
  80c97c:	10c4703a 	and	r2,r2,r3
  80c980:	10001c1e 	bne	r2,zero,80c9f4 <strcmp+0xb4>
  80c984:	4013883a 	mov	r9,r8
  80c988:	2811883a 	mov	r8,r5
  80c98c:	00000106 	br	80c994 <strcmp+0x54>
  80c990:	1800181e 	bne	r3,zero,80c9f4 <strcmp+0xb4>
  80c994:	39c00104 	addi	r7,r7,4
  80c998:	39000017 	ldw	r4,0(r7)
  80c99c:	31800104 	addi	r6,r6,4
  80c9a0:	31400017 	ldw	r5,0(r6)
  80c9a4:	2245883a 	add	r2,r4,r9
  80c9a8:	1204703a 	and	r2,r2,r8
  80c9ac:	0106303a 	nor	r3,zero,r4
  80c9b0:	1886703a 	and	r3,r3,r2
  80c9b4:	217ff626 	beq	r4,r5,80c990 <strcmp+0x50>
  80c9b8:	3809883a 	mov	r4,r7
  80c9bc:	300b883a 	mov	r5,r6
  80c9c0:	20c00007 	ldb	r3,0(r4)
  80c9c4:	1800051e 	bne	r3,zero,80c9dc <strcmp+0x9c>
  80c9c8:	00000606 	br	80c9e4 <strcmp+0xa4>
  80c9cc:	21000044 	addi	r4,r4,1
  80c9d0:	20c00007 	ldb	r3,0(r4)
  80c9d4:	29400044 	addi	r5,r5,1
  80c9d8:	18000226 	beq	r3,zero,80c9e4 <strcmp+0xa4>
  80c9dc:	28800007 	ldb	r2,0(r5)
  80c9e0:	18bffa26 	beq	r3,r2,80c9cc <strcmp+0x8c>
  80c9e4:	20c00003 	ldbu	r3,0(r4)
  80c9e8:	28800003 	ldbu	r2,0(r5)
  80c9ec:	1885c83a 	sub	r2,r3,r2
  80c9f0:	f800283a 	ret
  80c9f4:	0005883a 	mov	r2,zero
  80c9f8:	f800283a 	ret

0080c9fc <match>:
  80c9fc:	21800017 	ldw	r6,0(r4)
  80ca00:	01c01004 	movi	r7,64
  80ca04:	02001684 	movi	r8,90
  80ca08:	28800007 	ldb	r2,0(r5)
  80ca0c:	29400044 	addi	r5,r5,1
  80ca10:	10000826 	beq	r2,zero,80ca34 <match+0x38>
  80ca14:	31800044 	addi	r6,r6,1
  80ca18:	30c00007 	ldb	r3,0(r6)
  80ca1c:	38c0020e 	bge	r7,r3,80ca28 <match+0x2c>
  80ca20:	40c00116 	blt	r8,r3,80ca28 <match+0x2c>
  80ca24:	18c00804 	addi	r3,r3,32
  80ca28:	18bff726 	beq	r3,r2,80ca08 <match+0xc>
  80ca2c:	0005883a 	mov	r2,zero
  80ca30:	f800283a 	ret
  80ca34:	30800044 	addi	r2,r6,1
  80ca38:	20800015 	stw	r2,0(r4)
  80ca3c:	00800044 	movi	r2,1
  80ca40:	f800283a 	ret

0080ca44 <_strtod_r>:
  80ca44:	deffd504 	addi	sp,sp,-172
  80ca48:	df002915 	stw	fp,164(sp)
  80ca4c:	dd402615 	stw	r21,152(sp)
  80ca50:	dd002515 	stw	r20,148(sp)
  80ca54:	dfc02a15 	stw	ra,168(sp)
  80ca58:	ddc02815 	stw	r23,160(sp)
  80ca5c:	dd802715 	stw	r22,156(sp)
  80ca60:	dcc02415 	stw	r19,144(sp)
  80ca64:	dc802315 	stw	r18,140(sp)
  80ca68:	dc402215 	stw	r17,136(sp)
  80ca6c:	dc002115 	stw	r16,132(sp)
  80ca70:	2829883a 	mov	r20,r5
  80ca74:	202b883a 	mov	r21,r4
  80ca78:	d9801d15 	stw	r6,116(sp)
  80ca7c:	d8000915 	stw	zero,36(sp)
  80ca80:	d8000a15 	stw	zero,40(sp)
  80ca84:	d9400415 	stw	r5,16(sp)
  80ca88:	df000904 	addi	fp,sp,36
  80ca8c:	dc000417 	ldw	r16,16(sp)
  80ca90:	00800b44 	movi	r2,45
  80ca94:	80c00003 	ldbu	r3,0(r16)
  80ca98:	10c03536 	bltu	r2,r3,80cb70 <_strtod_r+0x12c>
  80ca9c:	18c5883a 	add	r2,r3,r3
  80caa0:	1085883a 	add	r2,r2,r2
  80caa4:	00c02074 	movhi	r3,129
  80caa8:	18f2ae04 	addi	r3,r3,-13640
  80caac:	10c5883a 	add	r2,r2,r3
  80cab0:	11000017 	ldw	r4,0(r2)
  80cab4:	2000683a 	jmp	r4
  80cab8:	0080ccf0 	cmpltui	r2,zero,819
  80cabc:	0080cb70 	cmpltui	r2,zero,813
  80cac0:	0080cb70 	cmpltui	r2,zero,813
  80cac4:	0080cb70 	cmpltui	r2,zero,813
  80cac8:	0080cb70 	cmpltui	r2,zero,813
  80cacc:	0080cb70 	cmpltui	r2,zero,813
  80cad0:	0080cb70 	cmpltui	r2,zero,813
  80cad4:	0080cb70 	cmpltui	r2,zero,813
  80cad8:	0080cb70 	cmpltui	r2,zero,813
  80cadc:	0080d038 	rdprs	r2,zero,832
  80cae0:	0080d038 	rdprs	r2,zero,832
  80cae4:	0080d038 	rdprs	r2,zero,832
  80cae8:	0080d038 	rdprs	r2,zero,832
  80caec:	0080d038 	rdprs	r2,zero,832
  80caf0:	0080cb70 	cmpltui	r2,zero,813
  80caf4:	0080cb70 	cmpltui	r2,zero,813
  80caf8:	0080cb70 	cmpltui	r2,zero,813
  80cafc:	0080cb70 	cmpltui	r2,zero,813
  80cb00:	0080cb70 	cmpltui	r2,zero,813
  80cb04:	0080cb70 	cmpltui	r2,zero,813
  80cb08:	0080cb70 	cmpltui	r2,zero,813
  80cb0c:	0080cb70 	cmpltui	r2,zero,813
  80cb10:	0080cb70 	cmpltui	r2,zero,813
  80cb14:	0080cb70 	cmpltui	r2,zero,813
  80cb18:	0080cb70 	cmpltui	r2,zero,813
  80cb1c:	0080cb70 	cmpltui	r2,zero,813
  80cb20:	0080cb70 	cmpltui	r2,zero,813
  80cb24:	0080cb70 	cmpltui	r2,zero,813
  80cb28:	0080cb70 	cmpltui	r2,zero,813
  80cb2c:	0080cb70 	cmpltui	r2,zero,813
  80cb30:	0080cb70 	cmpltui	r2,zero,813
  80cb34:	0080cb70 	cmpltui	r2,zero,813
  80cb38:	0080d038 	rdprs	r2,zero,832
  80cb3c:	0080cb70 	cmpltui	r2,zero,813
  80cb40:	0080cb70 	cmpltui	r2,zero,813
  80cb44:	0080cb70 	cmpltui	r2,zero,813
  80cb48:	0080cb70 	cmpltui	r2,zero,813
  80cb4c:	0080cb70 	cmpltui	r2,zero,813
  80cb50:	0080cb70 	cmpltui	r2,zero,813
  80cb54:	0080cb70 	cmpltui	r2,zero,813
  80cb58:	0080cb70 	cmpltui	r2,zero,813
  80cb5c:	0080cb70 	cmpltui	r2,zero,813
  80cb60:	0080cb70 	cmpltui	r2,zero,813
  80cb64:	0080d018 	cmpnei	r2,zero,832
  80cb68:	0080cb70 	cmpltui	r2,zero,813
  80cb6c:	0080d044 	movi	r2,833
  80cb70:	d8001515 	stw	zero,84(sp)
  80cb74:	80c00007 	ldb	r3,0(r16)
  80cb78:	00800c04 	movi	r2,48
  80cb7c:	1880e926 	beq	r3,r2,80cf24 <_strtod_r+0x4e0>
  80cb80:	d8001615 	stw	zero,88(sp)
  80cb84:	dc001415 	stw	r16,80(sp)
  80cb88:	84400007 	ldb	r17,0(r16)
  80cb8c:	00800bc4 	movi	r2,47
  80cb90:	1443760e 	bge	r2,r17,80d96c <_strtod_r+0xf28>
  80cb94:	00800e44 	movi	r2,57
  80cb98:	14437416 	blt	r2,r17,80d96c <_strtod_r+0xf28>
  80cb9c:	8025883a 	mov	r18,r16
  80cba0:	0027883a 	mov	r19,zero
  80cba4:	d8001215 	stw	zero,72(sp)
  80cba8:	d8001115 	stw	zero,68(sp)
  80cbac:	00000f06 	br	80cbec <_strtod_r+0x1a8>
  80cbb0:	d9001217 	ldw	r4,72(sp)
  80cbb4:	01400284 	movi	r5,10
  80cbb8:	0801fec0 	call	801fec <__mulsi3>
  80cbbc:	1445883a 	add	r2,r2,r17
  80cbc0:	10bff404 	addi	r2,r2,-48
  80cbc4:	d8801215 	stw	r2,72(sp)
  80cbc8:	94000044 	addi	r16,r18,1
  80cbcc:	dc000415 	stw	r16,16(sp)
  80cbd0:	84400007 	ldb	r17,0(r16)
  80cbd4:	00800bc4 	movi	r2,47
  80cbd8:	9cc00044 	addi	r19,r19,1
  80cbdc:	8025883a 	mov	r18,r16
  80cbe0:	1440130e 	bge	r2,r17,80cc30 <_strtod_r+0x1ec>
  80cbe4:	00800e44 	movi	r2,57
  80cbe8:	14401116 	blt	r2,r17,80cc30 <_strtod_r+0x1ec>
  80cbec:	00800204 	movi	r2,8
  80cbf0:	14ffef0e 	bge	r2,r19,80cbb0 <_strtod_r+0x16c>
  80cbf4:	008003c4 	movi	r2,15
  80cbf8:	14fff316 	blt	r2,r19,80cbc8 <_strtod_r+0x184>
  80cbfc:	d9001117 	ldw	r4,68(sp)
  80cc00:	01400284 	movi	r5,10
  80cc04:	94000044 	addi	r16,r18,1
  80cc08:	0801fec0 	call	801fec <__mulsi3>
  80cc0c:	1445883a 	add	r2,r2,r17
  80cc10:	10bff404 	addi	r2,r2,-48
  80cc14:	d8801115 	stw	r2,68(sp)
  80cc18:	dc000415 	stw	r16,16(sp)
  80cc1c:	84400007 	ldb	r17,0(r16)
  80cc20:	00800bc4 	movi	r2,47
  80cc24:	9cc00044 	addi	r19,r19,1
  80cc28:	8025883a 	mov	r18,r16
  80cc2c:	147fed16 	blt	r2,r17,80cbe4 <_strtod_r+0x1a0>
  80cc30:	00800b84 	movi	r2,46
  80cc34:	8880c926 	beq	r17,r2,80cf5c <_strtod_r+0x518>
  80cc38:	dcc01815 	stw	r19,96(sp)
  80cc3c:	d8001b15 	stw	zero,108(sp)
  80cc40:	d8001715 	stw	zero,92(sp)
  80cc44:	000d883a 	mov	r6,zero
  80cc48:	00801944 	movi	r2,101
  80cc4c:	88802126 	beq	r17,r2,80ccd4 <_strtod_r+0x290>
  80cc50:	00801144 	movi	r2,69
  80cc54:	88801f26 	beq	r17,r2,80ccd4 <_strtod_r+0x290>
  80cc58:	d9001817 	ldw	r4,96(sp)
  80cc5c:	2024c03a 	cmpne	r18,r4,zero
  80cc60:	0009883a 	mov	r4,zero
  80cc64:	9000651e 	bne	r18,zero,80cdfc <_strtod_r+0x3b8>
  80cc68:	3000c926 	beq	r6,zero,80cf90 <_strtod_r+0x54c>
  80cc6c:	d8801d17 	ldw	r2,116(sp)
  80cc70:	10000326 	beq	r2,zero,80cc80 <_strtod_r+0x23c>
  80cc74:	d8800417 	ldw	r2,16(sp)
  80cc78:	d8c01d17 	ldw	r3,116(sp)
  80cc7c:	18800015 	stw	r2,0(r3)
  80cc80:	d9001517 	ldw	r4,84(sp)
  80cc84:	2005003a 	cmpeq	r2,r4,zero
  80cc88:	10001c1e 	bne	r2,zero,80ccfc <_strtod_r+0x2b8>
  80cc8c:	e0800017 	ldw	r2,0(fp)
  80cc90:	e0c00117 	ldw	r3,4(fp)
  80cc94:	1009883a 	mov	r4,r2
  80cc98:	1960003c 	xorhi	r5,r3,32768
  80cc9c:	2005883a 	mov	r2,r4
  80cca0:	2807883a 	mov	r3,r5
  80cca4:	dfc02a17 	ldw	ra,168(sp)
  80cca8:	df002917 	ldw	fp,164(sp)
  80ccac:	ddc02817 	ldw	r23,160(sp)
  80ccb0:	dd802717 	ldw	r22,156(sp)
  80ccb4:	dd402617 	ldw	r21,152(sp)
  80ccb8:	dd002517 	ldw	r20,148(sp)
  80ccbc:	dcc02417 	ldw	r19,144(sp)
  80ccc0:	dc802317 	ldw	r18,140(sp)
  80ccc4:	dc402217 	ldw	r17,136(sp)
  80ccc8:	dc002117 	ldw	r16,132(sp)
  80cccc:	dec02b04 	addi	sp,sp,172
  80ccd0:	f800283a 	ret
  80ccd4:	d8801817 	ldw	r2,96(sp)
  80ccd8:	1024c03a 	cmpne	r18,r2,zero
  80ccdc:	90000a1e 	bne	r18,zero,80cd08 <_strtod_r+0x2c4>
  80cce0:	3000091e 	bne	r6,zero,80cd08 <_strtod_r+0x2c4>
  80cce4:	d8c01617 	ldw	r3,88(sp)
  80cce8:	1805003a 	cmpeq	r2,r3,zero
  80ccec:	10000626 	beq	r2,zero,80cd08 <_strtod_r+0x2c4>
  80ccf0:	d8001515 	stw	zero,84(sp)
  80ccf4:	dd000415 	stw	r20,16(sp)
  80ccf8:	003fdc06 	br	80cc6c <_strtod_r+0x228>
  80ccfc:	e1000017 	ldw	r4,0(fp)
  80cd00:	e1400117 	ldw	r5,4(fp)
  80cd04:	003fe506 	br	80cc9c <_strtod_r+0x258>
  80cd08:	dd000417 	ldw	r20,16(sp)
  80cd0c:	00800ac4 	movi	r2,43
  80cd10:	a4000044 	addi	r16,r20,1
  80cd14:	dc000415 	stw	r16,16(sp)
  80cd18:	a0c00047 	ldb	r3,1(r20)
  80cd1c:	8009883a 	mov	r4,r16
  80cd20:	1880cb26 	beq	r3,r2,80d050 <_strtod_r+0x60c>
  80cd24:	00800b44 	movi	r2,45
  80cd28:	18838326 	beq	r3,r2,80db38 <_strtod_r+0x10f4>
  80cd2c:	1823883a 	mov	r17,r3
  80cd30:	88fff404 	addi	r3,r17,-48
  80cd34:	00800244 	movi	r2,9
  80cd38:	d8001915 	stw	zero,100(sp)
  80cd3c:	10c0cb36 	bltu	r2,r3,80d06c <_strtod_r+0x628>
  80cd40:	00800c04 	movi	r2,48
  80cd44:	8880061e 	bne	r17,r2,80cd60 <_strtod_r+0x31c>
  80cd48:	dc000417 	ldw	r16,16(sp)
  80cd4c:	8805883a 	mov	r2,r17
  80cd50:	84000044 	addi	r16,r16,1
  80cd54:	dc000415 	stw	r16,16(sp)
  80cd58:	84400007 	ldb	r17,0(r16)
  80cd5c:	88bffc26 	beq	r17,r2,80cd50 <_strtod_r+0x30c>
  80cd60:	88fff3c4 	addi	r3,r17,-49
  80cd64:	00800204 	movi	r2,8
  80cd68:	10ffbd36 	bltu	r2,r3,80cc60 <_strtod_r+0x21c>
  80cd6c:	dc000417 	ldw	r16,16(sp)
  80cd70:	893ff404 	addi	r4,r17,-48
  80cd74:	00c00bc4 	movi	r3,47
  80cd78:	dc001315 	stw	r16,76(sp)
  80cd7c:	84000044 	addi	r16,r16,1
  80cd80:	dc000415 	stw	r16,16(sp)
  80cd84:	84400007 	ldb	r17,0(r16)
  80cd88:	1c40100e 	bge	r3,r17,80cdcc <_strtod_r+0x388>
  80cd8c:	00800e44 	movi	r2,57
  80cd90:	14400e16 	blt	r2,r17,80cdcc <_strtod_r+0x388>
  80cd94:	182f883a 	mov	r23,r3
  80cd98:	102d883a 	mov	r22,r2
  80cd9c:	00000106 	br	80cda4 <_strtod_r+0x360>
  80cda0:	b4400a16 	blt	r22,r17,80cdcc <_strtod_r+0x388>
  80cda4:	84000044 	addi	r16,r16,1
  80cda8:	01400284 	movi	r5,10
  80cdac:	d9802015 	stw	r6,128(sp)
  80cdb0:	0801fec0 	call	801fec <__mulsi3>
  80cdb4:	dc000415 	stw	r16,16(sp)
  80cdb8:	8885883a 	add	r2,r17,r2
  80cdbc:	84400007 	ldb	r17,0(r16)
  80cdc0:	113ff404 	addi	r4,r2,-48
  80cdc4:	d9802017 	ldw	r6,128(sp)
  80cdc8:	bc7ff516 	blt	r23,r17,80cda0 <_strtod_r+0x35c>
  80cdcc:	d8801317 	ldw	r2,76(sp)
  80cdd0:	8087c83a 	sub	r3,r16,r2
  80cdd4:	00800204 	movi	r2,8
  80cdd8:	10c2ff16 	blt	r2,r3,80d9d8 <_strtod_r+0xf94>
  80cddc:	009387c4 	movi	r2,19999
  80cde0:	1100010e 	bge	r2,r4,80cde8 <_strtod_r+0x3a4>
  80cde4:	1009883a 	mov	r4,r2
  80cde8:	d8c01917 	ldw	r3,100(sp)
  80cdec:	1805003a 	cmpeq	r2,r3,zero
  80cdf0:	103f9c1e 	bne	r2,zero,80cc64 <_strtod_r+0x220>
  80cdf4:	0109c83a 	sub	r4,zero,r4
  80cdf8:	903f9b26 	beq	r18,zero,80cc68 <_strtod_r+0x224>
  80cdfc:	d8801717 	ldw	r2,92(sp)
  80ce00:	2089c83a 	sub	r4,r4,r2
  80ce04:	d9000f15 	stw	r4,60(sp)
  80ce08:	9800811e 	bne	r19,zero,80d010 <_strtod_r+0x5cc>
  80ce0c:	dd001817 	ldw	r20,96(sp)
  80ce10:	dc801817 	ldw	r18,96(sp)
  80ce14:	00800404 	movi	r2,16
  80ce18:	1480010e 	bge	r2,r18,80ce20 <_strtod_r+0x3dc>
  80ce1c:	1025883a 	mov	r18,r2
  80ce20:	d9001217 	ldw	r4,72(sp)
  80ce24:	0801e580 	call	801e58 <__floatunsidf>
  80ce28:	100f883a 	mov	r7,r2
  80ce2c:	e0800015 	stw	r2,0(fp)
  80ce30:	00800244 	movi	r2,9
  80ce34:	e0c00115 	stw	r3,4(fp)
  80ce38:	1480160e 	bge	r2,r18,80ce94 <_strtod_r+0x450>
  80ce3c:	900c90fa 	slli	r6,r18,3
  80ce40:	01002074 	movhi	r4,129
  80ce44:	21141f04 	addi	r4,r4,20604
  80ce48:	180b883a 	mov	r5,r3
  80ce4c:	310d883a 	add	r6,r6,r4
  80ce50:	30ffef17 	ldw	r3,-68(r6)
  80ce54:	30bfee17 	ldw	r2,-72(r6)
  80ce58:	3809883a 	mov	r4,r7
  80ce5c:	180f883a 	mov	r7,r3
  80ce60:	100d883a 	mov	r6,r2
  80ce64:	0810cfc0 	call	810cfc <__muldf3>
  80ce68:	d9001117 	ldw	r4,68(sp)
  80ce6c:	1021883a 	mov	r16,r2
  80ce70:	1823883a 	mov	r17,r3
  80ce74:	0801e580 	call	801e58 <__floatunsidf>
  80ce78:	880b883a 	mov	r5,r17
  80ce7c:	180f883a 	mov	r7,r3
  80ce80:	8009883a 	mov	r4,r16
  80ce84:	100d883a 	mov	r6,r2
  80ce88:	0810c880 	call	810c88 <__adddf3>
  80ce8c:	e0c00115 	stw	r3,4(fp)
  80ce90:	e0800015 	stw	r2,0(fp)
  80ce94:	d8c01817 	ldw	r3,96(sp)
  80ce98:	010003c4 	movi	r4,15
  80ce9c:	20c09e16 	blt	r4,r3,80d118 <_strtod_r+0x6d4>
  80cea0:	d8800f17 	ldw	r2,60(sp)
  80cea4:	103f7126 	beq	r2,zero,80cc6c <_strtod_r+0x228>
  80cea8:	0083d90e 	bge	zero,r2,80de10 <_strtod_r+0x13cc>
  80ceac:	d8c00f17 	ldw	r3,60(sp)
  80ceb0:	00800584 	movi	r2,22
  80ceb4:	10c2ca0e 	bge	r2,r3,80d9e0 <_strtod_r+0xf9c>
  80ceb8:	d8801817 	ldw	r2,96(sp)
  80cebc:	d8c00f17 	ldw	r3,60(sp)
  80cec0:	20a3c83a 	sub	r17,r4,r2
  80cec4:	88800584 	addi	r2,r17,22
  80cec8:	10c09316 	blt	r2,r3,80d118 <_strtod_r+0x6d4>
  80cecc:	880890fa 	slli	r4,r17,3
  80ced0:	04002074 	movhi	r16,129
  80ced4:	84141f04 	addi	r16,r16,20604
  80ced8:	e0800017 	ldw	r2,0(fp)
  80cedc:	2409883a 	add	r4,r4,r16
  80cee0:	22000017 	ldw	r8,0(r4)
  80cee4:	22400117 	ldw	r9,4(r4)
  80cee8:	e0c00117 	ldw	r3,4(fp)
  80ceec:	1009883a 	mov	r4,r2
  80cef0:	480f883a 	mov	r7,r9
  80cef4:	180b883a 	mov	r5,r3
  80cef8:	400d883a 	mov	r6,r8
  80cefc:	0810cfc0 	call	810cfc <__muldf3>
  80cf00:	d9000f17 	ldw	r4,60(sp)
  80cf04:	180b883a 	mov	r5,r3
  80cf08:	2455c83a 	sub	r10,r4,r17
  80cf0c:	501490fa 	slli	r10,r10,3
  80cf10:	1009883a 	mov	r4,r2
  80cf14:	5415883a 	add	r10,r10,r16
  80cf18:	52000017 	ldw	r8,0(r10)
  80cf1c:	52400117 	ldw	r9,4(r10)
  80cf20:	0002b906 	br	80da08 <_strtod_r+0xfc4>
  80cf24:	80c00047 	ldb	r3,1(r16)
  80cf28:	00801604 	movi	r2,88
  80cf2c:	18805226 	beq	r3,r2,80d078 <_strtod_r+0x634>
  80cf30:	00801e04 	movi	r2,120
  80cf34:	18805026 	beq	r3,r2,80d078 <_strtod_r+0x634>
  80cf38:	84000044 	addi	r16,r16,1
  80cf3c:	dc000415 	stw	r16,16(sp)
  80cf40:	80c00007 	ldb	r3,0(r16)
  80cf44:	00800c04 	movi	r2,48
  80cf48:	18bffb26 	beq	r3,r2,80cf38 <_strtod_r+0x4f4>
  80cf4c:	183f4726 	beq	r3,zero,80cc6c <_strtod_r+0x228>
  80cf50:	01000044 	movi	r4,1
  80cf54:	d9001615 	stw	r4,88(sp)
  80cf58:	003f0a06 	br	80cb84 <_strtod_r+0x140>
  80cf5c:	84000044 	addi	r16,r16,1
  80cf60:	dc000415 	stw	r16,16(sp)
  80cf64:	94400047 	ldb	r17,1(r18)
  80cf68:	9800ba26 	beq	r19,zero,80d254 <_strtod_r+0x810>
  80cf6c:	dcc01815 	stw	r19,96(sp)
  80cf70:	d8001715 	stw	zero,92(sp)
  80cf74:	000d883a 	mov	r6,zero
  80cf78:	8dbff404 	addi	r22,r17,-48
  80cf7c:	00800244 	movi	r2,9
  80cf80:	15826e2e 	bgeu	r2,r22,80d93c <_strtod_r+0xef8>
  80cf84:	01000044 	movi	r4,1
  80cf88:	d9001b15 	stw	r4,108(sp)
  80cf8c:	003f2e06 	br	80cc48 <_strtod_r+0x204>
  80cf90:	d8c01617 	ldw	r3,88(sp)
  80cf94:	1804c03a 	cmpne	r2,r3,zero
  80cf98:	103f341e 	bne	r2,zero,80cc6c <_strtod_r+0x228>
  80cf9c:	d9001b17 	ldw	r4,108(sp)
  80cfa0:	2004c03a 	cmpne	r2,r4,zero
  80cfa4:	103f521e 	bne	r2,zero,80ccf0 <_strtod_r+0x2ac>
  80cfa8:	00801384 	movi	r2,78
  80cfac:	8883b526 	beq	r17,r2,80de84 <_strtod_r+0x1440>
  80cfb0:	1443b016 	blt	r2,r17,80de74 <_strtod_r+0x1430>
  80cfb4:	00801244 	movi	r2,73
  80cfb8:	88bf4d1e 	bne	r17,r2,80ccf0 <_strtod_r+0x2ac>
  80cfbc:	dc000404 	addi	r16,sp,16
  80cfc0:	8009883a 	mov	r4,r16
  80cfc4:	01402074 	movhi	r5,129
  80cfc8:	29546804 	addi	r5,r5,20896
  80cfcc:	080c9fc0 	call	80c9fc <match>
  80cfd0:	103f4726 	beq	r2,zero,80ccf0 <_strtod_r+0x2ac>
  80cfd4:	d8800417 	ldw	r2,16(sp)
  80cfd8:	8009883a 	mov	r4,r16
  80cfdc:	01402074 	movhi	r5,129
  80cfe0:	29546904 	addi	r5,r5,20900
  80cfe4:	143fffc4 	addi	r16,r2,-1
  80cfe8:	dc000415 	stw	r16,16(sp)
  80cfec:	080c9fc0 	call	80c9fc <match>
  80cff0:	1000031e 	bne	r2,zero,80d000 <_strtod_r+0x5bc>
  80cff4:	d8800417 	ldw	r2,16(sp)
  80cff8:	14000044 	addi	r16,r2,1
  80cffc:	dc000415 	stw	r16,16(sp)
  80d000:	019ffc34 	movhi	r6,32752
  80d004:	e1800115 	stw	r6,4(fp)
  80d008:	e0000015 	stw	zero,0(fp)
  80d00c:	003f1706 	br	80cc6c <_strtod_r+0x228>
  80d010:	9829883a 	mov	r20,r19
  80d014:	003f7e06 	br	80ce10 <_strtod_r+0x3cc>
  80d018:	d8001515 	stw	zero,84(sp)
  80d01c:	84000044 	addi	r16,r16,1
  80d020:	dc000415 	stw	r16,16(sp)
  80d024:	80800007 	ldb	r2,0(r16)
  80d028:	103ed21e 	bne	r2,zero,80cb74 <_strtod_r+0x130>
  80d02c:	d8001515 	stw	zero,84(sp)
  80d030:	dd000415 	stw	r20,16(sp)
  80d034:	003f0d06 	br	80cc6c <_strtod_r+0x228>
  80d038:	84000044 	addi	r16,r16,1
  80d03c:	dc000415 	stw	r16,16(sp)
  80d040:	003e9206 	br	80ca8c <_strtod_r+0x48>
  80d044:	00800044 	movi	r2,1
  80d048:	d8801515 	stw	r2,84(sp)
  80d04c:	003ff306 	br	80d01c <_strtod_r+0x5d8>
  80d050:	d8001915 	stw	zero,100(sp)
  80d054:	84000044 	addi	r16,r16,1
  80d058:	dc000415 	stw	r16,16(sp)
  80d05c:	24400047 	ldb	r17,1(r4)
  80d060:	00800244 	movi	r2,9
  80d064:	88fff404 	addi	r3,r17,-48
  80d068:	10ff352e 	bgeu	r2,r3,80cd40 <_strtod_r+0x2fc>
  80d06c:	0009883a 	mov	r4,zero
  80d070:	dd000415 	stw	r20,16(sp)
  80d074:	003efb06 	br	80cc64 <_strtod_r+0x220>
  80d078:	d8c01517 	ldw	r3,84(sp)
  80d07c:	04402074 	movhi	r17,129
  80d080:	8c569e04 	addi	r17,r17,23160
  80d084:	d8800504 	addi	r2,sp,20
  80d088:	a809883a 	mov	r4,r21
  80d08c:	d9400404 	addi	r5,sp,16
  80d090:	880d883a 	mov	r6,r17
  80d094:	d9c00604 	addi	r7,sp,24
  80d098:	d8800015 	stw	r2,0(sp)
  80d09c:	d8c00115 	stw	r3,4(sp)
  80d0a0:	080ed6c0 	call	80ed6c <__gethex>
  80d0a4:	140001cc 	andi	r16,r2,7
  80d0a8:	1025883a 	mov	r18,r2
  80d0ac:	803eef26 	beq	r16,zero,80cc6c <_strtod_r+0x228>
  80d0b0:	04c00184 	movi	r19,6
  80d0b4:	84ff0e26 	beq	r16,r19,80ccf0 <_strtod_r+0x2ac>
  80d0b8:	d9800517 	ldw	r6,20(sp)
  80d0bc:	30000626 	beq	r6,zero,80d0d8 <_strtod_r+0x694>
  80d0c0:	89400017 	ldw	r5,0(r17)
  80d0c4:	d9000d04 	addi	r4,sp,52
  80d0c8:	080b4dc0 	call	80b4dc <__copybits>
  80d0cc:	d9400517 	ldw	r5,20(sp)
  80d0d0:	a809883a 	mov	r4,r21
  80d0d4:	080b03c0 	call	80b03c <_Bfree>
  80d0d8:	d9400617 	ldw	r5,24(sp)
  80d0dc:	9c025436 	bltu	r19,r16,80da30 <_strtod_r+0xfec>
  80d0e0:	8405883a 	add	r2,r16,r16
  80d0e4:	1085883a 	add	r2,r2,r2
  80d0e8:	00c02074 	movhi	r3,129
  80d0ec:	18f43f04 	addi	r3,r3,-12036
  80d0f0:	10c5883a 	add	r2,r2,r3
  80d0f4:	11000017 	ldw	r4,0(r2)
  80d0f8:	2000683a 	jmp	r4
  80d0fc:	0080da70 	cmpltui	r2,zero,873
  80d100:	0080da7c 	xorhi	r2,zero,873
  80d104:	0080da20 	cmpeqi	r2,zero,872
  80d108:	0080da48 	cmpgei	r2,zero,873
  80d10c:	0080da58 	cmpnei	r2,zero,873
  80d110:	0080da7c 	xorhi	r2,zero,873
  80d114:	0080da70 	cmpltui	r2,zero,873
  80d118:	d9001817 	ldw	r4,96(sp)
  80d11c:	d8c00f17 	ldw	r3,60(sp)
  80d120:	2485c83a 	sub	r2,r4,r18
  80d124:	18a1883a 	add	r16,r3,r2
  80d128:	0402e80e 	bge	zero,r16,80dccc <_strtod_r+0x1288>
  80d12c:	814003cc 	andi	r5,r16,15
  80d130:	28000f26 	beq	r5,zero,80d170 <_strtod_r+0x72c>
  80d134:	280a90fa 	slli	r5,r5,3
  80d138:	01002074 	movhi	r4,129
  80d13c:	21141f04 	addi	r4,r4,20604
  80d140:	e0800017 	ldw	r2,0(fp)
  80d144:	290b883a 	add	r5,r5,r4
  80d148:	2a000017 	ldw	r8,0(r5)
  80d14c:	e0c00117 	ldw	r3,4(fp)
  80d150:	2a400117 	ldw	r9,4(r5)
  80d154:	1009883a 	mov	r4,r2
  80d158:	180b883a 	mov	r5,r3
  80d15c:	480f883a 	mov	r7,r9
  80d160:	400d883a 	mov	r6,r8
  80d164:	0810cfc0 	call	810cfc <__muldf3>
  80d168:	e0c00115 	stw	r3,4(fp)
  80d16c:	e0800015 	stw	r2,0(fp)
  80d170:	00bffc04 	movi	r2,-16
  80d174:	808c703a 	and	r6,r16,r2
  80d178:	30006726 	beq	r6,zero,80d318 <_strtod_r+0x8d4>
  80d17c:	00804d04 	movi	r2,308
  80d180:	11820f16 	blt	r2,r6,80d9c0 <_strtod_r+0xf7c>
  80d184:	3021d13a 	srai	r16,r6,4
  80d188:	00800044 	movi	r2,1
  80d18c:	14037f0e 	bge	r2,r16,80df8c <_strtod_r+0x1548>
  80d190:	05802074 	movhi	r22,129
  80d194:	b5945104 	addi	r22,r22,20804
  80d198:	1027883a 	mov	r19,r2
  80d19c:	0025883a 	mov	r18,zero
  80d1a0:	b023883a 	mov	r17,r22
  80d1a4:	8080004c 	andi	r2,r16,1
  80d1a8:	1005003a 	cmpeq	r2,r2,zero
  80d1ac:	1000091e 	bne	r2,zero,80d1d4 <_strtod_r+0x790>
  80d1b0:	e0800017 	ldw	r2,0(fp)
  80d1b4:	e0c00117 	ldw	r3,4(fp)
  80d1b8:	89800017 	ldw	r6,0(r17)
  80d1bc:	89c00117 	ldw	r7,4(r17)
  80d1c0:	180b883a 	mov	r5,r3
  80d1c4:	1009883a 	mov	r4,r2
  80d1c8:	0810cfc0 	call	810cfc <__muldf3>
  80d1cc:	e0c00115 	stw	r3,4(fp)
  80d1d0:	e0800015 	stw	r2,0(fp)
  80d1d4:	8021d07a 	srai	r16,r16,1
  80d1d8:	94800044 	addi	r18,r18,1
  80d1dc:	8c400204 	addi	r17,r17,8
  80d1e0:	9c3ff016 	blt	r19,r16,80d1a4 <_strtod_r+0x760>
  80d1e4:	900e90fa 	slli	r7,r18,3
  80d1e8:	e2000117 	ldw	r8,4(fp)
  80d1ec:	e1000017 	ldw	r4,0(fp)
  80d1f0:	3d8f883a 	add	r7,r7,r22
  80d1f4:	38800017 	ldw	r2,0(r7)
  80d1f8:	38c00117 	ldw	r3,4(r7)
  80d1fc:	01bf2c34 	movhi	r6,64688
  80d200:	418d883a 	add	r6,r8,r6
  80d204:	300b883a 	mov	r5,r6
  80d208:	180f883a 	mov	r7,r3
  80d20c:	100d883a 	mov	r6,r2
  80d210:	0810cfc0 	call	810cfc <__muldf3>
  80d214:	1009883a 	mov	r4,r2
  80d218:	180b883a 	mov	r5,r3
  80d21c:	199ffc2c 	andhi	r6,r3,32752
  80d220:	009f2834 	movhi	r2,31904
  80d224:	e1000015 	stw	r4,0(fp)
  80d228:	e1400115 	stw	r5,4(fp)
  80d22c:	1181e436 	bltu	r2,r6,80d9c0 <_strtod_r+0xf7c>
  80d230:	009f2434 	movhi	r2,31888
  80d234:	11833f2e 	bgeu	r2,r6,80df34 <_strtod_r+0x14f0>
  80d238:	d8001c15 	stw	zero,112(sp)
  80d23c:	019ffc34 	movhi	r6,32752
  80d240:	31bfffc4 	addi	r6,r6,-1
  80d244:	01ffffc4 	movi	r7,-1
  80d248:	e1800115 	stw	r6,4(fp)
  80d24c:	e1c00015 	stw	r7,0(fp)
  80d250:	00003206 	br	80d31c <_strtod_r+0x8d8>
  80d254:	00800c04 	movi	r2,48
  80d258:	8883221e 	bne	r17,r2,80dee4 <_strtod_r+0x14a0>
  80d25c:	8805883a 	mov	r2,r17
  80d260:	000d883a 	mov	r6,zero
  80d264:	84000044 	addi	r16,r16,1
  80d268:	dc000415 	stw	r16,16(sp)
  80d26c:	84400007 	ldb	r17,0(r16)
  80d270:	31800044 	addi	r6,r6,1
  80d274:	88bffb26 	beq	r17,r2,80d264 <_strtod_r+0x820>
  80d278:	88fff3c4 	addi	r3,r17,-49
  80d27c:	00800204 	movi	r2,8
  80d280:	10c1ca36 	bltu	r2,r3,80d9ac <_strtod_r+0xf68>
  80d284:	d8c00417 	ldw	r3,16(sp)
  80d288:	d9801715 	stw	r6,92(sp)
  80d28c:	8dbff404 	addi	r22,r17,-48
  80d290:	d8c01415 	stw	r3,80(sp)
  80d294:	1821883a 	mov	r16,r3
  80d298:	d8001815 	stw	zero,96(sp)
  80d29c:	01800044 	movi	r6,1
  80d2a0:	b0023526 	beq	r22,zero,80db78 <_strtod_r+0x1134>
  80d2a4:	d9001717 	ldw	r4,92(sp)
  80d2a8:	00800044 	movi	r2,1
  80d2ac:	2189883a 	add	r4,r4,r6
  80d2b0:	d9001715 	stw	r4,92(sp)
  80d2b4:	1183390e 	bge	r2,r6,80df9c <_strtod_r+0x1558>
  80d2b8:	dc401817 	ldw	r17,96(sp)
  80d2bc:	1025883a 	mov	r18,r2
  80d2c0:	05c00204 	movi	r23,8
  80d2c4:	00000806 	br	80d2e8 <_strtod_r+0x8a4>
  80d2c8:	d9001217 	ldw	r4,72(sp)
  80d2cc:	01400284 	movi	r5,10
  80d2d0:	d9802015 	stw	r6,128(sp)
  80d2d4:	0801fec0 	call	801fec <__mulsi3>
  80d2d8:	d9802017 	ldw	r6,128(sp)
  80d2dc:	d8801215 	stw	r2,72(sp)
  80d2e0:	94800044 	addi	r18,r18,1
  80d2e4:	91821726 	beq	r18,r6,80db44 <_strtod_r+0x1100>
  80d2e8:	8c400044 	addi	r17,r17,1
  80d2ec:	88bfffc4 	addi	r2,r17,-1
  80d2f0:	b8bff50e 	bge	r23,r2,80d2c8 <_strtod_r+0x884>
  80d2f4:	00800404 	movi	r2,16
  80d2f8:	147ff916 	blt	r2,r17,80d2e0 <_strtod_r+0x89c>
  80d2fc:	d9001117 	ldw	r4,68(sp)
  80d300:	01400284 	movi	r5,10
  80d304:	d9802015 	stw	r6,128(sp)
  80d308:	0801fec0 	call	801fec <__mulsi3>
  80d30c:	d9802017 	ldw	r6,128(sp)
  80d310:	d8801115 	stw	r2,68(sp)
  80d314:	003ff206 	br	80d2e0 <_strtod_r+0x89c>
  80d318:	d8001c15 	stw	zero,112(sp)
  80d31c:	d8c01217 	ldw	r3,72(sp)
  80d320:	d9401417 	ldw	r5,80(sp)
  80d324:	d9c01817 	ldw	r7,96(sp)
  80d328:	a809883a 	mov	r4,r21
  80d32c:	a00d883a 	mov	r6,r20
  80d330:	d8c00015 	stw	r3,0(sp)
  80d334:	080bfa80 	call	80bfa8 <__s2b>
  80d338:	11000304 	addi	r4,r2,12
  80d33c:	d8801015 	stw	r2,64(sp)
  80d340:	d8800f17 	ldw	r2,60(sp)
  80d344:	d9001f15 	stw	r4,124(sp)
  80d348:	1004803a 	cmplt	r2,r2,zero
  80d34c:	d8801e15 	stw	r2,120(sp)
  80d350:	d8c01017 	ldw	r3,64(sp)
  80d354:	a809883a 	mov	r4,r21
  80d358:	19400117 	ldw	r5,4(r3)
  80d35c:	080b5bc0 	call	80b5bc <_Balloc>
  80d360:	d9001017 	ldw	r4,64(sp)
  80d364:	d9401f17 	ldw	r5,124(sp)
  80d368:	102f883a 	mov	r23,r2
  80d36c:	21800417 	ldw	r6,16(r4)
  80d370:	11000304 	addi	r4,r2,12
  80d374:	318d883a 	add	r6,r6,r6
  80d378:	318d883a 	add	r6,r6,r6
  80d37c:	31800204 	addi	r6,r6,8
  80d380:	08048c40 	call	8048c4 <memcpy>
  80d384:	e2000017 	ldw	r8,0(fp)
  80d388:	e2400117 	ldw	r9,4(fp)
  80d38c:	a809883a 	mov	r4,r21
  80d390:	400b883a 	mov	r5,r8
  80d394:	d9c00204 	addi	r7,sp,8
  80d398:	d8800304 	addi	r2,sp,12
  80d39c:	480d883a 	mov	r6,r9
  80d3a0:	d8800015 	stw	r2,0(sp)
  80d3a4:	080b6780 	call	80b678 <__d2b>
  80d3a8:	a809883a 	mov	r4,r21
  80d3ac:	01400044 	movi	r5,1
  80d3b0:	d8800515 	stw	r2,20(sp)
  80d3b4:	080bd200 	call	80bd20 <__i2b>
  80d3b8:	d8c01e17 	ldw	r3,120(sp)
  80d3bc:	102d883a 	mov	r22,r2
  80d3c0:	1801091e 	bne	r3,zero,80d7e8 <_strtod_r+0xda4>
  80d3c4:	dd000f17 	ldw	r20,60(sp)
  80d3c8:	000f883a 	mov	r7,zero
  80d3cc:	0013883a 	mov	r9,zero
  80d3d0:	a011883a 	mov	r8,r20
  80d3d4:	d8800217 	ldw	r2,8(sp)
  80d3d8:	10010116 	blt	r2,zero,80d7e0 <_strtod_r+0xd9c>
  80d3dc:	388f883a 	add	r7,r7,r2
  80d3e0:	d8c01c17 	ldw	r3,112(sp)
  80d3e4:	d9400317 	ldw	r5,12(sp)
  80d3e8:	10c9c83a 	sub	r4,r2,r3
  80d3ec:	2145883a 	add	r2,r4,r5
  80d3f0:	10bfffc4 	addi	r2,r2,-1
  80d3f4:	00ff0084 	movi	r3,-1022
  80d3f8:	10c09f0e 	bge	r2,r3,80d678 <_strtod_r+0xc34>
  80d3fc:	21810cc4 	addi	r6,r4,1075
  80d400:	d9001c17 	ldw	r4,112(sp)
  80d404:	4185883a 	add	r2,r8,r6
  80d408:	39a1883a 	add	r16,r7,r6
  80d40c:	20a5883a 	add	r18,r4,r2
  80d410:	3807883a 	mov	r3,r7
  80d414:	81c0010e 	bge	r16,r7,80d41c <_strtod_r+0x9d8>
  80d418:	8007883a 	mov	r3,r16
  80d41c:	9005883a 	mov	r2,r18
  80d420:	1c80010e 	bge	r3,r18,80d428 <_strtod_r+0x9e4>
  80d424:	1805883a 	mov	r2,r3
  80d428:	0080eb0e 	bge	zero,r2,80d7d8 <_strtod_r+0xd94>
  80d42c:	38a7c83a 	sub	r19,r7,r2
  80d430:	80a1c83a 	sub	r16,r16,r2
  80d434:	90a5c83a 	sub	r18,r18,r2
  80d438:	02400e0e 	bge	zero,r9,80d474 <_strtod_r+0xa30>
  80d43c:	480d883a 	mov	r6,r9
  80d440:	b00b883a 	mov	r5,r22
  80d444:	a809883a 	mov	r4,r21
  80d448:	080be880 	call	80be88 <__pow5mult>
  80d44c:	d9800517 	ldw	r6,20(sp)
  80d450:	a809883a 	mov	r4,r21
  80d454:	100b883a 	mov	r5,r2
  80d458:	102d883a 	mov	r22,r2
  80d45c:	080bacc0 	call	80bacc <__multiply>
  80d460:	d9400517 	ldw	r5,20(sp)
  80d464:	1023883a 	mov	r17,r2
  80d468:	a809883a 	mov	r4,r21
  80d46c:	080b03c0 	call	80b03c <_Bfree>
  80d470:	dc400515 	stw	r17,20(sp)
  80d474:	0400050e 	bge	zero,r16,80d48c <_strtod_r+0xa48>
  80d478:	d9400517 	ldw	r5,20(sp)
  80d47c:	800d883a 	mov	r6,r16
  80d480:	a809883a 	mov	r4,r21
  80d484:	080b9800 	call	80b980 <__lshift>
  80d488:	d8800515 	stw	r2,20(sp)
  80d48c:	a000741e 	bne	r20,zero,80d660 <_strtod_r+0xc1c>
  80d490:	0480050e 	bge	zero,r18,80d4a8 <_strtod_r+0xa64>
  80d494:	b80b883a 	mov	r5,r23
  80d498:	900d883a 	mov	r6,r18
  80d49c:	a809883a 	mov	r4,r21
  80d4a0:	080b9800 	call	80b980 <__lshift>
  80d4a4:	102f883a 	mov	r23,r2
  80d4a8:	04c0050e 	bge	zero,r19,80d4c0 <_strtod_r+0xa7c>
  80d4ac:	b00b883a 	mov	r5,r22
  80d4b0:	980d883a 	mov	r6,r19
  80d4b4:	a809883a 	mov	r4,r21
  80d4b8:	080b9800 	call	80b980 <__lshift>
  80d4bc:	102d883a 	mov	r22,r2
  80d4c0:	d9400517 	ldw	r5,20(sp)
  80d4c4:	a809883a 	mov	r4,r21
  80d4c8:	b80d883a 	mov	r6,r23
  80d4cc:	080b7f40 	call	80b7f4 <__mdiff>
  80d4d0:	1029883a 	mov	r20,r2
  80d4d4:	10800317 	ldw	r2,12(r2)
  80d4d8:	a009883a 	mov	r4,r20
  80d4dc:	a0000315 	stw	zero,12(r20)
  80d4e0:	b00b883a 	mov	r5,r22
  80d4e4:	d8801a15 	stw	r2,104(sp)
  80d4e8:	080b1980 	call	80b198 <__mcmp>
  80d4ec:	1001a616 	blt	r2,zero,80db88 <_strtod_r+0x1144>
  80d4f0:	10016d26 	beq	r2,zero,80daa8 <_strtod_r+0x1064>
  80d4f4:	a009883a 	mov	r4,r20
  80d4f8:	b00b883a 	mov	r5,r22
  80d4fc:	080b3980 	call	80b398 <__ratio>
  80d500:	0011883a 	mov	r8,zero
  80d504:	02500034 	movhi	r9,16384
  80d508:	480f883a 	mov	r7,r9
  80d50c:	1009883a 	mov	r4,r2
  80d510:	180b883a 	mov	r5,r3
  80d514:	400d883a 	mov	r6,r8
  80d518:	1021883a 	mov	r16,r2
  80d51c:	1823883a 	mov	r17,r3
  80d520:	08113680 	call	811368 <__ledf2>
  80d524:	00805716 	blt	zero,r2,80d684 <_strtod_r+0xc40>
  80d528:	d8801a17 	ldw	r2,104(sp)
  80d52c:	1025003a 	cmpeq	r18,r2,zero
  80d530:	90008c1e 	bne	r18,zero,80d764 <_strtod_r+0xd20>
  80d534:	008ffc34 	movhi	r2,16368
  80d538:	0021883a 	mov	r16,zero
  80d53c:	1023883a 	mov	r17,r2
  80d540:	d8000715 	stw	zero,28(sp)
  80d544:	d8800815 	stw	r2,32(sp)
  80d548:	e1c00117 	ldw	r7,4(fp)
  80d54c:	009ff834 	movhi	r2,32736
  80d550:	3cdffc2c 	andhi	r19,r7,32752
  80d554:	98805f26 	beq	r19,r2,80d6d4 <_strtod_r+0xc90>
  80d558:	d8c01c17 	ldw	r3,112(sp)
  80d55c:	18001b26 	beq	r3,zero,80d5cc <_strtod_r+0xb88>
  80d560:	0081a834 	movhi	r2,1696
  80d564:	14c01936 	bltu	r2,r19,80d5cc <_strtod_r+0xb88>
  80d568:	00bff034 	movhi	r2,65472
  80d56c:	00d07834 	movhi	r3,16864
  80d570:	18ffffc4 	addi	r3,r3,-1
  80d574:	180f883a 	mov	r7,r3
  80d578:	8009883a 	mov	r4,r16
  80d57c:	880b883a 	mov	r5,r17
  80d580:	100d883a 	mov	r6,r2
  80d584:	08113680 	call	811368 <__ledf2>
  80d588:	00800b16 	blt	zero,r2,80d5b8 <_strtod_r+0xb74>
  80d58c:	880b883a 	mov	r5,r17
  80d590:	8009883a 	mov	r4,r16
  80d594:	080f9200 	call	80f920 <__fixunsdfsi>
  80d598:	1000e31e 	bne	r2,zero,80d928 <_strtod_r+0xee4>
  80d59c:	0021883a 	mov	r16,zero
  80d5a0:	044ffc34 	movhi	r17,16368
  80d5a4:	9000dd1e 	bne	r18,zero,80d91c <_strtod_r+0xed8>
  80d5a8:	8005883a 	mov	r2,r16
  80d5ac:	8807883a 	mov	r3,r17
  80d5b0:	d8c00815 	stw	r3,32(sp)
  80d5b4:	d8800715 	stw	r2,28(sp)
  80d5b8:	d8800817 	ldw	r2,32(sp)
  80d5bc:	00c1ac34 	movhi	r3,1712
  80d5c0:	14c5c83a 	sub	r2,r2,r19
  80d5c4:	10c5883a 	add	r2,r2,r3
  80d5c8:	d8800815 	stw	r2,32(sp)
  80d5cc:	e0800017 	ldw	r2,0(fp)
  80d5d0:	e0c00117 	ldw	r3,4(fp)
  80d5d4:	1009883a 	mov	r4,r2
  80d5d8:	180b883a 	mov	r5,r3
  80d5dc:	080b1f80 	call	80b1f8 <__ulp>
  80d5e0:	d9800717 	ldw	r6,28(sp)
  80d5e4:	d9c00817 	ldw	r7,32(sp)
  80d5e8:	180b883a 	mov	r5,r3
  80d5ec:	1009883a 	mov	r4,r2
  80d5f0:	0810cfc0 	call	810cfc <__muldf3>
  80d5f4:	e2000017 	ldw	r8,0(fp)
  80d5f8:	e2400117 	ldw	r9,4(fp)
  80d5fc:	180b883a 	mov	r5,r3
  80d600:	1009883a 	mov	r4,r2
  80d604:	480f883a 	mov	r7,r9
  80d608:	400d883a 	mov	r6,r8
  80d60c:	0810c880 	call	810c88 <__adddf3>
  80d610:	e0c00115 	stw	r3,4(fp)
  80d614:	e0800015 	stw	r2,0(fp)
  80d618:	d9001c17 	ldw	r4,112(sp)
  80d61c:	e4800117 	ldw	r18,4(fp)
  80d620:	2000021e 	bne	r4,zero,80d62c <_strtod_r+0xbe8>
  80d624:	909ffc2c 	andhi	r2,r18,32752
  80d628:	98807f26 	beq	r19,r2,80d828 <_strtod_r+0xde4>
  80d62c:	d9400517 	ldw	r5,20(sp)
  80d630:	a809883a 	mov	r4,r21
  80d634:	080b03c0 	call	80b03c <_Bfree>
  80d638:	a809883a 	mov	r4,r21
  80d63c:	b80b883a 	mov	r5,r23
  80d640:	080b03c0 	call	80b03c <_Bfree>
  80d644:	a809883a 	mov	r4,r21
  80d648:	b00b883a 	mov	r5,r22
  80d64c:	080b03c0 	call	80b03c <_Bfree>
  80d650:	a809883a 	mov	r4,r21
  80d654:	a00b883a 	mov	r5,r20
  80d658:	080b03c0 	call	80b03c <_Bfree>
  80d65c:	003f3c06 	br	80d350 <_strtod_r+0x90c>
  80d660:	b80b883a 	mov	r5,r23
  80d664:	a00d883a 	mov	r6,r20
  80d668:	a809883a 	mov	r4,r21
  80d66c:	080be880 	call	80be88 <__pow5mult>
  80d670:	102f883a 	mov	r23,r2
  80d674:	003f8606 	br	80d490 <_strtod_r+0xa4c>
  80d678:	00800d84 	movi	r2,54
  80d67c:	114dc83a 	sub	r6,r2,r5
  80d680:	003f5f06 	br	80d400 <_strtod_r+0x9bc>
  80d684:	0005883a 	mov	r2,zero
  80d688:	00cff834 	movhi	r3,16352
  80d68c:	8009883a 	mov	r4,r16
  80d690:	880b883a 	mov	r5,r17
  80d694:	180f883a 	mov	r7,r3
  80d698:	100d883a 	mov	r6,r2
  80d69c:	0810cfc0 	call	810cfc <__muldf3>
  80d6a0:	1009883a 	mov	r4,r2
  80d6a4:	d8801a17 	ldw	r2,104(sp)
  80d6a8:	2021883a 	mov	r16,r4
  80d6ac:	1823883a 	mov	r17,r3
  80d6b0:	1025003a 	cmpeq	r18,r2,zero
  80d6b4:	9000451e 	bne	r18,zero,80d7cc <_strtod_r+0xd88>
  80d6b8:	2005883a 	mov	r2,r4
  80d6bc:	d8800715 	stw	r2,28(sp)
  80d6c0:	d8c00815 	stw	r3,32(sp)
  80d6c4:	e1c00117 	ldw	r7,4(fp)
  80d6c8:	009ff834 	movhi	r2,32736
  80d6cc:	3cdffc2c 	andhi	r19,r7,32752
  80d6d0:	98bfa11e 	bne	r19,r2,80d558 <_strtod_r+0xb14>
  80d6d4:	e1000017 	ldw	r4,0(fp)
  80d6d8:	01bf2c34 	movhi	r6,64688
  80d6dc:	398d883a 	add	r6,r7,r6
  80d6e0:	d9000b15 	stw	r4,44(sp)
  80d6e4:	d9c00c15 	stw	r7,48(sp)
  80d6e8:	300b883a 	mov	r5,r6
  80d6ec:	e1800115 	stw	r6,4(fp)
  80d6f0:	080b1f80 	call	80b1f8 <__ulp>
  80d6f4:	d9800717 	ldw	r6,28(sp)
  80d6f8:	d9c00817 	ldw	r7,32(sp)
  80d6fc:	180b883a 	mov	r5,r3
  80d700:	1009883a 	mov	r4,r2
  80d704:	0810cfc0 	call	810cfc <__muldf3>
  80d708:	e2000017 	ldw	r8,0(fp)
  80d70c:	e2400117 	ldw	r9,4(fp)
  80d710:	180b883a 	mov	r5,r3
  80d714:	1009883a 	mov	r4,r2
  80d718:	480f883a 	mov	r7,r9
  80d71c:	400d883a 	mov	r6,r8
  80d720:	0810c880 	call	810c88 <__adddf3>
  80d724:	1009883a 	mov	r4,r2
  80d728:	180b883a 	mov	r5,r3
  80d72c:	009f2834 	movhi	r2,31904
  80d730:	10bfffc4 	addi	r2,r2,-1
  80d734:	18dffc2c 	andhi	r3,r3,32752
  80d738:	e1000015 	stw	r4,0(fp)
  80d73c:	e1400115 	stw	r5,4(fp)
  80d740:	10c0722e 	bgeu	r2,r3,80d90c <_strtod_r+0xec8>
  80d744:	d8800c17 	ldw	r2,48(sp)
  80d748:	011ffc34 	movhi	r4,32752
  80d74c:	213fffc4 	addi	r4,r4,-1
  80d750:	11007d26 	beq	r2,r4,80d948 <_strtod_r+0xf04>
  80d754:	01ffffc4 	movi	r7,-1
  80d758:	e1000115 	stw	r4,4(fp)
  80d75c:	e1c00015 	stw	r7,0(fp)
  80d760:	003fb206 	br	80d62c <_strtod_r+0xbe8>
  80d764:	e0c00017 	ldw	r3,0(fp)
  80d768:	1800251e 	bne	r3,zero,80d800 <_strtod_r+0xdbc>
  80d76c:	e0800117 	ldw	r2,4(fp)
  80d770:	00c00434 	movhi	r3,16
  80d774:	18ffffc4 	addi	r3,r3,-1
  80d778:	10c4703a 	and	r2,r2,r3
  80d77c:	1000241e 	bne	r2,zero,80d810 <_strtod_r+0xdcc>
  80d780:	0005883a 	mov	r2,zero
  80d784:	00cffc34 	movhi	r3,16368
  80d788:	180f883a 	mov	r7,r3
  80d78c:	8009883a 	mov	r4,r16
  80d790:	880b883a 	mov	r5,r17
  80d794:	100d883a 	mov	r6,r2
  80d798:	08112e00 	call	8112e0 <__ltdf2>
  80d79c:	10014616 	blt	r2,zero,80dcb8 <_strtod_r+0x1274>
  80d7a0:	0005883a 	mov	r2,zero
  80d7a4:	00cff834 	movhi	r3,16352
  80d7a8:	880b883a 	mov	r5,r17
  80d7ac:	8009883a 	mov	r4,r16
  80d7b0:	180f883a 	mov	r7,r3
  80d7b4:	100d883a 	mov	r6,r2
  80d7b8:	0810cfc0 	call	810cfc <__muldf3>
  80d7bc:	1823883a 	mov	r17,r3
  80d7c0:	1021883a 	mov	r16,r2
  80d7c4:	18e0003c 	xorhi	r3,r3,32768
  80d7c8:	003fbc06 	br	80d6bc <_strtod_r+0xc78>
  80d7cc:	2005883a 	mov	r2,r4
  80d7d0:	18e0003c 	xorhi	r3,r3,32768
  80d7d4:	003fb906 	br	80d6bc <_strtod_r+0xc78>
  80d7d8:	3827883a 	mov	r19,r7
  80d7dc:	003f1606 	br	80d438 <_strtod_r+0x9f4>
  80d7e0:	4091c83a 	sub	r8,r8,r2
  80d7e4:	003efe06 	br	80d3e0 <_strtod_r+0x99c>
  80d7e8:	d9000f17 	ldw	r4,60(sp)
  80d7ec:	0011883a 	mov	r8,zero
  80d7f0:	0029883a 	mov	r20,zero
  80d7f4:	0113c83a 	sub	r9,zero,r4
  80d7f8:	480f883a 	mov	r7,r9
  80d7fc:	003ef506 	br	80d3d4 <_strtod_r+0x990>
  80d800:	00800044 	movi	r2,1
  80d804:	1880021e 	bne	r3,r2,80d810 <_strtod_r+0xdcc>
  80d808:	e0800117 	ldw	r2,4(fp)
  80d80c:	1000c526 	beq	r2,zero,80db24 <_strtod_r+0x10e0>
  80d810:	00affc34 	movhi	r2,49136
  80d814:	0021883a 	mov	r16,zero
  80d818:	044ffc34 	movhi	r17,16368
  80d81c:	d8800815 	stw	r2,32(sp)
  80d820:	d8000715 	stw	zero,28(sp)
  80d824:	003f4806 	br	80d548 <_strtod_r+0xb04>
  80d828:	880b883a 	mov	r5,r17
  80d82c:	8009883a 	mov	r4,r16
  80d830:	08114e80 	call	8114e8 <__fixdfsi>
  80d834:	1009883a 	mov	r4,r2
  80d838:	08113f00 	call	8113f0 <__floatsidf>
  80d83c:	880b883a 	mov	r5,r17
  80d840:	8009883a 	mov	r4,r16
  80d844:	100d883a 	mov	r6,r2
  80d848:	180f883a 	mov	r7,r3
  80d84c:	0810c080 	call	810c08 <__subdf3>
  80d850:	100b883a 	mov	r5,r2
  80d854:	1021883a 	mov	r16,r2
  80d858:	d8801a17 	ldw	r2,104(sp)
  80d85c:	180d883a 	mov	r6,r3
  80d860:	1823883a 	mov	r17,r3
  80d864:	1000061e 	bne	r2,zero,80d880 <_strtod_r+0xe3c>
  80d868:	e0800017 	ldw	r2,0(fp)
  80d86c:	1000041e 	bne	r2,zero,80d880 <_strtod_r+0xe3c>
  80d870:	00c00434 	movhi	r3,16
  80d874:	18ffffc4 	addi	r3,r3,-1
  80d878:	90c4703a 	and	r2,r18,r3
  80d87c:	10004026 	beq	r2,zero,80d980 <_strtod_r+0xf3c>
  80d880:	00a52834 	movhi	r2,38048
  80d884:	108d6544 	addi	r2,r2,13717
  80d888:	00cff834 	movhi	r3,16352
  80d88c:	18ffffc4 	addi	r3,r3,-1
  80d890:	180f883a 	mov	r7,r3
  80d894:	8009883a 	mov	r4,r16
  80d898:	880b883a 	mov	r5,r17
  80d89c:	100d883a 	mov	r6,r2
  80d8a0:	08112e00 	call	8112e0 <__ltdf2>
  80d8a4:	10000916 	blt	r2,zero,80d8cc <_strtod_r+0xe88>
  80d8a8:	008d6c34 	movhi	r2,13744
  80d8ac:	10b94d44 	addi	r2,r2,-6859
  80d8b0:	00cff834 	movhi	r3,16352
  80d8b4:	880b883a 	mov	r5,r17
  80d8b8:	180f883a 	mov	r7,r3
  80d8bc:	8009883a 	mov	r4,r16
  80d8c0:	100d883a 	mov	r6,r2
  80d8c4:	08111d00 	call	8111d0 <__gtdf2>
  80d8c8:	00bf580e 	bge	zero,r2,80d62c <_strtod_r+0xbe8>
  80d8cc:	d9400517 	ldw	r5,20(sp)
  80d8d0:	a809883a 	mov	r4,r21
  80d8d4:	080b03c0 	call	80b03c <_Bfree>
  80d8d8:	a809883a 	mov	r4,r21
  80d8dc:	b80b883a 	mov	r5,r23
  80d8e0:	080b03c0 	call	80b03c <_Bfree>
  80d8e4:	a809883a 	mov	r4,r21
  80d8e8:	b00b883a 	mov	r5,r22
  80d8ec:	080b03c0 	call	80b03c <_Bfree>
  80d8f0:	d9401017 	ldw	r5,64(sp)
  80d8f4:	a809883a 	mov	r4,r21
  80d8f8:	080b03c0 	call	80b03c <_Bfree>
  80d8fc:	a809883a 	mov	r4,r21
  80d900:	a00b883a 	mov	r5,r20
  80d904:	080b03c0 	call	80b03c <_Bfree>
  80d908:	003cd806 	br	80cc6c <_strtod_r+0x228>
  80d90c:	0080d434 	movhi	r2,848
  80d910:	288d883a 	add	r6,r5,r2
  80d914:	e1800115 	stw	r6,4(fp)
  80d918:	003f3f06 	br	80d618 <_strtod_r+0xbd4>
  80d91c:	8005883a 	mov	r2,r16
  80d920:	88e0003c 	xorhi	r3,r17,32768
  80d924:	003f2206 	br	80d5b0 <_strtod_r+0xb6c>
  80d928:	1009883a 	mov	r4,r2
  80d92c:	0801e580 	call	801e58 <__floatunsidf>
  80d930:	1021883a 	mov	r16,r2
  80d934:	1823883a 	mov	r17,r3
  80d938:	003f1a06 	br	80d5a4 <_strtod_r+0xb60>
  80d93c:	dc000417 	ldw	r16,16(sp)
  80d940:	31800044 	addi	r6,r6,1
  80d944:	003e5606 	br	80d2a0 <_strtod_r+0x85c>
  80d948:	d8c00b17 	ldw	r3,44(sp)
  80d94c:	00bfffc4 	movi	r2,-1
  80d950:	18bf801e 	bne	r3,r2,80d754 <_strtod_r+0xd10>
  80d954:	00c00884 	movi	r3,34
  80d958:	a8c00015 	stw	r3,0(r21)
  80d95c:	009ffc34 	movhi	r2,32752
  80d960:	e0800115 	stw	r2,4(fp)
  80d964:	e0000015 	stw	zero,0(fp)
  80d968:	003fd806 	br	80d8cc <_strtod_r+0xe88>
  80d96c:	8025883a 	mov	r18,r16
  80d970:	0027883a 	mov	r19,zero
  80d974:	d8001215 	stw	zero,72(sp)
  80d978:	d8001115 	stw	zero,68(sp)
  80d97c:	003cac06 	br	80cc30 <_strtod_r+0x1ec>
  80d980:	00a52834 	movhi	r2,38048
  80d984:	108d6544 	addi	r2,r2,13717
  80d988:	00cff434 	movhi	r3,16336
  80d98c:	18ffffc4 	addi	r3,r3,-1
  80d990:	2809883a 	mov	r4,r5
  80d994:	180f883a 	mov	r7,r3
  80d998:	300b883a 	mov	r5,r6
  80d99c:	100d883a 	mov	r6,r2
  80d9a0:	08112e00 	call	8112e0 <__ltdf2>
  80d9a4:	103f210e 	bge	r2,zero,80d62c <_strtod_r+0xbe8>
  80d9a8:	003fc806 	br	80d8cc <_strtod_r+0xe88>
  80d9ac:	00800044 	movi	r2,1
  80d9b0:	d8001815 	stw	zero,96(sp)
  80d9b4:	d8801b15 	stw	r2,108(sp)
  80d9b8:	d8001715 	stw	zero,92(sp)
  80d9bc:	003ca206 	br	80cc48 <_strtod_r+0x204>
  80d9c0:	00800884 	movi	r2,34
  80d9c4:	a8800015 	stw	r2,0(r21)
  80d9c8:	019ffc34 	movhi	r6,32752
  80d9cc:	e1800115 	stw	r6,4(fp)
  80d9d0:	e0000015 	stw	zero,0(fp)
  80d9d4:	003ca506 	br	80cc6c <_strtod_r+0x228>
  80d9d8:	011387c4 	movi	r4,19999
  80d9dc:	003d0206 	br	80cde8 <_strtod_r+0x3a4>
  80d9e0:	180a90fa 	slli	r5,r3,3
  80d9e4:	e0800017 	ldw	r2,0(fp)
  80d9e8:	e0c00117 	ldw	r3,4(fp)
  80d9ec:	01002074 	movhi	r4,129
  80d9f0:	21141f04 	addi	r4,r4,20604
  80d9f4:	290b883a 	add	r5,r5,r4
  80d9f8:	2a000017 	ldw	r8,0(r5)
  80d9fc:	2a400117 	ldw	r9,4(r5)
  80da00:	1009883a 	mov	r4,r2
  80da04:	180b883a 	mov	r5,r3
  80da08:	480f883a 	mov	r7,r9
  80da0c:	400d883a 	mov	r6,r8
  80da10:	0810cfc0 	call	810cfc <__muldf3>
  80da14:	e0c00115 	stw	r3,4(fp)
  80da18:	e0800015 	stw	r2,0(fp)
  80da1c:	003c9306 	br	80cc6c <_strtod_r+0x228>
  80da20:	d8800d17 	ldw	r2,52(sp)
  80da24:	e0800015 	stw	r2,0(fp)
  80da28:	d8c00e17 	ldw	r3,56(sp)
  80da2c:	e0c00115 	stw	r3,4(fp)
  80da30:	9080020c 	andi	r2,r18,8
  80da34:	103c8d26 	beq	r2,zero,80cc6c <_strtod_r+0x228>
  80da38:	e0800117 	ldw	r2,4(fp)
  80da3c:	10a00034 	orhi	r2,r2,32768
  80da40:	e0800115 	stw	r2,4(fp)
  80da44:	003c8906 	br	80cc6c <_strtod_r+0x228>
  80da48:	009ffc34 	movhi	r2,32752
  80da4c:	e0800115 	stw	r2,4(fp)
  80da50:	e0000015 	stw	zero,0(fp)
  80da54:	003ff606 	br	80da30 <_strtod_r+0xfec>
  80da58:	00a00034 	movhi	r2,32768
  80da5c:	10bfffc4 	addi	r2,r2,-1
  80da60:	00ffffc4 	movi	r3,-1
  80da64:	e0800115 	stw	r2,4(fp)
  80da68:	e0c00015 	stw	r3,0(fp)
  80da6c:	003ff006 	br	80da30 <_strtod_r+0xfec>
  80da70:	e0000115 	stw	zero,4(fp)
  80da74:	e0000015 	stw	zero,0(fp)
  80da78:	003fed06 	br	80da30 <_strtod_r+0xfec>
  80da7c:	d8800e17 	ldw	r2,56(sp)
  80da80:	29010cc4 	addi	r4,r5,1075
  80da84:	00fffc34 	movhi	r3,65520
  80da88:	18ffffc4 	addi	r3,r3,-1
  80da8c:	2008953a 	slli	r4,r4,20
  80da90:	10c4703a 	and	r2,r2,r3
  80da94:	d8c00d17 	ldw	r3,52(sp)
  80da98:	1104b03a 	or	r2,r2,r4
  80da9c:	e0800115 	stw	r2,4(fp)
  80daa0:	e0c00015 	stw	r3,0(fp)
  80daa4:	003fe206 	br	80da30 <_strtod_r+0xfec>
  80daa8:	d8c01a17 	ldw	r3,104(sp)
  80daac:	1825003a 	cmpeq	r18,r3,zero
  80dab0:	9000cf1e 	bne	r18,zero,80ddf0 <_strtod_r+0x13ac>
  80dab4:	e1400117 	ldw	r5,4(fp)
  80dab8:	01000434 	movhi	r4,16
  80dabc:	213fffc4 	addi	r4,r4,-1
  80dac0:	2904703a 	and	r2,r5,r4
  80dac4:	11006826 	beq	r2,r4,80dc68 <_strtod_r+0x1224>
  80dac8:	e1c00017 	ldw	r7,0(fp)
  80dacc:	3880004c 	andi	r2,r7,1
  80dad0:	1005003a 	cmpeq	r2,r2,zero
  80dad4:	1000601e 	bne	r2,zero,80dc58 <_strtod_r+0x1214>
  80dad8:	90010426 	beq	r18,zero,80deec <_strtod_r+0x14a8>
  80dadc:	e4400117 	ldw	r17,4(fp)
  80dae0:	3809883a 	mov	r4,r7
  80dae4:	3821883a 	mov	r16,r7
  80dae8:	880b883a 	mov	r5,r17
  80daec:	080b1f80 	call	80b1f8 <__ulp>
  80daf0:	180f883a 	mov	r7,r3
  80daf4:	880b883a 	mov	r5,r17
  80daf8:	8009883a 	mov	r4,r16
  80dafc:	100d883a 	mov	r6,r2
  80db00:	0810c080 	call	810c08 <__subdf3>
  80db04:	1009883a 	mov	r4,r2
  80db08:	000d883a 	mov	r6,zero
  80db0c:	000f883a 	mov	r7,zero
  80db10:	180b883a 	mov	r5,r3
  80db14:	e0800015 	stw	r2,0(fp)
  80db18:	e0c00115 	stw	r3,4(fp)
  80db1c:	08111480 	call	811148 <__nedf2>
  80db20:	10004d1e 	bne	r2,zero,80dc58 <_strtod_r+0x1214>
  80db24:	00800884 	movi	r2,34
  80db28:	a8800015 	stw	r2,0(r21)
  80db2c:	e0000015 	stw	zero,0(fp)
  80db30:	e0000115 	stw	zero,4(fp)
  80db34:	003f6506 	br	80d8cc <_strtod_r+0xe88>
  80db38:	00800044 	movi	r2,1
  80db3c:	d8801915 	stw	r2,100(sp)
  80db40:	003d4406 	br	80d054 <_strtod_r+0x610>
  80db44:	d8c01817 	ldw	r3,96(sp)
  80db48:	1985883a 	add	r2,r3,r6
  80db4c:	11ffffc4 	addi	r7,r2,-1
  80db50:	39000044 	addi	r4,r7,1
  80db54:	00800204 	movi	r2,8
  80db58:	d9001815 	stw	r4,96(sp)
  80db5c:	11c0d716 	blt	r2,r7,80debc <_strtod_r+0x1478>
  80db60:	d9001217 	ldw	r4,72(sp)
  80db64:	01400284 	movi	r5,10
  80db68:	0801fec0 	call	801fec <__mulsi3>
  80db6c:	1585883a 	add	r2,r2,r22
  80db70:	d8801215 	stw	r2,72(sp)
  80db74:	000d883a 	mov	r6,zero
  80db78:	84000044 	addi	r16,r16,1
  80db7c:	dc000415 	stw	r16,16(sp)
  80db80:	84400007 	ldb	r17,0(r16)
  80db84:	003cfc06 	br	80cf78 <_strtod_r+0x534>
  80db88:	d8c01a17 	ldw	r3,104(sp)
  80db8c:	1800321e 	bne	r3,zero,80dc58 <_strtod_r+0x1214>
  80db90:	e0800017 	ldw	r2,0(fp)
  80db94:	1000b31e 	bne	r2,zero,80de64 <_strtod_r+0x1420>
  80db98:	e0c00117 	ldw	r3,4(fp)
  80db9c:	01000434 	movhi	r4,16
  80dba0:	213fffc4 	addi	r4,r4,-1
  80dba4:	1904703a 	and	r2,r3,r4
  80dba8:	1000e71e 	bne	r2,zero,80df48 <_strtod_r+0x1504>
  80dbac:	18dffc2c 	andhi	r3,r3,32752
  80dbb0:	0081ac34 	movhi	r2,1712
  80dbb4:	10c0282e 	bgeu	r2,r3,80dc58 <_strtod_r+0x1214>
  80dbb8:	a0800517 	ldw	r2,20(r20)
  80dbbc:	1000031e 	bne	r2,zero,80dbcc <_strtod_r+0x1188>
  80dbc0:	a0c00417 	ldw	r3,16(r20)
  80dbc4:	00800044 	movi	r2,1
  80dbc8:	10c0a60e 	bge	r2,r3,80de64 <_strtod_r+0x1420>
  80dbcc:	a00b883a 	mov	r5,r20
  80dbd0:	a809883a 	mov	r4,r21
  80dbd4:	01800044 	movi	r6,1
  80dbd8:	080b9800 	call	80b980 <__lshift>
  80dbdc:	1009883a 	mov	r4,r2
  80dbe0:	b00b883a 	mov	r5,r22
  80dbe4:	1029883a 	mov	r20,r2
  80dbe8:	080b1980 	call	80b198 <__mcmp>
  80dbec:	00809d0e 	bge	zero,r2,80de64 <_strtod_r+0x1420>
  80dbf0:	e1800117 	ldw	r6,4(fp)
  80dbf4:	d9001c17 	ldw	r4,112(sp)
  80dbf8:	2013003a 	cmpeq	r9,r4,zero
  80dbfc:	4800d61e 	bne	r9,zero,80df58 <_strtod_r+0x1514>
  80dc00:	30dffc2c 	andhi	r3,r6,32752
  80dc04:	0081ac34 	movhi	r2,1712
  80dc08:	10c0d336 	bltu	r2,r3,80df58 <_strtod_r+0x1514>
  80dc0c:	0080dc34 	movhi	r2,880
  80dc10:	10ffc42e 	bgeu	r2,r3,80db24 <_strtod_r+0x10e0>
  80dc14:	e0800017 	ldw	r2,0(fp)
  80dc18:	e0c00117 	ldw	r3,4(fp)
  80dc1c:	020e5434 	movhi	r8,14672
  80dc20:	000d883a 	mov	r6,zero
  80dc24:	400f883a 	mov	r7,r8
  80dc28:	180b883a 	mov	r5,r3
  80dc2c:	1009883a 	mov	r4,r2
  80dc30:	da000c15 	stw	r8,48(sp)
  80dc34:	d8000b15 	stw	zero,44(sp)
  80dc38:	0810cfc0 	call	810cfc <__muldf3>
  80dc3c:	e0800015 	stw	r2,0(fp)
  80dc40:	e0c00115 	stw	r3,4(fp)
  80dc44:	183f211e 	bne	r3,zero,80d8cc <_strtod_r+0xe88>
  80dc48:	103f201e 	bne	r2,zero,80d8cc <_strtod_r+0xe88>
  80dc4c:	00800884 	movi	r2,34
  80dc50:	a8800015 	stw	r2,0(r21)
  80dc54:	003f1d06 	br	80d8cc <_strtod_r+0xe88>
  80dc58:	d9001c17 	ldw	r4,112(sp)
  80dc5c:	2013003a 	cmpeq	r9,r4,zero
  80dc60:	483f1a1e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80dc64:	003feb06 	br	80dc14 <_strtod_r+0x11d0>
  80dc68:	d8801c17 	ldw	r2,112(sp)
  80dc6c:	e1c00017 	ldw	r7,0(fp)
  80dc70:	1013003a 	cmpeq	r9,r2,zero
  80dc74:	4800c31e 	bne	r9,zero,80df84 <_strtod_r+0x1540>
  80dc78:	28dffc2c 	andhi	r3,r5,32752
  80dc7c:	0081a834 	movhi	r2,1696
  80dc80:	10c0c036 	bltu	r2,r3,80df84 <_strtod_r+0x1540>
  80dc84:	1804d53a 	srli	r2,r3,20
  80dc88:	00c01ac4 	movi	r3,107
  80dc8c:	013fffc4 	movi	r4,-1
  80dc90:	1887c83a 	sub	r3,r3,r2
  80dc94:	20c4983a 	sll	r2,r4,r3
  80dc98:	11ff8c1e 	bne	r2,r7,80dacc <_strtod_r+0x1088>
  80dc9c:	28dffc2c 	andhi	r3,r5,32752
  80dca0:	00800434 	movhi	r2,16
  80dca4:	188d883a 	add	r6,r3,r2
  80dca8:	e1800115 	stw	r6,4(fp)
  80dcac:	e0000015 	stw	zero,0(fp)
  80dcb0:	483f061e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80dcb4:	003fd706 	br	80dc14 <_strtod_r+0x11d0>
  80dcb8:	0021883a 	mov	r16,zero
  80dcbc:	0005883a 	mov	r2,zero
  80dcc0:	044ff834 	movhi	r17,16352
  80dcc4:	00eff834 	movhi	r3,49120
  80dcc8:	003e7c06 	br	80d6bc <_strtod_r+0xc78>
  80dccc:	803d9226 	beq	r16,zero,80d318 <_strtod_r+0x8d4>
  80dcd0:	0421c83a 	sub	r16,zero,r16
  80dcd4:	814003cc 	andi	r5,r16,15
  80dcd8:	28000f26 	beq	r5,zero,80dd18 <_strtod_r+0x12d4>
  80dcdc:	280a90fa 	slli	r5,r5,3
  80dce0:	01002074 	movhi	r4,129
  80dce4:	21141f04 	addi	r4,r4,20604
  80dce8:	e0800017 	ldw	r2,0(fp)
  80dcec:	290b883a 	add	r5,r5,r4
  80dcf0:	2a000017 	ldw	r8,0(r5)
  80dcf4:	e0c00117 	ldw	r3,4(fp)
  80dcf8:	2a400117 	ldw	r9,4(r5)
  80dcfc:	1009883a 	mov	r4,r2
  80dd00:	180b883a 	mov	r5,r3
  80dd04:	480f883a 	mov	r7,r9
  80dd08:	400d883a 	mov	r6,r8
  80dd0c:	0801c000 	call	801c00 <__divdf3>
  80dd10:	e0c00115 	stw	r3,4(fp)
  80dd14:	e0800015 	stw	r2,0(fp)
  80dd18:	8021d13a 	srai	r16,r16,4
  80dd1c:	803d7e26 	beq	r16,zero,80d318 <_strtod_r+0x8d4>
  80dd20:	008007c4 	movi	r2,31
  80dd24:	14002d16 	blt	r2,r16,80dddc <_strtod_r+0x1398>
  80dd28:	8080040c 	andi	r2,r16,16
  80dd2c:	10009d26 	beq	r2,zero,80dfa4 <_strtod_r+0x1560>
  80dd30:	01001a84 	movi	r4,106
  80dd34:	d9001c15 	stw	r4,112(sp)
  80dd38:	0400110e 	bge	zero,r16,80dd80 <_strtod_r+0x133c>
  80dd3c:	04402074 	movhi	r17,129
  80dd40:	8c546c04 	addi	r17,r17,20912
  80dd44:	8080004c 	andi	r2,r16,1
  80dd48:	1005003a 	cmpeq	r2,r2,zero
  80dd4c:	1000091e 	bne	r2,zero,80dd74 <_strtod_r+0x1330>
  80dd50:	e0800017 	ldw	r2,0(fp)
  80dd54:	e0c00117 	ldw	r3,4(fp)
  80dd58:	89800017 	ldw	r6,0(r17)
  80dd5c:	89c00117 	ldw	r7,4(r17)
  80dd60:	180b883a 	mov	r5,r3
  80dd64:	1009883a 	mov	r4,r2
  80dd68:	0810cfc0 	call	810cfc <__muldf3>
  80dd6c:	e0c00115 	stw	r3,4(fp)
  80dd70:	e0800015 	stw	r2,0(fp)
  80dd74:	8021d07a 	srai	r16,r16,1
  80dd78:	8c400204 	addi	r17,r17,8
  80dd7c:	043ff116 	blt	zero,r16,80dd44 <_strtod_r+0x1300>
  80dd80:	d8801c17 	ldw	r2,112(sp)
  80dd84:	10000d26 	beq	r2,zero,80ddbc <_strtod_r+0x1378>
  80dd88:	e1000117 	ldw	r4,4(fp)
  80dd8c:	00c01ac4 	movi	r3,107
  80dd90:	209ffc2c 	andhi	r2,r4,32752
  80dd94:	1004d53a 	srli	r2,r2,20
  80dd98:	1887c83a 	sub	r3,r3,r2
  80dd9c:	00c0070e 	bge	zero,r3,80ddbc <_strtod_r+0x1378>
  80dda0:	008007c4 	movi	r2,31
  80dda4:	10c0940e 	bge	r2,r3,80dff8 <_strtod_r+0x15b4>
  80dda8:	00800d04 	movi	r2,52
  80ddac:	e0000015 	stw	zero,0(fp)
  80ddb0:	10c08b0e 	bge	r2,r3,80dfe0 <_strtod_r+0x159c>
  80ddb4:	0180dc34 	movhi	r6,880
  80ddb8:	e1800115 	stw	r6,4(fp)
  80ddbc:	e0800017 	ldw	r2,0(fp)
  80ddc0:	e0c00117 	ldw	r3,4(fp)
  80ddc4:	000d883a 	mov	r6,zero
  80ddc8:	000f883a 	mov	r7,zero
  80ddcc:	180b883a 	mov	r5,r3
  80ddd0:	1009883a 	mov	r4,r2
  80ddd4:	08111480 	call	811148 <__nedf2>
  80ddd8:	103d501e 	bne	r2,zero,80d31c <_strtod_r+0x8d8>
  80dddc:	00800884 	movi	r2,34
  80dde0:	a8800015 	stw	r2,0(r21)
  80dde4:	e0000015 	stw	zero,0(fp)
  80dde8:	e0000115 	stw	zero,4(fp)
  80ddec:	003b9f06 	br	80cc6c <_strtod_r+0x228>
  80ddf0:	e1800117 	ldw	r6,4(fp)
  80ddf4:	00c00434 	movhi	r3,16
  80ddf8:	18ffffc4 	addi	r3,r3,-1
  80ddfc:	30c4703a 	and	r2,r6,r3
  80de00:	103f311e 	bne	r2,zero,80dac8 <_strtod_r+0x1084>
  80de04:	e1c00017 	ldw	r7,0(fp)
  80de08:	383f301e 	bne	r7,zero,80dacc <_strtod_r+0x1088>
  80de0c:	003f7906 	br	80dbf4 <_strtod_r+0x11b0>
  80de10:	d8c00f17 	ldw	r3,60(sp)
  80de14:	00bffa84 	movi	r2,-22
  80de18:	18bcbf16 	blt	r3,r2,80d118 <_strtod_r+0x6d4>
  80de1c:	1809883a 	mov	r4,r3
  80de20:	017ffe04 	movi	r5,-8
  80de24:	0801fec0 	call	801fec <__mulsi3>
  80de28:	00c02074 	movhi	r3,129
  80de2c:	18d41f04 	addi	r3,r3,20604
  80de30:	10c5883a 	add	r2,r2,r3
  80de34:	e2000017 	ldw	r8,0(fp)
  80de38:	e2400117 	ldw	r9,4(fp)
  80de3c:	12800017 	ldw	r10,0(r2)
  80de40:	12c00117 	ldw	r11,4(r2)
  80de44:	480b883a 	mov	r5,r9
  80de48:	4009883a 	mov	r4,r8
  80de4c:	580f883a 	mov	r7,r11
  80de50:	500d883a 	mov	r6,r10
  80de54:	0801c000 	call	801c00 <__divdf3>
  80de58:	e0c00115 	stw	r3,4(fp)
  80de5c:	e0800015 	stw	r2,0(fp)
  80de60:	003b8206 	br	80cc6c <_strtod_r+0x228>
  80de64:	d8801c17 	ldw	r2,112(sp)
  80de68:	1013003a 	cmpeq	r9,r2,zero
  80de6c:	483e971e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80de70:	003f6806 	br	80dc14 <_strtod_r+0x11d0>
  80de74:	00801a44 	movi	r2,105
  80de78:	88bc5026 	beq	r17,r2,80cfbc <_strtod_r+0x578>
  80de7c:	00801b84 	movi	r2,110
  80de80:	88bb9b1e 	bne	r17,r2,80ccf0 <_strtod_r+0x2ac>
  80de84:	dc000404 	addi	r16,sp,16
  80de88:	8009883a 	mov	r4,r16
  80de8c:	01402074 	movhi	r5,129
  80de90:	29546b04 	addi	r5,r5,20908
  80de94:	080c9fc0 	call	80c9fc <match>
  80de98:	103b9526 	beq	r2,zero,80ccf0 <_strtod_r+0x2ac>
  80de9c:	d8800417 	ldw	r2,16(sp)
  80dea0:	00c00a04 	movi	r3,40
  80dea4:	11000007 	ldb	r4,0(r2)
  80dea8:	20c04026 	beq	r4,r3,80dfac <_strtod_r+0x1568>
  80deac:	01bffe34 	movhi	r6,65528
  80deb0:	e1800115 	stw	r6,4(fp)
  80deb4:	e0000015 	stw	zero,0(fp)
  80deb8:	003b6c06 	br	80cc6c <_strtod_r+0x228>
  80debc:	d8c01817 	ldw	r3,96(sp)
  80dec0:	00800404 	movi	r2,16
  80dec4:	10c00516 	blt	r2,r3,80dedc <_strtod_r+0x1498>
  80dec8:	d9001117 	ldw	r4,68(sp)
  80decc:	01400284 	movi	r5,10
  80ded0:	0801fec0 	call	801fec <__mulsi3>
  80ded4:	1585883a 	add	r2,r2,r22
  80ded8:	d8801115 	stw	r2,68(sp)
  80dedc:	000d883a 	mov	r6,zero
  80dee0:	003f2506 	br	80db78 <_strtod_r+0x1134>
  80dee4:	000d883a 	mov	r6,zero
  80dee8:	003ce306 	br	80d278 <_strtod_r+0x834>
  80deec:	e4400117 	ldw	r17,4(fp)
  80def0:	3809883a 	mov	r4,r7
  80def4:	3821883a 	mov	r16,r7
  80def8:	880b883a 	mov	r5,r17
  80defc:	080b1f80 	call	80b1f8 <__ulp>
  80df00:	180f883a 	mov	r7,r3
  80df04:	880b883a 	mov	r5,r17
  80df08:	8009883a 	mov	r4,r16
  80df0c:	100d883a 	mov	r6,r2
  80df10:	0810c880 	call	810c88 <__adddf3>
  80df14:	180b883a 	mov	r5,r3
  80df18:	d8c01c17 	ldw	r3,112(sp)
  80df1c:	1009883a 	mov	r4,r2
  80df20:	e1400115 	stw	r5,4(fp)
  80df24:	1813003a 	cmpeq	r9,r3,zero
  80df28:	e1000015 	stw	r4,0(fp)
  80df2c:	483e671e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80df30:	003f3806 	br	80dc14 <_strtod_r+0x11d0>
  80df34:	0080d434 	movhi	r2,848
  80df38:	188d883a 	add	r6,r3,r2
  80df3c:	d8001c15 	stw	zero,112(sp)
  80df40:	e1800115 	stw	r6,4(fp)
  80df44:	003cf506 	br	80d31c <_strtod_r+0x8d8>
  80df48:	d8c01c17 	ldw	r3,112(sp)
  80df4c:	1813003a 	cmpeq	r9,r3,zero
  80df50:	483e5e1e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80df54:	003f2f06 	br	80dc14 <_strtod_r+0x11d0>
  80df58:	309ffc2c 	andhi	r2,r6,32752
  80df5c:	00fffc34 	movhi	r3,65520
  80df60:	10c5883a 	add	r2,r2,r3
  80df64:	00c00434 	movhi	r3,16
  80df68:	18ffffc4 	addi	r3,r3,-1
  80df6c:	10ccb03a 	or	r6,r2,r3
  80df70:	01ffffc4 	movi	r7,-1
  80df74:	e1800115 	stw	r6,4(fp)
  80df78:	e1c00015 	stw	r7,0(fp)
  80df7c:	483e531e 	bne	r9,zero,80d8cc <_strtod_r+0xe88>
  80df80:	003f2406 	br	80dc14 <_strtod_r+0x11d0>
  80df84:	00bfffc4 	movi	r2,-1
  80df88:	003f4306 	br	80dc98 <_strtod_r+0x1254>
  80df8c:	0025883a 	mov	r18,zero
  80df90:	05802074 	movhi	r22,129
  80df94:	b5945104 	addi	r22,r22,20804
  80df98:	003c9206 	br	80d1e4 <_strtod_r+0x7a0>
  80df9c:	d9c01817 	ldw	r7,96(sp)
  80dfa0:	003eeb06 	br	80db50 <_strtod_r+0x110c>
  80dfa4:	d8001c15 	stw	zero,112(sp)
  80dfa8:	003f6306 	br	80dd38 <_strtod_r+0x12f4>
  80dfac:	8009883a 	mov	r4,r16
  80dfb0:	01402074 	movhi	r5,129
  80dfb4:	29569904 	addi	r5,r5,23140
  80dfb8:	d9800d04 	addi	r6,sp,52
  80dfbc:	080f5b40 	call	80f5b4 <__hexnan>
  80dfc0:	00c00144 	movi	r3,5
  80dfc4:	10ffb91e 	bne	r2,r3,80deac <_strtod_r+0x1468>
  80dfc8:	d8800e17 	ldw	r2,56(sp)
  80dfcc:	d9c00d17 	ldw	r7,52(sp)
  80dfd0:	119ffc34 	orhi	r6,r2,32752
  80dfd4:	e1800115 	stw	r6,4(fp)
  80dfd8:	e1c00015 	stw	r7,0(fp)
  80dfdc:	003b2306 	br	80cc6c <_strtod_r+0x228>
  80dfe0:	18fff804 	addi	r3,r3,-32
  80dfe4:	00bfffc4 	movi	r2,-1
  80dfe8:	10c4983a 	sll	r2,r2,r3
  80dfec:	208c703a 	and	r6,r4,r2
  80dff0:	e1800115 	stw	r6,4(fp)
  80dff4:	003f7106 	br	80ddbc <_strtod_r+0x1378>
  80dff8:	00bfffc4 	movi	r2,-1
  80dffc:	10c4983a 	sll	r2,r2,r3
  80e000:	e0c00017 	ldw	r3,0(fp)
  80e004:	188e703a 	and	r7,r3,r2
  80e008:	e1c00015 	stw	r7,0(fp)
  80e00c:	003f6b06 	br	80ddbc <_strtod_r+0x1378>

0080e010 <strtof>:
  80e010:	defffa04 	addi	sp,sp,-24
  80e014:	dd000415 	stw	r20,16(sp)
  80e018:	05002074 	movhi	r20,129
  80e01c:	a51b3004 	addi	r20,r20,27840
  80e020:	2007883a 	mov	r3,r4
  80e024:	a1000017 	ldw	r4,0(r20)
  80e028:	280d883a 	mov	r6,r5
  80e02c:	180b883a 	mov	r5,r3
  80e030:	dfc00515 	stw	ra,20(sp)
  80e034:	dcc00315 	stw	r19,12(sp)
  80e038:	dc800215 	stw	r18,8(sp)
  80e03c:	dc400115 	stw	r17,4(sp)
  80e040:	dc000015 	stw	r16,0(sp)
  80e044:	080ca440 	call	80ca44 <_strtod_r>
  80e048:	180b883a 	mov	r5,r3
  80e04c:	1009883a 	mov	r4,r2
  80e050:	1823883a 	mov	r17,r3
  80e054:	1021883a 	mov	r16,r2
  80e058:	08115c00 	call	8115c0 <__truncdfsf2>
  80e05c:	1009883a 	mov	r4,r2
  80e060:	000b883a 	mov	r5,zero
  80e064:	1025883a 	mov	r18,r2
  80e068:	1027883a 	mov	r19,r2
  80e06c:	08106900 	call	810690 <__nesf2>
  80e070:	000d883a 	mov	r6,zero
  80e074:	000f883a 	mov	r7,zero
  80e078:	8009883a 	mov	r4,r16
  80e07c:	880b883a 	mov	r5,r17
  80e080:	10000e1e 	bne	r2,zero,80e0bc <strtof+0xac>
  80e084:	08111480 	call	811148 <__nedf2>
  80e088:	10000c26 	beq	r2,zero,80e0bc <strtof+0xac>
  80e08c:	a0c00017 	ldw	r3,0(r20)
  80e090:	00800884 	movi	r2,34
  80e094:	18800015 	stw	r2,0(r3)
  80e098:	9805883a 	mov	r2,r19
  80e09c:	dfc00517 	ldw	ra,20(sp)
  80e0a0:	dd000417 	ldw	r20,16(sp)
  80e0a4:	dcc00317 	ldw	r19,12(sp)
  80e0a8:	dc800217 	ldw	r18,8(sp)
  80e0ac:	dc400117 	ldw	r17,4(sp)
  80e0b0:	dc000017 	ldw	r16,0(sp)
  80e0b4:	dec00604 	addi	sp,sp,24
  80e0b8:	f800283a 	ret
  80e0bc:	9009883a 	mov	r4,r18
  80e0c0:	015fe034 	movhi	r5,32640
  80e0c4:	297fffc4 	addi	r5,r5,-1
  80e0c8:	08107080 	call	810708 <__gtsf2>
  80e0cc:	00ffffc4 	movi	r3,-1
  80e0d0:	011ffc34 	movhi	r4,32752
  80e0d4:	213fffc4 	addi	r4,r4,-1
  80e0d8:	200f883a 	mov	r7,r4
  80e0dc:	180d883a 	mov	r6,r3
  80e0e0:	8009883a 	mov	r4,r16
  80e0e4:	880b883a 	mov	r5,r17
  80e0e8:	00800f16 	blt	zero,r2,80e128 <strtof+0x118>
  80e0ec:	9009883a 	mov	r4,r18
  80e0f0:	017fe034 	movhi	r5,65408
  80e0f4:	297fffc4 	addi	r5,r5,-1
  80e0f8:	08107800 	call	810780 <__ltsf2>
  80e0fc:	023fffc4 	movi	r8,-1
  80e100:	027ffc34 	movhi	r9,65520
  80e104:	4a7fffc4 	addi	r9,r9,-1
  80e108:	880b883a 	mov	r5,r17
  80e10c:	480f883a 	mov	r7,r9
  80e110:	8009883a 	mov	r4,r16
  80e114:	400d883a 	mov	r6,r8
  80e118:	103fdf0e 	bge	r2,zero,80e098 <strtof+0x88>
  80e11c:	08112e00 	call	8112e0 <__ltdf2>
  80e120:	103fda0e 	bge	r2,zero,80e08c <strtof+0x7c>
  80e124:	003fdc06 	br	80e098 <strtof+0x88>
  80e128:	08111d00 	call	8111d0 <__gtdf2>
  80e12c:	00bfd70e 	bge	zero,r2,80e08c <strtof+0x7c>
  80e130:	003fee06 	br	80e0ec <strtof+0xdc>

0080e134 <strtod>:
  80e134:	01802074 	movhi	r6,129
  80e138:	319b3004 	addi	r6,r6,27840
  80e13c:	2007883a 	mov	r3,r4
  80e140:	31000017 	ldw	r4,0(r6)
  80e144:	280d883a 	mov	r6,r5
  80e148:	180b883a 	mov	r5,r3
  80e14c:	080ca441 	jmpi	80ca44 <_strtod_r>

0080e150 <_strtol_r>:
  80e150:	defff304 	addi	sp,sp,-52
  80e154:	00802074 	movhi	r2,129
  80e158:	109b2f04 	addi	r2,r2,27836
  80e15c:	dd000715 	stw	r20,28(sp)
  80e160:	15000017 	ldw	r20,0(r2)
  80e164:	ddc00a15 	stw	r23,40(sp)
  80e168:	dc800515 	stw	r18,20(sp)
  80e16c:	dc400415 	stw	r17,16(sp)
  80e170:	dfc00c15 	stw	ra,48(sp)
  80e174:	df000b15 	stw	fp,44(sp)
  80e178:	dd800915 	stw	r22,36(sp)
  80e17c:	dd400815 	stw	r21,32(sp)
  80e180:	dcc00615 	stw	r19,24(sp)
  80e184:	dc000315 	stw	r16,12(sp)
  80e188:	282f883a 	mov	r23,r5
  80e18c:	d9000115 	stw	r4,4(sp)
  80e190:	d9800215 	stw	r6,8(sp)
  80e194:	3825883a 	mov	r18,r7
  80e198:	2823883a 	mov	r17,r5
  80e19c:	8c000007 	ldb	r16,0(r17)
  80e1a0:	8c400044 	addi	r17,r17,1
  80e1a4:	a407883a 	add	r3,r20,r16
  80e1a8:	18800003 	ldbu	r2,0(r3)
  80e1ac:	1080020c 	andi	r2,r2,8
  80e1b0:	103ffa1e 	bne	r2,zero,80e19c <_strtol_r+0x4c>
  80e1b4:	00800b44 	movi	r2,45
  80e1b8:	80805c26 	beq	r16,r2,80e32c <_strtol_r+0x1dc>
  80e1bc:	00800ac4 	movi	r2,43
  80e1c0:	80805726 	beq	r16,r2,80e320 <_strtol_r+0x1d0>
  80e1c4:	d8000015 	stw	zero,0(sp)
  80e1c8:	9007003a 	cmpeq	r3,r18,zero
  80e1cc:	1800431e 	bne	r3,zero,80e2dc <_strtol_r+0x18c>
  80e1d0:	00800404 	movi	r2,16
  80e1d4:	90804126 	beq	r18,r2,80e2dc <_strtol_r+0x18c>
  80e1d8:	902b883a 	mov	r21,r18
  80e1dc:	d8c00017 	ldw	r3,0(sp)
  80e1e0:	1838c03a 	cmpne	fp,r3,zero
  80e1e4:	e0004a1e 	bne	fp,zero,80e310 <_strtol_r+0x1c0>
  80e1e8:	04e00034 	movhi	r19,32768
  80e1ec:	9cffffc4 	addi	r19,r19,-1
  80e1f0:	9809883a 	mov	r4,r19
  80e1f4:	a80b883a 	mov	r5,r21
  80e1f8:	08117780 	call	811778 <__umodsi3>
  80e1fc:	9809883a 	mov	r4,r19
  80e200:	a80b883a 	mov	r5,r21
  80e204:	102d883a 	mov	r22,r2
  80e208:	08117700 	call	811770 <__udivsi3>
  80e20c:	1027883a 	mov	r19,r2
  80e210:	a405883a 	add	r2,r20,r16
  80e214:	11400003 	ldbu	r5,0(r2)
  80e218:	0009883a 	mov	r4,zero
  80e21c:	000d883a 	mov	r6,zero
  80e220:	28c0010c 	andi	r3,r5,4
  80e224:	18000f26 	beq	r3,zero,80e264 <_strtol_r+0x114>
  80e228:	843ff404 	addi	r16,r16,-48
  80e22c:	8480150e 	bge	r16,r18,80e284 <_strtol_r+0x134>
  80e230:	30003216 	blt	r6,zero,80e2fc <_strtol_r+0x1ac>
  80e234:	99003136 	bltu	r19,r4,80e2fc <_strtol_r+0x1ac>
  80e238:	24c02f26 	beq	r4,r19,80e2f8 <_strtol_r+0x1a8>
  80e23c:	a80b883a 	mov	r5,r21
  80e240:	0801fec0 	call	801fec <__mulsi3>
  80e244:	1409883a 	add	r4,r2,r16
  80e248:	01800044 	movi	r6,1
  80e24c:	8c000007 	ldb	r16,0(r17)
  80e250:	8c400044 	addi	r17,r17,1
  80e254:	a405883a 	add	r2,r20,r16
  80e258:	11400003 	ldbu	r5,0(r2)
  80e25c:	28c0010c 	andi	r3,r5,4
  80e260:	183ff11e 	bne	r3,zero,80e228 <_strtol_r+0xd8>
  80e264:	288000cc 	andi	r2,r5,3
  80e268:	10000626 	beq	r2,zero,80e284 <_strtol_r+0x134>
  80e26c:	2880004c 	andi	r2,r5,1
  80e270:	1005003a 	cmpeq	r2,r2,zero
  80e274:	1000231e 	bne	r2,zero,80e304 <_strtol_r+0x1b4>
  80e278:	00800dc4 	movi	r2,55
  80e27c:	80a1c83a 	sub	r16,r16,r2
  80e280:	84bfeb16 	blt	r16,r18,80e230 <_strtol_r+0xe0>
  80e284:	30002e16 	blt	r6,zero,80e340 <_strtol_r+0x1f0>
  80e288:	e000231e 	bne	fp,zero,80e318 <_strtol_r+0x1c8>
  80e28c:	2007883a 	mov	r3,r4
  80e290:	d8800217 	ldw	r2,8(sp)
  80e294:	10000426 	beq	r2,zero,80e2a8 <_strtol_r+0x158>
  80e298:	30000126 	beq	r6,zero,80e2a0 <_strtol_r+0x150>
  80e29c:	8dffffc4 	addi	r23,r17,-1
  80e2a0:	d9000217 	ldw	r4,8(sp)
  80e2a4:	25c00015 	stw	r23,0(r4)
  80e2a8:	1805883a 	mov	r2,r3
  80e2ac:	dfc00c17 	ldw	ra,48(sp)
  80e2b0:	df000b17 	ldw	fp,44(sp)
  80e2b4:	ddc00a17 	ldw	r23,40(sp)
  80e2b8:	dd800917 	ldw	r22,36(sp)
  80e2bc:	dd400817 	ldw	r21,32(sp)
  80e2c0:	dd000717 	ldw	r20,28(sp)
  80e2c4:	dcc00617 	ldw	r19,24(sp)
  80e2c8:	dc800517 	ldw	r18,20(sp)
  80e2cc:	dc400417 	ldw	r17,16(sp)
  80e2d0:	dc000317 	ldw	r16,12(sp)
  80e2d4:	dec00d04 	addi	sp,sp,52
  80e2d8:	f800283a 	ret
  80e2dc:	00800c04 	movi	r2,48
  80e2e0:	80801f26 	beq	r16,r2,80e360 <_strtol_r+0x210>
  80e2e4:	183fbc26 	beq	r3,zero,80e1d8 <_strtol_r+0x88>
  80e2e8:	00800c04 	movi	r2,48
  80e2ec:	80802926 	beq	r16,r2,80e394 <_strtol_r+0x244>
  80e2f0:	04800284 	movi	r18,10
  80e2f4:	003fb806 	br	80e1d8 <_strtol_r+0x88>
  80e2f8:	b43fd00e 	bge	r22,r16,80e23c <_strtol_r+0xec>
  80e2fc:	01bfffc4 	movi	r6,-1
  80e300:	003fd206 	br	80e24c <_strtol_r+0xfc>
  80e304:	008015c4 	movi	r2,87
  80e308:	80a1c83a 	sub	r16,r16,r2
  80e30c:	003fdc06 	br	80e280 <_strtol_r+0x130>
  80e310:	04e00034 	movhi	r19,32768
  80e314:	003fb606 	br	80e1f0 <_strtol_r+0xa0>
  80e318:	0107c83a 	sub	r3,zero,r4
  80e31c:	003fdc06 	br	80e290 <_strtol_r+0x140>
  80e320:	8c000007 	ldb	r16,0(r17)
  80e324:	8c400044 	addi	r17,r17,1
  80e328:	003fa606 	br	80e1c4 <_strtol_r+0x74>
  80e32c:	8c000007 	ldb	r16,0(r17)
  80e330:	00800044 	movi	r2,1
  80e334:	8c400044 	addi	r17,r17,1
  80e338:	d8800015 	stw	r2,0(sp)
  80e33c:	003fa206 	br	80e1c8 <_strtol_r+0x78>
  80e340:	d9000017 	ldw	r4,0(sp)
  80e344:	2005003a 	cmpeq	r2,r4,zero
  80e348:	10000f1e 	bne	r2,zero,80e388 <_strtol_r+0x238>
  80e34c:	00e00034 	movhi	r3,32768
  80e350:	d9000117 	ldw	r4,4(sp)
  80e354:	00800884 	movi	r2,34
  80e358:	20800015 	stw	r2,0(r4)
  80e35c:	003fcc06 	br	80e290 <_strtol_r+0x140>
  80e360:	89000007 	ldb	r4,0(r17)
  80e364:	00801e04 	movi	r2,120
  80e368:	20800226 	beq	r4,r2,80e374 <_strtol_r+0x224>
  80e36c:	00801604 	movi	r2,88
  80e370:	20bfdc1e 	bne	r4,r2,80e2e4 <_strtol_r+0x194>
  80e374:	8c000047 	ldb	r16,1(r17)
  80e378:	04800404 	movi	r18,16
  80e37c:	8c400084 	addi	r17,r17,2
  80e380:	902b883a 	mov	r21,r18
  80e384:	003f9506 	br	80e1dc <_strtol_r+0x8c>
  80e388:	00e00034 	movhi	r3,32768
  80e38c:	18ffffc4 	addi	r3,r3,-1
  80e390:	003fef06 	br	80e350 <_strtol_r+0x200>
  80e394:	04800204 	movi	r18,8
  80e398:	902b883a 	mov	r21,r18
  80e39c:	003f8f06 	br	80e1dc <_strtol_r+0x8c>

0080e3a0 <strtol>:
  80e3a0:	00802074 	movhi	r2,129
  80e3a4:	109b3004 	addi	r2,r2,27840
  80e3a8:	2013883a 	mov	r9,r4
  80e3ac:	11000017 	ldw	r4,0(r2)
  80e3b0:	2805883a 	mov	r2,r5
  80e3b4:	300f883a 	mov	r7,r6
  80e3b8:	480b883a 	mov	r5,r9
  80e3bc:	100d883a 	mov	r6,r2
  80e3c0:	080e1501 	jmpi	80e150 <_strtol_r>

0080e3c4 <_strtoll_r>:
  80e3c4:	defff004 	addi	sp,sp,-64
  80e3c8:	00802074 	movhi	r2,129
  80e3cc:	109b2f04 	addi	r2,r2,27836
  80e3d0:	df000e15 	stw	fp,56(sp)
  80e3d4:	17000017 	ldw	fp,0(r2)
  80e3d8:	ddc00d15 	stw	r23,52(sp)
  80e3dc:	dd000a15 	stw	r20,40(sp)
  80e3e0:	dfc00f15 	stw	ra,60(sp)
  80e3e4:	dd800c15 	stw	r22,48(sp)
  80e3e8:	dd400b15 	stw	r21,44(sp)
  80e3ec:	dcc00915 	stw	r19,36(sp)
  80e3f0:	dc800815 	stw	r18,32(sp)
  80e3f4:	dc400715 	stw	r17,28(sp)
  80e3f8:	dc000615 	stw	r16,24(sp)
  80e3fc:	d9400315 	stw	r5,12(sp)
  80e400:	d9000215 	stw	r4,8(sp)
  80e404:	d9800415 	stw	r6,16(sp)
  80e408:	382f883a 	mov	r23,r7
  80e40c:	2829883a 	mov	r20,r5
  80e410:	a4c00007 	ldb	r19,0(r20)
  80e414:	a5000044 	addi	r20,r20,1
  80e418:	e4c7883a 	add	r3,fp,r19
  80e41c:	18800003 	ldbu	r2,0(r3)
  80e420:	1080020c 	andi	r2,r2,8
  80e424:	103ffa1e 	bne	r2,zero,80e410 <_strtoll_r+0x4c>
  80e428:	00800b44 	movi	r2,45
  80e42c:	98808826 	beq	r19,r2,80e650 <_strtoll_r+0x28c>
  80e430:	00800ac4 	movi	r2,43
  80e434:	98808326 	beq	r19,r2,80e644 <_strtoll_r+0x280>
  80e438:	d8000115 	stw	zero,4(sp)
  80e43c:	b807003a 	cmpeq	r3,r23,zero
  80e440:	18005f1e 	bne	r3,zero,80e5c0 <_strtoll_r+0x1fc>
  80e444:	00800404 	movi	r2,16
  80e448:	b8805d26 	beq	r23,r2,80e5c0 <_strtoll_r+0x1fc>
  80e44c:	b82dd7fa 	srai	r22,r23,31
  80e450:	b82b883a 	mov	r21,r23
  80e454:	d8c00117 	ldw	r3,4(sp)
  80e458:	1806c03a 	cmpne	r3,r3,zero
  80e45c:	d8c00515 	stw	r3,20(sp)
  80e460:	1800631e 	bne	r3,zero,80e5f0 <_strtoll_r+0x22c>
  80e464:	043fffc4 	movi	r16,-1
  80e468:	04600034 	movhi	r17,32768
  80e46c:	8c7fffc4 	addi	r17,r17,-1
  80e470:	880b883a 	mov	r5,r17
  80e474:	8009883a 	mov	r4,r16
  80e478:	a80d883a 	mov	r6,r21
  80e47c:	b00f883a 	mov	r7,r22
  80e480:	08100300 	call	810030 <__umoddi3>
  80e484:	880b883a 	mov	r5,r17
  80e488:	8009883a 	mov	r4,r16
  80e48c:	b00f883a 	mov	r7,r22
  80e490:	a80d883a 	mov	r6,r21
  80e494:	d8800015 	stw	r2,0(sp)
  80e498:	080f9c40 	call	80f9c4 <__udivdi3>
  80e49c:	1023883a 	mov	r17,r2
  80e4a0:	e4c5883a 	add	r2,fp,r19
  80e4a4:	11000003 	ldbu	r4,0(r2)
  80e4a8:	1825883a 	mov	r18,r3
  80e4ac:	0015883a 	mov	r10,zero
  80e4b0:	20c0010c 	andi	r3,r4,4
  80e4b4:	0017883a 	mov	r11,zero
  80e4b8:	000f883a 	mov	r7,zero
  80e4bc:	18001a26 	beq	r3,zero,80e528 <_strtoll_r+0x164>
  80e4c0:	9c3ff404 	addi	r16,r19,-48
  80e4c4:	85c0200e 	bge	r16,r23,80e548 <_strtoll_r+0x184>
  80e4c8:	38003b16 	blt	r7,zero,80e5b8 <_strtoll_r+0x1f4>
  80e4cc:	92c03a36 	bltu	r18,r11,80e5b8 <_strtoll_r+0x1f4>
  80e4d0:	5c803826 	beq	r11,r18,80e5b4 <_strtoll_r+0x1f0>
  80e4d4:	54404c26 	beq	r10,r17,80e608 <_strtoll_r+0x244>
  80e4d8:	580b883a 	mov	r5,r11
  80e4dc:	5009883a 	mov	r4,r10
  80e4e0:	a80d883a 	mov	r6,r21
  80e4e4:	b00f883a 	mov	r7,r22
  80e4e8:	080f7fc0 	call	80f7fc <__muldi3>
  80e4ec:	8013d7fa 	srai	r9,r16,31
  80e4f0:	100d883a 	mov	r6,r2
  80e4f4:	1405883a 	add	r2,r2,r16
  80e4f8:	118d803a 	cmpltu	r6,r2,r6
  80e4fc:	1a47883a 	add	r3,r3,r9
  80e500:	30cd883a 	add	r6,r6,r3
  80e504:	1015883a 	mov	r10,r2
  80e508:	3017883a 	mov	r11,r6
  80e50c:	01c00044 	movi	r7,1
  80e510:	a4c00007 	ldb	r19,0(r20)
  80e514:	a5000044 	addi	r20,r20,1
  80e518:	e4c5883a 	add	r2,fp,r19
  80e51c:	11000003 	ldbu	r4,0(r2)
  80e520:	20c0010c 	andi	r3,r4,4
  80e524:	183fe61e 	bne	r3,zero,80e4c0 <_strtoll_r+0xfc>
  80e528:	208000cc 	andi	r2,r4,3
  80e52c:	10000626 	beq	r2,zero,80e548 <_strtoll_r+0x184>
  80e530:	2080004c 	andi	r2,r4,1
  80e534:	1005003a 	cmpeq	r2,r2,zero
  80e538:	1000301e 	bne	r2,zero,80e5fc <_strtoll_r+0x238>
  80e53c:	02000dc4 	movi	r8,55
  80e540:	9a21c83a 	sub	r16,r19,r8
  80e544:	85ffe016 	blt	r16,r23,80e4c8 <_strtoll_r+0x104>
  80e548:	38004616 	blt	r7,zero,80e664 <_strtoll_r+0x2a0>
  80e54c:	d8800517 	ldw	r2,20(sp)
  80e550:	1000341e 	bne	r2,zero,80e624 <_strtoll_r+0x260>
  80e554:	500b883a 	mov	r5,r10
  80e558:	580d883a 	mov	r6,r11
  80e55c:	d8c00417 	ldw	r3,16(sp)
  80e560:	18000626 	beq	r3,zero,80e57c <_strtoll_r+0x1b8>
  80e564:	38000226 	beq	r7,zero,80e570 <_strtoll_r+0x1ac>
  80e568:	a53fffc4 	addi	r20,r20,-1
  80e56c:	dd000315 	stw	r20,12(sp)
  80e570:	d8c00317 	ldw	r3,12(sp)
  80e574:	d8800417 	ldw	r2,16(sp)
  80e578:	10c00015 	stw	r3,0(r2)
  80e57c:	2805883a 	mov	r2,r5
  80e580:	3007883a 	mov	r3,r6
  80e584:	dfc00f17 	ldw	ra,60(sp)
  80e588:	df000e17 	ldw	fp,56(sp)
  80e58c:	ddc00d17 	ldw	r23,52(sp)
  80e590:	dd800c17 	ldw	r22,48(sp)
  80e594:	dd400b17 	ldw	r21,44(sp)
  80e598:	dd000a17 	ldw	r20,40(sp)
  80e59c:	dcc00917 	ldw	r19,36(sp)
  80e5a0:	dc800817 	ldw	r18,32(sp)
  80e5a4:	dc400717 	ldw	r17,28(sp)
  80e5a8:	dc000617 	ldw	r16,24(sp)
  80e5ac:	dec01004 	addi	sp,sp,64
  80e5b0:	f800283a 	ret
  80e5b4:	8abfc72e 	bgeu	r17,r10,80e4d4 <_strtoll_r+0x110>
  80e5b8:	01ffffc4 	movi	r7,-1
  80e5bc:	003fd406 	br	80e510 <_strtoll_r+0x14c>
  80e5c0:	00800c04 	movi	r2,48
  80e5c4:	98803226 	beq	r19,r2,80e690 <_strtoll_r+0x2cc>
  80e5c8:	183fa026 	beq	r3,zero,80e44c <_strtoll_r+0x88>
  80e5cc:	00800c04 	movi	r2,48
  80e5d0:	98803e26 	beq	r19,r2,80e6cc <_strtoll_r+0x308>
  80e5d4:	d8c00117 	ldw	r3,4(sp)
  80e5d8:	05c00284 	movi	r23,10
  80e5dc:	b82b883a 	mov	r21,r23
  80e5e0:	1806c03a 	cmpne	r3,r3,zero
  80e5e4:	002d883a 	mov	r22,zero
  80e5e8:	d8c00515 	stw	r3,20(sp)
  80e5ec:	183f9d26 	beq	r3,zero,80e464 <_strtoll_r+0xa0>
  80e5f0:	0021883a 	mov	r16,zero
  80e5f4:	04600034 	movhi	r17,32768
  80e5f8:	003f9d06 	br	80e470 <_strtoll_r+0xac>
  80e5fc:	020015c4 	movi	r8,87
  80e600:	9a21c83a 	sub	r16,r19,r8
  80e604:	003fcf06 	br	80e544 <_strtoll_r+0x180>
  80e608:	5cbfb31e 	bne	r11,r18,80e4d8 <_strtoll_r+0x114>
  80e60c:	d8800017 	ldw	r2,0(sp)
  80e610:	143fb10e 	bge	r2,r16,80e4d8 <_strtoll_r+0x114>
  80e614:	8815883a 	mov	r10,r17
  80e618:	9017883a 	mov	r11,r18
  80e61c:	01ffffc4 	movi	r7,-1
  80e620:	003fbb06 	br	80e510 <_strtoll_r+0x14c>
  80e624:	0009883a 	mov	r4,zero
  80e628:	2285c83a 	sub	r2,r4,r10
  80e62c:	2089803a 	cmpltu	r4,r4,r2
  80e630:	02c7c83a 	sub	r3,zero,r11
  80e634:	1909c83a 	sub	r4,r3,r4
  80e638:	100b883a 	mov	r5,r2
  80e63c:	200d883a 	mov	r6,r4
  80e640:	003fc606 	br	80e55c <_strtoll_r+0x198>
  80e644:	a4c00007 	ldb	r19,0(r20)
  80e648:	a5000044 	addi	r20,r20,1
  80e64c:	003f7a06 	br	80e438 <_strtoll_r+0x74>
  80e650:	a4c00007 	ldb	r19,0(r20)
  80e654:	00800044 	movi	r2,1
  80e658:	a5000044 	addi	r20,r20,1
  80e65c:	d8800115 	stw	r2,4(sp)
  80e660:	003f7606 	br	80e43c <_strtoll_r+0x78>
  80e664:	d8c00117 	ldw	r3,4(sp)
  80e668:	1805003a 	cmpeq	r2,r3,zero
  80e66c:	1000131e 	bne	r2,zero,80e6bc <_strtoll_r+0x2f8>
  80e670:	0005883a 	mov	r2,zero
  80e674:	00e00034 	movhi	r3,32768
  80e678:	100b883a 	mov	r5,r2
  80e67c:	180d883a 	mov	r6,r3
  80e680:	d8c00217 	ldw	r3,8(sp)
  80e684:	00800884 	movi	r2,34
  80e688:	18800015 	stw	r2,0(r3)
  80e68c:	003fb306 	br	80e55c <_strtoll_r+0x198>
  80e690:	a1000007 	ldb	r4,0(r20)
  80e694:	00801e04 	movi	r2,120
  80e698:	20800226 	beq	r4,r2,80e6a4 <_strtoll_r+0x2e0>
  80e69c:	00801604 	movi	r2,88
  80e6a0:	20bfc91e 	bne	r4,r2,80e5c8 <_strtoll_r+0x204>
  80e6a4:	a4c00047 	ldb	r19,1(r20)
  80e6a8:	05c00404 	movi	r23,16
  80e6ac:	b82b883a 	mov	r21,r23
  80e6b0:	a5000084 	addi	r20,r20,2
  80e6b4:	002d883a 	mov	r22,zero
  80e6b8:	003f6606 	br	80e454 <_strtoll_r+0x90>
  80e6bc:	017fffc4 	movi	r5,-1
  80e6c0:	01a00034 	movhi	r6,32768
  80e6c4:	31bfffc4 	addi	r6,r6,-1
  80e6c8:	003fed06 	br	80e680 <_strtoll_r+0x2bc>
  80e6cc:	05c00204 	movi	r23,8
  80e6d0:	b82b883a 	mov	r21,r23
  80e6d4:	002d883a 	mov	r22,zero
  80e6d8:	003f5e06 	br	80e454 <_strtoll_r+0x90>

0080e6dc <_strtoul_r>:
  80e6dc:	defff404 	addi	sp,sp,-48
  80e6e0:	00802074 	movhi	r2,129
  80e6e4:	109b2f04 	addi	r2,r2,27836
  80e6e8:	dd000615 	stw	r20,24(sp)
  80e6ec:	15000017 	ldw	r20,0(r2)
  80e6f0:	df000a15 	stw	fp,40(sp)
  80e6f4:	ddc00915 	stw	r23,36(sp)
  80e6f8:	dc800415 	stw	r18,16(sp)
  80e6fc:	dc400315 	stw	r17,12(sp)
  80e700:	dfc00b15 	stw	ra,44(sp)
  80e704:	dd800815 	stw	r22,32(sp)
  80e708:	dd400715 	stw	r21,28(sp)
  80e70c:	dcc00515 	stw	r19,20(sp)
  80e710:	dc000215 	stw	r16,8(sp)
  80e714:	282f883a 	mov	r23,r5
  80e718:	d9000115 	stw	r4,4(sp)
  80e71c:	3039883a 	mov	fp,r6
  80e720:	3825883a 	mov	r18,r7
  80e724:	2823883a 	mov	r17,r5
  80e728:	8c000007 	ldb	r16,0(r17)
  80e72c:	8c400044 	addi	r17,r17,1
  80e730:	a407883a 	add	r3,r20,r16
  80e734:	18800003 	ldbu	r2,0(r3)
  80e738:	1080020c 	andi	r2,r2,8
  80e73c:	103ffa1e 	bne	r2,zero,80e728 <_strtoul_r+0x4c>
  80e740:	00800b44 	movi	r2,45
  80e744:	80805826 	beq	r16,r2,80e8a8 <_strtoul_r+0x1cc>
  80e748:	00800ac4 	movi	r2,43
  80e74c:	80805326 	beq	r16,r2,80e89c <_strtoul_r+0x1c0>
  80e750:	d8000015 	stw	zero,0(sp)
  80e754:	9007003a 	cmpeq	r3,r18,zero
  80e758:	18003d1e 	bne	r3,zero,80e850 <_strtoul_r+0x174>
  80e75c:	00800404 	movi	r2,16
  80e760:	90803b26 	beq	r18,r2,80e850 <_strtoul_r+0x174>
  80e764:	013fffc4 	movi	r4,-1
  80e768:	900b883a 	mov	r5,r18
  80e76c:	08117700 	call	811770 <__udivsi3>
  80e770:	013fffc4 	movi	r4,-1
  80e774:	900b883a 	mov	r5,r18
  80e778:	1027883a 	mov	r19,r2
  80e77c:	08117780 	call	811778 <__umodsi3>
  80e780:	102d883a 	mov	r22,r2
  80e784:	902b883a 	mov	r21,r18
  80e788:	a405883a 	add	r2,r20,r16
  80e78c:	11400003 	ldbu	r5,0(r2)
  80e790:	0009883a 	mov	r4,zero
  80e794:	000d883a 	mov	r6,zero
  80e798:	28c0010c 	andi	r3,r5,4
  80e79c:	18000f26 	beq	r3,zero,80e7dc <_strtoul_r+0x100>
  80e7a0:	843ff404 	addi	r16,r16,-48
  80e7a4:	8480150e 	bge	r16,r18,80e7fc <_strtoul_r+0x120>
  80e7a8:	30003516 	blt	r6,zero,80e880 <_strtoul_r+0x1a4>
  80e7ac:	99003436 	bltu	r19,r4,80e880 <_strtoul_r+0x1a4>
  80e7b0:	24c03226 	beq	r4,r19,80e87c <_strtoul_r+0x1a0>
  80e7b4:	a80b883a 	mov	r5,r21
  80e7b8:	0801fec0 	call	801fec <__mulsi3>
  80e7bc:	1409883a 	add	r4,r2,r16
  80e7c0:	01800044 	movi	r6,1
  80e7c4:	8c000007 	ldb	r16,0(r17)
  80e7c8:	8c400044 	addi	r17,r17,1
  80e7cc:	a405883a 	add	r2,r20,r16
  80e7d0:	11400003 	ldbu	r5,0(r2)
  80e7d4:	28c0010c 	andi	r3,r5,4
  80e7d8:	183ff11e 	bne	r3,zero,80e7a0 <_strtoul_r+0xc4>
  80e7dc:	288000cc 	andi	r2,r5,3
  80e7e0:	10000626 	beq	r2,zero,80e7fc <_strtoul_r+0x120>
  80e7e4:	2880004c 	andi	r2,r5,1
  80e7e8:	1005003a 	cmpeq	r2,r2,zero
  80e7ec:	1000261e 	bne	r2,zero,80e888 <_strtoul_r+0x1ac>
  80e7f0:	00800dc4 	movi	r2,55
  80e7f4:	80a1c83a 	sub	r16,r16,r2
  80e7f8:	84bfeb16 	blt	r16,r18,80e7a8 <_strtoul_r+0xcc>
  80e7fc:	3000420e 	bge	r6,zero,80e908 <_strtoul_r+0x22c>
  80e800:	d8c00117 	ldw	r3,4(sp)
  80e804:	00800884 	movi	r2,34
  80e808:	013fffc4 	movi	r4,-1
  80e80c:	18800015 	stw	r2,0(r3)
  80e810:	e0000226 	beq	fp,zero,80e81c <_strtoul_r+0x140>
  80e814:	30001f1e 	bne	r6,zero,80e894 <_strtoul_r+0x1b8>
  80e818:	e5c00015 	stw	r23,0(fp)
  80e81c:	2005883a 	mov	r2,r4
  80e820:	dfc00b17 	ldw	ra,44(sp)
  80e824:	df000a17 	ldw	fp,40(sp)
  80e828:	ddc00917 	ldw	r23,36(sp)
  80e82c:	dd800817 	ldw	r22,32(sp)
  80e830:	dd400717 	ldw	r21,28(sp)
  80e834:	dd000617 	ldw	r20,24(sp)
  80e838:	dcc00517 	ldw	r19,20(sp)
  80e83c:	dc800417 	ldw	r18,16(sp)
  80e840:	dc400317 	ldw	r17,12(sp)
  80e844:	dc000217 	ldw	r16,8(sp)
  80e848:	dec00c04 	addi	sp,sp,48
  80e84c:	f800283a 	ret
  80e850:	00800c04 	movi	r2,48
  80e854:	80801926 	beq	r16,r2,80e8bc <_strtoul_r+0x1e0>
  80e858:	183fc226 	beq	r3,zero,80e764 <_strtoul_r+0x88>
  80e85c:	00800c04 	movi	r2,48
  80e860:	80802326 	beq	r16,r2,80e8f0 <_strtoul_r+0x214>
  80e864:	04800284 	movi	r18,10
  80e868:	902b883a 	mov	r21,r18
  80e86c:	04c666b4 	movhi	r19,6554
  80e870:	9ce66644 	addi	r19,r19,-26215
  80e874:	05800144 	movi	r22,5
  80e878:	003fc306 	br	80e788 <_strtoul_r+0xac>
  80e87c:	b43fcd0e 	bge	r22,r16,80e7b4 <_strtoul_r+0xd8>
  80e880:	01bfffc4 	movi	r6,-1
  80e884:	003fcf06 	br	80e7c4 <_strtoul_r+0xe8>
  80e888:	008015c4 	movi	r2,87
  80e88c:	80a1c83a 	sub	r16,r16,r2
  80e890:	003fd906 	br	80e7f8 <_strtoul_r+0x11c>
  80e894:	8dffffc4 	addi	r23,r17,-1
  80e898:	003fdf06 	br	80e818 <_strtoul_r+0x13c>
  80e89c:	8c000007 	ldb	r16,0(r17)
  80e8a0:	8c400044 	addi	r17,r17,1
  80e8a4:	003faa06 	br	80e750 <_strtoul_r+0x74>
  80e8a8:	8c000007 	ldb	r16,0(r17)
  80e8ac:	00800044 	movi	r2,1
  80e8b0:	8c400044 	addi	r17,r17,1
  80e8b4:	d8800015 	stw	r2,0(sp)
  80e8b8:	003fa606 	br	80e754 <_strtoul_r+0x78>
  80e8bc:	89000007 	ldb	r4,0(r17)
  80e8c0:	00801e04 	movi	r2,120
  80e8c4:	20800226 	beq	r4,r2,80e8d0 <_strtoul_r+0x1f4>
  80e8c8:	00801604 	movi	r2,88
  80e8cc:	20bfe21e 	bne	r4,r2,80e858 <_strtoul_r+0x17c>
  80e8d0:	8c000047 	ldb	r16,1(r17)
  80e8d4:	04800404 	movi	r18,16
  80e8d8:	8c400084 	addi	r17,r17,2
  80e8dc:	902b883a 	mov	r21,r18
  80e8e0:	04c40034 	movhi	r19,4096
  80e8e4:	9cffffc4 	addi	r19,r19,-1
  80e8e8:	058003c4 	movi	r22,15
  80e8ec:	003fa606 	br	80e788 <_strtoul_r+0xac>
  80e8f0:	04800204 	movi	r18,8
  80e8f4:	902b883a 	mov	r21,r18
  80e8f8:	04c80034 	movhi	r19,8192
  80e8fc:	9cffffc4 	addi	r19,r19,-1
  80e900:	058001c4 	movi	r22,7
  80e904:	003fa006 	br	80e788 <_strtoul_r+0xac>
  80e908:	d8c00017 	ldw	r3,0(sp)
  80e90c:	1805003a 	cmpeq	r2,r3,zero
  80e910:	103fbf1e 	bne	r2,zero,80e810 <_strtoul_r+0x134>
  80e914:	0109c83a 	sub	r4,zero,r4
  80e918:	003fbd06 	br	80e810 <_strtoul_r+0x134>

0080e91c <strtoul>:
  80e91c:	00802074 	movhi	r2,129
  80e920:	109b3004 	addi	r2,r2,27840
  80e924:	2013883a 	mov	r9,r4
  80e928:	11000017 	ldw	r4,0(r2)
  80e92c:	2805883a 	mov	r2,r5
  80e930:	300f883a 	mov	r7,r6
  80e934:	480b883a 	mov	r5,r9
  80e938:	100d883a 	mov	r6,r2
  80e93c:	080e6dc1 	jmpi	80e6dc <_strtoul_r>

0080e940 <_strtoull_r>:
  80e940:	defff104 	addi	sp,sp,-60
  80e944:	00802074 	movhi	r2,129
  80e948:	109b2f04 	addi	r2,r2,27836
  80e94c:	df000d15 	stw	fp,52(sp)
  80e950:	17000017 	ldw	fp,0(r2)
  80e954:	ddc00c15 	stw	r23,48(sp)
  80e958:	dcc00815 	stw	r19,32(sp)
  80e95c:	dfc00e15 	stw	ra,56(sp)
  80e960:	dd800b15 	stw	r22,44(sp)
  80e964:	dd400a15 	stw	r21,40(sp)
  80e968:	dd000915 	stw	r20,36(sp)
  80e96c:	dc800715 	stw	r18,28(sp)
  80e970:	dc400615 	stw	r17,24(sp)
  80e974:	dc000515 	stw	r16,20(sp)
  80e978:	d9400215 	stw	r5,8(sp)
  80e97c:	d9000115 	stw	r4,4(sp)
  80e980:	d9800315 	stw	r6,12(sp)
  80e984:	382f883a 	mov	r23,r7
  80e988:	2827883a 	mov	r19,r5
  80e98c:	9d000007 	ldb	r20,0(r19)
  80e990:	9cc00044 	addi	r19,r19,1
  80e994:	e507883a 	add	r3,fp,r20
  80e998:	18800003 	ldbu	r2,0(r3)
  80e99c:	1080020c 	andi	r2,r2,8
  80e9a0:	103ffa1e 	bne	r2,zero,80e98c <_strtoull_r+0x4c>
  80e9a4:	00800b44 	movi	r2,45
  80e9a8:	a0807a26 	beq	r20,r2,80eb94 <_strtoull_r+0x254>
  80e9ac:	00800ac4 	movi	r2,43
  80e9b0:	a0807526 	beq	r20,r2,80eb88 <_strtoull_r+0x248>
  80e9b4:	d8000015 	stw	zero,0(sp)
  80e9b8:	b807003a 	cmpeq	r3,r23,zero
  80e9bc:	18005a1e 	bne	r3,zero,80eb28 <_strtoull_r+0x1e8>
  80e9c0:	00800404 	movi	r2,16
  80e9c4:	b8805826 	beq	r23,r2,80eb28 <_strtoull_r+0x1e8>
  80e9c8:	b82dd7fa 	srai	r22,r23,31
  80e9cc:	043fffc4 	movi	r16,-1
  80e9d0:	8009883a 	mov	r4,r16
  80e9d4:	800b883a 	mov	r5,r16
  80e9d8:	b80d883a 	mov	r6,r23
  80e9dc:	b00f883a 	mov	r7,r22
  80e9e0:	080f9c40 	call	80f9c4 <__udivdi3>
  80e9e4:	8009883a 	mov	r4,r16
  80e9e8:	800b883a 	mov	r5,r16
  80e9ec:	b80d883a 	mov	r6,r23
  80e9f0:	b00f883a 	mov	r7,r22
  80e9f4:	1023883a 	mov	r17,r2
  80e9f8:	1825883a 	mov	r18,r3
  80e9fc:	08100300 	call	810030 <__umoddi3>
  80ea00:	b82b883a 	mov	r21,r23
  80ea04:	1019883a 	mov	r12,r2
  80ea08:	e505883a 	add	r2,fp,r20
  80ea0c:	11000003 	ldbu	r4,0(r2)
  80ea10:	0015883a 	mov	r10,zero
  80ea14:	0017883a 	mov	r11,zero
  80ea18:	20c0010c 	andi	r3,r4,4
  80ea1c:	000d883a 	mov	r6,zero
  80ea20:	18001c26 	beq	r3,zero,80ea94 <_strtoull_r+0x154>
  80ea24:	a43ff404 	addi	r16,r20,-48
  80ea28:	85c0220e 	bge	r16,r23,80eab4 <_strtoull_r+0x174>
  80ea2c:	30003c16 	blt	r6,zero,80eb20 <_strtoull_r+0x1e0>
  80ea30:	92c03b36 	bltu	r18,r11,80eb20 <_strtoull_r+0x1e0>
  80ea34:	5c803926 	beq	r11,r18,80eb1c <_strtoull_r+0x1dc>
  80ea38:	54404c26 	beq	r10,r17,80eb6c <_strtoull_r+0x22c>
  80ea3c:	580b883a 	mov	r5,r11
  80ea40:	5009883a 	mov	r4,r10
  80ea44:	a80d883a 	mov	r6,r21
  80ea48:	b00f883a 	mov	r7,r22
  80ea4c:	db000415 	stw	r12,16(sp)
  80ea50:	080f7fc0 	call	80f7fc <__muldi3>
  80ea54:	8013d7fa 	srai	r9,r16,31
  80ea58:	100d883a 	mov	r6,r2
  80ea5c:	1405883a 	add	r2,r2,r16
  80ea60:	118d803a 	cmpltu	r6,r2,r6
  80ea64:	1a47883a 	add	r3,r3,r9
  80ea68:	db000417 	ldw	r12,16(sp)
  80ea6c:	30cd883a 	add	r6,r6,r3
  80ea70:	3017883a 	mov	r11,r6
  80ea74:	1015883a 	mov	r10,r2
  80ea78:	01800044 	movi	r6,1
  80ea7c:	9d000007 	ldb	r20,0(r19)
  80ea80:	9cc00044 	addi	r19,r19,1
  80ea84:	e505883a 	add	r2,fp,r20
  80ea88:	11000003 	ldbu	r4,0(r2)
  80ea8c:	20c0010c 	andi	r3,r4,4
  80ea90:	183fe41e 	bne	r3,zero,80ea24 <_strtoull_r+0xe4>
  80ea94:	208000cc 	andi	r2,r4,3
  80ea98:	10000626 	beq	r2,zero,80eab4 <_strtoull_r+0x174>
  80ea9c:	2080004c 	andi	r2,r4,1
  80eaa0:	1005003a 	cmpeq	r2,r2,zero
  80eaa4:	10002e1e 	bne	r2,zero,80eb60 <_strtoull_r+0x220>
  80eaa8:	02000dc4 	movi	r8,55
  80eaac:	a221c83a 	sub	r16,r20,r8
  80eab0:	85ffde16 	blt	r16,r23,80ea2c <_strtoull_r+0xec>
  80eab4:	3000530e 	bge	r6,zero,80ec04 <_strtoull_r+0x2c4>
  80eab8:	d8c00117 	ldw	r3,4(sp)
  80eabc:	02bfffc4 	movi	r10,-1
  80eac0:	00800884 	movi	r2,34
  80eac4:	5017883a 	mov	r11,r10
  80eac8:	18800015 	stw	r2,0(r3)
  80eacc:	d8800317 	ldw	r2,12(sp)
  80ead0:	10000426 	beq	r2,zero,80eae4 <_strtoull_r+0x1a4>
  80ead4:	3000291e 	bne	r6,zero,80eb7c <_strtoull_r+0x23c>
  80ead8:	d8800217 	ldw	r2,8(sp)
  80eadc:	d8c00317 	ldw	r3,12(sp)
  80eae0:	18800015 	stw	r2,0(r3)
  80eae4:	5005883a 	mov	r2,r10
  80eae8:	5807883a 	mov	r3,r11
  80eaec:	dfc00e17 	ldw	ra,56(sp)
  80eaf0:	df000d17 	ldw	fp,52(sp)
  80eaf4:	ddc00c17 	ldw	r23,48(sp)
  80eaf8:	dd800b17 	ldw	r22,44(sp)
  80eafc:	dd400a17 	ldw	r21,40(sp)
  80eb00:	dd000917 	ldw	r20,36(sp)
  80eb04:	dcc00817 	ldw	r19,32(sp)
  80eb08:	dc800717 	ldw	r18,28(sp)
  80eb0c:	dc400617 	ldw	r17,24(sp)
  80eb10:	dc000517 	ldw	r16,20(sp)
  80eb14:	dec00f04 	addi	sp,sp,60
  80eb18:	f800283a 	ret
  80eb1c:	8abfc62e 	bgeu	r17,r10,80ea38 <_strtoull_r+0xf8>
  80eb20:	01bfffc4 	movi	r6,-1
  80eb24:	003fd506 	br	80ea7c <_strtoull_r+0x13c>
  80eb28:	00800c04 	movi	r2,48
  80eb2c:	a0801e26 	beq	r20,r2,80eba8 <_strtoull_r+0x268>
  80eb30:	183fa526 	beq	r3,zero,80e9c8 <_strtoull_r+0x88>
  80eb34:	00800c04 	movi	r2,48
  80eb38:	a0802a26 	beq	r20,r2,80ebe4 <_strtoull_r+0x2a4>
  80eb3c:	05c00284 	movi	r23,10
  80eb40:	b82b883a 	mov	r21,r23
  80eb44:	046666b4 	movhi	r17,39322
  80eb48:	8c666644 	addi	r17,r17,-26215
  80eb4c:	002d883a 	mov	r22,zero
  80eb50:	048666b4 	movhi	r18,6554
  80eb54:	94a66644 	addi	r18,r18,-26215
  80eb58:	03000144 	movi	r12,5
  80eb5c:	003faa06 	br	80ea08 <_strtoull_r+0xc8>
  80eb60:	020015c4 	movi	r8,87
  80eb64:	a221c83a 	sub	r16,r20,r8
  80eb68:	003fd106 	br	80eab0 <_strtoull_r+0x170>
  80eb6c:	5cbfb31e 	bne	r11,r18,80ea3c <_strtoull_r+0xfc>
  80eb70:	643fb20e 	bge	r12,r16,80ea3c <_strtoull_r+0xfc>
  80eb74:	01bfffc4 	movi	r6,-1
  80eb78:	003fc006 	br	80ea7c <_strtoull_r+0x13c>
  80eb7c:	9cffffc4 	addi	r19,r19,-1
  80eb80:	dcc00215 	stw	r19,8(sp)
  80eb84:	003fd406 	br	80ead8 <_strtoull_r+0x198>
  80eb88:	9d000007 	ldb	r20,0(r19)
  80eb8c:	9cc00044 	addi	r19,r19,1
  80eb90:	003f8806 	br	80e9b4 <_strtoull_r+0x74>
  80eb94:	9d000007 	ldb	r20,0(r19)
  80eb98:	00800044 	movi	r2,1
  80eb9c:	9cc00044 	addi	r19,r19,1
  80eba0:	d8800015 	stw	r2,0(sp)
  80eba4:	003f8406 	br	80e9b8 <_strtoull_r+0x78>
  80eba8:	99000007 	ldb	r4,0(r19)
  80ebac:	00801e04 	movi	r2,120
  80ebb0:	20800226 	beq	r4,r2,80ebbc <_strtoull_r+0x27c>
  80ebb4:	00801604 	movi	r2,88
  80ebb8:	20bfdd1e 	bne	r4,r2,80eb30 <_strtoull_r+0x1f0>
  80ebbc:	9d000047 	ldb	r20,1(r19)
  80ebc0:	05c00404 	movi	r23,16
  80ebc4:	b82b883a 	mov	r21,r23
  80ebc8:	047fffc4 	movi	r17,-1
  80ebcc:	9cc00084 	addi	r19,r19,2
  80ebd0:	002d883a 	mov	r22,zero
  80ebd4:	04840034 	movhi	r18,4096
  80ebd8:	94bfffc4 	addi	r18,r18,-1
  80ebdc:	030003c4 	movi	r12,15
  80ebe0:	003f8906 	br	80ea08 <_strtoull_r+0xc8>
  80ebe4:	05c00204 	movi	r23,8
  80ebe8:	b82b883a 	mov	r21,r23
  80ebec:	047fffc4 	movi	r17,-1
  80ebf0:	002d883a 	mov	r22,zero
  80ebf4:	04880034 	movhi	r18,8192
  80ebf8:	94bfffc4 	addi	r18,r18,-1
  80ebfc:	030001c4 	movi	r12,7
  80ec00:	003f8106 	br	80ea08 <_strtoull_r+0xc8>
  80ec04:	d8c00017 	ldw	r3,0(sp)
  80ec08:	1805003a 	cmpeq	r2,r3,zero
  80ec0c:	103faf1e 	bne	r2,zero,80eacc <_strtoull_r+0x18c>
  80ec10:	0009883a 	mov	r4,zero
  80ec14:	2285c83a 	sub	r2,r4,r10
  80ec18:	02c7c83a 	sub	r3,zero,r11
  80ec1c:	2089803a 	cmpltu	r4,r4,r2
  80ec20:	1909c83a 	sub	r4,r3,r4
  80ec24:	1015883a 	mov	r10,r2
  80ec28:	2017883a 	mov	r11,r4
  80ec2c:	003fa706 	br	80eacc <_strtoull_r+0x18c>

0080ec30 <htinit>:
  80ec30:	28800003 	ldbu	r2,0(r5)
  80ec34:	10000626 	beq	r2,zero,80ec50 <htinit+0x20>
  80ec38:	1105883a 	add	r2,r2,r4
  80ec3c:	11800005 	stb	r6,0(r2)
  80ec40:	28800043 	ldbu	r2,1(r5)
  80ec44:	31800044 	addi	r6,r6,1
  80ec48:	29400044 	addi	r5,r5,1
  80ec4c:	103ffa1e 	bne	r2,zero,80ec38 <htinit+0x8>
  80ec50:	f800283a 	ret

0080ec54 <__hexdig_init>:
  80ec54:	defffd04 	addi	sp,sp,-12
  80ec58:	dc400015 	stw	r17,0(sp)
  80ec5c:	044020b4 	movhi	r17,130
  80ec60:	8c623204 	addi	r17,r17,-30520
  80ec64:	dcc00115 	stw	r19,4(sp)
  80ec68:	8809883a 	mov	r4,r17
  80ec6c:	04c00684 	movi	r19,26
  80ec70:	01402074 	movhi	r5,129
  80ec74:	29547604 	addi	r5,r5,20952
  80ec78:	01800404 	movi	r6,16
  80ec7c:	dfc00215 	stw	ra,8(sp)
  80ec80:	080ec300 	call	80ec30 <htinit>
  80ec84:	980d883a 	mov	r6,r19
  80ec88:	8809883a 	mov	r4,r17
  80ec8c:	01402074 	movhi	r5,129
  80ec90:	29547904 	addi	r5,r5,20964
  80ec94:	080ec300 	call	80ec30 <htinit>
  80ec98:	8809883a 	mov	r4,r17
  80ec9c:	980d883a 	mov	r6,r19
  80eca0:	01402074 	movhi	r5,129
  80eca4:	29547b04 	addi	r5,r5,20972
  80eca8:	dfc00217 	ldw	ra,8(sp)
  80ecac:	dcc00117 	ldw	r19,4(sp)
  80ecb0:	dc400017 	ldw	r17,0(sp)
  80ecb4:	dec00304 	addi	sp,sp,12
  80ecb8:	080ec301 	jmpi	80ec30 <htinit>

0080ecbc <rshift>:
  80ecbc:	2807d17a 	srai	r3,r5,5
  80ecc0:	20800417 	ldw	r2,16(r4)
  80ecc4:	22400504 	addi	r9,r4,20
  80ecc8:	480f883a 	mov	r7,r9
  80eccc:	1880190e 	bge	r3,r2,80ed34 <rshift+0x78>
  80ecd0:	1085883a 	add	r2,r2,r2
  80ecd4:	18c7883a 	add	r3,r3,r3
  80ecd8:	1085883a 	add	r2,r2,r2
  80ecdc:	18c7883a 	add	r3,r3,r3
  80ece0:	294007cc 	andi	r5,r5,31
  80ece4:	4891883a 	add	r8,r9,r2
  80ece8:	48cd883a 	add	r6,r9,r3
  80ecec:	28001726 	beq	r5,zero,80ed4c <rshift+0x90>
  80ecf0:	30c00017 	ldw	r3,0(r6)
  80ecf4:	00800804 	movi	r2,32
  80ecf8:	31800104 	addi	r6,r6,4
  80ecfc:	1155c83a 	sub	r10,r2,r5
  80ed00:	1946d83a 	srl	r3,r3,r5
  80ed04:	3200092e 	bgeu	r6,r8,80ed2c <rshift+0x70>
  80ed08:	30800017 	ldw	r2,0(r6)
  80ed0c:	1284983a 	sll	r2,r2,r10
  80ed10:	10c4b03a 	or	r2,r2,r3
  80ed14:	38800015 	stw	r2,0(r7)
  80ed18:	30c00017 	ldw	r3,0(r6)
  80ed1c:	31800104 	addi	r6,r6,4
  80ed20:	39c00104 	addi	r7,r7,4
  80ed24:	1946d83a 	srl	r3,r3,r5
  80ed28:	323ff736 	bltu	r6,r8,80ed08 <rshift+0x4c>
  80ed2c:	38c00015 	stw	r3,0(r7)
  80ed30:	18000c1e 	bne	r3,zero,80ed64 <rshift+0xa8>
  80ed34:	3a45c83a 	sub	r2,r7,r9
  80ed38:	1005d0ba 	srai	r2,r2,2
  80ed3c:	20800415 	stw	r2,16(r4)
  80ed40:	1000011e 	bne	r2,zero,80ed48 <rshift+0x8c>
  80ed44:	20000515 	stw	zero,20(r4)
  80ed48:	f800283a 	ret
  80ed4c:	323ff92e 	bgeu	r6,r8,80ed34 <rshift+0x78>
  80ed50:	30800017 	ldw	r2,0(r6)
  80ed54:	31800104 	addi	r6,r6,4
  80ed58:	38800015 	stw	r2,0(r7)
  80ed5c:	39c00104 	addi	r7,r7,4
  80ed60:	003ffa06 	br	80ed4c <rshift+0x90>
  80ed64:	39c00104 	addi	r7,r7,4
  80ed68:	003ff206 	br	80ed34 <rshift+0x78>

0080ed6c <__gethex>:
  80ed6c:	defff104 	addi	sp,sp,-60
  80ed70:	df000d15 	stw	fp,52(sp)
  80ed74:	dcc00815 	stw	r19,32(sp)
  80ed78:	dfc00e15 	stw	ra,56(sp)
  80ed7c:	ddc00c15 	stw	r23,48(sp)
  80ed80:	dd800b15 	stw	r22,44(sp)
  80ed84:	dd400a15 	stw	r21,40(sp)
  80ed88:	dd000915 	stw	r20,36(sp)
  80ed8c:	dc800715 	stw	r18,28(sp)
  80ed90:	dc400615 	stw	r17,24(sp)
  80ed94:	dc000515 	stw	r16,20(sp)
  80ed98:	04c020b4 	movhi	r19,130
  80ed9c:	9ce23204 	addi	r19,r19,-30520
  80eda0:	98800c03 	ldbu	r2,48(r19)
  80eda4:	d9000115 	stw	r4,4(sp)
  80eda8:	2839883a 	mov	fp,r5
  80edac:	d9800215 	stw	r6,8(sp)
  80edb0:	d9c00315 	stw	r7,12(sp)
  80edb4:	10007526 	beq	r2,zero,80ef8c <__gethex+0x220>
  80edb8:	e1800017 	ldw	r6,0(fp)
  80edbc:	00800c04 	movi	r2,48
  80edc0:	31000083 	ldbu	r4,2(r6)
  80edc4:	30c00084 	addi	r3,r6,2
  80edc8:	2080761e 	bne	r4,r2,80efa4 <__gethex+0x238>
  80edcc:	200b883a 	mov	r5,r4
  80edd0:	3007883a 	mov	r3,r6
  80edd4:	188000c3 	ldbu	r2,3(r3)
  80edd8:	18c00044 	addi	r3,r3,1
  80eddc:	1009883a 	mov	r4,r2
  80ede0:	117ffc26 	beq	r2,r5,80edd4 <__gethex+0x68>
  80ede4:	198fc83a 	sub	r7,r3,r6
  80ede8:	19400084 	addi	r5,r3,2
  80edec:	24c5883a 	add	r2,r4,r19
  80edf0:	10c00003 	ldbu	r3,0(r2)
  80edf4:	18002e26 	beq	r3,zero,80eeb0 <__gethex+0x144>
  80edf8:	29000003 	ldbu	r4,0(r5)
  80edfc:	282b883a 	mov	r21,r5
  80ee00:	000d883a 	mov	r6,zero
  80ee04:	002d883a 	mov	r22,zero
  80ee08:	21003fcc 	andi	r4,r4,255
  80ee0c:	24c5883a 	add	r2,r4,r19
  80ee10:	10c00003 	ldbu	r3,0(r2)
  80ee14:	18000526 	beq	r3,zero,80ee2c <__gethex+0xc0>
  80ee18:	29400044 	addi	r5,r5,1
  80ee1c:	29000003 	ldbu	r4,0(r5)
  80ee20:	24c5883a 	add	r2,r4,r19
  80ee24:	10c00003 	ldbu	r3,0(r2)
  80ee28:	183ffb1e 	bne	r3,zero,80ee18 <__gethex+0xac>
  80ee2c:	00800b84 	movi	r2,46
  80ee30:	20805f26 	beq	r4,r2,80efb0 <__gethex+0x244>
  80ee34:	30008226 	beq	r6,zero,80f040 <__gethex+0x2d4>
  80ee38:	2985c83a 	sub	r2,r5,r6
  80ee3c:	1085883a 	add	r2,r2,r2
  80ee40:	1085883a 	add	r2,r2,r2
  80ee44:	0085c83a 	sub	r2,zero,r2
  80ee48:	d8800015 	stw	r2,0(sp)
  80ee4c:	2825883a 	mov	r18,r5
  80ee50:	90c00003 	ldbu	r3,0(r18)
  80ee54:	00801404 	movi	r2,80
  80ee58:	18801e26 	beq	r3,r2,80eed4 <__gethex+0x168>
  80ee5c:	00801c04 	movi	r2,112
  80ee60:	18801c26 	beq	r3,r2,80eed4 <__gethex+0x168>
  80ee64:	9023883a 	mov	r17,r18
  80ee68:	b005003a 	cmpeq	r2,r22,zero
  80ee6c:	e4400015 	stw	r17,0(fp)
  80ee70:	10008d1e 	bne	r2,zero,80f0a8 <__gethex+0x33c>
  80ee74:	38004326 	beq	r7,zero,80ef84 <__gethex+0x218>
  80ee78:	0025883a 	mov	r18,zero
  80ee7c:	9005883a 	mov	r2,r18
  80ee80:	dfc00e17 	ldw	ra,56(sp)
  80ee84:	df000d17 	ldw	fp,52(sp)
  80ee88:	ddc00c17 	ldw	r23,48(sp)
  80ee8c:	dd800b17 	ldw	r22,44(sp)
  80ee90:	dd400a17 	ldw	r21,40(sp)
  80ee94:	dd000917 	ldw	r20,36(sp)
  80ee98:	dcc00817 	ldw	r19,32(sp)
  80ee9c:	dc800717 	ldw	r18,28(sp)
  80eea0:	dc400617 	ldw	r17,24(sp)
  80eea4:	dc000517 	ldw	r16,20(sp)
  80eea8:	dec00f04 	addi	sp,sp,60
  80eeac:	f800283a 	ret
  80eeb0:	00800b84 	movi	r2,46
  80eeb4:	20805126 	beq	r4,r2,80effc <__gethex+0x290>
  80eeb8:	2825883a 	mov	r18,r5
  80eebc:	d8000015 	stw	zero,0(sp)
  80eec0:	90c00003 	ldbu	r3,0(r18)
  80eec4:	00801404 	movi	r2,80
  80eec8:	282b883a 	mov	r21,r5
  80eecc:	05800044 	movi	r22,1
  80eed0:	18bfe21e 	bne	r3,r2,80ee5c <__gethex+0xf0>
  80eed4:	90c00043 	ldbu	r3,1(r18)
  80eed8:	00800ac4 	movi	r2,43
  80eedc:	91400044 	addi	r5,r18,1
  80eee0:	18805126 	beq	r3,r2,80f028 <__gethex+0x2bc>
  80eee4:	00800b44 	movi	r2,45
  80eee8:	18805326 	beq	r3,r2,80f038 <__gethex+0x2cc>
  80eeec:	002f883a 	mov	r23,zero
  80eef0:	1cc5883a 	add	r2,r3,r19
  80eef4:	10800003 	ldbu	r2,0(r2)
  80eef8:	103fda26 	beq	r2,zero,80ee64 <__gethex+0xf8>
  80eefc:	01800644 	movi	r6,25
  80ef00:	30bfd816 	blt	r6,r2,80ee64 <__gethex+0xf8>
  80ef04:	28c00043 	ldbu	r3,1(r5)
  80ef08:	113ffc04 	addi	r4,r2,-16
  80ef0c:	008020b4 	movhi	r2,130
  80ef10:	10a23204 	addi	r2,r2,-30520
  80ef14:	1887883a 	add	r3,r3,r2
  80ef18:	18800003 	ldbu	r2,0(r3)
  80ef1c:	2c400044 	addi	r17,r5,1
  80ef20:	10001126 	beq	r2,zero,80ef68 <__gethex+0x1fc>
  80ef24:	1021883a 	mov	r16,r2
  80ef28:	30800f16 	blt	r6,r2,80ef68 <__gethex+0x1fc>
  80ef2c:	3029883a 	mov	r20,r6
  80ef30:	00000106 	br	80ef38 <__gethex+0x1cc>
  80ef34:	a0800c16 	blt	r20,r2,80ef68 <__gethex+0x1fc>
  80ef38:	8c400044 	addi	r17,r17,1
  80ef3c:	01400284 	movi	r5,10
  80ef40:	d9c00415 	stw	r7,16(sp)
  80ef44:	0801fec0 	call	801fec <__mulsi3>
  80ef48:	88c00003 	ldbu	r3,0(r17)
  80ef4c:	1405883a 	add	r2,r2,r16
  80ef50:	113ffc04 	addi	r4,r2,-16
  80ef54:	1cc7883a 	add	r3,r3,r19
  80ef58:	18800003 	ldbu	r2,0(r3)
  80ef5c:	d9c00417 	ldw	r7,16(sp)
  80ef60:	1021883a 	mov	r16,r2
  80ef64:	103ff31e 	bne	r2,zero,80ef34 <__gethex+0x1c8>
  80ef68:	b805003a 	cmpeq	r2,r23,zero
  80ef6c:	1000011e 	bne	r2,zero,80ef74 <__gethex+0x208>
  80ef70:	0109c83a 	sub	r4,zero,r4
  80ef74:	d8800017 	ldw	r2,0(sp)
  80ef78:	1105883a 	add	r2,r2,r4
  80ef7c:	d8800015 	stw	r2,0(sp)
  80ef80:	003fb906 	br	80ee68 <__gethex+0xfc>
  80ef84:	04800184 	movi	r18,6
  80ef88:	003fbc06 	br	80ee7c <__gethex+0x110>
  80ef8c:	080ec540 	call	80ec54 <__hexdig_init>
  80ef90:	e1800017 	ldw	r6,0(fp)
  80ef94:	00800c04 	movi	r2,48
  80ef98:	31000083 	ldbu	r4,2(r6)
  80ef9c:	30c00084 	addi	r3,r6,2
  80efa0:	20bf8a26 	beq	r4,r2,80edcc <__gethex+0x60>
  80efa4:	180b883a 	mov	r5,r3
  80efa8:	000f883a 	mov	r7,zero
  80efac:	003f8f06 	br	80edec <__gethex+0x80>
  80efb0:	303fa11e 	bne	r6,zero,80ee38 <__gethex+0xcc>
  80efb4:	29400044 	addi	r5,r5,1
  80efb8:	28800003 	ldbu	r2,0(r5)
  80efbc:	14c5883a 	add	r2,r2,r19
  80efc0:	10c00003 	ldbu	r3,0(r2)
  80efc4:	1800b526 	beq	r3,zero,80f29c <__gethex+0x530>
  80efc8:	2809883a 	mov	r4,r5
  80efcc:	21000044 	addi	r4,r4,1
  80efd0:	20800003 	ldbu	r2,0(r4)
  80efd4:	14c5883a 	add	r2,r2,r19
  80efd8:	10c00003 	ldbu	r3,0(r2)
  80efdc:	183ffb1e 	bne	r3,zero,80efcc <__gethex+0x260>
  80efe0:	2145c83a 	sub	r2,r4,r5
  80efe4:	1085883a 	add	r2,r2,r2
  80efe8:	1085883a 	add	r2,r2,r2
  80efec:	0085c83a 	sub	r2,zero,r2
  80eff0:	200b883a 	mov	r5,r4
  80eff4:	d8800015 	stw	r2,0(sp)
  80eff8:	003f9406 	br	80ee4c <__gethex+0xe0>
  80effc:	29000043 	ldbu	r4,1(r5)
  80f000:	008020b4 	movhi	r2,130
  80f004:	10a23204 	addi	r2,r2,-30520
  80f008:	2c800044 	addi	r18,r5,1
  80f00c:	2085883a 	add	r2,r4,r2
  80f010:	10c00003 	ldbu	r3,0(r2)
  80f014:	18000d1e 	bne	r3,zero,80f04c <__gethex+0x2e0>
  80f018:	282b883a 	mov	r21,r5
  80f01c:	05800044 	movi	r22,1
  80f020:	d8000015 	stw	zero,0(sp)
  80f024:	003f8a06 	br	80ee50 <__gethex+0xe4>
  80f028:	002f883a 	mov	r23,zero
  80f02c:	29400044 	addi	r5,r5,1
  80f030:	28c00003 	ldbu	r3,0(r5)
  80f034:	003fae06 	br	80eef0 <__gethex+0x184>
  80f038:	05c00044 	movi	r23,1
  80f03c:	003ffb06 	br	80f02c <__gethex+0x2c0>
  80f040:	2825883a 	mov	r18,r5
  80f044:	d8000015 	stw	zero,0(sp)
  80f048:	003f8106 	br	80ee50 <__gethex+0xe4>
  80f04c:	00800c04 	movi	r2,48
  80f050:	20800e1e 	bne	r4,r2,80f08c <__gethex+0x320>
  80f054:	2007883a 	mov	r3,r4
  80f058:	900b883a 	mov	r5,r18
  80f05c:	29400044 	addi	r5,r5,1
  80f060:	29000003 	ldbu	r4,0(r5)
  80f064:	20803fcc 	andi	r2,r4,255
  80f068:	10fffc26 	beq	r2,r3,80f05c <__gethex+0x2f0>
  80f06c:	14c5883a 	add	r2,r2,r19
  80f070:	10c00003 	ldbu	r3,0(r2)
  80f074:	1800071e 	bne	r3,zero,80f094 <__gethex+0x328>
  80f078:	01c00044 	movi	r7,1
  80f07c:	900d883a 	mov	r6,r18
  80f080:	282b883a 	mov	r21,r5
  80f084:	382d883a 	mov	r22,r7
  80f088:	003f5f06 	br	80ee08 <__gethex+0x9c>
  80f08c:	91000003 	ldbu	r4,0(r18)
  80f090:	900b883a 	mov	r5,r18
  80f094:	900d883a 	mov	r6,r18
  80f098:	282b883a 	mov	r21,r5
  80f09c:	01c00044 	movi	r7,1
  80f0a0:	002d883a 	mov	r22,zero
  80f0a4:	003f5806 	br	80ee08 <__gethex+0x9c>
  80f0a8:	9545c83a 	sub	r2,r18,r21
  80f0ac:	10bfffc4 	addi	r2,r2,-1
  80f0b0:	00c001c4 	movi	r3,7
  80f0b4:	1880770e 	bge	r3,r2,80f294 <__gethex+0x528>
  80f0b8:	000b883a 	mov	r5,zero
  80f0bc:	1005d07a 	srai	r2,r2,1
  80f0c0:	29400044 	addi	r5,r5,1
  80f0c4:	18bffd16 	blt	r3,r2,80f0bc <__gethex+0x350>
  80f0c8:	d9000117 	ldw	r4,4(sp)
  80f0cc:	080b5bc0 	call	80b5bc <_Balloc>
  80f0d0:	1029883a 	mov	r20,r2
  80f0d4:	15800504 	addi	r22,r2,20
  80f0d8:	ac80562e 	bgeu	r21,r18,80f234 <__gethex+0x4c8>
  80f0dc:	900b883a 	mov	r5,r18
  80f0e0:	b011883a 	mov	r8,r22
  80f0e4:	000f883a 	mov	r7,zero
  80f0e8:	0009883a 	mov	r4,zero
  80f0ec:	02400b84 	movi	r9,46
  80f0f0:	02800804 	movi	r10,32
  80f0f4:	297fffc4 	addi	r5,r5,-1
  80f0f8:	28c00003 	ldbu	r3,0(r5)
  80f0fc:	1a400826 	beq	r3,r9,80f120 <__gethex+0x3b4>
  80f100:	380d883a 	mov	r6,r7
  80f104:	3a802a26 	beq	r7,r10,80f1b0 <__gethex+0x444>
  80f108:	39c00104 	addi	r7,r7,4
  80f10c:	1cc7883a 	add	r3,r3,r19
  80f110:	18800003 	ldbu	r2,0(r3)
  80f114:	108003cc 	andi	r2,r2,15
  80f118:	1184983a 	sll	r2,r2,r6
  80f11c:	2088b03a 	or	r4,r4,r2
  80f120:	a97ff436 	bltu	r21,r5,80f0f4 <__gethex+0x388>
  80f124:	40800104 	addi	r2,r8,4
  80f128:	1585c83a 	sub	r2,r2,r22
  80f12c:	1021d0ba 	srai	r16,r2,2
  80f130:	41000015 	stw	r4,0(r8)
  80f134:	a4000415 	stw	r16,16(r20)
  80f138:	080b0640 	call	80b064 <__hi0bits>
  80f13c:	d9000217 	ldw	r4,8(sp)
  80f140:	8006917a 	slli	r3,r16,5
  80f144:	24c00017 	ldw	r19,0(r4)
  80f148:	1885c83a 	sub	r2,r3,r2
  80f14c:	98801f16 	blt	r19,r2,80f1cc <__gethex+0x460>
  80f150:	14c00c16 	blt	r2,r19,80f184 <__gethex+0x418>
  80f154:	002b883a 	mov	r21,zero
  80f158:	d9000217 	ldw	r4,8(sp)
  80f15c:	d8c00017 	ldw	r3,0(sp)
  80f160:	20800217 	ldw	r2,8(r4)
  80f164:	10c0360e 	bge	r2,r3,80f240 <__gethex+0x4d4>
  80f168:	d9000117 	ldw	r4,4(sp)
  80f16c:	a00b883a 	mov	r5,r20
  80f170:	048028c4 	movi	r18,163
  80f174:	080b03c0 	call	80b03c <_Bfree>
  80f178:	d9000f17 	ldw	r4,60(sp)
  80f17c:	20000015 	stw	zero,0(r4)
  80f180:	003f3e06 	br	80ee7c <__gethex+0x110>
  80f184:	d9000117 	ldw	r4,4(sp)
  80f188:	98a1c83a 	sub	r16,r19,r2
  80f18c:	a00b883a 	mov	r5,r20
  80f190:	800d883a 	mov	r6,r16
  80f194:	080b9800 	call	80b980 <__lshift>
  80f198:	d8c00017 	ldw	r3,0(sp)
  80f19c:	1029883a 	mov	r20,r2
  80f1a0:	15800504 	addi	r22,r2,20
  80f1a4:	1c07c83a 	sub	r3,r3,r16
  80f1a8:	d8c00015 	stw	r3,0(sp)
  80f1ac:	003fe906 	br	80f154 <__gethex+0x3e8>
  80f1b0:	41000015 	stw	r4,0(r8)
  80f1b4:	28c00003 	ldbu	r3,0(r5)
  80f1b8:	01c00104 	movi	r7,4
  80f1bc:	000d883a 	mov	r6,zero
  80f1c0:	41d1883a 	add	r8,r8,r7
  80f1c4:	0009883a 	mov	r4,zero
  80f1c8:	003fd006 	br	80f10c <__gethex+0x3a0>
  80f1cc:	14e1c83a 	sub	r16,r2,r19
  80f1d0:	a009883a 	mov	r4,r20
  80f1d4:	800b883a 	mov	r5,r16
  80f1d8:	080b5340 	call	80b534 <__any_on>
  80f1dc:	1000081e 	bne	r2,zero,80f200 <__gethex+0x494>
  80f1e0:	002b883a 	mov	r21,zero
  80f1e4:	a009883a 	mov	r4,r20
  80f1e8:	800b883a 	mov	r5,r16
  80f1ec:	080ecbc0 	call	80ecbc <rshift>
  80f1f0:	d8800017 	ldw	r2,0(sp)
  80f1f4:	1405883a 	add	r2,r2,r16
  80f1f8:	d8800015 	stw	r2,0(sp)
  80f1fc:	003fd606 	br	80f158 <__gethex+0x3ec>
  80f200:	817fffc4 	addi	r5,r16,-1
  80f204:	2805d17a 	srai	r2,r5,5
  80f208:	290007cc 	andi	r4,r5,31
  80f20c:	01800044 	movi	r6,1
  80f210:	1085883a 	add	r2,r2,r2
  80f214:	1085883a 	add	r2,r2,r2
  80f218:	1585883a 	add	r2,r2,r22
  80f21c:	3108983a 	sll	r4,r6,r4
  80f220:	10c00017 	ldw	r3,0(r2)
  80f224:	20c8703a 	and	r4,r4,r3
  80f228:	20001e1e 	bne	r4,zero,80f2a4 <__gethex+0x538>
  80f22c:	302b883a 	mov	r21,r6
  80f230:	003fec06 	br	80f1e4 <__gethex+0x478>
  80f234:	b011883a 	mov	r8,r22
  80f238:	0009883a 	mov	r4,zero
  80f23c:	003fb906 	br	80f124 <__gethex+0x3b8>
  80f240:	d8800217 	ldw	r2,8(sp)
  80f244:	d8c00017 	ldw	r3,0(sp)
  80f248:	11000117 	ldw	r4,4(r2)
  80f24c:	19001c16 	blt	r3,r4,80f2c0 <__gethex+0x554>
  80f250:	04800044 	movi	r18,1
  80f254:	a8000926 	beq	r21,zero,80f27c <__gethex+0x510>
  80f258:	d8c00217 	ldw	r3,8(sp)
  80f25c:	00800084 	movi	r2,2
  80f260:	19000317 	ldw	r4,12(r3)
  80f264:	20809826 	beq	r4,r2,80f4c8 <__gethex+0x75c>
  80f268:	008000c4 	movi	r2,3
  80f26c:	20805b26 	beq	r4,r2,80f3dc <__gethex+0x670>
  80f270:	00800044 	movi	r2,1
  80f274:	20804326 	beq	r4,r2,80f384 <__gethex+0x618>
  80f278:	94800414 	ori	r18,r18,16
  80f27c:	d9000f17 	ldw	r4,60(sp)
  80f280:	d8800017 	ldw	r2,0(sp)
  80f284:	d8c00317 	ldw	r3,12(sp)
  80f288:	25000015 	stw	r20,0(r4)
  80f28c:	18800015 	stw	r2,0(r3)
  80f290:	003efa06 	br	80ee7c <__gethex+0x110>
  80f294:	000b883a 	mov	r5,zero
  80f298:	003f8b06 	br	80f0c8 <__gethex+0x35c>
  80f29c:	d8000015 	stw	zero,0(sp)
  80f2a0:	003eea06 	br	80ee4c <__gethex+0xe0>
  80f2a4:	3140180e 	bge	r6,r5,80f308 <__gethex+0x59c>
  80f2a8:	a009883a 	mov	r4,r20
  80f2ac:	817fff84 	addi	r5,r16,-2
  80f2b0:	080b5340 	call	80b534 <__any_on>
  80f2b4:	10001426 	beq	r2,zero,80f308 <__gethex+0x59c>
  80f2b8:	054000c4 	movi	r21,3
  80f2bc:	003fc906 	br	80f1e4 <__gethex+0x478>
  80f2c0:	d8800017 	ldw	r2,0(sp)
  80f2c4:	20a3c83a 	sub	r17,r4,r2
  80f2c8:	8cc01116 	blt	r17,r19,80f310 <__gethex+0x5a4>
  80f2cc:	d8800217 	ldw	r2,8(sp)
  80f2d0:	10c00317 	ldw	r3,12(r2)
  80f2d4:	00800084 	movi	r2,2
  80f2d8:	18809426 	beq	r3,r2,80f52c <__gethex+0x7c0>
  80f2dc:	008000c4 	movi	r2,3
  80f2e0:	18808f26 	beq	r3,r2,80f520 <__gethex+0x7b4>
  80f2e4:	00800044 	movi	r2,1
  80f2e8:	18807c26 	beq	r3,r2,80f4dc <__gethex+0x770>
  80f2ec:	d9000117 	ldw	r4,4(sp)
  80f2f0:	a00b883a 	mov	r5,r20
  80f2f4:	04801404 	movi	r18,80
  80f2f8:	080b03c0 	call	80b03c <_Bfree>
  80f2fc:	d9000f17 	ldw	r4,60(sp)
  80f300:	20000015 	stw	zero,0(r4)
  80f304:	003edd06 	br	80ee7c <__gethex+0x110>
  80f308:	05400084 	movi	r21,2
  80f30c:	003fb506 	br	80f1e4 <__gethex+0x478>
  80f310:	8c3fffc4 	addi	r16,r17,-1
  80f314:	a8001526 	beq	r21,zero,80f36c <__gethex+0x600>
  80f318:	05400044 	movi	r21,1
  80f31c:	8005d17a 	srai	r2,r16,5
  80f320:	814007cc 	andi	r5,r16,31
  80f324:	00c00044 	movi	r3,1
  80f328:	1085883a 	add	r2,r2,r2
  80f32c:	1085883a 	add	r2,r2,r2
  80f330:	1585883a 	add	r2,r2,r22
  80f334:	1946983a 	sll	r3,r3,r5
  80f338:	11000017 	ldw	r4,0(r2)
  80f33c:	1906703a 	and	r3,r3,r4
  80f340:	18000126 	beq	r3,zero,80f348 <__gethex+0x5dc>
  80f344:	ad400094 	ori	r21,r21,2
  80f348:	880b883a 	mov	r5,r17
  80f34c:	a009883a 	mov	r4,r20
  80f350:	080ecbc0 	call	80ecbc <rshift>
  80f354:	d8800217 	ldw	r2,8(sp)
  80f358:	9c67c83a 	sub	r19,r19,r17
  80f35c:	04800084 	movi	r18,2
  80f360:	10800117 	ldw	r2,4(r2)
  80f364:	d8800015 	stw	r2,0(sp)
  80f368:	003fba06 	br	80f254 <__gethex+0x4e8>
  80f36c:	043feb0e 	bge	zero,r16,80f31c <__gethex+0x5b0>
  80f370:	a009883a 	mov	r4,r20
  80f374:	800b883a 	mov	r5,r16
  80f378:	080b5340 	call	80b534 <__any_on>
  80f37c:	102b883a 	mov	r21,r2
  80f380:	003fe606 	br	80f31c <__gethex+0x5b0>
  80f384:	a880008c 	andi	r2,r21,2
  80f388:	103fbb26 	beq	r2,zero,80f278 <__gethex+0x50c>
  80f38c:	b0800017 	ldw	r2,0(r22)
  80f390:	a884b03a 	or	r2,r21,r2
  80f394:	1104703a 	and	r2,r2,r4
  80f398:	103fb726 	beq	r2,zero,80f278 <__gethex+0x50c>
  80f39c:	a4000417 	ldw	r16,16(r20)
  80f3a0:	b007883a 	mov	r3,r22
  80f3a4:	017fffc4 	movi	r5,-1
  80f3a8:	8405883a 	add	r2,r16,r16
  80f3ac:	10ab883a 	add	r21,r2,r2
  80f3b0:	802f883a 	mov	r23,r16
  80f3b4:	b549883a 	add	r4,r22,r21
  80f3b8:	00000306 	br	80f3c8 <__gethex+0x65c>
  80f3bc:	18000015 	stw	zero,0(r3)
  80f3c0:	18c00104 	addi	r3,r3,4
  80f3c4:	1900082e 	bgeu	r3,r4,80f3e8 <__gethex+0x67c>
  80f3c8:	18800017 	ldw	r2,0(r3)
  80f3cc:	117ffb26 	beq	r2,r5,80f3bc <__gethex+0x650>
  80f3d0:	10800044 	addi	r2,r2,1
  80f3d4:	18800015 	stw	r2,0(r3)
  80f3d8:	00001e06 	br	80f454 <__gethex+0x6e8>
  80f3dc:	d8801017 	ldw	r2,64(sp)
  80f3e0:	103fa526 	beq	r2,zero,80f278 <__gethex+0x50c>
  80f3e4:	003fed06 	br	80f39c <__gethex+0x630>
  80f3e8:	a0800217 	ldw	r2,8(r20)
  80f3ec:	80801216 	blt	r16,r2,80f438 <__gethex+0x6cc>
  80f3f0:	a1400117 	ldw	r5,4(r20)
  80f3f4:	d9000117 	ldw	r4,4(sp)
  80f3f8:	29400044 	addi	r5,r5,1
  80f3fc:	080b5bc0 	call	80b5bc <_Balloc>
  80f400:	a1800417 	ldw	r6,16(r20)
  80f404:	a1400304 	addi	r5,r20,12
  80f408:	11000304 	addi	r4,r2,12
  80f40c:	318d883a 	add	r6,r6,r6
  80f410:	318d883a 	add	r6,r6,r6
  80f414:	31800204 	addi	r6,r6,8
  80f418:	1023883a 	mov	r17,r2
  80f41c:	08048c40 	call	8048c4 <memcpy>
  80f420:	d9000117 	ldw	r4,4(sp)
  80f424:	a00b883a 	mov	r5,r20
  80f428:	8d800504 	addi	r22,r17,20
  80f42c:	080b03c0 	call	80b03c <_Bfree>
  80f430:	8c000417 	ldw	r16,16(r17)
  80f434:	8829883a 	mov	r20,r17
  80f438:	8405883a 	add	r2,r16,r16
  80f43c:	1085883a 	add	r2,r2,r2
  80f440:	1505883a 	add	r2,r2,r20
  80f444:	84000044 	addi	r16,r16,1
  80f448:	00c00044 	movi	r3,1
  80f44c:	10c00515 	stw	r3,20(r2)
  80f450:	a4000415 	stw	r16,16(r20)
  80f454:	00800084 	movi	r2,2
  80f458:	90801526 	beq	r18,r2,80f4b0 <__gethex+0x744>
  80f45c:	bc000a16 	blt	r23,r16,80f488 <__gethex+0x71c>
  80f460:	9c0007cc 	andi	r16,r19,31
  80f464:	8000021e 	bne	r16,zero,80f470 <__gethex+0x704>
  80f468:	94800814 	ori	r18,r18,32
  80f46c:	003f8306 	br	80f27c <__gethex+0x510>
  80f470:	b545883a 	add	r2,r22,r21
  80f474:	113fff17 	ldw	r4,-4(r2)
  80f478:	080b0640 	call	80b064 <__hi0bits>
  80f47c:	00c00804 	movi	r3,32
  80f480:	1c07c83a 	sub	r3,r3,r16
  80f484:	10fff80e 	bge	r2,r3,80f468 <__gethex+0x6fc>
  80f488:	a009883a 	mov	r4,r20
  80f48c:	01400044 	movi	r5,1
  80f490:	080ecbc0 	call	80ecbc <rshift>
  80f494:	d9000217 	ldw	r4,8(sp)
  80f498:	d8c00017 	ldw	r3,0(sp)
  80f49c:	20800217 	ldw	r2,8(r4)
  80f4a0:	18c00044 	addi	r3,r3,1
  80f4a4:	d8c00015 	stw	r3,0(sp)
  80f4a8:	10ff2f16 	blt	r2,r3,80f168 <__gethex+0x3fc>
  80f4ac:	003fee06 	br	80f468 <__gethex+0x6fc>
  80f4b0:	d8c00217 	ldw	r3,8(sp)
  80f4b4:	18800017 	ldw	r2,0(r3)
  80f4b8:	10bfffc4 	addi	r2,r2,-1
  80f4bc:	98801e26 	beq	r19,r2,80f538 <__gethex+0x7cc>
  80f4c0:	04800884 	movi	r18,34
  80f4c4:	003f6d06 	br	80f27c <__gethex+0x510>
  80f4c8:	d9001017 	ldw	r4,64(sp)
  80f4cc:	00800044 	movi	r2,1
  80f4d0:	1105c83a 	sub	r2,r2,r4
  80f4d4:	103f6826 	beq	r2,zero,80f278 <__gethex+0x50c>
  80f4d8:	003fb006 	br	80f39c <__gethex+0x630>
  80f4dc:	9c7f831e 	bne	r19,r17,80f2ec <__gethex+0x580>
  80f4e0:	1cc0060e 	bge	r3,r19,80f4fc <__gethex+0x790>
  80f4e4:	98cbc83a 	sub	r5,r19,r3
  80f4e8:	a009883a 	mov	r4,r20
  80f4ec:	080b5340 	call	80b534 <__any_on>
  80f4f0:	103f7e26 	beq	r2,zero,80f2ec <__gethex+0x580>
  80f4f4:	d8c00217 	ldw	r3,8(sp)
  80f4f8:	19000117 	ldw	r4,4(r3)
  80f4fc:	d8800317 	ldw	r2,12(sp)
  80f500:	d8c00f17 	ldw	r3,60(sp)
  80f504:	04000044 	movi	r16,1
  80f508:	11000015 	stw	r4,0(r2)
  80f50c:	04801884 	movi	r18,98
  80f510:	b4000015 	stw	r16,0(r22)
  80f514:	1d000015 	stw	r20,0(r3)
  80f518:	a4000415 	stw	r16,16(r20)
  80f51c:	003e5706 	br	80ee7c <__gethex+0x110>
  80f520:	d8801017 	ldw	r2,64(sp)
  80f524:	103f7126 	beq	r2,zero,80f2ec <__gethex+0x580>
  80f528:	003ff406 	br	80f4fc <__gethex+0x790>
  80f52c:	d8c01017 	ldw	r3,64(sp)
  80f530:	183ff226 	beq	r3,zero,80f4fc <__gethex+0x790>
  80f534:	003f6d06 	br	80f2ec <__gethex+0x580>
  80f538:	9805d17a 	srai	r2,r19,5
  80f53c:	994007cc 	andi	r5,r19,31
  80f540:	00c00044 	movi	r3,1
  80f544:	1085883a 	add	r2,r2,r2
  80f548:	1085883a 	add	r2,r2,r2
  80f54c:	1585883a 	add	r2,r2,r22
  80f550:	1946983a 	sll	r3,r3,r5
  80f554:	11000017 	ldw	r4,0(r2)
  80f558:	1906703a 	and	r3,r3,r4
  80f55c:	183fd826 	beq	r3,zero,80f4c0 <__gethex+0x754>
  80f560:	04800844 	movi	r18,33
  80f564:	003f4506 	br	80f27c <__gethex+0x510>

0080f568 <L_shift>:
  80f568:	00800204 	movi	r2,8
  80f56c:	1185c83a 	sub	r2,r2,r6
  80f570:	1085883a 	add	r2,r2,r2
  80f574:	21c00017 	ldw	r7,0(r4)
  80f578:	1093883a 	add	r9,r2,r2
  80f57c:	00800804 	movi	r2,32
  80f580:	200d883a 	mov	r6,r4
  80f584:	1251c83a 	sub	r8,r2,r9
  80f588:	31800104 	addi	r6,r6,4
  80f58c:	3805883a 	mov	r2,r7
  80f590:	31c00017 	ldw	r7,0(r6)
  80f594:	3a08983a 	sll	r4,r7,r8
  80f598:	3a46d83a 	srl	r3,r7,r9
  80f59c:	1104b03a 	or	r2,r2,r4
  80f5a0:	180f883a 	mov	r7,r3
  80f5a4:	30bfff15 	stw	r2,-4(r6)
  80f5a8:	30c00015 	stw	r3,0(r6)
  80f5ac:	317ff636 	bltu	r6,r5,80f588 <L_shift+0x20>
  80f5b0:	f800283a 	ret

0080f5b4 <__hexnan>:
  80f5b4:	defff404 	addi	sp,sp,-48
  80f5b8:	dd800815 	stw	r22,32(sp)
  80f5bc:	058020b4 	movhi	r22,130
  80f5c0:	b5a23204 	addi	r22,r22,-30520
  80f5c4:	b0800c03 	ldbu	r2,48(r22)
  80f5c8:	dcc00515 	stw	r19,20(sp)
  80f5cc:	dc000215 	stw	r16,8(sp)
  80f5d0:	dfc00b15 	stw	ra,44(sp)
  80f5d4:	df000a15 	stw	fp,40(sp)
  80f5d8:	ddc00915 	stw	r23,36(sp)
  80f5dc:	dd400715 	stw	r21,28(sp)
  80f5e0:	dd000615 	stw	r20,24(sp)
  80f5e4:	dc800415 	stw	r18,16(sp)
  80f5e8:	dc400315 	stw	r17,12(sp)
  80f5ec:	d9000115 	stw	r4,4(sp)
  80f5f0:	2821883a 	mov	r16,r5
  80f5f4:	3027883a 	mov	r19,r6
  80f5f8:	10007426 	beq	r2,zero,80f7cc <__hexnan+0x218>
  80f5fc:	80c00017 	ldw	r3,0(r16)
  80f600:	1805d17a 	srai	r2,r3,5
  80f604:	18c007cc 	andi	r3,r3,31
  80f608:	1839003a 	cmpeq	fp,r3,zero
  80f60c:	1085883a 	add	r2,r2,r2
  80f610:	1085883a 	add	r2,r2,r2
  80f614:	d8c00015 	stw	r3,0(sp)
  80f618:	14c5883a 	add	r2,r2,r19
  80f61c:	e000011e 	bne	fp,zero,80f624 <__hexnan+0x70>
  80f620:	10800104 	addi	r2,r2,4
  80f624:	d8c00117 	ldw	r3,4(sp)
  80f628:	153fff04 	addi	r20,r2,-4
  80f62c:	a021883a 	mov	r16,r20
  80f630:	1c400017 	ldw	r17,0(r3)
  80f634:	a02b883a 	mov	r21,r20
  80f638:	0025883a 	mov	r18,zero
  80f63c:	002f883a 	mov	r23,zero
  80f640:	000d883a 	mov	r6,zero
  80f644:	103fff15 	stw	zero,-4(r2)
  80f648:	8c400044 	addi	r17,r17,1
  80f64c:	89000003 	ldbu	r4,0(r17)
  80f650:	20000e26 	beq	r4,zero,80f68c <__hexnan+0xd8>
  80f654:	2585883a 	add	r2,r4,r22
  80f658:	10c00003 	ldbu	r3,0(r2)
  80f65c:	18002e1e 	bne	r3,zero,80f718 <__hexnan+0x164>
  80f660:	00800804 	movi	r2,32
  80f664:	11005536 	bltu	r2,r4,80f7bc <__hexnan+0x208>
  80f668:	bcbff70e 	bge	r23,r18,80f648 <__hexnan+0x94>
  80f66c:	8540022e 	bgeu	r16,r21,80f678 <__hexnan+0xc4>
  80f670:	008001c4 	movi	r2,7
  80f674:	11803c0e 	bge	r2,r6,80f768 <__hexnan+0x1b4>
  80f678:	9c003536 	bltu	r19,r16,80f750 <__hexnan+0x19c>
  80f67c:	8c400044 	addi	r17,r17,1
  80f680:	89000003 	ldbu	r4,0(r17)
  80f684:	01800204 	movi	r6,8
  80f688:	203ff21e 	bne	r4,zero,80f654 <__hexnan+0xa0>
  80f68c:	90004d26 	beq	r18,zero,80f7c4 <__hexnan+0x210>
  80f690:	85404336 	bltu	r16,r21,80f7a0 <__hexnan+0x1ec>
  80f694:	9c00382e 	bgeu	r19,r16,80f778 <__hexnan+0x1c4>
  80f698:	9807883a 	mov	r3,r19
  80f69c:	80800017 	ldw	r2,0(r16)
  80f6a0:	84000104 	addi	r16,r16,4
  80f6a4:	18800015 	stw	r2,0(r3)
  80f6a8:	18c00104 	addi	r3,r3,4
  80f6ac:	a43ffb2e 	bgeu	r20,r16,80f69c <__hexnan+0xe8>
  80f6b0:	18000015 	stw	zero,0(r3)
  80f6b4:	18c00104 	addi	r3,r3,4
  80f6b8:	a0fffd2e 	bgeu	r20,r3,80f6b0 <__hexnan+0xfc>
  80f6bc:	a0800017 	ldw	r2,0(r20)
  80f6c0:	1000071e 	bne	r2,zero,80f6e0 <__hexnan+0x12c>
  80f6c4:	9d004326 	beq	r19,r20,80f7d4 <__hexnan+0x220>
  80f6c8:	a007883a 	mov	r3,r20
  80f6cc:	00000106 	br	80f6d4 <__hexnan+0x120>
  80f6d0:	98c04026 	beq	r19,r3,80f7d4 <__hexnan+0x220>
  80f6d4:	18ffff04 	addi	r3,r3,-4
  80f6d8:	18800017 	ldw	r2,0(r3)
  80f6dc:	103ffc26 	beq	r2,zero,80f6d0 <__hexnan+0x11c>
  80f6e0:	00c00144 	movi	r3,5
  80f6e4:	1805883a 	mov	r2,r3
  80f6e8:	dfc00b17 	ldw	ra,44(sp)
  80f6ec:	df000a17 	ldw	fp,40(sp)
  80f6f0:	ddc00917 	ldw	r23,36(sp)
  80f6f4:	dd800817 	ldw	r22,32(sp)
  80f6f8:	dd400717 	ldw	r21,28(sp)
  80f6fc:	dd000617 	ldw	r20,24(sp)
  80f700:	dcc00517 	ldw	r19,20(sp)
  80f704:	dc800417 	ldw	r18,16(sp)
  80f708:	dc400317 	ldw	r17,12(sp)
  80f70c:	dc000217 	ldw	r16,8(sp)
  80f710:	dec00c04 	addi	sp,sp,48
  80f714:	f800283a 	ret
  80f718:	31800044 	addi	r6,r6,1
  80f71c:	00800204 	movi	r2,8
  80f720:	94800044 	addi	r18,r18,1
  80f724:	1180040e 	bge	r2,r6,80f738 <__hexnan+0x184>
  80f728:	9c3fc72e 	bgeu	r19,r16,80f648 <__hexnan+0x94>
  80f72c:	843fff04 	addi	r16,r16,-4
  80f730:	80000015 	stw	zero,0(r16)
  80f734:	01800044 	movi	r6,1
  80f738:	80800017 	ldw	r2,0(r16)
  80f73c:	18c003cc 	andi	r3,r3,15
  80f740:	1004913a 	slli	r2,r2,4
  80f744:	10c4b03a 	or	r2,r2,r3
  80f748:	80800015 	stw	r2,0(r16)
  80f74c:	003fbe06 	br	80f648 <__hexnan+0x94>
  80f750:	843fff04 	addi	r16,r16,-4
  80f754:	802b883a 	mov	r21,r16
  80f758:	902f883a 	mov	r23,r18
  80f75c:	000d883a 	mov	r6,zero
  80f760:	80000015 	stw	zero,0(r16)
  80f764:	003fb806 	br	80f648 <__hexnan+0x94>
  80f768:	8009883a 	mov	r4,r16
  80f76c:	a80b883a 	mov	r5,r21
  80f770:	080f5680 	call	80f568 <L_shift>
  80f774:	003fc006 	br	80f678 <__hexnan+0xc4>
  80f778:	e03fd01e 	bne	fp,zero,80f6bc <__hexnan+0x108>
  80f77c:	d8c00017 	ldw	r3,0(sp)
  80f780:	00800804 	movi	r2,32
  80f784:	10c5c83a 	sub	r2,r2,r3
  80f788:	00ffffc4 	movi	r3,-1
  80f78c:	1886d83a 	srl	r3,r3,r2
  80f790:	a0800017 	ldw	r2,0(r20)
  80f794:	10c4703a 	and	r2,r2,r3
  80f798:	a0800015 	stw	r2,0(r20)
  80f79c:	003fc806 	br	80f6c0 <__hexnan+0x10c>
  80f7a0:	008001c4 	movi	r2,7
  80f7a4:	11bfbb16 	blt	r2,r6,80f694 <__hexnan+0xe0>
  80f7a8:	a80b883a 	mov	r5,r21
  80f7ac:	8009883a 	mov	r4,r16
  80f7b0:	080f5680 	call	80f568 <L_shift>
  80f7b4:	9c3ff02e 	bgeu	r19,r16,80f778 <__hexnan+0x1c4>
  80f7b8:	003fb706 	br	80f698 <__hexnan+0xe4>
  80f7bc:	00800a44 	movi	r2,41
  80f7c0:	20800826 	beq	r4,r2,80f7e4 <__hexnan+0x230>
  80f7c4:	00c00104 	movi	r3,4
  80f7c8:	003fc606 	br	80f6e4 <__hexnan+0x130>
  80f7cc:	080ec540 	call	80ec54 <__hexdig_init>
  80f7d0:	003f8a06 	br	80f5fc <__hexnan+0x48>
  80f7d4:	00800044 	movi	r2,1
  80f7d8:	00c00144 	movi	r3,5
  80f7dc:	98800015 	stw	r2,0(r19)
  80f7e0:	003fc006 	br	80f6e4 <__hexnan+0x130>
  80f7e4:	903ff726 	beq	r18,zero,80f7c4 <__hexnan+0x210>
  80f7e8:	d8c00117 	ldw	r3,4(sp)
  80f7ec:	88800044 	addi	r2,r17,1
  80f7f0:	18800015 	stw	r2,0(r3)
  80f7f4:	857fa72e 	bgeu	r16,r21,80f694 <__hexnan+0xe0>
  80f7f8:	003fe906 	br	80f7a0 <__hexnan+0x1ec>

0080f7fc <__muldi3>:
  80f7fc:	defff204 	addi	sp,sp,-56
  80f800:	df000c15 	stw	fp,48(sp)
  80f804:	3038d43a 	srli	fp,r6,16
  80f808:	dd000815 	stw	r20,32(sp)
  80f80c:	dc400515 	stw	r17,20(sp)
  80f810:	2028d43a 	srli	r20,r4,16
  80f814:	247fffcc 	andi	r17,r4,65535
  80f818:	dc000415 	stw	r16,16(sp)
  80f81c:	343fffcc 	andi	r16,r6,65535
  80f820:	dcc00715 	stw	r19,28(sp)
  80f824:	d9000015 	stw	r4,0(sp)
  80f828:	2827883a 	mov	r19,r5
  80f82c:	8809883a 	mov	r4,r17
  80f830:	d9400115 	stw	r5,4(sp)
  80f834:	800b883a 	mov	r5,r16
  80f838:	d9800215 	stw	r6,8(sp)
  80f83c:	dfc00d15 	stw	ra,52(sp)
  80f840:	d9c00315 	stw	r7,12(sp)
  80f844:	dd800a15 	stw	r22,40(sp)
  80f848:	dd400915 	stw	r21,36(sp)
  80f84c:	302d883a 	mov	r22,r6
  80f850:	ddc00b15 	stw	r23,44(sp)
  80f854:	dc800615 	stw	r18,24(sp)
  80f858:	0801fec0 	call	801fec <__mulsi3>
  80f85c:	8809883a 	mov	r4,r17
  80f860:	e00b883a 	mov	r5,fp
  80f864:	102b883a 	mov	r21,r2
  80f868:	0801fec0 	call	801fec <__mulsi3>
  80f86c:	800b883a 	mov	r5,r16
  80f870:	a009883a 	mov	r4,r20
  80f874:	1023883a 	mov	r17,r2
  80f878:	0801fec0 	call	801fec <__mulsi3>
  80f87c:	a009883a 	mov	r4,r20
  80f880:	e00b883a 	mov	r5,fp
  80f884:	1021883a 	mov	r16,r2
  80f888:	0801fec0 	call	801fec <__mulsi3>
  80f88c:	a8ffffcc 	andi	r3,r21,65535
  80f890:	a82ad43a 	srli	r21,r21,16
  80f894:	8c23883a 	add	r17,r17,r16
  80f898:	1011883a 	mov	r8,r2
  80f89c:	ac6b883a 	add	r21,r21,r17
  80f8a0:	a804943a 	slli	r2,r21,16
  80f8a4:	b009883a 	mov	r4,r22
  80f8a8:	980b883a 	mov	r5,r19
  80f8ac:	10c7883a 	add	r3,r2,r3
  80f8b0:	a812d43a 	srli	r9,r21,16
  80f8b4:	180d883a 	mov	r6,r3
  80f8b8:	ac00022e 	bgeu	r21,r16,80f8c4 <__muldi3+0xc8>
  80f8bc:	00800074 	movhi	r2,1
  80f8c0:	4091883a 	add	r8,r8,r2
  80f8c4:	4267883a 	add	r19,r8,r9
  80f8c8:	302d883a 	mov	r22,r6
  80f8cc:	0801fec0 	call	801fec <__mulsi3>
  80f8d0:	d9400317 	ldw	r5,12(sp)
  80f8d4:	d9000017 	ldw	r4,0(sp)
  80f8d8:	1023883a 	mov	r17,r2
  80f8dc:	0801fec0 	call	801fec <__mulsi3>
  80f8e0:	14cb883a 	add	r5,r2,r19
  80f8e4:	894b883a 	add	r5,r17,r5
  80f8e8:	b005883a 	mov	r2,r22
  80f8ec:	2807883a 	mov	r3,r5
  80f8f0:	dfc00d17 	ldw	ra,52(sp)
  80f8f4:	df000c17 	ldw	fp,48(sp)
  80f8f8:	ddc00b17 	ldw	r23,44(sp)
  80f8fc:	dd800a17 	ldw	r22,40(sp)
  80f900:	dd400917 	ldw	r21,36(sp)
  80f904:	dd000817 	ldw	r20,32(sp)
  80f908:	dcc00717 	ldw	r19,28(sp)
  80f90c:	dc800617 	ldw	r18,24(sp)
  80f910:	dc400517 	ldw	r17,20(sp)
  80f914:	dc000417 	ldw	r16,16(sp)
  80f918:	dec00e04 	addi	sp,sp,56
  80f91c:	f800283a 	ret

0080f920 <__fixunsdfsi>:
  80f920:	defffb04 	addi	sp,sp,-20
  80f924:	dc400115 	stw	r17,4(sp)
  80f928:	dc000015 	stw	r16,0(sp)
  80f92c:	04507834 	movhi	r17,16864
  80f930:	0021883a 	mov	r16,zero
  80f934:	800d883a 	mov	r6,r16
  80f938:	880f883a 	mov	r7,r17
  80f93c:	dcc00315 	stw	r19,12(sp)
  80f940:	dc800215 	stw	r18,8(sp)
  80f944:	2827883a 	mov	r19,r5
  80f948:	2025883a 	mov	r18,r4
  80f94c:	dfc00415 	stw	ra,16(sp)
  80f950:	08112580 	call	811258 <__gedf2>
  80f954:	000d883a 	mov	r6,zero
  80f958:	880f883a 	mov	r7,r17
  80f95c:	980b883a 	mov	r5,r19
  80f960:	9009883a 	mov	r4,r18
  80f964:	10000d16 	blt	r2,zero,80f99c <__fixunsdfsi+0x7c>
  80f968:	0810c080 	call	810c08 <__subdf3>
  80f96c:	180b883a 	mov	r5,r3
  80f970:	1009883a 	mov	r4,r2
  80f974:	08114e80 	call	8114e8 <__fixdfsi>
  80f978:	00e00034 	movhi	r3,32768
  80f97c:	10c5883a 	add	r2,r2,r3
  80f980:	dfc00417 	ldw	ra,16(sp)
  80f984:	dcc00317 	ldw	r19,12(sp)
  80f988:	dc800217 	ldw	r18,8(sp)
  80f98c:	dc400117 	ldw	r17,4(sp)
  80f990:	dc000017 	ldw	r16,0(sp)
  80f994:	dec00504 	addi	sp,sp,20
  80f998:	f800283a 	ret
  80f99c:	980b883a 	mov	r5,r19
  80f9a0:	9009883a 	mov	r4,r18
  80f9a4:	08114e80 	call	8114e8 <__fixdfsi>
  80f9a8:	dfc00417 	ldw	ra,16(sp)
  80f9ac:	dcc00317 	ldw	r19,12(sp)
  80f9b0:	dc800217 	ldw	r18,8(sp)
  80f9b4:	dc400117 	ldw	r17,4(sp)
  80f9b8:	dc000017 	ldw	r16,0(sp)
  80f9bc:	dec00504 	addi	sp,sp,20
  80f9c0:	f800283a 	ret

0080f9c4 <__udivdi3>:
  80f9c4:	defff104 	addi	sp,sp,-60
  80f9c8:	0015883a 	mov	r10,zero
  80f9cc:	2005883a 	mov	r2,r4
  80f9d0:	3011883a 	mov	r8,r6
  80f9d4:	df000d15 	stw	fp,52(sp)
  80f9d8:	dd400a15 	stw	r21,40(sp)
  80f9dc:	dcc00815 	stw	r19,32(sp)
  80f9e0:	dfc00e15 	stw	ra,56(sp)
  80f9e4:	ddc00c15 	stw	r23,48(sp)
  80f9e8:	dd800b15 	stw	r22,44(sp)
  80f9ec:	dd000915 	stw	r20,36(sp)
  80f9f0:	dc800715 	stw	r18,28(sp)
  80f9f4:	dc400615 	stw	r17,24(sp)
  80f9f8:	dc000515 	stw	r16,20(sp)
  80f9fc:	da800315 	stw	r10,12(sp)
  80fa00:	4027883a 	mov	r19,r8
  80fa04:	1039883a 	mov	fp,r2
  80fa08:	282b883a 	mov	r21,r5
  80fa0c:	da800415 	stw	r10,16(sp)
  80fa10:	3800401e 	bne	r7,zero,80fb14 <__udivdi3+0x150>
  80fa14:	2a006536 	bltu	r5,r8,80fbac <__udivdi3+0x1e8>
  80fa18:	4000b526 	beq	r8,zero,80fcf0 <__udivdi3+0x32c>
  80fa1c:	00bfffd4 	movui	r2,65535
  80fa20:	14c0ad36 	bltu	r2,r19,80fcd8 <__udivdi3+0x314>
  80fa24:	00803fc4 	movi	r2,255
  80fa28:	14c15e36 	bltu	r2,r19,80ffa4 <__udivdi3+0x5e0>
  80fa2c:	000b883a 	mov	r5,zero
  80fa30:	0005883a 	mov	r2,zero
  80fa34:	9884d83a 	srl	r2,r19,r2
  80fa38:	01002074 	movhi	r4,129
  80fa3c:	2112fe04 	addi	r4,r4,19448
  80fa40:	01800804 	movi	r6,32
  80fa44:	1105883a 	add	r2,r2,r4
  80fa48:	10c00003 	ldbu	r3,0(r2)
  80fa4c:	28c7883a 	add	r3,r5,r3
  80fa50:	30e9c83a 	sub	r20,r6,r3
  80fa54:	a0010a1e 	bne	r20,zero,80fe80 <__udivdi3+0x4bc>
  80fa58:	982ed43a 	srli	r23,r19,16
  80fa5c:	acebc83a 	sub	r21,r21,r19
  80fa60:	9dbfffcc 	andi	r22,r19,65535
  80fa64:	05000044 	movi	r20,1
  80fa68:	a809883a 	mov	r4,r21
  80fa6c:	b80b883a 	mov	r5,r23
  80fa70:	08117700 	call	811770 <__udivsi3>
  80fa74:	100b883a 	mov	r5,r2
  80fa78:	b009883a 	mov	r4,r22
  80fa7c:	1021883a 	mov	r16,r2
  80fa80:	0801fec0 	call	801fec <__mulsi3>
  80fa84:	a809883a 	mov	r4,r21
  80fa88:	b80b883a 	mov	r5,r23
  80fa8c:	1023883a 	mov	r17,r2
  80fa90:	08117780 	call	811778 <__umodsi3>
  80fa94:	1004943a 	slli	r2,r2,16
  80fa98:	e006d43a 	srli	r3,fp,16
  80fa9c:	10c4b03a 	or	r2,r2,r3
  80faa0:	1440042e 	bgeu	r2,r17,80fab4 <__udivdi3+0xf0>
  80faa4:	14c5883a 	add	r2,r2,r19
  80faa8:	843fffc4 	addi	r16,r16,-1
  80faac:	14c00136 	bltu	r2,r19,80fab4 <__udivdi3+0xf0>
  80fab0:	14415c36 	bltu	r2,r17,810024 <__udivdi3+0x660>
  80fab4:	1463c83a 	sub	r17,r2,r17
  80fab8:	8809883a 	mov	r4,r17
  80fabc:	b80b883a 	mov	r5,r23
  80fac0:	08117700 	call	811770 <__udivsi3>
  80fac4:	100b883a 	mov	r5,r2
  80fac8:	b009883a 	mov	r4,r22
  80facc:	102b883a 	mov	r21,r2
  80fad0:	0801fec0 	call	801fec <__mulsi3>
  80fad4:	8809883a 	mov	r4,r17
  80fad8:	b80b883a 	mov	r5,r23
  80fadc:	1025883a 	mov	r18,r2
  80fae0:	08117780 	call	811778 <__umodsi3>
  80fae4:	1004943a 	slli	r2,r2,16
  80fae8:	e0ffffcc 	andi	r3,fp,65535
  80faec:	10c4b03a 	or	r2,r2,r3
  80faf0:	1480042e 	bgeu	r2,r18,80fb04 <__udivdi3+0x140>
  80faf4:	9885883a 	add	r2,r19,r2
  80faf8:	ad7fffc4 	addi	r21,r21,-1
  80fafc:	14c00136 	bltu	r2,r19,80fb04 <__udivdi3+0x140>
  80fb00:	14813c36 	bltu	r2,r18,80fff4 <__udivdi3+0x630>
  80fb04:	8004943a 	slli	r2,r16,16
  80fb08:	a009883a 	mov	r4,r20
  80fb0c:	a884b03a 	or	r2,r21,r2
  80fb10:	00001506 	br	80fb68 <__udivdi3+0x1a4>
  80fb14:	380d883a 	mov	r6,r7
  80fb18:	29c06c36 	bltu	r5,r7,80fccc <__udivdi3+0x308>
  80fb1c:	00bfffd4 	movui	r2,65535
  80fb20:	11c06436 	bltu	r2,r7,80fcb4 <__udivdi3+0x2f0>
  80fb24:	00803fc4 	movi	r2,255
  80fb28:	11c11836 	bltu	r2,r7,80ff8c <__udivdi3+0x5c8>
  80fb2c:	000b883a 	mov	r5,zero
  80fb30:	0005883a 	mov	r2,zero
  80fb34:	3084d83a 	srl	r2,r6,r2
  80fb38:	01002074 	movhi	r4,129
  80fb3c:	2112fe04 	addi	r4,r4,19448
  80fb40:	01c00804 	movi	r7,32
  80fb44:	1105883a 	add	r2,r2,r4
  80fb48:	10c00003 	ldbu	r3,0(r2)
  80fb4c:	28c7883a 	add	r3,r5,r3
  80fb50:	38edc83a 	sub	r22,r7,r3
  80fb54:	b000731e 	bne	r22,zero,80fd24 <__udivdi3+0x360>
  80fb58:	35400136 	bltu	r6,r21,80fb60 <__udivdi3+0x19c>
  80fb5c:	e4c05b36 	bltu	fp,r19,80fccc <__udivdi3+0x308>
  80fb60:	00800044 	movi	r2,1
  80fb64:	0009883a 	mov	r4,zero
  80fb68:	d8800315 	stw	r2,12(sp)
  80fb6c:	d9400317 	ldw	r5,12(sp)
  80fb70:	2007883a 	mov	r3,r4
  80fb74:	d9000415 	stw	r4,16(sp)
  80fb78:	2805883a 	mov	r2,r5
  80fb7c:	dfc00e17 	ldw	ra,56(sp)
  80fb80:	df000d17 	ldw	fp,52(sp)
  80fb84:	ddc00c17 	ldw	r23,48(sp)
  80fb88:	dd800b17 	ldw	r22,44(sp)
  80fb8c:	dd400a17 	ldw	r21,40(sp)
  80fb90:	dd000917 	ldw	r20,36(sp)
  80fb94:	dcc00817 	ldw	r19,32(sp)
  80fb98:	dc800717 	ldw	r18,28(sp)
  80fb9c:	dc400617 	ldw	r17,24(sp)
  80fba0:	dc000517 	ldw	r16,20(sp)
  80fba4:	dec00f04 	addi	sp,sp,60
  80fba8:	f800283a 	ret
  80fbac:	00bfffd4 	movui	r2,65535
  80fbb0:	12005636 	bltu	r2,r8,80fd0c <__udivdi3+0x348>
  80fbb4:	00803fc4 	movi	r2,255
  80fbb8:	12010036 	bltu	r2,r8,80ffbc <__udivdi3+0x5f8>
  80fbbc:	000b883a 	mov	r5,zero
  80fbc0:	0005883a 	mov	r2,zero
  80fbc4:	9884d83a 	srl	r2,r19,r2
  80fbc8:	01002074 	movhi	r4,129
  80fbcc:	2112fe04 	addi	r4,r4,19448
  80fbd0:	01800804 	movi	r6,32
  80fbd4:	1105883a 	add	r2,r2,r4
  80fbd8:	10c00003 	ldbu	r3,0(r2)
  80fbdc:	28c7883a 	add	r3,r5,r3
  80fbe0:	30cbc83a 	sub	r5,r6,r3
  80fbe4:	28000626 	beq	r5,zero,80fc00 <__udivdi3+0x23c>
  80fbe8:	3145c83a 	sub	r2,r6,r5
  80fbec:	e084d83a 	srl	r2,fp,r2
  80fbf0:	a946983a 	sll	r3,r21,r5
  80fbf4:	e178983a 	sll	fp,fp,r5
  80fbf8:	9966983a 	sll	r19,r19,r5
  80fbfc:	18aab03a 	or	r21,r3,r2
  80fc00:	982ed43a 	srli	r23,r19,16
  80fc04:	a809883a 	mov	r4,r21
  80fc08:	9cbfffcc 	andi	r18,r19,65535
  80fc0c:	b80b883a 	mov	r5,r23
  80fc10:	08117700 	call	811770 <__udivsi3>
  80fc14:	100b883a 	mov	r5,r2
  80fc18:	9009883a 	mov	r4,r18
  80fc1c:	1021883a 	mov	r16,r2
  80fc20:	0801fec0 	call	801fec <__mulsi3>
  80fc24:	a809883a 	mov	r4,r21
  80fc28:	b80b883a 	mov	r5,r23
  80fc2c:	1023883a 	mov	r17,r2
  80fc30:	08117780 	call	811778 <__umodsi3>
  80fc34:	1004943a 	slli	r2,r2,16
  80fc38:	e006d43a 	srli	r3,fp,16
  80fc3c:	10c4b03a 	or	r2,r2,r3
  80fc40:	1440042e 	bgeu	r2,r17,80fc54 <__udivdi3+0x290>
  80fc44:	14c5883a 	add	r2,r2,r19
  80fc48:	843fffc4 	addi	r16,r16,-1
  80fc4c:	14c00136 	bltu	r2,r19,80fc54 <__udivdi3+0x290>
  80fc50:	1440ea36 	bltu	r2,r17,80fffc <__udivdi3+0x638>
  80fc54:	1463c83a 	sub	r17,r2,r17
  80fc58:	8809883a 	mov	r4,r17
  80fc5c:	b80b883a 	mov	r5,r23
  80fc60:	08117700 	call	811770 <__udivsi3>
  80fc64:	100b883a 	mov	r5,r2
  80fc68:	9009883a 	mov	r4,r18
  80fc6c:	102b883a 	mov	r21,r2
  80fc70:	0801fec0 	call	801fec <__mulsi3>
  80fc74:	8809883a 	mov	r4,r17
  80fc78:	b80b883a 	mov	r5,r23
  80fc7c:	1025883a 	mov	r18,r2
  80fc80:	08117780 	call	811778 <__umodsi3>
  80fc84:	1004943a 	slli	r2,r2,16
  80fc88:	e0ffffcc 	andi	r3,fp,65535
  80fc8c:	10c4b03a 	or	r2,r2,r3
  80fc90:	1480042e 	bgeu	r2,r18,80fca4 <__udivdi3+0x2e0>
  80fc94:	9885883a 	add	r2,r19,r2
  80fc98:	ad7fffc4 	addi	r21,r21,-1
  80fc9c:	14c00136 	bltu	r2,r19,80fca4 <__udivdi3+0x2e0>
  80fca0:	1480d936 	bltu	r2,r18,810008 <__udivdi3+0x644>
  80fca4:	8004943a 	slli	r2,r16,16
  80fca8:	0009883a 	mov	r4,zero
  80fcac:	a884b03a 	or	r2,r21,r2
  80fcb0:	003fad06 	br	80fb68 <__udivdi3+0x1a4>
  80fcb4:	00804034 	movhi	r2,256
  80fcb8:	10bfffc4 	addi	r2,r2,-1
  80fcbc:	11c0b636 	bltu	r2,r7,80ff98 <__udivdi3+0x5d4>
  80fcc0:	01400404 	movi	r5,16
  80fcc4:	2805883a 	mov	r2,r5
  80fcc8:	003f9a06 	br	80fb34 <__udivdi3+0x170>
  80fccc:	0005883a 	mov	r2,zero
  80fcd0:	0009883a 	mov	r4,zero
  80fcd4:	003fa406 	br	80fb68 <__udivdi3+0x1a4>
  80fcd8:	00804034 	movhi	r2,256
  80fcdc:	10bfffc4 	addi	r2,r2,-1
  80fce0:	14c0b336 	bltu	r2,r19,80ffb0 <__udivdi3+0x5ec>
  80fce4:	01400404 	movi	r5,16
  80fce8:	2805883a 	mov	r2,r5
  80fcec:	003f5106 	br	80fa34 <__udivdi3+0x70>
  80fcf0:	01000044 	movi	r4,1
  80fcf4:	000b883a 	mov	r5,zero
  80fcf8:	08117700 	call	811770 <__udivsi3>
  80fcfc:	1027883a 	mov	r19,r2
  80fd00:	00bfffd4 	movui	r2,65535
  80fd04:	14fff436 	bltu	r2,r19,80fcd8 <__udivdi3+0x314>
  80fd08:	003f4606 	br	80fa24 <__udivdi3+0x60>
  80fd0c:	00804034 	movhi	r2,256
  80fd10:	10bfffc4 	addi	r2,r2,-1
  80fd14:	1200ac36 	bltu	r2,r8,80ffc8 <__udivdi3+0x604>
  80fd18:	01400404 	movi	r5,16
  80fd1c:	2805883a 	mov	r2,r5
  80fd20:	003fa806 	br	80fbc4 <__udivdi3+0x200>
  80fd24:	3d85c83a 	sub	r2,r7,r22
  80fd28:	3588983a 	sll	r4,r6,r22
  80fd2c:	9886d83a 	srl	r3,r19,r2
  80fd30:	a8a2d83a 	srl	r17,r21,r2
  80fd34:	e084d83a 	srl	r2,fp,r2
  80fd38:	20eeb03a 	or	r23,r4,r3
  80fd3c:	b824d43a 	srli	r18,r23,16
  80fd40:	ad86983a 	sll	r3,r21,r22
  80fd44:	8809883a 	mov	r4,r17
  80fd48:	900b883a 	mov	r5,r18
  80fd4c:	1886b03a 	or	r3,r3,r2
  80fd50:	d8c00115 	stw	r3,4(sp)
  80fd54:	bc3fffcc 	andi	r16,r23,65535
  80fd58:	08117700 	call	811770 <__udivsi3>
  80fd5c:	100b883a 	mov	r5,r2
  80fd60:	8009883a 	mov	r4,r16
  80fd64:	1029883a 	mov	r20,r2
  80fd68:	0801fec0 	call	801fec <__mulsi3>
  80fd6c:	900b883a 	mov	r5,r18
  80fd70:	8809883a 	mov	r4,r17
  80fd74:	102b883a 	mov	r21,r2
  80fd78:	08117780 	call	811778 <__umodsi3>
  80fd7c:	d9400117 	ldw	r5,4(sp)
  80fd80:	1004943a 	slli	r2,r2,16
  80fd84:	9da6983a 	sll	r19,r19,r22
  80fd88:	2806d43a 	srli	r3,r5,16
  80fd8c:	10c4b03a 	or	r2,r2,r3
  80fd90:	1540032e 	bgeu	r2,r21,80fda0 <__udivdi3+0x3dc>
  80fd94:	15c5883a 	add	r2,r2,r23
  80fd98:	a53fffc4 	addi	r20,r20,-1
  80fd9c:	15c0912e 	bgeu	r2,r23,80ffe4 <__udivdi3+0x620>
  80fda0:	1563c83a 	sub	r17,r2,r21
  80fda4:	8809883a 	mov	r4,r17
  80fda8:	900b883a 	mov	r5,r18
  80fdac:	08117700 	call	811770 <__udivsi3>
  80fdb0:	100b883a 	mov	r5,r2
  80fdb4:	8009883a 	mov	r4,r16
  80fdb8:	102b883a 	mov	r21,r2
  80fdbc:	0801fec0 	call	801fec <__mulsi3>
  80fdc0:	8809883a 	mov	r4,r17
  80fdc4:	900b883a 	mov	r5,r18
  80fdc8:	1021883a 	mov	r16,r2
  80fdcc:	08117780 	call	811778 <__umodsi3>
  80fdd0:	da800117 	ldw	r10,4(sp)
  80fdd4:	1004943a 	slli	r2,r2,16
  80fdd8:	50ffffcc 	andi	r3,r10,65535
  80fddc:	10c6b03a 	or	r3,r2,r3
  80fde0:	1c00032e 	bgeu	r3,r16,80fdf0 <__udivdi3+0x42c>
  80fde4:	1dc7883a 	add	r3,r3,r23
  80fde8:	ad7fffc4 	addi	r21,r21,-1
  80fdec:	1dc0792e 	bgeu	r3,r23,80ffd4 <__udivdi3+0x610>
  80fdf0:	a004943a 	slli	r2,r20,16
  80fdf4:	982ed43a 	srli	r23,r19,16
  80fdf8:	9cffffcc 	andi	r19,r19,65535
  80fdfc:	a8a4b03a 	or	r18,r21,r2
  80fe00:	947fffcc 	andi	r17,r18,65535
  80fe04:	902ad43a 	srli	r21,r18,16
  80fe08:	8809883a 	mov	r4,r17
  80fe0c:	980b883a 	mov	r5,r19
  80fe10:	1c21c83a 	sub	r16,r3,r16
  80fe14:	0801fec0 	call	801fec <__mulsi3>
  80fe18:	8809883a 	mov	r4,r17
  80fe1c:	b80b883a 	mov	r5,r23
  80fe20:	1029883a 	mov	r20,r2
  80fe24:	0801fec0 	call	801fec <__mulsi3>
  80fe28:	980b883a 	mov	r5,r19
  80fe2c:	a809883a 	mov	r4,r21
  80fe30:	1023883a 	mov	r17,r2
  80fe34:	0801fec0 	call	801fec <__mulsi3>
  80fe38:	a809883a 	mov	r4,r21
  80fe3c:	b80b883a 	mov	r5,r23
  80fe40:	1027883a 	mov	r19,r2
  80fe44:	0801fec0 	call	801fec <__mulsi3>
  80fe48:	1009883a 	mov	r4,r2
  80fe4c:	a004d43a 	srli	r2,r20,16
  80fe50:	8ce3883a 	add	r17,r17,r19
  80fe54:	1447883a 	add	r3,r2,r17
  80fe58:	1cc0022e 	bgeu	r3,r19,80fe64 <__udivdi3+0x4a0>
  80fe5c:	00800074 	movhi	r2,1
  80fe60:	2089883a 	add	r4,r4,r2
  80fe64:	1804d43a 	srli	r2,r3,16
  80fe68:	2085883a 	add	r2,r4,r2
  80fe6c:	80804436 	bltu	r16,r2,80ff80 <__udivdi3+0x5bc>
  80fe70:	80803e26 	beq	r16,r2,80ff6c <__udivdi3+0x5a8>
  80fe74:	9005883a 	mov	r2,r18
  80fe78:	0009883a 	mov	r4,zero
  80fe7c:	003f3a06 	br	80fb68 <__udivdi3+0x1a4>
  80fe80:	9d26983a 	sll	r19,r19,r20
  80fe84:	3505c83a 	sub	r2,r6,r20
  80fe88:	a8a2d83a 	srl	r17,r21,r2
  80fe8c:	982ed43a 	srli	r23,r19,16
  80fe90:	e084d83a 	srl	r2,fp,r2
  80fe94:	ad06983a 	sll	r3,r21,r20
  80fe98:	8809883a 	mov	r4,r17
  80fe9c:	b80b883a 	mov	r5,r23
  80fea0:	1886b03a 	or	r3,r3,r2
  80fea4:	d8c00015 	stw	r3,0(sp)
  80fea8:	9dbfffcc 	andi	r22,r19,65535
  80feac:	08117700 	call	811770 <__udivsi3>
  80feb0:	100b883a 	mov	r5,r2
  80feb4:	b009883a 	mov	r4,r22
  80feb8:	d8800215 	stw	r2,8(sp)
  80febc:	0801fec0 	call	801fec <__mulsi3>
  80fec0:	8809883a 	mov	r4,r17
  80fec4:	b80b883a 	mov	r5,r23
  80fec8:	102b883a 	mov	r21,r2
  80fecc:	08117780 	call	811778 <__umodsi3>
  80fed0:	d9000017 	ldw	r4,0(sp)
  80fed4:	1004943a 	slli	r2,r2,16
  80fed8:	2006d43a 	srli	r3,r4,16
  80fedc:	10c4b03a 	or	r2,r2,r3
  80fee0:	1540052e 	bgeu	r2,r21,80fef8 <__udivdi3+0x534>
  80fee4:	d9400217 	ldw	r5,8(sp)
  80fee8:	14c5883a 	add	r2,r2,r19
  80feec:	297fffc4 	addi	r5,r5,-1
  80fef0:	d9400215 	stw	r5,8(sp)
  80fef4:	14c0462e 	bgeu	r2,r19,810010 <__udivdi3+0x64c>
  80fef8:	1563c83a 	sub	r17,r2,r21
  80fefc:	8809883a 	mov	r4,r17
  80ff00:	b80b883a 	mov	r5,r23
  80ff04:	08117700 	call	811770 <__udivsi3>
  80ff08:	100b883a 	mov	r5,r2
  80ff0c:	b009883a 	mov	r4,r22
  80ff10:	1025883a 	mov	r18,r2
  80ff14:	0801fec0 	call	801fec <__mulsi3>
  80ff18:	8809883a 	mov	r4,r17
  80ff1c:	b80b883a 	mov	r5,r23
  80ff20:	1021883a 	mov	r16,r2
  80ff24:	08117780 	call	811778 <__umodsi3>
  80ff28:	da800017 	ldw	r10,0(sp)
  80ff2c:	1004943a 	slli	r2,r2,16
  80ff30:	50ffffcc 	andi	r3,r10,65535
  80ff34:	10c6b03a 	or	r3,r2,r3
  80ff38:	1c00062e 	bgeu	r3,r16,80ff54 <__udivdi3+0x590>
  80ff3c:	1cc7883a 	add	r3,r3,r19
  80ff40:	94bfffc4 	addi	r18,r18,-1
  80ff44:	1cc00336 	bltu	r3,r19,80ff54 <__udivdi3+0x590>
  80ff48:	1c00022e 	bgeu	r3,r16,80ff54 <__udivdi3+0x590>
  80ff4c:	94bfffc4 	addi	r18,r18,-1
  80ff50:	1cc7883a 	add	r3,r3,r19
  80ff54:	d9000217 	ldw	r4,8(sp)
  80ff58:	e538983a 	sll	fp,fp,r20
  80ff5c:	1c2bc83a 	sub	r21,r3,r16
  80ff60:	2004943a 	slli	r2,r4,16
  80ff64:	90a8b03a 	or	r20,r18,r2
  80ff68:	003ebf06 	br	80fa68 <__udivdi3+0xa4>
  80ff6c:	1804943a 	slli	r2,r3,16
  80ff70:	e588983a 	sll	r4,fp,r22
  80ff74:	a0ffffcc 	andi	r3,r20,65535
  80ff78:	10c5883a 	add	r2,r2,r3
  80ff7c:	20bfbd2e 	bgeu	r4,r2,80fe74 <__udivdi3+0x4b0>
  80ff80:	90bfffc4 	addi	r2,r18,-1
  80ff84:	0009883a 	mov	r4,zero
  80ff88:	003ef706 	br	80fb68 <__udivdi3+0x1a4>
  80ff8c:	01400204 	movi	r5,8
  80ff90:	2805883a 	mov	r2,r5
  80ff94:	003ee706 	br	80fb34 <__udivdi3+0x170>
  80ff98:	01400604 	movi	r5,24
  80ff9c:	2805883a 	mov	r2,r5
  80ffa0:	003ee406 	br	80fb34 <__udivdi3+0x170>
  80ffa4:	01400204 	movi	r5,8
  80ffa8:	2805883a 	mov	r2,r5
  80ffac:	003ea106 	br	80fa34 <__udivdi3+0x70>
  80ffb0:	01400604 	movi	r5,24
  80ffb4:	2805883a 	mov	r2,r5
  80ffb8:	003e9e06 	br	80fa34 <__udivdi3+0x70>
  80ffbc:	01400204 	movi	r5,8
  80ffc0:	2805883a 	mov	r2,r5
  80ffc4:	003eff06 	br	80fbc4 <__udivdi3+0x200>
  80ffc8:	01400604 	movi	r5,24
  80ffcc:	2805883a 	mov	r2,r5
  80ffd0:	003efc06 	br	80fbc4 <__udivdi3+0x200>
  80ffd4:	1c3f862e 	bgeu	r3,r16,80fdf0 <__udivdi3+0x42c>
  80ffd8:	1dc7883a 	add	r3,r3,r23
  80ffdc:	ad7fffc4 	addi	r21,r21,-1
  80ffe0:	003f8306 	br	80fdf0 <__udivdi3+0x42c>
  80ffe4:	157f6e2e 	bgeu	r2,r21,80fda0 <__udivdi3+0x3dc>
  80ffe8:	a53fffc4 	addi	r20,r20,-1
  80ffec:	15c5883a 	add	r2,r2,r23
  80fff0:	003f6b06 	br	80fda0 <__udivdi3+0x3dc>
  80fff4:	ad7fffc4 	addi	r21,r21,-1
  80fff8:	003ec206 	br	80fb04 <__udivdi3+0x140>
  80fffc:	843fffc4 	addi	r16,r16,-1
  810000:	14c5883a 	add	r2,r2,r19
  810004:	003f1306 	br	80fc54 <__udivdi3+0x290>
  810008:	ad7fffc4 	addi	r21,r21,-1
  81000c:	003f2506 	br	80fca4 <__udivdi3+0x2e0>
  810010:	157fb92e 	bgeu	r2,r21,80fef8 <__udivdi3+0x534>
  810014:	297fffc4 	addi	r5,r5,-1
  810018:	14c5883a 	add	r2,r2,r19
  81001c:	d9400215 	stw	r5,8(sp)
  810020:	003fb506 	br	80fef8 <__udivdi3+0x534>
  810024:	843fffc4 	addi	r16,r16,-1
  810028:	14c5883a 	add	r2,r2,r19
  81002c:	003ea106 	br	80fab4 <__udivdi3+0xf0>

00810030 <__umoddi3>:
  810030:	defff004 	addi	sp,sp,-64
  810034:	3011883a 	mov	r8,r6
  810038:	000d883a 	mov	r6,zero
  81003c:	dd400b15 	stw	r21,44(sp)
  810040:	dcc00915 	stw	r19,36(sp)
  810044:	dc000615 	stw	r16,24(sp)
  810048:	dfc00f15 	stw	ra,60(sp)
  81004c:	df000e15 	stw	fp,56(sp)
  810050:	ddc00d15 	stw	r23,52(sp)
  810054:	dd800c15 	stw	r22,48(sp)
  810058:	dd000a15 	stw	r20,40(sp)
  81005c:	dc800815 	stw	r18,32(sp)
  810060:	dc400715 	stw	r17,28(sp)
  810064:	2817883a 	mov	r11,r5
  810068:	d9800415 	stw	r6,16(sp)
  81006c:	4027883a 	mov	r19,r8
  810070:	d9800515 	stw	r6,20(sp)
  810074:	2021883a 	mov	r16,r4
  810078:	282b883a 	mov	r21,r5
  81007c:	38002c1e 	bne	r7,zero,810130 <__umoddi3+0x100>
  810080:	2a005636 	bltu	r5,r8,8101dc <__umoddi3+0x1ac>
  810084:	40009a26 	beq	r8,zero,8102f0 <__umoddi3+0x2c0>
  810088:	00bfffd4 	movui	r2,65535
  81008c:	14c09236 	bltu	r2,r19,8102d8 <__umoddi3+0x2a8>
  810090:	00803fc4 	movi	r2,255
  810094:	14c15c36 	bltu	r2,r19,810608 <__umoddi3+0x5d8>
  810098:	000b883a 	mov	r5,zero
  81009c:	0005883a 	mov	r2,zero
  8100a0:	9884d83a 	srl	r2,r19,r2
  8100a4:	01002074 	movhi	r4,129
  8100a8:	2112fe04 	addi	r4,r4,19448
  8100ac:	01800804 	movi	r6,32
  8100b0:	1105883a 	add	r2,r2,r4
  8100b4:	10c00003 	ldbu	r3,0(r2)
  8100b8:	28c7883a 	add	r3,r5,r3
  8100bc:	30e5c83a 	sub	r18,r6,r3
  8100c0:	9000a41e 	bne	r18,zero,810354 <__umoddi3+0x324>
  8100c4:	982ed43a 	srli	r23,r19,16
  8100c8:	acebc83a 	sub	r21,r21,r19
  8100cc:	9d3fffcc 	andi	r20,r19,65535
  8100d0:	002d883a 	mov	r22,zero
  8100d4:	a809883a 	mov	r4,r21
  8100d8:	b80b883a 	mov	r5,r23
  8100dc:	08117700 	call	811770 <__udivsi3>
  8100e0:	100b883a 	mov	r5,r2
  8100e4:	a009883a 	mov	r4,r20
  8100e8:	0801fec0 	call	801fec <__mulsi3>
  8100ec:	a809883a 	mov	r4,r21
  8100f0:	b80b883a 	mov	r5,r23
  8100f4:	1023883a 	mov	r17,r2
  8100f8:	08117780 	call	811778 <__umodsi3>
  8100fc:	1004943a 	slli	r2,r2,16
  810100:	8006d43a 	srli	r3,r16,16
  810104:	10c4b03a 	or	r2,r2,r3
  810108:	1440032e 	bgeu	r2,r17,810118 <__umoddi3+0xe8>
  81010c:	14c5883a 	add	r2,r2,r19
  810110:	14c00136 	bltu	r2,r19,810118 <__umoddi3+0xe8>
  810114:	14415836 	bltu	r2,r17,810678 <__umoddi3+0x648>
  810118:	1463c83a 	sub	r17,r2,r17
  81011c:	8809883a 	mov	r4,r17
  810120:	b80b883a 	mov	r5,r23
  810124:	08117700 	call	811770 <__udivsi3>
  810128:	a009883a 	mov	r4,r20
  81012c:	00005306 	br	81027c <__umoddi3+0x24c>
  810130:	380d883a 	mov	r6,r7
  810134:	29c0132e 	bgeu	r5,r7,810184 <__umoddi3+0x154>
  810138:	d9000415 	stw	r4,16(sp)
  81013c:	d9400515 	stw	r5,20(sp)
  810140:	d9400417 	ldw	r5,16(sp)
  810144:	5813883a 	mov	r9,r11
  810148:	2811883a 	mov	r8,r5
  81014c:	4005883a 	mov	r2,r8
  810150:	4807883a 	mov	r3,r9
  810154:	dfc00f17 	ldw	ra,60(sp)
  810158:	df000e17 	ldw	fp,56(sp)
  81015c:	ddc00d17 	ldw	r23,52(sp)
  810160:	dd800c17 	ldw	r22,48(sp)
  810164:	dd400b17 	ldw	r21,44(sp)
  810168:	dd000a17 	ldw	r20,40(sp)
  81016c:	dcc00917 	ldw	r19,36(sp)
  810170:	dc800817 	ldw	r18,32(sp)
  810174:	dc400717 	ldw	r17,28(sp)
  810178:	dc000617 	ldw	r16,24(sp)
  81017c:	dec01004 	addi	sp,sp,64
  810180:	f800283a 	ret
  810184:	00bfffd4 	movui	r2,65535
  810188:	11c06636 	bltu	r2,r7,810324 <__umoddi3+0x2f4>
  81018c:	00803fc4 	movi	r2,255
  810190:	11c12036 	bltu	r2,r7,810614 <__umoddi3+0x5e4>
  810194:	000b883a 	mov	r5,zero
  810198:	0005883a 	mov	r2,zero
  81019c:	3084d83a 	srl	r2,r6,r2
  8101a0:	01002074 	movhi	r4,129
  8101a4:	2112fe04 	addi	r4,r4,19448
  8101a8:	01c00804 	movi	r7,32
  8101ac:	1105883a 	add	r2,r2,r4
  8101b0:	10c00003 	ldbu	r3,0(r2)
  8101b4:	28c7883a 	add	r3,r5,r3
  8101b8:	38e5c83a 	sub	r18,r7,r3
  8101bc:	9000941e 	bne	r18,zero,810410 <__umoddi3+0x3e0>
  8101c0:	35405e36 	bltu	r6,r21,81033c <__umoddi3+0x30c>
  8101c4:	84c05d2e 	bgeu	r16,r19,81033c <__umoddi3+0x30c>
  8101c8:	8011883a 	mov	r8,r16
  8101cc:	a813883a 	mov	r9,r21
  8101d0:	dc000415 	stw	r16,16(sp)
  8101d4:	dd400515 	stw	r21,20(sp)
  8101d8:	003fdc06 	br	81014c <__umoddi3+0x11c>
  8101dc:	00bfffd4 	movui	r2,65535
  8101e0:	12004a36 	bltu	r2,r8,81030c <__umoddi3+0x2dc>
  8101e4:	00803fc4 	movi	r2,255
  8101e8:	12010d36 	bltu	r2,r8,810620 <__umoddi3+0x5f0>
  8101ec:	000b883a 	mov	r5,zero
  8101f0:	0005883a 	mov	r2,zero
  8101f4:	9884d83a 	srl	r2,r19,r2
  8101f8:	01002074 	movhi	r4,129
  8101fc:	2112fe04 	addi	r4,r4,19448
  810200:	01800804 	movi	r6,32
  810204:	1105883a 	add	r2,r2,r4
  810208:	10c00003 	ldbu	r3,0(r2)
  81020c:	28c7883a 	add	r3,r5,r3
  810210:	30c7c83a 	sub	r3,r6,r3
  810214:	1800dc1e 	bne	r3,zero,810588 <__umoddi3+0x558>
  810218:	002d883a 	mov	r22,zero
  81021c:	982ed43a 	srli	r23,r19,16
  810220:	a809883a 	mov	r4,r21
  810224:	9cbfffcc 	andi	r18,r19,65535
  810228:	b80b883a 	mov	r5,r23
  81022c:	08117700 	call	811770 <__udivsi3>
  810230:	100b883a 	mov	r5,r2
  810234:	9009883a 	mov	r4,r18
  810238:	0801fec0 	call	801fec <__mulsi3>
  81023c:	a809883a 	mov	r4,r21
  810240:	b80b883a 	mov	r5,r23
  810244:	1023883a 	mov	r17,r2
  810248:	08117780 	call	811778 <__umodsi3>
  81024c:	1004943a 	slli	r2,r2,16
  810250:	8006d43a 	srli	r3,r16,16
  810254:	10c4b03a 	or	r2,r2,r3
  810258:	1440032e 	bgeu	r2,r17,810268 <__umoddi3+0x238>
  81025c:	14c5883a 	add	r2,r2,r19
  810260:	14c00136 	bltu	r2,r19,810268 <__umoddi3+0x238>
  810264:	14410236 	bltu	r2,r17,810670 <__umoddi3+0x640>
  810268:	1463c83a 	sub	r17,r2,r17
  81026c:	8809883a 	mov	r4,r17
  810270:	b80b883a 	mov	r5,r23
  810274:	08117700 	call	811770 <__udivsi3>
  810278:	9009883a 	mov	r4,r18
  81027c:	100b883a 	mov	r5,r2
  810280:	0801fec0 	call	801fec <__mulsi3>
  810284:	8809883a 	mov	r4,r17
  810288:	b80b883a 	mov	r5,r23
  81028c:	102b883a 	mov	r21,r2
  810290:	08117780 	call	811778 <__umodsi3>
  810294:	1004943a 	slli	r2,r2,16
  810298:	80ffffcc 	andi	r3,r16,65535
  81029c:	10c4b03a 	or	r2,r2,r3
  8102a0:	1540042e 	bgeu	r2,r21,8102b4 <__umoddi3+0x284>
  8102a4:	14c5883a 	add	r2,r2,r19
  8102a8:	14c00236 	bltu	r2,r19,8102b4 <__umoddi3+0x284>
  8102ac:	1540012e 	bgeu	r2,r21,8102b4 <__umoddi3+0x284>
  8102b0:	14c5883a 	add	r2,r2,r19
  8102b4:	1545c83a 	sub	r2,r2,r21
  8102b8:	1584d83a 	srl	r2,r2,r22
  8102bc:	0013883a 	mov	r9,zero
  8102c0:	d8800415 	stw	r2,16(sp)
  8102c4:	d8c00417 	ldw	r3,16(sp)
  8102c8:	0005883a 	mov	r2,zero
  8102cc:	d8800515 	stw	r2,20(sp)
  8102d0:	1811883a 	mov	r8,r3
  8102d4:	003f9d06 	br	81014c <__umoddi3+0x11c>
  8102d8:	00804034 	movhi	r2,256
  8102dc:	10bfffc4 	addi	r2,r2,-1
  8102e0:	14c0c636 	bltu	r2,r19,8105fc <__umoddi3+0x5cc>
  8102e4:	01400404 	movi	r5,16
  8102e8:	2805883a 	mov	r2,r5
  8102ec:	003f6c06 	br	8100a0 <__umoddi3+0x70>
  8102f0:	01000044 	movi	r4,1
  8102f4:	000b883a 	mov	r5,zero
  8102f8:	08117700 	call	811770 <__udivsi3>
  8102fc:	1027883a 	mov	r19,r2
  810300:	00bfffd4 	movui	r2,65535
  810304:	14fff436 	bltu	r2,r19,8102d8 <__umoddi3+0x2a8>
  810308:	003f6106 	br	810090 <__umoddi3+0x60>
  81030c:	00804034 	movhi	r2,256
  810310:	10bfffc4 	addi	r2,r2,-1
  810314:	1200c536 	bltu	r2,r8,81062c <__umoddi3+0x5fc>
  810318:	01400404 	movi	r5,16
  81031c:	2805883a 	mov	r2,r5
  810320:	003fb406 	br	8101f4 <__umoddi3+0x1c4>
  810324:	00804034 	movhi	r2,256
  810328:	10bfffc4 	addi	r2,r2,-1
  81032c:	11c0c236 	bltu	r2,r7,810638 <__umoddi3+0x608>
  810330:	01400404 	movi	r5,16
  810334:	2805883a 	mov	r2,r5
  810338:	003f9806 	br	81019c <__umoddi3+0x16c>
  81033c:	84c9c83a 	sub	r4,r16,r19
  810340:	8105803a 	cmpltu	r2,r16,r4
  810344:	a987c83a 	sub	r3,r21,r6
  810348:	18abc83a 	sub	r21,r3,r2
  81034c:	2021883a 	mov	r16,r4
  810350:	003f9d06 	br	8101c8 <__umoddi3+0x198>
  810354:	9ca6983a 	sll	r19,r19,r18
  810358:	3485c83a 	sub	r2,r6,r18
  81035c:	a8a2d83a 	srl	r17,r21,r2
  810360:	982ed43a 	srli	r23,r19,16
  810364:	ac86983a 	sll	r3,r21,r18
  810368:	8084d83a 	srl	r2,r16,r2
  81036c:	8809883a 	mov	r4,r17
  810370:	b80b883a 	mov	r5,r23
  810374:	18b8b03a 	or	fp,r3,r2
  810378:	9d3fffcc 	andi	r20,r19,65535
  81037c:	08117700 	call	811770 <__udivsi3>
  810380:	100b883a 	mov	r5,r2
  810384:	a009883a 	mov	r4,r20
  810388:	0801fec0 	call	801fec <__mulsi3>
  81038c:	8809883a 	mov	r4,r17
  810390:	b80b883a 	mov	r5,r23
  810394:	102b883a 	mov	r21,r2
  810398:	08117780 	call	811778 <__umodsi3>
  81039c:	1004943a 	slli	r2,r2,16
  8103a0:	e006d43a 	srli	r3,fp,16
  8103a4:	902d883a 	mov	r22,r18
  8103a8:	10c4b03a 	or	r2,r2,r3
  8103ac:	1540022e 	bgeu	r2,r21,8103b8 <__umoddi3+0x388>
  8103b0:	14c5883a 	add	r2,r2,r19
  8103b4:	14c0ab2e 	bgeu	r2,r19,810664 <__umoddi3+0x634>
  8103b8:	1563c83a 	sub	r17,r2,r21
  8103bc:	8809883a 	mov	r4,r17
  8103c0:	b80b883a 	mov	r5,r23
  8103c4:	08117700 	call	811770 <__udivsi3>
  8103c8:	100b883a 	mov	r5,r2
  8103cc:	a009883a 	mov	r4,r20
  8103d0:	0801fec0 	call	801fec <__mulsi3>
  8103d4:	8809883a 	mov	r4,r17
  8103d8:	b80b883a 	mov	r5,r23
  8103dc:	102b883a 	mov	r21,r2
  8103e0:	08117780 	call	811778 <__umodsi3>
  8103e4:	1004943a 	slli	r2,r2,16
  8103e8:	e0ffffcc 	andi	r3,fp,65535
  8103ec:	10c4b03a 	or	r2,r2,r3
  8103f0:	1540042e 	bgeu	r2,r21,810404 <__umoddi3+0x3d4>
  8103f4:	14c5883a 	add	r2,r2,r19
  8103f8:	14c00236 	bltu	r2,r19,810404 <__umoddi3+0x3d4>
  8103fc:	1540012e 	bgeu	r2,r21,810404 <__umoddi3+0x3d4>
  810400:	14c5883a 	add	r2,r2,r19
  810404:	84a0983a 	sll	r16,r16,r18
  810408:	156bc83a 	sub	r21,r2,r21
  81040c:	003f3106 	br	8100d4 <__umoddi3+0xa4>
  810410:	3c8fc83a 	sub	r7,r7,r18
  810414:	3486983a 	sll	r3,r6,r18
  810418:	99c4d83a 	srl	r2,r19,r7
  81041c:	a9e2d83a 	srl	r17,r21,r7
  810420:	ac8c983a 	sll	r6,r21,r18
  810424:	18acb03a 	or	r22,r3,r2
  810428:	b02ed43a 	srli	r23,r22,16
  81042c:	81c4d83a 	srl	r2,r16,r7
  810430:	8809883a 	mov	r4,r17
  810434:	b80b883a 	mov	r5,r23
  810438:	308cb03a 	or	r6,r6,r2
  81043c:	d9c00315 	stw	r7,12(sp)
  810440:	d9800215 	stw	r6,8(sp)
  810444:	b53fffcc 	andi	r20,r22,65535
  810448:	08117700 	call	811770 <__udivsi3>
  81044c:	100b883a 	mov	r5,r2
  810450:	a009883a 	mov	r4,r20
  810454:	1039883a 	mov	fp,r2
  810458:	0801fec0 	call	801fec <__mulsi3>
  81045c:	8809883a 	mov	r4,r17
  810460:	b80b883a 	mov	r5,r23
  810464:	102b883a 	mov	r21,r2
  810468:	08117780 	call	811778 <__umodsi3>
  81046c:	d9000217 	ldw	r4,8(sp)
  810470:	1004943a 	slli	r2,r2,16
  810474:	9ca6983a 	sll	r19,r19,r18
  810478:	2006d43a 	srli	r3,r4,16
  81047c:	84a0983a 	sll	r16,r16,r18
  810480:	dcc00015 	stw	r19,0(sp)
  810484:	10c4b03a 	or	r2,r2,r3
  810488:	dc000115 	stw	r16,4(sp)
  81048c:	1540032e 	bgeu	r2,r21,81049c <__umoddi3+0x46c>
  810490:	1585883a 	add	r2,r2,r22
  810494:	e73fffc4 	addi	fp,fp,-1
  810498:	15806e2e 	bgeu	r2,r22,810654 <__umoddi3+0x624>
  81049c:	1563c83a 	sub	r17,r2,r21
  8104a0:	8809883a 	mov	r4,r17
  8104a4:	b80b883a 	mov	r5,r23
  8104a8:	08117700 	call	811770 <__udivsi3>
  8104ac:	100b883a 	mov	r5,r2
  8104b0:	a009883a 	mov	r4,r20
  8104b4:	1021883a 	mov	r16,r2
  8104b8:	0801fec0 	call	801fec <__mulsi3>
  8104bc:	b80b883a 	mov	r5,r23
  8104c0:	8809883a 	mov	r4,r17
  8104c4:	1029883a 	mov	r20,r2
  8104c8:	08117780 	call	811778 <__umodsi3>
  8104cc:	d9400217 	ldw	r5,8(sp)
  8104d0:	1004943a 	slli	r2,r2,16
  8104d4:	28ffffcc 	andi	r3,r5,65535
  8104d8:	10c4b03a 	or	r2,r2,r3
  8104dc:	1500032e 	bgeu	r2,r20,8104ec <__umoddi3+0x4bc>
  8104e0:	1585883a 	add	r2,r2,r22
  8104e4:	843fffc4 	addi	r16,r16,-1
  8104e8:	1580562e 	bgeu	r2,r22,810644 <__umoddi3+0x614>
  8104ec:	d9800017 	ldw	r6,0(sp)
  8104f0:	e022943a 	slli	r17,fp,16
  8104f4:	302ed43a 	srli	r23,r6,16
  8104f8:	8462b03a 	or	r17,r16,r17
  8104fc:	34ffffcc 	andi	r19,r6,65535
  810500:	882ad43a 	srli	r21,r17,16
  810504:	8c7fffcc 	andi	r17,r17,65535
  810508:	8809883a 	mov	r4,r17
  81050c:	980b883a 	mov	r5,r19
  810510:	1521c83a 	sub	r16,r2,r20
  810514:	0801fec0 	call	801fec <__mulsi3>
  810518:	8809883a 	mov	r4,r17
  81051c:	b80b883a 	mov	r5,r23
  810520:	1029883a 	mov	r20,r2
  810524:	0801fec0 	call	801fec <__mulsi3>
  810528:	980b883a 	mov	r5,r19
  81052c:	a809883a 	mov	r4,r21
  810530:	1023883a 	mov	r17,r2
  810534:	0801fec0 	call	801fec <__mulsi3>
  810538:	a809883a 	mov	r4,r21
  81053c:	b80b883a 	mov	r5,r23
  810540:	1027883a 	mov	r19,r2
  810544:	0801fec0 	call	801fec <__mulsi3>
  810548:	100b883a 	mov	r5,r2
  81054c:	a004d43a 	srli	r2,r20,16
  810550:	8ce3883a 	add	r17,r17,r19
  810554:	1449883a 	add	r4,r2,r17
  810558:	24c0022e 	bgeu	r4,r19,810564 <__umoddi3+0x534>
  81055c:	00800074 	movhi	r2,1
  810560:	288b883a 	add	r5,r5,r2
  810564:	2004d43a 	srli	r2,r4,16
  810568:	2008943a 	slli	r4,r4,16
  81056c:	a0ffffcc 	andi	r3,r20,65535
  810570:	288d883a 	add	r6,r5,r2
  810574:	20c9883a 	add	r4,r4,r3
  810578:	81800b36 	bltu	r16,r6,8105a8 <__umoddi3+0x578>
  81057c:	81804026 	beq	r16,r6,810680 <__umoddi3+0x650>
  810580:	818dc83a 	sub	r6,r16,r6
  810584:	00000f06 	br	8105c4 <__umoddi3+0x594>
  810588:	30c5c83a 	sub	r2,r6,r3
  81058c:	182d883a 	mov	r22,r3
  810590:	8084d83a 	srl	r2,r16,r2
  810594:	a8c6983a 	sll	r3,r21,r3
  810598:	9da6983a 	sll	r19,r19,r22
  81059c:	85a0983a 	sll	r16,r16,r22
  8105a0:	18aab03a 	or	r21,r3,r2
  8105a4:	003f1d06 	br	81021c <__umoddi3+0x1ec>
  8105a8:	d8c00017 	ldw	r3,0(sp)
  8105ac:	20c5c83a 	sub	r2,r4,r3
  8105b0:	2089803a 	cmpltu	r4,r4,r2
  8105b4:	3587c83a 	sub	r3,r6,r22
  8105b8:	1907c83a 	sub	r3,r3,r4
  8105bc:	80cdc83a 	sub	r6,r16,r3
  8105c0:	1009883a 	mov	r4,r2
  8105c4:	d9400117 	ldw	r5,4(sp)
  8105c8:	2905c83a 	sub	r2,r5,r4
  8105cc:	2887803a 	cmpltu	r3,r5,r2
  8105d0:	30c7c83a 	sub	r3,r6,r3
  8105d4:	d9800317 	ldw	r6,12(sp)
  8105d8:	1484d83a 	srl	r2,r2,r18
  8105dc:	1988983a 	sll	r4,r3,r6
  8105e0:	1c86d83a 	srl	r3,r3,r18
  8105e4:	2088b03a 	or	r4,r4,r2
  8105e8:	2011883a 	mov	r8,r4
  8105ec:	1813883a 	mov	r9,r3
  8105f0:	d9000415 	stw	r4,16(sp)
  8105f4:	d8c00515 	stw	r3,20(sp)
  8105f8:	003ed406 	br	81014c <__umoddi3+0x11c>
  8105fc:	01400604 	movi	r5,24
  810600:	2805883a 	mov	r2,r5
  810604:	003ea606 	br	8100a0 <__umoddi3+0x70>
  810608:	01400204 	movi	r5,8
  81060c:	2805883a 	mov	r2,r5
  810610:	003ea306 	br	8100a0 <__umoddi3+0x70>
  810614:	01400204 	movi	r5,8
  810618:	2805883a 	mov	r2,r5
  81061c:	003edf06 	br	81019c <__umoddi3+0x16c>
  810620:	01400204 	movi	r5,8
  810624:	2805883a 	mov	r2,r5
  810628:	003ef206 	br	8101f4 <__umoddi3+0x1c4>
  81062c:	01400604 	movi	r5,24
  810630:	2805883a 	mov	r2,r5
  810634:	003eef06 	br	8101f4 <__umoddi3+0x1c4>
  810638:	01400604 	movi	r5,24
  81063c:	2805883a 	mov	r2,r5
  810640:	003ed606 	br	81019c <__umoddi3+0x16c>
  810644:	153fa92e 	bgeu	r2,r20,8104ec <__umoddi3+0x4bc>
  810648:	843fffc4 	addi	r16,r16,-1
  81064c:	1585883a 	add	r2,r2,r22
  810650:	003fa606 	br	8104ec <__umoddi3+0x4bc>
  810654:	157f912e 	bgeu	r2,r21,81049c <__umoddi3+0x46c>
  810658:	e73fffc4 	addi	fp,fp,-1
  81065c:	1585883a 	add	r2,r2,r22
  810660:	003f8e06 	br	81049c <__umoddi3+0x46c>
  810664:	157f542e 	bgeu	r2,r21,8103b8 <__umoddi3+0x388>
  810668:	14c5883a 	add	r2,r2,r19
  81066c:	003f5206 	br	8103b8 <__umoddi3+0x388>
  810670:	14c5883a 	add	r2,r2,r19
  810674:	003efc06 	br	810268 <__umoddi3+0x238>
  810678:	14c5883a 	add	r2,r2,r19
  81067c:	003ea606 	br	810118 <__umoddi3+0xe8>
  810680:	d8800117 	ldw	r2,4(sp)
  810684:	113fc836 	bltu	r2,r4,8105a8 <__umoddi3+0x578>
  810688:	000d883a 	mov	r6,zero
  81068c:	003fcd06 	br	8105c4 <__umoddi3+0x594>

00810690 <__nesf2>:
  810690:	defff304 	addi	sp,sp,-52
  810694:	dc400b15 	stw	r17,44(sp)
  810698:	dc400204 	addi	r17,sp,8
  81069c:	dc000a15 	stw	r16,40(sp)
  8106a0:	d9000015 	stw	r4,0(sp)
  8106a4:	d9400115 	stw	r5,4(sp)
  8106a8:	d809883a 	mov	r4,sp
  8106ac:	880b883a 	mov	r5,r17
  8106b0:	dc000604 	addi	r16,sp,24
  8106b4:	dfc00c15 	stw	ra,48(sp)
  8106b8:	08117800 	call	811780 <__unpack_f>
  8106bc:	d9000104 	addi	r4,sp,4
  8106c0:	800b883a 	mov	r5,r16
  8106c4:	08117800 	call	811780 <__unpack_f>
  8106c8:	d8800217 	ldw	r2,8(sp)
  8106cc:	00c00044 	movi	r3,1
  8106d0:	180d883a 	mov	r6,r3
  8106d4:	1880062e 	bgeu	r3,r2,8106f0 <__nesf2+0x60>
  8106d8:	d8800617 	ldw	r2,24(sp)
  8106dc:	8809883a 	mov	r4,r17
  8106e0:	800b883a 	mov	r5,r16
  8106e4:	1880022e 	bgeu	r3,r2,8106f0 <__nesf2+0x60>
  8106e8:	08118480 	call	811848 <__fpcmp_parts_f>
  8106ec:	100d883a 	mov	r6,r2
  8106f0:	3005883a 	mov	r2,r6
  8106f4:	dfc00c17 	ldw	ra,48(sp)
  8106f8:	dc400b17 	ldw	r17,44(sp)
  8106fc:	dc000a17 	ldw	r16,40(sp)
  810700:	dec00d04 	addi	sp,sp,52
  810704:	f800283a 	ret

00810708 <__gtsf2>:
  810708:	defff304 	addi	sp,sp,-52
  81070c:	dc400b15 	stw	r17,44(sp)
  810710:	dc400204 	addi	r17,sp,8
  810714:	dc000a15 	stw	r16,40(sp)
  810718:	d9000015 	stw	r4,0(sp)
  81071c:	d9400115 	stw	r5,4(sp)
  810720:	d809883a 	mov	r4,sp
  810724:	880b883a 	mov	r5,r17
  810728:	dc000604 	addi	r16,sp,24
  81072c:	dfc00c15 	stw	ra,48(sp)
  810730:	08117800 	call	811780 <__unpack_f>
  810734:	d9000104 	addi	r4,sp,4
  810738:	800b883a 	mov	r5,r16
  81073c:	08117800 	call	811780 <__unpack_f>
  810740:	d8800217 	ldw	r2,8(sp)
  810744:	00c00044 	movi	r3,1
  810748:	01bfffc4 	movi	r6,-1
  81074c:	1880062e 	bgeu	r3,r2,810768 <__gtsf2+0x60>
  810750:	d8800617 	ldw	r2,24(sp)
  810754:	8809883a 	mov	r4,r17
  810758:	800b883a 	mov	r5,r16
  81075c:	1880022e 	bgeu	r3,r2,810768 <__gtsf2+0x60>
  810760:	08118480 	call	811848 <__fpcmp_parts_f>
  810764:	100d883a 	mov	r6,r2
  810768:	3005883a 	mov	r2,r6
  81076c:	dfc00c17 	ldw	ra,48(sp)
  810770:	dc400b17 	ldw	r17,44(sp)
  810774:	dc000a17 	ldw	r16,40(sp)
  810778:	dec00d04 	addi	sp,sp,52
  81077c:	f800283a 	ret

00810780 <__ltsf2>:
  810780:	defff304 	addi	sp,sp,-52
  810784:	dc400b15 	stw	r17,44(sp)
  810788:	dc400204 	addi	r17,sp,8
  81078c:	dc000a15 	stw	r16,40(sp)
  810790:	d9000015 	stw	r4,0(sp)
  810794:	d9400115 	stw	r5,4(sp)
  810798:	d809883a 	mov	r4,sp
  81079c:	880b883a 	mov	r5,r17
  8107a0:	dc000604 	addi	r16,sp,24
  8107a4:	dfc00c15 	stw	ra,48(sp)
  8107a8:	08117800 	call	811780 <__unpack_f>
  8107ac:	d9000104 	addi	r4,sp,4
  8107b0:	800b883a 	mov	r5,r16
  8107b4:	08117800 	call	811780 <__unpack_f>
  8107b8:	d8800217 	ldw	r2,8(sp)
  8107bc:	00c00044 	movi	r3,1
  8107c0:	180d883a 	mov	r6,r3
  8107c4:	1880062e 	bgeu	r3,r2,8107e0 <__ltsf2+0x60>
  8107c8:	d8800617 	ldw	r2,24(sp)
  8107cc:	8809883a 	mov	r4,r17
  8107d0:	800b883a 	mov	r5,r16
  8107d4:	1880022e 	bgeu	r3,r2,8107e0 <__ltsf2+0x60>
  8107d8:	08118480 	call	811848 <__fpcmp_parts_f>
  8107dc:	100d883a 	mov	r6,r2
  8107e0:	3005883a 	mov	r2,r6
  8107e4:	dfc00c17 	ldw	ra,48(sp)
  8107e8:	dc400b17 	ldw	r17,44(sp)
  8107ec:	dc000a17 	ldw	r16,40(sp)
  8107f0:	dec00d04 	addi	sp,sp,52
  8107f4:	f800283a 	ret

008107f8 <_fpadd_parts>:
  8107f8:	defff804 	addi	sp,sp,-32
  8107fc:	dcc00315 	stw	r19,12(sp)
  810800:	2027883a 	mov	r19,r4
  810804:	21000017 	ldw	r4,0(r4)
  810808:	00c00044 	movi	r3,1
  81080c:	dd400515 	stw	r21,20(sp)
  810810:	dd000415 	stw	r20,16(sp)
  810814:	ddc00715 	stw	r23,28(sp)
  810818:	dd800615 	stw	r22,24(sp)
  81081c:	dc800215 	stw	r18,8(sp)
  810820:	dc400115 	stw	r17,4(sp)
  810824:	dc000015 	stw	r16,0(sp)
  810828:	282b883a 	mov	r21,r5
  81082c:	3029883a 	mov	r20,r6
  810830:	1900632e 	bgeu	r3,r4,8109c0 <_fpadd_parts+0x1c8>
  810834:	28800017 	ldw	r2,0(r5)
  810838:	1880812e 	bgeu	r3,r2,810a40 <_fpadd_parts+0x248>
  81083c:	00c00104 	movi	r3,4
  810840:	20c0dc26 	beq	r4,r3,810bb4 <_fpadd_parts+0x3bc>
  810844:	10c07e26 	beq	r2,r3,810a40 <_fpadd_parts+0x248>
  810848:	00c00084 	movi	r3,2
  81084c:	10c06726 	beq	r2,r3,8109ec <_fpadd_parts+0x1f4>
  810850:	20c07b26 	beq	r4,r3,810a40 <_fpadd_parts+0x248>
  810854:	9dc00217 	ldw	r23,8(r19)
  810858:	28c00217 	ldw	r3,8(r5)
  81085c:	9c400317 	ldw	r17,12(r19)
  810860:	2bc00317 	ldw	r15,12(r5)
  810864:	b8cdc83a 	sub	r6,r23,r3
  810868:	9c800417 	ldw	r18,16(r19)
  81086c:	2c000417 	ldw	r16,16(r5)
  810870:	3009883a 	mov	r4,r6
  810874:	30009716 	blt	r6,zero,810ad4 <_fpadd_parts+0x2dc>
  810878:	00800fc4 	movi	r2,63
  81087c:	11806b16 	blt	r2,r6,810a2c <_fpadd_parts+0x234>
  810880:	0100a40e 	bge	zero,r4,810b14 <_fpadd_parts+0x31c>
  810884:	35bff804 	addi	r22,r6,-32
  810888:	b000bc16 	blt	r22,zero,810b7c <_fpadd_parts+0x384>
  81088c:	8596d83a 	srl	r11,r16,r22
  810890:	0019883a 	mov	r12,zero
  810894:	0013883a 	mov	r9,zero
  810898:	01000044 	movi	r4,1
  81089c:	0015883a 	mov	r10,zero
  8108a0:	b000be16 	blt	r22,zero,810b9c <_fpadd_parts+0x3a4>
  8108a4:	2590983a 	sll	r8,r4,r22
  8108a8:	000f883a 	mov	r7,zero
  8108ac:	00bfffc4 	movi	r2,-1
  8108b0:	3889883a 	add	r4,r7,r2
  8108b4:	408b883a 	add	r5,r8,r2
  8108b8:	21cd803a 	cmpltu	r6,r4,r7
  8108bc:	314b883a 	add	r5,r6,r5
  8108c0:	7904703a 	and	r2,r15,r4
  8108c4:	8146703a 	and	r3,r16,r5
  8108c8:	10c4b03a 	or	r2,r2,r3
  8108cc:	10000226 	beq	r2,zero,8108d8 <_fpadd_parts+0xe0>
  8108d0:	02400044 	movi	r9,1
  8108d4:	0015883a 	mov	r10,zero
  8108d8:	5a5eb03a 	or	r15,r11,r9
  8108dc:	62a0b03a 	or	r16,r12,r10
  8108e0:	99400117 	ldw	r5,4(r19)
  8108e4:	a8800117 	ldw	r2,4(r21)
  8108e8:	28806e26 	beq	r5,r2,810aa4 <_fpadd_parts+0x2ac>
  8108ec:	28006626 	beq	r5,zero,810a88 <_fpadd_parts+0x290>
  8108f0:	7c45c83a 	sub	r2,r15,r17
  8108f4:	7889803a 	cmpltu	r4,r15,r2
  8108f8:	8487c83a 	sub	r3,r16,r18
  8108fc:	1909c83a 	sub	r4,r3,r4
  810900:	100d883a 	mov	r6,r2
  810904:	200f883a 	mov	r7,r4
  810908:	38007716 	blt	r7,zero,810ae8 <_fpadd_parts+0x2f0>
  81090c:	a5c00215 	stw	r23,8(r20)
  810910:	a1c00415 	stw	r7,16(r20)
  810914:	a0000115 	stw	zero,4(r20)
  810918:	a1800315 	stw	r6,12(r20)
  81091c:	a2000317 	ldw	r8,12(r20)
  810920:	a2400417 	ldw	r9,16(r20)
  810924:	00bfffc4 	movi	r2,-1
  810928:	408b883a 	add	r5,r8,r2
  81092c:	2a09803a 	cmpltu	r4,r5,r8
  810930:	488d883a 	add	r6,r9,r2
  810934:	01c40034 	movhi	r7,4096
  810938:	39ffffc4 	addi	r7,r7,-1
  81093c:	218d883a 	add	r6,r4,r6
  810940:	39801736 	bltu	r7,r6,8109a0 <_fpadd_parts+0x1a8>
  810944:	31c06526 	beq	r6,r7,810adc <_fpadd_parts+0x2e4>
  810948:	a3000217 	ldw	r12,8(r20)
  81094c:	4209883a 	add	r4,r8,r8
  810950:	00bfffc4 	movi	r2,-1
  810954:	220f803a 	cmpltu	r7,r4,r8
  810958:	4a4b883a 	add	r5,r9,r9
  81095c:	394f883a 	add	r7,r7,r5
  810960:	2095883a 	add	r10,r4,r2
  810964:	3897883a 	add	r11,r7,r2
  810968:	510d803a 	cmpltu	r6,r10,r4
  81096c:	6099883a 	add	r12,r12,r2
  810970:	32d7883a 	add	r11,r6,r11
  810974:	00840034 	movhi	r2,4096
  810978:	10bfffc4 	addi	r2,r2,-1
  81097c:	2011883a 	mov	r8,r4
  810980:	3813883a 	mov	r9,r7
  810984:	a1000315 	stw	r4,12(r20)
  810988:	a1c00415 	stw	r7,16(r20)
  81098c:	a3000215 	stw	r12,8(r20)
  810990:	12c00336 	bltu	r2,r11,8109a0 <_fpadd_parts+0x1a8>
  810994:	58bfed1e 	bne	r11,r2,81094c <_fpadd_parts+0x154>
  810998:	00bfff84 	movi	r2,-2
  81099c:	12bfeb2e 	bgeu	r2,r10,81094c <_fpadd_parts+0x154>
  8109a0:	a2800417 	ldw	r10,16(r20)
  8109a4:	008000c4 	movi	r2,3
  8109a8:	00c80034 	movhi	r3,8192
  8109ac:	18ffffc4 	addi	r3,r3,-1
  8109b0:	a2400317 	ldw	r9,12(r20)
  8109b4:	a0800015 	stw	r2,0(r20)
  8109b8:	1a802336 	bltu	r3,r10,810a48 <_fpadd_parts+0x250>
  8109bc:	a027883a 	mov	r19,r20
  8109c0:	9805883a 	mov	r2,r19
  8109c4:	ddc00717 	ldw	r23,28(sp)
  8109c8:	dd800617 	ldw	r22,24(sp)
  8109cc:	dd400517 	ldw	r21,20(sp)
  8109d0:	dd000417 	ldw	r20,16(sp)
  8109d4:	dcc00317 	ldw	r19,12(sp)
  8109d8:	dc800217 	ldw	r18,8(sp)
  8109dc:	dc400117 	ldw	r17,4(sp)
  8109e0:	dc000017 	ldw	r16,0(sp)
  8109e4:	dec00804 	addi	sp,sp,32
  8109e8:	f800283a 	ret
  8109ec:	20fff41e 	bne	r4,r3,8109c0 <_fpadd_parts+0x1c8>
  8109f0:	31000015 	stw	r4,0(r6)
  8109f4:	98800117 	ldw	r2,4(r19)
  8109f8:	30800115 	stw	r2,4(r6)
  8109fc:	98c00217 	ldw	r3,8(r19)
  810a00:	30c00215 	stw	r3,8(r6)
  810a04:	98800317 	ldw	r2,12(r19)
  810a08:	30800315 	stw	r2,12(r6)
  810a0c:	98c00417 	ldw	r3,16(r19)
  810a10:	30c00415 	stw	r3,16(r6)
  810a14:	98800117 	ldw	r2,4(r19)
  810a18:	28c00117 	ldw	r3,4(r5)
  810a1c:	3027883a 	mov	r19,r6
  810a20:	10c4703a 	and	r2,r2,r3
  810a24:	30800115 	stw	r2,4(r6)
  810a28:	003fe506 	br	8109c0 <_fpadd_parts+0x1c8>
  810a2c:	1dc02616 	blt	r3,r23,810ac8 <_fpadd_parts+0x2d0>
  810a30:	0023883a 	mov	r17,zero
  810a34:	182f883a 	mov	r23,r3
  810a38:	0025883a 	mov	r18,zero
  810a3c:	003fa806 	br	8108e0 <_fpadd_parts+0xe8>
  810a40:	a827883a 	mov	r19,r21
  810a44:	003fde06 	br	8109c0 <_fpadd_parts+0x1c8>
  810a48:	01800044 	movi	r6,1
  810a4c:	500497fa 	slli	r2,r10,31
  810a50:	4808d07a 	srli	r4,r9,1
  810a54:	518ad83a 	srl	r5,r10,r6
  810a58:	a2000217 	ldw	r8,8(r20)
  810a5c:	1108b03a 	or	r4,r2,r4
  810a60:	0007883a 	mov	r3,zero
  810a64:	4984703a 	and	r2,r9,r6
  810a68:	208cb03a 	or	r6,r4,r2
  810a6c:	28ceb03a 	or	r7,r5,r3
  810a70:	42000044 	addi	r8,r8,1
  810a74:	a027883a 	mov	r19,r20
  810a78:	a1c00415 	stw	r7,16(r20)
  810a7c:	a2000215 	stw	r8,8(r20)
  810a80:	a1800315 	stw	r6,12(r20)
  810a84:	003fce06 	br	8109c0 <_fpadd_parts+0x1c8>
  810a88:	8bc5c83a 	sub	r2,r17,r15
  810a8c:	8889803a 	cmpltu	r4,r17,r2
  810a90:	9407c83a 	sub	r3,r18,r16
  810a94:	1909c83a 	sub	r4,r3,r4
  810a98:	100d883a 	mov	r6,r2
  810a9c:	200f883a 	mov	r7,r4
  810aa0:	003f9906 	br	810908 <_fpadd_parts+0x110>
  810aa4:	7c45883a 	add	r2,r15,r17
  810aa8:	13c9803a 	cmpltu	r4,r2,r15
  810aac:	8487883a 	add	r3,r16,r18
  810ab0:	20c9883a 	add	r4,r4,r3
  810ab4:	a1400115 	stw	r5,4(r20)
  810ab8:	a5c00215 	stw	r23,8(r20)
  810abc:	a0800315 	stw	r2,12(r20)
  810ac0:	a1000415 	stw	r4,16(r20)
  810ac4:	003fb606 	br	8109a0 <_fpadd_parts+0x1a8>
  810ac8:	001f883a 	mov	r15,zero
  810acc:	0021883a 	mov	r16,zero
  810ad0:	003f8306 	br	8108e0 <_fpadd_parts+0xe8>
  810ad4:	018dc83a 	sub	r6,zero,r6
  810ad8:	003f6706 	br	810878 <_fpadd_parts+0x80>
  810adc:	00bfff84 	movi	r2,-2
  810ae0:	117faf36 	bltu	r2,r5,8109a0 <_fpadd_parts+0x1a8>
  810ae4:	003f9806 	br	810948 <_fpadd_parts+0x150>
  810ae8:	0005883a 	mov	r2,zero
  810aec:	1189c83a 	sub	r4,r2,r6
  810af0:	1105803a 	cmpltu	r2,r2,r4
  810af4:	01cbc83a 	sub	r5,zero,r7
  810af8:	2885c83a 	sub	r2,r5,r2
  810afc:	01800044 	movi	r6,1
  810b00:	a1800115 	stw	r6,4(r20)
  810b04:	a5c00215 	stw	r23,8(r20)
  810b08:	a1000315 	stw	r4,12(r20)
  810b0c:	a0800415 	stw	r2,16(r20)
  810b10:	003f8206 	br	81091c <_fpadd_parts+0x124>
  810b14:	203f7226 	beq	r4,zero,8108e0 <_fpadd_parts+0xe8>
  810b18:	35bff804 	addi	r22,r6,-32
  810b1c:	b9af883a 	add	r23,r23,r6
  810b20:	b0003116 	blt	r22,zero,810be8 <_fpadd_parts+0x3f0>
  810b24:	959ad83a 	srl	r13,r18,r22
  810b28:	001d883a 	mov	r14,zero
  810b2c:	000f883a 	mov	r7,zero
  810b30:	01000044 	movi	r4,1
  810b34:	0011883a 	mov	r8,zero
  810b38:	b0002516 	blt	r22,zero,810bd0 <_fpadd_parts+0x3d8>
  810b3c:	2594983a 	sll	r10,r4,r22
  810b40:	0013883a 	mov	r9,zero
  810b44:	00bfffc4 	movi	r2,-1
  810b48:	4889883a 	add	r4,r9,r2
  810b4c:	508b883a 	add	r5,r10,r2
  810b50:	224d803a 	cmpltu	r6,r4,r9
  810b54:	314b883a 	add	r5,r6,r5
  810b58:	8904703a 	and	r2,r17,r4
  810b5c:	9146703a 	and	r3,r18,r5
  810b60:	10c4b03a 	or	r2,r2,r3
  810b64:	10000226 	beq	r2,zero,810b70 <_fpadd_parts+0x378>
  810b68:	01c00044 	movi	r7,1
  810b6c:	0011883a 	mov	r8,zero
  810b70:	69e2b03a 	or	r17,r13,r7
  810b74:	7224b03a 	or	r18,r14,r8
  810b78:	003f5906 	br	8108e0 <_fpadd_parts+0xe8>
  810b7c:	8407883a 	add	r3,r16,r16
  810b80:	008007c4 	movi	r2,31
  810b84:	1185c83a 	sub	r2,r2,r6
  810b88:	1886983a 	sll	r3,r3,r2
  810b8c:	7996d83a 	srl	r11,r15,r6
  810b90:	8198d83a 	srl	r12,r16,r6
  810b94:	1ad6b03a 	or	r11,r3,r11
  810b98:	003f3e06 	br	810894 <_fpadd_parts+0x9c>
  810b9c:	2006d07a 	srli	r3,r4,1
  810ba0:	008007c4 	movi	r2,31
  810ba4:	1185c83a 	sub	r2,r2,r6
  810ba8:	1890d83a 	srl	r8,r3,r2
  810bac:	218e983a 	sll	r7,r4,r6
  810bb0:	003f3e06 	br	8108ac <_fpadd_parts+0xb4>
  810bb4:	113f821e 	bne	r2,r4,8109c0 <_fpadd_parts+0x1c8>
  810bb8:	28c00117 	ldw	r3,4(r5)
  810bbc:	98800117 	ldw	r2,4(r19)
  810bc0:	10ff7f26 	beq	r2,r3,8109c0 <_fpadd_parts+0x1c8>
  810bc4:	04c02074 	movhi	r19,129
  810bc8:	9cd2f904 	addi	r19,r19,19428
  810bcc:	003f7c06 	br	8109c0 <_fpadd_parts+0x1c8>
  810bd0:	2006d07a 	srli	r3,r4,1
  810bd4:	008007c4 	movi	r2,31
  810bd8:	1185c83a 	sub	r2,r2,r6
  810bdc:	1894d83a 	srl	r10,r3,r2
  810be0:	2192983a 	sll	r9,r4,r6
  810be4:	003fd706 	br	810b44 <_fpadd_parts+0x34c>
  810be8:	9487883a 	add	r3,r18,r18
  810bec:	008007c4 	movi	r2,31
  810bf0:	1185c83a 	sub	r2,r2,r6
  810bf4:	1886983a 	sll	r3,r3,r2
  810bf8:	899ad83a 	srl	r13,r17,r6
  810bfc:	919cd83a 	srl	r14,r18,r6
  810c00:	1b5ab03a 	or	r13,r3,r13
  810c04:	003fc906 	br	810b2c <_fpadd_parts+0x334>

00810c08 <__subdf3>:
  810c08:	deffea04 	addi	sp,sp,-88
  810c0c:	dcc01415 	stw	r19,80(sp)
  810c10:	dcc00404 	addi	r19,sp,16
  810c14:	2011883a 	mov	r8,r4
  810c18:	2813883a 	mov	r9,r5
  810c1c:	dc401315 	stw	r17,76(sp)
  810c20:	d809883a 	mov	r4,sp
  810c24:	980b883a 	mov	r5,r19
  810c28:	dc400904 	addi	r17,sp,36
  810c2c:	dfc01515 	stw	ra,84(sp)
  810c30:	da400115 	stw	r9,4(sp)
  810c34:	d9c00315 	stw	r7,12(sp)
  810c38:	da000015 	stw	r8,0(sp)
  810c3c:	d9800215 	stw	r6,8(sp)
  810c40:	08023b80 	call	8023b8 <__unpack_d>
  810c44:	d9000204 	addi	r4,sp,8
  810c48:	880b883a 	mov	r5,r17
  810c4c:	08023b80 	call	8023b8 <__unpack_d>
  810c50:	d8800a17 	ldw	r2,40(sp)
  810c54:	880b883a 	mov	r5,r17
  810c58:	9809883a 	mov	r4,r19
  810c5c:	d9800e04 	addi	r6,sp,56
  810c60:	1080005c 	xori	r2,r2,1
  810c64:	d8800a15 	stw	r2,40(sp)
  810c68:	08107f80 	call	8107f8 <_fpadd_parts>
  810c6c:	1009883a 	mov	r4,r2
  810c70:	08020a40 	call	8020a4 <__pack_d>
  810c74:	dfc01517 	ldw	ra,84(sp)
  810c78:	dcc01417 	ldw	r19,80(sp)
  810c7c:	dc401317 	ldw	r17,76(sp)
  810c80:	dec01604 	addi	sp,sp,88
  810c84:	f800283a 	ret

00810c88 <__adddf3>:
  810c88:	deffea04 	addi	sp,sp,-88
  810c8c:	dcc01415 	stw	r19,80(sp)
  810c90:	dcc00404 	addi	r19,sp,16
  810c94:	2011883a 	mov	r8,r4
  810c98:	2813883a 	mov	r9,r5
  810c9c:	dc401315 	stw	r17,76(sp)
  810ca0:	d809883a 	mov	r4,sp
  810ca4:	980b883a 	mov	r5,r19
  810ca8:	dc400904 	addi	r17,sp,36
  810cac:	dfc01515 	stw	ra,84(sp)
  810cb0:	da400115 	stw	r9,4(sp)
  810cb4:	d9c00315 	stw	r7,12(sp)
  810cb8:	da000015 	stw	r8,0(sp)
  810cbc:	d9800215 	stw	r6,8(sp)
  810cc0:	08023b80 	call	8023b8 <__unpack_d>
  810cc4:	d9000204 	addi	r4,sp,8
  810cc8:	880b883a 	mov	r5,r17
  810ccc:	08023b80 	call	8023b8 <__unpack_d>
  810cd0:	d9800e04 	addi	r6,sp,56
  810cd4:	9809883a 	mov	r4,r19
  810cd8:	880b883a 	mov	r5,r17
  810cdc:	08107f80 	call	8107f8 <_fpadd_parts>
  810ce0:	1009883a 	mov	r4,r2
  810ce4:	08020a40 	call	8020a4 <__pack_d>
  810ce8:	dfc01517 	ldw	ra,84(sp)
  810cec:	dcc01417 	ldw	r19,80(sp)
  810cf0:	dc401317 	ldw	r17,76(sp)
  810cf4:	dec01604 	addi	sp,sp,88
  810cf8:	f800283a 	ret

00810cfc <__muldf3>:
  810cfc:	deffe004 	addi	sp,sp,-128
  810d00:	dc401815 	stw	r17,96(sp)
  810d04:	dc400404 	addi	r17,sp,16
  810d08:	2011883a 	mov	r8,r4
  810d0c:	2813883a 	mov	r9,r5
  810d10:	dc001715 	stw	r16,92(sp)
  810d14:	d809883a 	mov	r4,sp
  810d18:	880b883a 	mov	r5,r17
  810d1c:	dc000904 	addi	r16,sp,36
  810d20:	dfc01f15 	stw	ra,124(sp)
  810d24:	da400115 	stw	r9,4(sp)
  810d28:	d9c00315 	stw	r7,12(sp)
  810d2c:	da000015 	stw	r8,0(sp)
  810d30:	d9800215 	stw	r6,8(sp)
  810d34:	ddc01e15 	stw	r23,120(sp)
  810d38:	dd801d15 	stw	r22,116(sp)
  810d3c:	dd401c15 	stw	r21,112(sp)
  810d40:	dd001b15 	stw	r20,108(sp)
  810d44:	dcc01a15 	stw	r19,104(sp)
  810d48:	dc801915 	stw	r18,100(sp)
  810d4c:	08023b80 	call	8023b8 <__unpack_d>
  810d50:	d9000204 	addi	r4,sp,8
  810d54:	800b883a 	mov	r5,r16
  810d58:	08023b80 	call	8023b8 <__unpack_d>
  810d5c:	d9000417 	ldw	r4,16(sp)
  810d60:	00800044 	movi	r2,1
  810d64:	1100102e 	bgeu	r2,r4,810da8 <__muldf3+0xac>
  810d68:	d8c00917 	ldw	r3,36(sp)
  810d6c:	10c0062e 	bgeu	r2,r3,810d88 <__muldf3+0x8c>
  810d70:	00800104 	movi	r2,4
  810d74:	20800a26 	beq	r4,r2,810da0 <__muldf3+0xa4>
  810d78:	1880cc26 	beq	r3,r2,8110ac <__muldf3+0x3b0>
  810d7c:	00800084 	movi	r2,2
  810d80:	20800926 	beq	r4,r2,810da8 <__muldf3+0xac>
  810d84:	1880191e 	bne	r3,r2,810dec <__muldf3+0xf0>
  810d88:	d8c00a17 	ldw	r3,40(sp)
  810d8c:	d8800517 	ldw	r2,20(sp)
  810d90:	8009883a 	mov	r4,r16
  810d94:	10c4c03a 	cmpne	r2,r2,r3
  810d98:	d8800a15 	stw	r2,40(sp)
  810d9c:	00000706 	br	810dbc <__muldf3+0xc0>
  810da0:	00800084 	movi	r2,2
  810da4:	1880c326 	beq	r3,r2,8110b4 <__muldf3+0x3b8>
  810da8:	d8800517 	ldw	r2,20(sp)
  810dac:	d8c00a17 	ldw	r3,40(sp)
  810db0:	8809883a 	mov	r4,r17
  810db4:	10c4c03a 	cmpne	r2,r2,r3
  810db8:	d8800515 	stw	r2,20(sp)
  810dbc:	08020a40 	call	8020a4 <__pack_d>
  810dc0:	dfc01f17 	ldw	ra,124(sp)
  810dc4:	ddc01e17 	ldw	r23,120(sp)
  810dc8:	dd801d17 	ldw	r22,116(sp)
  810dcc:	dd401c17 	ldw	r21,112(sp)
  810dd0:	dd001b17 	ldw	r20,108(sp)
  810dd4:	dcc01a17 	ldw	r19,104(sp)
  810dd8:	dc801917 	ldw	r18,100(sp)
  810ddc:	dc401817 	ldw	r17,96(sp)
  810de0:	dc001717 	ldw	r16,92(sp)
  810de4:	dec02004 	addi	sp,sp,128
  810de8:	f800283a 	ret
  810dec:	dd800717 	ldw	r22,28(sp)
  810df0:	dc800c17 	ldw	r18,48(sp)
  810df4:	002b883a 	mov	r21,zero
  810df8:	0023883a 	mov	r17,zero
  810dfc:	a80b883a 	mov	r5,r21
  810e00:	b00d883a 	mov	r6,r22
  810e04:	880f883a 	mov	r7,r17
  810e08:	ddc00817 	ldw	r23,32(sp)
  810e0c:	dcc00d17 	ldw	r19,52(sp)
  810e10:	9009883a 	mov	r4,r18
  810e14:	080f7fc0 	call	80f7fc <__muldi3>
  810e18:	001b883a 	mov	r13,zero
  810e1c:	680f883a 	mov	r7,r13
  810e20:	b009883a 	mov	r4,r22
  810e24:	000b883a 	mov	r5,zero
  810e28:	980d883a 	mov	r6,r19
  810e2c:	b82d883a 	mov	r22,r23
  810e30:	002f883a 	mov	r23,zero
  810e34:	db401615 	stw	r13,88(sp)
  810e38:	d8801315 	stw	r2,76(sp)
  810e3c:	d8c01415 	stw	r3,80(sp)
  810e40:	dcc01515 	stw	r19,84(sp)
  810e44:	080f7fc0 	call	80f7fc <__muldi3>
  810e48:	b00d883a 	mov	r6,r22
  810e4c:	000b883a 	mov	r5,zero
  810e50:	9009883a 	mov	r4,r18
  810e54:	b80f883a 	mov	r7,r23
  810e58:	1021883a 	mov	r16,r2
  810e5c:	1823883a 	mov	r17,r3
  810e60:	080f7fc0 	call	80f7fc <__muldi3>
  810e64:	8085883a 	add	r2,r16,r2
  810e68:	140d803a 	cmpltu	r6,r2,r16
  810e6c:	88c7883a 	add	r3,r17,r3
  810e70:	30cd883a 	add	r6,r6,r3
  810e74:	1029883a 	mov	r20,r2
  810e78:	302b883a 	mov	r21,r6
  810e7c:	da801317 	ldw	r10,76(sp)
  810e80:	dac01417 	ldw	r11,80(sp)
  810e84:	db001517 	ldw	r12,84(sp)
  810e88:	db401617 	ldw	r13,88(sp)
  810e8c:	3440612e 	bgeu	r6,r17,811014 <__muldf3+0x318>
  810e90:	0009883a 	mov	r4,zero
  810e94:	5105883a 	add	r2,r10,r4
  810e98:	128d803a 	cmpltu	r6,r2,r10
  810e9c:	5d07883a 	add	r3,r11,r20
  810ea0:	30cd883a 	add	r6,r6,r3
  810ea4:	0021883a 	mov	r16,zero
  810ea8:	04400044 	movi	r17,1
  810eac:	1025883a 	mov	r18,r2
  810eb0:	3027883a 	mov	r19,r6
  810eb4:	32c06236 	bltu	r6,r11,811040 <__muldf3+0x344>
  810eb8:	59807a26 	beq	r11,r6,8110a4 <__muldf3+0x3a8>
  810ebc:	680b883a 	mov	r5,r13
  810ec0:	b80f883a 	mov	r7,r23
  810ec4:	6009883a 	mov	r4,r12
  810ec8:	b00d883a 	mov	r6,r22
  810ecc:	080f7fc0 	call	80f7fc <__muldi3>
  810ed0:	1009883a 	mov	r4,r2
  810ed4:	000f883a 	mov	r7,zero
  810ed8:	1545883a 	add	r2,r2,r21
  810edc:	1111803a 	cmpltu	r8,r2,r4
  810ee0:	19c7883a 	add	r3,r3,r7
  810ee4:	40c7883a 	add	r3,r8,r3
  810ee8:	88cb883a 	add	r5,r17,r3
  810eec:	d8c00617 	ldw	r3,24(sp)
  810ef0:	8089883a 	add	r4,r16,r2
  810ef4:	d8800b17 	ldw	r2,44(sp)
  810ef8:	18c00104 	addi	r3,r3,4
  810efc:	240d803a 	cmpltu	r6,r4,r16
  810f00:	10c7883a 	add	r3,r2,r3
  810f04:	2013883a 	mov	r9,r4
  810f08:	d8800a17 	ldw	r2,40(sp)
  810f0c:	d9000517 	ldw	r4,20(sp)
  810f10:	314d883a 	add	r6,r6,r5
  810f14:	3015883a 	mov	r10,r6
  810f18:	2088c03a 	cmpne	r4,r4,r2
  810f1c:	00880034 	movhi	r2,8192
  810f20:	10bfffc4 	addi	r2,r2,-1
  810f24:	d9000f15 	stw	r4,60(sp)
  810f28:	d8c01015 	stw	r3,64(sp)
  810f2c:	1180162e 	bgeu	r2,r6,810f88 <__muldf3+0x28c>
  810f30:	1811883a 	mov	r8,r3
  810f34:	101f883a 	mov	r15,r2
  810f38:	980497fa 	slli	r2,r19,31
  810f3c:	9016d07a 	srli	r11,r18,1
  810f40:	500697fa 	slli	r3,r10,31
  810f44:	480cd07a 	srli	r6,r9,1
  810f48:	500ed07a 	srli	r7,r10,1
  810f4c:	12d6b03a 	or	r11,r2,r11
  810f50:	00800044 	movi	r2,1
  810f54:	198cb03a 	or	r6,r3,r6
  810f58:	4888703a 	and	r4,r9,r2
  810f5c:	9818d07a 	srli	r12,r19,1
  810f60:	001b883a 	mov	r13,zero
  810f64:	03a00034 	movhi	r14,32768
  810f68:	3013883a 	mov	r9,r6
  810f6c:	3815883a 	mov	r10,r7
  810f70:	4091883a 	add	r8,r8,r2
  810f74:	20000226 	beq	r4,zero,810f80 <__muldf3+0x284>
  810f78:	5b64b03a 	or	r18,r11,r13
  810f7c:	63a6b03a 	or	r19,r12,r14
  810f80:	7abfed36 	bltu	r15,r10,810f38 <__muldf3+0x23c>
  810f84:	da001015 	stw	r8,64(sp)
  810f88:	00840034 	movhi	r2,4096
  810f8c:	10bfffc4 	addi	r2,r2,-1
  810f90:	12801436 	bltu	r2,r10,810fe4 <__muldf3+0x2e8>
  810f94:	da001017 	ldw	r8,64(sp)
  810f98:	101f883a 	mov	r15,r2
  810f9c:	4a45883a 	add	r2,r9,r9
  810fa0:	124d803a 	cmpltu	r6,r2,r9
  810fa4:	5287883a 	add	r3,r10,r10
  810fa8:	9497883a 	add	r11,r18,r18
  810fac:	5c8f803a 	cmpltu	r7,r11,r18
  810fb0:	9cd9883a 	add	r12,r19,r19
  810fb4:	01000044 	movi	r4,1
  810fb8:	30cd883a 	add	r6,r6,r3
  810fbc:	3b0f883a 	add	r7,r7,r12
  810fc0:	423fffc4 	addi	r8,r8,-1
  810fc4:	1013883a 	mov	r9,r2
  810fc8:	3015883a 	mov	r10,r6
  810fcc:	111ab03a 	or	r13,r2,r4
  810fd0:	98003016 	blt	r19,zero,811094 <__muldf3+0x398>
  810fd4:	5825883a 	mov	r18,r11
  810fd8:	3827883a 	mov	r19,r7
  810fdc:	7abfef2e 	bgeu	r15,r10,810f9c <__muldf3+0x2a0>
  810fe0:	da001015 	stw	r8,64(sp)
  810fe4:	00803fc4 	movi	r2,255
  810fe8:	488e703a 	and	r7,r9,r2
  810fec:	00802004 	movi	r2,128
  810ff0:	0007883a 	mov	r3,zero
  810ff4:	0011883a 	mov	r8,zero
  810ff8:	38801826 	beq	r7,r2,81105c <__muldf3+0x360>
  810ffc:	008000c4 	movi	r2,3
  811000:	d9000e04 	addi	r4,sp,56
  811004:	da801215 	stw	r10,72(sp)
  811008:	d8800e15 	stw	r2,56(sp)
  81100c:	da401115 	stw	r9,68(sp)
  811010:	003f6a06 	br	810dbc <__muldf3+0xc0>
  811014:	89802126 	beq	r17,r6,81109c <__muldf3+0x3a0>
  811018:	0009883a 	mov	r4,zero
  81101c:	5105883a 	add	r2,r10,r4
  811020:	128d803a 	cmpltu	r6,r2,r10
  811024:	5d07883a 	add	r3,r11,r20
  811028:	30cd883a 	add	r6,r6,r3
  81102c:	0021883a 	mov	r16,zero
  811030:	0023883a 	mov	r17,zero
  811034:	1025883a 	mov	r18,r2
  811038:	3027883a 	mov	r19,r6
  81103c:	32ff9e2e 	bgeu	r6,r11,810eb8 <__muldf3+0x1bc>
  811040:	00800044 	movi	r2,1
  811044:	8089883a 	add	r4,r16,r2
  811048:	240d803a 	cmpltu	r6,r4,r16
  81104c:	344d883a 	add	r6,r6,r17
  811050:	2021883a 	mov	r16,r4
  811054:	3023883a 	mov	r17,r6
  811058:	003f9806 	br	810ebc <__muldf3+0x1c0>
  81105c:	403fe71e 	bne	r8,zero,810ffc <__muldf3+0x300>
  811060:	01004004 	movi	r4,256
  811064:	4904703a 	and	r2,r9,r4
  811068:	10c4b03a 	or	r2,r2,r3
  81106c:	103fe31e 	bne	r2,zero,810ffc <__muldf3+0x300>
  811070:	94c4b03a 	or	r2,r18,r19
  811074:	103fe126 	beq	r2,zero,810ffc <__muldf3+0x300>
  811078:	49c5883a 	add	r2,r9,r7
  81107c:	1251803a 	cmpltu	r8,r2,r9
  811080:	4291883a 	add	r8,r8,r10
  811084:	013fc004 	movi	r4,-256
  811088:	1112703a 	and	r9,r2,r4
  81108c:	4015883a 	mov	r10,r8
  811090:	003fda06 	br	810ffc <__muldf3+0x300>
  811094:	6813883a 	mov	r9,r13
  811098:	003fce06 	br	810fd4 <__muldf3+0x2d8>
  81109c:	143f7c36 	bltu	r2,r16,810e90 <__muldf3+0x194>
  8110a0:	003fdd06 	br	811018 <__muldf3+0x31c>
  8110a4:	12bf852e 	bgeu	r2,r10,810ebc <__muldf3+0x1c0>
  8110a8:	003fe506 	br	811040 <__muldf3+0x344>
  8110ac:	00800084 	movi	r2,2
  8110b0:	20bf351e 	bne	r4,r2,810d88 <__muldf3+0x8c>
  8110b4:	01002074 	movhi	r4,129
  8110b8:	2112f904 	addi	r4,r4,19428
  8110bc:	003f3f06 	br	810dbc <__muldf3+0xc0>

008110c0 <__eqdf2>:
  8110c0:	deffef04 	addi	sp,sp,-68
  8110c4:	dc400f15 	stw	r17,60(sp)
  8110c8:	dc400404 	addi	r17,sp,16
  8110cc:	2005883a 	mov	r2,r4
  8110d0:	2807883a 	mov	r3,r5
  8110d4:	dc000e15 	stw	r16,56(sp)
  8110d8:	d809883a 	mov	r4,sp
  8110dc:	880b883a 	mov	r5,r17
  8110e0:	dc000904 	addi	r16,sp,36
  8110e4:	d8c00115 	stw	r3,4(sp)
  8110e8:	d8800015 	stw	r2,0(sp)
  8110ec:	d9800215 	stw	r6,8(sp)
  8110f0:	dfc01015 	stw	ra,64(sp)
  8110f4:	d9c00315 	stw	r7,12(sp)
  8110f8:	08023b80 	call	8023b8 <__unpack_d>
  8110fc:	d9000204 	addi	r4,sp,8
  811100:	800b883a 	mov	r5,r16
  811104:	08023b80 	call	8023b8 <__unpack_d>
  811108:	d8800417 	ldw	r2,16(sp)
  81110c:	00c00044 	movi	r3,1
  811110:	180d883a 	mov	r6,r3
  811114:	1880062e 	bgeu	r3,r2,811130 <__eqdf2+0x70>
  811118:	d8800917 	ldw	r2,36(sp)
  81111c:	8809883a 	mov	r4,r17
  811120:	800b883a 	mov	r5,r16
  811124:	1880022e 	bgeu	r3,r2,811130 <__eqdf2+0x70>
  811128:	081191c0 	call	81191c <__fpcmp_parts_d>
  81112c:	100d883a 	mov	r6,r2
  811130:	3005883a 	mov	r2,r6
  811134:	dfc01017 	ldw	ra,64(sp)
  811138:	dc400f17 	ldw	r17,60(sp)
  81113c:	dc000e17 	ldw	r16,56(sp)
  811140:	dec01104 	addi	sp,sp,68
  811144:	f800283a 	ret

00811148 <__nedf2>:
  811148:	deffef04 	addi	sp,sp,-68
  81114c:	dc400f15 	stw	r17,60(sp)
  811150:	dc400404 	addi	r17,sp,16
  811154:	2005883a 	mov	r2,r4
  811158:	2807883a 	mov	r3,r5
  81115c:	dc000e15 	stw	r16,56(sp)
  811160:	d809883a 	mov	r4,sp
  811164:	880b883a 	mov	r5,r17
  811168:	dc000904 	addi	r16,sp,36
  81116c:	d8c00115 	stw	r3,4(sp)
  811170:	d8800015 	stw	r2,0(sp)
  811174:	d9800215 	stw	r6,8(sp)
  811178:	dfc01015 	stw	ra,64(sp)
  81117c:	d9c00315 	stw	r7,12(sp)
  811180:	08023b80 	call	8023b8 <__unpack_d>
  811184:	d9000204 	addi	r4,sp,8
  811188:	800b883a 	mov	r5,r16
  81118c:	08023b80 	call	8023b8 <__unpack_d>
  811190:	d8800417 	ldw	r2,16(sp)
  811194:	00c00044 	movi	r3,1
  811198:	180d883a 	mov	r6,r3
  81119c:	1880062e 	bgeu	r3,r2,8111b8 <__nedf2+0x70>
  8111a0:	d8800917 	ldw	r2,36(sp)
  8111a4:	8809883a 	mov	r4,r17
  8111a8:	800b883a 	mov	r5,r16
  8111ac:	1880022e 	bgeu	r3,r2,8111b8 <__nedf2+0x70>
  8111b0:	081191c0 	call	81191c <__fpcmp_parts_d>
  8111b4:	100d883a 	mov	r6,r2
  8111b8:	3005883a 	mov	r2,r6
  8111bc:	dfc01017 	ldw	ra,64(sp)
  8111c0:	dc400f17 	ldw	r17,60(sp)
  8111c4:	dc000e17 	ldw	r16,56(sp)
  8111c8:	dec01104 	addi	sp,sp,68
  8111cc:	f800283a 	ret

008111d0 <__gtdf2>:
  8111d0:	deffef04 	addi	sp,sp,-68
  8111d4:	dc400f15 	stw	r17,60(sp)
  8111d8:	dc400404 	addi	r17,sp,16
  8111dc:	2005883a 	mov	r2,r4
  8111e0:	2807883a 	mov	r3,r5
  8111e4:	dc000e15 	stw	r16,56(sp)
  8111e8:	d809883a 	mov	r4,sp
  8111ec:	880b883a 	mov	r5,r17
  8111f0:	dc000904 	addi	r16,sp,36
  8111f4:	d8c00115 	stw	r3,4(sp)
  8111f8:	d8800015 	stw	r2,0(sp)
  8111fc:	d9800215 	stw	r6,8(sp)
  811200:	dfc01015 	stw	ra,64(sp)
  811204:	d9c00315 	stw	r7,12(sp)
  811208:	08023b80 	call	8023b8 <__unpack_d>
  81120c:	d9000204 	addi	r4,sp,8
  811210:	800b883a 	mov	r5,r16
  811214:	08023b80 	call	8023b8 <__unpack_d>
  811218:	d8800417 	ldw	r2,16(sp)
  81121c:	00c00044 	movi	r3,1
  811220:	01bfffc4 	movi	r6,-1
  811224:	1880062e 	bgeu	r3,r2,811240 <__gtdf2+0x70>
  811228:	d8800917 	ldw	r2,36(sp)
  81122c:	8809883a 	mov	r4,r17
  811230:	800b883a 	mov	r5,r16
  811234:	1880022e 	bgeu	r3,r2,811240 <__gtdf2+0x70>
  811238:	081191c0 	call	81191c <__fpcmp_parts_d>
  81123c:	100d883a 	mov	r6,r2
  811240:	3005883a 	mov	r2,r6
  811244:	dfc01017 	ldw	ra,64(sp)
  811248:	dc400f17 	ldw	r17,60(sp)
  81124c:	dc000e17 	ldw	r16,56(sp)
  811250:	dec01104 	addi	sp,sp,68
  811254:	f800283a 	ret

00811258 <__gedf2>:
  811258:	deffef04 	addi	sp,sp,-68
  81125c:	dc400f15 	stw	r17,60(sp)
  811260:	dc400404 	addi	r17,sp,16
  811264:	2005883a 	mov	r2,r4
  811268:	2807883a 	mov	r3,r5
  81126c:	dc000e15 	stw	r16,56(sp)
  811270:	d809883a 	mov	r4,sp
  811274:	880b883a 	mov	r5,r17
  811278:	dc000904 	addi	r16,sp,36
  81127c:	d8c00115 	stw	r3,4(sp)
  811280:	d8800015 	stw	r2,0(sp)
  811284:	d9800215 	stw	r6,8(sp)
  811288:	dfc01015 	stw	ra,64(sp)
  81128c:	d9c00315 	stw	r7,12(sp)
  811290:	08023b80 	call	8023b8 <__unpack_d>
  811294:	d9000204 	addi	r4,sp,8
  811298:	800b883a 	mov	r5,r16
  81129c:	08023b80 	call	8023b8 <__unpack_d>
  8112a0:	d8800417 	ldw	r2,16(sp)
  8112a4:	00c00044 	movi	r3,1
  8112a8:	01bfffc4 	movi	r6,-1
  8112ac:	1880062e 	bgeu	r3,r2,8112c8 <__gedf2+0x70>
  8112b0:	d8800917 	ldw	r2,36(sp)
  8112b4:	8809883a 	mov	r4,r17
  8112b8:	800b883a 	mov	r5,r16
  8112bc:	1880022e 	bgeu	r3,r2,8112c8 <__gedf2+0x70>
  8112c0:	081191c0 	call	81191c <__fpcmp_parts_d>
  8112c4:	100d883a 	mov	r6,r2
  8112c8:	3005883a 	mov	r2,r6
  8112cc:	dfc01017 	ldw	ra,64(sp)
  8112d0:	dc400f17 	ldw	r17,60(sp)
  8112d4:	dc000e17 	ldw	r16,56(sp)
  8112d8:	dec01104 	addi	sp,sp,68
  8112dc:	f800283a 	ret

008112e0 <__ltdf2>:
  8112e0:	deffef04 	addi	sp,sp,-68
  8112e4:	dc400f15 	stw	r17,60(sp)
  8112e8:	dc400404 	addi	r17,sp,16
  8112ec:	2005883a 	mov	r2,r4
  8112f0:	2807883a 	mov	r3,r5
  8112f4:	dc000e15 	stw	r16,56(sp)
  8112f8:	d809883a 	mov	r4,sp
  8112fc:	880b883a 	mov	r5,r17
  811300:	dc000904 	addi	r16,sp,36
  811304:	d8c00115 	stw	r3,4(sp)
  811308:	d8800015 	stw	r2,0(sp)
  81130c:	d9800215 	stw	r6,8(sp)
  811310:	dfc01015 	stw	ra,64(sp)
  811314:	d9c00315 	stw	r7,12(sp)
  811318:	08023b80 	call	8023b8 <__unpack_d>
  81131c:	d9000204 	addi	r4,sp,8
  811320:	800b883a 	mov	r5,r16
  811324:	08023b80 	call	8023b8 <__unpack_d>
  811328:	d8800417 	ldw	r2,16(sp)
  81132c:	00c00044 	movi	r3,1
  811330:	180d883a 	mov	r6,r3
  811334:	1880062e 	bgeu	r3,r2,811350 <__ltdf2+0x70>
  811338:	d8800917 	ldw	r2,36(sp)
  81133c:	8809883a 	mov	r4,r17
  811340:	800b883a 	mov	r5,r16
  811344:	1880022e 	bgeu	r3,r2,811350 <__ltdf2+0x70>
  811348:	081191c0 	call	81191c <__fpcmp_parts_d>
  81134c:	100d883a 	mov	r6,r2
  811350:	3005883a 	mov	r2,r6
  811354:	dfc01017 	ldw	ra,64(sp)
  811358:	dc400f17 	ldw	r17,60(sp)
  81135c:	dc000e17 	ldw	r16,56(sp)
  811360:	dec01104 	addi	sp,sp,68
  811364:	f800283a 	ret

00811368 <__ledf2>:
  811368:	deffef04 	addi	sp,sp,-68
  81136c:	dc400f15 	stw	r17,60(sp)
  811370:	dc400404 	addi	r17,sp,16
  811374:	2005883a 	mov	r2,r4
  811378:	2807883a 	mov	r3,r5
  81137c:	dc000e15 	stw	r16,56(sp)
  811380:	d809883a 	mov	r4,sp
  811384:	880b883a 	mov	r5,r17
  811388:	dc000904 	addi	r16,sp,36
  81138c:	d8c00115 	stw	r3,4(sp)
  811390:	d8800015 	stw	r2,0(sp)
  811394:	d9800215 	stw	r6,8(sp)
  811398:	dfc01015 	stw	ra,64(sp)
  81139c:	d9c00315 	stw	r7,12(sp)
  8113a0:	08023b80 	call	8023b8 <__unpack_d>
  8113a4:	d9000204 	addi	r4,sp,8
  8113a8:	800b883a 	mov	r5,r16
  8113ac:	08023b80 	call	8023b8 <__unpack_d>
  8113b0:	d8800417 	ldw	r2,16(sp)
  8113b4:	00c00044 	movi	r3,1
  8113b8:	180d883a 	mov	r6,r3
  8113bc:	1880062e 	bgeu	r3,r2,8113d8 <__ledf2+0x70>
  8113c0:	d8800917 	ldw	r2,36(sp)
  8113c4:	8809883a 	mov	r4,r17
  8113c8:	800b883a 	mov	r5,r16
  8113cc:	1880022e 	bgeu	r3,r2,8113d8 <__ledf2+0x70>
  8113d0:	081191c0 	call	81191c <__fpcmp_parts_d>
  8113d4:	100d883a 	mov	r6,r2
  8113d8:	3005883a 	mov	r2,r6
  8113dc:	dfc01017 	ldw	ra,64(sp)
  8113e0:	dc400f17 	ldw	r17,60(sp)
  8113e4:	dc000e17 	ldw	r16,56(sp)
  8113e8:	dec01104 	addi	sp,sp,68
  8113ec:	f800283a 	ret

008113f0 <__floatsidf>:
  8113f0:	2006d7fa 	srli	r3,r4,31
  8113f4:	defff604 	addi	sp,sp,-40
  8113f8:	008000c4 	movi	r2,3
  8113fc:	dfc00915 	stw	ra,36(sp)
  811400:	dcc00815 	stw	r19,32(sp)
  811404:	dc800715 	stw	r18,28(sp)
  811408:	dc400615 	stw	r17,24(sp)
  81140c:	dc000515 	stw	r16,20(sp)
  811410:	d8800015 	stw	r2,0(sp)
  811414:	d8c00115 	stw	r3,4(sp)
  811418:	20000f1e 	bne	r4,zero,811458 <__floatsidf+0x68>
  81141c:	00800084 	movi	r2,2
  811420:	d8800015 	stw	r2,0(sp)
  811424:	d809883a 	mov	r4,sp
  811428:	08020a40 	call	8020a4 <__pack_d>
  81142c:	1009883a 	mov	r4,r2
  811430:	180b883a 	mov	r5,r3
  811434:	2005883a 	mov	r2,r4
  811438:	2807883a 	mov	r3,r5
  81143c:	dfc00917 	ldw	ra,36(sp)
  811440:	dcc00817 	ldw	r19,32(sp)
  811444:	dc800717 	ldw	r18,28(sp)
  811448:	dc400617 	ldw	r17,24(sp)
  81144c:	dc000517 	ldw	r16,20(sp)
  811450:	dec00a04 	addi	sp,sp,40
  811454:	f800283a 	ret
  811458:	00800f04 	movi	r2,60
  81145c:	1807003a 	cmpeq	r3,r3,zero
  811460:	d8800215 	stw	r2,8(sp)
  811464:	18001126 	beq	r3,zero,8114ac <__floatsidf+0xbc>
  811468:	0027883a 	mov	r19,zero
  81146c:	2025883a 	mov	r18,r4
  811470:	d9000315 	stw	r4,12(sp)
  811474:	dcc00415 	stw	r19,16(sp)
  811478:	08020240 	call	802024 <__clzsi2>
  81147c:	11000744 	addi	r4,r2,29
  811480:	013fe80e 	bge	zero,r4,811424 <__floatsidf+0x34>
  811484:	10bfff44 	addi	r2,r2,-3
  811488:	10000c16 	blt	r2,zero,8114bc <__floatsidf+0xcc>
  81148c:	90a2983a 	sll	r17,r18,r2
  811490:	0021883a 	mov	r16,zero
  811494:	d8800217 	ldw	r2,8(sp)
  811498:	dc400415 	stw	r17,16(sp)
  81149c:	dc000315 	stw	r16,12(sp)
  8114a0:	1105c83a 	sub	r2,r2,r4
  8114a4:	d8800215 	stw	r2,8(sp)
  8114a8:	003fde06 	br	811424 <__floatsidf+0x34>
  8114ac:	00a00034 	movhi	r2,32768
  8114b0:	20800a26 	beq	r4,r2,8114dc <__floatsidf+0xec>
  8114b4:	0109c83a 	sub	r4,zero,r4
  8114b8:	003feb06 	br	811468 <__floatsidf+0x78>
  8114bc:	9006d07a 	srli	r3,r18,1
  8114c0:	008007c4 	movi	r2,31
  8114c4:	1105c83a 	sub	r2,r2,r4
  8114c8:	1886d83a 	srl	r3,r3,r2
  8114cc:	9922983a 	sll	r17,r19,r4
  8114d0:	9120983a 	sll	r16,r18,r4
  8114d4:	1c62b03a 	or	r17,r3,r17
  8114d8:	003fee06 	br	811494 <__floatsidf+0xa4>
  8114dc:	0009883a 	mov	r4,zero
  8114e0:	01707834 	movhi	r5,49632
  8114e4:	003fd306 	br	811434 <__floatsidf+0x44>

008114e8 <__fixdfsi>:
  8114e8:	defff804 	addi	sp,sp,-32
  8114ec:	2005883a 	mov	r2,r4
  8114f0:	2807883a 	mov	r3,r5
  8114f4:	d809883a 	mov	r4,sp
  8114f8:	d9400204 	addi	r5,sp,8
  8114fc:	d8c00115 	stw	r3,4(sp)
  811500:	d8800015 	stw	r2,0(sp)
  811504:	dfc00715 	stw	ra,28(sp)
  811508:	08023b80 	call	8023b8 <__unpack_d>
  81150c:	d8c00217 	ldw	r3,8(sp)
  811510:	00800084 	movi	r2,2
  811514:	1880051e 	bne	r3,r2,81152c <__fixdfsi+0x44>
  811518:	0007883a 	mov	r3,zero
  81151c:	1805883a 	mov	r2,r3
  811520:	dfc00717 	ldw	ra,28(sp)
  811524:	dec00804 	addi	sp,sp,32
  811528:	f800283a 	ret
  81152c:	00800044 	movi	r2,1
  811530:	10fff92e 	bgeu	r2,r3,811518 <__fixdfsi+0x30>
  811534:	00800104 	movi	r2,4
  811538:	18800426 	beq	r3,r2,81154c <__fixdfsi+0x64>
  81153c:	d8c00417 	ldw	r3,16(sp)
  811540:	183ff516 	blt	r3,zero,811518 <__fixdfsi+0x30>
  811544:	00800784 	movi	r2,30
  811548:	10c0080e 	bge	r2,r3,81156c <__fixdfsi+0x84>
  81154c:	d8800317 	ldw	r2,12(sp)
  811550:	1000121e 	bne	r2,zero,81159c <__fixdfsi+0xb4>
  811554:	00e00034 	movhi	r3,32768
  811558:	18ffffc4 	addi	r3,r3,-1
  81155c:	1805883a 	mov	r2,r3
  811560:	dfc00717 	ldw	ra,28(sp)
  811564:	dec00804 	addi	sp,sp,32
  811568:	f800283a 	ret
  81156c:	00800f04 	movi	r2,60
  811570:	10d1c83a 	sub	r8,r2,r3
  811574:	40bff804 	addi	r2,r8,-32
  811578:	d9800517 	ldw	r6,20(sp)
  81157c:	d9c00617 	ldw	r7,24(sp)
  811580:	10000816 	blt	r2,zero,8115a4 <__fixdfsi+0xbc>
  811584:	3888d83a 	srl	r4,r7,r2
  811588:	d8800317 	ldw	r2,12(sp)
  81158c:	2007883a 	mov	r3,r4
  811590:	103fe226 	beq	r2,zero,81151c <__fixdfsi+0x34>
  811594:	0107c83a 	sub	r3,zero,r4
  811598:	003fe006 	br	81151c <__fixdfsi+0x34>
  81159c:	00e00034 	movhi	r3,32768
  8115a0:	003fde06 	br	81151c <__fixdfsi+0x34>
  8115a4:	39c7883a 	add	r3,r7,r7
  8115a8:	008007c4 	movi	r2,31
  8115ac:	1205c83a 	sub	r2,r2,r8
  8115b0:	1886983a 	sll	r3,r3,r2
  8115b4:	3208d83a 	srl	r4,r6,r8
  8115b8:	1908b03a 	or	r4,r3,r4
  8115bc:	003ff206 	br	811588 <__fixdfsi+0xa0>

008115c0 <__truncdfsf2>:
  8115c0:	defff804 	addi	sp,sp,-32
  8115c4:	2005883a 	mov	r2,r4
  8115c8:	2807883a 	mov	r3,r5
  8115cc:	d809883a 	mov	r4,sp
  8115d0:	d9400204 	addi	r5,sp,8
  8115d4:	d8c00115 	stw	r3,4(sp)
  8115d8:	d8800015 	stw	r2,0(sp)
  8115dc:	dfc00715 	stw	ra,28(sp)
  8115e0:	08023b80 	call	8023b8 <__unpack_d>
  8115e4:	d9c00517 	ldw	r7,20(sp)
  8115e8:	da000617 	ldw	r8,24(sp)
  8115ec:	02d00034 	movhi	r11,16384
  8115f0:	5affffc4 	addi	r11,r11,-1
  8115f4:	3812d7ba 	srli	r9,r7,30
  8115f8:	401a90ba 	slli	r13,r8,2
  8115fc:	3ac4703a 	and	r2,r7,r11
  811600:	0007883a 	mov	r3,zero
  811604:	6a52b03a 	or	r9,r13,r9
  811608:	10c4b03a 	or	r2,r2,r3
  81160c:	d9000217 	ldw	r4,8(sp)
  811610:	d9400317 	ldw	r5,12(sp)
  811614:	d9800417 	ldw	r6,16(sp)
  811618:	480f883a 	mov	r7,r9
  81161c:	10000126 	beq	r2,zero,811624 <__truncdfsf2+0x64>
  811620:	49c00054 	ori	r7,r9,1
  811624:	08118f00 	call	8118f0 <__make_fp>
  811628:	dfc00717 	ldw	ra,28(sp)
  81162c:	dec00804 	addi	sp,sp,32
  811630:	f800283a 	ret

00811634 <udivmodsi4>:
  811634:	29001b2e 	bgeu	r5,r4,8116a4 <udivmodsi4+0x70>
  811638:	28001a16 	blt	r5,zero,8116a4 <udivmodsi4+0x70>
  81163c:	00800044 	movi	r2,1
  811640:	0007883a 	mov	r3,zero
  811644:	01c007c4 	movi	r7,31
  811648:	00000306 	br	811658 <udivmodsi4+0x24>
  81164c:	19c01326 	beq	r3,r7,81169c <udivmodsi4+0x68>
  811650:	18c00044 	addi	r3,r3,1
  811654:	28000416 	blt	r5,zero,811668 <udivmodsi4+0x34>
  811658:	294b883a 	add	r5,r5,r5
  81165c:	1085883a 	add	r2,r2,r2
  811660:	293ffa36 	bltu	r5,r4,81164c <udivmodsi4+0x18>
  811664:	10000d26 	beq	r2,zero,81169c <udivmodsi4+0x68>
  811668:	0007883a 	mov	r3,zero
  81166c:	21400236 	bltu	r4,r5,811678 <udivmodsi4+0x44>
  811670:	2149c83a 	sub	r4,r4,r5
  811674:	1886b03a 	or	r3,r3,r2
  811678:	1004d07a 	srli	r2,r2,1
  81167c:	280ad07a 	srli	r5,r5,1
  811680:	103ffa1e 	bne	r2,zero,81166c <udivmodsi4+0x38>
  811684:	30000226 	beq	r6,zero,811690 <udivmodsi4+0x5c>
  811688:	2005883a 	mov	r2,r4
  81168c:	f800283a 	ret
  811690:	1809883a 	mov	r4,r3
  811694:	2005883a 	mov	r2,r4
  811698:	f800283a 	ret
  81169c:	0007883a 	mov	r3,zero
  8116a0:	003ff806 	br	811684 <udivmodsi4+0x50>
  8116a4:	00800044 	movi	r2,1
  8116a8:	0007883a 	mov	r3,zero
  8116ac:	003fef06 	br	81166c <udivmodsi4+0x38>

008116b0 <__divsi3>:
  8116b0:	defffe04 	addi	sp,sp,-8
  8116b4:	dc000015 	stw	r16,0(sp)
  8116b8:	dfc00115 	stw	ra,4(sp)
  8116bc:	0021883a 	mov	r16,zero
  8116c0:	20000c16 	blt	r4,zero,8116f4 <__divsi3+0x44>
  8116c4:	000d883a 	mov	r6,zero
  8116c8:	28000e16 	blt	r5,zero,811704 <__divsi3+0x54>
  8116cc:	08116340 	call	811634 <udivmodsi4>
  8116d0:	1007883a 	mov	r3,r2
  8116d4:	8005003a 	cmpeq	r2,r16,zero
  8116d8:	1000011e 	bne	r2,zero,8116e0 <__divsi3+0x30>
  8116dc:	00c7c83a 	sub	r3,zero,r3
  8116e0:	1805883a 	mov	r2,r3
  8116e4:	dfc00117 	ldw	ra,4(sp)
  8116e8:	dc000017 	ldw	r16,0(sp)
  8116ec:	dec00204 	addi	sp,sp,8
  8116f0:	f800283a 	ret
  8116f4:	0109c83a 	sub	r4,zero,r4
  8116f8:	04000044 	movi	r16,1
  8116fc:	000d883a 	mov	r6,zero
  811700:	283ff20e 	bge	r5,zero,8116cc <__divsi3+0x1c>
  811704:	014bc83a 	sub	r5,zero,r5
  811708:	8021003a 	cmpeq	r16,r16,zero
  81170c:	003fef06 	br	8116cc <__divsi3+0x1c>

00811710 <__modsi3>:
  811710:	deffff04 	addi	sp,sp,-4
  811714:	dfc00015 	stw	ra,0(sp)
  811718:	01800044 	movi	r6,1
  81171c:	2807883a 	mov	r3,r5
  811720:	20000416 	blt	r4,zero,811734 <__modsi3+0x24>
  811724:	28000c16 	blt	r5,zero,811758 <__modsi3+0x48>
  811728:	dfc00017 	ldw	ra,0(sp)
  81172c:	dec00104 	addi	sp,sp,4
  811730:	08116341 	jmpi	811634 <udivmodsi4>
  811734:	0109c83a 	sub	r4,zero,r4
  811738:	28000b16 	blt	r5,zero,811768 <__modsi3+0x58>
  81173c:	180b883a 	mov	r5,r3
  811740:	01800044 	movi	r6,1
  811744:	08116340 	call	811634 <udivmodsi4>
  811748:	0085c83a 	sub	r2,zero,r2
  81174c:	dfc00017 	ldw	ra,0(sp)
  811750:	dec00104 	addi	sp,sp,4
  811754:	f800283a 	ret
  811758:	014bc83a 	sub	r5,zero,r5
  81175c:	dfc00017 	ldw	ra,0(sp)
  811760:	dec00104 	addi	sp,sp,4
  811764:	08116341 	jmpi	811634 <udivmodsi4>
  811768:	0147c83a 	sub	r3,zero,r5
  81176c:	003ff306 	br	81173c <__modsi3+0x2c>

00811770 <__udivsi3>:
  811770:	000d883a 	mov	r6,zero
  811774:	08116341 	jmpi	811634 <udivmodsi4>

00811778 <__umodsi3>:
  811778:	01800044 	movi	r6,1
  81177c:	08116341 	jmpi	811634 <udivmodsi4>

00811780 <__unpack_f>:
  811780:	21800017 	ldw	r6,0(r4)
  811784:	00c02034 	movhi	r3,128
  811788:	18ffffc4 	addi	r3,r3,-1
  81178c:	3004d5fa 	srli	r2,r6,23
  811790:	3008d7fa 	srli	r4,r6,31
  811794:	30ce703a 	and	r7,r6,r3
  811798:	10c03fcc 	andi	r3,r2,255
  81179c:	29000115 	stw	r4,4(r5)
  8117a0:	1800131e 	bne	r3,zero,8117f0 <__unpack_f+0x70>
  8117a4:	38000f26 	beq	r7,zero,8117e4 <__unpack_f+0x64>
  8117a8:	380691fa 	slli	r3,r7,7
  8117ac:	01bfe084 	movi	r6,-126
  8117b0:	008000c4 	movi	r2,3
  8117b4:	01100034 	movhi	r4,16384
  8117b8:	213fffc4 	addi	r4,r4,-1
  8117bc:	28800015 	stw	r2,0(r5)
  8117c0:	29800215 	stw	r6,8(r5)
  8117c4:	20c00536 	bltu	r4,r3,8117dc <__unpack_f+0x5c>
  8117c8:	3005883a 	mov	r2,r6
  8117cc:	18c7883a 	add	r3,r3,r3
  8117d0:	10bfffc4 	addi	r2,r2,-1
  8117d4:	20fffd2e 	bgeu	r4,r3,8117cc <__unpack_f+0x4c>
  8117d8:	28800215 	stw	r2,8(r5)
  8117dc:	28c00315 	stw	r3,12(r5)
  8117e0:	f800283a 	ret
  8117e4:	00800084 	movi	r2,2
  8117e8:	28800015 	stw	r2,0(r5)
  8117ec:	f800283a 	ret
  8117f0:	00803fc4 	movi	r2,255
  8117f4:	18800826 	beq	r3,r2,811818 <__unpack_f+0x98>
  8117f8:	380491fa 	slli	r2,r7,7
  8117fc:	18ffe044 	addi	r3,r3,-127
  811800:	28c00215 	stw	r3,8(r5)
  811804:	10900034 	orhi	r2,r2,16384
  811808:	28800315 	stw	r2,12(r5)
  81180c:	008000c4 	movi	r2,3
  811810:	28800015 	stw	r2,0(r5)
  811814:	f800283a 	ret
  811818:	3800031e 	bne	r7,zero,811828 <__unpack_f+0xa8>
  81181c:	00800104 	movi	r2,4
  811820:	28800015 	stw	r2,0(r5)
  811824:	f800283a 	ret
  811828:	3080042c 	andhi	r2,r6,16
  81182c:	10000426 	beq	r2,zero,811840 <__unpack_f+0xc0>
  811830:	00800044 	movi	r2,1
  811834:	28800015 	stw	r2,0(r5)
  811838:	29c00315 	stw	r7,12(r5)
  81183c:	f800283a 	ret
  811840:	28000015 	stw	zero,0(r5)
  811844:	003ffc06 	br	811838 <__unpack_f+0xb8>

00811848 <__fpcmp_parts_f>:
  811848:	21800017 	ldw	r6,0(r4)
  81184c:	00c00044 	movi	r3,1
  811850:	19800a2e 	bgeu	r3,r6,81187c <__fpcmp_parts_f+0x34>
  811854:	28800017 	ldw	r2,0(r5)
  811858:	1880082e 	bgeu	r3,r2,81187c <__fpcmp_parts_f+0x34>
  81185c:	00c00104 	movi	r3,4
  811860:	30c01e26 	beq	r6,r3,8118dc <__fpcmp_parts_f+0x94>
  811864:	10c01a26 	beq	r2,r3,8118d0 <__fpcmp_parts_f+0x88>
  811868:	00c00084 	movi	r3,2
  81186c:	30c00526 	beq	r6,r3,811884 <__fpcmp_parts_f+0x3c>
  811870:	10c0071e 	bne	r2,r3,811890 <__fpcmp_parts_f+0x48>
  811874:	20800117 	ldw	r2,4(r4)
  811878:	1000091e 	bne	r2,zero,8118a0 <__fpcmp_parts_f+0x58>
  81187c:	00800044 	movi	r2,1
  811880:	f800283a 	ret
  811884:	10c0121e 	bne	r2,r3,8118d0 <__fpcmp_parts_f+0x88>
  811888:	0005883a 	mov	r2,zero
  81188c:	f800283a 	ret
  811890:	20c00117 	ldw	r3,4(r4)
  811894:	28800117 	ldw	r2,4(r5)
  811898:	18800326 	beq	r3,r2,8118a8 <__fpcmp_parts_f+0x60>
  81189c:	183ff726 	beq	r3,zero,81187c <__fpcmp_parts_f+0x34>
  8118a0:	00bfffc4 	movi	r2,-1
  8118a4:	f800283a 	ret
  8118a8:	21800217 	ldw	r6,8(r4)
  8118ac:	28800217 	ldw	r2,8(r5)
  8118b0:	11bffa16 	blt	r2,r6,81189c <__fpcmp_parts_f+0x54>
  8118b4:	30800416 	blt	r6,r2,8118c8 <__fpcmp_parts_f+0x80>
  8118b8:	21000317 	ldw	r4,12(r4)
  8118bc:	29400317 	ldw	r5,12(r5)
  8118c0:	293ff636 	bltu	r5,r4,81189c <__fpcmp_parts_f+0x54>
  8118c4:	217ff02e 	bgeu	r4,r5,811888 <__fpcmp_parts_f+0x40>
  8118c8:	183fec1e 	bne	r3,zero,81187c <__fpcmp_parts_f+0x34>
  8118cc:	003ff406 	br	8118a0 <__fpcmp_parts_f+0x58>
  8118d0:	28800117 	ldw	r2,4(r5)
  8118d4:	103fe91e 	bne	r2,zero,81187c <__fpcmp_parts_f+0x34>
  8118d8:	003ff106 	br	8118a0 <__fpcmp_parts_f+0x58>
  8118dc:	11bfe51e 	bne	r2,r6,811874 <__fpcmp_parts_f+0x2c>
  8118e0:	28c00117 	ldw	r3,4(r5)
  8118e4:	20800117 	ldw	r2,4(r4)
  8118e8:	1885c83a 	sub	r2,r3,r2
  8118ec:	f800283a 	ret

008118f0 <__make_fp>:
  8118f0:	defffb04 	addi	sp,sp,-20
  8118f4:	d9000015 	stw	r4,0(sp)
  8118f8:	d809883a 	mov	r4,sp
  8118fc:	dfc00415 	stw	ra,16(sp)
  811900:	d9400115 	stw	r5,4(sp)
  811904:	d9800215 	stw	r6,8(sp)
  811908:	d9c00315 	stw	r7,12(sp)
  81190c:	08119e40 	call	8119e4 <__pack_f>
  811910:	dfc00417 	ldw	ra,16(sp)
  811914:	dec00504 	addi	sp,sp,20
  811918:	f800283a 	ret

0081191c <__fpcmp_parts_d>:
  81191c:	21800017 	ldw	r6,0(r4)
  811920:	00c00044 	movi	r3,1
  811924:	19800a2e 	bgeu	r3,r6,811950 <__fpcmp_parts_d+0x34>
  811928:	28800017 	ldw	r2,0(r5)
  81192c:	1880082e 	bgeu	r3,r2,811950 <__fpcmp_parts_d+0x34>
  811930:	00c00104 	movi	r3,4
  811934:	30c02626 	beq	r6,r3,8119d0 <__fpcmp_parts_d+0xb4>
  811938:	10c02226 	beq	r2,r3,8119c4 <__fpcmp_parts_d+0xa8>
  81193c:	00c00084 	movi	r3,2
  811940:	30c00526 	beq	r6,r3,811958 <__fpcmp_parts_d+0x3c>
  811944:	10c0071e 	bne	r2,r3,811964 <__fpcmp_parts_d+0x48>
  811948:	20800117 	ldw	r2,4(r4)
  81194c:	1000091e 	bne	r2,zero,811974 <__fpcmp_parts_d+0x58>
  811950:	00800044 	movi	r2,1
  811954:	f800283a 	ret
  811958:	10c01a1e 	bne	r2,r3,8119c4 <__fpcmp_parts_d+0xa8>
  81195c:	0005883a 	mov	r2,zero
  811960:	f800283a 	ret
  811964:	22000117 	ldw	r8,4(r4)
  811968:	28800117 	ldw	r2,4(r5)
  81196c:	40800326 	beq	r8,r2,81197c <__fpcmp_parts_d+0x60>
  811970:	403ff726 	beq	r8,zero,811950 <__fpcmp_parts_d+0x34>
  811974:	00bfffc4 	movi	r2,-1
  811978:	f800283a 	ret
  81197c:	20c00217 	ldw	r3,8(r4)
  811980:	28800217 	ldw	r2,8(r5)
  811984:	10fffa16 	blt	r2,r3,811970 <__fpcmp_parts_d+0x54>
  811988:	18800916 	blt	r3,r2,8119b0 <__fpcmp_parts_d+0x94>
  81198c:	21c00417 	ldw	r7,16(r4)
  811990:	28c00417 	ldw	r3,16(r5)
  811994:	21800317 	ldw	r6,12(r4)
  811998:	28800317 	ldw	r2,12(r5)
  81199c:	19fff436 	bltu	r3,r7,811970 <__fpcmp_parts_d+0x54>
  8119a0:	38c00526 	beq	r7,r3,8119b8 <__fpcmp_parts_d+0x9c>
  8119a4:	38c00236 	bltu	r7,r3,8119b0 <__fpcmp_parts_d+0x94>
  8119a8:	19ffec1e 	bne	r3,r7,81195c <__fpcmp_parts_d+0x40>
  8119ac:	30bfeb2e 	bgeu	r6,r2,81195c <__fpcmp_parts_d+0x40>
  8119b0:	403fe71e 	bne	r8,zero,811950 <__fpcmp_parts_d+0x34>
  8119b4:	003fef06 	br	811974 <__fpcmp_parts_d+0x58>
  8119b8:	11bffa2e 	bgeu	r2,r6,8119a4 <__fpcmp_parts_d+0x88>
  8119bc:	403fe426 	beq	r8,zero,811950 <__fpcmp_parts_d+0x34>
  8119c0:	003fec06 	br	811974 <__fpcmp_parts_d+0x58>
  8119c4:	28800117 	ldw	r2,4(r5)
  8119c8:	103fe11e 	bne	r2,zero,811950 <__fpcmp_parts_d+0x34>
  8119cc:	003fe906 	br	811974 <__fpcmp_parts_d+0x58>
  8119d0:	11bfdd1e 	bne	r2,r6,811948 <__fpcmp_parts_d+0x2c>
  8119d4:	28c00117 	ldw	r3,4(r5)
  8119d8:	20800117 	ldw	r2,4(r4)
  8119dc:	1885c83a 	sub	r2,r3,r2
  8119e0:	f800283a 	ret

008119e4 <__pack_f>:
  8119e4:	20c00017 	ldw	r3,0(r4)
  8119e8:	01c00044 	movi	r7,1
  8119ec:	21800317 	ldw	r6,12(r4)
  8119f0:	21400117 	ldw	r5,4(r4)
  8119f4:	38c02d2e 	bgeu	r7,r3,811aac <__pack_f+0xc8>
  8119f8:	00800104 	movi	r2,4
  8119fc:	18802826 	beq	r3,r2,811aa0 <__pack_f+0xbc>
  811a00:	00800084 	movi	r2,2
  811a04:	18800126 	beq	r3,r2,811a0c <__pack_f+0x28>
  811a08:	3000101e 	bne	r6,zero,811a4c <__pack_f+0x68>
  811a0c:	000d883a 	mov	r6,zero
  811a10:	0007883a 	mov	r3,zero
  811a14:	19003fcc 	andi	r4,r3,255
  811a18:	200895fa 	slli	r4,r4,23
  811a1c:	00c02034 	movhi	r3,128
  811a20:	18ffffc4 	addi	r3,r3,-1
  811a24:	30c6703a 	and	r3,r6,r3
  811a28:	10a0002c 	andhi	r2,r2,32768
  811a2c:	10c4b03a 	or	r2,r2,r3
  811a30:	280a97fa 	slli	r5,r5,31
  811a34:	1104b03a 	or	r2,r2,r4
  811a38:	00e00034 	movhi	r3,32768
  811a3c:	18ffffc4 	addi	r3,r3,-1
  811a40:	10c4703a 	and	r2,r2,r3
  811a44:	1144b03a 	or	r2,r2,r5
  811a48:	f800283a 	ret
  811a4c:	21000217 	ldw	r4,8(r4)
  811a50:	00bfe084 	movi	r2,-126
  811a54:	20801b16 	blt	r4,r2,811ac4 <__pack_f+0xe0>
  811a58:	00801fc4 	movi	r2,127
  811a5c:	11001016 	blt	r2,r4,811aa0 <__pack_f+0xbc>
  811a60:	308e703a 	and	r7,r6,r2
  811a64:	2087883a 	add	r3,r4,r2
  811a68:	00801004 	movi	r2,64
  811a6c:	38800526 	beq	r7,r2,811a84 <__pack_f+0xa0>
  811a70:	31800fc4 	addi	r6,r6,63
  811a74:	30000716 	blt	r6,zero,811a94 <__pack_f+0xb0>
  811a78:	300490ba 	slli	r2,r6,2
  811a7c:	100cd27a 	srli	r6,r2,9
  811a80:	003fe406 	br	811a14 <__pack_f+0x30>
  811a84:	3080200c 	andi	r2,r6,128
  811a88:	103ffa26 	beq	r2,zero,811a74 <__pack_f+0x90>
  811a8c:	31cd883a 	add	r6,r6,r7
  811a90:	003ff806 	br	811a74 <__pack_f+0x90>
  811a94:	300cd07a 	srli	r6,r6,1
  811a98:	18c00044 	addi	r3,r3,1
  811a9c:	003ff606 	br	811a78 <__pack_f+0x94>
  811aa0:	000d883a 	mov	r6,zero
  811aa4:	00ffffc4 	movi	r3,-1
  811aa8:	003fda06 	br	811a14 <__pack_f+0x30>
  811aac:	31800434 	orhi	r6,r6,16
  811ab0:	00802034 	movhi	r2,128
  811ab4:	10bfffc4 	addi	r2,r2,-1
  811ab8:	308c703a 	and	r6,r6,r2
  811abc:	00ffffc4 	movi	r3,-1
  811ac0:	003fd406 	br	811a14 <__pack_f+0x30>
  811ac4:	1109c83a 	sub	r4,r2,r4
  811ac8:	00800644 	movi	r2,25
  811acc:	11001216 	blt	r2,r4,811b18 <__pack_f+0x134>
  811ad0:	3904983a 	sll	r2,r7,r4
  811ad4:	3106d83a 	srl	r3,r6,r4
  811ad8:	10bfffc4 	addi	r2,r2,-1
  811adc:	3084703a 	and	r2,r6,r2
  811ae0:	1004c03a 	cmpne	r2,r2,zero
  811ae4:	1886b03a 	or	r3,r3,r2
  811ae8:	19001fcc 	andi	r4,r3,127
  811aec:	00801004 	movi	r2,64
  811af0:	20800c26 	beq	r4,r2,811b24 <__pack_f+0x140>
  811af4:	18c00fc4 	addi	r3,r3,63
  811af8:	00900034 	movhi	r2,16384
  811afc:	10bfffc4 	addi	r2,r2,-1
  811b00:	180cd1fa 	srli	r6,r3,7
  811b04:	10c7803a 	cmpltu	r3,r2,r3
  811b08:	00802034 	movhi	r2,128
  811b0c:	10bfffc4 	addi	r2,r2,-1
  811b10:	308c703a 	and	r6,r6,r2
  811b14:	003fbf06 	br	811a14 <__pack_f+0x30>
  811b18:	0007883a 	mov	r3,zero
  811b1c:	000d883a 	mov	r6,zero
  811b20:	003ff906 	br	811b08 <__pack_f+0x124>
  811b24:	1880200c 	andi	r2,r3,128
  811b28:	10000126 	beq	r2,zero,811b30 <__pack_f+0x14c>
  811b2c:	1907883a 	add	r3,r3,r4
  811b30:	180cd1fa 	srli	r6,r3,7
  811b34:	00900034 	movhi	r2,16384
  811b38:	10bfffc4 	addi	r2,r2,-1
  811b3c:	10c7803a 	cmpltu	r3,r2,r3
  811b40:	003ff106 	br	811b08 <__pack_f+0x124>

00811b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  811b44:	defff804 	addi	sp,sp,-32
  811b48:	dfc00715 	stw	ra,28(sp)
  811b4c:	df000615 	stw	fp,24(sp)
  811b50:	df000604 	addi	fp,sp,24
  811b54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  811b58:	e0bffc17 	ldw	r2,-16(fp)
  811b5c:	1004803a 	cmplt	r2,r2,zero
  811b60:	1000091e 	bne	r2,zero,811b88 <close+0x44>
  811b64:	e13ffc17 	ldw	r4,-16(fp)
  811b68:	01400304 	movi	r5,12
  811b6c:	0801fec0 	call	801fec <__mulsi3>
  811b70:	1007883a 	mov	r3,r2
  811b74:	00802074 	movhi	r2,129
  811b78:	1096ad04 	addi	r2,r2,23220
  811b7c:	1887883a 	add	r3,r3,r2
  811b80:	e0ffff15 	stw	r3,-4(fp)
  811b84:	00000106 	br	811b8c <close+0x48>
  811b88:	e03fff15 	stw	zero,-4(fp)
  811b8c:	e0bfff17 	ldw	r2,-4(fp)
  811b90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811b94:	e0bffb17 	ldw	r2,-20(fp)
  811b98:	1005003a 	cmpeq	r2,r2,zero
  811b9c:	10001d1e 	bne	r2,zero,811c14 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  811ba0:	e0bffb17 	ldw	r2,-20(fp)
  811ba4:	10800017 	ldw	r2,0(r2)
  811ba8:	10800417 	ldw	r2,16(r2)
  811bac:	1005003a 	cmpeq	r2,r2,zero
  811bb0:	1000071e 	bne	r2,zero,811bd0 <close+0x8c>
  811bb4:	e0bffb17 	ldw	r2,-20(fp)
  811bb8:	10800017 	ldw	r2,0(r2)
  811bbc:	10800417 	ldw	r2,16(r2)
  811bc0:	e13ffb17 	ldw	r4,-20(fp)
  811bc4:	103ee83a 	callr	r2
  811bc8:	e0bffe15 	stw	r2,-8(fp)
  811bcc:	00000106 	br	811bd4 <close+0x90>
  811bd0:	e03ffe15 	stw	zero,-8(fp)
  811bd4:	e0bffe17 	ldw	r2,-8(fp)
  811bd8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  811bdc:	e13ffc17 	ldw	r4,-16(fp)
  811be0:	08126d00 	call	8126d0 <alt_release_fd>
    if (rval < 0)
  811be4:	e0bffa17 	ldw	r2,-24(fp)
  811be8:	1004403a 	cmpge	r2,r2,zero
  811bec:	1000071e 	bne	r2,zero,811c0c <close+0xc8>
    {
      ALT_ERRNO = -rval;
  811bf0:	0811c440 	call	811c44 <alt_get_errno>
  811bf4:	e0fffa17 	ldw	r3,-24(fp)
  811bf8:	00c7c83a 	sub	r3,zero,r3
  811bfc:	10c00015 	stw	r3,0(r2)
      return -1;
  811c00:	00bfffc4 	movi	r2,-1
  811c04:	e0bffd15 	stw	r2,-12(fp)
  811c08:	00000806 	br	811c2c <close+0xe8>
    }
    return 0;
  811c0c:	e03ffd15 	stw	zero,-12(fp)
  811c10:	00000606 	br	811c2c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811c14:	0811c440 	call	811c44 <alt_get_errno>
  811c18:	1007883a 	mov	r3,r2
  811c1c:	00801444 	movi	r2,81
  811c20:	18800015 	stw	r2,0(r3)
    return -1;
  811c24:	00bfffc4 	movi	r2,-1
  811c28:	e0bffd15 	stw	r2,-12(fp)
  811c2c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  811c30:	e037883a 	mov	sp,fp
  811c34:	dfc00117 	ldw	ra,4(sp)
  811c38:	df000017 	ldw	fp,0(sp)
  811c3c:	dec00204 	addi	sp,sp,8
  811c40:	f800283a 	ret

00811c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811c44:	defffd04 	addi	sp,sp,-12
  811c48:	dfc00215 	stw	ra,8(sp)
  811c4c:	df000115 	stw	fp,4(sp)
  811c50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811c54:	00802074 	movhi	r2,129
  811c58:	109b3b04 	addi	r2,r2,27884
  811c5c:	10800017 	ldw	r2,0(r2)
  811c60:	1005003a 	cmpeq	r2,r2,zero
  811c64:	1000061e 	bne	r2,zero,811c80 <alt_get_errno+0x3c>
  811c68:	00802074 	movhi	r2,129
  811c6c:	109b3b04 	addi	r2,r2,27884
  811c70:	10800017 	ldw	r2,0(r2)
  811c74:	103ee83a 	callr	r2
  811c78:	e0bfff15 	stw	r2,-4(fp)
  811c7c:	00000306 	br	811c8c <alt_get_errno+0x48>
  811c80:	008020b4 	movhi	r2,130
  811c84:	10a21904 	addi	r2,r2,-30620
  811c88:	e0bfff15 	stw	r2,-4(fp)
  811c8c:	e0bfff17 	ldw	r2,-4(fp)
}
  811c90:	e037883a 	mov	sp,fp
  811c94:	dfc00117 	ldw	ra,4(sp)
  811c98:	df000017 	ldw	fp,0(sp)
  811c9c:	dec00204 	addi	sp,sp,8
  811ca0:	f800283a 	ret

00811ca4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811ca4:	defffc04 	addi	sp,sp,-16
  811ca8:	df000315 	stw	fp,12(sp)
  811cac:	df000304 	addi	fp,sp,12
  811cb0:	e13ffd15 	stw	r4,-12(fp)
  811cb4:	e17ffe15 	stw	r5,-8(fp)
  811cb8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811cbc:	e0bfff17 	ldw	r2,-4(fp)
}
  811cc0:	e037883a 	mov	sp,fp
  811cc4:	df000017 	ldw	fp,0(sp)
  811cc8:	dec00104 	addi	sp,sp,4
  811ccc:	f800283a 	ret

00811cd0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811cd0:	defffd04 	addi	sp,sp,-12
  811cd4:	df000215 	stw	fp,8(sp)
  811cd8:	df000204 	addi	fp,sp,8
  811cdc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811ce0:	e0bfff17 	ldw	r2,-4(fp)
  811ce4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811ce8:	e0bffe17 	ldw	r2,-8(fp)
  811cec:	1005003a 	cmpeq	r2,r2,zero
  811cf0:	1000021e 	bne	r2,zero,811cfc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811cf4:	002af070 	cmpltui	zero,zero,43969
  811cf8:	00000106 	br	811d00 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811cfc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811d00:	e037883a 	mov	sp,fp
  811d04:	df000017 	ldw	fp,0(sp)
  811d08:	dec00104 	addi	sp,sp,4
  811d0c:	f800283a 	ret

00811d10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811d10:	defffd04 	addi	sp,sp,-12
  811d14:	dfc00215 	stw	ra,8(sp)
  811d18:	df000115 	stw	fp,4(sp)
  811d1c:	df000104 	addi	fp,sp,4
  811d20:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811d24:	e13fff17 	ldw	r4,-4(fp)
  811d28:	0811cd00 	call	811cd0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811d2c:	003fff06 	br	811d2c <_exit+0x1c>

00811d30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811d30:	defff904 	addi	sp,sp,-28
  811d34:	dfc00615 	stw	ra,24(sp)
  811d38:	df000515 	stw	fp,20(sp)
  811d3c:	df000504 	addi	fp,sp,20
  811d40:	e13ffc15 	stw	r4,-16(fp)
  811d44:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811d48:	e0bffc17 	ldw	r2,-16(fp)
  811d4c:	1004803a 	cmplt	r2,r2,zero
  811d50:	1000091e 	bne	r2,zero,811d78 <fstat+0x48>
  811d54:	e13ffc17 	ldw	r4,-16(fp)
  811d58:	01400304 	movi	r5,12
  811d5c:	0801fec0 	call	801fec <__mulsi3>
  811d60:	1007883a 	mov	r3,r2
  811d64:	00802074 	movhi	r2,129
  811d68:	1096ad04 	addi	r2,r2,23220
  811d6c:	1887883a 	add	r3,r3,r2
  811d70:	e0ffff15 	stw	r3,-4(fp)
  811d74:	00000106 	br	811d7c <fstat+0x4c>
  811d78:	e03fff15 	stw	zero,-4(fp)
  811d7c:	e0bfff17 	ldw	r2,-4(fp)
  811d80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811d84:	e0bffb17 	ldw	r2,-20(fp)
  811d88:	1005003a 	cmpeq	r2,r2,zero
  811d8c:	1000121e 	bne	r2,zero,811dd8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  811d90:	e0bffb17 	ldw	r2,-20(fp)
  811d94:	10800017 	ldw	r2,0(r2)
  811d98:	10800817 	ldw	r2,32(r2)
  811d9c:	1005003a 	cmpeq	r2,r2,zero
  811da0:	1000081e 	bne	r2,zero,811dc4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  811da4:	e0bffb17 	ldw	r2,-20(fp)
  811da8:	10800017 	ldw	r2,0(r2)
  811dac:	10800817 	ldw	r2,32(r2)
  811db0:	e13ffb17 	ldw	r4,-20(fp)
  811db4:	e17ffd17 	ldw	r5,-12(fp)
  811db8:	103ee83a 	callr	r2
  811dbc:	e0bffe15 	stw	r2,-8(fp)
  811dc0:	00000b06 	br	811df0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  811dc4:	e0fffd17 	ldw	r3,-12(fp)
  811dc8:	00880004 	movi	r2,8192
  811dcc:	18800115 	stw	r2,4(r3)
      return 0;
  811dd0:	e03ffe15 	stw	zero,-8(fp)
  811dd4:	00000606 	br	811df0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811dd8:	0811e080 	call	811e08 <alt_get_errno>
  811ddc:	1007883a 	mov	r3,r2
  811de0:	00801444 	movi	r2,81
  811de4:	18800015 	stw	r2,0(r3)
    return -1;
  811de8:	00bfffc4 	movi	r2,-1
  811dec:	e0bffe15 	stw	r2,-8(fp)
  811df0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811df4:	e037883a 	mov	sp,fp
  811df8:	dfc00117 	ldw	ra,4(sp)
  811dfc:	df000017 	ldw	fp,0(sp)
  811e00:	dec00204 	addi	sp,sp,8
  811e04:	f800283a 	ret

00811e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811e08:	defffd04 	addi	sp,sp,-12
  811e0c:	dfc00215 	stw	ra,8(sp)
  811e10:	df000115 	stw	fp,4(sp)
  811e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811e18:	00802074 	movhi	r2,129
  811e1c:	109b3b04 	addi	r2,r2,27884
  811e20:	10800017 	ldw	r2,0(r2)
  811e24:	1005003a 	cmpeq	r2,r2,zero
  811e28:	1000061e 	bne	r2,zero,811e44 <alt_get_errno+0x3c>
  811e2c:	00802074 	movhi	r2,129
  811e30:	109b3b04 	addi	r2,r2,27884
  811e34:	10800017 	ldw	r2,0(r2)
  811e38:	103ee83a 	callr	r2
  811e3c:	e0bfff15 	stw	r2,-4(fp)
  811e40:	00000306 	br	811e50 <alt_get_errno+0x48>
  811e44:	008020b4 	movhi	r2,130
  811e48:	10a21904 	addi	r2,r2,-30620
  811e4c:	e0bfff15 	stw	r2,-4(fp)
  811e50:	e0bfff17 	ldw	r2,-4(fp)
}
  811e54:	e037883a 	mov	sp,fp
  811e58:	dfc00117 	ldw	ra,4(sp)
  811e5c:	df000017 	ldw	fp,0(sp)
  811e60:	dec00204 	addi	sp,sp,8
  811e64:	f800283a 	ret

00811e68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  811e68:	deffeb04 	addi	sp,sp,-84
  811e6c:	dfc01415 	stw	ra,80(sp)
  811e70:	df001315 	stw	fp,76(sp)
  811e74:	df001304 	addi	fp,sp,76
  811e78:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811e7c:	e0bffd17 	ldw	r2,-12(fp)
  811e80:	1004803a 	cmplt	r2,r2,zero
  811e84:	1000091e 	bne	r2,zero,811eac <isatty+0x44>
  811e88:	e13ffd17 	ldw	r4,-12(fp)
  811e8c:	01400304 	movi	r5,12
  811e90:	0801fec0 	call	801fec <__mulsi3>
  811e94:	1007883a 	mov	r3,r2
  811e98:	00802074 	movhi	r2,129
  811e9c:	1096ad04 	addi	r2,r2,23220
  811ea0:	1887883a 	add	r3,r3,r2
  811ea4:	e0ffff15 	stw	r3,-4(fp)
  811ea8:	00000106 	br	811eb0 <isatty+0x48>
  811eac:	e03fff15 	stw	zero,-4(fp)
  811eb0:	e0bfff17 	ldw	r2,-4(fp)
  811eb4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  811eb8:	e0bfed17 	ldw	r2,-76(fp)
  811ebc:	1005003a 	cmpeq	r2,r2,zero
  811ec0:	10000f1e 	bne	r2,zero,811f00 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  811ec4:	e0bfed17 	ldw	r2,-76(fp)
  811ec8:	10800017 	ldw	r2,0(r2)
  811ecc:	10800817 	ldw	r2,32(r2)
  811ed0:	1004c03a 	cmpne	r2,r2,zero
  811ed4:	1000031e 	bne	r2,zero,811ee4 <isatty+0x7c>
    {
      return 1;
  811ed8:	00800044 	movi	r2,1
  811edc:	e0bffe15 	stw	r2,-8(fp)
  811ee0:	00000c06 	br	811f14 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  811ee4:	e17fee04 	addi	r5,fp,-72
  811ee8:	e13ffd17 	ldw	r4,-12(fp)
  811eec:	0811d300 	call	811d30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  811ef0:	e0bfef17 	ldw	r2,-68(fp)
  811ef4:	10880020 	cmpeqi	r2,r2,8192
  811ef8:	e0bffe15 	stw	r2,-8(fp)
  811efc:	00000506 	br	811f14 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811f00:	0811f2c0 	call	811f2c <alt_get_errno>
  811f04:	1007883a 	mov	r3,r2
  811f08:	00801444 	movi	r2,81
  811f0c:	18800015 	stw	r2,0(r3)
    return 0;
  811f10:	e03ffe15 	stw	zero,-8(fp)
  811f14:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811f18:	e037883a 	mov	sp,fp
  811f1c:	dfc00117 	ldw	ra,4(sp)
  811f20:	df000017 	ldw	fp,0(sp)
  811f24:	dec00204 	addi	sp,sp,8
  811f28:	f800283a 	ret

00811f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811f2c:	defffd04 	addi	sp,sp,-12
  811f30:	dfc00215 	stw	ra,8(sp)
  811f34:	df000115 	stw	fp,4(sp)
  811f38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811f3c:	00802074 	movhi	r2,129
  811f40:	109b3b04 	addi	r2,r2,27884
  811f44:	10800017 	ldw	r2,0(r2)
  811f48:	1005003a 	cmpeq	r2,r2,zero
  811f4c:	1000061e 	bne	r2,zero,811f68 <alt_get_errno+0x3c>
  811f50:	00802074 	movhi	r2,129
  811f54:	109b3b04 	addi	r2,r2,27884
  811f58:	10800017 	ldw	r2,0(r2)
  811f5c:	103ee83a 	callr	r2
  811f60:	e0bfff15 	stw	r2,-4(fp)
  811f64:	00000306 	br	811f74 <alt_get_errno+0x48>
  811f68:	008020b4 	movhi	r2,130
  811f6c:	10a21904 	addi	r2,r2,-30620
  811f70:	e0bfff15 	stw	r2,-4(fp)
  811f74:	e0bfff17 	ldw	r2,-4(fp)
}
  811f78:	e037883a 	mov	sp,fp
  811f7c:	dfc00117 	ldw	ra,4(sp)
  811f80:	df000017 	ldw	fp,0(sp)
  811f84:	dec00204 	addi	sp,sp,8
  811f88:	f800283a 	ret

00811f8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  811f8c:	defffe04 	addi	sp,sp,-8
  811f90:	dfc00115 	stw	ra,4(sp)
  811f94:	df000015 	stw	fp,0(sp)
  811f98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  811f9c:	01002074 	movhi	r4,129
  811fa0:	211b5204 	addi	r4,r4,27976
  811fa4:	01402074 	movhi	r5,129
  811fa8:	29548b04 	addi	r5,r5,21036
  811fac:	01802074 	movhi	r6,129
  811fb0:	319b5204 	addi	r6,r6,27976
  811fb4:	081200c0 	call	81200c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  811fb8:	01002034 	movhi	r4,128
  811fbc:	21000004 	addi	r4,r4,0
  811fc0:	01404234 	movhi	r5,264
  811fc4:	29400804 	addi	r5,r5,32
  811fc8:	01804234 	movhi	r6,264
  811fcc:	31806d04 	addi	r6,r6,436
  811fd0:	081200c0 	call	81200c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811fd4:	01002074 	movhi	r4,129
  811fd8:	21125d04 	addi	r4,r4,18804
  811fdc:	01402074 	movhi	r5,129
  811fe0:	29525d04 	addi	r5,r5,18804
  811fe4:	01802074 	movhi	r6,129
  811fe8:	31948b04 	addi	r6,r6,21036
  811fec:	081200c0 	call	81200c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811ff0:	0813e180 	call	813e18 <alt_dcache_flush_all>
  alt_icache_flush_all();
  811ff4:	081425c0 	call	81425c <alt_icache_flush_all>
}
  811ff8:	e037883a 	mov	sp,fp
  811ffc:	dfc00117 	ldw	ra,4(sp)
  812000:	df000017 	ldw	fp,0(sp)
  812004:	dec00204 	addi	sp,sp,8
  812008:	f800283a 	ret

0081200c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81200c:	defffc04 	addi	sp,sp,-16
  812010:	df000315 	stw	fp,12(sp)
  812014:	df000304 	addi	fp,sp,12
  812018:	e13ffd15 	stw	r4,-12(fp)
  81201c:	e17ffe15 	stw	r5,-8(fp)
  812020:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  812024:	e0fffe17 	ldw	r3,-8(fp)
  812028:	e0bffd17 	ldw	r2,-12(fp)
  81202c:	18800e26 	beq	r3,r2,812068 <alt_load_section+0x5c>
  {
    while( to != end )
  812030:	00000a06 	br	81205c <alt_load_section+0x50>
    {
      *to++ = *from++;
  812034:	e0bffd17 	ldw	r2,-12(fp)
  812038:	10c00017 	ldw	r3,0(r2)
  81203c:	e0bffe17 	ldw	r2,-8(fp)
  812040:	10c00015 	stw	r3,0(r2)
  812044:	e0bffe17 	ldw	r2,-8(fp)
  812048:	10800104 	addi	r2,r2,4
  81204c:	e0bffe15 	stw	r2,-8(fp)
  812050:	e0bffd17 	ldw	r2,-12(fp)
  812054:	10800104 	addi	r2,r2,4
  812058:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81205c:	e0fffe17 	ldw	r3,-8(fp)
  812060:	e0bfff17 	ldw	r2,-4(fp)
  812064:	18bff31e 	bne	r3,r2,812034 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  812068:	e037883a 	mov	sp,fp
  81206c:	df000017 	ldw	fp,0(sp)
  812070:	dec00104 	addi	sp,sp,4
  812074:	f800283a 	ret

00812078 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  812078:	defff804 	addi	sp,sp,-32
  81207c:	dfc00715 	stw	ra,28(sp)
  812080:	df000615 	stw	fp,24(sp)
  812084:	df000604 	addi	fp,sp,24
  812088:	e13ffc15 	stw	r4,-16(fp)
  81208c:	e17ffd15 	stw	r5,-12(fp)
  812090:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  812094:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812098:	e0bffc17 	ldw	r2,-16(fp)
  81209c:	1004803a 	cmplt	r2,r2,zero
  8120a0:	1000091e 	bne	r2,zero,8120c8 <lseek+0x50>
  8120a4:	e13ffc17 	ldw	r4,-16(fp)
  8120a8:	01400304 	movi	r5,12
  8120ac:	0801fec0 	call	801fec <__mulsi3>
  8120b0:	1007883a 	mov	r3,r2
  8120b4:	00802074 	movhi	r2,129
  8120b8:	1096ad04 	addi	r2,r2,23220
  8120bc:	1887883a 	add	r3,r3,r2
  8120c0:	e0ffff15 	stw	r3,-4(fp)
  8120c4:	00000106 	br	8120cc <lseek+0x54>
  8120c8:	e03fff15 	stw	zero,-4(fp)
  8120cc:	e0bfff17 	ldw	r2,-4(fp)
  8120d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8120d4:	e0bffb17 	ldw	r2,-20(fp)
  8120d8:	1005003a 	cmpeq	r2,r2,zero
  8120dc:	1000111e 	bne	r2,zero,812124 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8120e0:	e0bffb17 	ldw	r2,-20(fp)
  8120e4:	10800017 	ldw	r2,0(r2)
  8120e8:	10800717 	ldw	r2,28(r2)
  8120ec:	1005003a 	cmpeq	r2,r2,zero
  8120f0:	1000091e 	bne	r2,zero,812118 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8120f4:	e0bffb17 	ldw	r2,-20(fp)
  8120f8:	10800017 	ldw	r2,0(r2)
  8120fc:	10800717 	ldw	r2,28(r2)
  812100:	e13ffb17 	ldw	r4,-20(fp)
  812104:	e17ffd17 	ldw	r5,-12(fp)
  812108:	e1bffe17 	ldw	r6,-8(fp)
  81210c:	103ee83a 	callr	r2
  812110:	e0bffa15 	stw	r2,-24(fp)
  812114:	00000506 	br	81212c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  812118:	00bfde84 	movi	r2,-134
  81211c:	e0bffa15 	stw	r2,-24(fp)
  812120:	00000206 	br	81212c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  812124:	00bfebc4 	movi	r2,-81
  812128:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  81212c:	e0bffa17 	ldw	r2,-24(fp)
  812130:	1004403a 	cmpge	r2,r2,zero
  812134:	1000071e 	bne	r2,zero,812154 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  812138:	081216c0 	call	81216c <alt_get_errno>
  81213c:	1007883a 	mov	r3,r2
  812140:	e0bffa17 	ldw	r2,-24(fp)
  812144:	0085c83a 	sub	r2,zero,r2
  812148:	18800015 	stw	r2,0(r3)
    rc = -1;
  81214c:	00bfffc4 	movi	r2,-1
  812150:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  812154:	e0bffa17 	ldw	r2,-24(fp)
}
  812158:	e037883a 	mov	sp,fp
  81215c:	dfc00117 	ldw	ra,4(sp)
  812160:	df000017 	ldw	fp,0(sp)
  812164:	dec00204 	addi	sp,sp,8
  812168:	f800283a 	ret

0081216c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81216c:	defffd04 	addi	sp,sp,-12
  812170:	dfc00215 	stw	ra,8(sp)
  812174:	df000115 	stw	fp,4(sp)
  812178:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81217c:	00802074 	movhi	r2,129
  812180:	109b3b04 	addi	r2,r2,27884
  812184:	10800017 	ldw	r2,0(r2)
  812188:	1005003a 	cmpeq	r2,r2,zero
  81218c:	1000061e 	bne	r2,zero,8121a8 <alt_get_errno+0x3c>
  812190:	00802074 	movhi	r2,129
  812194:	109b3b04 	addi	r2,r2,27884
  812198:	10800017 	ldw	r2,0(r2)
  81219c:	103ee83a 	callr	r2
  8121a0:	e0bfff15 	stw	r2,-4(fp)
  8121a4:	00000306 	br	8121b4 <alt_get_errno+0x48>
  8121a8:	008020b4 	movhi	r2,130
  8121ac:	10a21904 	addi	r2,r2,-30620
  8121b0:	e0bfff15 	stw	r2,-4(fp)
  8121b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8121b8:	e037883a 	mov	sp,fp
  8121bc:	dfc00117 	ldw	ra,4(sp)
  8121c0:	df000017 	ldw	fp,0(sp)
  8121c4:	dec00204 	addi	sp,sp,8
  8121c8:	f800283a 	ret

008121cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8121cc:	defffd04 	addi	sp,sp,-12
  8121d0:	dfc00215 	stw	ra,8(sp)
  8121d4:	df000115 	stw	fp,4(sp)
  8121d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8121dc:	0009883a 	mov	r4,zero
  8121e0:	0812a7c0 	call	812a7c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8121e4:	0812ab00 	call	812ab0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8121e8:	01002074 	movhi	r4,129
  8121ec:	21148004 	addi	r4,r4,20992
  8121f0:	01402074 	movhi	r5,129
  8121f4:	29548004 	addi	r5,r5,20992
  8121f8:	01802074 	movhi	r6,129
  8121fc:	31948004 	addi	r6,r6,20992
  812200:	08146300 	call	814630 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  812204:	d126f117 	ldw	r4,-25660(gp)
  812208:	d166f217 	ldw	r5,-25656(gp)
  81220c:	d1a6f317 	ldw	r6,-25652(gp)
  812210:	080053c0 	call	80053c <main>
  812214:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  812218:	01000044 	movi	r4,1
  81221c:	0811b440 	call	811b44 <close>
  exit (result);
  812220:	e13fff17 	ldw	r4,-4(fp)
  812224:	08026280 	call	802628 <exit>

00812228 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  812228:	defffe04 	addi	sp,sp,-8
  81222c:	df000115 	stw	fp,4(sp)
  812230:	df000104 	addi	fp,sp,4
  812234:	e13fff15 	stw	r4,-4(fp)
}
  812238:	e037883a 	mov	sp,fp
  81223c:	df000017 	ldw	fp,0(sp)
  812240:	dec00104 	addi	sp,sp,4
  812244:	f800283a 	ret

00812248 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  812248:	defffe04 	addi	sp,sp,-8
  81224c:	df000115 	stw	fp,4(sp)
  812250:	df000104 	addi	fp,sp,4
  812254:	e13fff15 	stw	r4,-4(fp)
}
  812258:	e037883a 	mov	sp,fp
  81225c:	df000017 	ldw	fp,0(sp)
  812260:	dec00104 	addi	sp,sp,4
  812264:	f800283a 	ret

00812268 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812268:	defffa04 	addi	sp,sp,-24
  81226c:	dfc00515 	stw	ra,20(sp)
  812270:	df000415 	stw	fp,16(sp)
  812274:	dc000315 	stw	r16,12(sp)
  812278:	df000304 	addi	fp,sp,12
  81227c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812280:	e0bffe17 	ldw	r2,-8(fp)
  812284:	10800217 	ldw	r2,8(r2)
  812288:	10d00034 	orhi	r3,r2,16384
  81228c:	e0bffe17 	ldw	r2,-8(fp)
  812290:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  812294:	e03ffd15 	stw	zero,-12(fp)
  812298:	00002306 	br	812328 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81229c:	e13ffd17 	ldw	r4,-12(fp)
  8122a0:	04002074 	movhi	r16,129
  8122a4:	8416ad04 	addi	r16,r16,23220
  8122a8:	01400304 	movi	r5,12
  8122ac:	0801fec0 	call	801fec <__mulsi3>
  8122b0:	1405883a 	add	r2,r2,r16
  8122b4:	10c00017 	ldw	r3,0(r2)
  8122b8:	e0bffe17 	ldw	r2,-8(fp)
  8122bc:	10800017 	ldw	r2,0(r2)
  8122c0:	1880161e 	bne	r3,r2,81231c <alt_file_locked+0xb4>
  8122c4:	e13ffd17 	ldw	r4,-12(fp)
  8122c8:	04002074 	movhi	r16,129
  8122cc:	8416ad04 	addi	r16,r16,23220
  8122d0:	01400304 	movi	r5,12
  8122d4:	0801fec0 	call	801fec <__mulsi3>
  8122d8:	1405883a 	add	r2,r2,r16
  8122dc:	10800204 	addi	r2,r2,8
  8122e0:	10800017 	ldw	r2,0(r2)
  8122e4:	1004403a 	cmpge	r2,r2,zero
  8122e8:	10000c1e 	bne	r2,zero,81231c <alt_file_locked+0xb4>
  8122ec:	e13ffd17 	ldw	r4,-12(fp)
  8122f0:	01400304 	movi	r5,12
  8122f4:	0801fec0 	call	801fec <__mulsi3>
  8122f8:	1007883a 	mov	r3,r2
  8122fc:	00802074 	movhi	r2,129
  812300:	1096ad04 	addi	r2,r2,23220
  812304:	1887883a 	add	r3,r3,r2
  812308:	e0bffe17 	ldw	r2,-8(fp)
  81230c:	18800326 	beq	r3,r2,81231c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  812310:	00bffcc4 	movi	r2,-13
  812314:	e0bfff15 	stw	r2,-4(fp)
  812318:	00000a06 	br	812344 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81231c:	e0bffd17 	ldw	r2,-12(fp)
  812320:	10800044 	addi	r2,r2,1
  812324:	e0bffd15 	stw	r2,-12(fp)
  812328:	00802074 	movhi	r2,129
  81232c:	109b3a04 	addi	r2,r2,27880
  812330:	10800017 	ldw	r2,0(r2)
  812334:	1007883a 	mov	r3,r2
  812338:	e0bffd17 	ldw	r2,-12(fp)
  81233c:	18bfd72e 	bgeu	r3,r2,81229c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  812340:	e03fff15 	stw	zero,-4(fp)
  812344:	e0bfff17 	ldw	r2,-4(fp)
}
  812348:	e037883a 	mov	sp,fp
  81234c:	dfc00217 	ldw	ra,8(sp)
  812350:	df000117 	ldw	fp,4(sp)
  812354:	dc000017 	ldw	r16,0(sp)
  812358:	dec00304 	addi	sp,sp,12
  81235c:	f800283a 	ret

00812360 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812360:	defff404 	addi	sp,sp,-48
  812364:	dfc00b15 	stw	ra,44(sp)
  812368:	df000a15 	stw	fp,40(sp)
  81236c:	df000a04 	addi	fp,sp,40
  812370:	e13ffb15 	stw	r4,-20(fp)
  812374:	e17ffc15 	stw	r5,-16(fp)
  812378:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81237c:	00bfffc4 	movi	r2,-1
  812380:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  812384:	00bffb44 	movi	r2,-19
  812388:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81238c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812390:	e13ffb17 	ldw	r4,-20(fp)
  812394:	01402074 	movhi	r5,129
  812398:	295b3804 	addi	r5,r5,27872
  81239c:	0813f480 	call	813f48 <alt_find_dev>
  8123a0:	e0bffa15 	stw	r2,-24(fp)
  8123a4:	e0bffa17 	ldw	r2,-24(fp)
  8123a8:	1004c03a 	cmpne	r2,r2,zero
  8123ac:	1000051e 	bne	r2,zero,8123c4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8123b0:	e13ffb17 	ldw	r4,-20(fp)
  8123b4:	0813fdc0 	call	813fdc <alt_find_file>
  8123b8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8123bc:	00800044 	movi	r2,1
  8123c0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8123c4:	e0bffa17 	ldw	r2,-24(fp)
  8123c8:	1005003a 	cmpeq	r2,r2,zero
  8123cc:	1000311e 	bne	r2,zero,812494 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8123d0:	e13ffa17 	ldw	r4,-24(fp)
  8123d4:	081418c0 	call	81418c <alt_get_fd>
  8123d8:	e0bff815 	stw	r2,-32(fp)
  8123dc:	e0bff817 	ldw	r2,-32(fp)
  8123e0:	1004403a 	cmpge	r2,r2,zero
  8123e4:	1000031e 	bne	r2,zero,8123f4 <open+0x94>
    {
      status = index;
  8123e8:	e0bff817 	ldw	r2,-32(fp)
  8123ec:	e0bff715 	stw	r2,-36(fp)
  8123f0:	00002a06 	br	81249c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  8123f4:	e13ff817 	ldw	r4,-32(fp)
  8123f8:	01400304 	movi	r5,12
  8123fc:	0801fec0 	call	801fec <__mulsi3>
  812400:	1007883a 	mov	r3,r2
  812404:	00802074 	movhi	r2,129
  812408:	1096ad04 	addi	r2,r2,23220
  81240c:	1885883a 	add	r2,r3,r2
  812410:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  812414:	e0fffc17 	ldw	r3,-16(fp)
  812418:	00900034 	movhi	r2,16384
  81241c:	10bfffc4 	addi	r2,r2,-1
  812420:	1886703a 	and	r3,r3,r2
  812424:	e0bff917 	ldw	r2,-28(fp)
  812428:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81242c:	e0bff617 	ldw	r2,-40(fp)
  812430:	1004c03a 	cmpne	r2,r2,zero
  812434:	1000061e 	bne	r2,zero,812450 <open+0xf0>
  812438:	e13ff917 	ldw	r4,-28(fp)
  81243c:	08122680 	call	812268 <alt_file_locked>
  812440:	e0bff715 	stw	r2,-36(fp)
  812444:	e0bff717 	ldw	r2,-36(fp)
  812448:	1004803a 	cmplt	r2,r2,zero
  81244c:	1000131e 	bne	r2,zero,81249c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  812450:	e0bffa17 	ldw	r2,-24(fp)
  812454:	10800317 	ldw	r2,12(r2)
  812458:	1005003a 	cmpeq	r2,r2,zero
  81245c:	1000091e 	bne	r2,zero,812484 <open+0x124>
  812460:	e0bffa17 	ldw	r2,-24(fp)
  812464:	10800317 	ldw	r2,12(r2)
  812468:	e13ff917 	ldw	r4,-28(fp)
  81246c:	e17ffb17 	ldw	r5,-20(fp)
  812470:	e1bffc17 	ldw	r6,-16(fp)
  812474:	e1fffd17 	ldw	r7,-12(fp)
  812478:	103ee83a 	callr	r2
  81247c:	e0bfff15 	stw	r2,-4(fp)
  812480:	00000106 	br	812488 <open+0x128>
  812484:	e03fff15 	stw	zero,-4(fp)
  812488:	e0bfff17 	ldw	r2,-4(fp)
  81248c:	e0bff715 	stw	r2,-36(fp)
  812490:	00000206 	br	81249c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812494:	00bffb44 	movi	r2,-19
  812498:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81249c:	e0bff717 	ldw	r2,-36(fp)
  8124a0:	1004403a 	cmpge	r2,r2,zero
  8124a4:	1000091e 	bne	r2,zero,8124cc <open+0x16c>
  {
    alt_release_fd (index);  
  8124a8:	e13ff817 	ldw	r4,-32(fp)
  8124ac:	08126d00 	call	8126d0 <alt_release_fd>
    ALT_ERRNO = -status;
  8124b0:	08124ec0 	call	8124ec <alt_get_errno>
  8124b4:	e0fff717 	ldw	r3,-36(fp)
  8124b8:	00c7c83a 	sub	r3,zero,r3
  8124bc:	10c00015 	stw	r3,0(r2)
    return -1;
  8124c0:	00bfffc4 	movi	r2,-1
  8124c4:	e0bffe15 	stw	r2,-8(fp)
  8124c8:	00000206 	br	8124d4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  8124cc:	e0bff817 	ldw	r2,-32(fp)
  8124d0:	e0bffe15 	stw	r2,-8(fp)
  8124d4:	e0bffe17 	ldw	r2,-8(fp)
}
  8124d8:	e037883a 	mov	sp,fp
  8124dc:	dfc00117 	ldw	ra,4(sp)
  8124e0:	df000017 	ldw	fp,0(sp)
  8124e4:	dec00204 	addi	sp,sp,8
  8124e8:	f800283a 	ret

008124ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8124ec:	defffd04 	addi	sp,sp,-12
  8124f0:	dfc00215 	stw	ra,8(sp)
  8124f4:	df000115 	stw	fp,4(sp)
  8124f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8124fc:	00802074 	movhi	r2,129
  812500:	109b3b04 	addi	r2,r2,27884
  812504:	10800017 	ldw	r2,0(r2)
  812508:	1005003a 	cmpeq	r2,r2,zero
  81250c:	1000061e 	bne	r2,zero,812528 <alt_get_errno+0x3c>
  812510:	00802074 	movhi	r2,129
  812514:	109b3b04 	addi	r2,r2,27884
  812518:	10800017 	ldw	r2,0(r2)
  81251c:	103ee83a 	callr	r2
  812520:	e0bfff15 	stw	r2,-4(fp)
  812524:	00000306 	br	812534 <alt_get_errno+0x48>
  812528:	008020b4 	movhi	r2,130
  81252c:	10a21904 	addi	r2,r2,-30620
  812530:	e0bfff15 	stw	r2,-4(fp)
  812534:	e0bfff17 	ldw	r2,-4(fp)
}
  812538:	e037883a 	mov	sp,fp
  81253c:	dfc00117 	ldw	ra,4(sp)
  812540:	df000017 	ldw	fp,0(sp)
  812544:	dec00204 	addi	sp,sp,8
  812548:	f800283a 	ret

0081254c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81254c:	defff704 	addi	sp,sp,-36
  812550:	dfc00815 	stw	ra,32(sp)
  812554:	df000715 	stw	fp,28(sp)
  812558:	df000704 	addi	fp,sp,28
  81255c:	e13ffb15 	stw	r4,-20(fp)
  812560:	e17ffc15 	stw	r5,-16(fp)
  812564:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812568:	e0bffb17 	ldw	r2,-20(fp)
  81256c:	1004803a 	cmplt	r2,r2,zero
  812570:	1000091e 	bne	r2,zero,812598 <read+0x4c>
  812574:	e13ffb17 	ldw	r4,-20(fp)
  812578:	01400304 	movi	r5,12
  81257c:	0801fec0 	call	801fec <__mulsi3>
  812580:	1007883a 	mov	r3,r2
  812584:	00802074 	movhi	r2,129
  812588:	1096ad04 	addi	r2,r2,23220
  81258c:	1887883a 	add	r3,r3,r2
  812590:	e0ffff15 	stw	r3,-4(fp)
  812594:	00000106 	br	81259c <read+0x50>
  812598:	e03fff15 	stw	zero,-4(fp)
  81259c:	e0bfff17 	ldw	r2,-4(fp)
  8125a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8125a4:	e0bffa17 	ldw	r2,-24(fp)
  8125a8:	1005003a 	cmpeq	r2,r2,zero
  8125ac:	1000241e 	bne	r2,zero,812640 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8125b0:	e0bffa17 	ldw	r2,-24(fp)
  8125b4:	10800217 	ldw	r2,8(r2)
  8125b8:	108000cc 	andi	r2,r2,3
  8125bc:	10800060 	cmpeqi	r2,r2,1
  8125c0:	10001a1e 	bne	r2,zero,81262c <read+0xe0>
  8125c4:	e0bffa17 	ldw	r2,-24(fp)
  8125c8:	10800017 	ldw	r2,0(r2)
  8125cc:	10800517 	ldw	r2,20(r2)
  8125d0:	1005003a 	cmpeq	r2,r2,zero
  8125d4:	1000151e 	bne	r2,zero,81262c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8125d8:	e0bffa17 	ldw	r2,-24(fp)
  8125dc:	10800017 	ldw	r2,0(r2)
  8125e0:	10800517 	ldw	r2,20(r2)
  8125e4:	e17ffc17 	ldw	r5,-16(fp)
  8125e8:	e1bffd17 	ldw	r6,-12(fp)
  8125ec:	e13ffa17 	ldw	r4,-24(fp)
  8125f0:	103ee83a 	callr	r2
  8125f4:	e0bff915 	stw	r2,-28(fp)
  8125f8:	e0bff917 	ldw	r2,-28(fp)
  8125fc:	1004403a 	cmpge	r2,r2,zero
  812600:	1000071e 	bne	r2,zero,812620 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  812604:	08126700 	call	812670 <alt_get_errno>
  812608:	e0fff917 	ldw	r3,-28(fp)
  81260c:	00c7c83a 	sub	r3,zero,r3
  812610:	10c00015 	stw	r3,0(r2)
          return -1;
  812614:	00bfffc4 	movi	r2,-1
  812618:	e0bffe15 	stw	r2,-8(fp)
  81261c:	00000e06 	br	812658 <read+0x10c>
        }
        return rval;
  812620:	e0bff917 	ldw	r2,-28(fp)
  812624:	e0bffe15 	stw	r2,-8(fp)
  812628:	00000b06 	br	812658 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81262c:	08126700 	call	812670 <alt_get_errno>
  812630:	1007883a 	mov	r3,r2
  812634:	00800344 	movi	r2,13
  812638:	18800015 	stw	r2,0(r3)
  81263c:	00000406 	br	812650 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  812640:	08126700 	call	812670 <alt_get_errno>
  812644:	1007883a 	mov	r3,r2
  812648:	00801444 	movi	r2,81
  81264c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812650:	00bfffc4 	movi	r2,-1
  812654:	e0bffe15 	stw	r2,-8(fp)
  812658:	e0bffe17 	ldw	r2,-8(fp)
}
  81265c:	e037883a 	mov	sp,fp
  812660:	dfc00117 	ldw	ra,4(sp)
  812664:	df000017 	ldw	fp,0(sp)
  812668:	dec00204 	addi	sp,sp,8
  81266c:	f800283a 	ret

00812670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812670:	defffd04 	addi	sp,sp,-12
  812674:	dfc00215 	stw	ra,8(sp)
  812678:	df000115 	stw	fp,4(sp)
  81267c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812680:	00802074 	movhi	r2,129
  812684:	109b3b04 	addi	r2,r2,27884
  812688:	10800017 	ldw	r2,0(r2)
  81268c:	1005003a 	cmpeq	r2,r2,zero
  812690:	1000061e 	bne	r2,zero,8126ac <alt_get_errno+0x3c>
  812694:	00802074 	movhi	r2,129
  812698:	109b3b04 	addi	r2,r2,27884
  81269c:	10800017 	ldw	r2,0(r2)
  8126a0:	103ee83a 	callr	r2
  8126a4:	e0bfff15 	stw	r2,-4(fp)
  8126a8:	00000306 	br	8126b8 <alt_get_errno+0x48>
  8126ac:	008020b4 	movhi	r2,130
  8126b0:	10a21904 	addi	r2,r2,-30620
  8126b4:	e0bfff15 	stw	r2,-4(fp)
  8126b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8126bc:	e037883a 	mov	sp,fp
  8126c0:	dfc00117 	ldw	ra,4(sp)
  8126c4:	df000017 	ldw	fp,0(sp)
  8126c8:	dec00204 	addi	sp,sp,8
  8126cc:	f800283a 	ret

008126d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8126d0:	defffc04 	addi	sp,sp,-16
  8126d4:	dfc00315 	stw	ra,12(sp)
  8126d8:	df000215 	stw	fp,8(sp)
  8126dc:	dc000115 	stw	r16,4(sp)
  8126e0:	df000104 	addi	fp,sp,4
  8126e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8126e8:	e0bfff17 	ldw	r2,-4(fp)
  8126ec:	108000d0 	cmplti	r2,r2,3
  8126f0:	10000f1e 	bne	r2,zero,812730 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  8126f4:	e13fff17 	ldw	r4,-4(fp)
  8126f8:	04002074 	movhi	r16,129
  8126fc:	8416ad04 	addi	r16,r16,23220
  812700:	01400304 	movi	r5,12
  812704:	0801fec0 	call	801fec <__mulsi3>
  812708:	1405883a 	add	r2,r2,r16
  81270c:	10800204 	addi	r2,r2,8
  812710:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  812714:	e13fff17 	ldw	r4,-4(fp)
  812718:	04002074 	movhi	r16,129
  81271c:	8416ad04 	addi	r16,r16,23220
  812720:	01400304 	movi	r5,12
  812724:	0801fec0 	call	801fec <__mulsi3>
  812728:	1405883a 	add	r2,r2,r16
  81272c:	10000015 	stw	zero,0(r2)
  }
}
  812730:	e037883a 	mov	sp,fp
  812734:	dfc00217 	ldw	ra,8(sp)
  812738:	df000117 	ldw	fp,4(sp)
  81273c:	dc000017 	ldw	r16,0(sp)
  812740:	dec00304 	addi	sp,sp,12
  812744:	f800283a 	ret

00812748 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  812748:	defff804 	addi	sp,sp,-32
  81274c:	df000715 	stw	fp,28(sp)
  812750:	df000704 	addi	fp,sp,28
  812754:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812758:	0005303a 	rdctl	r2,status
  81275c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812760:	e0fffb17 	ldw	r3,-20(fp)
  812764:	00bfff84 	movi	r2,-2
  812768:	1884703a 	and	r2,r3,r2
  81276c:	1001703a 	wrctl	status,r2
  
  return context;
  812770:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  812774:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  812778:	d0a00d17 	ldw	r2,-32716(gp)
  81277c:	10c000c4 	addi	r3,r2,3
  812780:	00bfff04 	movi	r2,-4
  812784:	1884703a 	and	r2,r3,r2
  812788:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81278c:	d0e00d17 	ldw	r3,-32716(gp)
  812790:	e0bffe17 	ldw	r2,-8(fp)
  812794:	1887883a 	add	r3,r3,r2
  812798:	00804034 	movhi	r2,256
  81279c:	10800004 	addi	r2,r2,0
  8127a0:	10c0072e 	bgeu	r2,r3,8127c0 <sbrk+0x78>
  8127a4:	e0bffd17 	ldw	r2,-12(fp)
  8127a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8127ac:	e0bffa17 	ldw	r2,-24(fp)
  8127b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8127b4:	00bfffc4 	movi	r2,-1
  8127b8:	e0bfff15 	stw	r2,-4(fp)
  8127bc:	00000c06 	br	8127f0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8127c0:	d0a00d17 	ldw	r2,-32716(gp)
  8127c4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8127c8:	d0e00d17 	ldw	r3,-32716(gp)
  8127cc:	e0bffe17 	ldw	r2,-8(fp)
  8127d0:	1885883a 	add	r2,r3,r2
  8127d4:	d0a00d15 	stw	r2,-32716(gp)
  8127d8:	e0bffd17 	ldw	r2,-12(fp)
  8127dc:	e0bff915 	stw	r2,-28(fp)
  8127e0:	e0bff917 	ldw	r2,-28(fp)
  8127e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8127e8:	e0bffc17 	ldw	r2,-16(fp)
  8127ec:	e0bfff15 	stw	r2,-4(fp)
  8127f0:	e0bfff17 	ldw	r2,-4(fp)
} 
  8127f4:	e037883a 	mov	sp,fp
  8127f8:	df000017 	ldw	fp,0(sp)
  8127fc:	dec00104 	addi	sp,sp,4
  812800:	f800283a 	ret

00812804 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  812804:	defffb04 	addi	sp,sp,-20
  812808:	dfc00415 	stw	ra,16(sp)
  81280c:	df000315 	stw	fp,12(sp)
  812810:	df000304 	addi	fp,sp,12
  812814:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812818:	008020b4 	movhi	r2,130
  81281c:	10a22704 	addi	r2,r2,-30564
  812820:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  812824:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812828:	008020b4 	movhi	r2,130
  81282c:	10a22604 	addi	r2,r2,-30568
  812830:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  812834:	1004c03a 	cmpne	r2,r2,zero
  812838:	1000061e 	bne	r2,zero,812854 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
  81283c:	08128980 	call	812898 <alt_get_errno>
  812840:	1007883a 	mov	r3,r2
  812844:	00801604 	movi	r2,88
  812848:	18800015 	stw	r2,0(r3)
    return 0;
  81284c:	e03fff15 	stw	zero,-4(fp)
  812850:	00000b06 	br	812880 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  812854:	e0bffe17 	ldw	r2,-8(fp)
  812858:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  81285c:	e0fffe17 	ldw	r3,-8(fp)
  812860:	e0bffd17 	ldw	r2,-12(fp)
  812864:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
  812868:	e0bffe17 	ldw	r2,-8(fp)
  81286c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  812870:	e0bffe17 	ldw	r2,-8(fp)
  812874:	10000315 	stw	zero,12(r2)

  return ticks;
  812878:	e0bffd17 	ldw	r2,-12(fp)
  81287c:	e0bfff15 	stw	r2,-4(fp)
  812880:	e0bfff17 	ldw	r2,-4(fp)
}
  812884:	e037883a 	mov	sp,fp
  812888:	dfc00117 	ldw	ra,4(sp)
  81288c:	df000017 	ldw	fp,0(sp)
  812890:	dec00204 	addi	sp,sp,8
  812894:	f800283a 	ret

00812898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812898:	defffd04 	addi	sp,sp,-12
  81289c:	dfc00215 	stw	ra,8(sp)
  8128a0:	df000115 	stw	fp,4(sp)
  8128a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8128a8:	00802074 	movhi	r2,129
  8128ac:	109b3b04 	addi	r2,r2,27884
  8128b0:	10800017 	ldw	r2,0(r2)
  8128b4:	1005003a 	cmpeq	r2,r2,zero
  8128b8:	1000061e 	bne	r2,zero,8128d4 <alt_get_errno+0x3c>
  8128bc:	00802074 	movhi	r2,129
  8128c0:	109b3b04 	addi	r2,r2,27884
  8128c4:	10800017 	ldw	r2,0(r2)
  8128c8:	103ee83a 	callr	r2
  8128cc:	e0bfff15 	stw	r2,-4(fp)
  8128d0:	00000306 	br	8128e0 <alt_get_errno+0x48>
  8128d4:	008020b4 	movhi	r2,130
  8128d8:	10a21904 	addi	r2,r2,-30620
  8128dc:	e0bfff15 	stw	r2,-4(fp)
  8128e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8128e4:	e037883a 	mov	sp,fp
  8128e8:	dfc00117 	ldw	ra,4(sp)
  8128ec:	df000017 	ldw	fp,0(sp)
  8128f0:	dec00204 	addi	sp,sp,8
  8128f4:	f800283a 	ret

008128f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8128f8:	defff704 	addi	sp,sp,-36
  8128fc:	dfc00815 	stw	ra,32(sp)
  812900:	df000715 	stw	fp,28(sp)
  812904:	df000704 	addi	fp,sp,28
  812908:	e13ffb15 	stw	r4,-20(fp)
  81290c:	e17ffc15 	stw	r5,-16(fp)
  812910:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812914:	e0bffb17 	ldw	r2,-20(fp)
  812918:	1004803a 	cmplt	r2,r2,zero
  81291c:	1000091e 	bne	r2,zero,812944 <write+0x4c>
  812920:	e13ffb17 	ldw	r4,-20(fp)
  812924:	01400304 	movi	r5,12
  812928:	0801fec0 	call	801fec <__mulsi3>
  81292c:	1007883a 	mov	r3,r2
  812930:	00802074 	movhi	r2,129
  812934:	1096ad04 	addi	r2,r2,23220
  812938:	1887883a 	add	r3,r3,r2
  81293c:	e0ffff15 	stw	r3,-4(fp)
  812940:	00000106 	br	812948 <write+0x50>
  812944:	e03fff15 	stw	zero,-4(fp)
  812948:	e0bfff17 	ldw	r2,-4(fp)
  81294c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812950:	e0bffa17 	ldw	r2,-24(fp)
  812954:	1005003a 	cmpeq	r2,r2,zero
  812958:	1000241e 	bne	r2,zero,8129ec <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81295c:	e0bffa17 	ldw	r2,-24(fp)
  812960:	10800217 	ldw	r2,8(r2)
  812964:	108000cc 	andi	r2,r2,3
  812968:	1005003a 	cmpeq	r2,r2,zero
  81296c:	10001a1e 	bne	r2,zero,8129d8 <write+0xe0>
  812970:	e0bffa17 	ldw	r2,-24(fp)
  812974:	10800017 	ldw	r2,0(r2)
  812978:	10800617 	ldw	r2,24(r2)
  81297c:	1005003a 	cmpeq	r2,r2,zero
  812980:	1000151e 	bne	r2,zero,8129d8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  812984:	e0bffa17 	ldw	r2,-24(fp)
  812988:	10800017 	ldw	r2,0(r2)
  81298c:	10800617 	ldw	r2,24(r2)
  812990:	e17ffc17 	ldw	r5,-16(fp)
  812994:	e1bffd17 	ldw	r6,-12(fp)
  812998:	e13ffa17 	ldw	r4,-24(fp)
  81299c:	103ee83a 	callr	r2
  8129a0:	e0bff915 	stw	r2,-28(fp)
  8129a4:	e0bff917 	ldw	r2,-28(fp)
  8129a8:	1004403a 	cmpge	r2,r2,zero
  8129ac:	1000071e 	bne	r2,zero,8129cc <write+0xd4>
      {
        ALT_ERRNO = -rval;
  8129b0:	0812a1c0 	call	812a1c <alt_get_errno>
  8129b4:	e0fff917 	ldw	r3,-28(fp)
  8129b8:	00c7c83a 	sub	r3,zero,r3
  8129bc:	10c00015 	stw	r3,0(r2)
        return -1;
  8129c0:	00bfffc4 	movi	r2,-1
  8129c4:	e0bffe15 	stw	r2,-8(fp)
  8129c8:	00000e06 	br	812a04 <write+0x10c>
      }
      return rval;
  8129cc:	e0bff917 	ldw	r2,-28(fp)
  8129d0:	e0bffe15 	stw	r2,-8(fp)
  8129d4:	00000b06 	br	812a04 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8129d8:	0812a1c0 	call	812a1c <alt_get_errno>
  8129dc:	1007883a 	mov	r3,r2
  8129e0:	00800344 	movi	r2,13
  8129e4:	18800015 	stw	r2,0(r3)
  8129e8:	00000406 	br	8129fc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8129ec:	0812a1c0 	call	812a1c <alt_get_errno>
  8129f0:	1007883a 	mov	r3,r2
  8129f4:	00801444 	movi	r2,81
  8129f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8129fc:	00bfffc4 	movi	r2,-1
  812a00:	e0bffe15 	stw	r2,-8(fp)
  812a04:	e0bffe17 	ldw	r2,-8(fp)
}
  812a08:	e037883a 	mov	sp,fp
  812a0c:	dfc00117 	ldw	ra,4(sp)
  812a10:	df000017 	ldw	fp,0(sp)
  812a14:	dec00204 	addi	sp,sp,8
  812a18:	f800283a 	ret

00812a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812a1c:	defffd04 	addi	sp,sp,-12
  812a20:	dfc00215 	stw	ra,8(sp)
  812a24:	df000115 	stw	fp,4(sp)
  812a28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812a2c:	00802074 	movhi	r2,129
  812a30:	109b3b04 	addi	r2,r2,27884
  812a34:	10800017 	ldw	r2,0(r2)
  812a38:	1005003a 	cmpeq	r2,r2,zero
  812a3c:	1000061e 	bne	r2,zero,812a58 <alt_get_errno+0x3c>
  812a40:	00802074 	movhi	r2,129
  812a44:	109b3b04 	addi	r2,r2,27884
  812a48:	10800017 	ldw	r2,0(r2)
  812a4c:	103ee83a 	callr	r2
  812a50:	e0bfff15 	stw	r2,-4(fp)
  812a54:	00000306 	br	812a64 <alt_get_errno+0x48>
  812a58:	008020b4 	movhi	r2,130
  812a5c:	10a21904 	addi	r2,r2,-30620
  812a60:	e0bfff15 	stw	r2,-4(fp)
  812a64:	e0bfff17 	ldw	r2,-4(fp)
}
  812a68:	e037883a 	mov	sp,fp
  812a6c:	dfc00117 	ldw	ra,4(sp)
  812a70:	df000017 	ldw	fp,0(sp)
  812a74:	dec00204 	addi	sp,sp,8
  812a78:	f800283a 	ret

00812a7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812a7c:	defffd04 	addi	sp,sp,-12
  812a80:	dfc00215 	stw	ra,8(sp)
  812a84:	df000115 	stw	fp,4(sp)
  812a88:	df000104 	addi	fp,sp,4
  812a8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  812a90:	081484c0 	call	81484c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  812a94:	00800044 	movi	r2,1
  812a98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812a9c:	e037883a 	mov	sp,fp
  812aa0:	dfc00117 	ldw	ra,4(sp)
  812aa4:	df000017 	ldw	fp,0(sp)
  812aa8:	dec00204 	addi	sp,sp,8
  812aac:	f800283a 	ret

00812ab0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  812ab0:	defffe04 	addi	sp,sp,-8
  812ab4:	dfc00115 	stw	ra,4(sp)
  812ab8:	df000015 	stw	fp,0(sp)
  812abc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  812ac0:	01004474 	movhi	r4,273
  812ac4:	21040804 	addi	r4,r4,4128
  812ac8:	000b883a 	mov	r5,zero
  812acc:	01800044 	movi	r6,1
  812ad0:	01c0fa04 	movi	r7,1000
  812ad4:	08136940 	call	813694 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  812ad8:	00c020b4 	movhi	r3,130
  812adc:	18e22304 	addi	r3,r3,-30580
  812ae0:	00804474 	movhi	r2,273
  812ae4:	10840004 	addi	r2,r2,4096
  812ae8:	18800015 	stw	r2,0(r3)
  812aec:	00c020b4 	movhi	r3,130
  812af0:	18e22404 	addi	r3,r3,-30576
  812af4:	0080bef4 	movhi	r2,763
  812af8:	10bc2004 	addi	r2,r2,-3968
  812afc:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  812b00:	01002074 	movhi	r4,129
  812b04:	21171704 	addi	r4,r4,23644
  812b08:	000b883a 	mov	r5,zero
  812b0c:	01800404 	movi	r6,16
  812b10:	0812cc00 	call	812cc0 <altera_avalon_jtag_uart_init>
  812b14:	01002074 	movhi	r4,129
  812b18:	21170d04 	addi	r4,r4,23604
  812b1c:	0812b400 	call	812b40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  812b20:	01002074 	movhi	r4,129
  812b24:	211b2504 	addi	r4,r4,27796
  812b28:	08140fc0 	call	8140fc <alt_fs_reg>
}
  812b2c:	e037883a 	mov	sp,fp
  812b30:	dfc00117 	ldw	ra,4(sp)
  812b34:	df000017 	ldw	fp,0(sp)
  812b38:	dec00204 	addi	sp,sp,8
  812b3c:	f800283a 	ret

00812b40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812b40:	defffd04 	addi	sp,sp,-12
  812b44:	dfc00215 	stw	ra,8(sp)
  812b48:	df000115 	stw	fp,4(sp)
  812b4c:	df000104 	addi	fp,sp,4
  812b50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812b54:	e13fff17 	ldw	r4,-4(fp)
  812b58:	01402074 	movhi	r5,129
  812b5c:	295b3804 	addi	r5,r5,27872
  812b60:	0813e340 	call	813e34 <alt_dev_llist_insert>
}
  812b64:	e037883a 	mov	sp,fp
  812b68:	dfc00117 	ldw	ra,4(sp)
  812b6c:	df000017 	ldw	fp,0(sp)
  812b70:	dec00204 	addi	sp,sp,8
  812b74:	f800283a 	ret

00812b78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812b78:	defffa04 	addi	sp,sp,-24
  812b7c:	dfc00515 	stw	ra,20(sp)
  812b80:	df000415 	stw	fp,16(sp)
  812b84:	df000404 	addi	fp,sp,16
  812b88:	e13ffd15 	stw	r4,-12(fp)
  812b8c:	e17ffe15 	stw	r5,-8(fp)
  812b90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812b94:	e0bffd17 	ldw	r2,-12(fp)
  812b98:	10800017 	ldw	r2,0(r2)
  812b9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812ba0:	e0bffc17 	ldw	r2,-16(fp)
  812ba4:	11000a04 	addi	r4,r2,40
  812ba8:	e0bffd17 	ldw	r2,-12(fp)
  812bac:	11c00217 	ldw	r7,8(r2)
  812bb0:	e17ffe17 	ldw	r5,-8(fp)
  812bb4:	e1bfff17 	ldw	r6,-4(fp)
  812bb8:	08131c00 	call	8131c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812bbc:	e037883a 	mov	sp,fp
  812bc0:	dfc00117 	ldw	ra,4(sp)
  812bc4:	df000017 	ldw	fp,0(sp)
  812bc8:	dec00204 	addi	sp,sp,8
  812bcc:	f800283a 	ret

00812bd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812bd0:	defffa04 	addi	sp,sp,-24
  812bd4:	dfc00515 	stw	ra,20(sp)
  812bd8:	df000415 	stw	fp,16(sp)
  812bdc:	df000404 	addi	fp,sp,16
  812be0:	e13ffd15 	stw	r4,-12(fp)
  812be4:	e17ffe15 	stw	r5,-8(fp)
  812be8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812bec:	e0bffd17 	ldw	r2,-12(fp)
  812bf0:	10800017 	ldw	r2,0(r2)
  812bf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812bf8:	e0bffc17 	ldw	r2,-16(fp)
  812bfc:	11000a04 	addi	r4,r2,40
  812c00:	e0bffd17 	ldw	r2,-12(fp)
  812c04:	11c00217 	ldw	r7,8(r2)
  812c08:	e17ffe17 	ldw	r5,-8(fp)
  812c0c:	e1bfff17 	ldw	r6,-4(fp)
  812c10:	08133e40 	call	8133e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812c14:	e037883a 	mov	sp,fp
  812c18:	dfc00117 	ldw	ra,4(sp)
  812c1c:	df000017 	ldw	fp,0(sp)
  812c20:	dec00204 	addi	sp,sp,8
  812c24:	f800283a 	ret

00812c28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812c28:	defffc04 	addi	sp,sp,-16
  812c2c:	dfc00315 	stw	ra,12(sp)
  812c30:	df000215 	stw	fp,8(sp)
  812c34:	df000204 	addi	fp,sp,8
  812c38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812c3c:	e0bfff17 	ldw	r2,-4(fp)
  812c40:	10800017 	ldw	r2,0(r2)
  812c44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812c48:	e0bffe17 	ldw	r2,-8(fp)
  812c4c:	11000a04 	addi	r4,r2,40
  812c50:	e0bfff17 	ldw	r2,-4(fp)
  812c54:	11400217 	ldw	r5,8(r2)
  812c58:	08130580 	call	813058 <altera_avalon_jtag_uart_close>
}
  812c5c:	e037883a 	mov	sp,fp
  812c60:	dfc00117 	ldw	ra,4(sp)
  812c64:	df000017 	ldw	fp,0(sp)
  812c68:	dec00204 	addi	sp,sp,8
  812c6c:	f800283a 	ret

00812c70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812c70:	defffa04 	addi	sp,sp,-24
  812c74:	dfc00515 	stw	ra,20(sp)
  812c78:	df000415 	stw	fp,16(sp)
  812c7c:	df000404 	addi	fp,sp,16
  812c80:	e13ffd15 	stw	r4,-12(fp)
  812c84:	e17ffe15 	stw	r5,-8(fp)
  812c88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812c8c:	e0bffd17 	ldw	r2,-12(fp)
  812c90:	10800017 	ldw	r2,0(r2)
  812c94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812c98:	e0bffc17 	ldw	r2,-16(fp)
  812c9c:	11000a04 	addi	r4,r2,40
  812ca0:	e17ffe17 	ldw	r5,-8(fp)
  812ca4:	e1bfff17 	ldw	r6,-4(fp)
  812ca8:	08130cc0 	call	8130cc <altera_avalon_jtag_uart_ioctl>
}
  812cac:	e037883a 	mov	sp,fp
  812cb0:	dfc00117 	ldw	ra,4(sp)
  812cb4:	df000017 	ldw	fp,0(sp)
  812cb8:	dec00204 	addi	sp,sp,8
  812cbc:	f800283a 	ret

00812cc0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  812cc0:	defffa04 	addi	sp,sp,-24
  812cc4:	dfc00515 	stw	ra,20(sp)
  812cc8:	df000415 	stw	fp,16(sp)
  812ccc:	df000404 	addi	fp,sp,16
  812cd0:	e13ffd15 	stw	r4,-12(fp)
  812cd4:	e17ffe15 	stw	r5,-8(fp)
  812cd8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812cdc:	e0fffd17 	ldw	r3,-12(fp)
  812ce0:	00800044 	movi	r2,1
  812ce4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812ce8:	e0bffd17 	ldw	r2,-12(fp)
  812cec:	10800017 	ldw	r2,0(r2)
  812cf0:	11000104 	addi	r4,r2,4
  812cf4:	e0bffd17 	ldw	r2,-12(fp)
  812cf8:	10800817 	ldw	r2,32(r2)
  812cfc:	1007883a 	mov	r3,r2
  812d00:	2005883a 	mov	r2,r4
  812d04:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  812d08:	e13ffe17 	ldw	r4,-8(fp)
  812d0c:	e17fff17 	ldw	r5,-4(fp)
  812d10:	d8000015 	stw	zero,0(sp)
  812d14:	01802074 	movhi	r6,129
  812d18:	318b6004 	addi	r6,r6,11648
  812d1c:	e1fffd17 	ldw	r7,-12(fp)
  812d20:	081428c0 	call	81428c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812d24:	e0bffd17 	ldw	r2,-12(fp)
  812d28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812d2c:	e0bffd17 	ldw	r2,-12(fp)
  812d30:	11000204 	addi	r4,r2,8
  812d34:	008020b4 	movhi	r2,130
  812d38:	10a22604 	addi	r2,r2,-30568
  812d3c:	10800017 	ldw	r2,0(r2)
  812d40:	100b883a 	mov	r5,r2
  812d44:	01802074 	movhi	r6,129
  812d48:	318bea04 	addi	r6,r6,12200
  812d4c:	e1fffd17 	ldw	r7,-12(fp)
  812d50:	0813cc40 	call	813cc4 <alt_alarm_start>
  812d54:	1004403a 	cmpge	r2,r2,zero
  812d58:	1000041e 	bne	r2,zero,812d6c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812d5c:	e0fffd17 	ldw	r3,-12(fp)
  812d60:	00a00034 	movhi	r2,32768
  812d64:	10bfffc4 	addi	r2,r2,-1
  812d68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812d6c:	e037883a 	mov	sp,fp
  812d70:	dfc00117 	ldw	ra,4(sp)
  812d74:	df000017 	ldw	fp,0(sp)
  812d78:	dec00204 	addi	sp,sp,8
  812d7c:	f800283a 	ret

00812d80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  812d80:	defff804 	addi	sp,sp,-32
  812d84:	df000715 	stw	fp,28(sp)
  812d88:	df000704 	addi	fp,sp,28
  812d8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  812d90:	e0bfff17 	ldw	r2,-4(fp)
  812d94:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  812d98:	e0bffe17 	ldw	r2,-8(fp)
  812d9c:	10800017 	ldw	r2,0(r2)
  812da0:	e0bffd15 	stw	r2,-12(fp)
  812da4:	00000006 	br	812da8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812da8:	e0bffd17 	ldw	r2,-12(fp)
  812dac:	10800104 	addi	r2,r2,4
  812db0:	10800037 	ldwio	r2,0(r2)
  812db4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  812db8:	e0bffc17 	ldw	r2,-16(fp)
  812dbc:	1080c00c 	andi	r2,r2,768
  812dc0:	1005003a 	cmpeq	r2,r2,zero
  812dc4:	1000741e 	bne	r2,zero,812f98 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  812dc8:	e0bffc17 	ldw	r2,-16(fp)
  812dcc:	1080400c 	andi	r2,r2,256
  812dd0:	1005003a 	cmpeq	r2,r2,zero
  812dd4:	1000351e 	bne	r2,zero,812eac <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  812dd8:	00800074 	movhi	r2,1
  812ddc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812de0:	e0bffe17 	ldw	r2,-8(fp)
  812de4:	10800a17 	ldw	r2,40(r2)
  812de8:	10800044 	addi	r2,r2,1
  812dec:	1081ffcc 	andi	r2,r2,2047
  812df0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  812df4:	e0bffe17 	ldw	r2,-8(fp)
  812df8:	10c00b17 	ldw	r3,44(r2)
  812dfc:	e0bffa17 	ldw	r2,-24(fp)
  812e00:	18801626 	beq	r3,r2,812e5c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  812e04:	e0bffd17 	ldw	r2,-12(fp)
  812e08:	10800037 	ldwio	r2,0(r2)
  812e0c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  812e10:	e0bffb17 	ldw	r2,-20(fp)
  812e14:	10a0000c 	andi	r2,r2,32768
  812e18:	1005003a 	cmpeq	r2,r2,zero
  812e1c:	10000f1e 	bne	r2,zero,812e5c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  812e20:	e0bffe17 	ldw	r2,-8(fp)
  812e24:	10c00a17 	ldw	r3,40(r2)
  812e28:	e0bffb17 	ldw	r2,-20(fp)
  812e2c:	1009883a 	mov	r4,r2
  812e30:	e0bffe17 	ldw	r2,-8(fp)
  812e34:	1885883a 	add	r2,r3,r2
  812e38:	10800e04 	addi	r2,r2,56
  812e3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812e40:	e0bffe17 	ldw	r2,-8(fp)
  812e44:	10800a17 	ldw	r2,40(r2)
  812e48:	10800044 	addi	r2,r2,1
  812e4c:	10c1ffcc 	andi	r3,r2,2047
  812e50:	e0bffe17 	ldw	r2,-8(fp)
  812e54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  812e58:	003fe106 	br	812de0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  812e5c:	e0bffb17 	ldw	r2,-20(fp)
  812e60:	10bfffec 	andhi	r2,r2,65535
  812e64:	1005003a 	cmpeq	r2,r2,zero
  812e68:	1000101e 	bne	r2,zero,812eac <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812e6c:	e0bffe17 	ldw	r2,-8(fp)
  812e70:	10c00817 	ldw	r3,32(r2)
  812e74:	00bfff84 	movi	r2,-2
  812e78:	1886703a 	and	r3,r3,r2
  812e7c:	e0bffe17 	ldw	r2,-8(fp)
  812e80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  812e84:	e0bffd17 	ldw	r2,-12(fp)
  812e88:	11000104 	addi	r4,r2,4
  812e8c:	e0bffe17 	ldw	r2,-8(fp)
  812e90:	10800817 	ldw	r2,32(r2)
  812e94:	1007883a 	mov	r3,r2
  812e98:	2005883a 	mov	r2,r4
  812e9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812ea0:	e0bffd17 	ldw	r2,-12(fp)
  812ea4:	10800104 	addi	r2,r2,4
  812ea8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  812eac:	e0bffc17 	ldw	r2,-16(fp)
  812eb0:	1080800c 	andi	r2,r2,512
  812eb4:	1005003a 	cmpeq	r2,r2,zero
  812eb8:	103fbb1e 	bne	r2,zero,812da8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  812ebc:	e0bffc17 	ldw	r2,-16(fp)
  812ec0:	10bfffec 	andhi	r2,r2,65535
  812ec4:	1004d43a 	srli	r2,r2,16
  812ec8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  812ecc:	00001506 	br	812f24 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  812ed0:	e13ffd17 	ldw	r4,-12(fp)
  812ed4:	e0bffe17 	ldw	r2,-8(fp)
  812ed8:	10c00d17 	ldw	r3,52(r2)
  812edc:	e0bffe17 	ldw	r2,-8(fp)
  812ee0:	1885883a 	add	r2,r3,r2
  812ee4:	10820e04 	addi	r2,r2,2104
  812ee8:	10800003 	ldbu	r2,0(r2)
  812eec:	10c03fcc 	andi	r3,r2,255
  812ef0:	18c0201c 	xori	r3,r3,128
  812ef4:	18ffe004 	addi	r3,r3,-128
  812ef8:	2005883a 	mov	r2,r4
  812efc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812f00:	e0bffe17 	ldw	r2,-8(fp)
  812f04:	10800d17 	ldw	r2,52(r2)
  812f08:	10800044 	addi	r2,r2,1
  812f0c:	10c1ffcc 	andi	r3,r2,2047
  812f10:	e0bffe17 	ldw	r2,-8(fp)
  812f14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  812f18:	e0bff917 	ldw	r2,-28(fp)
  812f1c:	10bfffc4 	addi	r2,r2,-1
  812f20:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  812f24:	e0bff917 	ldw	r2,-28(fp)
  812f28:	1005003a 	cmpeq	r2,r2,zero
  812f2c:	1000051e 	bne	r2,zero,812f44 <altera_avalon_jtag_uart_irq+0x1c4>
  812f30:	e0bffe17 	ldw	r2,-8(fp)
  812f34:	10c00d17 	ldw	r3,52(r2)
  812f38:	e0bffe17 	ldw	r2,-8(fp)
  812f3c:	10800c17 	ldw	r2,48(r2)
  812f40:	18bfe31e 	bne	r3,r2,812ed0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  812f44:	e0bff917 	ldw	r2,-28(fp)
  812f48:	1005003a 	cmpeq	r2,r2,zero
  812f4c:	103f961e 	bne	r2,zero,812da8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812f50:	e0bffe17 	ldw	r2,-8(fp)
  812f54:	10c00817 	ldw	r3,32(r2)
  812f58:	00bfff44 	movi	r2,-3
  812f5c:	1886703a 	and	r3,r3,r2
  812f60:	e0bffe17 	ldw	r2,-8(fp)
  812f64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812f68:	e0bffe17 	ldw	r2,-8(fp)
  812f6c:	10800017 	ldw	r2,0(r2)
  812f70:	11000104 	addi	r4,r2,4
  812f74:	e0bffe17 	ldw	r2,-8(fp)
  812f78:	10800817 	ldw	r2,32(r2)
  812f7c:	1007883a 	mov	r3,r2
  812f80:	2005883a 	mov	r2,r4
  812f84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812f88:	e0bffd17 	ldw	r2,-12(fp)
  812f8c:	10800104 	addi	r2,r2,4
  812f90:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  812f94:	003f8406 	br	812da8 <altera_avalon_jtag_uart_irq+0x28>
}
  812f98:	e037883a 	mov	sp,fp
  812f9c:	df000017 	ldw	fp,0(sp)
  812fa0:	dec00104 	addi	sp,sp,4
  812fa4:	f800283a 	ret

00812fa8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  812fa8:	defffc04 	addi	sp,sp,-16
  812fac:	df000315 	stw	fp,12(sp)
  812fb0:	df000304 	addi	fp,sp,12
  812fb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  812fb8:	e0bfff17 	ldw	r2,-4(fp)
  812fbc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  812fc0:	e0bffe17 	ldw	r2,-8(fp)
  812fc4:	10800017 	ldw	r2,0(r2)
  812fc8:	10800104 	addi	r2,r2,4
  812fcc:	10800037 	ldwio	r2,0(r2)
  812fd0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  812fd4:	e0bffd17 	ldw	r2,-12(fp)
  812fd8:	1081000c 	andi	r2,r2,1024
  812fdc:	1005003a 	cmpeq	r2,r2,zero
  812fe0:	10000c1e 	bne	r2,zero,813014 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  812fe4:	e0bffe17 	ldw	r2,-8(fp)
  812fe8:	10800017 	ldw	r2,0(r2)
  812fec:	11000104 	addi	r4,r2,4
  812ff0:	e0bffe17 	ldw	r2,-8(fp)
  812ff4:	10800817 	ldw	r2,32(r2)
  812ff8:	10810014 	ori	r2,r2,1024
  812ffc:	1007883a 	mov	r3,r2
  813000:	2005883a 	mov	r2,r4
  813004:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813008:	e0bffe17 	ldw	r2,-8(fp)
  81300c:	10000915 	stw	zero,36(r2)
  813010:	00000a06 	br	81303c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813014:	e0bffe17 	ldw	r2,-8(fp)
  813018:	10c00917 	ldw	r3,36(r2)
  81301c:	00a00034 	movhi	r2,32768
  813020:	10bfff04 	addi	r2,r2,-4
  813024:	10c00536 	bltu	r2,r3,81303c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  813028:	e0bffe17 	ldw	r2,-8(fp)
  81302c:	10800917 	ldw	r2,36(r2)
  813030:	10c00044 	addi	r3,r2,1
  813034:	e0bffe17 	ldw	r2,-8(fp)
  813038:	10c00915 	stw	r3,36(r2)
  81303c:	008020b4 	movhi	r2,130
  813040:	10a22604 	addi	r2,r2,-30568
  813044:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813048:	e037883a 	mov	sp,fp
  81304c:	df000017 	ldw	fp,0(sp)
  813050:	dec00104 	addi	sp,sp,4
  813054:	f800283a 	ret

00813058 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813058:	defffc04 	addi	sp,sp,-16
  81305c:	df000315 	stw	fp,12(sp)
  813060:	df000304 	addi	fp,sp,12
  813064:	e13ffd15 	stw	r4,-12(fp)
  813068:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81306c:	00000706 	br	81308c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813070:	e0bffe17 	ldw	r2,-8(fp)
  813074:	1090000c 	andi	r2,r2,16384
  813078:	1005003a 	cmpeq	r2,r2,zero
  81307c:	1000031e 	bne	r2,zero,81308c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813080:	00bffd44 	movi	r2,-11
  813084:	e0bfff15 	stw	r2,-4(fp)
  813088:	00000b06 	br	8130b8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81308c:	e0bffd17 	ldw	r2,-12(fp)
  813090:	10c00d17 	ldw	r3,52(r2)
  813094:	e0bffd17 	ldw	r2,-12(fp)
  813098:	10800c17 	ldw	r2,48(r2)
  81309c:	18800526 	beq	r3,r2,8130b4 <altera_avalon_jtag_uart_close+0x5c>
  8130a0:	e0bffd17 	ldw	r2,-12(fp)
  8130a4:	10c00917 	ldw	r3,36(r2)
  8130a8:	e0bffd17 	ldw	r2,-12(fp)
  8130ac:	10800117 	ldw	r2,4(r2)
  8130b0:	18bfef36 	bltu	r3,r2,813070 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8130b4:	e03fff15 	stw	zero,-4(fp)
  8130b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8130bc:	e037883a 	mov	sp,fp
  8130c0:	df000017 	ldw	fp,0(sp)
  8130c4:	dec00104 	addi	sp,sp,4
  8130c8:	f800283a 	ret

008130cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8130cc:	defff804 	addi	sp,sp,-32
  8130d0:	df000715 	stw	fp,28(sp)
  8130d4:	df000704 	addi	fp,sp,28
  8130d8:	e13ffb15 	stw	r4,-20(fp)
  8130dc:	e17ffc15 	stw	r5,-16(fp)
  8130e0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8130e4:	00bff9c4 	movi	r2,-25
  8130e8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8130ec:	e0bffc17 	ldw	r2,-16(fp)
  8130f0:	e0bfff15 	stw	r2,-4(fp)
  8130f4:	e0ffff17 	ldw	r3,-4(fp)
  8130f8:	189a8060 	cmpeqi	r2,r3,27137
  8130fc:	1000041e 	bne	r2,zero,813110 <altera_avalon_jtag_uart_ioctl+0x44>
  813100:	e0ffff17 	ldw	r3,-4(fp)
  813104:	189a80a0 	cmpeqi	r2,r3,27138
  813108:	10001b1e 	bne	r2,zero,813178 <altera_avalon_jtag_uart_ioctl+0xac>
  81310c:	00002706 	br	8131ac <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813110:	e0bffb17 	ldw	r2,-20(fp)
  813114:	10c00117 	ldw	r3,4(r2)
  813118:	00a00034 	movhi	r2,32768
  81311c:	10bfffc4 	addi	r2,r2,-1
  813120:	18802226 	beq	r3,r2,8131ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813124:	e0bffd17 	ldw	r2,-12(fp)
  813128:	10800017 	ldw	r2,0(r2)
  81312c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813130:	e0bff917 	ldw	r2,-28(fp)
  813134:	10800090 	cmplti	r2,r2,2
  813138:	1000071e 	bne	r2,zero,813158 <altera_avalon_jtag_uart_ioctl+0x8c>
  81313c:	e0fff917 	ldw	r3,-28(fp)
  813140:	00a00034 	movhi	r2,32768
  813144:	10bfffc4 	addi	r2,r2,-1
  813148:	18800326 	beq	r3,r2,813158 <altera_avalon_jtag_uart_ioctl+0x8c>
  81314c:	e0bff917 	ldw	r2,-28(fp)
  813150:	e0bffe15 	stw	r2,-8(fp)
  813154:	00000306 	br	813164 <altera_avalon_jtag_uart_ioctl+0x98>
  813158:	00e00034 	movhi	r3,32768
  81315c:	18ffff84 	addi	r3,r3,-2
  813160:	e0fffe15 	stw	r3,-8(fp)
  813164:	e0bffb17 	ldw	r2,-20(fp)
  813168:	e0fffe17 	ldw	r3,-8(fp)
  81316c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813170:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813174:	00000d06 	br	8131ac <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813178:	e0bffb17 	ldw	r2,-20(fp)
  81317c:	10c00117 	ldw	r3,4(r2)
  813180:	00a00034 	movhi	r2,32768
  813184:	10bfffc4 	addi	r2,r2,-1
  813188:	18800826 	beq	r3,r2,8131ac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81318c:	e13ffd17 	ldw	r4,-12(fp)
  813190:	e0bffb17 	ldw	r2,-20(fp)
  813194:	10c00917 	ldw	r3,36(r2)
  813198:	e0bffb17 	ldw	r2,-20(fp)
  81319c:	10800117 	ldw	r2,4(r2)
  8131a0:	1885803a 	cmpltu	r2,r3,r2
  8131a4:	20800015 	stw	r2,0(r4)
      rc = 0;
  8131a8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8131ac:	e0bffa17 	ldw	r2,-24(fp)
}
  8131b0:	e037883a 	mov	sp,fp
  8131b4:	df000017 	ldw	fp,0(sp)
  8131b8:	dec00104 	addi	sp,sp,4
  8131bc:	f800283a 	ret

008131c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8131c0:	defff204 	addi	sp,sp,-56
  8131c4:	dfc00d15 	stw	ra,52(sp)
  8131c8:	df000c15 	stw	fp,48(sp)
  8131cc:	df000c04 	addi	fp,sp,48
  8131d0:	e13ffb15 	stw	r4,-20(fp)
  8131d4:	e17ffc15 	stw	r5,-16(fp)
  8131d8:	e1bffd15 	stw	r6,-12(fp)
  8131dc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8131e0:	e0bffc17 	ldw	r2,-16(fp)
  8131e4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8131e8:	00004806 	br	81330c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8131ec:	e0bffb17 	ldw	r2,-20(fp)
  8131f0:	10800a17 	ldw	r2,40(r2)
  8131f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8131f8:	e0bffb17 	ldw	r2,-20(fp)
  8131fc:	10800b17 	ldw	r2,44(r2)
  813200:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  813204:	e0fff717 	ldw	r3,-36(fp)
  813208:	e0bff617 	ldw	r2,-40(fp)
  81320c:	18800536 	bltu	r3,r2,813224 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  813210:	e0bff717 	ldw	r2,-36(fp)
  813214:	e0fff617 	ldw	r3,-40(fp)
  813218:	10c5c83a 	sub	r2,r2,r3
  81321c:	e0bff815 	stw	r2,-32(fp)
  813220:	00000406 	br	813234 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813224:	00820004 	movi	r2,2048
  813228:	e0fff617 	ldw	r3,-40(fp)
  81322c:	10c5c83a 	sub	r2,r2,r3
  813230:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813234:	e0bff817 	ldw	r2,-32(fp)
  813238:	1005003a 	cmpeq	r2,r2,zero
  81323c:	10001f1e 	bne	r2,zero,8132bc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  813240:	e0fffd17 	ldw	r3,-12(fp)
  813244:	e0bff817 	ldw	r2,-32(fp)
  813248:	1880022e 	bgeu	r3,r2,813254 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  81324c:	e0bffd17 	ldw	r2,-12(fp)
  813250:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813254:	e0bffb17 	ldw	r2,-20(fp)
  813258:	10c00e04 	addi	r3,r2,56
  81325c:	e0bff617 	ldw	r2,-40(fp)
  813260:	1887883a 	add	r3,r3,r2
  813264:	e0bffa17 	ldw	r2,-24(fp)
  813268:	1009883a 	mov	r4,r2
  81326c:	180b883a 	mov	r5,r3
  813270:	e1bff817 	ldw	r6,-32(fp)
  813274:	08048c40 	call	8048c4 <memcpy>
      ptr   += n;
  813278:	e0fff817 	ldw	r3,-32(fp)
  81327c:	e0bffa17 	ldw	r2,-24(fp)
  813280:	10c5883a 	add	r2,r2,r3
  813284:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  813288:	e0fffd17 	ldw	r3,-12(fp)
  81328c:	e0bff817 	ldw	r2,-32(fp)
  813290:	1885c83a 	sub	r2,r3,r2
  813294:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813298:	e0fff617 	ldw	r3,-40(fp)
  81329c:	e0bff817 	ldw	r2,-32(fp)
  8132a0:	1885883a 	add	r2,r3,r2
  8132a4:	10c1ffcc 	andi	r3,r2,2047
  8132a8:	e0bffb17 	ldw	r2,-20(fp)
  8132ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8132b0:	e0bffd17 	ldw	r2,-12(fp)
  8132b4:	10800048 	cmpgei	r2,r2,1
  8132b8:	103fcc1e 	bne	r2,zero,8131ec <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8132bc:	e0fffa17 	ldw	r3,-24(fp)
  8132c0:	e0bffc17 	ldw	r2,-16(fp)
  8132c4:	1880141e 	bne	r3,r2,813318 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8132c8:	e0bffe17 	ldw	r2,-8(fp)
  8132cc:	1090000c 	andi	r2,r2,16384
  8132d0:	1004c03a 	cmpne	r2,r2,zero
  8132d4:	1000101e 	bne	r2,zero,813318 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8132d8:	e0bffb17 	ldw	r2,-20(fp)
  8132dc:	10c00a17 	ldw	r3,40(r2)
  8132e0:	e0bff717 	ldw	r2,-36(fp)
  8132e4:	1880051e 	bne	r3,r2,8132fc <altera_avalon_jtag_uart_read+0x13c>
  8132e8:	e0bffb17 	ldw	r2,-20(fp)
  8132ec:	10c00917 	ldw	r3,36(r2)
  8132f0:	e0bffb17 	ldw	r2,-20(fp)
  8132f4:	10800117 	ldw	r2,4(r2)
  8132f8:	18bff736 	bltu	r3,r2,8132d8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8132fc:	e0bffb17 	ldw	r2,-20(fp)
  813300:	10c00a17 	ldw	r3,40(r2)
  813304:	e0bff717 	ldw	r2,-36(fp)
  813308:	18800326 	beq	r3,r2,813318 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81330c:	e0bffd17 	ldw	r2,-12(fp)
  813310:	10800048 	cmpgei	r2,r2,1
  813314:	103fb51e 	bne	r2,zero,8131ec <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  813318:	e0fffa17 	ldw	r3,-24(fp)
  81331c:	e0bffc17 	ldw	r2,-16(fp)
  813320:	18801926 	beq	r3,r2,813388 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813324:	0005303a 	rdctl	r2,status
  813328:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81332c:	e0fff517 	ldw	r3,-44(fp)
  813330:	00bfff84 	movi	r2,-2
  813334:	1884703a 	and	r2,r3,r2
  813338:	1001703a 	wrctl	status,r2
  
  return context;
  81333c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  813340:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813344:	e0bffb17 	ldw	r2,-20(fp)
  813348:	10800817 	ldw	r2,32(r2)
  81334c:	10c00054 	ori	r3,r2,1
  813350:	e0bffb17 	ldw	r2,-20(fp)
  813354:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813358:	e0bffb17 	ldw	r2,-20(fp)
  81335c:	10800017 	ldw	r2,0(r2)
  813360:	11000104 	addi	r4,r2,4
  813364:	e0bffb17 	ldw	r2,-20(fp)
  813368:	10800817 	ldw	r2,32(r2)
  81336c:	1007883a 	mov	r3,r2
  813370:	2005883a 	mov	r2,r4
  813374:	10c00035 	stwio	r3,0(r2)
  813378:	e0bff917 	ldw	r2,-28(fp)
  81337c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813380:	e0bff417 	ldw	r2,-48(fp)
  813384:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813388:	e0fffa17 	ldw	r3,-24(fp)
  81338c:	e0bffc17 	ldw	r2,-16(fp)
  813390:	18800526 	beq	r3,r2,8133a8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  813394:	e0fffa17 	ldw	r3,-24(fp)
  813398:	e0bffc17 	ldw	r2,-16(fp)
  81339c:	1887c83a 	sub	r3,r3,r2
  8133a0:	e0ffff15 	stw	r3,-4(fp)
  8133a4:	00000906 	br	8133cc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8133a8:	e0bffe17 	ldw	r2,-8(fp)
  8133ac:	1090000c 	andi	r2,r2,16384
  8133b0:	1005003a 	cmpeq	r2,r2,zero
  8133b4:	1000031e 	bne	r2,zero,8133c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8133b8:	00bffd44 	movi	r2,-11
  8133bc:	e0bfff15 	stw	r2,-4(fp)
  8133c0:	00000206 	br	8133cc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8133c4:	00bffec4 	movi	r2,-5
  8133c8:	e0bfff15 	stw	r2,-4(fp)
  8133cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8133d0:	e037883a 	mov	sp,fp
  8133d4:	dfc00117 	ldw	ra,4(sp)
  8133d8:	df000017 	ldw	fp,0(sp)
  8133dc:	dec00204 	addi	sp,sp,8
  8133e0:	f800283a 	ret

008133e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8133e4:	defff204 	addi	sp,sp,-56
  8133e8:	dfc00d15 	stw	ra,52(sp)
  8133ec:	df000c15 	stw	fp,48(sp)
  8133f0:	df000c04 	addi	fp,sp,48
  8133f4:	e13ffb15 	stw	r4,-20(fp)
  8133f8:	e17ffc15 	stw	r5,-16(fp)
  8133fc:	e1bffd15 	stw	r6,-12(fp)
  813400:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813404:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  813408:	e0bffc17 	ldw	r2,-16(fp)
  81340c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813410:	00003a06 	br	8134fc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813414:	e0bffb17 	ldw	r2,-20(fp)
  813418:	10800c17 	ldw	r2,48(r2)
  81341c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  813420:	e0bffb17 	ldw	r2,-20(fp)
  813424:	10800d17 	ldw	r2,52(r2)
  813428:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  81342c:	e0fffa17 	ldw	r3,-24(fp)
  813430:	e0bff917 	ldw	r2,-28(fp)
  813434:	1880062e 	bgeu	r3,r2,813450 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  813438:	e0fff917 	ldw	r3,-28(fp)
  81343c:	e0bffa17 	ldw	r2,-24(fp)
  813440:	1885c83a 	sub	r2,r3,r2
  813444:	10bfffc4 	addi	r2,r2,-1
  813448:	e0bff815 	stw	r2,-32(fp)
  81344c:	00000c06 	br	813480 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  813450:	e0bff917 	ldw	r2,-28(fp)
  813454:	1005003a 	cmpeq	r2,r2,zero
  813458:	1000051e 	bne	r2,zero,813470 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81345c:	00820004 	movi	r2,2048
  813460:	e0fffa17 	ldw	r3,-24(fp)
  813464:	10c5c83a 	sub	r2,r2,r3
  813468:	e0bff815 	stw	r2,-32(fp)
  81346c:	00000406 	br	813480 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813470:	0081ffc4 	movi	r2,2047
  813474:	e0fffa17 	ldw	r3,-24(fp)
  813478:	10c5c83a 	sub	r2,r2,r3
  81347c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813480:	e0bff817 	ldw	r2,-32(fp)
  813484:	1005003a 	cmpeq	r2,r2,zero
  813488:	10001f1e 	bne	r2,zero,813508 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81348c:	e0fffd17 	ldw	r3,-12(fp)
  813490:	e0bff817 	ldw	r2,-32(fp)
  813494:	1880022e 	bgeu	r3,r2,8134a0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  813498:	e0bffd17 	ldw	r2,-12(fp)
  81349c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8134a0:	e0bffb17 	ldw	r2,-20(fp)
  8134a4:	10c20e04 	addi	r3,r2,2104
  8134a8:	e0bffa17 	ldw	r2,-24(fp)
  8134ac:	1885883a 	add	r2,r3,r2
  8134b0:	e0fffc17 	ldw	r3,-16(fp)
  8134b4:	1009883a 	mov	r4,r2
  8134b8:	180b883a 	mov	r5,r3
  8134bc:	e1bff817 	ldw	r6,-32(fp)
  8134c0:	08048c40 	call	8048c4 <memcpy>
      ptr   += n;
  8134c4:	e0fff817 	ldw	r3,-32(fp)
  8134c8:	e0bffc17 	ldw	r2,-16(fp)
  8134cc:	10c5883a 	add	r2,r2,r3
  8134d0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8134d4:	e0fffd17 	ldw	r3,-12(fp)
  8134d8:	e0bff817 	ldw	r2,-32(fp)
  8134dc:	1885c83a 	sub	r2,r3,r2
  8134e0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8134e4:	e0fffa17 	ldw	r3,-24(fp)
  8134e8:	e0bff817 	ldw	r2,-32(fp)
  8134ec:	1885883a 	add	r2,r3,r2
  8134f0:	10c1ffcc 	andi	r3,r2,2047
  8134f4:	e0bffb17 	ldw	r2,-20(fp)
  8134f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8134fc:	e0bffd17 	ldw	r2,-12(fp)
  813500:	10800048 	cmpgei	r2,r2,1
  813504:	103fc31e 	bne	r2,zero,813414 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813508:	0005303a 	rdctl	r2,status
  81350c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813510:	e0fff517 	ldw	r3,-44(fp)
  813514:	00bfff84 	movi	r2,-2
  813518:	1884703a 	and	r2,r3,r2
  81351c:	1001703a 	wrctl	status,r2
  
  return context;
  813520:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813524:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813528:	e0bffb17 	ldw	r2,-20(fp)
  81352c:	10800817 	ldw	r2,32(r2)
  813530:	10c00094 	ori	r3,r2,2
  813534:	e0bffb17 	ldw	r2,-20(fp)
  813538:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81353c:	e0bffb17 	ldw	r2,-20(fp)
  813540:	10800017 	ldw	r2,0(r2)
  813544:	11000104 	addi	r4,r2,4
  813548:	e0bffb17 	ldw	r2,-20(fp)
  81354c:	10800817 	ldw	r2,32(r2)
  813550:	1007883a 	mov	r3,r2
  813554:	2005883a 	mov	r2,r4
  813558:	10c00035 	stwio	r3,0(r2)
  81355c:	e0bff717 	ldw	r2,-36(fp)
  813560:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813564:	e0bff417 	ldw	r2,-48(fp)
  813568:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81356c:	e0bffd17 	ldw	r2,-12(fp)
  813570:	10800050 	cmplti	r2,r2,1
  813574:	1000111e 	bne	r2,zero,8135bc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  813578:	e0bffe17 	ldw	r2,-8(fp)
  81357c:	1090000c 	andi	r2,r2,16384
  813580:	1004c03a 	cmpne	r2,r2,zero
  813584:	1000101e 	bne	r2,zero,8135c8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813588:	e0bffb17 	ldw	r2,-20(fp)
  81358c:	10c00d17 	ldw	r3,52(r2)
  813590:	e0bff917 	ldw	r2,-28(fp)
  813594:	1880051e 	bne	r3,r2,8135ac <altera_avalon_jtag_uart_write+0x1c8>
  813598:	e0bffb17 	ldw	r2,-20(fp)
  81359c:	10c00917 	ldw	r3,36(r2)
  8135a0:	e0bffb17 	ldw	r2,-20(fp)
  8135a4:	10800117 	ldw	r2,4(r2)
  8135a8:	18bff736 	bltu	r3,r2,813588 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8135ac:	e0bffb17 	ldw	r2,-20(fp)
  8135b0:	10c00d17 	ldw	r3,52(r2)
  8135b4:	e0bff917 	ldw	r2,-28(fp)
  8135b8:	18800326 	beq	r3,r2,8135c8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  8135bc:	e0bffd17 	ldw	r2,-12(fp)
  8135c0:	10800048 	cmpgei	r2,r2,1
  8135c4:	103fcd1e 	bne	r2,zero,8134fc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8135c8:	e0fffc17 	ldw	r3,-16(fp)
  8135cc:	e0bff617 	ldw	r2,-40(fp)
  8135d0:	18800526 	beq	r3,r2,8135e8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8135d4:	e0fffc17 	ldw	r3,-16(fp)
  8135d8:	e0bff617 	ldw	r2,-40(fp)
  8135dc:	1887c83a 	sub	r3,r3,r2
  8135e0:	e0ffff15 	stw	r3,-4(fp)
  8135e4:	00000906 	br	81360c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8135e8:	e0bffe17 	ldw	r2,-8(fp)
  8135ec:	1090000c 	andi	r2,r2,16384
  8135f0:	1005003a 	cmpeq	r2,r2,zero
  8135f4:	1000031e 	bne	r2,zero,813604 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8135f8:	00bffd44 	movi	r2,-11
  8135fc:	e0bfff15 	stw	r2,-4(fp)
  813600:	00000206 	br	81360c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  813604:	00bffec4 	movi	r2,-5
  813608:	e0bfff15 	stw	r2,-4(fp)
  81360c:	e0bfff17 	ldw	r2,-4(fp)
}
  813610:	e037883a 	mov	sp,fp
  813614:	dfc00117 	ldw	ra,4(sp)
  813618:	df000017 	ldw	fp,0(sp)
  81361c:	dec00204 	addi	sp,sp,8
  813620:	f800283a 	ret

00813624 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813624:	defffa04 	addi	sp,sp,-24
  813628:	dfc00515 	stw	ra,20(sp)
  81362c:	df000415 	stw	fp,16(sp)
  813630:	df000404 	addi	fp,sp,16
  813634:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813638:	e0bfff17 	ldw	r2,-4(fp)
  81363c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813640:	e0bfff17 	ldw	r2,-4(fp)
  813644:	10800104 	addi	r2,r2,4
  813648:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81364c:	0005303a 	rdctl	r2,status
  813650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813654:	e0fffd17 	ldw	r3,-12(fp)
  813658:	00bfff84 	movi	r2,-2
  81365c:	1884703a 	and	r2,r3,r2
  813660:	1001703a 	wrctl	status,r2
  
  return context;
  813664:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813668:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81366c:	08147400 	call	814740 <alt_tick>
  813670:	e0bffe17 	ldw	r2,-8(fp)
  813674:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813678:	e0bffc17 	ldw	r2,-16(fp)
  81367c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813680:	e037883a 	mov	sp,fp
  813684:	dfc00117 	ldw	ra,4(sp)
  813688:	df000017 	ldw	fp,0(sp)
  81368c:	dec00204 	addi	sp,sp,8
  813690:	f800283a 	ret

00813694 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813694:	defff804 	addi	sp,sp,-32
  813698:	dfc00715 	stw	ra,28(sp)
  81369c:	df000615 	stw	fp,24(sp)
  8136a0:	df000604 	addi	fp,sp,24
  8136a4:	e13ffc15 	stw	r4,-16(fp)
  8136a8:	e17ffd15 	stw	r5,-12(fp)
  8136ac:	e1bffe15 	stw	r6,-8(fp)
  8136b0:	e1ffff15 	stw	r7,-4(fp)
  8136b4:	e0bfff17 	ldw	r2,-4(fp)
  8136b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8136bc:	008020b4 	movhi	r2,130
  8136c0:	10a22604 	addi	r2,r2,-30568
  8136c4:	10800017 	ldw	r2,0(r2)
  8136c8:	1004c03a 	cmpne	r2,r2,zero
  8136cc:	1000041e 	bne	r2,zero,8136e0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8136d0:	00c020b4 	movhi	r3,130
  8136d4:	18e22604 	addi	r3,r3,-30568
  8136d8:	e0bffb17 	ldw	r2,-20(fp)
  8136dc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8136e0:	e0bffc17 	ldw	r2,-16(fp)
  8136e4:	10800104 	addi	r2,r2,4
  8136e8:	1007883a 	mov	r3,r2
  8136ec:	008001c4 	movi	r2,7
  8136f0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8136f4:	d8000015 	stw	zero,0(sp)
  8136f8:	e13ffd17 	ldw	r4,-12(fp)
  8136fc:	e17ffe17 	ldw	r5,-8(fp)
  813700:	01802074 	movhi	r6,129
  813704:	318d8904 	addi	r6,r6,13860
  813708:	e1fffc17 	ldw	r7,-16(fp)
  81370c:	081428c0 	call	81428c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813710:	e037883a 	mov	sp,fp
  813714:	dfc00117 	ldw	ra,4(sp)
  813718:	df000017 	ldw	fp,0(sp)
  81371c:	dec00204 	addi	sp,sp,8
  813720:	f800283a 	ret

00813724 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  813724:	deffee04 	addi	sp,sp,-72
  813728:	df001115 	stw	fp,68(sp)
  81372c:	df001104 	addi	fp,sp,68
  813730:	e13ffc15 	stw	r4,-16(fp)
  813734:	e17ffd15 	stw	r5,-12(fp)
  813738:	e1bffe15 	stw	r6,-8(fp)
  81373c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  813740:	e0bffc17 	ldw	r2,-16(fp)
  813744:	10800017 	ldw	r2,0(r2)
  813748:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  81374c:	e0bffb17 	ldw	r2,-20(fp)
  813750:	10800217 	ldw	r2,8(r2)
  813754:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  813758:	e0bff117 	ldw	r2,-60(fp)
  81375c:	10bfffc4 	addi	r2,r2,-1
  813760:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
  813764:	e0bff217 	ldw	r2,-56(fp)
  813768:	10800044 	addi	r2,r2,1
  81376c:	e0bff215 	stw	r2,-56(fp)
  813770:	e0bff217 	ldw	r2,-56(fp)
  813774:	10800003 	ldbu	r2,0(r2)
  813778:	10803fcc 	andi	r2,r2,255
  81377c:	1080201c 	xori	r2,r2,128
  813780:	10bfe004 	addi	r2,r2,-128
  813784:	1004c03a 	cmpne	r2,r2,zero
  813788:	103ff61e 	bne	r2,zero,813764 <alt_hostfs_open+0x40>
    ;

  return ptr - string;
  81378c:	e0fff217 	ldw	r3,-56(fp)
  813790:	e0bff117 	ldw	r2,-60(fp)
  813794:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  813798:	1007883a 	mov	r3,r2
  81379c:	e0bffd17 	ldw	r2,-12(fp)
  8137a0:	1885883a 	add	r2,r3,r2
  8137a4:	10800044 	addi	r2,r2,1
  8137a8:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  8137ac:	d0a00e04 	addi	r2,gp,-32712
  8137b0:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
  8137b4:	e0bffd17 	ldw	r2,-12(fp)
  8137b8:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
  8137bc:	e0bffe17 	ldw	r2,-8(fp)
  8137c0:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
  8137c4:	e0bfff17 	ldw	r2,-4(fp)
  8137c8:	e0bff415 	stw	r2,-48(fp)
  8137cc:	e0bffd17 	ldw	r2,-12(fp)
  8137d0:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  8137d4:	e0bfef17 	ldw	r2,-68(fp)
  8137d8:	10bfffc4 	addi	r2,r2,-1
  8137dc:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
  8137e0:	e0bff017 	ldw	r2,-64(fp)
  8137e4:	10800044 	addi	r2,r2,1
  8137e8:	e0bff015 	stw	r2,-64(fp)
  8137ec:	e0bff017 	ldw	r2,-64(fp)
  8137f0:	10800003 	ldbu	r2,0(r2)
  8137f4:	10803fcc 	andi	r2,r2,255
  8137f8:	1080201c 	xori	r2,r2,128
  8137fc:	10bfe004 	addi	r2,r2,-128
  813800:	1004c03a 	cmpne	r2,r2,zero
  813804:	103ff61e 	bne	r2,zero,8137e0 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
  813808:	e0fff017 	ldw	r3,-64(fp)
  81380c:	e0bfef17 	ldw	r2,-68(fp)
  813810:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  813814:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
  813818:	e13ff617 	ldw	r4,-40(fp)
  81381c:	e17ff517 	ldw	r5,-44(fp)
  813820:	e1bff417 	ldw	r6,-48(fp)
  813824:	e1fff317 	ldw	r7,-52(fp)
  813828:	e0fff717 	ldw	r3,-36(fp)
  81382c:	003da07a 	break	1
  813830:	e0bff815 	stw	r2,-32(fp)
  813834:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
  813838:	e0bff817 	ldw	r2,-32(fp)
  81383c:	e0bff915 	stw	r2,-28(fp)
  error = r3;
  813840:	e0bff717 	ldw	r2,-36(fp)
  813844:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
  813848:	e0bffa17 	ldw	r2,-24(fp)
  81384c:	1004c03a 	cmpne	r2,r2,zero
  813850:	1000031e 	bne	r2,zero,813860 <alt_hostfs_open+0x13c>
    fd->priv = handle;
  813854:	e0fff917 	ldw	r3,-28(fp)
  813858:	e0bffc17 	ldw	r2,-16(fp)
  81385c:	10c00115 	stw	r3,4(r2)

  return -error;
  813860:	e0bffa17 	ldw	r2,-24(fp)
  813864:	0085c83a 	sub	r2,zero,r2
}
  813868:	e037883a 	mov	sp,fp
  81386c:	df000017 	ldw	fp,0(sp)
  813870:	dec00104 	addi	sp,sp,4
  813874:	f800283a 	ret

00813878 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  813878:	defffb04 	addi	sp,sp,-20
  81387c:	df000415 	stw	fp,16(sp)
  813880:	df000404 	addi	fp,sp,16
  813884:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
  813888:	d0a01104 	addi	r2,gp,-32700
  81388c:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
  813890:	e0bfff17 	ldw	r2,-4(fp)
  813894:	10800117 	ldw	r2,4(r2)
  813898:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
  81389c:	e13ffc17 	ldw	r4,-16(fp)
  8138a0:	e0fffd17 	ldw	r3,-12(fp)
  8138a4:	003da07a 	break	1
  8138a8:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
  8138ac:	e0bffd17 	ldw	r2,-12(fp)
  8138b0:	e0bffe15 	stw	r2,-8(fp)

  return -error;
  8138b4:	e0bffe17 	ldw	r2,-8(fp)
  8138b8:	0085c83a 	sub	r2,zero,r2
}
  8138bc:	e037883a 	mov	sp,fp
  8138c0:	df000017 	ldw	fp,0(sp)
  8138c4:	dec00104 	addi	sp,sp,4
  8138c8:	f800283a 	ret

008138cc <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  8138cc:	defff404 	addi	sp,sp,-48
  8138d0:	df000b15 	stw	fp,44(sp)
  8138d4:	df000b04 	addi	fp,sp,44
  8138d8:	e13ffc15 	stw	r4,-16(fp)
  8138dc:	e17ffd15 	stw	r5,-12(fp)
  8138e0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  8138e4:	d0a01404 	addi	r2,gp,-32688
  8138e8:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  8138ec:	e0bffc17 	ldw	r2,-16(fp)
  8138f0:	10800117 	ldw	r2,4(r2)
  8138f4:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  8138f8:	e0bffd17 	ldw	r2,-12(fp)
  8138fc:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813900:	e0bffe17 	ldw	r2,-8(fp)
  813904:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813908:	e13ff717 	ldw	r4,-36(fp)
  81390c:	e17ff617 	ldw	r5,-40(fp)
  813910:	e1bff517 	ldw	r6,-44(fp)
  813914:	e0fff817 	ldw	r3,-32(fp)
  813918:	003da07a 	break	1
  81391c:	e0bff915 	stw	r2,-28(fp)
  813920:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813924:	e0bff917 	ldw	r2,-28(fp)
  813928:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  81392c:	e0bff817 	ldw	r2,-32(fp)
  813930:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813934:	e0bffb17 	ldw	r2,-20(fp)
  813938:	1005003a 	cmpeq	r2,r2,zero
  81393c:	1000041e 	bne	r2,zero,813950 <alt_hostfs_read+0x84>
  813940:	e0bffb17 	ldw	r2,-20(fp)
  813944:	0085c83a 	sub	r2,zero,r2
  813948:	e0bfff15 	stw	r2,-4(fp)
  81394c:	00000206 	br	813958 <alt_hostfs_read+0x8c>
  813950:	e0bffa17 	ldw	r2,-24(fp)
  813954:	e0bfff15 	stw	r2,-4(fp)
  813958:	e0bfff17 	ldw	r2,-4(fp)
}
  81395c:	e037883a 	mov	sp,fp
  813960:	df000017 	ldw	fp,0(sp)
  813964:	dec00104 	addi	sp,sp,4
  813968:	f800283a 	ret

0081396c <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  81396c:	defff404 	addi	sp,sp,-48
  813970:	df000b15 	stw	fp,44(sp)
  813974:	df000b04 	addi	fp,sp,44
  813978:	e13ffc15 	stw	r4,-16(fp)
  81397c:	e17ffd15 	stw	r5,-12(fp)
  813980:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813984:	d0a01704 	addi	r2,gp,-32676
  813988:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  81398c:	e0bffc17 	ldw	r2,-16(fp)
  813990:	10800117 	ldw	r2,4(r2)
  813994:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813998:	e0bffd17 	ldw	r2,-12(fp)
  81399c:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  8139a0:	e0bffe17 	ldw	r2,-8(fp)
  8139a4:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  8139a8:	e13ff717 	ldw	r4,-36(fp)
  8139ac:	e17ff617 	ldw	r5,-40(fp)
  8139b0:	e1bff517 	ldw	r6,-44(fp)
  8139b4:	e0fff817 	ldw	r3,-32(fp)
  8139b8:	003da07a 	break	1
  8139bc:	e0bff915 	stw	r2,-28(fp)
  8139c0:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  8139c4:	e0bff917 	ldw	r2,-28(fp)
  8139c8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  8139cc:	e0bff817 	ldw	r2,-32(fp)
  8139d0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  8139d4:	e0bffb17 	ldw	r2,-20(fp)
  8139d8:	1005003a 	cmpeq	r2,r2,zero
  8139dc:	1000041e 	bne	r2,zero,8139f0 <alt_hostfs_write+0x84>
  8139e0:	e0bffb17 	ldw	r2,-20(fp)
  8139e4:	0085c83a 	sub	r2,zero,r2
  8139e8:	e0bfff15 	stw	r2,-4(fp)
  8139ec:	00000206 	br	8139f8 <alt_hostfs_write+0x8c>
  8139f0:	e0bffa17 	ldw	r2,-24(fp)
  8139f4:	e0bfff15 	stw	r2,-4(fp)
  8139f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8139fc:	e037883a 	mov	sp,fp
  813a00:	df000017 	ldw	fp,0(sp)
  813a04:	dec00104 	addi	sp,sp,4
  813a08:	f800283a 	ret

00813a0c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  813a0c:	defff404 	addi	sp,sp,-48
  813a10:	df000b15 	stw	fp,44(sp)
  813a14:	df000b04 	addi	fp,sp,44
  813a18:	e13ffc15 	stw	r4,-16(fp)
  813a1c:	e17ffd15 	stw	r5,-12(fp)
  813a20:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813a24:	d0a01a04 	addi	r2,gp,-32664
  813a28:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813a2c:	e0bffc17 	ldw	r2,-16(fp)
  813a30:	10800117 	ldw	r2,4(r2)
  813a34:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
  813a38:	e0bffd17 	ldw	r2,-12(fp)
  813a3c:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
  813a40:	e0bffe17 	ldw	r2,-8(fp)
  813a44:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813a48:	e13ff717 	ldw	r4,-36(fp)
  813a4c:	e17ff617 	ldw	r5,-40(fp)
  813a50:	e1bff517 	ldw	r6,-44(fp)
  813a54:	e0fff817 	ldw	r3,-32(fp)
  813a58:	003da07a 	break	1
  813a5c:	e0bff915 	stw	r2,-28(fp)
  813a60:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813a64:	e0bff917 	ldw	r2,-28(fp)
  813a68:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813a6c:	e0bff817 	ldw	r2,-32(fp)
  813a70:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813a74:	e0bffb17 	ldw	r2,-20(fp)
  813a78:	1005003a 	cmpeq	r2,r2,zero
  813a7c:	1000041e 	bne	r2,zero,813a90 <alt_hostfs_seek+0x84>
  813a80:	e0bffb17 	ldw	r2,-20(fp)
  813a84:	0085c83a 	sub	r2,zero,r2
  813a88:	e0bfff15 	stw	r2,-4(fp)
  813a8c:	00000206 	br	813a98 <alt_hostfs_seek+0x8c>
  813a90:	e0bffa17 	ldw	r2,-24(fp)
  813a94:	e0bfff15 	stw	r2,-4(fp)
  813a98:	e0bfff17 	ldw	r2,-4(fp)
}
  813a9c:	e037883a 	mov	sp,fp
  813aa0:	df000017 	ldw	fp,0(sp)
  813aa4:	dec00104 	addi	sp,sp,4
  813aa8:	f800283a 	ret

00813aac <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  813aac:	deffe404 	addi	sp,sp,-112
  813ab0:	df001b15 	stw	fp,108(sp)
  813ab4:	df001b04 	addi	fp,sp,108
  813ab8:	e13ffd15 	stw	r4,-12(fp)
  813abc:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
  813ac0:	d0a01d04 	addi	r2,gp,-32652
  813ac4:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
  813ac8:	e0bffd17 	ldw	r2,-12(fp)
  813acc:	10800117 	ldw	r2,4(r2)
  813ad0:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
  813ad4:	e0bfed04 	addi	r2,fp,-76
  813ad8:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
  813adc:	e13fe817 	ldw	r4,-96(fp)
  813ae0:	e17fe717 	ldw	r5,-100(fp)
  813ae4:	e0ffe917 	ldw	r3,-92(fp)
  813ae8:	003da07a 	break	1
  813aec:	e0bfea15 	stw	r2,-88(fp)
  813af0:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
  813af4:	e0bfea17 	ldw	r2,-88(fp)
  813af8:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  813afc:	e0bfe917 	ldw	r2,-92(fp)
  813b00:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
  813b04:	e0bfec17 	ldw	r2,-80(fp)
  813b08:	1004c03a 	cmpne	r2,r2,zero
  813b0c:	1000651e 	bne	r2,zero,813ca4 <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  813b10:	e0bfed04 	addi	r2,fp,-76
  813b14:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  813b18:	e0bfe617 	ldw	r2,-104(fp)
  813b1c:	10801004 	addi	r2,r2,64
  813b20:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813b24:	00001806 	br	813b88 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  813b28:	e0bfe617 	ldw	r2,-104(fp)
  813b2c:	10800017 	ldw	r2,0(r2)
  813b30:	10bfc02c 	andhi	r2,r2,65280
  813b34:	1006d63a 	srli	r3,r2,24
  813b38:	e0bfe617 	ldw	r2,-104(fp)
  813b3c:	10800017 	ldw	r2,0(r2)
  813b40:	10803fec 	andhi	r2,r2,255
  813b44:	1004d23a 	srli	r2,r2,8
  813b48:	1886b03a 	or	r3,r3,r2
  813b4c:	e0bfe617 	ldw	r2,-104(fp)
  813b50:	10800017 	ldw	r2,0(r2)
  813b54:	10bfc00c 	andi	r2,r2,65280
  813b58:	1004923a 	slli	r2,r2,8
  813b5c:	1886b03a 	or	r3,r3,r2
  813b60:	e0bfe617 	ldw	r2,-104(fp)
  813b64:	10800017 	ldw	r2,0(r2)
  813b68:	10803fcc 	andi	r2,r2,255
  813b6c:	1004963a 	slli	r2,r2,24
  813b70:	1886b03a 	or	r3,r3,r2
  813b74:	e0bfe617 	ldw	r2,-104(fp)
  813b78:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  813b7c:	e0bfe617 	ldw	r2,-104(fp)
  813b80:	10800104 	addi	r2,r2,4
  813b84:	e0bfe615 	stw	r2,-104(fp)
  813b88:	e0ffe617 	ldw	r3,-104(fp)
  813b8c:	e0bfe517 	ldw	r2,-108(fp)
  813b90:	18bfe536 	bltu	r3,r2,813b28 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  813b94:	e0bffe17 	ldw	r2,-8(fp)
  813b98:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  813b9c:	e0bfe617 	ldw	r2,-104(fp)
  813ba0:	10800f04 	addi	r2,r2,60
  813ba4:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813ba8:	00000506 	br	813bc0 <alt_hostfs_fstat+0x114>
      *ptr = 0;
  813bac:	e0bfe617 	ldw	r2,-104(fp)
  813bb0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  813bb4:	e0bfe617 	ldw	r2,-104(fp)
  813bb8:	10800104 	addi	r2,r2,4
  813bbc:	e0bfe615 	stw	r2,-104(fp)
  813bc0:	e0ffe617 	ldw	r3,-104(fp)
  813bc4:	e0bfe517 	ldw	r2,-108(fp)
  813bc8:	18bff836 	bltu	r3,r2,813bac <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  813bcc:	e0bfed17 	ldw	r2,-76(fp)
  813bd0:	1007883a 	mov	r3,r2
  813bd4:	e0bffe17 	ldw	r2,-8(fp)
  813bd8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  813bdc:	e0bfee17 	ldw	r2,-72(fp)
  813be0:	1007883a 	mov	r3,r2
  813be4:	e0bffe17 	ldw	r2,-8(fp)
  813be8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  813bec:	e0ffef17 	ldw	r3,-68(fp)
  813bf0:	e0bffe17 	ldw	r2,-8(fp)
  813bf4:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  813bf8:	e0bff017 	ldw	r2,-64(fp)
  813bfc:	1007883a 	mov	r3,r2
  813c00:	e0bffe17 	ldw	r2,-8(fp)
  813c04:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  813c08:	e0bff117 	ldw	r2,-60(fp)
  813c0c:	1007883a 	mov	r3,r2
  813c10:	e0bffe17 	ldw	r2,-8(fp)
  813c14:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  813c18:	e0bff217 	ldw	r2,-56(fp)
  813c1c:	1007883a 	mov	r3,r2
  813c20:	e0bffe17 	ldw	r2,-8(fp)
  813c24:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  813c28:	e0bff317 	ldw	r2,-52(fp)
  813c2c:	1007883a 	mov	r3,r2
  813c30:	e0bffe17 	ldw	r2,-8(fp)
  813c34:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  813c38:	e0bff517 	ldw	r2,-44(fp)
  813c3c:	1007883a 	mov	r3,r2
  813c40:	e0bffe17 	ldw	r2,-8(fp)
  813c44:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  813c48:	e0bffa17 	ldw	r2,-24(fp)
  813c4c:	1007883a 	mov	r3,r2
  813c50:	e0bffe17 	ldw	r2,-8(fp)
  813c54:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  813c58:	e0bffb17 	ldw	r2,-20(fp)
  813c5c:	1007883a 	mov	r3,r2
  813c60:	e0bffe17 	ldw	r2,-8(fp)
  813c64:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  813c68:	e0bffc17 	ldw	r2,-16(fp)
  813c6c:	1007883a 	mov	r3,r2
  813c70:	e0bffe17 	ldw	r2,-8(fp)
  813c74:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  813c78:	e0bff717 	ldw	r2,-36(fp)
  813c7c:	1007883a 	mov	r3,r2
  813c80:	e0bffe17 	ldw	r2,-8(fp)
  813c84:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  813c88:	e0bff917 	ldw	r2,-28(fp)
  813c8c:	1007883a 	mov	r3,r2
  813c90:	e0bffe17 	ldw	r2,-8(fp)
  813c94:	10c00c15 	stw	r3,48(r2)

    return rc;
  813c98:	e0bfeb17 	ldw	r2,-84(fp)
  813c9c:	e0bfff15 	stw	r2,-4(fp)
  813ca0:	00000306 	br	813cb0 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
  813ca4:	e0bfec17 	ldw	r2,-80(fp)
  813ca8:	0085c83a 	sub	r2,zero,r2
  813cac:	e0bfff15 	stw	r2,-4(fp)
  813cb0:	e0bfff17 	ldw	r2,-4(fp)
}
  813cb4:	e037883a 	mov	sp,fp
  813cb8:	df000017 	ldw	fp,0(sp)
  813cbc:	dec00104 	addi	sp,sp,4
  813cc0:	f800283a 	ret

00813cc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  813cc4:	defff404 	addi	sp,sp,-48
  813cc8:	df000b15 	stw	fp,44(sp)
  813ccc:	df000b04 	addi	fp,sp,44
  813cd0:	e13ffb15 	stw	r4,-20(fp)
  813cd4:	e17ffc15 	stw	r5,-16(fp)
  813cd8:	e1bffd15 	stw	r6,-12(fp)
  813cdc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813ce0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813ce4:	008020b4 	movhi	r2,130
  813ce8:	10a22604 	addi	r2,r2,-30568
  813cec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  813cf0:	1005003a 	cmpeq	r2,r2,zero
  813cf4:	1000411e 	bne	r2,zero,813dfc <alt_alarm_start+0x138>
  {
    if (alarm)
  813cf8:	e0bffb17 	ldw	r2,-20(fp)
  813cfc:	1005003a 	cmpeq	r2,r2,zero
  813d00:	10003b1e 	bne	r2,zero,813df0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  813d04:	e0fffb17 	ldw	r3,-20(fp)
  813d08:	e0bffd17 	ldw	r2,-12(fp)
  813d0c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  813d10:	e0fffb17 	ldw	r3,-20(fp)
  813d14:	e0bffe17 	ldw	r2,-8(fp)
  813d18:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d1c:	0005303a 	rdctl	r2,status
  813d20:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d24:	e0fff817 	ldw	r3,-32(fp)
  813d28:	00bfff84 	movi	r2,-2
  813d2c:	1884703a 	and	r2,r3,r2
  813d30:	1001703a 	wrctl	status,r2
  
  return context;
  813d34:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  813d38:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813d3c:	008020b4 	movhi	r2,130
  813d40:	10a22704 	addi	r2,r2,-30564
  813d44:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  813d48:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813d4c:	e0fffc17 	ldw	r3,-16(fp)
  813d50:	e0bff917 	ldw	r2,-28(fp)
  813d54:	1885883a 	add	r2,r3,r2
  813d58:	10c00044 	addi	r3,r2,1
  813d5c:	e0bffb17 	ldw	r2,-20(fp)
  813d60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813d64:	e0bffb17 	ldw	r2,-20(fp)
  813d68:	10c00217 	ldw	r3,8(r2)
  813d6c:	e0bff917 	ldw	r2,-28(fp)
  813d70:	1880042e 	bgeu	r3,r2,813d84 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  813d74:	e0fffb17 	ldw	r3,-20(fp)
  813d78:	00800044 	movi	r2,1
  813d7c:	18800405 	stb	r2,16(r3)
  813d80:	00000206 	br	813d8c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  813d84:	e0bffb17 	ldw	r2,-20(fp)
  813d88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813d8c:	e0fffb17 	ldw	r3,-20(fp)
  813d90:	00802074 	movhi	r2,129
  813d94:	109b5004 	addi	r2,r2,27968
  813d98:	e0bff615 	stw	r2,-40(fp)
  813d9c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813da0:	e0fff717 	ldw	r3,-36(fp)
  813da4:	e0bff617 	ldw	r2,-40(fp)
  813da8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813dac:	e0bff617 	ldw	r2,-40(fp)
  813db0:	10c00017 	ldw	r3,0(r2)
  813db4:	e0bff717 	ldw	r2,-36(fp)
  813db8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813dbc:	e0bff617 	ldw	r2,-40(fp)
  813dc0:	10c00017 	ldw	r3,0(r2)
  813dc4:	e0bff717 	ldw	r2,-36(fp)
  813dc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813dcc:	e0fff617 	ldw	r3,-40(fp)
  813dd0:	e0bff717 	ldw	r2,-36(fp)
  813dd4:	18800015 	stw	r2,0(r3)
  813dd8:	e0bffa17 	ldw	r2,-24(fp)
  813ddc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813de0:	e0bff517 	ldw	r2,-44(fp)
  813de4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813de8:	e03fff15 	stw	zero,-4(fp)
  813dec:	00000506 	br	813e04 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  813df0:	00bffa84 	movi	r2,-22
  813df4:	e0bfff15 	stw	r2,-4(fp)
  813df8:	00000206 	br	813e04 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  813dfc:	00bfde84 	movi	r2,-134
  813e00:	e0bfff15 	stw	r2,-4(fp)
  813e04:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813e08:	e037883a 	mov	sp,fp
  813e0c:	df000017 	ldw	fp,0(sp)
  813e10:	dec00104 	addi	sp,sp,4
  813e14:	f800283a 	ret

00813e18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813e18:	deffff04 	addi	sp,sp,-4
  813e1c:	df000015 	stw	fp,0(sp)
  813e20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813e24:	e037883a 	mov	sp,fp
  813e28:	df000017 	ldw	fp,0(sp)
  813e2c:	dec00104 	addi	sp,sp,4
  813e30:	f800283a 	ret

00813e34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813e34:	defff904 	addi	sp,sp,-28
  813e38:	dfc00615 	stw	ra,24(sp)
  813e3c:	df000515 	stw	fp,20(sp)
  813e40:	df000504 	addi	fp,sp,20
  813e44:	e13ffd15 	stw	r4,-12(fp)
  813e48:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813e4c:	e0bffd17 	ldw	r2,-12(fp)
  813e50:	1005003a 	cmpeq	r2,r2,zero
  813e54:	1000041e 	bne	r2,zero,813e68 <alt_dev_llist_insert+0x34>
  813e58:	e0bffd17 	ldw	r2,-12(fp)
  813e5c:	10800217 	ldw	r2,8(r2)
  813e60:	1004c03a 	cmpne	r2,r2,zero
  813e64:	1000071e 	bne	r2,zero,813e84 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813e68:	0813ee80 	call	813ee8 <alt_get_errno>
  813e6c:	1007883a 	mov	r3,r2
  813e70:	00800584 	movi	r2,22
  813e74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813e78:	00bffa84 	movi	r2,-22
  813e7c:	e0bfff15 	stw	r2,-4(fp)
  813e80:	00001306 	br	813ed0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813e84:	e0fffd17 	ldw	r3,-12(fp)
  813e88:	e0bffe17 	ldw	r2,-8(fp)
  813e8c:	e0bffb15 	stw	r2,-20(fp)
  813e90:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813e94:	e0fffc17 	ldw	r3,-16(fp)
  813e98:	e0bffb17 	ldw	r2,-20(fp)
  813e9c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813ea0:	e0bffb17 	ldw	r2,-20(fp)
  813ea4:	10c00017 	ldw	r3,0(r2)
  813ea8:	e0bffc17 	ldw	r2,-16(fp)
  813eac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813eb0:	e0bffb17 	ldw	r2,-20(fp)
  813eb4:	10c00017 	ldw	r3,0(r2)
  813eb8:	e0bffc17 	ldw	r2,-16(fp)
  813ebc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813ec0:	e0fffb17 	ldw	r3,-20(fp)
  813ec4:	e0bffc17 	ldw	r2,-16(fp)
  813ec8:	18800015 	stw	r2,0(r3)

  return 0;  
  813ecc:	e03fff15 	stw	zero,-4(fp)
  813ed0:	e0bfff17 	ldw	r2,-4(fp)
}
  813ed4:	e037883a 	mov	sp,fp
  813ed8:	dfc00117 	ldw	ra,4(sp)
  813edc:	df000017 	ldw	fp,0(sp)
  813ee0:	dec00204 	addi	sp,sp,8
  813ee4:	f800283a 	ret

00813ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813ee8:	defffd04 	addi	sp,sp,-12
  813eec:	dfc00215 	stw	ra,8(sp)
  813ef0:	df000115 	stw	fp,4(sp)
  813ef4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813ef8:	00802074 	movhi	r2,129
  813efc:	109b3b04 	addi	r2,r2,27884
  813f00:	10800017 	ldw	r2,0(r2)
  813f04:	1005003a 	cmpeq	r2,r2,zero
  813f08:	1000061e 	bne	r2,zero,813f24 <alt_get_errno+0x3c>
  813f0c:	00802074 	movhi	r2,129
  813f10:	109b3b04 	addi	r2,r2,27884
  813f14:	10800017 	ldw	r2,0(r2)
  813f18:	103ee83a 	callr	r2
  813f1c:	e0bfff15 	stw	r2,-4(fp)
  813f20:	00000306 	br	813f30 <alt_get_errno+0x48>
  813f24:	008020b4 	movhi	r2,130
  813f28:	10a21904 	addi	r2,r2,-30620
  813f2c:	e0bfff15 	stw	r2,-4(fp)
  813f30:	e0bfff17 	ldw	r2,-4(fp)
}
  813f34:	e037883a 	mov	sp,fp
  813f38:	dfc00117 	ldw	ra,4(sp)
  813f3c:	df000017 	ldw	fp,0(sp)
  813f40:	dec00204 	addi	sp,sp,8
  813f44:	f800283a 	ret

00813f48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813f48:	defff904 	addi	sp,sp,-28
  813f4c:	dfc00615 	stw	ra,24(sp)
  813f50:	df000515 	stw	fp,20(sp)
  813f54:	df000504 	addi	fp,sp,20
  813f58:	e13ffd15 	stw	r4,-12(fp)
  813f5c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813f60:	e0bffe17 	ldw	r2,-8(fp)
  813f64:	10800017 	ldw	r2,0(r2)
  813f68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813f6c:	e13ffd17 	ldw	r4,-12(fp)
  813f70:	08050b00 	call	8050b0 <strlen>
  813f74:	10800044 	addi	r2,r2,1
  813f78:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813f7c:	00000d06 	br	813fb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813f80:	e0bffc17 	ldw	r2,-16(fp)
  813f84:	11000217 	ldw	r4,8(r2)
  813f88:	e1bffb17 	ldw	r6,-20(fp)
  813f8c:	e17ffd17 	ldw	r5,-12(fp)
  813f90:	08148fc0 	call	8148fc <memcmp>
  813f94:	1004c03a 	cmpne	r2,r2,zero
  813f98:	1000031e 	bne	r2,zero,813fa8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813f9c:	e0bffc17 	ldw	r2,-16(fp)
  813fa0:	e0bfff15 	stw	r2,-4(fp)
  813fa4:	00000706 	br	813fc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813fa8:	e0bffc17 	ldw	r2,-16(fp)
  813fac:	10800017 	ldw	r2,0(r2)
  813fb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813fb4:	e0fffe17 	ldw	r3,-8(fp)
  813fb8:	e0bffc17 	ldw	r2,-16(fp)
  813fbc:	10fff01e 	bne	r2,r3,813f80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813fc0:	e03fff15 	stw	zero,-4(fp)
  813fc4:	e0bfff17 	ldw	r2,-4(fp)
}
  813fc8:	e037883a 	mov	sp,fp
  813fcc:	dfc00117 	ldw	ra,4(sp)
  813fd0:	df000017 	ldw	fp,0(sp)
  813fd4:	dec00204 	addi	sp,sp,8
  813fd8:	f800283a 	ret

00813fdc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813fdc:	defffa04 	addi	sp,sp,-24
  813fe0:	dfc00515 	stw	ra,20(sp)
  813fe4:	df000415 	stw	fp,16(sp)
  813fe8:	df000404 	addi	fp,sp,16
  813fec:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813ff0:	00802074 	movhi	r2,129
  813ff4:	109b3604 	addi	r2,r2,27864
  813ff8:	10800017 	ldw	r2,0(r2)
  813ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814000:	00003306 	br	8140d0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  814004:	e0bffd17 	ldw	r2,-12(fp)
  814008:	11000217 	ldw	r4,8(r2)
  81400c:	08050b00 	call	8050b0 <strlen>
  814010:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  814014:	e0bffd17 	ldw	r2,-12(fp)
  814018:	10c00217 	ldw	r3,8(r2)
  81401c:	e0bffc17 	ldw	r2,-16(fp)
  814020:	1885883a 	add	r2,r3,r2
  814024:	10bfffc4 	addi	r2,r2,-1
  814028:	10800003 	ldbu	r2,0(r2)
  81402c:	10803fcc 	andi	r2,r2,255
  814030:	1080201c 	xori	r2,r2,128
  814034:	10bfe004 	addi	r2,r2,-128
  814038:	10800bd8 	cmpnei	r2,r2,47
  81403c:	1000031e 	bne	r2,zero,81404c <alt_find_file+0x70>
    {
      len -= 1;
  814040:	e0bffc17 	ldw	r2,-16(fp)
  814044:	10bfffc4 	addi	r2,r2,-1
  814048:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81404c:	e0bffc17 	ldw	r2,-16(fp)
  814050:	1007883a 	mov	r3,r2
  814054:	e0bffe17 	ldw	r2,-8(fp)
  814058:	1885883a 	add	r2,r3,r2
  81405c:	10800003 	ldbu	r2,0(r2)
  814060:	10803fcc 	andi	r2,r2,255
  814064:	1080201c 	xori	r2,r2,128
  814068:	10bfe004 	addi	r2,r2,-128
  81406c:	10800be0 	cmpeqi	r2,r2,47
  814070:	10000a1e 	bne	r2,zero,81409c <alt_find_file+0xc0>
  814074:	e0bffc17 	ldw	r2,-16(fp)
  814078:	1007883a 	mov	r3,r2
  81407c:	e0bffe17 	ldw	r2,-8(fp)
  814080:	1885883a 	add	r2,r3,r2
  814084:	10800003 	ldbu	r2,0(r2)
  814088:	10803fcc 	andi	r2,r2,255
  81408c:	1080201c 	xori	r2,r2,128
  814090:	10bfe004 	addi	r2,r2,-128
  814094:	1004c03a 	cmpne	r2,r2,zero
  814098:	10000a1e 	bne	r2,zero,8140c4 <alt_find_file+0xe8>
  81409c:	e0bffd17 	ldw	r2,-12(fp)
  8140a0:	11000217 	ldw	r4,8(r2)
  8140a4:	e1bffc17 	ldw	r6,-16(fp)
  8140a8:	e17ffe17 	ldw	r5,-8(fp)
  8140ac:	08148fc0 	call	8148fc <memcmp>
  8140b0:	1004c03a 	cmpne	r2,r2,zero
  8140b4:	1000031e 	bne	r2,zero,8140c4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8140b8:	e0bffd17 	ldw	r2,-12(fp)
  8140bc:	e0bfff15 	stw	r2,-4(fp)
  8140c0:	00000806 	br	8140e4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8140c4:	e0bffd17 	ldw	r2,-12(fp)
  8140c8:	10800017 	ldw	r2,0(r2)
  8140cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8140d0:	00c02074 	movhi	r3,129
  8140d4:	18db3604 	addi	r3,r3,27864
  8140d8:	e0bffd17 	ldw	r2,-12(fp)
  8140dc:	10ffc91e 	bne	r2,r3,814004 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8140e0:	e03fff15 	stw	zero,-4(fp)
  8140e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8140e8:	e037883a 	mov	sp,fp
  8140ec:	dfc00117 	ldw	ra,4(sp)
  8140f0:	df000017 	ldw	fp,0(sp)
  8140f4:	dec00204 	addi	sp,sp,8
  8140f8:	f800283a 	ret

008140fc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  8140fc:	defffb04 	addi	sp,sp,-20
  814100:	df000415 	stw	fp,16(sp)
  814104:	df000404 	addi	fp,sp,16
  814108:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  81410c:	e0bffe17 	ldw	r2,-8(fp)
  814110:	10800217 	ldw	r2,8(r2)
  814114:	1004c03a 	cmpne	r2,r2,zero
  814118:	1000031e 	bne	r2,zero,814128 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  81411c:	00bffb44 	movi	r2,-19
  814120:	e0bfff15 	stw	r2,-4(fp)
  814124:	00001406 	br	814178 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  814128:	e0fffe17 	ldw	r3,-8(fp)
  81412c:	00802074 	movhi	r2,129
  814130:	109b3604 	addi	r2,r2,27864
  814134:	e0bffc15 	stw	r2,-16(fp)
  814138:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81413c:	e0fffd17 	ldw	r3,-12(fp)
  814140:	e0bffc17 	ldw	r2,-16(fp)
  814144:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814148:	e0bffc17 	ldw	r2,-16(fp)
  81414c:	10c00017 	ldw	r3,0(r2)
  814150:	e0bffd17 	ldw	r2,-12(fp)
  814154:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814158:	e0bffc17 	ldw	r2,-16(fp)
  81415c:	10c00017 	ldw	r3,0(r2)
  814160:	e0bffd17 	ldw	r2,-12(fp)
  814164:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814168:	e0fffc17 	ldw	r3,-16(fp)
  81416c:	e0bffd17 	ldw	r2,-12(fp)
  814170:	18800015 	stw	r2,0(r3)

  return 0;
  814174:	e03fff15 	stw	zero,-4(fp)
  814178:	e0bfff17 	ldw	r2,-4(fp)
} 
  81417c:	e037883a 	mov	sp,fp
  814180:	df000017 	ldw	fp,0(sp)
  814184:	dec00104 	addi	sp,sp,4
  814188:	f800283a 	ret

0081418c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81418c:	defffa04 	addi	sp,sp,-24
  814190:	dfc00515 	stw	ra,20(sp)
  814194:	df000415 	stw	fp,16(sp)
  814198:	dc000315 	stw	r16,12(sp)
  81419c:	df000304 	addi	fp,sp,12
  8141a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8141a4:	00bffa04 	movi	r2,-24
  8141a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8141ac:	e03ffe15 	stw	zero,-8(fp)
  8141b0:	00002006 	br	814234 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  8141b4:	e13ffe17 	ldw	r4,-8(fp)
  8141b8:	04002074 	movhi	r16,129
  8141bc:	8416ad04 	addi	r16,r16,23220
  8141c0:	01400304 	movi	r5,12
  8141c4:	0801fec0 	call	801fec <__mulsi3>
  8141c8:	1405883a 	add	r2,r2,r16
  8141cc:	10800017 	ldw	r2,0(r2)
  8141d0:	1004c03a 	cmpne	r2,r2,zero
  8141d4:	1000141e 	bne	r2,zero,814228 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  8141d8:	e13ffe17 	ldw	r4,-8(fp)
  8141dc:	04002074 	movhi	r16,129
  8141e0:	8416ad04 	addi	r16,r16,23220
  8141e4:	01400304 	movi	r5,12
  8141e8:	0801fec0 	call	801fec <__mulsi3>
  8141ec:	1407883a 	add	r3,r2,r16
  8141f0:	e0bfff17 	ldw	r2,-4(fp)
  8141f4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8141f8:	00802074 	movhi	r2,129
  8141fc:	109b3a04 	addi	r2,r2,27880
  814200:	10c00017 	ldw	r3,0(r2)
  814204:	e0bffe17 	ldw	r2,-8(fp)
  814208:	1880040e 	bge	r3,r2,81421c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  81420c:	00c02074 	movhi	r3,129
  814210:	18db3a04 	addi	r3,r3,27880
  814214:	e0bffe17 	ldw	r2,-8(fp)
  814218:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81421c:	e0bffe17 	ldw	r2,-8(fp)
  814220:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  814224:	00000606 	br	814240 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814228:	e0bffe17 	ldw	r2,-8(fp)
  81422c:	10800044 	addi	r2,r2,1
  814230:	e0bffe15 	stw	r2,-8(fp)
  814234:	e0bffe17 	ldw	r2,-8(fp)
  814238:	10800810 	cmplti	r2,r2,32
  81423c:	103fdd1e 	bne	r2,zero,8141b4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814240:	e0bffd17 	ldw	r2,-12(fp)
}
  814244:	e037883a 	mov	sp,fp
  814248:	dfc00217 	ldw	ra,8(sp)
  81424c:	df000117 	ldw	fp,4(sp)
  814250:	dc000017 	ldw	r16,0(sp)
  814254:	dec00304 	addi	sp,sp,12
  814258:	f800283a 	ret

0081425c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81425c:	defffe04 	addi	sp,sp,-8
  814260:	dfc00115 	stw	ra,4(sp)
  814264:	df000015 	stw	fp,0(sp)
  814268:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81426c:	0009883a 	mov	r4,zero
  814270:	01420004 	movi	r5,2048
  814274:	081486c0 	call	81486c <alt_icache_flush>
#endif
}
  814278:	e037883a 	mov	sp,fp
  81427c:	dfc00117 	ldw	ra,4(sp)
  814280:	df000017 	ldw	fp,0(sp)
  814284:	dec00204 	addi	sp,sp,8
  814288:	f800283a 	ret

0081428c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81428c:	defff904 	addi	sp,sp,-28
  814290:	dfc00615 	stw	ra,24(sp)
  814294:	df000515 	stw	fp,20(sp)
  814298:	df000504 	addi	fp,sp,20
  81429c:	e13ffc15 	stw	r4,-16(fp)
  8142a0:	e17ffd15 	stw	r5,-12(fp)
  8142a4:	e1bffe15 	stw	r6,-8(fp)
  8142a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8142ac:	e0800217 	ldw	r2,8(fp)
  8142b0:	d8800015 	stw	r2,0(sp)
  8142b4:	e13ffc17 	ldw	r4,-16(fp)
  8142b8:	e17ffd17 	ldw	r5,-12(fp)
  8142bc:	e1bffe17 	ldw	r6,-8(fp)
  8142c0:	e1ffff17 	ldw	r7,-4(fp)
  8142c4:	08144600 	call	814460 <alt_iic_isr_register>
}  
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	dfc00117 	ldw	ra,4(sp)
  8142d0:	df000017 	ldw	fp,0(sp)
  8142d4:	dec00204 	addi	sp,sp,8
  8142d8:	f800283a 	ret

008142dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8142dc:	defff904 	addi	sp,sp,-28
  8142e0:	df000615 	stw	fp,24(sp)
  8142e4:	df000604 	addi	fp,sp,24
  8142e8:	e13ffe15 	stw	r4,-8(fp)
  8142ec:	e17fff15 	stw	r5,-4(fp)
  8142f0:	e0bfff17 	ldw	r2,-4(fp)
  8142f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142f8:	0005303a 	rdctl	r2,status
  8142fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814300:	e0fffb17 	ldw	r3,-20(fp)
  814304:	00bfff84 	movi	r2,-2
  814308:	1884703a 	and	r2,r3,r2
  81430c:	1001703a 	wrctl	status,r2
  
  return context;
  814310:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814314:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  814318:	e0fffc17 	ldw	r3,-16(fp)
  81431c:	00800044 	movi	r2,1
  814320:	10c4983a 	sll	r2,r2,r3
  814324:	1007883a 	mov	r3,r2
  814328:	008020b4 	movhi	r2,130
  81432c:	10a22504 	addi	r2,r2,-30572
  814330:	10800017 	ldw	r2,0(r2)
  814334:	1886b03a 	or	r3,r3,r2
  814338:	008020b4 	movhi	r2,130
  81433c:	10a22504 	addi	r2,r2,-30572
  814340:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814344:	008020b4 	movhi	r2,130
  814348:	10a22504 	addi	r2,r2,-30572
  81434c:	10800017 	ldw	r2,0(r2)
  814350:	100170fa 	wrctl	ienable,r2
  814354:	e0bffd17 	ldw	r2,-12(fp)
  814358:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81435c:	e0bffa17 	ldw	r2,-24(fp)
  814360:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814364:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814368:	e037883a 	mov	sp,fp
  81436c:	df000017 	ldw	fp,0(sp)
  814370:	dec00104 	addi	sp,sp,4
  814374:	f800283a 	ret

00814378 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814378:	defff904 	addi	sp,sp,-28
  81437c:	df000615 	stw	fp,24(sp)
  814380:	df000604 	addi	fp,sp,24
  814384:	e13ffe15 	stw	r4,-8(fp)
  814388:	e17fff15 	stw	r5,-4(fp)
  81438c:	e0bfff17 	ldw	r2,-4(fp)
  814390:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814394:	0005303a 	rdctl	r2,status
  814398:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81439c:	e0fffb17 	ldw	r3,-20(fp)
  8143a0:	00bfff84 	movi	r2,-2
  8143a4:	1884703a 	and	r2,r3,r2
  8143a8:	1001703a 	wrctl	status,r2
  
  return context;
  8143ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8143b0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8143b4:	e0fffc17 	ldw	r3,-16(fp)
  8143b8:	00800044 	movi	r2,1
  8143bc:	10c4983a 	sll	r2,r2,r3
  8143c0:	0084303a 	nor	r2,zero,r2
  8143c4:	1007883a 	mov	r3,r2
  8143c8:	008020b4 	movhi	r2,130
  8143cc:	10a22504 	addi	r2,r2,-30572
  8143d0:	10800017 	ldw	r2,0(r2)
  8143d4:	1886703a 	and	r3,r3,r2
  8143d8:	008020b4 	movhi	r2,130
  8143dc:	10a22504 	addi	r2,r2,-30572
  8143e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8143e4:	008020b4 	movhi	r2,130
  8143e8:	10a22504 	addi	r2,r2,-30572
  8143ec:	10800017 	ldw	r2,0(r2)
  8143f0:	100170fa 	wrctl	ienable,r2
  8143f4:	e0bffd17 	ldw	r2,-12(fp)
  8143f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143fc:	e0bffa17 	ldw	r2,-24(fp)
  814400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814404:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814408:	e037883a 	mov	sp,fp
  81440c:	df000017 	ldw	fp,0(sp)
  814410:	dec00104 	addi	sp,sp,4
  814414:	f800283a 	ret

00814418 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814418:	defffc04 	addi	sp,sp,-16
  81441c:	df000315 	stw	fp,12(sp)
  814420:	df000304 	addi	fp,sp,12
  814424:	e13ffe15 	stw	r4,-8(fp)
  814428:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81442c:	000530fa 	rdctl	r2,ienable
  814430:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814434:	e0ffff17 	ldw	r3,-4(fp)
  814438:	00800044 	movi	r2,1
  81443c:	10c4983a 	sll	r2,r2,r3
  814440:	1007883a 	mov	r3,r2
  814444:	e0bffd17 	ldw	r2,-12(fp)
  814448:	1884703a 	and	r2,r3,r2
  81444c:	1004c03a 	cmpne	r2,r2,zero
}
  814450:	e037883a 	mov	sp,fp
  814454:	df000017 	ldw	fp,0(sp)
  814458:	dec00104 	addi	sp,sp,4
  81445c:	f800283a 	ret

00814460 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814460:	defff404 	addi	sp,sp,-48
  814464:	dfc00b15 	stw	ra,44(sp)
  814468:	df000a15 	stw	fp,40(sp)
  81446c:	df000a04 	addi	fp,sp,40
  814470:	e13ffb15 	stw	r4,-20(fp)
  814474:	e17ffc15 	stw	r5,-16(fp)
  814478:	e1bffd15 	stw	r6,-12(fp)
  81447c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814480:	00bffa84 	movi	r2,-22
  814484:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814488:	e0bffc17 	ldw	r2,-16(fp)
  81448c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814490:	e0bff917 	ldw	r2,-28(fp)
  814494:	10800808 	cmpgei	r2,r2,32
  814498:	1000291e 	bne	r2,zero,814540 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81449c:	0005303a 	rdctl	r2,status
  8144a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8144a4:	e0fff717 	ldw	r3,-36(fp)
  8144a8:	00bfff84 	movi	r2,-2
  8144ac:	1884703a 	and	r2,r3,r2
  8144b0:	1001703a 	wrctl	status,r2
  
  return context;
  8144b4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8144b8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8144bc:	e0bff917 	ldw	r2,-28(fp)
  8144c0:	00c020b4 	movhi	r3,130
  8144c4:	18e27204 	addi	r3,r3,-30264
  8144c8:	100490fa 	slli	r2,r2,3
  8144cc:	10c7883a 	add	r3,r2,r3
  8144d0:	e0bffd17 	ldw	r2,-12(fp)
  8144d4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8144d8:	e0bff917 	ldw	r2,-28(fp)
  8144dc:	00c020b4 	movhi	r3,130
  8144e0:	18e27204 	addi	r3,r3,-30264
  8144e4:	100490fa 	slli	r2,r2,3
  8144e8:	10c5883a 	add	r2,r2,r3
  8144ec:	10c00104 	addi	r3,r2,4
  8144f0:	e0bffe17 	ldw	r2,-8(fp)
  8144f4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8144f8:	e0bffd17 	ldw	r2,-12(fp)
  8144fc:	1005003a 	cmpeq	r2,r2,zero
  814500:	1000051e 	bne	r2,zero,814518 <alt_iic_isr_register+0xb8>
  814504:	e17ff917 	ldw	r5,-28(fp)
  814508:	e13ffb17 	ldw	r4,-20(fp)
  81450c:	08142dc0 	call	8142dc <alt_ic_irq_enable>
  814510:	e0bfff15 	stw	r2,-4(fp)
  814514:	00000406 	br	814528 <alt_iic_isr_register+0xc8>
  814518:	e17ff917 	ldw	r5,-28(fp)
  81451c:	e13ffb17 	ldw	r4,-20(fp)
  814520:	08143780 	call	814378 <alt_ic_irq_disable>
  814524:	e0bfff15 	stw	r2,-4(fp)
  814528:	e0bfff17 	ldw	r2,-4(fp)
  81452c:	e0bffa15 	stw	r2,-24(fp)
  814530:	e0bff817 	ldw	r2,-32(fp)
  814534:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814538:	e0bff617 	ldw	r2,-40(fp)
  81453c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814540:	e0bffa17 	ldw	r2,-24(fp)
}
  814544:	e037883a 	mov	sp,fp
  814548:	dfc00117 	ldw	ra,4(sp)
  81454c:	df000017 	ldw	fp,0(sp)
  814550:	dec00204 	addi	sp,sp,8
  814554:	f800283a 	ret

00814558 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814558:	defff804 	addi	sp,sp,-32
  81455c:	dfc00715 	stw	ra,28(sp)
  814560:	df000615 	stw	fp,24(sp)
  814564:	dc000515 	stw	r16,20(sp)
  814568:	df000504 	addi	fp,sp,20
  81456c:	e13ffc15 	stw	r4,-16(fp)
  814570:	e17ffd15 	stw	r5,-12(fp)
  814574:	e1bffe15 	stw	r6,-8(fp)
  814578:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81457c:	e13ffd17 	ldw	r4,-12(fp)
  814580:	e17ffe17 	ldw	r5,-8(fp)
  814584:	e1bfff17 	ldw	r6,-4(fp)
  814588:	08123600 	call	812360 <open>
  81458c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814590:	e0bffb17 	ldw	r2,-20(fp)
  814594:	1004803a 	cmplt	r2,r2,zero
  814598:	10001f1e 	bne	r2,zero,814618 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81459c:	e13ffb17 	ldw	r4,-20(fp)
  8145a0:	04002074 	movhi	r16,129
  8145a4:	8416ad04 	addi	r16,r16,23220
  8145a8:	01400304 	movi	r5,12
  8145ac:	0801fec0 	call	801fec <__mulsi3>
  8145b0:	1405883a 	add	r2,r2,r16
  8145b4:	10c00017 	ldw	r3,0(r2)
  8145b8:	e0bffc17 	ldw	r2,-16(fp)
  8145bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8145c0:	e13ffb17 	ldw	r4,-20(fp)
  8145c4:	04002074 	movhi	r16,129
  8145c8:	8416ad04 	addi	r16,r16,23220
  8145cc:	01400304 	movi	r5,12
  8145d0:	0801fec0 	call	801fec <__mulsi3>
  8145d4:	1405883a 	add	r2,r2,r16
  8145d8:	10800104 	addi	r2,r2,4
  8145dc:	10c00017 	ldw	r3,0(r2)
  8145e0:	e0bffc17 	ldw	r2,-16(fp)
  8145e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8145e8:	e13ffb17 	ldw	r4,-20(fp)
  8145ec:	04002074 	movhi	r16,129
  8145f0:	8416ad04 	addi	r16,r16,23220
  8145f4:	01400304 	movi	r5,12
  8145f8:	0801fec0 	call	801fec <__mulsi3>
  8145fc:	1405883a 	add	r2,r2,r16
  814600:	10800204 	addi	r2,r2,8
  814604:	10c00017 	ldw	r3,0(r2)
  814608:	e0bffc17 	ldw	r2,-16(fp)
  81460c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  814610:	e13ffb17 	ldw	r4,-20(fp)
  814614:	08126d00 	call	8126d0 <alt_release_fd>
  }
} 
  814618:	e037883a 	mov	sp,fp
  81461c:	dfc00217 	ldw	ra,8(sp)
  814620:	df000117 	ldw	fp,4(sp)
  814624:	dc000017 	ldw	r16,0(sp)
  814628:	dec00304 	addi	sp,sp,12
  81462c:	f800283a 	ret

00814630 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  814630:	defffb04 	addi	sp,sp,-20
  814634:	dfc00415 	stw	ra,16(sp)
  814638:	df000315 	stw	fp,12(sp)
  81463c:	df000304 	addi	fp,sp,12
  814640:	e13ffd15 	stw	r4,-12(fp)
  814644:	e17ffe15 	stw	r5,-8(fp)
  814648:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81464c:	01002074 	movhi	r4,129
  814650:	2116b004 	addi	r4,r4,23232
  814654:	e17ffd17 	ldw	r5,-12(fp)
  814658:	01800044 	movi	r6,1
  81465c:	01c07fc4 	movi	r7,511
  814660:	08145580 	call	814558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814664:	01002074 	movhi	r4,129
  814668:	2116ad04 	addi	r4,r4,23220
  81466c:	e17ffe17 	ldw	r5,-8(fp)
  814670:	000d883a 	mov	r6,zero
  814674:	01c07fc4 	movi	r7,511
  814678:	08145580 	call	814558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81467c:	01002074 	movhi	r4,129
  814680:	2116b304 	addi	r4,r4,23244
  814684:	e17fff17 	ldw	r5,-4(fp)
  814688:	01800044 	movi	r6,1
  81468c:	01c07fc4 	movi	r7,511
  814690:	08145580 	call	814558 <alt_open_fd>
}  
  814694:	e037883a 	mov	sp,fp
  814698:	dfc00117 	ldw	ra,4(sp)
  81469c:	df000017 	ldw	fp,0(sp)
  8146a0:	dec00204 	addi	sp,sp,8
  8146a4:	f800283a 	ret

008146a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8146a8:	defffa04 	addi	sp,sp,-24
  8146ac:	df000515 	stw	fp,20(sp)
  8146b0:	df000504 	addi	fp,sp,20
  8146b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146b8:	0005303a 	rdctl	r2,status
  8146bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8146c0:	e0fffd17 	ldw	r3,-12(fp)
  8146c4:	00bfff84 	movi	r2,-2
  8146c8:	1884703a 	and	r2,r3,r2
  8146cc:	1001703a 	wrctl	status,r2
  
  return context;
  8146d0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8146d4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8146d8:	e0bfff17 	ldw	r2,-4(fp)
  8146dc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8146e0:	e0bffc17 	ldw	r2,-16(fp)
  8146e4:	10c00017 	ldw	r3,0(r2)
  8146e8:	e0bffc17 	ldw	r2,-16(fp)
  8146ec:	10800117 	ldw	r2,4(r2)
  8146f0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8146f4:	e0bffc17 	ldw	r2,-16(fp)
  8146f8:	10c00117 	ldw	r3,4(r2)
  8146fc:	e0bffc17 	ldw	r2,-16(fp)
  814700:	10800017 	ldw	r2,0(r2)
  814704:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  814708:	e0fffc17 	ldw	r3,-16(fp)
  81470c:	e0bffc17 	ldw	r2,-16(fp)
  814710:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  814714:	e0fffc17 	ldw	r3,-16(fp)
  814718:	e0bffc17 	ldw	r2,-16(fp)
  81471c:	18800015 	stw	r2,0(r3)
  814720:	e0bffe17 	ldw	r2,-8(fp)
  814724:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814728:	e0bffb17 	ldw	r2,-20(fp)
  81472c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  814730:	e037883a 	mov	sp,fp
  814734:	df000017 	ldw	fp,0(sp)
  814738:	dec00104 	addi	sp,sp,4
  81473c:	f800283a 	ret

00814740 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  814740:	defffb04 	addi	sp,sp,-20
  814744:	dfc00415 	stw	ra,16(sp)
  814748:	df000315 	stw	fp,12(sp)
  81474c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814750:	d0a02117 	ldw	r2,-32636(gp)
  814754:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814758:	d0a6f817 	ldw	r2,-25632(gp)
  81475c:	10800044 	addi	r2,r2,1
  814760:	d0a6f815 	stw	r2,-25632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814764:	00003106 	br	81482c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814768:	e0bffe17 	ldw	r2,-8(fp)
  81476c:	10800017 	ldw	r2,0(r2)
  814770:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814774:	e0bffe17 	ldw	r2,-8(fp)
  814778:	10800403 	ldbu	r2,16(r2)
  81477c:	10803fcc 	andi	r2,r2,255
  814780:	1005003a 	cmpeq	r2,r2,zero
  814784:	1000051e 	bne	r2,zero,81479c <alt_tick+0x5c>
  814788:	d0a6f817 	ldw	r2,-25632(gp)
  81478c:	1004c03a 	cmpne	r2,r2,zero
  814790:	1000021e 	bne	r2,zero,81479c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  814794:	e0bffe17 	ldw	r2,-8(fp)
  814798:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81479c:	e0bffe17 	ldw	r2,-8(fp)
  8147a0:	10c00217 	ldw	r3,8(r2)
  8147a4:	d0a6f817 	ldw	r2,-25632(gp)
  8147a8:	10c01e36 	bltu	r2,r3,814824 <alt_tick+0xe4>
  8147ac:	e0bffe17 	ldw	r2,-8(fp)
  8147b0:	10800403 	ldbu	r2,16(r2)
  8147b4:	10803fcc 	andi	r2,r2,255
  8147b8:	1004c03a 	cmpne	r2,r2,zero
  8147bc:	1000191e 	bne	r2,zero,814824 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8147c0:	e0bffe17 	ldw	r2,-8(fp)
  8147c4:	10c00317 	ldw	r3,12(r2)
  8147c8:	e0bffe17 	ldw	r2,-8(fp)
  8147cc:	11000517 	ldw	r4,20(r2)
  8147d0:	183ee83a 	callr	r3
  8147d4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8147d8:	e0bffd17 	ldw	r2,-12(fp)
  8147dc:	1004c03a 	cmpne	r2,r2,zero
  8147e0:	1000031e 	bne	r2,zero,8147f0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8147e4:	e13ffe17 	ldw	r4,-8(fp)
  8147e8:	08146a80 	call	8146a8 <alt_alarm_stop>
  8147ec:	00000d06 	br	814824 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8147f0:	e0bffe17 	ldw	r2,-8(fp)
  8147f4:	10c00217 	ldw	r3,8(r2)
  8147f8:	e0bffd17 	ldw	r2,-12(fp)
  8147fc:	1887883a 	add	r3,r3,r2
  814800:	e0bffe17 	ldw	r2,-8(fp)
  814804:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814808:	e0bffe17 	ldw	r2,-8(fp)
  81480c:	10c00217 	ldw	r3,8(r2)
  814810:	d0a6f817 	ldw	r2,-25632(gp)
  814814:	1880032e 	bgeu	r3,r2,814824 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  814818:	e0fffe17 	ldw	r3,-8(fp)
  81481c:	00800044 	movi	r2,1
  814820:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  814824:	e0bfff17 	ldw	r2,-4(fp)
  814828:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81482c:	d0e02104 	addi	r3,gp,-32636
  814830:	e0bffe17 	ldw	r2,-8(fp)
  814834:	10ffcc1e 	bne	r2,r3,814768 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  814838:	e037883a 	mov	sp,fp
  81483c:	dfc00117 	ldw	ra,4(sp)
  814840:	df000017 	ldw	fp,0(sp)
  814844:	dec00204 	addi	sp,sp,8
  814848:	f800283a 	ret

0081484c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81484c:	deffff04 	addi	sp,sp,-4
  814850:	df000015 	stw	fp,0(sp)
  814854:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814858:	000170fa 	wrctl	ienable,zero
}
  81485c:	e037883a 	mov	sp,fp
  814860:	df000017 	ldw	fp,0(sp)
  814864:	dec00104 	addi	sp,sp,4
  814868:	f800283a 	ret

0081486c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81486c:	defffb04 	addi	sp,sp,-20
  814870:	df000415 	stw	fp,16(sp)
  814874:	df000404 	addi	fp,sp,16
  814878:	e13ffe15 	stw	r4,-8(fp)
  81487c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814880:	e0bfff17 	ldw	r2,-4(fp)
  814884:	10820070 	cmpltui	r2,r2,2049
  814888:	1000021e 	bne	r2,zero,814894 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81488c:	00820004 	movi	r2,2048
  814890:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814894:	e0fffe17 	ldw	r3,-8(fp)
  814898:	e0bfff17 	ldw	r2,-4(fp)
  81489c:	1885883a 	add	r2,r3,r2
  8148a0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148a4:	e0bffe17 	ldw	r2,-8(fp)
  8148a8:	e0bffd15 	stw	r2,-12(fp)
  8148ac:	00000506 	br	8148c4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8148b0:	e0bffd17 	ldw	r2,-12(fp)
  8148b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148b8:	e0bffd17 	ldw	r2,-12(fp)
  8148bc:	10800804 	addi	r2,r2,32
  8148c0:	e0bffd15 	stw	r2,-12(fp)
  8148c4:	e0fffd17 	ldw	r3,-12(fp)
  8148c8:	e0bffc17 	ldw	r2,-16(fp)
  8148cc:	18bff836 	bltu	r3,r2,8148b0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8148d0:	e0bffe17 	ldw	r2,-8(fp)
  8148d4:	108007cc 	andi	r2,r2,31
  8148d8:	1005003a 	cmpeq	r2,r2,zero
  8148dc:	1000021e 	bne	r2,zero,8148e8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8148e0:	e0bffd17 	ldw	r2,-12(fp)
  8148e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8148e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8148ec:	e037883a 	mov	sp,fp
  8148f0:	df000017 	ldw	fp,0(sp)
  8148f4:	dec00104 	addi	sp,sp,4
  8148f8:	f800283a 	ret

008148fc <memcmp>:
  8148fc:	00c000c4 	movi	r3,3
  814900:	1980032e 	bgeu	r3,r6,814910 <memcmp+0x14>
  814904:	2144b03a 	or	r2,r4,r5
  814908:	10c4703a 	and	r2,r2,r3
  81490c:	10000f26 	beq	r2,zero,81494c <memcmp+0x50>
  814910:	31ffffc4 	addi	r7,r6,-1
  814914:	3000061e 	bne	r6,zero,814930 <memcmp+0x34>
  814918:	00000a06 	br	814944 <memcmp+0x48>
  81491c:	39ffffc4 	addi	r7,r7,-1
  814920:	00bfffc4 	movi	r2,-1
  814924:	21000044 	addi	r4,r4,1
  814928:	29400044 	addi	r5,r5,1
  81492c:	38800526 	beq	r7,r2,814944 <memcmp+0x48>
  814930:	20c00003 	ldbu	r3,0(r4)
  814934:	28800003 	ldbu	r2,0(r5)
  814938:	18bff826 	beq	r3,r2,81491c <memcmp+0x20>
  81493c:	1885c83a 	sub	r2,r3,r2
  814940:	f800283a 	ret
  814944:	0005883a 	mov	r2,zero
  814948:	f800283a 	ret
  81494c:	180f883a 	mov	r7,r3
  814950:	20c00017 	ldw	r3,0(r4)
  814954:	28800017 	ldw	r2,0(r5)
  814958:	18bfed1e 	bne	r3,r2,814910 <memcmp+0x14>
  81495c:	31bfff04 	addi	r6,r6,-4
  814960:	21000104 	addi	r4,r4,4
  814964:	29400104 	addi	r5,r5,4
  814968:	39bff936 	bltu	r7,r6,814950 <memcmp+0x54>
  81496c:	003fe806 	br	814910 <memcmp+0x14>
  814970:	00808d2c 	andhi	r2,zero,564

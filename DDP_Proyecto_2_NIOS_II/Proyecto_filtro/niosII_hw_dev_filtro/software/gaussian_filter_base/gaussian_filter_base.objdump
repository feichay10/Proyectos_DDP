
gaussian_filter_base.elf:     file format elf32-littlenios2
gaussian_filter_base.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x0001547c memsz 0x0001547c flags r-x
    LOAD off    0x00017610 vaddr 0x00815610 paddr 0x0081712c align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x00019c48 vaddr 0x00818c48 paddr 0x00818c48 align 2**12
         filesz 0x00000000 memsz 0x00000264 flags rw-
    LOAD off    0x0001a000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  0001a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01080020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014ac0  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009bc  00814c54  00814c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  00815610  0081712c  00017610  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000264  00818c48  00818c48  00019c48  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b2e  00000000  00000000  0001b240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00038afa  00000000  00000000  0001cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc6c  00000000  00000000  00055868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001e2a0  00000000  00000000  000614d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023f4  00000000  00000000  0007f774  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030f7  00000000  00000000  00081b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012a3f  00000000  00000000  00084c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000976a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000976d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009bfc0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009bfc3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009bfc6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009bfc7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009bfc8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009bfcc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009bfd0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009bfd4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009bfdd  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009bfe6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0009bfef  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0009c001  2**0
                  CONTENTS, READONLY
 29 .jdi          00005577  00000000  00000000  0009c02d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045aee  00000000  00000000  000a15a4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
00814c54 l    d  .rodata	00000000 .rodata
00815610 l    d  .rwdata	00000000 .rwdata
00818c48 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pgm.c
00000000 l    df *ABS*	00000000 dp-bit.c
00801eb8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 ctype_.c
008151dd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00803404 l     F .text	00000058 std
00803510 l     F .text	00000008 __fp_lock
00803518 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00815634 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00805520 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
0080560c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00805c6c l     F .text	00000058 __sprint_r
008153d6 l     O .rodata	00000010 blanks.3452
008153c6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
008153ee l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008094e8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080970c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
008170b8 l     O .rwdata	00000004 charset
00815430 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00815578 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080d1b8 l     F .text	00000048 match
00815e5c l     O .rwdata	00000014 fpi.1950
00815594 l     O .rodata	00000028 tinytens
00815e48 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080f3ec l     F .text	00000024 htinit
0080f478 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080fd24 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008118ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00811efc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811f5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811f88 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
008120c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008121e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008122c4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00812424 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00812520 l     F .text	000000f8 alt_file_locked
008127a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00812928 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008170d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00812b50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00812cd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00816018 l     O .rwdata	00001060 jtag_uart
00817078 l     O .rwdata	00000028 altera_hostfs
00812df8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813038 l     F .text	00000228 altera_avalon_jtag_uart_irq
00813260 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008138dc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
008170d8 l     O .rwdata	00000004 hcinfo.2234
008170e4 l     O .rwdata	00000004 hcinfo.2276
008170f0 l     O .rwdata	00000004 hcinfo.2289
008170fc l     O .rwdata	00000004 hcinfo.2311
00817108 l     O .rwdata	00000004 hcinfo.2333
00817114 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008141c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814838 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
0080bc04 g     F .text	00000094 _mprec_log10
0080bcf0 g     F .text	00000088 __any_on
0080b440 g     F .text	00000070 _isatty_r
00815550 g     O .rodata	00000028 __mprec_tinytens
00812484 g     F .text	0000005c alt_main
008052a8 g     F .text	000000a0 _puts_r
00818dac g     O .bss	00000100 alt_irq
0080b5a0 g     F .text	00000078 _lseek_r
0081712c g       *ABS*	00000000 __flash_rwdata_start
0080af04 g     F .text	000000a0 __sflags
00811378 g     F .text	00000088 __eqdf2
00818eac g       *ABS*	00000000 __alt_heap_start
00805230 g     F .text	00000044 printf
00800f18 g     F .text	00000334 pgmwrite
00805728 g     F .text	00000068 __sseek
0080346c g     F .text	000000a4 __sinit
0080b500 g     F .text	00000084 _setlocale_r
0080356c g     F .text	0000009c __sfmoreglue
00805c50 g     F .text	0000001c ungetc
00812500 g     F .text	00000020 __malloc_unlock
008139dc g     F .text	00000154 alt_hostfs_open
0080d200 g     F .text	000015cc _strtod_r
00818c74 g     O .bss	00000004 altera_avalon_timer_ts_freq
0080b718 g     F .text	000000e0 memmove
0080355c g     F .text	00000010 _cleanup
0080bd78 g     F .text	000000bc _Balloc
00811488 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01080000 g     F .entry	0000001c __reset
00812abc g     F .text	00000094 times
00800000 g       *ABS*	00000000 __flash_exceptions_start
008043c0 g     F .text	00000074 _fstat_r
00818c48 g     O .bss	00000004 errno
00805588 g     F .text	00000014 __srget
00809234 g     F .text	00000024 __svfscanf
00811ba8 g     F .text	0000002c __make_fp
00818c68 g     O .bss	00000004 alt_argv
0081f0a0 g       *ABS*	00000000 _gp
00803f1c g     F .text	00000044 fscanf
008033e0 g     F .text	00000024 fgets
00815e98 g     O .rwdata	00000180 alt_fd_list
00813cc4 g     F .text	000000a0 alt_hostfs_seek
00814228 g     F .text	00000094 alt_find_dev
00805080 g     F .text	000000a0 memcpy
008059d0 g     F .text	00000008 _times_r
0080fd70 g     F .text	00000248 __hexnan
00803550 g     F .text	0000000c _cleanup_r
008116a8 g     F .text	000000f8 __floatsidf
008143dc g     F .text	00000090 alt_fs_reg
00814910 g     F .text	00000078 alt_io_redirect
00811598 g     F .text	00000088 __ltdf2
00805348 g     F .text	00000014 puts
0080b698 g     F .text	00000040 mbrtowc
00809258 g     F .text	00000068 _vfscanf_r
0080bb54 g     F .text	000000b0 __ratio
00813478 g     F .text	00000224 altera_avalon_jtag_uart_read
00804848 g     F .text	00000014 malloc
00805274 g     F .text	00000034 _printf_r
00811a28 g     F .text	00000008 __udivsi3
00812120 g     F .text	000000c4 isatty
0080b4b0 g     F .text	0000002c iswspace
00815460 g     O .rodata	000000c8 __mprec_tens
0080b4dc g     F .text	00000008 __locale_charset
008100dc g     F .text	000000a4 __fixunsdfsi
008009b4 g     F .text	0000009c eatWhitespaces
00814b4c g     F .text	00000090 alt_icache_flush
00818c4c g     O .bss	00000004 __malloc_top_pad
0080f0d8 g     F .text	00000024 strtoul
008170b4 g     O .rwdata	00000004 __mb_cur_max
0080b4e4 g     F .text	0000000c _localeconv_r
0080f0fc g     F .text	000002f0 _strtoull_r
0080c4dc g     F .text	0000003c __i2b
0080afa4 g     F .text	0000049c __sfvwrite_r
0080559c g     F .text	00000070 _sbrk_r
00813b84 g     F .text	000000a0 alt_hostfs_read
0080c884 g     F .text	00000078 _read_r
00815e3c g     O .rwdata	0000000c __lc_ctype
008170cc g     O .rwdata	00000004 alt_max_fd
00802b74 g     F .text	00000138 __unpack_d
00802e1c g     F .text	00000110 _fclose_r
0080313c g     F .text	00000034 fflush
00818c50 g     O .bss	00000004 __malloc_max_sbrked_mem
00803208 g     F .text	00000090 _fgetc_r
00802348 g     F .text	00000074 __adddf3
00810e4c g     F .text	00000078 __nesf2
0080ba34 g     F .text	00000120 __b2d
008107ec g     F .text	00000660 __umoddi3
00812330 g     F .text	000000f4 lseek
008170a8 g     O .rwdata	00000004 _global_impure_ptr
0080c8fc g     F .text	000005f4 _realloc_r
00818eac g       *ABS*	00000000 __bss_end
00814740 g     F .text	000000f8 alt_iic_isr_register
00814a20 g     F .text	0000010c alt_tick
00818cac g     O .bss	00000100 __hexdig
00810180 g     F .text	0000066c __udivdi3
00815528 g     O .rodata	00000028 __mprec_bigtens
0080c764 g     F .text	00000120 __s2b
00802614 g     F .text	00000194 __floatunsidf
0080b954 g     F .text	00000060 __mcmp
008170a0 g     O .rwdata	00000004 __ctype_ptr
00803538 g     F .text	00000018 __fp_lock_all
008146f8 g     F .text	00000048 alt_ic_irq_enabled
00814988 g     F .text	00000098 alt_alarm_stop
0080eb5c g     F .text	00000024 strtol
0080090c g     F .text	000000a8 eatCommsWhitespaces
00818c78 g     O .bss	00000004 alt_irq_active
00813b30 g     F .text	00000054 alt_hostfs_close
01108000 g       *ABS*	00000000 __alt_mem_onchip_mem
010800ec g     F .exceptions	000000c8 alt_irq_handler
00815e70 g     O .rwdata	00000028 alt_dev_null
00811a38 g     F .text	000000c8 __unpack_f
008140d0 g     F .text	00000044 alt_dcache_flush_all
0080b820 g     F .text	00000070 __hi0bits
008117a0 g     F .text	000000d8 __fixdfsi
00802cac g     F .text	0000001c calloc
0080e8f0 g     F .text	0000001c strtod
0081712c g       *ABS*	00000000 __ram_rwdata_end
008170c4 g     O .rwdata	00000008 alt_dev_list
00812bb0 g     F .text	00000124 write
00810ec4 g     F .text	00000078 __gtsf2
00815610 g       *ABS*	00000000 __ram_rodata_end
00811fe8 g     F .text	000000d8 fstat
00803808 g     F .text	0000002c fprintf
00811620 g     F .text	00000088 __ledf2
0080c644 g     F .text	00000120 __pow5mult
00818c58 g     O .bss	00000004 __nlocale_changed
00811a30 g     F .text	00000008 __umodsi3
00818eac g       *ABS*	00000000 end
00811c9c g     F .text	00000160 __pack_f
0080439c g     F .text	00000024 fseek
00812f78 g     F .text	000000c0 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081394c g     F .text	00000090 alt_avalon_timer_sc_init
008027e0 g     F .text	00000080 __clzsi2
0081369c g     F .text	00000240 altera_avalon_jtag_uart_write
0080345c g     F .text	00000004 __sfp_lock_acquire
00804f9c g     F .text	000000e4 memchr
00805cc4 g     F .text	00001ec4 ___vfprintf_internal_r
0080d09c g     F .text	00000060 _sprintf_r
00803be0 g     F .text	00000314 _free_r
0080553c g     F .text	0000004c __srget_r
008094ec g     F .text	000001b0 __call_exitprocs
00818c5c g     O .bss	00000004 __mlocale_changed
008170b0 g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000004c _start
00818c7c g     O .bss	00000004 _alt_tick_rate
0080eb80 g     F .text	00000318 _strtoll_r
0080c13c g     F .text	0000014c __lshift
00818c80 g     O .bss	00000004 _alt_nticks
00812804 g     F .text	00000124 read
00812d68 g     F .text	00000090 alt_sys_init
008051b8 g     F .text	00000078 _open_r
008058e0 g     F .text	000000f0 strncmp
0080c288 g     F .text	00000254 __multiply
00813310 g     F .text	00000074 altera_avalon_jtag_uart_close
008027a8 g     F .text	00000038 __mulsi3
00815610 g       *ABS*	00000000 __ram_rwdata_start
00814c54 g       *ABS*	00000000 __ram_rodata_start
00818c84 g     O .bss	00000028 __malloc_current_mallinfo
0080be34 g     F .text	0000017c __d2b
00812e30 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080ee98 g     F .text	00000240 _strtoul_r
0081446c g     F .text	000000d0 alt_get_fd
00811bd4 g     F .text	000000c8 __fpcmp_parts_d
0080969c g     F .text	00000070 _close_r
00814bdc g     F .text	00000074 memcmp
00812ee0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818eac g       *ABS*	00000000 __alt_stack_base
00812f28 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008045b4 g     F .text	000000ac _fwrite_r
0080569c g     F .text	00000084 sscanf
008093ac g     F .text	0000013c __swsetup_r
00800848 g     F .text	000000c4 readToWhitespace
008023bc g     F .text	00000258 __divdf3
00803608 g     F .text	000000f0 __sfp
0080bc98 g     F .text	00000058 __copybits
00815a34 g     O .rwdata	00000408 __malloc_av_
00803468 g     F .text	00000004 __sinit_lock_release
00810fb4 g     F .text	000003c4 __muldf3
0080580c g     F .text	00000060 __sread
00803a74 g     F .text	00000040 fread
008142bc g     F .text	00000120 alt_find_file
00814114 g     F .text	000000b4 alt_dev_llist_insert
008124e0 g     F .text	00000020 __malloc_lock
00803834 g     F .text	00000034 _fprintf_r
00812a00 g     F .text	000000bc sbrk
00802f40 g     F .text	000001fc _fflush_r
00802cc8 g     F .text	000000c8 _calloc_r
008037ec g     F .text	0000001c fopen
00818c48 g       *ABS*	00000000 __bss_start
00803ef4 g     F .text	00000028 _fscanf_r
00805120 g     F .text	00000098 memset
00800648 g     F .text	00000200 main
00818c6c g     O .bss	00000004 alt_envp
00818c54 g     O .bss	00000004 __malloc_max_total_mem
00812e88 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00810f3c g     F .text	00000078 __ltsf2
00803868 g     F .text	0000020c _fread_r
00800ad4 g     F .text	00000444 pgmread
00805720 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802f2c g     F .text	00000014 fclose
0080e90c g     F .text	00000250 _strtol_r
00811878 g     F .text	00000074 __truncdfsf2
00809950 g     F .text	000015b4 _dtoa_r
0080485c g     F .text	00000740 _malloc_r
008170d0 g     O .rwdata	00000004 alt_errno
008059d8 g     F .text	000000dc __submore
008044fc g     F .text	000000b8 _fwalk
00803298 g     F .text	00000148 _fgets_r
0080b6d8 g     F .text	00000040 _mbtowc_r
00811968 g     F .text	00000060 __divsi3
00814fc8 g     O .rodata	00000014 __thenan_df
00803ab4 g     F .text	0000012c _malloc_trim_r
0080d0fc g     F .text	000000bc strcmp
00814c54 g       *ABS*	00000000 __flash_rodata_start
00811400 g     F .text	00000088 __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00812d34 g     F .text	00000034 alt_irq_init
00812988 g     F .text	00000078 alt_release_fd
00803170 g     F .text	00000098 fgetc
0080d028 g     F .text	00000074 sprintf
00814fdc g     O .rodata	00000100 __clz_tab
00818c60 g     O .bss	00000004 _PathLocale
00815610 g     O .rwdata	00000024 kernel
0080e7cc g     F .text	00000124 strtof
00809334 g     F .text	00000078 _write_r
0080b584 g     F .text	0000001c setlocale
0080d020 g     F .text	00000008 nanf
008170a4 g     O .rwdata	00000004 _impure_ptr
00818c64 g     O .bss	00000004 alt_argc
0080b618 g     F .text	00000080 _mbrtowc_r
00818c70 g     O .bss	00000004 altera_avalon_timer_ts_base
00803f60 g     F .text	0000043c _fseek_r
0080535c g     F .text	000001c4 __srefill_r
01080020 g       .exceptions	00000000 alt_irq_entry
0080b9b4 g     F .text	00000080 __ulp
0080cef0 g     F .text	00000040 __isinfd
00803520 g     F .text	00000018 __fp_unlock_all
008170bc g     O .rwdata	00000008 alt_fs_list
00813c24 g     F .text	000000a0 alt_hostfs_write
01080020 g       *ABS*	00000000 __ram_exceptions_start
0080b4f0 g     F .text	00000010 localeconv
0081456c g     F .text	00000050 alt_ic_isr_register
00804660 g     F .text	00000040 fwrite
0080f410 g     F .text	00000068 __hexdig_init
00805614 g     F .text	00000088 _sscanf_r
00801a34 g     F .text	00000484 ppmwrite2
0081712c g       *ABS*	00000000 _edata
00818eac g       *ABS*	00000000 _end
010801b4 g       *ABS*	00000000 __ram_exceptions_end
008092c0 g     F .text	00000074 vfscanf
00813384 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00814658 g     F .text	000000a0 alt_ic_irq_disable
008016e0 g     F .text	00000354 pgmwrite2
00805790 g     F .text	0000007c __swrite
008170ac g     O .rwdata	00000004 __malloc_trim_threshold
00814b2c g     F .text	00000020 altera_nios2_qsys_irq_init
00802de4 g     F .text	00000038 exit
00804434 g     F .text	000000c8 _fwalk_reent
0080bfb0 g     F .text	0000018c __mdiff
008119c8 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
00803460 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080cf60 g     F .text	000000c0 __sccl
008150dc g     O .rodata	00000101 _ctype_
00811b00 g     F .text	000000a8 __fpcmp_parts_f
008036f8 g     F .text	000000f4 _fopen_r
0080cf30 g     F .text	00000030 __isnand
00811fc8 g     F .text	00000020 _exit
00813f7c g     F .text	00000154 alt_alarm_start
0080ffb8 g     F .text	00000124 __muldi3
008046a0 g     F .text	00000194 __smakebuf_r
0080586c g     F .text	00000074 strlen
00812618 g     F .text	0000018c open
00811510 g     F .text	00000088 __gedf2
008001e0 g     F .text	00000468 gaussian_filter
0080f528 g     F .text	000007fc __gethex
00802d90 g     F .text	00000054 clock
0081453c g     F .text	00000030 alt_icache_flush_all
00800a50 g     F .text	00000084 eatComments
00817120 g     O .rwdata	00000004 alt_priority_mask
008145bc g     F .text	0000009c alt_ic_irq_enable
00807b88 g     F .text	00000024 __vfprintf_internal
008022c8 g     F .text	00000080 __subdf3
0080124c g     F .text	00000494 pgmread2
0080b890 g     F .text	000000c4 __lo0bits
00807bac g     F .text	00001688 __svfscanf_r
00817124 g     O .rwdata	00000008 alt_alarm_list
00805ab4 g     F .text	0000019c _ungetc_r
00811dfc g     F .text	00000100 close
00812244 g     F .text	00000080 alt_load
00802860 g     F .text	00000314 __pack_d
00804834 g     F .text	00000014 free
00803464 g     F .text	00000004 __sinit_lock_acquire
0080c518 g     F .text	0000012c __multadd
0080b7f8 g     F .text	00000028 _Bfree
00813d64 g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1080014:	08406514 	ori	at,at,404
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

01080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1080044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800ec0 	call	10800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000306 	br	1080098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800e8:	ef80083a 	eret

010800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800ec:	defff904 	addi	sp,sp,-28
 10800f0:	dfc00615 	stw	ra,24(sp)
 10800f4:	df000515 	stw	fp,20(sp)
 10800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10800fc:	0005313a 	rdctl	r2,ipending
 1080100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1080104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1080108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 108010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080110:	00800044 	movi	r2,1
 1080114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1080118:	e0ffff17 	ldw	r3,-4(fp)
 108011c:	e0bffe17 	ldw	r2,-8(fp)
 1080120:	1884703a 	and	r2,r3,r2
 1080124:	1005003a 	cmpeq	r2,r2,zero
 1080128:	1000161e 	bne	r2,zero,1080184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 108012c:	e0bffd17 	ldw	r2,-12(fp)
 1080130:	00c020b4 	movhi	r3,130
 1080134:	18e36b04 	addi	r3,r3,-29268
 1080138:	100490fa 	slli	r2,r2,3
 108013c:	10c5883a 	add	r2,r2,r3
 1080140:	11400017 	ldw	r5,0(r2)
 1080144:	e0bffd17 	ldw	r2,-12(fp)
 1080148:	00c020b4 	movhi	r3,130
 108014c:	18e36b04 	addi	r3,r3,-29268
 1080150:	100490fa 	slli	r2,r2,3
 1080154:	10c5883a 	add	r2,r2,r3
 1080158:	10800104 	addi	r2,r2,4
 108015c:	11000017 	ldw	r4,0(r2)
 1080160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080164:	0005313a 	rdctl	r2,ipending
 1080168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 108016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1080170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1080174:	e0bfff17 	ldw	r2,-4(fp)
 1080178:	1004c03a 	cmpne	r2,r2,zero
 108017c:	103fe31e 	bne	r2,zero,108010c <alt_irq_handler+0x20>
 1080180:	00000706 	br	10801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1080184:	e0bffe17 	ldw	r2,-8(fp)
 1080188:	1085883a 	add	r2,r2,r2
 108018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1080190:	e0bffd17 	ldw	r2,-12(fp)
 1080194:	10800044 	addi	r2,r2,1
 1080198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 108019c:	003fde06 	br	1080118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10801a0:	e037883a 	mov	sp,fp
 10801a4:	dfc00117 	ldw	ra,4(sp)
 10801a8:	df000017 	ldw	fp,0(sp)
 10801ac:	dec00204 	addi	sp,sp,8
 10801b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a0:	00bffd16 	blt	zero,r2,800198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001ac:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b0:	d6bc2814 	ori	gp,gp,61600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b8:	10a31214 	ori	r2,r2,35912

    movhi r3, %hi(__bss_end)
  8001bc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c0:	18e3ab14 	ori	r3,r3,36524

    beq r2, r3, 1f
  8001c4:	10c00326 	beq	r2,r3,8001d4 <_start+0x40>

0:
    stw zero, (r2)
  8001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d0:	10fffd36 	bltu	r2,r3,8001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d4:	08122440 	call	812244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d8:	08124840 	call	812484 <alt_main>

008001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001dc:	003fff06 	br	8001dc <alt_after_alt_main>

008001e0 <gaussian_filter>:

int kernel[3][3] = {{1, 2, 1},
                    {2, 4, 2},
                    {1, 2, 1}};

void gaussian_filter(char* input_image, char* output_image) {
  8001e0:	deffe404 	addi	sp,sp,-112
  8001e4:	dfc01b15 	stw	ra,108(sp)
  8001e8:	df001a15 	stw	fp,104(sp)
  8001ec:	dc001915 	stw	r16,100(sp)
  8001f0:	df001904 	addi	fp,sp,100
  8001f4:	e13ffc15 	stw	r4,-16(fp)
  8001f8:	e17ffd15 	stw	r5,-12(fp)
  int row, col;

  printf("Leyendo imagen\n");
  8001fc:	01002074 	movhi	r4,129
  800200:	21131504 	addi	r4,r4,19540
  800204:	08053480 	call	805348 <puts>
  clock_t start_read_image = clock();
  800208:	0802d900 	call	802d90 <clock>
  80020c:	e0bff915 	stw	r2,-28(fp)
  unsigned char** data = pgmread2(input_image, &row, &col);
  800210:	e17ffa04 	addi	r5,fp,-24
  800214:	e1bffb04 	addi	r6,fp,-20
  800218:	e13ffc17 	ldw	r4,-16(fp)
  80021c:	080124c0 	call	80124c <pgmread2>
  800220:	e0bff815 	stw	r2,-32(fp)
  clock_t end_read_image = clock();
  800224:	0802d900 	call	802d90 <clock>
  800228:	e0bff715 	stw	r2,-36(fp)
  printf("Tiempo que tardo en leer la imagen: %2.3f seg\n", (double)(end_read_image - start_read_image) / CLOCKS_PER_SEC);
  80022c:	e0fff717 	ldw	r3,-36(fp)
  800230:	e0bff917 	ldw	r2,-28(fp)
  800234:	1889c83a 	sub	r4,r3,r2
  800238:	08026140 	call	802614 <__floatunsidf>
  80023c:	100b883a 	mov	r5,r2
  800240:	180d883a 	mov	r6,r3
  800244:	2809883a 	mov	r4,r5
  800248:	300b883a 	mov	r5,r6
  80024c:	000d883a 	mov	r6,zero
  800250:	01d023f4 	movhi	r7,16527
  800254:	39d00004 	addi	r7,r7,16384
  800258:	08023bc0 	call	8023bc <__divdf3>
  80025c:	1009883a 	mov	r4,r2
  800260:	180b883a 	mov	r5,r3
  800264:	2005883a 	mov	r2,r4
  800268:	2807883a 	mov	r3,r5
  80026c:	01002074 	movhi	r4,129
  800270:	21131904 	addi	r4,r4,19556
  800274:	100b883a 	mov	r5,r2
  800278:	180d883a 	mov	r6,r3
  80027c:	08052300 	call	805230 <printf>
  if (!data) {
  800280:	e0bff817 	ldw	r2,-32(fp)
  800284:	1004c03a 	cmpne	r2,r2,zero
  800288:	1000041e 	bne	r2,zero,80029c <gaussian_filter+0xbc>
    printf("Error abriendo imagen\n");
  80028c:	01002074 	movhi	r4,129
  800290:	21132504 	addi	r4,r4,19604
  800294:	08053480 	call	805348 <puts>
    return;
  800298:	0000e506 	br	800630 <gaussian_filter+0x450>
  }

  clock_t start_filtro = clock();
  80029c:	0802d900 	call	802d90 <clock>
  8002a0:	e0bff615 	stw	r2,-40(fp)
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  8002a4:	e0bffa17 	ldw	r2,-24(fp)
  8002a8:	1085883a 	add	r2,r2,r2
  8002ac:	1085883a 	add	r2,r2,r2
  8002b0:	10bffe04 	addi	r2,r2,-8
  8002b4:	1009883a 	mov	r4,r2
  8002b8:	08048480 	call	804848 <malloc>
  8002bc:	e0bff515 	stw	r2,-44(fp)
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  8002c0:	e03ff415 	stw	zero,-48(fp)
  8002c4:	00000e06 	br	800300 <gaussian_filter+0x120>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  8002c8:	e0bff417 	ldw	r2,-48(fp)
  8002cc:	1085883a 	add	r2,r2,r2
  8002d0:	1085883a 	add	r2,r2,r2
  8002d4:	1007883a 	mov	r3,r2
  8002d8:	e0bff517 	ldw	r2,-44(fp)
  8002dc:	18a1883a 	add	r16,r3,r2
  8002e0:	e0bffb17 	ldw	r2,-20(fp)
  8002e4:	10bfff84 	addi	r2,r2,-2
  8002e8:	1009883a 	mov	r4,r2
  8002ec:	08048480 	call	804848 <malloc>
  8002f0:	80800015 	stw	r2,0(r16)
  }

  clock_t start_filtro = clock();
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  8002f4:	e0bff417 	ldw	r2,-48(fp)
  8002f8:	10800044 	addi	r2,r2,1
  8002fc:	e0bff415 	stw	r2,-48(fp)
  800300:	e0bffa17 	ldw	r2,-24(fp)
  800304:	10ffff84 	addi	r3,r2,-2
  800308:	e0bff417 	ldw	r2,-48(fp)
  80030c:	10ffee16 	blt	r2,r3,8002c8 <gaussian_filter+0xe8>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
  800310:	00800044 	movi	r2,1
  800314:	e0bff415 	stw	r2,-48(fp)
  800318:	00005906 	br	800480 <gaussian_filter+0x2a0>
    for (j = 1; j < col - 1; j++) {
  80031c:	00800044 	movi	r2,1
  800320:	e0bff315 	stw	r2,-52(fp)
  800324:	00004f06 	br	800464 <gaussian_filter+0x284>
      int sum = 0;
  800328:	e03fe915 	stw	zero,-92(fp)
      for (k = 0; k < 3; k++) {
  80032c:	e03ff215 	stw	zero,-56(fp)
  800330:	00002e06 	br	8003ec <gaussian_filter+0x20c>
        for (l = 0; l < 3; l++) {
  800334:	e03ff115 	stw	zero,-60(fp)
  800338:	00002606 	br	8003d4 <gaussian_filter+0x1f4>
          sum += data[i - 1 + k][j - 1 + l] * kernel[k][l];
  80033c:	e0fff417 	ldw	r3,-48(fp)
  800340:	e0bff217 	ldw	r2,-56(fp)
  800344:	1885883a 	add	r2,r3,r2
  800348:	1085883a 	add	r2,r2,r2
  80034c:	1085883a 	add	r2,r2,r2
  800350:	1007883a 	mov	r3,r2
  800354:	e0bff817 	ldw	r2,-32(fp)
  800358:	1885883a 	add	r2,r3,r2
  80035c:	10bfff04 	addi	r2,r2,-4
  800360:	11000017 	ldw	r4,0(r2)
  800364:	e0fff317 	ldw	r3,-52(fp)
  800368:	e0bff117 	ldw	r2,-60(fp)
  80036c:	1885883a 	add	r2,r3,r2
  800370:	2085883a 	add	r2,r4,r2
  800374:	10bfffc4 	addi	r2,r2,-1
  800378:	10800003 	ldbu	r2,0(r2)
  80037c:	11803fcc 	andi	r6,r2,255
  800380:	e0fff217 	ldw	r3,-56(fp)
  800384:	e13ff117 	ldw	r4,-60(fp)
  800388:	01402074 	movhi	r5,129
  80038c:	29558404 	addi	r5,r5,22032
  800390:	1805883a 	mov	r2,r3
  800394:	1085883a 	add	r2,r2,r2
  800398:	10c5883a 	add	r2,r2,r3
  80039c:	1105883a 	add	r2,r2,r4
  8003a0:	1085883a 	add	r2,r2,r2
  8003a4:	1085883a 	add	r2,r2,r2
  8003a8:	1145883a 	add	r2,r2,r5
  8003ac:	11400017 	ldw	r5,0(r2)
  8003b0:	3009883a 	mov	r4,r6
  8003b4:	08027a80 	call	8027a8 <__mulsi3>
  8003b8:	1007883a 	mov	r3,r2
  8003bc:	e0bfe917 	ldw	r2,-92(fp)
  8003c0:	10c5883a 	add	r2,r2,r3
  8003c4:	e0bfe915 	stw	r2,-92(fp)
  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
      int sum = 0;
      for (k = 0; k < 3; k++) {
        for (l = 0; l < 3; l++) {
  8003c8:	e0bff117 	ldw	r2,-60(fp)
  8003cc:	10800044 	addi	r2,r2,1
  8003d0:	e0bff115 	stw	r2,-60(fp)
  8003d4:	e0bff117 	ldw	r2,-60(fp)
  8003d8:	108000d0 	cmplti	r2,r2,3
  8003dc:	103fd71e 	bne	r2,zero,80033c <gaussian_filter+0x15c>

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
      int sum = 0;
      for (k = 0; k < 3; k++) {
  8003e0:	e0bff217 	ldw	r2,-56(fp)
  8003e4:	10800044 	addi	r2,r2,1
  8003e8:	e0bff215 	stw	r2,-56(fp)
  8003ec:	e0bff217 	ldw	r2,-56(fp)
  8003f0:	108000d0 	cmplti	r2,r2,3
  8003f4:	103fcf1e 	bne	r2,zero,800334 <gaussian_filter+0x154>
        for (l = 0; l < 3; l++) {
          sum += data[i - 1 + k][j - 1 + l] * kernel[k][l];
        }
      }
      output[i - 1][j - 1] = sum / 16;  // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
  8003f8:	e0bff417 	ldw	r2,-48(fp)
  8003fc:	1085883a 	add	r2,r2,r2
  800400:	1085883a 	add	r2,r2,r2
  800404:	1007883a 	mov	r3,r2
  800408:	e0bff517 	ldw	r2,-44(fp)
  80040c:	1885883a 	add	r2,r3,r2
  800410:	10bfff04 	addi	r2,r2,-4
  800414:	10c00017 	ldw	r3,0(r2)
  800418:	e0bff317 	ldw	r2,-52(fp)
  80041c:	1885883a 	add	r2,r3,r2
  800420:	10bfffc4 	addi	r2,r2,-1
  800424:	e0bffe15 	stw	r2,-8(fp)
  800428:	e0bfe917 	ldw	r2,-92(fp)
  80042c:	e0bfff15 	stw	r2,-4(fp)
  800430:	e0ffff17 	ldw	r3,-4(fp)
  800434:	1804403a 	cmpge	r2,r3,zero
  800438:	1000031e 	bne	r2,zero,800448 <gaussian_filter+0x268>
  80043c:	e0bfff17 	ldw	r2,-4(fp)
  800440:	108003c4 	addi	r2,r2,15
  800444:	e0bfff15 	stw	r2,-4(fp)
  800448:	e0ffff17 	ldw	r3,-4(fp)
  80044c:	1805d13a 	srai	r2,r3,4
  800450:	e0fffe17 	ldw	r3,-8(fp)
  800454:	18800005 	stb	r2,0(r3)
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
  800458:	e0bff317 	ldw	r2,-52(fp)
  80045c:	10800044 	addi	r2,r2,1
  800460:	e0bff315 	stw	r2,-52(fp)
  800464:	e0bffb17 	ldw	r2,-20(fp)
  800468:	10ffffc4 	addi	r3,r2,-1
  80046c:	e0bff317 	ldw	r2,-52(fp)
  800470:	10ffad16 	blt	r2,r3,800328 <gaussian_filter+0x148>
  for (i = 0; i < row - 2; i++) {
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
  800474:	e0bff417 	ldw	r2,-48(fp)
  800478:	10800044 	addi	r2,r2,1
  80047c:	e0bff415 	stw	r2,-48(fp)
  800480:	e0bffa17 	ldw	r2,-24(fp)
  800484:	10ffffc4 	addi	r3,r2,-1
  800488:	e0bff417 	ldw	r2,-48(fp)
  80048c:	10ffa316 	blt	r2,r3,80031c <gaussian_filter+0x13c>
        }
      }
      output[i - 1][j - 1] = sum / 16;  // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
    }
  }
  clock_t end_filtro = clock();
  800490:	0802d900 	call	802d90 <clock>
  800494:	e0bff015 	stw	r2,-64(fp)

  double tiempo_filtro = (double)(end_filtro - start_filtro) / CLOCKS_PER_SEC;
  800498:	e0fff017 	ldw	r3,-64(fp)
  80049c:	e0bff617 	ldw	r2,-40(fp)
  8004a0:	1889c83a 	sub	r4,r3,r2
  8004a4:	08026140 	call	802614 <__floatunsidf>
  8004a8:	100b883a 	mov	r5,r2
  8004ac:	180d883a 	mov	r6,r3
  8004b0:	2809883a 	mov	r4,r5
  8004b4:	300b883a 	mov	r5,r6
  8004b8:	000d883a 	mov	r6,zero
  8004bc:	01d023f4 	movhi	r7,16527
  8004c0:	39d00004 	addi	r7,r7,16384
  8004c4:	08023bc0 	call	8023bc <__divdf3>
  8004c8:	1009883a 	mov	r4,r2
  8004cc:	180b883a 	mov	r5,r3
  8004d0:	e13fee15 	stw	r4,-72(fp)
  8004d4:	e17fef15 	stw	r5,-68(fp)
  double minutos_filtro = tiempo_filtro / 60;
  8004d8:	e13fee17 	ldw	r4,-72(fp)
  8004dc:	e17fef17 	ldw	r5,-68(fp)
  8004e0:	000d883a 	mov	r6,zero
  8004e4:	01d013b4 	movhi	r7,16462
  8004e8:	08023bc0 	call	8023bc <__divdf3>
  8004ec:	1009883a 	mov	r4,r2
  8004f0:	180b883a 	mov	r5,r3
  8004f4:	e13fec15 	stw	r4,-80(fp)
  8004f8:	e17fed15 	stw	r5,-76(fp)
  printf("Tiempo ejecucion de solo el filtro: %2.3f segundos y %.2f minutos\n", tiempo_filtro, minutos_filtro);
  8004fc:	e0bfed17 	ldw	r2,-76(fp)
  800500:	d8800015 	stw	r2,0(sp)
  800504:	e1ffec17 	ldw	r7,-80(fp)
  800508:	01002074 	movhi	r4,129
  80050c:	21132b04 	addi	r4,r4,19628
  800510:	e17fee17 	ldw	r5,-72(fp)
  800514:	e1bfef17 	ldw	r6,-68(fp)
  800518:	08052300 	call	805230 <printf>

  printf("Guardando imagen...\n");
  80051c:	01002074 	movhi	r4,129
  800520:	21133c04 	addi	r4,r4,19696
  800524:	08053480 	call	805348 <puts>
  clock_t start_write_image = clock();
  800528:	0802d900 	call	802d90 <clock>
  80052c:	e0bfeb15 	stw	r2,-84(fp)
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  800530:	e0bffa17 	ldw	r2,-24(fp)
  800534:	117fff84 	addi	r5,r2,-2
  800538:	e0bffb17 	ldw	r2,-20(fp)
  80053c:	11bfff84 	addi	r6,r2,-2
  800540:	00802074 	movhi	r2,129
  800544:	10934104 	addi	r2,r2,19716
  800548:	d8800015 	stw	r2,0(sp)
  80054c:	00800044 	movi	r2,1
  800550:	d8800115 	stw	r2,4(sp)
  800554:	e13ffd17 	ldw	r4,-12(fp)
  800558:	e1fff517 	ldw	r7,-44(fp)
  80055c:	08016e00 	call	8016e0 <pgmwrite2>
  clock_t end_write_image = clock();
  800560:	0802d900 	call	802d90 <clock>
  800564:	e0bfea15 	stw	r2,-88(fp)
  printf("Tiempo que tardo en leer la imagen: %2.3f seg\n", (double)(end_write_image - start_write_image) / CLOCKS_PER_SEC);
  800568:	e0ffea17 	ldw	r3,-88(fp)
  80056c:	e0bfeb17 	ldw	r2,-84(fp)
  800570:	1889c83a 	sub	r4,r3,r2
  800574:	08026140 	call	802614 <__floatunsidf>
  800578:	100b883a 	mov	r5,r2
  80057c:	180d883a 	mov	r6,r3
  800580:	2809883a 	mov	r4,r5
  800584:	300b883a 	mov	r5,r6
  800588:	000d883a 	mov	r6,zero
  80058c:	01d023f4 	movhi	r7,16527
  800590:	39d00004 	addi	r7,r7,16384
  800594:	08023bc0 	call	8023bc <__divdf3>
  800598:	1009883a 	mov	r4,r2
  80059c:	180b883a 	mov	r5,r3
  8005a0:	2005883a 	mov	r2,r4
  8005a4:	2807883a 	mov	r3,r5
  8005a8:	01002074 	movhi	r4,129
  8005ac:	21131904 	addi	r4,r4,19556
  8005b0:	100b883a 	mov	r5,r2
  8005b4:	180d883a 	mov	r6,r3
  8005b8:	08052300 	call	805230 <printf>

  for (i = 0; i < row - 2; i++) {
  8005bc:	e03ff415 	stw	zero,-48(fp)
  8005c0:	00001306 	br	800610 <gaussian_filter+0x430>
    free(data[i]);
  8005c4:	e0bff417 	ldw	r2,-48(fp)
  8005c8:	1085883a 	add	r2,r2,r2
  8005cc:	1085883a 	add	r2,r2,r2
  8005d0:	1007883a 	mov	r3,r2
  8005d4:	e0bff817 	ldw	r2,-32(fp)
  8005d8:	1885883a 	add	r2,r3,r2
  8005dc:	11000017 	ldw	r4,0(r2)
  8005e0:	08048340 	call	804834 <free>
    free(output[i]);
  8005e4:	e0bff417 	ldw	r2,-48(fp)
  8005e8:	1085883a 	add	r2,r2,r2
  8005ec:	1085883a 	add	r2,r2,r2
  8005f0:	1007883a 	mov	r3,r2
  8005f4:	e0bff517 	ldw	r2,-44(fp)
  8005f8:	1885883a 	add	r2,r3,r2
  8005fc:	11000017 	ldw	r4,0(r2)
  800600:	08048340 	call	804834 <free>
  clock_t start_write_image = clock();
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  clock_t end_write_image = clock();
  printf("Tiempo que tardo en leer la imagen: %2.3f seg\n", (double)(end_write_image - start_write_image) / CLOCKS_PER_SEC);

  for (i = 0; i < row - 2; i++) {
  800604:	e0bff417 	ldw	r2,-48(fp)
  800608:	10800044 	addi	r2,r2,1
  80060c:	e0bff415 	stw	r2,-48(fp)
  800610:	e0bffa17 	ldw	r2,-24(fp)
  800614:	10ffff84 	addi	r3,r2,-2
  800618:	e0bff417 	ldw	r2,-48(fp)
  80061c:	10ffe916 	blt	r2,r3,8005c4 <gaussian_filter+0x3e4>
    free(data[i]);
    free(output[i]);
  }
  free(data);
  800620:	e13ff817 	ldw	r4,-32(fp)
  800624:	08048340 	call	804834 <free>
  free(output);
  800628:	e13ff517 	ldw	r4,-44(fp)
  80062c:	08048340 	call	804834 <free>
}
  800630:	e037883a 	mov	sp,fp
  800634:	dfc00217 	ldw	ra,8(sp)
  800638:	df000117 	ldw	fp,4(sp)
  80063c:	dc000017 	ldw	r16,0(sp)
  800640:	dec00304 	addi	sp,sp,12
  800644:	f800283a 	ret

00800648 <main>:

int main() {
  800648:	deffeb04 	addi	sp,sp,-84
  80064c:	dfc01415 	stw	ra,80(sp)
  800650:	df001315 	stw	fp,76(sp)
  800654:	dc001215 	stw	r16,72(sp)
  800658:	df001204 	addi	fp,sp,72
  // vector para guardar los tiempos de ejecución
  double tiempos[REPETICIONES];

  int i;

  for (i = 0; i < REPETICIONES; i++) {
  80065c:	e03ff515 	stw	zero,-44(fp)
  800660:	00003b06 	br	800750 <main+0x108>
	printf("Aplicando filtro Gaussiano en la repetición %d...\n", i + 1);
  800664:	e0bff517 	ldw	r2,-44(fp)
  800668:	11400044 	addi	r5,r2,1
  80066c:	01002074 	movhi	r4,129
  800670:	21134804 	addi	r4,r4,19744
  800674:	08052300 	call	805230 <printf>
	clock_t start = clock();
  800678:	0802d900 	call	802d90 <clock>
  80067c:	e0bff015 	stw	r2,-64(fp)
	gaussian_filter(INPUT_FILE, OUTPUT_FILE);
  800680:	01002074 	movhi	r4,129
  800684:	21135504 	addi	r4,r4,19796
  800688:	01402074 	movhi	r5,129
  80068c:	29535b04 	addi	r5,r5,19820
  800690:	08001e00 	call	8001e0 <gaussian_filter>
	clock_t end = clock();
  800694:	0802d900 	call	802d90 <clock>
  800698:	e0bfef15 	stw	r2,-68(fp)
	tiempos[i] = (double)(end - start) / CLOCKS_PER_SEC;
  80069c:	e43ff517 	ldw	r16,-44(fp)
  8006a0:	e0ffef17 	ldw	r3,-68(fp)
  8006a4:	e0bff017 	ldw	r2,-64(fp)
  8006a8:	1889c83a 	sub	r4,r3,r2
  8006ac:	08026140 	call	802614 <__floatunsidf>
  8006b0:	100b883a 	mov	r5,r2
  8006b4:	180d883a 	mov	r6,r3
  8006b8:	2809883a 	mov	r4,r5
  8006bc:	300b883a 	mov	r5,r6
  8006c0:	000d883a 	mov	r6,zero
  8006c4:	01d023f4 	movhi	r7,16527
  8006c8:	39d00004 	addi	r7,r7,16384
  8006cc:	08023bc0 	call	8023bc <__divdf3>
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	180b883a 	mov	r5,r3
  8006d8:	2005883a 	mov	r2,r4
  8006dc:	2807883a 	mov	r3,r5
  8006e0:	800890fa 	slli	r4,r16,3
  8006e4:	e17fef04 	addi	r5,fp,-68
  8006e8:	2149883a 	add	r4,r4,r5
  8006ec:	21000704 	addi	r4,r4,28
  8006f0:	20800015 	stw	r2,0(r4)
  8006f4:	20c00115 	stw	r3,4(r4)
	printf("Tiempo en la repeticion %d: %2.3f", i + 1, tiempos[i]);
  8006f8:	e0bff517 	ldw	r2,-44(fp)
  8006fc:	11400044 	addi	r5,r2,1
  800700:	e0bff517 	ldw	r2,-44(fp)
  800704:	100490fa 	slli	r2,r2,3
  800708:	e0ffef04 	addi	r3,fp,-68
  80070c:	10c5883a 	add	r2,r2,r3
  800710:	11000704 	addi	r4,r2,28
  800714:	20800017 	ldw	r2,0(r4)
  800718:	20c00117 	ldw	r3,4(r4)
  80071c:	01002074 	movhi	r4,129
  800720:	21136304 	addi	r4,r4,19852
  800724:	100d883a 	mov	r6,r2
  800728:	180f883a 	mov	r7,r3
  80072c:	08052300 	call	805230 <printf>
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  800730:	e0bff517 	ldw	r2,-44(fp)
  800734:	11400044 	addi	r5,r2,1
  800738:	01002074 	movhi	r4,129
  80073c:	21136c04 	addi	r4,r4,19888
  800740:	08052300 	call	805230 <printf>
  // vector para guardar los tiempos de ejecución
  double tiempos[REPETICIONES];

  int i;

  for (i = 0; i < REPETICIONES; i++) {
  800744:	e0bff517 	ldw	r2,-44(fp)
  800748:	10800044 	addi	r2,r2,1
  80074c:	e0bff515 	stw	r2,-44(fp)
  800750:	e0bff517 	ldw	r2,-44(fp)
  800754:	10800150 	cmplti	r2,r2,5
  800758:	103fc21e 	bne	r2,zero,800664 <main+0x1c>
	printf("Tiempo en la repeticion %d: %2.3f", i + 1, tiempos[i]);
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  }

  // Calcular el tiempo promedio
  double tiempo_promedio = 0;
  80075c:	e03ff315 	stw	zero,-52(fp)
  800760:	e03ff415 	stw	zero,-48(fp)
  for (i = 0; i < REPETICIONES; i++) {
  800764:	e03ff515 	stw	zero,-44(fp)
  800768:	00001306 	br	8007b8 <main+0x170>
	tiempo_promedio += tiempos[i];
  80076c:	e0bff517 	ldw	r2,-44(fp)
  800770:	100490fa 	slli	r2,r2,3
  800774:	e17fef04 	addi	r5,fp,-68
  800778:	1145883a 	add	r2,r2,r5
  80077c:	11000704 	addi	r4,r2,28
  800780:	20800017 	ldw	r2,0(r4)
  800784:	20c00117 	ldw	r3,4(r4)
  800788:	e13ff317 	ldw	r4,-52(fp)
  80078c:	e17ff417 	ldw	r5,-48(fp)
  800790:	100d883a 	mov	r6,r2
  800794:	180f883a 	mov	r7,r3
  800798:	08023480 	call	802348 <__adddf3>
  80079c:	1009883a 	mov	r4,r2
  8007a0:	180b883a 	mov	r5,r3
  8007a4:	e13ff315 	stw	r4,-52(fp)
  8007a8:	e17ff415 	stw	r5,-48(fp)
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  }

  // Calcular el tiempo promedio
  double tiempo_promedio = 0;
  for (i = 0; i < REPETICIONES; i++) {
  8007ac:	e0bff517 	ldw	r2,-44(fp)
  8007b0:	10800044 	addi	r2,r2,1
  8007b4:	e0bff515 	stw	r2,-44(fp)
  8007b8:	e0bff517 	ldw	r2,-44(fp)
  8007bc:	10800150 	cmplti	r2,r2,5
  8007c0:	103fea1e 	bne	r2,zero,80076c <main+0x124>
	tiempo_promedio += tiempos[i];
  }
  tiempo_promedio /= REPETICIONES;
  8007c4:	e13ff317 	ldw	r4,-52(fp)
  8007c8:	e17ff417 	ldw	r5,-48(fp)
  8007cc:	000d883a 	mov	r6,zero
  8007d0:	01d00534 	movhi	r7,16404
  8007d4:	08023bc0 	call	8023bc <__divdf3>
  8007d8:	1009883a 	mov	r4,r2
  8007dc:	180b883a 	mov	r5,r3
  8007e0:	e13ff315 	stw	r4,-52(fp)
  8007e4:	e17ff415 	stw	r5,-48(fp)
  double minutos_promedio = tiempo_promedio / 60;
  8007e8:	e13ff317 	ldw	r4,-52(fp)
  8007ec:	e17ff417 	ldw	r5,-48(fp)
  8007f0:	000d883a 	mov	r6,zero
  8007f4:	01d013b4 	movhi	r7,16462
  8007f8:	08023bc0 	call	8023bc <__divdf3>
  8007fc:	1009883a 	mov	r4,r2
  800800:	180b883a 	mov	r5,r3
  800804:	e13ff115 	stw	r4,-60(fp)
  800808:	e17ff215 	stw	r5,-56(fp)
  printf("Tiempo promedio de ejecución del programa: %2.3f segundos y %.2f minutos\n", tiempo_promedio, minutos_promedio);
  80080c:	e0bff217 	ldw	r2,-56(fp)
  800810:	d8800015 	stw	r2,0(sp)
  800814:	e1fff117 	ldw	r7,-60(fp)
  800818:	01002074 	movhi	r4,129
  80081c:	21137604 	addi	r4,r4,19928
  800820:	e17ff317 	ldw	r5,-52(fp)
  800824:	e1bff417 	ldw	r6,-48(fp)
  800828:	08052300 	call	805230 <printf>

  return 0;
  80082c:	0005883a 	mov	r2,zero
}
  800830:	e037883a 	mov	sp,fp
  800834:	dfc00217 	ldw	ra,8(sp)
  800838:	df000117 	ldw	fp,4(sp)
  80083c:	dc000017 	ldw	r16,0(sp)
  800840:	dec00304 	addi	sp,sp,12
  800844:	f800283a 	ret

00800848 <readToWhitespace>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in column dominant format
 */
int readToWhitespace(FILE* file, char* cadena, int maxchars) {
  800848:	defff804 	addi	sp,sp,-32
  80084c:	dfc00715 	stw	ra,28(sp)
  800850:	df000615 	stw	fp,24(sp)
  800854:	df000604 	addi	fp,sp,24
  800858:	e13ffd15 	stw	r4,-12(fp)
  80085c:	e17ffe15 	stw	r5,-8(fp)
  800860:	e1bfff15 	stw	r6,-4(fp)
  int c;
  int numread = 0;
  800864:	e03ffb15 	stw	zero,-20(fp)
  char* ptchar = cadena;
  800868:	e0bffe17 	ldw	r2,-8(fp)
  80086c:	e0bffa15 	stw	r2,-24(fp)
  do {
    c = fgetc(file);
  800870:	e13ffd17 	ldw	r4,-12(fp)
  800874:	08031700 	call	803170 <fgetc>
  800878:	e0bffc15 	stw	r2,-16(fp)
    // printf("L:%c\n", c);
    if (c == EOF) break;
  80087c:	e0bffc17 	ldw	r2,-16(fp)
  800880:	10bfffe0 	cmpeqi	r2,r2,-1
  800884:	10001b1e 	bne	r2,zero,8008f4 <readToWhitespace+0xac>
    if (isspace(c)) {  // Devuelve el espacio leido al stream y sale
  800888:	00802074 	movhi	r2,129
  80088c:	109c2804 	addi	r2,r2,28832
  800890:	10c00017 	ldw	r3,0(r2)
  800894:	e0bffc17 	ldw	r2,-16(fp)
  800898:	1885883a 	add	r2,r3,r2
  80089c:	10800003 	ldbu	r2,0(r2)
  8008a0:	10803fcc 	andi	r2,r2,255
  8008a4:	1080020c 	andi	r2,r2,8
  8008a8:	1005003a 	cmpeq	r2,r2,zero
  8008ac:	1000041e 	bne	r2,zero,8008c0 <readToWhitespace+0x78>
      ungetc(c, file);
  8008b0:	e13ffc17 	ldw	r4,-16(fp)
  8008b4:	e17ffd17 	ldw	r5,-12(fp)
  8008b8:	0805c500 	call	805c50 <ungetc>
      break;
  8008bc:	00000d06 	br	8008f4 <readToWhitespace+0xac>
    }
    /* un caracter valido */
    *ptchar++ = (unsigned char)c;
  8008c0:	e0bffc17 	ldw	r2,-16(fp)
  8008c4:	1007883a 	mov	r3,r2
  8008c8:	e0bffa17 	ldw	r2,-24(fp)
  8008cc:	10c00005 	stb	r3,0(r2)
  8008d0:	e0bffa17 	ldw	r2,-24(fp)
  8008d4:	10800044 	addi	r2,r2,1
  8008d8:	e0bffa15 	stw	r2,-24(fp)
    numread++;
  8008dc:	e0bffb17 	ldw	r2,-20(fp)
  8008e0:	10800044 	addi	r2,r2,1
  8008e4:	e0bffb15 	stw	r2,-20(fp)
  } while (numread <= maxchars);
  8008e8:	e0fffb17 	ldw	r3,-20(fp)
  8008ec:	e0bfff17 	ldw	r2,-4(fp)
  8008f0:	10ffdf0e 	bge	r2,r3,800870 <readToWhitespace+0x28>
  return numread;
  8008f4:	e0bffb17 	ldw	r2,-20(fp)
}
  8008f8:	e037883a 	mov	sp,fp
  8008fc:	dfc00117 	ldw	ra,4(sp)
  800900:	df000017 	ldw	fp,0(sp)
  800904:	dec00204 	addi	sp,sp,8
  800908:	f800283a 	ret

0080090c <eatCommsWhitespaces>:

void eatCommsWhitespaces(FILE* file) {
  80090c:	defffb04 	addi	sp,sp,-20
  800910:	dfc00415 	stw	ra,16(sp)
  800914:	df000315 	stw	fp,12(sp)
  800918:	df000304 	addi	fp,sp,12
  80091c:	e13fff15 	stw	r4,-4(fp)
  int c, cc;
  do {
    c = fgetc(file);
  800920:	e13fff17 	ldw	r4,-4(fp)
  800924:	08031700 	call	803170 <fgetc>
  800928:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  80092c:	e0bffe17 	ldw	r2,-8(fp)
  800930:	10bfffe0 	cmpeqi	r2,r2,-1
  800934:	10001a1e 	bne	r2,zero,8009a0 <eatCommsWhitespaces+0x94>
    if (c == '#') {  // Procesar comentario
  800938:	e0bffe17 	ldw	r2,-8(fp)
  80093c:	108008d8 	cmpnei	r2,r2,35
  800940:	10000a1e 	bne	r2,zero,80096c <eatCommsWhitespaces+0x60>
      do {
        cc = fgetc(file);
  800944:	e13fff17 	ldw	r4,-4(fp)
  800948:	08031700 	call	803170 <fgetc>
  80094c:	e0bffd15 	stw	r2,-12(fp)
        if (cc == EOF) return;
  800950:	e0bffd17 	ldw	r2,-12(fp)
  800954:	10bfffe0 	cmpeqi	r2,r2,-1
  800958:	1000111e 	bne	r2,zero,8009a0 <eatCommsWhitespaces+0x94>
      } while (cc != '\n');  // Se asume que no se abre en modo binario (Windows
  80095c:	e0bffd17 	ldw	r2,-12(fp)
  800960:	10800298 	cmpnei	r2,r2,10
  800964:	103ff71e 	bne	r2,zero,800944 <eatCommsWhitespaces+0x38>
                             // compatible)
      break;
  800968:	00000d06 	br	8009a0 <eatCommsWhitespaces+0x94>
    }
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  80096c:	00802074 	movhi	r2,129
  800970:	109c2804 	addi	r2,r2,28832
  800974:	10c00017 	ldw	r3,0(r2)
  800978:	e0bffe17 	ldw	r2,-8(fp)
  80097c:	1885883a 	add	r2,r3,r2
  800980:	10800003 	ldbu	r2,0(r2)
  800984:	10803fcc 	andi	r2,r2,255
  800988:	1080020c 	andi	r2,r2,8
  80098c:	1004c03a 	cmpne	r2,r2,zero
  800990:	103fe31e 	bne	r2,zero,800920 <eatCommsWhitespaces+0x14>
      ungetc(c, file);
  800994:	e13ffe17 	ldw	r4,-8(fp)
  800998:	e17fff17 	ldw	r5,-4(fp)
  80099c:	0805c500 	call	805c50 <ungetc>
      return;
    }
  } while (1);
}
  8009a0:	e037883a 	mov	sp,fp
  8009a4:	dfc00117 	ldw	ra,4(sp)
  8009a8:	df000017 	ldw	fp,0(sp)
  8009ac:	dec00204 	addi	sp,sp,8
  8009b0:	f800283a 	ret

008009b4 <eatWhitespaces>:

int eatWhitespaces(FILE* file, int maxchars) {
  8009b4:	defffa04 	addi	sp,sp,-24
  8009b8:	dfc00515 	stw	ra,20(sp)
  8009bc:	df000415 	stw	fp,16(sp)
  8009c0:	df000404 	addi	fp,sp,16
  8009c4:	e13ffe15 	stw	r4,-8(fp)
  8009c8:	e17fff15 	stw	r5,-4(fp)
  int c;
  int numread = 0;
  8009cc:	e03ffc15 	stw	zero,-16(fp)
  do {
    c = fgetc(file);
  8009d0:	e13ffe17 	ldw	r4,-8(fp)
  8009d4:	08031700 	call	803170 <fgetc>
  8009d8:	e0bffd15 	stw	r2,-12(fp)
    if (c == EOF) break;
  8009dc:	e0bffd17 	ldw	r2,-12(fp)
  8009e0:	10bfffe0 	cmpeqi	r2,r2,-1
  8009e4:	1000141e 	bne	r2,zero,800a38 <eatWhitespaces+0x84>
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  8009e8:	00802074 	movhi	r2,129
  8009ec:	109c2804 	addi	r2,r2,28832
  8009f0:	10c00017 	ldw	r3,0(r2)
  8009f4:	e0bffd17 	ldw	r2,-12(fp)
  8009f8:	1885883a 	add	r2,r3,r2
  8009fc:	10800003 	ldbu	r2,0(r2)
  800a00:	10803fcc 	andi	r2,r2,255
  800a04:	1080020c 	andi	r2,r2,8
  800a08:	1004c03a 	cmpne	r2,r2,zero
  800a0c:	1000041e 	bne	r2,zero,800a20 <eatWhitespaces+0x6c>
      ungetc(c, file);
  800a10:	e13ffd17 	ldw	r4,-12(fp)
  800a14:	e17ffe17 	ldw	r5,-8(fp)
  800a18:	0805c500 	call	805c50 <ungetc>
      break;
  800a1c:	00000606 	br	800a38 <eatWhitespaces+0x84>
    }
    numread++;
  800a20:	e0bffc17 	ldw	r2,-16(fp)
  800a24:	10800044 	addi	r2,r2,1
  800a28:	e0bffc15 	stw	r2,-16(fp)
  } while (numread <= maxchars);
  800a2c:	e0fffc17 	ldw	r3,-16(fp)
  800a30:	e0bfff17 	ldw	r2,-4(fp)
  800a34:	10ffe60e 	bge	r2,r3,8009d0 <eatWhitespaces+0x1c>
  return numread;
  800a38:	e0bffc17 	ldw	r2,-16(fp)
}
  800a3c:	e037883a 	mov	sp,fp
  800a40:	dfc00117 	ldw	ra,4(sp)
  800a44:	df000017 	ldw	fp,0(sp)
  800a48:	dec00204 	addi	sp,sp,8
  800a4c:	f800283a 	ret

00800a50 <eatComments>:

void eatComments(FILE* file) {
  800a50:	defffc04 	addi	sp,sp,-16
  800a54:	dfc00315 	stw	ra,12(sp)
  800a58:	df000215 	stw	fp,8(sp)
  800a5c:	df000204 	addi	fp,sp,8
  800a60:	e13fff15 	stw	r4,-4(fp)
  int c;
  do {  // Procesa cada comentario
    c = fgetc(file);
  800a64:	e13fff17 	ldw	r4,-4(fp)
  800a68:	08031700 	call	803170 <fgetc>
  800a6c:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  800a70:	e0bffe17 	ldw	r2,-8(fp)
  800a74:	10bfffe0 	cmpeqi	r2,r2,-1
  800a78:	1000111e 	bne	r2,zero,800ac0 <eatComments+0x70>
    if (c != '#') {
  800a7c:	e0bffe17 	ldw	r2,-8(fp)
  800a80:	108008e0 	cmpeqi	r2,r2,35
  800a84:	1000041e 	bne	r2,zero,800a98 <eatComments+0x48>
      ungetc(c, file);
  800a88:	e13ffe17 	ldw	r4,-8(fp)
  800a8c:	e17fff17 	ldw	r5,-4(fp)
  800a90:	0805c500 	call	805c50 <ungetc>
      return;
  800a94:	00000a06 	br	800ac0 <eatComments+0x70>
    }  // Procesa el resto del comentario hasta fin de linea
    do {
      c = fgetc(file);
  800a98:	e13fff17 	ldw	r4,-4(fp)
  800a9c:	08031700 	call	803170 <fgetc>
  800aa0:	e0bffe15 	stw	r2,-8(fp)
      if (c == EOF) return;
  800aa4:	e0bffe17 	ldw	r2,-8(fp)
  800aa8:	10bfffe0 	cmpeqi	r2,r2,-1
  800aac:	1000041e 	bne	r2,zero,800ac0 <eatComments+0x70>
    } while (
        c !=
        '\n');  // Se asume que no se abre en modo binario (Windows compatible)
  800ab0:	e0bffe17 	ldw	r2,-8(fp)
  800ab4:	10800298 	cmpnei	r2,r2,10
  800ab8:	103ff71e 	bne	r2,zero,800a98 <eatComments+0x48>
  } while (1);
  800abc:	003fe906 	br	800a64 <eatComments+0x14>
  return;
}
  800ac0:	e037883a 	mov	sp,fp
  800ac4:	dfc00117 	ldw	ra,4(sp)
  800ac8:	df000017 	ldw	fp,0(sp)
  800acc:	dec00204 	addi	sp,sp,8
  800ad0:	f800283a 	ret

00800ad4 <pgmread>:

unsigned char** pgmread(char* filename, int* w, int* h) {
  800ad4:	deffb004 	addi	sp,sp,-320
  800ad8:	dfc04f15 	stw	ra,316(sp)
  800adc:	df004e15 	stw	fp,312(sp)
  800ae0:	dc004d15 	stw	r16,308(sp)
  800ae4:	df004d04 	addi	fp,sp,308
  800ae8:	e13ffc15 	stw	r4,-16(fp)
  800aec:	e17ffd15 	stw	r5,-12(fp)
  800af0:	e1bffe15 	stw	r6,-8(fp)
  int nread;
  int i, j, int_tmp;

  unsigned char** data;
  unsigned char* bindata;
  printf("Debug: Opening image:\n");
  800af4:	01002074 	movhi	r4,129
  800af8:	21138904 	addi	r4,r4,20004
  800afc:	08053480 	call	805348 <puts>
  if ((file = fopen(filename, "r")) == NULL) {
  800b00:	e13ffc17 	ldw	r4,-16(fp)
  800b04:	01402074 	movhi	r5,129
  800b08:	29538f04 	addi	r5,r5,20028
  800b0c:	08037ec0 	call	8037ec <fopen>
  800b10:	e0bfb915 	stw	r2,-284(fp)
  800b14:	e0bfb917 	ldw	r2,-284(fp)
  800b18:	1004c03a 	cmpne	r2,r2,zero
  800b1c:	10000b1e 	bne	r2,zero,800b4c <pgmread+0x78>
    printf("ERROR: file open failed\n");
  800b20:	01002074 	movhi	r4,129
  800b24:	21139004 	addi	r4,r4,20032
  800b28:	08053480 	call	805348 <puts>
    *h = *w = 0;
  800b2c:	e0bffd17 	ldw	r2,-12(fp)
  800b30:	10000015 	stw	zero,0(r2)
  800b34:	e0bffd17 	ldw	r2,-12(fp)
  800b38:	10c00017 	ldw	r3,0(r2)
  800b3c:	e0bffe17 	ldw	r2,-8(fp)
  800b40:	10c00015 	stw	r3,0(r2)
    return (NULL);
  800b44:	e03fff15 	stw	zero,-4(fp)
  800b48:	0000ec06 	br	800efc <pgmread+0x428>
  } else {
    printf("Debug: Image opened successfully!\n");
  800b4c:	01002074 	movhi	r4,129
  800b50:	21139604 	addi	r4,r4,20056
  800b54:	08053480 	call	805348 <puts>
  }
  fgets(line, 256, file);
  800b58:	e13fba04 	addi	r4,fp,-280
  800b5c:	01404004 	movi	r5,256
  800b60:	e1bfb917 	ldw	r6,-284(fp)
  800b64:	08033e00 	call	8033e0 <fgets>
  if (strncmp(line, "P5", 2)) {
  800b68:	e13fba04 	addi	r4,fp,-280
  800b6c:	01402074 	movhi	r5,129
  800b70:	29539f04 	addi	r5,r5,20092
  800b74:	01800084 	movi	r6,2
  800b78:	08058e00 	call	8058e0 <strncmp>
  800b7c:	1005003a 	cmpeq	r2,r2,zero
  800b80:	1000141e 	bne	r2,zero,800bd4 <pgmread+0x100>
    if (strncmp(line, "P2", 2)) {
  800b84:	e13fba04 	addi	r4,fp,-280
  800b88:	01402074 	movhi	r5,129
  800b8c:	2953a004 	addi	r5,r5,20096
  800b90:	01800084 	movi	r6,2
  800b94:	08058e00 	call	8058e0 <strncmp>
  800b98:	1005003a 	cmpeq	r2,r2,zero
  800b9c:	10000b1e 	bne	r2,zero,800bcc <pgmread+0xf8>
      printf("pgm read: not a pgm file\n");
  800ba0:	01002074 	movhi	r4,129
  800ba4:	2113a104 	addi	r4,r4,20100
  800ba8:	08053480 	call	805348 <puts>
      *h = *w = 0;
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	10000015 	stw	zero,0(r2)
  800bb4:	e0bffd17 	ldw	r2,-12(fp)
  800bb8:	10c00017 	ldw	r3,0(r2)
  800bbc:	e0bffe17 	ldw	r2,-8(fp)
  800bc0:	10c00015 	stw	r3,0(r2)
      return (NULL);
  800bc4:	e03fff15 	stw	zero,-4(fp)
  800bc8:	0000cc06 	br	800efc <pgmread+0x428>
    } else
      binary = 0;
  800bcc:	e03fb815 	stw	zero,-288(fp)
  800bd0:	00000206 	br	800bdc <pgmread+0x108>
  } else
    binary = 1;
  800bd4:	00800044 	movi	r2,1
  800bd8:	e0bfb815 	stw	r2,-288(fp)

  fgets(line, 256, file);
  800bdc:	e13fba04 	addi	r4,fp,-280
  800be0:	01404004 	movi	r5,256
  800be4:	e1bfb917 	ldw	r6,-284(fp)
  800be8:	08033e00 	call	8033e0 <fgets>
  while (line[0] == '#') fgets(line, 256, file);
  800bec:	00000406 	br	800c00 <pgmread+0x12c>
  800bf0:	e13fba04 	addi	r4,fp,-280
  800bf4:	01404004 	movi	r5,256
  800bf8:	e1bfb917 	ldw	r6,-284(fp)
  800bfc:	08033e00 	call	8033e0 <fgets>
  800c00:	e0bfba03 	ldbu	r2,-280(fp)
  800c04:	10803fcc 	andi	r2,r2,255
  800c08:	1080201c 	xori	r2,r2,128
  800c0c:	10bfe004 	addi	r2,r2,-128
  800c10:	108008e0 	cmpeqi	r2,r2,35
  800c14:	103ff61e 	bne	r2,zero,800bf0 <pgmread+0x11c>

  sscanf(line, "%d", w);
  800c18:	e13fba04 	addi	r4,fp,-280
  800c1c:	01402074 	movhi	r5,129
  800c20:	2953a804 	addi	r5,r5,20128
  800c24:	e1bffd17 	ldw	r6,-12(fp)
  800c28:	080569c0 	call	80569c <sscanf>
  fgets(line, 256, file);
  800c2c:	e13fba04 	addi	r4,fp,-280
  800c30:	01404004 	movi	r5,256
  800c34:	e1bfb917 	ldw	r6,-284(fp)
  800c38:	08033e00 	call	8033e0 <fgets>
  sscanf(line, "%d", h);
  800c3c:	e13fba04 	addi	r4,fp,-280
  800c40:	01402074 	movhi	r5,129
  800c44:	2953a804 	addi	r5,r5,20128
  800c48:	e1bffe17 	ldw	r6,-8(fp)
  800c4c:	080569c0 	call	80569c <sscanf>
  fgets(line, 256, file);
  800c50:	e13fba04 	addi	r4,fp,-280
  800c54:	01404004 	movi	r5,256
  800c58:	e1bfb917 	ldw	r6,-284(fp)
  800c5c:	08033e00 	call	8033e0 <fgets>
  sscanf(line, "%d", &maxval);
  800c60:	e13fba04 	addi	r4,fp,-280
  800c64:	e1bffa04 	addi	r6,fp,-24
  800c68:	01402074 	movhi	r5,129
  800c6c:	2953a804 	addi	r5,r5,20128
  800c70:	080569c0 	call	80569c <sscanf>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
  800c74:	e0bffd17 	ldw	r2,-12(fp)
  800c78:	10800017 	ldw	r2,0(r2)
  800c7c:	1009883a 	mov	r4,r2
  800c80:	01400104 	movi	r5,4
  800c84:	0802cac0 	call	802cac <calloc>
  800c88:	e0bfb415 	stw	r2,-304(fp)
  800c8c:	e0bfb417 	ldw	r2,-304(fp)
  800c90:	1004c03a 	cmpne	r2,r2,zero
  800c94:	1000051e 	bne	r2,zero,800cac <pgmread+0x1d8>
    printf("Memory allocation error. Exit program\n");
  800c98:	01002074 	movhi	r4,129
  800c9c:	2113a904 	addi	r4,r4,20132
  800ca0:	08053480 	call	805348 <puts>
    exit(1);
  800ca4:	01000044 	movi	r4,1
  800ca8:	0802de40 	call	802de4 <exit>
  }
  for (j = 0; j < (*w); j++)
  800cac:	e03fb515 	stw	zero,-300(fp)
  800cb0:	00001706 	br	800d10 <pgmread+0x23c>
    if ((data[j] = (unsigned char*)calloc((*h), sizeof(unsigned char))) ==
  800cb4:	e0bfb517 	ldw	r2,-300(fp)
  800cb8:	1085883a 	add	r2,r2,r2
  800cbc:	1085883a 	add	r2,r2,r2
  800cc0:	1007883a 	mov	r3,r2
  800cc4:	e0bfb417 	ldw	r2,-304(fp)
  800cc8:	18a1883a 	add	r16,r3,r2
  800ccc:	e0bffe17 	ldw	r2,-8(fp)
  800cd0:	10800017 	ldw	r2,0(r2)
  800cd4:	1009883a 	mov	r4,r2
  800cd8:	01400044 	movi	r5,1
  800cdc:	0802cac0 	call	802cac <calloc>
  800ce0:	80800015 	stw	r2,0(r16)
  800ce4:	80800017 	ldw	r2,0(r16)
  800ce8:	1004c03a 	cmpne	r2,r2,zero
  800cec:	1000051e 	bne	r2,zero,800d04 <pgmread+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  800cf0:	01002074 	movhi	r4,129
  800cf4:	2113a904 	addi	r4,r4,20132
  800cf8:	08053480 	call	805348 <puts>
      exit(1);
  800cfc:	01000044 	movi	r4,1
  800d00:	0802de40 	call	802de4 <exit>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*w); j++)
  800d04:	e0bfb517 	ldw	r2,-300(fp)
  800d08:	10800044 	addi	r2,r2,1
  800d0c:	e0bfb515 	stw	r2,-300(fp)
  800d10:	e0bffd17 	ldw	r2,-12(fp)
  800d14:	10c00017 	ldw	r3,0(r2)
  800d18:	e0bfb517 	ldw	r2,-300(fp)
  800d1c:	10ffe516 	blt	r2,r3,800cb4 <pgmread+0x1e0>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }

  if (binary) {
  800d20:	e0bfb817 	ldw	r2,-288(fp)
  800d24:	1005003a 	cmpeq	r2,r2,zero
  800d28:	10004a1e 	bne	r2,zero,800e54 <pgmread+0x380>
    if ((bindata = (unsigned char*)calloc((*w) * (*h), sizeof(unsigned char))) == NULL) {
  800d2c:	e0bffd17 	ldw	r2,-12(fp)
  800d30:	11000017 	ldw	r4,0(r2)
  800d34:	e0bffe17 	ldw	r2,-8(fp)
  800d38:	11400017 	ldw	r5,0(r2)
  800d3c:	08027a80 	call	8027a8 <__mulsi3>
  800d40:	1009883a 	mov	r4,r2
  800d44:	01400044 	movi	r5,1
  800d48:	0802cac0 	call	802cac <calloc>
  800d4c:	e0bfb315 	stw	r2,-308(fp)
  800d50:	e0bfb317 	ldw	r2,-308(fp)
  800d54:	1004c03a 	cmpne	r2,r2,zero
  800d58:	1000051e 	bne	r2,zero,800d70 <pgmread+0x29c>
      printf("Memory allocation error on bindata. Exit program\n");
  800d5c:	01002074 	movhi	r4,129
  800d60:	2113b304 	addi	r4,r4,20172
  800d64:	08053480 	call	805348 <puts>
      exit(1);
  800d68:	01000044 	movi	r4,1
  800d6c:	0802de40 	call	802de4 <exit>
    }

    printf("Reading %s as binary.\n", filename);
  800d70:	01002074 	movhi	r4,129
  800d74:	2113c004 	addi	r4,r4,20224
  800d78:	e17ffc17 	ldw	r5,-16(fp)
  800d7c:	08052300 	call	805230 <printf>

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);
  800d80:	e0bffd17 	ldw	r2,-12(fp)
  800d84:	11000017 	ldw	r4,0(r2)
  800d88:	e0bffe17 	ldw	r2,-8(fp)
  800d8c:	11400017 	ldw	r5,0(r2)
  800d90:	08027a80 	call	8027a8 <__mulsi3>
  800d94:	100d883a 	mov	r6,r2
  800d98:	e13fb317 	ldw	r4,-308(fp)
  800d9c:	01400044 	movi	r5,1
  800da0:	e1ffb917 	ldw	r7,-284(fp)
  800da4:	0803a740 	call	803a74 <fread>
  800da8:	e0bfb715 	stw	r2,-292(fp)

    for (i = 0; i < (*w); i++)
  800dac:	e03fb615 	stw	zero,-296(fp)
  800db0:	00002106 	br	800e38 <pgmread+0x364>
      for (j = 0; j < (*h); j++)
  800db4:	e03fb515 	stw	zero,-300(fp)
  800db8:	00001806 	br	800e1c <pgmread+0x348>
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];
  800dbc:	e0bfb617 	ldw	r2,-296(fp)
  800dc0:	1085883a 	add	r2,r2,r2
  800dc4:	1085883a 	add	r2,r2,r2
  800dc8:	1007883a 	mov	r3,r2
  800dcc:	e0bfb417 	ldw	r2,-304(fp)
  800dd0:	1885883a 	add	r2,r3,r2
  800dd4:	10c00017 	ldw	r3,0(r2)
  800dd8:	e0bfb517 	ldw	r2,-300(fp)
  800ddc:	18a1883a 	add	r16,r3,r2
  800de0:	e0bffd17 	ldw	r2,-12(fp)
  800de4:	11000017 	ldw	r4,0(r2)
  800de8:	e17fb517 	ldw	r5,-300(fp)
  800dec:	08027a80 	call	8027a8 <__mulsi3>
  800df0:	1007883a 	mov	r3,r2
  800df4:	e0bfb617 	ldw	r2,-296(fp)
  800df8:	1885883a 	add	r2,r3,r2
  800dfc:	1007883a 	mov	r3,r2
  800e00:	e0bfb317 	ldw	r2,-308(fp)
  800e04:	1885883a 	add	r2,r3,r2
  800e08:	10800003 	ldbu	r2,0(r2)
  800e0c:	80800005 	stb	r2,0(r16)
    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
      for (j = 0; j < (*h); j++)
  800e10:	e0bfb517 	ldw	r2,-300(fp)
  800e14:	10800044 	addi	r2,r2,1
  800e18:	e0bfb515 	stw	r2,-300(fp)
  800e1c:	e0bffe17 	ldw	r2,-8(fp)
  800e20:	10c00017 	ldw	r3,0(r2)
  800e24:	e0bfb517 	ldw	r2,-300(fp)
  800e28:	10ffe416 	blt	r2,r3,800dbc <pgmread+0x2e8>

    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
  800e2c:	e0bfb617 	ldw	r2,-296(fp)
  800e30:	10800044 	addi	r2,r2,1
  800e34:	e0bfb615 	stw	r2,-296(fp)
  800e38:	e0bffd17 	ldw	r2,-12(fp)
  800e3c:	10c00017 	ldw	r3,0(r2)
  800e40:	e0bfb617 	ldw	r2,-296(fp)
  800e44:	10ffdb16 	blt	r2,r3,800db4 <pgmread+0x2e0>
      for (j = 0; j < (*h); j++)
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];

    free(bindata);
  800e48:	e13fb317 	ldw	r4,-308(fp)
  800e4c:	08048340 	call	804834 <free>
  800e50:	00002606 	br	800eec <pgmread+0x418>
  } else {
    printf("Reading %s as ascii.\n", filename);
  800e54:	01002074 	movhi	r4,129
  800e58:	2113c604 	addi	r4,r4,20248
  800e5c:	e17ffc17 	ldw	r5,-16(fp)
  800e60:	08052300 	call	805230 <printf>

    for (i = 0; i < (*h); i++) {
  800e64:	e03fb615 	stw	zero,-296(fp)
  800e68:	00001c06 	br	800edc <pgmread+0x408>
      for (j = 0; j < (*w); j++) {
  800e6c:	e03fb515 	stw	zero,-300(fp)
  800e70:	00001306 	br	800ec0 <pgmread+0x3ec>
        fscanf(file, "%d", &int_tmp);
  800e74:	e1bffb04 	addi	r6,fp,-20
  800e78:	e13fb917 	ldw	r4,-284(fp)
  800e7c:	01402074 	movhi	r5,129
  800e80:	2953a804 	addi	r5,r5,20128
  800e84:	0803f1c0 	call	803f1c <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  800e88:	e0bfb517 	ldw	r2,-300(fp)
  800e8c:	1085883a 	add	r2,r2,r2
  800e90:	1085883a 	add	r2,r2,r2
  800e94:	1007883a 	mov	r3,r2
  800e98:	e0bfb417 	ldw	r2,-304(fp)
  800e9c:	1885883a 	add	r2,r3,r2
  800ea0:	10c00017 	ldw	r3,0(r2)
  800ea4:	e0bfb617 	ldw	r2,-296(fp)
  800ea8:	1887883a 	add	r3,r3,r2
  800eac:	e0bffb17 	ldw	r2,-20(fp)
  800eb0:	18800005 	stb	r2,0(r3)
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
      for (j = 0; j < (*w); j++) {
  800eb4:	e0bfb517 	ldw	r2,-300(fp)
  800eb8:	10800044 	addi	r2,r2,1
  800ebc:	e0bfb515 	stw	r2,-300(fp)
  800ec0:	e0bffd17 	ldw	r2,-12(fp)
  800ec4:	10c00017 	ldw	r3,0(r2)
  800ec8:	e0bfb517 	ldw	r2,-300(fp)
  800ecc:	10ffe916 	blt	r2,r3,800e74 <pgmread+0x3a0>

    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
  800ed0:	e0bfb617 	ldw	r2,-296(fp)
  800ed4:	10800044 	addi	r2,r2,1
  800ed8:	e0bfb615 	stw	r2,-296(fp)
  800edc:	e0bffe17 	ldw	r2,-8(fp)
  800ee0:	10c00017 	ldw	r3,0(r2)
  800ee4:	e0bfb617 	ldw	r2,-296(fp)
  800ee8:	10ffe016 	blt	r2,r3,800e6c <pgmread+0x398>
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }

  fclose(file);
  800eec:	e13fb917 	ldw	r4,-284(fp)
  800ef0:	0802f2c0 	call	802f2c <fclose>
  return (data);
  800ef4:	e0bfb417 	ldw	r2,-304(fp)
  800ef8:	e0bfff15 	stw	r2,-4(fp)
  800efc:	e0bfff17 	ldw	r2,-4(fp)
}
  800f00:	e037883a 	mov	sp,fp
  800f04:	dfc00217 	ldw	ra,8(sp)
  800f08:	df000117 	ldw	fp,4(sp)
  800f0c:	dc000017 	ldw	r16,0(sp)
  800f10:	dec00304 	addi	sp,sp,12
  800f14:	f800283a 	ret

00800f18 <pgmwrite>:
 *
 * NOTE: this function assumes input bufefr "data" is in column dominant format.
 */

int pgmwrite(char* filename, int w, int h, unsigned char** data,
             char* comment_string, int binsave) {
  800f18:	deffb104 	addi	sp,sp,-316
  800f1c:	dfc04e15 	stw	ra,312(sp)
  800f20:	df004d15 	stw	fp,308(sp)
  800f24:	df004d04 	addi	fp,sp,308
  800f28:	e13ffb15 	stw	r4,-20(fp)
  800f2c:	e17ffc15 	stw	r5,-16(fp)
  800f30:	e1bffd15 	stw	r6,-12(fp)
  800f34:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  800f38:	e13ffb17 	ldw	r4,-20(fp)
  800f3c:	01402074 	movhi	r5,129
  800f40:	2953cc04 	addi	r5,r5,20272
  800f44:	08037ec0 	call	8037ec <fopen>
  800f48:	e0bfba15 	stw	r2,-280(fp)
  800f4c:	e0bfba17 	ldw	r2,-280(fp)
  800f50:	1004c03a 	cmpne	r2,r2,zero
  800f54:	1000061e 	bne	r2,zero,800f70 <pgmwrite+0x58>
    printf("ERROR: file open failed\n");
  800f58:	01002074 	movhi	r4,129
  800f5c:	21139004 	addi	r4,r4,20032
  800f60:	08053480 	call	805348 <puts>
    return (-1);
  800f64:	00bfffc4 	movi	r2,-1
  800f68:	e0bfff15 	stw	r2,-4(fp)
  800f6c:	0000b106 	br	801234 <pgmwrite+0x31c>
  }

  if (binsave == 1)
  800f70:	e0800317 	ldw	r2,12(fp)
  800f74:	10800058 	cmpnei	r2,r2,1
  800f78:	1000071e 	bne	r2,zero,800f98 <pgmwrite+0x80>
    fprintf(file, "P5\n");
  800f7c:	01002074 	movhi	r4,129
  800f80:	2113cd04 	addi	r4,r4,20276
  800f84:	01400044 	movi	r5,1
  800f88:	018000c4 	movi	r6,3
  800f8c:	e1ffba17 	ldw	r7,-280(fp)
  800f90:	08046600 	call	804660 <fwrite>
  800f94:	00000606 	br	800fb0 <pgmwrite+0x98>
  else
    fprintf(file, "P2\n");
  800f98:	01002074 	movhi	r4,129
  800f9c:	2113ce04 	addi	r4,r4,20280
  800fa0:	01400044 	movi	r5,1
  800fa4:	018000c4 	movi	r6,3
  800fa8:	e1ffba17 	ldw	r7,-280(fp)
  800fac:	08046600 	call	804660 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  800fb0:	e0800217 	ldw	r2,8(fp)
  800fb4:	1005003a 	cmpeq	r2,r2,zero
  800fb8:	1000051e 	bne	r2,zero,800fd0 <pgmwrite+0xb8>
  800fbc:	e13fba17 	ldw	r4,-280(fp)
  800fc0:	01402074 	movhi	r5,129
  800fc4:	2953cf04 	addi	r5,r5,20284
  800fc8:	e1800217 	ldw	r6,8(fp)
  800fcc:	08038080 	call	803808 <fprintf>

  fprintf(file, "%d %d \n", w, h);
  800fd0:	e13fba17 	ldw	r4,-280(fp)
  800fd4:	01402074 	movhi	r5,129
  800fd8:	2953d104 	addi	r5,r5,20292
  800fdc:	e1bffc17 	ldw	r6,-16(fp)
  800fe0:	e1fffd17 	ldw	r7,-12(fp)
  800fe4:	08038080 	call	803808 <fprintf>

  maxval = 0;
  800fe8:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < w; i++)
  800fec:	e03fb615 	stw	zero,-296(fp)
  800ff0:	00002406 	br	801084 <pgmwrite+0x16c>
    for (j = 0; j < h; j++)
  800ff4:	e03fb515 	stw	zero,-300(fp)
  800ff8:	00001c06 	br	80106c <pgmwrite+0x154>
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];
  800ffc:	e0bfb617 	ldw	r2,-296(fp)
  801000:	1085883a 	add	r2,r2,r2
  801004:	1085883a 	add	r2,r2,r2
  801008:	1007883a 	mov	r3,r2
  80100c:	e0bffe17 	ldw	r2,-8(fp)
  801010:	1885883a 	add	r2,r3,r2
  801014:	10c00017 	ldw	r3,0(r2)
  801018:	e0bfb517 	ldw	r2,-300(fp)
  80101c:	1885883a 	add	r2,r3,r2
  801020:	10800003 	ldbu	r2,0(r2)
  801024:	10c03fcc 	andi	r3,r2,255
  801028:	e0bfb917 	ldw	r2,-284(fp)
  80102c:	10c00c0e 	bge	r2,r3,801060 <pgmwrite+0x148>
  801030:	e0bfb617 	ldw	r2,-296(fp)
  801034:	1085883a 	add	r2,r2,r2
  801038:	1085883a 	add	r2,r2,r2
  80103c:	1007883a 	mov	r3,r2
  801040:	e0bffe17 	ldw	r2,-8(fp)
  801044:	1885883a 	add	r2,r3,r2
  801048:	10c00017 	ldw	r3,0(r2)
  80104c:	e0bfb517 	ldw	r2,-300(fp)
  801050:	1885883a 	add	r2,r3,r2
  801054:	10800003 	ldbu	r2,0(r2)
  801058:	10803fcc 	andi	r2,r2,255
  80105c:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
    for (j = 0; j < h; j++)
  801060:	e0bfb517 	ldw	r2,-300(fp)
  801064:	10800044 	addi	r2,r2,1
  801068:	e0bfb515 	stw	r2,-300(fp)
  80106c:	e0ffb517 	ldw	r3,-300(fp)
  801070:	e0bffd17 	ldw	r2,-12(fp)
  801074:	18bfe116 	blt	r3,r2,800ffc <pgmwrite+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
  801078:	e0bfb617 	ldw	r2,-296(fp)
  80107c:	10800044 	addi	r2,r2,1
  801080:	e0bfb615 	stw	r2,-296(fp)
  801084:	e0ffb617 	ldw	r3,-296(fp)
  801088:	e0bffc17 	ldw	r2,-16(fp)
  80108c:	18bfd916 	blt	r3,r2,800ff4 <pgmwrite+0xdc>
    for (j = 0; j < h; j++)
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];

  fprintf(file, "%d \n", maxval);
  801090:	e13fba17 	ldw	r4,-280(fp)
  801094:	01402074 	movhi	r5,129
  801098:	2953d304 	addi	r5,r5,20300
  80109c:	e1bfb917 	ldw	r6,-284(fp)
  8010a0:	08038080 	call	803808 <fprintf>

  if (binsave == 1) {
  8010a4:	e0800317 	ldw	r2,12(fp)
  8010a8:	10800058 	cmpnei	r2,r2,1
  8010ac:	10003b1e 	bne	r2,zero,80119c <pgmwrite+0x284>
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));
  8010b0:	e13ffc17 	ldw	r4,-16(fp)
  8010b4:	e17ffd17 	ldw	r5,-12(fp)
  8010b8:	08027a80 	call	8027a8 <__mulsi3>
  8010bc:	1009883a 	mov	r4,r2
  8010c0:	01400044 	movi	r5,1
  8010c4:	0802cac0 	call	802cac <calloc>
  8010c8:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < w; i++)
  8010cc:	e03fb615 	stw	zero,-296(fp)
  8010d0:	00001f06 	br	801150 <pgmwrite+0x238>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];
  8010d4:	e03fb515 	stw	zero,-300(fp)
  8010d8:	00001706 	br	801138 <pgmwrite+0x220>
  8010dc:	e13fb517 	ldw	r4,-300(fp)
  8010e0:	e17ffc17 	ldw	r5,-16(fp)
  8010e4:	08027a80 	call	8027a8 <__mulsi3>
  8010e8:	1007883a 	mov	r3,r2
  8010ec:	e0bfb617 	ldw	r2,-296(fp)
  8010f0:	1885883a 	add	r2,r3,r2
  8010f4:	1007883a 	mov	r3,r2
  8010f8:	e0bfb317 	ldw	r2,-308(fp)
  8010fc:	1889883a 	add	r4,r3,r2
  801100:	e0bfb617 	ldw	r2,-296(fp)
  801104:	1085883a 	add	r2,r2,r2
  801108:	1085883a 	add	r2,r2,r2
  80110c:	1007883a 	mov	r3,r2
  801110:	e0bffe17 	ldw	r2,-8(fp)
  801114:	1885883a 	add	r2,r3,r2
  801118:	10c00017 	ldw	r3,0(r2)
  80111c:	e0bfb517 	ldw	r2,-300(fp)
  801120:	1885883a 	add	r2,r3,r2
  801124:	10800003 	ldbu	r2,0(r2)
  801128:	20800005 	stb	r2,0(r4)
  80112c:	e0bfb517 	ldw	r2,-300(fp)
  801130:	10800044 	addi	r2,r2,1
  801134:	e0bfb515 	stw	r2,-300(fp)
  801138:	e0ffb517 	ldw	r3,-300(fp)
  80113c:	e0bffd17 	ldw	r2,-12(fp)
  801140:	18bfe616 	blt	r3,r2,8010dc <pgmwrite+0x1c4>
  fprintf(file, "%d \n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));

    for (i = 0; i < w; i++)
  801144:	e0bfb617 	ldw	r2,-296(fp)
  801148:	10800044 	addi	r2,r2,1
  80114c:	e0bfb615 	stw	r2,-296(fp)
  801150:	e0ffb617 	ldw	r3,-296(fp)
  801154:	e0bffc17 	ldw	r2,-16(fp)
  801158:	18bfde16 	blt	r3,r2,8010d4 <pgmwrite+0x1bc>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];

    nread = fwrite((void*)temp, sizeof(unsigned char), (w) * (h), file);
  80115c:	e13ffc17 	ldw	r4,-16(fp)
  801160:	e17ffd17 	ldw	r5,-12(fp)
  801164:	08027a80 	call	8027a8 <__mulsi3>
  801168:	100d883a 	mov	r6,r2
  80116c:	e13fb317 	ldw	r4,-308(fp)
  801170:	01400044 	movi	r5,1
  801174:	e1ffba17 	ldw	r7,-280(fp)
  801178:	08046600 	call	804660 <fwrite>
  80117c:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801180:	01002074 	movhi	r4,129
  801184:	2113d504 	addi	r4,r4,20308
  801188:	e17ffb17 	ldw	r5,-20(fp)
  80118c:	08052300 	call	805230 <printf>
    free(temp);
  801190:	e13fb317 	ldw	r4,-308(fp)
  801194:	08048340 	call	804834 <free>
  801198:	00002306 	br	801228 <pgmwrite+0x310>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  80119c:	01002074 	movhi	r4,129
  8011a0:	2113dc04 	addi	r4,r4,20336
  8011a4:	e17ffb17 	ldw	r5,-20(fp)
  8011a8:	08052300 	call	805230 <printf>

    for (i = 0; i < h; i++)
  8011ac:	e03fb615 	stw	zero,-296(fp)
  8011b0:	00001a06 	br	80121c <pgmwrite+0x304>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  8011b4:	e03fb515 	stw	zero,-300(fp)
  8011b8:	00001206 	br	801204 <pgmwrite+0x2ec>
  8011bc:	e0bfb517 	ldw	r2,-300(fp)
  8011c0:	1085883a 	add	r2,r2,r2
  8011c4:	1085883a 	add	r2,r2,r2
  8011c8:	1007883a 	mov	r3,r2
  8011cc:	e0bffe17 	ldw	r2,-8(fp)
  8011d0:	1885883a 	add	r2,r3,r2
  8011d4:	10c00017 	ldw	r3,0(r2)
  8011d8:	e0bfb617 	ldw	r2,-296(fp)
  8011dc:	1885883a 	add	r2,r3,r2
  8011e0:	10800003 	ldbu	r2,0(r2)
  8011e4:	11803fcc 	andi	r6,r2,255
  8011e8:	e13fba17 	ldw	r4,-280(fp)
  8011ec:	01402074 	movhi	r5,129
  8011f0:	2953e304 	addi	r5,r5,20364
  8011f4:	08038080 	call	803808 <fprintf>
  8011f8:	e0bfb517 	ldw	r2,-300(fp)
  8011fc:	10800044 	addi	r2,r2,1
  801200:	e0bfb515 	stw	r2,-300(fp)
  801204:	e0ffb517 	ldw	r3,-300(fp)
  801208:	e0bffc17 	ldw	r2,-16(fp)
  80120c:	18bfeb16 	blt	r3,r2,8011bc <pgmwrite+0x2a4>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (i = 0; i < h; i++)
  801210:	e0bfb617 	ldw	r2,-296(fp)
  801214:	10800044 	addi	r2,r2,1
  801218:	e0bfb615 	stw	r2,-296(fp)
  80121c:	e0ffb617 	ldw	r3,-296(fp)
  801220:	e0bffd17 	ldw	r2,-12(fp)
  801224:	18bfe316 	blt	r3,r2,8011b4 <pgmwrite+0x29c>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  }

  fclose(file);
  801228:	e13fba17 	ldw	r4,-280(fp)
  80122c:	0802f2c0 	call	802f2c <fclose>
  return (0);
  801230:	e03fff15 	stw	zero,-4(fp)
  801234:	e0bfff17 	ldw	r2,-4(fp)
}
  801238:	e037883a 	mov	sp,fp
  80123c:	dfc00117 	ldw	ra,4(sp)
  801240:	df000017 	ldw	fp,0(sp)
  801244:	dec00204 	addi	sp,sp,8
  801248:	f800283a 	ret

0080124c <pgmread2>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in row dominant format
 */
unsigned char** pgmread2(char* filename, int* row, int* col) {
  80124c:	deffae04 	addi	sp,sp,-328
  801250:	dfc05115 	stw	ra,324(sp)
  801254:	df005015 	stw	fp,320(sp)
  801258:	dc004f15 	stw	r16,316(sp)
  80125c:	df004f04 	addi	fp,sp,316
  801260:	e13ffc15 	stw	r4,-16(fp)
  801264:	e17ffd15 	stw	r5,-12(fp)
  801268:	e1bffe15 	stw	r6,-8(fp)
  char firstchar;
  int count;
  unsigned char** data;
  unsigned char* bindata;

  if ((file = fopen(filename, "r")) == NULL) {
  80126c:	e13ffc17 	ldw	r4,-16(fp)
  801270:	01402074 	movhi	r5,129
  801274:	29538f04 	addi	r5,r5,20028
  801278:	08037ec0 	call	8037ec <fopen>
  80127c:	e0bfb915 	stw	r2,-284(fp)
  801280:	e0bfb917 	ldw	r2,-284(fp)
  801284:	1004c03a 	cmpne	r2,r2,zero
  801288:	10000b1e 	bne	r2,zero,8012b8 <pgmread2+0x6c>
    printf("ERROR: file open failed\n");
  80128c:	01002074 	movhi	r4,129
  801290:	21139004 	addi	r4,r4,20032
  801294:	08053480 	call	805348 <puts>
    *row = *col = 0;
  801298:	e0bffe17 	ldw	r2,-8(fp)
  80129c:	10000015 	stw	zero,0(r2)
  8012a0:	e0bffe17 	ldw	r2,-8(fp)
  8012a4:	10c00017 	ldw	r3,0(r2)
  8012a8:	e0bffd17 	ldw	r2,-12(fp)
  8012ac:	10c00015 	stw	r3,0(r2)
    return (NULL);
  8012b0:	e03fff15 	stw	zero,-4(fp)
  8012b4:	00010306 	br	8016c4 <pgmread2+0x478>
  }
  count = readToWhitespace(file, line, 2);
  8012b8:	e17fba04 	addi	r5,fp,-280
  8012bc:	e13fb917 	ldw	r4,-284(fp)
  8012c0:	01800084 	movi	r6,2
  8012c4:	08008480 	call	800848 <readToWhitespace>
  8012c8:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';  // Solo por precauci�n
  8012cc:	e0ffb317 	ldw	r3,-308(fp)
  8012d0:	e0bfba04 	addi	r2,fp,-280
  8012d4:	10c5883a 	add	r2,r2,r3
  8012d8:	10000005 	stb	zero,0(r2)

  if (strncmp(line, "P5", 2)) {
  8012dc:	e13fba04 	addi	r4,fp,-280
  8012e0:	01402074 	movhi	r5,129
  8012e4:	29539f04 	addi	r5,r5,20092
  8012e8:	01800084 	movi	r6,2
  8012ec:	08058e00 	call	8058e0 <strncmp>
  8012f0:	1005003a 	cmpeq	r2,r2,zero
  8012f4:	1000141e 	bne	r2,zero,801348 <pgmread2+0xfc>
    if (strncmp(line, "P2", 2)) {
  8012f8:	e13fba04 	addi	r4,fp,-280
  8012fc:	01402074 	movhi	r5,129
  801300:	2953a004 	addi	r5,r5,20096
  801304:	01800084 	movi	r6,2
  801308:	08058e00 	call	8058e0 <strncmp>
  80130c:	1005003a 	cmpeq	r2,r2,zero
  801310:	10000b1e 	bne	r2,zero,801340 <pgmread2+0xf4>
      printf("pgm read: not a pgm file\n");
  801314:	01002074 	movhi	r4,129
  801318:	2113a104 	addi	r4,r4,20100
  80131c:	08053480 	call	805348 <puts>
      *row = *col = 0;
  801320:	e0bffe17 	ldw	r2,-8(fp)
  801324:	10000015 	stw	zero,0(r2)
  801328:	e0bffe17 	ldw	r2,-8(fp)
  80132c:	10c00017 	ldw	r3,0(r2)
  801330:	e0bffd17 	ldw	r2,-12(fp)
  801334:	10c00015 	stw	r3,0(r2)
      return (NULL);
  801338:	e03fff15 	stw	zero,-4(fp)
  80133c:	0000e106 	br	8016c4 <pgmread2+0x478>
    } else {
      binary = 0;  // fichero formato texto
  801340:	e03fb815 	stw	zero,-288(fp)
  801344:	00000206 	br	801350 <pgmread2+0x104>
    }
  } else {
    binary = 1;  // fichero con contenidos en binario
  801348:	00800044 	movi	r2,1
  80134c:	e0bfb815 	stw	r2,-288(fp)
  }

  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801350:	e13fb917 	ldw	r4,-284(fp)
  801354:	080090c0 	call	80090c <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  801358:	e17fba04 	addi	r5,fp,-280
  80135c:	e13fb917 	ldw	r4,-284(fp)
  801360:	01803fc4 	movi	r6,255
  801364:	08008480 	call	800848 <readToWhitespace>
  801368:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  80136c:	e0ffb317 	ldw	r3,-308(fp)
  801370:	e0bfba04 	addi	r2,fp,-280
  801374:	10c5883a 	add	r2,r2,r3
  801378:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", col);
  80137c:	e13fba04 	addi	r4,fp,-280
  801380:	01402074 	movhi	r5,129
  801384:	2953a804 	addi	r5,r5,20128
  801388:	e1bffe17 	ldw	r6,-8(fp)
  80138c:	080569c0 	call	80569c <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801390:	e13fb917 	ldw	r4,-284(fp)
  801394:	080090c0 	call	80090c <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  801398:	e17fba04 	addi	r5,fp,-280
  80139c:	e13fb917 	ldw	r4,-284(fp)
  8013a0:	01803fc4 	movi	r6,255
  8013a4:	08008480 	call	800848 <readToWhitespace>
  8013a8:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8013ac:	e0ffb317 	ldw	r3,-308(fp)
  8013b0:	e0bfba04 	addi	r2,fp,-280
  8013b4:	10c5883a 	add	r2,r2,r3
  8013b8:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", row);
  8013bc:	e13fba04 	addi	r4,fp,-280
  8013c0:	01402074 	movhi	r5,129
  8013c4:	2953a804 	addi	r5,r5,20128
  8013c8:	e1bffd17 	ldw	r6,-12(fp)
  8013cc:	080569c0 	call	80569c <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  8013d0:	e13fb917 	ldw	r4,-284(fp)
  8013d4:	080090c0 	call	80090c <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  8013d8:	e17fba04 	addi	r5,fp,-280
  8013dc:	e13fb917 	ldw	r4,-284(fp)
  8013e0:	01803fc4 	movi	r6,255
  8013e4:	08008480 	call	800848 <readToWhitespace>
  8013e8:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8013ec:	e0ffb317 	ldw	r3,-308(fp)
  8013f0:	e0bfba04 	addi	r2,fp,-280
  8013f4:	10c5883a 	add	r2,r2,r3
  8013f8:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", &maxval);
  8013fc:	e13fba04 	addi	r4,fp,-280
  801400:	e1bffa04 	addi	r6,fp,-24
  801404:	01402074 	movhi	r5,129
  801408:	2953a804 	addi	r5,r5,20128
  80140c:	080569c0 	call	80569c <sscanf>
  printf("row = %d\tcol = %d\tmaxval = %d\n", *row, *col, maxval);
  801410:	e0bffd17 	ldw	r2,-12(fp)
  801414:	11400017 	ldw	r5,0(r2)
  801418:	e0bffe17 	ldw	r2,-8(fp)
  80141c:	11800017 	ldw	r6,0(r2)
  801420:	e1fffa17 	ldw	r7,-24(fp)
  801424:	01002074 	movhi	r4,129
  801428:	2113e404 	addi	r4,r4,20368
  80142c:	08052300 	call	805230 <printf>
  eatWhitespaces(file, 1);  // Eliminamos exactamente un caracter whitespace
  801430:	e13fb917 	ldw	r4,-284(fp)
  801434:	01400044 	movi	r5,1
  801438:	08009b40 	call	8009b4 <eatWhitespaces>

  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
  80143c:	e0bffd17 	ldw	r2,-12(fp)
  801440:	10800017 	ldw	r2,0(r2)
  801444:	1009883a 	mov	r4,r2
  801448:	01400104 	movi	r5,4
  80144c:	0802cac0 	call	802cac <calloc>
  801450:	e0bfb215 	stw	r2,-312(fp)
  801454:	e0bfb217 	ldw	r2,-312(fp)
  801458:	1004c03a 	cmpne	r2,r2,zero
  80145c:	1000051e 	bne	r2,zero,801474 <pgmread2+0x228>
      NULL) {
    printf("Memory allocation error. Exit program\n");
  801460:	01002074 	movhi	r4,129
  801464:	2113a904 	addi	r4,r4,20132
  801468:	08053480 	call	805348 <puts>
    exit(1);
  80146c:	01000044 	movi	r4,1
  801470:	0802de40 	call	802de4 <exit>
  }
  for (j = 0; j < (*row); j++) {
  801474:	e03fb515 	stw	zero,-300(fp)
  801478:	00001706 	br	8014d8 <pgmread2+0x28c>
    if ((data[j] = (unsigned char*)calloc((*col), sizeof(unsigned char))) ==
  80147c:	e0bfb517 	ldw	r2,-300(fp)
  801480:	1085883a 	add	r2,r2,r2
  801484:	1085883a 	add	r2,r2,r2
  801488:	1007883a 	mov	r3,r2
  80148c:	e0bfb217 	ldw	r2,-312(fp)
  801490:	18a1883a 	add	r16,r3,r2
  801494:	e0bffe17 	ldw	r2,-8(fp)
  801498:	10800017 	ldw	r2,0(r2)
  80149c:	1009883a 	mov	r4,r2
  8014a0:	01400044 	movi	r5,1
  8014a4:	0802cac0 	call	802cac <calloc>
  8014a8:	80800015 	stw	r2,0(r16)
  8014ac:	80800017 	ldw	r2,0(r16)
  8014b0:	1004c03a 	cmpne	r2,r2,zero
  8014b4:	1000051e 	bne	r2,zero,8014cc <pgmread2+0x280>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  8014b8:	01002074 	movhi	r4,129
  8014bc:	2113a904 	addi	r4,r4,20132
  8014c0:	08053480 	call	805348 <puts>
      exit(1);
  8014c4:	01000044 	movi	r4,1
  8014c8:	0802de40 	call	802de4 <exit>
  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
      NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*row); j++) {
  8014cc:	e0bfb517 	ldw	r2,-300(fp)
  8014d0:	10800044 	addi	r2,r2,1
  8014d4:	e0bfb515 	stw	r2,-300(fp)
  8014d8:	e0bffd17 	ldw	r2,-12(fp)
  8014dc:	10c00017 	ldw	r3,0(r2)
  8014e0:	e0bfb517 	ldw	r2,-300(fp)
  8014e4:	10ffe516 	blt	r2,r3,80147c <pgmread2+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }
  }
  if (binary) {
  8014e8:	e0bfb817 	ldw	r2,-288(fp)
  8014ec:	1005003a 	cmpeq	r2,r2,zero
  8014f0:	10004a1e 	bne	r2,zero,80161c <pgmread2+0x3d0>
    if ((bindata = (unsigned char*)calloc((*row) * (*col),
  8014f4:	e0bffd17 	ldw	r2,-12(fp)
  8014f8:	11000017 	ldw	r4,0(r2)
  8014fc:	e0bffe17 	ldw	r2,-8(fp)
  801500:	11400017 	ldw	r5,0(r2)
  801504:	08027a80 	call	8027a8 <__mulsi3>
  801508:	1009883a 	mov	r4,r2
  80150c:	01400044 	movi	r5,1
  801510:	0802cac0 	call	802cac <calloc>
  801514:	e0bfb115 	stw	r2,-316(fp)
  801518:	e0bfb117 	ldw	r2,-316(fp)
  80151c:	1004c03a 	cmpne	r2,r2,zero
  801520:	1000051e 	bne	r2,zero,801538 <pgmread2+0x2ec>
                                          sizeof(unsigned char))) == NULL) {
      printf("Memory allocation error on bindata. Exit program\n");
  801524:	01002074 	movhi	r4,129
  801528:	2113b304 	addi	r4,r4,20172
  80152c:	08053480 	call	805348 <puts>
      exit(1);
  801530:	01000044 	movi	r4,1
  801534:	0802de40 	call	802de4 <exit>
    }
    printf("Reading %s as binary.\n", filename);
  801538:	01002074 	movhi	r4,129
  80153c:	2113c004 	addi	r4,r4,20224
  801540:	e17ffc17 	ldw	r5,-16(fp)
  801544:	08052300 	call	805230 <printf>
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
  801548:	e0bffd17 	ldw	r2,-12(fp)
  80154c:	11000017 	ldw	r4,0(r2)
  801550:	e0bffe17 	ldw	r2,-8(fp)
  801554:	11400017 	ldw	r5,0(r2)
  801558:	08027a80 	call	8027a8 <__mulsi3>
  80155c:	100d883a 	mov	r6,r2
  801560:	e13fb117 	ldw	r4,-316(fp)
  801564:	01400044 	movi	r5,1
  801568:	e1ffb917 	ldw	r7,-284(fp)
  80156c:	0803a740 	call	803a74 <fread>
  801570:	e0bfb715 	stw	r2,-292(fp)
    for (i = 0; i < (*row); i++) {
  801574:	e03fb615 	stw	zero,-296(fp)
  801578:	00002106 	br	801600 <pgmread2+0x3b4>
      for (j = 0; j < (*col); j++) {
  80157c:	e03fb515 	stw	zero,-300(fp)
  801580:	00001806 	br	8015e4 <pgmread2+0x398>
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
  801584:	e0bfb617 	ldw	r2,-296(fp)
  801588:	1085883a 	add	r2,r2,r2
  80158c:	1085883a 	add	r2,r2,r2
  801590:	1007883a 	mov	r3,r2
  801594:	e0bfb217 	ldw	r2,-312(fp)
  801598:	1885883a 	add	r2,r3,r2
  80159c:	10c00017 	ldw	r3,0(r2)
  8015a0:	e0bfb517 	ldw	r2,-300(fp)
  8015a4:	18a1883a 	add	r16,r3,r2
  8015a8:	e0bffe17 	ldw	r2,-8(fp)
  8015ac:	11000017 	ldw	r4,0(r2)
  8015b0:	e17fb617 	ldw	r5,-296(fp)
  8015b4:	08027a80 	call	8027a8 <__mulsi3>
  8015b8:	1007883a 	mov	r3,r2
  8015bc:	e0bfb517 	ldw	r2,-300(fp)
  8015c0:	1885883a 	add	r2,r3,r2
  8015c4:	1007883a 	mov	r3,r2
  8015c8:	e0bfb117 	ldw	r2,-316(fp)
  8015cc:	1885883a 	add	r2,r3,r2
  8015d0:	10800003 	ldbu	r2,0(r2)
  8015d4:	80800005 	stb	r2,0(r16)
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
      for (j = 0; j < (*col); j++) {
  8015d8:	e0bfb517 	ldw	r2,-300(fp)
  8015dc:	10800044 	addi	r2,r2,1
  8015e0:	e0bfb515 	stw	r2,-300(fp)
  8015e4:	e0bffe17 	ldw	r2,-8(fp)
  8015e8:	10c00017 	ldw	r3,0(r2)
  8015ec:	e0bfb517 	ldw	r2,-300(fp)
  8015f0:	10ffe416 	blt	r2,r3,801584 <pgmread2+0x338>
      printf("Memory allocation error on bindata. Exit program\n");
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
  8015f4:	e0bfb617 	ldw	r2,-296(fp)
  8015f8:	10800044 	addi	r2,r2,1
  8015fc:	e0bfb615 	stw	r2,-296(fp)
  801600:	e0bffd17 	ldw	r2,-12(fp)
  801604:	10c00017 	ldw	r3,0(r2)
  801608:	e0bfb617 	ldw	r2,-296(fp)
  80160c:	10ffdb16 	blt	r2,r3,80157c <pgmread2+0x330>
      for (j = 0; j < (*col); j++) {
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
      }
    }
    free(bindata);
  801610:	e13fb117 	ldw	r4,-316(fp)
  801614:	08048340 	call	804834 <free>
  801618:	00002606 	br	8016b4 <pgmread2+0x468>
  } else {
    printf("Reading %s as ascii.\n", filename);
  80161c:	01002074 	movhi	r4,129
  801620:	2113c604 	addi	r4,r4,20248
  801624:	e17ffc17 	ldw	r5,-16(fp)
  801628:	08052300 	call	805230 <printf>
    for (j = 0; j < (*row); j++) {
  80162c:	e03fb515 	stw	zero,-300(fp)
  801630:	00001c06 	br	8016a4 <pgmread2+0x458>
      for (i = 0; i < (*col); i++) {
  801634:	e03fb615 	stw	zero,-296(fp)
  801638:	00001306 	br	801688 <pgmread2+0x43c>
        fscanf(file, "%d", &int_tmp);
  80163c:	e1bffb04 	addi	r6,fp,-20
  801640:	e13fb917 	ldw	r4,-284(fp)
  801644:	01402074 	movhi	r5,129
  801648:	2953a804 	addi	r5,r5,20128
  80164c:	0803f1c0 	call	803f1c <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  801650:	e0bfb517 	ldw	r2,-300(fp)
  801654:	1085883a 	add	r2,r2,r2
  801658:	1085883a 	add	r2,r2,r2
  80165c:	1007883a 	mov	r3,r2
  801660:	e0bfb217 	ldw	r2,-312(fp)
  801664:	1885883a 	add	r2,r3,r2
  801668:	10c00017 	ldw	r3,0(r2)
  80166c:	e0bfb617 	ldw	r2,-296(fp)
  801670:	1887883a 	add	r3,r3,r2
  801674:	e0bffb17 	ldw	r2,-20(fp)
  801678:	18800005 	stb	r2,0(r3)
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
      for (i = 0; i < (*col); i++) {
  80167c:	e0bfb617 	ldw	r2,-296(fp)
  801680:	10800044 	addi	r2,r2,1
  801684:	e0bfb615 	stw	r2,-296(fp)
  801688:	e0bffe17 	ldw	r2,-8(fp)
  80168c:	10c00017 	ldw	r3,0(r2)
  801690:	e0bfb617 	ldw	r2,-296(fp)
  801694:	10ffe916 	blt	r2,r3,80163c <pgmread2+0x3f0>
      }
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
  801698:	e0bfb517 	ldw	r2,-300(fp)
  80169c:	10800044 	addi	r2,r2,1
  8016a0:	e0bfb515 	stw	r2,-300(fp)
  8016a4:	e0bffd17 	ldw	r2,-12(fp)
  8016a8:	10c00017 	ldw	r3,0(r2)
  8016ac:	e0bfb517 	ldw	r2,-300(fp)
  8016b0:	10ffe016 	blt	r2,r3,801634 <pgmread2+0x3e8>
        fscanf(file, "%d", &int_tmp);
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }
  fclose(file);
  8016b4:	e13fb917 	ldw	r4,-284(fp)
  8016b8:	0802f2c0 	call	802f2c <fclose>
  return (data);
  8016bc:	e0bfb217 	ldw	r2,-312(fp)
  8016c0:	e0bfff15 	stw	r2,-4(fp)
  8016c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8016c8:	e037883a 	mov	sp,fp
  8016cc:	dfc00217 	ldw	ra,8(sp)
  8016d0:	df000117 	ldw	fp,4(sp)
  8016d4:	dc000017 	ldw	r16,0(sp)
  8016d8:	dec00304 	addi	sp,sp,12
  8016dc:	f800283a 	ret

008016e0 <pgmwrite2>:
 *
 * NOTE: this function assumes input bufefr "data" is in row dominant format.
 */

int pgmwrite2(char* filename, int row, int col, unsigned char** data,
              char* comment_string, int binsave) {
  8016e0:	deffb104 	addi	sp,sp,-316
  8016e4:	dfc04e15 	stw	ra,312(sp)
  8016e8:	df004d15 	stw	fp,308(sp)
  8016ec:	df004d04 	addi	fp,sp,308
  8016f0:	e13ffb15 	stw	r4,-20(fp)
  8016f4:	e17ffc15 	stw	r5,-16(fp)
  8016f8:	e1bffd15 	stw	r6,-12(fp)
  8016fc:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  801700:	e13ffb17 	ldw	r4,-20(fp)
  801704:	01402074 	movhi	r5,129
  801708:	2953cc04 	addi	r5,r5,20272
  80170c:	08037ec0 	call	8037ec <fopen>
  801710:	e0bfba15 	stw	r2,-280(fp)
  801714:	e0bfba17 	ldw	r2,-280(fp)
  801718:	1004c03a 	cmpne	r2,r2,zero
  80171c:	1000061e 	bne	r2,zero,801738 <pgmwrite2+0x58>
    printf("ERROR: file open failed\n");
  801720:	01002074 	movhi	r4,129
  801724:	21139004 	addi	r4,r4,20032
  801728:	08053480 	call	805348 <puts>
    return (-1);
  80172c:	00bfffc4 	movi	r2,-1
  801730:	e0bfff15 	stw	r2,-4(fp)
  801734:	0000b906 	br	801a1c <pgmwrite2+0x33c>
  }
  if (binsave == 1) {
  801738:	e0800317 	ldw	r2,12(fp)
  80173c:	10800058 	cmpnei	r2,r2,1
  801740:	1000071e 	bne	r2,zero,801760 <pgmwrite2+0x80>
    fprintf(file, "P5\n");
  801744:	01002074 	movhi	r4,129
  801748:	2113cd04 	addi	r4,r4,20276
  80174c:	01400044 	movi	r5,1
  801750:	018000c4 	movi	r6,3
  801754:	e1ffba17 	ldw	r7,-280(fp)
  801758:	08046600 	call	804660 <fwrite>
  80175c:	00000606 	br	801778 <pgmwrite2+0x98>
  } else {
    fprintf(file, "P2\n");
  801760:	01002074 	movhi	r4,129
  801764:	2113ce04 	addi	r4,r4,20280
  801768:	01400044 	movi	r5,1
  80176c:	018000c4 	movi	r6,3
  801770:	e1ffba17 	ldw	r7,-280(fp)
  801774:	08046600 	call	804660 <fwrite>
  }

  if (comment_string != NULL) {
  801778:	e0800217 	ldw	r2,8(fp)
  80177c:	1005003a 	cmpeq	r2,r2,zero
  801780:	1000051e 	bne	r2,zero,801798 <pgmwrite2+0xb8>
    fprintf(file, "# %s \n", comment_string);
  801784:	e13fba17 	ldw	r4,-280(fp)
  801788:	01402074 	movhi	r5,129
  80178c:	2953cf04 	addi	r5,r5,20284
  801790:	e1800217 	ldw	r6,8(fp)
  801794:	08038080 	call	803808 <fprintf>
  }
  fprintf(file, "%d %d \n", col, row);
  801798:	e13fba17 	ldw	r4,-280(fp)
  80179c:	01402074 	movhi	r5,129
  8017a0:	2953d104 	addi	r5,r5,20292
  8017a4:	e1bffd17 	ldw	r6,-12(fp)
  8017a8:	e1fffc17 	ldw	r7,-16(fp)
  8017ac:	08038080 	call	803808 <fprintf>
  maxval = 0;
  8017b0:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++) {
  8017b4:	e03fb615 	stw	zero,-296(fp)
  8017b8:	00002406 	br	80184c <pgmwrite2+0x16c>
    for (j = 0; j < col; j++) {
  8017bc:	e03fb515 	stw	zero,-300(fp)
  8017c0:	00001c06 	br	801834 <pgmwrite2+0x154>
      if ((int)data[i][j] > maxval) {
  8017c4:	e0bfb617 	ldw	r2,-296(fp)
  8017c8:	1085883a 	add	r2,r2,r2
  8017cc:	1085883a 	add	r2,r2,r2
  8017d0:	1007883a 	mov	r3,r2
  8017d4:	e0bffe17 	ldw	r2,-8(fp)
  8017d8:	1885883a 	add	r2,r3,r2
  8017dc:	10c00017 	ldw	r3,0(r2)
  8017e0:	e0bfb517 	ldw	r2,-300(fp)
  8017e4:	1885883a 	add	r2,r3,r2
  8017e8:	10800003 	ldbu	r2,0(r2)
  8017ec:	10c03fcc 	andi	r3,r2,255
  8017f0:	e0bfb917 	ldw	r2,-284(fp)
  8017f4:	10c00c0e 	bge	r2,r3,801828 <pgmwrite2+0x148>
        maxval = (int)data[i][j];
  8017f8:	e0bfb617 	ldw	r2,-296(fp)
  8017fc:	1085883a 	add	r2,r2,r2
  801800:	1085883a 	add	r2,r2,r2
  801804:	1007883a 	mov	r3,r2
  801808:	e0bffe17 	ldw	r2,-8(fp)
  80180c:	1885883a 	add	r2,r3,r2
  801810:	10c00017 	ldw	r3,0(r2)
  801814:	e0bfb517 	ldw	r2,-300(fp)
  801818:	1885883a 	add	r2,r3,r2
  80181c:	10800003 	ldbu	r2,0(r2)
  801820:	10803fcc 	andi	r2,r2,255
  801824:	e0bfb915 	stw	r2,-284(fp)
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
  801828:	e0bfb517 	ldw	r2,-300(fp)
  80182c:	10800044 	addi	r2,r2,1
  801830:	e0bfb515 	stw	r2,-300(fp)
  801834:	e0ffb517 	ldw	r3,-300(fp)
  801838:	e0bffd17 	ldw	r2,-12(fp)
  80183c:	18bfe116 	blt	r3,r2,8017c4 <pgmwrite2+0xe4>
  if (comment_string != NULL) {
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
  801840:	e0bfb617 	ldw	r2,-296(fp)
  801844:	10800044 	addi	r2,r2,1
  801848:	e0bfb615 	stw	r2,-296(fp)
  80184c:	e0ffb617 	ldw	r3,-296(fp)
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	18bfd916 	blt	r3,r2,8017bc <pgmwrite2+0xdc>
      if ((int)data[i][j] > maxval) {
        maxval = (int)data[i][j];
      }
    }
  }
  fprintf(file, "%d\n", maxval);
  801858:	e13fba17 	ldw	r4,-280(fp)
  80185c:	01402074 	movhi	r5,129
  801860:	2953ec04 	addi	r5,r5,20400
  801864:	e1bfb917 	ldw	r6,-284(fp)
  801868:	08038080 	call	803808 <fprintf>
  if (binsave == 1) {
  80186c:	e0800317 	ldw	r2,12(fp)
  801870:	10800058 	cmpnei	r2,r2,1
  801874:	1000431e 	bne	r2,zero,801984 <pgmwrite2+0x2a4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
  801878:	e13ffc17 	ldw	r4,-16(fp)
  80187c:	e17ffd17 	ldw	r5,-12(fp)
  801880:	08027a80 	call	8027a8 <__mulsi3>
  801884:	1009883a 	mov	r4,r2
  801888:	01400044 	movi	r5,1
  80188c:	0802cac0 	call	802cac <calloc>
  801890:	e0bfb315 	stw	r2,-308(fp)
  801894:	e0bfb317 	ldw	r2,-308(fp)
  801898:	1004c03a 	cmpne	r2,r2,zero
  80189c:	1000051e 	bne	r2,zero,8018b4 <pgmwrite2+0x1d4>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  8018a0:	01002074 	movhi	r4,129
  8018a4:	2113a904 	addi	r4,r4,20132
  8018a8:	08053480 	call	805348 <puts>
      exit(-1);
  8018ac:	013fffc4 	movi	r4,-1
  8018b0:	0802de40 	call	802de4 <exit>
    }
    for (i = 0; i < row; i++) {
  8018b4:	e03fb615 	stw	zero,-296(fp)
  8018b8:	00001f06 	br	801938 <pgmwrite2+0x258>
      for (j = 0; j < col; j++) {
  8018bc:	e03fb515 	stw	zero,-300(fp)
  8018c0:	00001706 	br	801920 <pgmwrite2+0x240>
        temp[(i * col) + j] = (unsigned char)data[i][j];
  8018c4:	e13fb617 	ldw	r4,-296(fp)
  8018c8:	e17ffd17 	ldw	r5,-12(fp)
  8018cc:	08027a80 	call	8027a8 <__mulsi3>
  8018d0:	1007883a 	mov	r3,r2
  8018d4:	e0bfb517 	ldw	r2,-300(fp)
  8018d8:	1885883a 	add	r2,r3,r2
  8018dc:	1007883a 	mov	r3,r2
  8018e0:	e0bfb317 	ldw	r2,-308(fp)
  8018e4:	1889883a 	add	r4,r3,r2
  8018e8:	e0bfb617 	ldw	r2,-296(fp)
  8018ec:	1085883a 	add	r2,r2,r2
  8018f0:	1085883a 	add	r2,r2,r2
  8018f4:	1007883a 	mov	r3,r2
  8018f8:	e0bffe17 	ldw	r2,-8(fp)
  8018fc:	1885883a 	add	r2,r3,r2
  801900:	10c00017 	ldw	r3,0(r2)
  801904:	e0bfb517 	ldw	r2,-300(fp)
  801908:	1885883a 	add	r2,r3,r2
  80190c:	10800003 	ldbu	r2,0(r2)
  801910:	20800005 	stb	r2,0(r4)
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
  801914:	e0bfb517 	ldw	r2,-300(fp)
  801918:	10800044 	addi	r2,r2,1
  80191c:	e0bfb515 	stw	r2,-300(fp)
  801920:	e0ffb517 	ldw	r3,-300(fp)
  801924:	e0bffd17 	ldw	r2,-12(fp)
  801928:	18bfe616 	blt	r3,r2,8018c4 <pgmwrite2+0x1e4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
  80192c:	e0bfb617 	ldw	r2,-296(fp)
  801930:	10800044 	addi	r2,r2,1
  801934:	e0bfb615 	stw	r2,-296(fp)
  801938:	e0ffb617 	ldw	r3,-296(fp)
  80193c:	e0bffc17 	ldw	r2,-16(fp)
  801940:	18bfde16 	blt	r3,r2,8018bc <pgmwrite2+0x1dc>
      for (j = 0; j < col; j++) {
        temp[(i * col) + j] = (unsigned char)data[i][j];
      }
    }
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
  801944:	e13ffc17 	ldw	r4,-16(fp)
  801948:	e17ffd17 	ldw	r5,-12(fp)
  80194c:	08027a80 	call	8027a8 <__mulsi3>
  801950:	100d883a 	mov	r6,r2
  801954:	e13fb317 	ldw	r4,-308(fp)
  801958:	01400044 	movi	r5,1
  80195c:	e1ffba17 	ldw	r7,-280(fp)
  801960:	08046600 	call	804660 <fwrite>
  801964:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801968:	01002074 	movhi	r4,129
  80196c:	2113d504 	addi	r4,r4,20308
  801970:	e17ffb17 	ldw	r5,-20(fp)
  801974:	08052300 	call	805230 <printf>
    free(temp);
  801978:	e13fb317 	ldw	r4,-308(fp)
  80197c:	08048340 	call	804834 <free>
  801980:	00002306 	br	801a10 <pgmwrite2+0x330>
  } else {
    printf("Writing to %s as ascii.\n", filename);
  801984:	01002074 	movhi	r4,129
  801988:	2113dc04 	addi	r4,r4,20336
  80198c:	e17ffb17 	ldw	r5,-20(fp)
  801990:	08052300 	call	805230 <printf>
    for (j = 0; j < row; j++) {
  801994:	e03fb515 	stw	zero,-300(fp)
  801998:	00001a06 	br	801a04 <pgmwrite2+0x324>
      for (i = 0; i < col; i++) {
  80199c:	e03fb615 	stw	zero,-296(fp)
  8019a0:	00001206 	br	8019ec <pgmwrite2+0x30c>
        fprintf(file, "%d ", (int)data[j][i]);
  8019a4:	e0bfb517 	ldw	r2,-300(fp)
  8019a8:	1085883a 	add	r2,r2,r2
  8019ac:	1085883a 	add	r2,r2,r2
  8019b0:	1007883a 	mov	r3,r2
  8019b4:	e0bffe17 	ldw	r2,-8(fp)
  8019b8:	1885883a 	add	r2,r3,r2
  8019bc:	10c00017 	ldw	r3,0(r2)
  8019c0:	e0bfb617 	ldw	r2,-296(fp)
  8019c4:	1885883a 	add	r2,r3,r2
  8019c8:	10800003 	ldbu	r2,0(r2)
  8019cc:	11803fcc 	andi	r6,r2,255
  8019d0:	e13fba17 	ldw	r4,-280(fp)
  8019d4:	01402074 	movhi	r5,129
  8019d8:	2953e304 	addi	r5,r5,20364
  8019dc:	08038080 	call	803808 <fprintf>
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
      for (i = 0; i < col; i++) {
  8019e0:	e0bfb617 	ldw	r2,-296(fp)
  8019e4:	10800044 	addi	r2,r2,1
  8019e8:	e0bfb615 	stw	r2,-296(fp)
  8019ec:	e0ffb617 	ldw	r3,-296(fp)
  8019f0:	e0bffd17 	ldw	r2,-12(fp)
  8019f4:	18bfeb16 	blt	r3,r2,8019a4 <pgmwrite2+0x2c4>
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
  8019f8:	e0bfb517 	ldw	r2,-300(fp)
  8019fc:	10800044 	addi	r2,r2,1
  801a00:	e0bfb515 	stw	r2,-300(fp)
  801a04:	e0ffb517 	ldw	r3,-300(fp)
  801a08:	e0bffc17 	ldw	r2,-16(fp)
  801a0c:	18bfe316 	blt	r3,r2,80199c <pgmwrite2+0x2bc>
      for (i = 0; i < col; i++) {
        fprintf(file, "%d ", (int)data[j][i]);
      }
    }
  }
  fclose(file);
  801a10:	e13fba17 	ldw	r4,-280(fp)
  801a14:	0802f2c0 	call	802f2c <fclose>
  return (0);
  801a18:	e03fff15 	stw	zero,-4(fp)
  801a1c:	e0bfff17 	ldw	r2,-4(fp)
}
  801a20:	e037883a 	mov	sp,fp
  801a24:	dfc00117 	ldw	ra,4(sp)
  801a28:	df000017 	ldw	fp,0(sp)
  801a2c:	dec00204 	addi	sp,sp,8
  801a30:	f800283a 	ret

00801a34 <ppmwrite2>:

int ppmwrite2(char* filename, int row, int col, unsigned char** datar,
              unsigned char** datag, unsigned char** datab,
              char* comment_string, int binsave) {
  801a34:	deffb004 	addi	sp,sp,-320
  801a38:	dfc04f15 	stw	ra,316(sp)
  801a3c:	df004e15 	stw	fp,312(sp)
  801a40:	df004e04 	addi	fp,sp,312
  801a44:	e13ffb15 	stw	r4,-20(fp)
  801a48:	e17ffc15 	stw	r5,-16(fp)
  801a4c:	e1bffd15 	stw	r6,-12(fp)
  801a50:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  801a54:	e13ffb17 	ldw	r4,-20(fp)
  801a58:	01402074 	movhi	r5,129
  801a5c:	2953cc04 	addi	r5,r5,20272
  801a60:	08037ec0 	call	8037ec <fopen>
  801a64:	e0bfba15 	stw	r2,-280(fp)
  801a68:	e0bfba17 	ldw	r2,-280(fp)
  801a6c:	1004c03a 	cmpne	r2,r2,zero
  801a70:	1000061e 	bne	r2,zero,801a8c <ppmwrite2+0x58>
    printf("ERROR: file open failed\n");
  801a74:	01002074 	movhi	r4,129
  801a78:	21139004 	addi	r4,r4,20032
  801a7c:	08053480 	call	805348 <puts>
    return (-1);
  801a80:	00bfffc4 	movi	r2,-1
  801a84:	e0bfff15 	stw	r2,-4(fp)
  801a88:	00010506 	br	801ea0 <ppmwrite2+0x46c>
  }

  if (binsave == 1)
  801a8c:	e0800517 	ldw	r2,20(fp)
  801a90:	10800058 	cmpnei	r2,r2,1
  801a94:	1000071e 	bne	r2,zero,801ab4 <ppmwrite2+0x80>
    fprintf(file, "P6\n");
  801a98:	01002074 	movhi	r4,129
  801a9c:	2113ed04 	addi	r4,r4,20404
  801aa0:	01400044 	movi	r5,1
  801aa4:	018000c4 	movi	r6,3
  801aa8:	e1ffba17 	ldw	r7,-280(fp)
  801aac:	08046600 	call	804660 <fwrite>
  801ab0:	00000606 	br	801acc <ppmwrite2+0x98>
  else
    fprintf(file, "P3\n");
  801ab4:	01002074 	movhi	r4,129
  801ab8:	2113ee04 	addi	r4,r4,20408
  801abc:	01400044 	movi	r5,1
  801ac0:	018000c4 	movi	r6,3
  801ac4:	e1ffba17 	ldw	r7,-280(fp)
  801ac8:	08046600 	call	804660 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  801acc:	e0800417 	ldw	r2,16(fp)
  801ad0:	1005003a 	cmpeq	r2,r2,zero
  801ad4:	1000051e 	bne	r2,zero,801aec <ppmwrite2+0xb8>
  801ad8:	e13fba17 	ldw	r4,-280(fp)
  801adc:	01402074 	movhi	r5,129
  801ae0:	2953cf04 	addi	r5,r5,20284
  801ae4:	e1800417 	ldw	r6,16(fp)
  801ae8:	08038080 	call	803808 <fprintf>

  fprintf(file, "%d %d \n", col, row);
  801aec:	e13fba17 	ldw	r4,-280(fp)
  801af0:	01402074 	movhi	r5,129
  801af4:	2953d104 	addi	r5,r5,20292
  801af8:	e1bffd17 	ldw	r6,-12(fp)
  801afc:	e1fffc17 	ldw	r7,-16(fp)
  801b00:	08038080 	call	803808 <fprintf>

  maxval = 0;
  801b04:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++)
  801b08:	e03fb615 	stw	zero,-296(fp)
  801b0c:	00002406 	br	801ba0 <ppmwrite2+0x16c>
    for (j = 0; j < col; j++)
  801b10:	e03fb515 	stw	zero,-300(fp)
  801b14:	00001c06 	br	801b88 <ppmwrite2+0x154>
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];
  801b18:	e0bfb617 	ldw	r2,-296(fp)
  801b1c:	1085883a 	add	r2,r2,r2
  801b20:	1085883a 	add	r2,r2,r2
  801b24:	1007883a 	mov	r3,r2
  801b28:	e0bffe17 	ldw	r2,-8(fp)
  801b2c:	1885883a 	add	r2,r3,r2
  801b30:	10c00017 	ldw	r3,0(r2)
  801b34:	e0bfb517 	ldw	r2,-300(fp)
  801b38:	1885883a 	add	r2,r3,r2
  801b3c:	10800003 	ldbu	r2,0(r2)
  801b40:	10c03fcc 	andi	r3,r2,255
  801b44:	e0bfb917 	ldw	r2,-284(fp)
  801b48:	10c00c0e 	bge	r2,r3,801b7c <ppmwrite2+0x148>
  801b4c:	e0bfb617 	ldw	r2,-296(fp)
  801b50:	1085883a 	add	r2,r2,r2
  801b54:	1085883a 	add	r2,r2,r2
  801b58:	1007883a 	mov	r3,r2
  801b5c:	e0bffe17 	ldw	r2,-8(fp)
  801b60:	1885883a 	add	r2,r3,r2
  801b64:	10c00017 	ldw	r3,0(r2)
  801b68:	e0bfb517 	ldw	r2,-300(fp)
  801b6c:	1885883a 	add	r2,r3,r2
  801b70:	10800003 	ldbu	r2,0(r2)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
    for (j = 0; j < col; j++)
  801b7c:	e0bfb517 	ldw	r2,-300(fp)
  801b80:	10800044 	addi	r2,r2,1
  801b84:	e0bfb515 	stw	r2,-300(fp)
  801b88:	e0ffb517 	ldw	r3,-300(fp)
  801b8c:	e0bffd17 	ldw	r2,-12(fp)
  801b90:	18bfe116 	blt	r3,r2,801b18 <ppmwrite2+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
  801b94:	e0bfb617 	ldw	r2,-296(fp)
  801b98:	10800044 	addi	r2,r2,1
  801b9c:	e0bfb615 	stw	r2,-296(fp)
  801ba0:	e0ffb617 	ldw	r3,-296(fp)
  801ba4:	e0bffc17 	ldw	r2,-16(fp)
  801ba8:	18bfd916 	blt	r3,r2,801b10 <ppmwrite2+0xdc>
    for (j = 0; j < col; j++)
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];

  maxval = 255;
  801bac:	00803fc4 	movi	r2,255
  801bb0:	e0bfb915 	stw	r2,-284(fp)
  fprintf(file, "%d\n", maxval);
  801bb4:	e13fba17 	ldw	r4,-280(fp)
  801bb8:	01402074 	movhi	r5,129
  801bbc:	2953ec04 	addi	r5,r5,20400
  801bc0:	e1bfb917 	ldw	r6,-284(fp)
  801bc4:	08038080 	call	803808 <fprintf>

  if (binsave == 1) {
  801bc8:	e0800517 	ldw	r2,20(fp)
  801bcc:	10800058 	cmpnei	r2,r2,1
  801bd0:	1000761e 	bne	r2,zero,801dac <ppmwrite2+0x378>
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));
  801bd4:	e13ffc17 	ldw	r4,-16(fp)
  801bd8:	e17ffd17 	ldw	r5,-12(fp)
  801bdc:	08027a80 	call	8027a8 <__mulsi3>
  801be0:	1007883a 	mov	r3,r2
  801be4:	1805883a 	mov	r2,r3
  801be8:	1085883a 	add	r2,r2,r2
  801bec:	10c5883a 	add	r2,r2,r3
  801bf0:	1009883a 	mov	r4,r2
  801bf4:	01400044 	movi	r5,1
  801bf8:	0802cac0 	call	802cac <calloc>
  801bfc:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < row; i++)
  801c00:	e03fb615 	stw	zero,-296(fp)
  801c04:	00005206 	br	801d50 <ppmwrite2+0x31c>
      for (j = 0; j < col; j++) {
  801c08:	e03fb515 	stw	zero,-300(fp)
  801c0c:	00004a06 	br	801d38 <ppmwrite2+0x304>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
  801c10:	e13fb617 	ldw	r4,-296(fp)
  801c14:	e17ffd17 	ldw	r5,-12(fp)
  801c18:	08027a80 	call	8027a8 <__mulsi3>
  801c1c:	1007883a 	mov	r3,r2
  801c20:	e0bfb517 	ldw	r2,-300(fp)
  801c24:	1887883a 	add	r3,r3,r2
  801c28:	1805883a 	mov	r2,r3
  801c2c:	1085883a 	add	r2,r2,r2
  801c30:	10c5883a 	add	r2,r2,r3
  801c34:	1007883a 	mov	r3,r2
  801c38:	e0bfb317 	ldw	r2,-308(fp)
  801c3c:	1889883a 	add	r4,r3,r2
  801c40:	e0bfb617 	ldw	r2,-296(fp)
  801c44:	1085883a 	add	r2,r2,r2
  801c48:	1085883a 	add	r2,r2,r2
  801c4c:	1007883a 	mov	r3,r2
  801c50:	e0bffe17 	ldw	r2,-8(fp)
  801c54:	1885883a 	add	r2,r3,r2
  801c58:	10c00017 	ldw	r3,0(r2)
  801c5c:	e0bfb517 	ldw	r2,-300(fp)
  801c60:	1885883a 	add	r2,r3,r2
  801c64:	10800003 	ldbu	r2,0(r2)
  801c68:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
  801c6c:	e13fb617 	ldw	r4,-296(fp)
  801c70:	e17ffd17 	ldw	r5,-12(fp)
  801c74:	08027a80 	call	8027a8 <__mulsi3>
  801c78:	1007883a 	mov	r3,r2
  801c7c:	e0bfb517 	ldw	r2,-300(fp)
  801c80:	1887883a 	add	r3,r3,r2
  801c84:	1805883a 	mov	r2,r3
  801c88:	1085883a 	add	r2,r2,r2
  801c8c:	10c5883a 	add	r2,r2,r3
  801c90:	1007883a 	mov	r3,r2
  801c94:	e0bfb317 	ldw	r2,-308(fp)
  801c98:	1885883a 	add	r2,r3,r2
  801c9c:	11000044 	addi	r4,r2,1
  801ca0:	e0bfb617 	ldw	r2,-296(fp)
  801ca4:	1085883a 	add	r2,r2,r2
  801ca8:	1085883a 	add	r2,r2,r2
  801cac:	1007883a 	mov	r3,r2
  801cb0:	e0800217 	ldw	r2,8(fp)
  801cb4:	1885883a 	add	r2,r3,r2
  801cb8:	10c00017 	ldw	r3,0(r2)
  801cbc:	e0bfb517 	ldw	r2,-300(fp)
  801cc0:	1885883a 	add	r2,r3,r2
  801cc4:	10800003 	ldbu	r2,0(r2)
  801cc8:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
  801ccc:	e13fb617 	ldw	r4,-296(fp)
  801cd0:	e17ffd17 	ldw	r5,-12(fp)
  801cd4:	08027a80 	call	8027a8 <__mulsi3>
  801cd8:	1007883a 	mov	r3,r2
  801cdc:	e0bfb517 	ldw	r2,-300(fp)
  801ce0:	1887883a 	add	r3,r3,r2
  801ce4:	1805883a 	mov	r2,r3
  801ce8:	1085883a 	add	r2,r2,r2
  801cec:	10c5883a 	add	r2,r2,r3
  801cf0:	1007883a 	mov	r3,r2
  801cf4:	e0bfb317 	ldw	r2,-308(fp)
  801cf8:	1885883a 	add	r2,r3,r2
  801cfc:	11000084 	addi	r4,r2,2
  801d00:	e0bfb617 	ldw	r2,-296(fp)
  801d04:	1085883a 	add	r2,r2,r2
  801d08:	1085883a 	add	r2,r2,r2
  801d0c:	1007883a 	mov	r3,r2
  801d10:	e0800317 	ldw	r2,12(fp)
  801d14:	1885883a 	add	r2,r3,r2
  801d18:	10c00017 	ldw	r3,0(r2)
  801d1c:	e0bfb517 	ldw	r2,-300(fp)
  801d20:	1885883a 	add	r2,r3,r2
  801d24:	10800003 	ldbu	r2,0(r2)
  801d28:	20800005 	stb	r2,0(r4)

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
      for (j = 0; j < col; j++) {
  801d2c:	e0bfb517 	ldw	r2,-300(fp)
  801d30:	10800044 	addi	r2,r2,1
  801d34:	e0bfb515 	stw	r2,-300(fp)
  801d38:	e0ffb517 	ldw	r3,-300(fp)
  801d3c:	e0bffd17 	ldw	r2,-12(fp)
  801d40:	18bfb316 	blt	r3,r2,801c10 <ppmwrite2+0x1dc>
  fprintf(file, "%d\n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
  801d44:	e0bfb617 	ldw	r2,-296(fp)
  801d48:	10800044 	addi	r2,r2,1
  801d4c:	e0bfb615 	stw	r2,-296(fp)
  801d50:	e0ffb617 	ldw	r3,-296(fp)
  801d54:	e0bffc17 	ldw	r2,-16(fp)
  801d58:	18bfab16 	blt	r3,r2,801c08 <ppmwrite2+0x1d4>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
      }

    nread = fwrite((void*)temp, sizeof(unsigned char), (3 * row * col), file);
  801d5c:	e13ffc17 	ldw	r4,-16(fp)
  801d60:	e17ffd17 	ldw	r5,-12(fp)
  801d64:	08027a80 	call	8027a8 <__mulsi3>
  801d68:	1007883a 	mov	r3,r2
  801d6c:	1805883a 	mov	r2,r3
  801d70:	1085883a 	add	r2,r2,r2
  801d74:	10c5883a 	add	r2,r2,r3
  801d78:	100d883a 	mov	r6,r2
  801d7c:	e13fb317 	ldw	r4,-308(fp)
  801d80:	01400044 	movi	r5,1
  801d84:	e1ffba17 	ldw	r7,-280(fp)
  801d88:	08046600 	call	804660 <fwrite>
  801d8c:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801d90:	01002074 	movhi	r4,129
  801d94:	2113d504 	addi	r4,r4,20308
  801d98:	e17ffb17 	ldw	r5,-20(fp)
  801d9c:	08052300 	call	805230 <printf>
    free(temp);
  801da0:	e13fb317 	ldw	r4,-308(fp)
  801da4:	08048340 	call	804834 <free>
  801da8:	00003a06 	br	801e94 <ppmwrite2+0x460>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  801dac:	01002074 	movhi	r4,129
  801db0:	2113dc04 	addi	r4,r4,20336
  801db4:	e17ffb17 	ldw	r5,-20(fp)
  801db8:	08052300 	call	805230 <printf>

    for (j = 0; j < row; j++)
  801dbc:	e03fb515 	stw	zero,-300(fp)
  801dc0:	00003106 	br	801e88 <ppmwrite2+0x454>
      for (i = 0; i < col; i++)
  801dc4:	e03fb615 	stw	zero,-296(fp)
  801dc8:	00002906 	br	801e70 <ppmwrite2+0x43c>
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
  801dcc:	e0bfb517 	ldw	r2,-300(fp)
  801dd0:	1085883a 	add	r2,r2,r2
  801dd4:	1085883a 	add	r2,r2,r2
  801dd8:	1007883a 	mov	r3,r2
  801ddc:	e0bffe17 	ldw	r2,-8(fp)
  801de0:	1885883a 	add	r2,r3,r2
  801de4:	10c00017 	ldw	r3,0(r2)
  801de8:	e0bfb617 	ldw	r2,-296(fp)
  801dec:	1885883a 	add	r2,r3,r2
  801df0:	10800003 	ldbu	r2,0(r2)
  801df4:	11803fcc 	andi	r6,r2,255
  801df8:	e0bfb517 	ldw	r2,-300(fp)
  801dfc:	1085883a 	add	r2,r2,r2
  801e00:	1085883a 	add	r2,r2,r2
  801e04:	1007883a 	mov	r3,r2
  801e08:	e0800217 	ldw	r2,8(fp)
  801e0c:	1885883a 	add	r2,r3,r2
  801e10:	10c00017 	ldw	r3,0(r2)
  801e14:	e0bfb617 	ldw	r2,-296(fp)
  801e18:	1885883a 	add	r2,r3,r2
  801e1c:	10800003 	ldbu	r2,0(r2)
  801e20:	11c03fcc 	andi	r7,r2,255
  801e24:	e0bfb517 	ldw	r2,-300(fp)
  801e28:	1085883a 	add	r2,r2,r2
  801e2c:	1085883a 	add	r2,r2,r2
  801e30:	1007883a 	mov	r3,r2
  801e34:	e0800317 	ldw	r2,12(fp)
  801e38:	1885883a 	add	r2,r3,r2
  801e3c:	10c00017 	ldw	r3,0(r2)
  801e40:	e0bfb617 	ldw	r2,-296(fp)
  801e44:	1885883a 	add	r2,r3,r2
  801e48:	10800003 	ldbu	r2,0(r2)
  801e4c:	10803fcc 	andi	r2,r2,255
  801e50:	d8800015 	stw	r2,0(sp)
  801e54:	e13fba17 	ldw	r4,-280(fp)
  801e58:	01402074 	movhi	r5,129
  801e5c:	2953ef04 	addi	r5,r5,20412
  801e60:	08038080 	call	803808 <fprintf>

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
      for (i = 0; i < col; i++)
  801e64:	e0bfb617 	ldw	r2,-296(fp)
  801e68:	10800044 	addi	r2,r2,1
  801e6c:	e0bfb615 	stw	r2,-296(fp)
  801e70:	e0ffb617 	ldw	r3,-296(fp)
  801e74:	e0bffd17 	ldw	r2,-12(fp)
  801e78:	18bfd416 	blt	r3,r2,801dcc <ppmwrite2+0x398>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
  801e7c:	e0bfb517 	ldw	r2,-300(fp)
  801e80:	10800044 	addi	r2,r2,1
  801e84:	e0bfb515 	stw	r2,-300(fp)
  801e88:	e0ffb517 	ldw	r3,-300(fp)
  801e8c:	e0bffc17 	ldw	r2,-16(fp)
  801e90:	18bfcc16 	blt	r3,r2,801dc4 <ppmwrite2+0x390>
      for (i = 0; i < col; i++)
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
                (int)datab[j][i]);
  }

  fclose(file);
  801e94:	e13fba17 	ldw	r4,-280(fp)
  801e98:	0802f2c0 	call	802f2c <fclose>
  return (0);
  801e9c:	e03fff15 	stw	zero,-4(fp)
  801ea0:	e0bfff17 	ldw	r2,-4(fp)
}
  801ea4:	e037883a 	mov	sp,fp
  801ea8:	dfc00117 	ldw	ra,4(sp)
  801eac:	df000017 	ldw	fp,0(sp)
  801eb0:	dec00204 	addi	sp,sp,8
  801eb4:	f800283a 	ret

00801eb8 <_fpadd_parts>:
  801eb8:	defff804 	addi	sp,sp,-32
  801ebc:	dcc00315 	stw	r19,12(sp)
  801ec0:	2027883a 	mov	r19,r4
  801ec4:	21000017 	ldw	r4,0(r4)
  801ec8:	00c00044 	movi	r3,1
  801ecc:	dd400515 	stw	r21,20(sp)
  801ed0:	dd000415 	stw	r20,16(sp)
  801ed4:	ddc00715 	stw	r23,28(sp)
  801ed8:	dd800615 	stw	r22,24(sp)
  801edc:	dc800215 	stw	r18,8(sp)
  801ee0:	dc400115 	stw	r17,4(sp)
  801ee4:	dc000015 	stw	r16,0(sp)
  801ee8:	282b883a 	mov	r21,r5
  801eec:	3029883a 	mov	r20,r6
  801ef0:	1900632e 	bgeu	r3,r4,802080 <_fpadd_parts+0x1c8>
  801ef4:	28800017 	ldw	r2,0(r5)
  801ef8:	1880812e 	bgeu	r3,r2,802100 <_fpadd_parts+0x248>
  801efc:	00c00104 	movi	r3,4
  801f00:	20c0dc26 	beq	r4,r3,802274 <_fpadd_parts+0x3bc>
  801f04:	10c07e26 	beq	r2,r3,802100 <_fpadd_parts+0x248>
  801f08:	00c00084 	movi	r3,2
  801f0c:	10c06726 	beq	r2,r3,8020ac <_fpadd_parts+0x1f4>
  801f10:	20c07b26 	beq	r4,r3,802100 <_fpadd_parts+0x248>
  801f14:	9dc00217 	ldw	r23,8(r19)
  801f18:	28c00217 	ldw	r3,8(r5)
  801f1c:	9c400317 	ldw	r17,12(r19)
  801f20:	2bc00317 	ldw	r15,12(r5)
  801f24:	b8cdc83a 	sub	r6,r23,r3
  801f28:	9c800417 	ldw	r18,16(r19)
  801f2c:	2c000417 	ldw	r16,16(r5)
  801f30:	3009883a 	mov	r4,r6
  801f34:	30009716 	blt	r6,zero,802194 <_fpadd_parts+0x2dc>
  801f38:	00800fc4 	movi	r2,63
  801f3c:	11806b16 	blt	r2,r6,8020ec <_fpadd_parts+0x234>
  801f40:	0100a40e 	bge	zero,r4,8021d4 <_fpadd_parts+0x31c>
  801f44:	35bff804 	addi	r22,r6,-32
  801f48:	b000bc16 	blt	r22,zero,80223c <_fpadd_parts+0x384>
  801f4c:	8596d83a 	srl	r11,r16,r22
  801f50:	0019883a 	mov	r12,zero
  801f54:	0013883a 	mov	r9,zero
  801f58:	01000044 	movi	r4,1
  801f5c:	0015883a 	mov	r10,zero
  801f60:	b000be16 	blt	r22,zero,80225c <_fpadd_parts+0x3a4>
  801f64:	2590983a 	sll	r8,r4,r22
  801f68:	000f883a 	mov	r7,zero
  801f6c:	00bfffc4 	movi	r2,-1
  801f70:	3889883a 	add	r4,r7,r2
  801f74:	408b883a 	add	r5,r8,r2
  801f78:	21cd803a 	cmpltu	r6,r4,r7
  801f7c:	314b883a 	add	r5,r6,r5
  801f80:	7904703a 	and	r2,r15,r4
  801f84:	8146703a 	and	r3,r16,r5
  801f88:	10c4b03a 	or	r2,r2,r3
  801f8c:	10000226 	beq	r2,zero,801f98 <_fpadd_parts+0xe0>
  801f90:	02400044 	movi	r9,1
  801f94:	0015883a 	mov	r10,zero
  801f98:	5a5eb03a 	or	r15,r11,r9
  801f9c:	62a0b03a 	or	r16,r12,r10
  801fa0:	99400117 	ldw	r5,4(r19)
  801fa4:	a8800117 	ldw	r2,4(r21)
  801fa8:	28806e26 	beq	r5,r2,802164 <_fpadd_parts+0x2ac>
  801fac:	28006626 	beq	r5,zero,802148 <_fpadd_parts+0x290>
  801fb0:	7c45c83a 	sub	r2,r15,r17
  801fb4:	7889803a 	cmpltu	r4,r15,r2
  801fb8:	8487c83a 	sub	r3,r16,r18
  801fbc:	1909c83a 	sub	r4,r3,r4
  801fc0:	100d883a 	mov	r6,r2
  801fc4:	200f883a 	mov	r7,r4
  801fc8:	38007716 	blt	r7,zero,8021a8 <_fpadd_parts+0x2f0>
  801fcc:	a5c00215 	stw	r23,8(r20)
  801fd0:	a1c00415 	stw	r7,16(r20)
  801fd4:	a0000115 	stw	zero,4(r20)
  801fd8:	a1800315 	stw	r6,12(r20)
  801fdc:	a2000317 	ldw	r8,12(r20)
  801fe0:	a2400417 	ldw	r9,16(r20)
  801fe4:	00bfffc4 	movi	r2,-1
  801fe8:	408b883a 	add	r5,r8,r2
  801fec:	2a09803a 	cmpltu	r4,r5,r8
  801ff0:	488d883a 	add	r6,r9,r2
  801ff4:	01c40034 	movhi	r7,4096
  801ff8:	39ffffc4 	addi	r7,r7,-1
  801ffc:	218d883a 	add	r6,r4,r6
  802000:	39801736 	bltu	r7,r6,802060 <_fpadd_parts+0x1a8>
  802004:	31c06526 	beq	r6,r7,80219c <_fpadd_parts+0x2e4>
  802008:	a3000217 	ldw	r12,8(r20)
  80200c:	4209883a 	add	r4,r8,r8
  802010:	00bfffc4 	movi	r2,-1
  802014:	220f803a 	cmpltu	r7,r4,r8
  802018:	4a4b883a 	add	r5,r9,r9
  80201c:	394f883a 	add	r7,r7,r5
  802020:	2095883a 	add	r10,r4,r2
  802024:	3897883a 	add	r11,r7,r2
  802028:	510d803a 	cmpltu	r6,r10,r4
  80202c:	6099883a 	add	r12,r12,r2
  802030:	32d7883a 	add	r11,r6,r11
  802034:	00840034 	movhi	r2,4096
  802038:	10bfffc4 	addi	r2,r2,-1
  80203c:	2011883a 	mov	r8,r4
  802040:	3813883a 	mov	r9,r7
  802044:	a1000315 	stw	r4,12(r20)
  802048:	a1c00415 	stw	r7,16(r20)
  80204c:	a3000215 	stw	r12,8(r20)
  802050:	12c00336 	bltu	r2,r11,802060 <_fpadd_parts+0x1a8>
  802054:	58bfed1e 	bne	r11,r2,80200c <_fpadd_parts+0x154>
  802058:	00bfff84 	movi	r2,-2
  80205c:	12bfeb2e 	bgeu	r2,r10,80200c <_fpadd_parts+0x154>
  802060:	a2800417 	ldw	r10,16(r20)
  802064:	008000c4 	movi	r2,3
  802068:	00c80034 	movhi	r3,8192
  80206c:	18ffffc4 	addi	r3,r3,-1
  802070:	a2400317 	ldw	r9,12(r20)
  802074:	a0800015 	stw	r2,0(r20)
  802078:	1a802336 	bltu	r3,r10,802108 <_fpadd_parts+0x250>
  80207c:	a027883a 	mov	r19,r20
  802080:	9805883a 	mov	r2,r19
  802084:	ddc00717 	ldw	r23,28(sp)
  802088:	dd800617 	ldw	r22,24(sp)
  80208c:	dd400517 	ldw	r21,20(sp)
  802090:	dd000417 	ldw	r20,16(sp)
  802094:	dcc00317 	ldw	r19,12(sp)
  802098:	dc800217 	ldw	r18,8(sp)
  80209c:	dc400117 	ldw	r17,4(sp)
  8020a0:	dc000017 	ldw	r16,0(sp)
  8020a4:	dec00804 	addi	sp,sp,32
  8020a8:	f800283a 	ret
  8020ac:	20fff41e 	bne	r4,r3,802080 <_fpadd_parts+0x1c8>
  8020b0:	31000015 	stw	r4,0(r6)
  8020b4:	98800117 	ldw	r2,4(r19)
  8020b8:	30800115 	stw	r2,4(r6)
  8020bc:	98c00217 	ldw	r3,8(r19)
  8020c0:	30c00215 	stw	r3,8(r6)
  8020c4:	98800317 	ldw	r2,12(r19)
  8020c8:	30800315 	stw	r2,12(r6)
  8020cc:	98c00417 	ldw	r3,16(r19)
  8020d0:	30c00415 	stw	r3,16(r6)
  8020d4:	98800117 	ldw	r2,4(r19)
  8020d8:	28c00117 	ldw	r3,4(r5)
  8020dc:	3027883a 	mov	r19,r6
  8020e0:	10c4703a 	and	r2,r2,r3
  8020e4:	30800115 	stw	r2,4(r6)
  8020e8:	003fe506 	br	802080 <_fpadd_parts+0x1c8>
  8020ec:	1dc02616 	blt	r3,r23,802188 <_fpadd_parts+0x2d0>
  8020f0:	0023883a 	mov	r17,zero
  8020f4:	182f883a 	mov	r23,r3
  8020f8:	0025883a 	mov	r18,zero
  8020fc:	003fa806 	br	801fa0 <_fpadd_parts+0xe8>
  802100:	a827883a 	mov	r19,r21
  802104:	003fde06 	br	802080 <_fpadd_parts+0x1c8>
  802108:	01800044 	movi	r6,1
  80210c:	500497fa 	slli	r2,r10,31
  802110:	4808d07a 	srli	r4,r9,1
  802114:	518ad83a 	srl	r5,r10,r6
  802118:	a2000217 	ldw	r8,8(r20)
  80211c:	1108b03a 	or	r4,r2,r4
  802120:	0007883a 	mov	r3,zero
  802124:	4984703a 	and	r2,r9,r6
  802128:	208cb03a 	or	r6,r4,r2
  80212c:	28ceb03a 	or	r7,r5,r3
  802130:	42000044 	addi	r8,r8,1
  802134:	a027883a 	mov	r19,r20
  802138:	a1c00415 	stw	r7,16(r20)
  80213c:	a2000215 	stw	r8,8(r20)
  802140:	a1800315 	stw	r6,12(r20)
  802144:	003fce06 	br	802080 <_fpadd_parts+0x1c8>
  802148:	8bc5c83a 	sub	r2,r17,r15
  80214c:	8889803a 	cmpltu	r4,r17,r2
  802150:	9407c83a 	sub	r3,r18,r16
  802154:	1909c83a 	sub	r4,r3,r4
  802158:	100d883a 	mov	r6,r2
  80215c:	200f883a 	mov	r7,r4
  802160:	003f9906 	br	801fc8 <_fpadd_parts+0x110>
  802164:	7c45883a 	add	r2,r15,r17
  802168:	13c9803a 	cmpltu	r4,r2,r15
  80216c:	8487883a 	add	r3,r16,r18
  802170:	20c9883a 	add	r4,r4,r3
  802174:	a1400115 	stw	r5,4(r20)
  802178:	a5c00215 	stw	r23,8(r20)
  80217c:	a0800315 	stw	r2,12(r20)
  802180:	a1000415 	stw	r4,16(r20)
  802184:	003fb606 	br	802060 <_fpadd_parts+0x1a8>
  802188:	001f883a 	mov	r15,zero
  80218c:	0021883a 	mov	r16,zero
  802190:	003f8306 	br	801fa0 <_fpadd_parts+0xe8>
  802194:	018dc83a 	sub	r6,zero,r6
  802198:	003f6706 	br	801f38 <_fpadd_parts+0x80>
  80219c:	00bfff84 	movi	r2,-2
  8021a0:	117faf36 	bltu	r2,r5,802060 <_fpadd_parts+0x1a8>
  8021a4:	003f9806 	br	802008 <_fpadd_parts+0x150>
  8021a8:	0005883a 	mov	r2,zero
  8021ac:	1189c83a 	sub	r4,r2,r6
  8021b0:	1105803a 	cmpltu	r2,r2,r4
  8021b4:	01cbc83a 	sub	r5,zero,r7
  8021b8:	2885c83a 	sub	r2,r5,r2
  8021bc:	01800044 	movi	r6,1
  8021c0:	a1800115 	stw	r6,4(r20)
  8021c4:	a5c00215 	stw	r23,8(r20)
  8021c8:	a1000315 	stw	r4,12(r20)
  8021cc:	a0800415 	stw	r2,16(r20)
  8021d0:	003f8206 	br	801fdc <_fpadd_parts+0x124>
  8021d4:	203f7226 	beq	r4,zero,801fa0 <_fpadd_parts+0xe8>
  8021d8:	35bff804 	addi	r22,r6,-32
  8021dc:	b9af883a 	add	r23,r23,r6
  8021e0:	b0003116 	blt	r22,zero,8022a8 <_fpadd_parts+0x3f0>
  8021e4:	959ad83a 	srl	r13,r18,r22
  8021e8:	001d883a 	mov	r14,zero
  8021ec:	000f883a 	mov	r7,zero
  8021f0:	01000044 	movi	r4,1
  8021f4:	0011883a 	mov	r8,zero
  8021f8:	b0002516 	blt	r22,zero,802290 <_fpadd_parts+0x3d8>
  8021fc:	2594983a 	sll	r10,r4,r22
  802200:	0013883a 	mov	r9,zero
  802204:	00bfffc4 	movi	r2,-1
  802208:	4889883a 	add	r4,r9,r2
  80220c:	508b883a 	add	r5,r10,r2
  802210:	224d803a 	cmpltu	r6,r4,r9
  802214:	314b883a 	add	r5,r6,r5
  802218:	8904703a 	and	r2,r17,r4
  80221c:	9146703a 	and	r3,r18,r5
  802220:	10c4b03a 	or	r2,r2,r3
  802224:	10000226 	beq	r2,zero,802230 <_fpadd_parts+0x378>
  802228:	01c00044 	movi	r7,1
  80222c:	0011883a 	mov	r8,zero
  802230:	69e2b03a 	or	r17,r13,r7
  802234:	7224b03a 	or	r18,r14,r8
  802238:	003f5906 	br	801fa0 <_fpadd_parts+0xe8>
  80223c:	8407883a 	add	r3,r16,r16
  802240:	008007c4 	movi	r2,31
  802244:	1185c83a 	sub	r2,r2,r6
  802248:	1886983a 	sll	r3,r3,r2
  80224c:	7996d83a 	srl	r11,r15,r6
  802250:	8198d83a 	srl	r12,r16,r6
  802254:	1ad6b03a 	or	r11,r3,r11
  802258:	003f3e06 	br	801f54 <_fpadd_parts+0x9c>
  80225c:	2006d07a 	srli	r3,r4,1
  802260:	008007c4 	movi	r2,31
  802264:	1185c83a 	sub	r2,r2,r6
  802268:	1890d83a 	srl	r8,r3,r2
  80226c:	218e983a 	sll	r7,r4,r6
  802270:	003f3e06 	br	801f6c <_fpadd_parts+0xb4>
  802274:	113f821e 	bne	r2,r4,802080 <_fpadd_parts+0x1c8>
  802278:	28c00117 	ldw	r3,4(r5)
  80227c:	98800117 	ldw	r2,4(r19)
  802280:	10ff7f26 	beq	r2,r3,802080 <_fpadd_parts+0x1c8>
  802284:	04c02074 	movhi	r19,129
  802288:	9cd3f204 	addi	r19,r19,20424
  80228c:	003f7c06 	br	802080 <_fpadd_parts+0x1c8>
  802290:	2006d07a 	srli	r3,r4,1
  802294:	008007c4 	movi	r2,31
  802298:	1185c83a 	sub	r2,r2,r6
  80229c:	1894d83a 	srl	r10,r3,r2
  8022a0:	2192983a 	sll	r9,r4,r6
  8022a4:	003fd706 	br	802204 <_fpadd_parts+0x34c>
  8022a8:	9487883a 	add	r3,r18,r18
  8022ac:	008007c4 	movi	r2,31
  8022b0:	1185c83a 	sub	r2,r2,r6
  8022b4:	1886983a 	sll	r3,r3,r2
  8022b8:	899ad83a 	srl	r13,r17,r6
  8022bc:	919cd83a 	srl	r14,r18,r6
  8022c0:	1b5ab03a 	or	r13,r3,r13
  8022c4:	003fc906 	br	8021ec <_fpadd_parts+0x334>

008022c8 <__subdf3>:
  8022c8:	deffea04 	addi	sp,sp,-88
  8022cc:	dcc01415 	stw	r19,80(sp)
  8022d0:	dcc00404 	addi	r19,sp,16
  8022d4:	2011883a 	mov	r8,r4
  8022d8:	2813883a 	mov	r9,r5
  8022dc:	dc401315 	stw	r17,76(sp)
  8022e0:	d809883a 	mov	r4,sp
  8022e4:	980b883a 	mov	r5,r19
  8022e8:	dc400904 	addi	r17,sp,36
  8022ec:	dfc01515 	stw	ra,84(sp)
  8022f0:	da400115 	stw	r9,4(sp)
  8022f4:	d9c00315 	stw	r7,12(sp)
  8022f8:	da000015 	stw	r8,0(sp)
  8022fc:	d9800215 	stw	r6,8(sp)
  802300:	0802b740 	call	802b74 <__unpack_d>
  802304:	d9000204 	addi	r4,sp,8
  802308:	880b883a 	mov	r5,r17
  80230c:	0802b740 	call	802b74 <__unpack_d>
  802310:	d8800a17 	ldw	r2,40(sp)
  802314:	880b883a 	mov	r5,r17
  802318:	9809883a 	mov	r4,r19
  80231c:	d9800e04 	addi	r6,sp,56
  802320:	1080005c 	xori	r2,r2,1
  802324:	d8800a15 	stw	r2,40(sp)
  802328:	0801eb80 	call	801eb8 <_fpadd_parts>
  80232c:	1009883a 	mov	r4,r2
  802330:	08028600 	call	802860 <__pack_d>
  802334:	dfc01517 	ldw	ra,84(sp)
  802338:	dcc01417 	ldw	r19,80(sp)
  80233c:	dc401317 	ldw	r17,76(sp)
  802340:	dec01604 	addi	sp,sp,88
  802344:	f800283a 	ret

00802348 <__adddf3>:
  802348:	deffea04 	addi	sp,sp,-88
  80234c:	dcc01415 	stw	r19,80(sp)
  802350:	dcc00404 	addi	r19,sp,16
  802354:	2011883a 	mov	r8,r4
  802358:	2813883a 	mov	r9,r5
  80235c:	dc401315 	stw	r17,76(sp)
  802360:	d809883a 	mov	r4,sp
  802364:	980b883a 	mov	r5,r19
  802368:	dc400904 	addi	r17,sp,36
  80236c:	dfc01515 	stw	ra,84(sp)
  802370:	da400115 	stw	r9,4(sp)
  802374:	d9c00315 	stw	r7,12(sp)
  802378:	da000015 	stw	r8,0(sp)
  80237c:	d9800215 	stw	r6,8(sp)
  802380:	0802b740 	call	802b74 <__unpack_d>
  802384:	d9000204 	addi	r4,sp,8
  802388:	880b883a 	mov	r5,r17
  80238c:	0802b740 	call	802b74 <__unpack_d>
  802390:	d9800e04 	addi	r6,sp,56
  802394:	9809883a 	mov	r4,r19
  802398:	880b883a 	mov	r5,r17
  80239c:	0801eb80 	call	801eb8 <_fpadd_parts>
  8023a0:	1009883a 	mov	r4,r2
  8023a4:	08028600 	call	802860 <__pack_d>
  8023a8:	dfc01517 	ldw	ra,84(sp)
  8023ac:	dcc01417 	ldw	r19,80(sp)
  8023b0:	dc401317 	ldw	r17,76(sp)
  8023b4:	dec01604 	addi	sp,sp,88
  8023b8:	f800283a 	ret

008023bc <__divdf3>:
  8023bc:	deffed04 	addi	sp,sp,-76
  8023c0:	dcc01115 	stw	r19,68(sp)
  8023c4:	dcc00404 	addi	r19,sp,16
  8023c8:	2011883a 	mov	r8,r4
  8023cc:	2813883a 	mov	r9,r5
  8023d0:	dc000e15 	stw	r16,56(sp)
  8023d4:	d809883a 	mov	r4,sp
  8023d8:	980b883a 	mov	r5,r19
  8023dc:	dc000904 	addi	r16,sp,36
  8023e0:	dfc01215 	stw	ra,72(sp)
  8023e4:	da400115 	stw	r9,4(sp)
  8023e8:	d9c00315 	stw	r7,12(sp)
  8023ec:	da000015 	stw	r8,0(sp)
  8023f0:	d9800215 	stw	r6,8(sp)
  8023f4:	dc801015 	stw	r18,64(sp)
  8023f8:	dc400f15 	stw	r17,60(sp)
  8023fc:	0802b740 	call	802b74 <__unpack_d>
  802400:	d9000204 	addi	r4,sp,8
  802404:	800b883a 	mov	r5,r16
  802408:	0802b740 	call	802b74 <__unpack_d>
  80240c:	d9000417 	ldw	r4,16(sp)
  802410:	00800044 	movi	r2,1
  802414:	11000b2e 	bgeu	r2,r4,802444 <__divdf3+0x88>
  802418:	d9400917 	ldw	r5,36(sp)
  80241c:	1140762e 	bgeu	r2,r5,8025f8 <__divdf3+0x23c>
  802420:	d8800517 	ldw	r2,20(sp)
  802424:	d8c00a17 	ldw	r3,40(sp)
  802428:	01800104 	movi	r6,4
  80242c:	10c4f03a 	xor	r2,r2,r3
  802430:	d8800515 	stw	r2,20(sp)
  802434:	21800226 	beq	r4,r6,802440 <__divdf3+0x84>
  802438:	00800084 	movi	r2,2
  80243c:	2080141e 	bne	r4,r2,802490 <__divdf3+0xd4>
  802440:	29000926 	beq	r5,r4,802468 <__divdf3+0xac>
  802444:	9809883a 	mov	r4,r19
  802448:	08028600 	call	802860 <__pack_d>
  80244c:	dfc01217 	ldw	ra,72(sp)
  802450:	dcc01117 	ldw	r19,68(sp)
  802454:	dc801017 	ldw	r18,64(sp)
  802458:	dc400f17 	ldw	r17,60(sp)
  80245c:	dc000e17 	ldw	r16,56(sp)
  802460:	dec01304 	addi	sp,sp,76
  802464:	f800283a 	ret
  802468:	01002074 	movhi	r4,129
  80246c:	2113f204 	addi	r4,r4,20424
  802470:	08028600 	call	802860 <__pack_d>
  802474:	dfc01217 	ldw	ra,72(sp)
  802478:	dcc01117 	ldw	r19,68(sp)
  80247c:	dc801017 	ldw	r18,64(sp)
  802480:	dc400f17 	ldw	r17,60(sp)
  802484:	dc000e17 	ldw	r16,56(sp)
  802488:	dec01304 	addi	sp,sp,76
  80248c:	f800283a 	ret
  802490:	29805b26 	beq	r5,r6,802600 <__divdf3+0x244>
  802494:	28802d26 	beq	r5,r2,80254c <__divdf3+0x190>
  802498:	d8c00617 	ldw	r3,24(sp)
  80249c:	d8800b17 	ldw	r2,44(sp)
  8024a0:	d9c00817 	ldw	r7,32(sp)
  8024a4:	dc400d17 	ldw	r17,52(sp)
  8024a8:	188bc83a 	sub	r5,r3,r2
  8024ac:	d9800717 	ldw	r6,28(sp)
  8024b0:	dc000c17 	ldw	r16,48(sp)
  8024b4:	d9400615 	stw	r5,24(sp)
  8024b8:	3c403836 	bltu	r7,r17,80259c <__divdf3+0x1e0>
  8024bc:	89c03626 	beq	r17,r7,802598 <__divdf3+0x1dc>
  8024c0:	0015883a 	mov	r10,zero
  8024c4:	001d883a 	mov	r14,zero
  8024c8:	02c40034 	movhi	r11,4096
  8024cc:	001f883a 	mov	r15,zero
  8024d0:	003f883a 	mov	ra,zero
  8024d4:	04800f44 	movi	r18,61
  8024d8:	00000f06 	br	802518 <__divdf3+0x15c>
  8024dc:	601d883a 	mov	r14,r12
  8024e0:	681f883a 	mov	r15,r13
  8024e4:	400d883a 	mov	r6,r8
  8024e8:	100f883a 	mov	r7,r2
  8024ec:	3191883a 	add	r8,r6,r6
  8024f0:	5808d07a 	srli	r4,r11,1
  8024f4:	4185803a 	cmpltu	r2,r8,r6
  8024f8:	39d3883a 	add	r9,r7,r7
  8024fc:	28c6b03a 	or	r3,r5,r3
  802500:	1245883a 	add	r2,r2,r9
  802504:	1815883a 	mov	r10,r3
  802508:	2017883a 	mov	r11,r4
  80250c:	400d883a 	mov	r6,r8
  802510:	100f883a 	mov	r7,r2
  802514:	fc801726 	beq	ra,r18,802574 <__divdf3+0x1b8>
  802518:	580a97fa 	slli	r5,r11,31
  80251c:	5006d07a 	srli	r3,r10,1
  802520:	ffc00044 	addi	ra,ra,1
  802524:	3c7ff136 	bltu	r7,r17,8024ec <__divdf3+0x130>
  802528:	3411c83a 	sub	r8,r6,r16
  80252c:	3205803a 	cmpltu	r2,r6,r8
  802530:	3c53c83a 	sub	r9,r7,r17
  802534:	7298b03a 	or	r12,r14,r10
  802538:	7adab03a 	or	r13,r15,r11
  80253c:	4885c83a 	sub	r2,r9,r2
  802540:	89ffe61e 	bne	r17,r7,8024dc <__divdf3+0x120>
  802544:	343fe936 	bltu	r6,r16,8024ec <__divdf3+0x130>
  802548:	003fe406 	br	8024dc <__divdf3+0x120>
  80254c:	9809883a 	mov	r4,r19
  802550:	d9800415 	stw	r6,16(sp)
  802554:	08028600 	call	802860 <__pack_d>
  802558:	dfc01217 	ldw	ra,72(sp)
  80255c:	dcc01117 	ldw	r19,68(sp)
  802560:	dc801017 	ldw	r18,64(sp)
  802564:	dc400f17 	ldw	r17,60(sp)
  802568:	dc000e17 	ldw	r16,56(sp)
  80256c:	dec01304 	addi	sp,sp,76
  802570:	f800283a 	ret
  802574:	00803fc4 	movi	r2,255
  802578:	7090703a 	and	r8,r14,r2
  80257c:	00802004 	movi	r2,128
  802580:	0007883a 	mov	r3,zero
  802584:	0013883a 	mov	r9,zero
  802588:	40800d26 	beq	r8,r2,8025c0 <__divdf3+0x204>
  80258c:	dbc00815 	stw	r15,32(sp)
  802590:	db800715 	stw	r14,28(sp)
  802594:	003fab06 	br	802444 <__divdf3+0x88>
  802598:	343fc92e 	bgeu	r6,r16,8024c0 <__divdf3+0x104>
  80259c:	3185883a 	add	r2,r6,r6
  8025a0:	1189803a 	cmpltu	r4,r2,r6
  8025a4:	39c7883a 	add	r3,r7,r7
  8025a8:	20c9883a 	add	r4,r4,r3
  8025ac:	297fffc4 	addi	r5,r5,-1
  8025b0:	100d883a 	mov	r6,r2
  8025b4:	200f883a 	mov	r7,r4
  8025b8:	d9400615 	stw	r5,24(sp)
  8025bc:	003fc006 	br	8024c0 <__divdf3+0x104>
  8025c0:	483ff21e 	bne	r9,zero,80258c <__divdf3+0x1d0>
  8025c4:	01004004 	movi	r4,256
  8025c8:	7104703a 	and	r2,r14,r4
  8025cc:	10c4b03a 	or	r2,r2,r3
  8025d0:	103fee1e 	bne	r2,zero,80258c <__divdf3+0x1d0>
  8025d4:	31c4b03a 	or	r2,r6,r7
  8025d8:	103fec26 	beq	r2,zero,80258c <__divdf3+0x1d0>
  8025dc:	7205883a 	add	r2,r14,r8
  8025e0:	1391803a 	cmpltu	r8,r2,r14
  8025e4:	43d1883a 	add	r8,r8,r15
  8025e8:	013fc004 	movi	r4,-256
  8025ec:	111c703a 	and	r14,r2,r4
  8025f0:	401f883a 	mov	r15,r8
  8025f4:	003fe506 	br	80258c <__divdf3+0x1d0>
  8025f8:	8009883a 	mov	r4,r16
  8025fc:	003f9206 	br	802448 <__divdf3+0x8c>
  802600:	9809883a 	mov	r4,r19
  802604:	d8000715 	stw	zero,28(sp)
  802608:	d8000815 	stw	zero,32(sp)
  80260c:	d8000615 	stw	zero,24(sp)
  802610:	003f8d06 	br	802448 <__divdf3+0x8c>

00802614 <__floatunsidf>:
  802614:	defff204 	addi	sp,sp,-56
  802618:	dfc00d15 	stw	ra,52(sp)
  80261c:	ddc00c15 	stw	r23,48(sp)
  802620:	dd800b15 	stw	r22,44(sp)
  802624:	dd400a15 	stw	r21,40(sp)
  802628:	dd000915 	stw	r20,36(sp)
  80262c:	dcc00815 	stw	r19,32(sp)
  802630:	dc800715 	stw	r18,28(sp)
  802634:	dc400615 	stw	r17,24(sp)
  802638:	dc000515 	stw	r16,20(sp)
  80263c:	d8000115 	stw	zero,4(sp)
  802640:	20000f1e 	bne	r4,zero,802680 <__floatunsidf+0x6c>
  802644:	00800084 	movi	r2,2
  802648:	d8800015 	stw	r2,0(sp)
  80264c:	d809883a 	mov	r4,sp
  802650:	08028600 	call	802860 <__pack_d>
  802654:	dfc00d17 	ldw	ra,52(sp)
  802658:	ddc00c17 	ldw	r23,48(sp)
  80265c:	dd800b17 	ldw	r22,44(sp)
  802660:	dd400a17 	ldw	r21,40(sp)
  802664:	dd000917 	ldw	r20,36(sp)
  802668:	dcc00817 	ldw	r19,32(sp)
  80266c:	dc800717 	ldw	r18,28(sp)
  802670:	dc400617 	ldw	r17,24(sp)
  802674:	dc000517 	ldw	r16,20(sp)
  802678:	dec00e04 	addi	sp,sp,56
  80267c:	f800283a 	ret
  802680:	008000c4 	movi	r2,3
  802684:	00c00f04 	movi	r3,60
  802688:	002f883a 	mov	r23,zero
  80268c:	202d883a 	mov	r22,r4
  802690:	d8800015 	stw	r2,0(sp)
  802694:	d8c00215 	stw	r3,8(sp)
  802698:	d9000315 	stw	r4,12(sp)
  80269c:	ddc00415 	stw	r23,16(sp)
  8026a0:	08027e00 	call	8027e0 <__clzsi2>
  8026a4:	12400744 	addi	r9,r2,29
  8026a8:	48000b16 	blt	r9,zero,8026d8 <__floatunsidf+0xc4>
  8026ac:	483fe726 	beq	r9,zero,80264c <__floatunsidf+0x38>
  8026b0:	10bfff44 	addi	r2,r2,-3
  8026b4:	10002e16 	blt	r2,zero,802770 <__floatunsidf+0x15c>
  8026b8:	b0a2983a 	sll	r17,r22,r2
  8026bc:	0021883a 	mov	r16,zero
  8026c0:	d8800217 	ldw	r2,8(sp)
  8026c4:	dc400415 	stw	r17,16(sp)
  8026c8:	dc000315 	stw	r16,12(sp)
  8026cc:	1245c83a 	sub	r2,r2,r9
  8026d0:	d8800215 	stw	r2,8(sp)
  8026d4:	003fdd06 	br	80264c <__floatunsidf+0x38>
  8026d8:	0255c83a 	sub	r10,zero,r9
  8026dc:	51bff804 	addi	r6,r10,-32
  8026e0:	30001b16 	blt	r6,zero,802750 <__floatunsidf+0x13c>
  8026e4:	b9a8d83a 	srl	r20,r23,r6
  8026e8:	002b883a 	mov	r21,zero
  8026ec:	000f883a 	mov	r7,zero
  8026f0:	01000044 	movi	r4,1
  8026f4:	0011883a 	mov	r8,zero
  8026f8:	30002516 	blt	r6,zero,802790 <__floatunsidf+0x17c>
  8026fc:	21a6983a 	sll	r19,r4,r6
  802700:	0025883a 	mov	r18,zero
  802704:	00bfffc4 	movi	r2,-1
  802708:	9089883a 	add	r4,r18,r2
  80270c:	988b883a 	add	r5,r19,r2
  802710:	248d803a 	cmpltu	r6,r4,r18
  802714:	314b883a 	add	r5,r6,r5
  802718:	b104703a 	and	r2,r22,r4
  80271c:	b946703a 	and	r3,r23,r5
  802720:	10c4b03a 	or	r2,r2,r3
  802724:	10000226 	beq	r2,zero,802730 <__floatunsidf+0x11c>
  802728:	01c00044 	movi	r7,1
  80272c:	0011883a 	mov	r8,zero
  802730:	d9000217 	ldw	r4,8(sp)
  802734:	a1c4b03a 	or	r2,r20,r7
  802738:	aa06b03a 	or	r3,r21,r8
  80273c:	2249c83a 	sub	r4,r4,r9
  802740:	d8c00415 	stw	r3,16(sp)
  802744:	d9000215 	stw	r4,8(sp)
  802748:	d8800315 	stw	r2,12(sp)
  80274c:	003fbf06 	br	80264c <__floatunsidf+0x38>
  802750:	bdc7883a 	add	r3,r23,r23
  802754:	008007c4 	movi	r2,31
  802758:	1285c83a 	sub	r2,r2,r10
  80275c:	1886983a 	sll	r3,r3,r2
  802760:	b2a8d83a 	srl	r20,r22,r10
  802764:	baaad83a 	srl	r21,r23,r10
  802768:	1d28b03a 	or	r20,r3,r20
  80276c:	003fdf06 	br	8026ec <__floatunsidf+0xd8>
  802770:	b006d07a 	srli	r3,r22,1
  802774:	008007c4 	movi	r2,31
  802778:	1245c83a 	sub	r2,r2,r9
  80277c:	1886d83a 	srl	r3,r3,r2
  802780:	ba62983a 	sll	r17,r23,r9
  802784:	b260983a 	sll	r16,r22,r9
  802788:	1c62b03a 	or	r17,r3,r17
  80278c:	003fcc06 	br	8026c0 <__floatunsidf+0xac>
  802790:	2006d07a 	srli	r3,r4,1
  802794:	008007c4 	movi	r2,31
  802798:	1285c83a 	sub	r2,r2,r10
  80279c:	18a6d83a 	srl	r19,r3,r2
  8027a0:	22a4983a 	sll	r18,r4,r10
  8027a4:	003fd706 	br	802704 <__floatunsidf+0xf0>

008027a8 <__mulsi3>:
  8027a8:	20000a26 	beq	r4,zero,8027d4 <__mulsi3+0x2c>
  8027ac:	0007883a 	mov	r3,zero
  8027b0:	2080004c 	andi	r2,r4,1
  8027b4:	1005003a 	cmpeq	r2,r2,zero
  8027b8:	2008d07a 	srli	r4,r4,1
  8027bc:	1000011e 	bne	r2,zero,8027c4 <__mulsi3+0x1c>
  8027c0:	1947883a 	add	r3,r3,r5
  8027c4:	294b883a 	add	r5,r5,r5
  8027c8:	203ff91e 	bne	r4,zero,8027b0 <__mulsi3+0x8>
  8027cc:	1805883a 	mov	r2,r3
  8027d0:	f800283a 	ret
  8027d4:	0007883a 	mov	r3,zero
  8027d8:	1805883a 	mov	r2,r3
  8027dc:	f800283a 	ret

008027e0 <__clzsi2>:
  8027e0:	00bfffd4 	movui	r2,65535
  8027e4:	11000e36 	bltu	r2,r4,802820 <__clzsi2+0x40>
  8027e8:	00803fc4 	movi	r2,255
  8027ec:	01400204 	movi	r5,8
  8027f0:	0007883a 	mov	r3,zero
  8027f4:	11001036 	bltu	r2,r4,802838 <__clzsi2+0x58>
  8027f8:	000b883a 	mov	r5,zero
  8027fc:	20c6d83a 	srl	r3,r4,r3
  802800:	00802074 	movhi	r2,129
  802804:	1093f704 	addi	r2,r2,20444
  802808:	1887883a 	add	r3,r3,r2
  80280c:	18800003 	ldbu	r2,0(r3)
  802810:	00c00804 	movi	r3,32
  802814:	2885883a 	add	r2,r5,r2
  802818:	1885c83a 	sub	r2,r3,r2
  80281c:	f800283a 	ret
  802820:	01400404 	movi	r5,16
  802824:	00804034 	movhi	r2,256
  802828:	10bfffc4 	addi	r2,r2,-1
  80282c:	2807883a 	mov	r3,r5
  802830:	113ff22e 	bgeu	r2,r4,8027fc <__clzsi2+0x1c>
  802834:	01400604 	movi	r5,24
  802838:	2807883a 	mov	r3,r5
  80283c:	20c6d83a 	srl	r3,r4,r3
  802840:	00802074 	movhi	r2,129
  802844:	1093f704 	addi	r2,r2,20444
  802848:	1887883a 	add	r3,r3,r2
  80284c:	18800003 	ldbu	r2,0(r3)
  802850:	00c00804 	movi	r3,32
  802854:	2885883a 	add	r2,r5,r2
  802858:	1885c83a 	sub	r2,r3,r2
  80285c:	f800283a 	ret

00802860 <__pack_d>:
  802860:	20c00017 	ldw	r3,0(r4)
  802864:	defffd04 	addi	sp,sp,-12
  802868:	dc000015 	stw	r16,0(sp)
  80286c:	dc800215 	stw	r18,8(sp)
  802870:	dc400115 	stw	r17,4(sp)
  802874:	00800044 	movi	r2,1
  802878:	22000317 	ldw	r8,12(r4)
  80287c:	001f883a 	mov	r15,zero
  802880:	22400417 	ldw	r9,16(r4)
  802884:	24000117 	ldw	r16,4(r4)
  802888:	10c0552e 	bgeu	r2,r3,8029e0 <__pack_d+0x180>
  80288c:	00800104 	movi	r2,4
  802890:	18804f26 	beq	r3,r2,8029d0 <__pack_d+0x170>
  802894:	00800084 	movi	r2,2
  802898:	18800226 	beq	r3,r2,8028a4 <__pack_d+0x44>
  80289c:	4244b03a 	or	r2,r8,r9
  8028a0:	10001a1e 	bne	r2,zero,80290c <__pack_d+0xac>
  8028a4:	000d883a 	mov	r6,zero
  8028a8:	000f883a 	mov	r7,zero
  8028ac:	0011883a 	mov	r8,zero
  8028b0:	00800434 	movhi	r2,16
  8028b4:	10bfffc4 	addi	r2,r2,-1
  8028b8:	301d883a 	mov	r14,r6
  8028bc:	3884703a 	and	r2,r7,r2
  8028c0:	400a953a 	slli	r5,r8,20
  8028c4:	79bffc2c 	andhi	r6,r15,65520
  8028c8:	308cb03a 	or	r6,r6,r2
  8028cc:	00e00434 	movhi	r3,32784
  8028d0:	18ffffc4 	addi	r3,r3,-1
  8028d4:	800497fa 	slli	r2,r16,31
  8028d8:	30c6703a 	and	r3,r6,r3
  8028dc:	1946b03a 	or	r3,r3,r5
  8028e0:	01600034 	movhi	r5,32768
  8028e4:	297fffc4 	addi	r5,r5,-1
  8028e8:	194a703a 	and	r5,r3,r5
  8028ec:	288ab03a 	or	r5,r5,r2
  8028f0:	2807883a 	mov	r3,r5
  8028f4:	7005883a 	mov	r2,r14
  8028f8:	dc800217 	ldw	r18,8(sp)
  8028fc:	dc400117 	ldw	r17,4(sp)
  802900:	dc000017 	ldw	r16,0(sp)
  802904:	dec00304 	addi	sp,sp,12
  802908:	f800283a 	ret
  80290c:	21000217 	ldw	r4,8(r4)
  802910:	00bf0084 	movi	r2,-1022
  802914:	20803f16 	blt	r4,r2,802a14 <__pack_d+0x1b4>
  802918:	0080ffc4 	movi	r2,1023
  80291c:	11002c16 	blt	r2,r4,8029d0 <__pack_d+0x170>
  802920:	00803fc4 	movi	r2,255
  802924:	408c703a 	and	r6,r8,r2
  802928:	00802004 	movi	r2,128
  80292c:	0007883a 	mov	r3,zero
  802930:	000f883a 	mov	r7,zero
  802934:	2280ffc4 	addi	r10,r4,1023
  802938:	30801e26 	beq	r6,r2,8029b4 <__pack_d+0x154>
  80293c:	00801fc4 	movi	r2,127
  802940:	4089883a 	add	r4,r8,r2
  802944:	220d803a 	cmpltu	r6,r4,r8
  802948:	324d883a 	add	r6,r6,r9
  80294c:	2011883a 	mov	r8,r4
  802950:	3013883a 	mov	r9,r6
  802954:	00880034 	movhi	r2,8192
  802958:	10bfffc4 	addi	r2,r2,-1
  80295c:	12400d36 	bltu	r2,r9,802994 <__pack_d+0x134>
  802960:	4804963a 	slli	r2,r9,24
  802964:	400cd23a 	srli	r6,r8,8
  802968:	480ed23a 	srli	r7,r9,8
  80296c:	013fffc4 	movi	r4,-1
  802970:	118cb03a 	or	r6,r2,r6
  802974:	01400434 	movhi	r5,16
  802978:	297fffc4 	addi	r5,r5,-1
  80297c:	3104703a 	and	r2,r6,r4
  802980:	3946703a 	and	r3,r7,r5
  802984:	5201ffcc 	andi	r8,r10,2047
  802988:	100d883a 	mov	r6,r2
  80298c:	180f883a 	mov	r7,r3
  802990:	003fc706 	br	8028b0 <__pack_d+0x50>
  802994:	480897fa 	slli	r4,r9,31
  802998:	4004d07a 	srli	r2,r8,1
  80299c:	4806d07a 	srli	r3,r9,1
  8029a0:	52800044 	addi	r10,r10,1
  8029a4:	2084b03a 	or	r2,r4,r2
  8029a8:	1011883a 	mov	r8,r2
  8029ac:	1813883a 	mov	r9,r3
  8029b0:	003feb06 	br	802960 <__pack_d+0x100>
  8029b4:	383fe11e 	bne	r7,zero,80293c <__pack_d+0xdc>
  8029b8:	01004004 	movi	r4,256
  8029bc:	4104703a 	and	r2,r8,r4
  8029c0:	10c4b03a 	or	r2,r2,r3
  8029c4:	103fe326 	beq	r2,zero,802954 <__pack_d+0xf4>
  8029c8:	3005883a 	mov	r2,r6
  8029cc:	003fdc06 	br	802940 <__pack_d+0xe0>
  8029d0:	000d883a 	mov	r6,zero
  8029d4:	000f883a 	mov	r7,zero
  8029d8:	0201ffc4 	movi	r8,2047
  8029dc:	003fb406 	br	8028b0 <__pack_d+0x50>
  8029e0:	0005883a 	mov	r2,zero
  8029e4:	00c00234 	movhi	r3,8
  8029e8:	408cb03a 	or	r6,r8,r2
  8029ec:	48ceb03a 	or	r7,r9,r3
  8029f0:	013fffc4 	movi	r4,-1
  8029f4:	01400434 	movhi	r5,16
  8029f8:	297fffc4 	addi	r5,r5,-1
  8029fc:	3104703a 	and	r2,r6,r4
  802a00:	3946703a 	and	r3,r7,r5
  802a04:	100d883a 	mov	r6,r2
  802a08:	180f883a 	mov	r7,r3
  802a0c:	0201ffc4 	movi	r8,2047
  802a10:	003fa706 	br	8028b0 <__pack_d+0x50>
  802a14:	1109c83a 	sub	r4,r2,r4
  802a18:	00800e04 	movi	r2,56
  802a1c:	11004316 	blt	r2,r4,802b2c <__pack_d+0x2cc>
  802a20:	21fff804 	addi	r7,r4,-32
  802a24:	38004516 	blt	r7,zero,802b3c <__pack_d+0x2dc>
  802a28:	49d8d83a 	srl	r12,r9,r7
  802a2c:	001b883a 	mov	r13,zero
  802a30:	0023883a 	mov	r17,zero
  802a34:	01400044 	movi	r5,1
  802a38:	0025883a 	mov	r18,zero
  802a3c:	38004716 	blt	r7,zero,802b5c <__pack_d+0x2fc>
  802a40:	29d6983a 	sll	r11,r5,r7
  802a44:	0015883a 	mov	r10,zero
  802a48:	00bfffc4 	movi	r2,-1
  802a4c:	5089883a 	add	r4,r10,r2
  802a50:	588b883a 	add	r5,r11,r2
  802a54:	228d803a 	cmpltu	r6,r4,r10
  802a58:	314b883a 	add	r5,r6,r5
  802a5c:	4104703a 	and	r2,r8,r4
  802a60:	4946703a 	and	r3,r9,r5
  802a64:	10c4b03a 	or	r2,r2,r3
  802a68:	10000226 	beq	r2,zero,802a74 <__pack_d+0x214>
  802a6c:	04400044 	movi	r17,1
  802a70:	0025883a 	mov	r18,zero
  802a74:	00803fc4 	movi	r2,255
  802a78:	644eb03a 	or	r7,r12,r17
  802a7c:	3892703a 	and	r9,r7,r2
  802a80:	00802004 	movi	r2,128
  802a84:	6c90b03a 	or	r8,r13,r18
  802a88:	0015883a 	mov	r10,zero
  802a8c:	48801626 	beq	r9,r2,802ae8 <__pack_d+0x288>
  802a90:	01001fc4 	movi	r4,127
  802a94:	3905883a 	add	r2,r7,r4
  802a98:	11cd803a 	cmpltu	r6,r2,r7
  802a9c:	320d883a 	add	r6,r6,r8
  802aa0:	100f883a 	mov	r7,r2
  802aa4:	00840034 	movhi	r2,4096
  802aa8:	10bfffc4 	addi	r2,r2,-1
  802aac:	3011883a 	mov	r8,r6
  802ab0:	0007883a 	mov	r3,zero
  802ab4:	11801b36 	bltu	r2,r6,802b24 <__pack_d+0x2c4>
  802ab8:	4004963a 	slli	r2,r8,24
  802abc:	3808d23a 	srli	r4,r7,8
  802ac0:	400ad23a 	srli	r5,r8,8
  802ac4:	1813883a 	mov	r9,r3
  802ac8:	1108b03a 	or	r4,r2,r4
  802acc:	00bfffc4 	movi	r2,-1
  802ad0:	00c00434 	movhi	r3,16
  802ad4:	18ffffc4 	addi	r3,r3,-1
  802ad8:	208c703a 	and	r6,r4,r2
  802adc:	28ce703a 	and	r7,r5,r3
  802ae0:	4a01ffcc 	andi	r8,r9,2047
  802ae4:	003f7206 	br	8028b0 <__pack_d+0x50>
  802ae8:	503fe91e 	bne	r10,zero,802a90 <__pack_d+0x230>
  802aec:	01004004 	movi	r4,256
  802af0:	3904703a 	and	r2,r7,r4
  802af4:	0007883a 	mov	r3,zero
  802af8:	10c4b03a 	or	r2,r2,r3
  802afc:	10000626 	beq	r2,zero,802b18 <__pack_d+0x2b8>
  802b00:	3a45883a 	add	r2,r7,r9
  802b04:	11cd803a 	cmpltu	r6,r2,r7
  802b08:	320d883a 	add	r6,r6,r8
  802b0c:	100f883a 	mov	r7,r2
  802b10:	3011883a 	mov	r8,r6
  802b14:	0007883a 	mov	r3,zero
  802b18:	00840034 	movhi	r2,4096
  802b1c:	10bfffc4 	addi	r2,r2,-1
  802b20:	123fe52e 	bgeu	r2,r8,802ab8 <__pack_d+0x258>
  802b24:	00c00044 	movi	r3,1
  802b28:	003fe306 	br	802ab8 <__pack_d+0x258>
  802b2c:	0009883a 	mov	r4,zero
  802b30:	0013883a 	mov	r9,zero
  802b34:	000b883a 	mov	r5,zero
  802b38:	003fe406 	br	802acc <__pack_d+0x26c>
  802b3c:	4a47883a 	add	r3,r9,r9
  802b40:	008007c4 	movi	r2,31
  802b44:	1105c83a 	sub	r2,r2,r4
  802b48:	1886983a 	sll	r3,r3,r2
  802b4c:	4118d83a 	srl	r12,r8,r4
  802b50:	491ad83a 	srl	r13,r9,r4
  802b54:	1b18b03a 	or	r12,r3,r12
  802b58:	003fb506 	br	802a30 <__pack_d+0x1d0>
  802b5c:	2806d07a 	srli	r3,r5,1
  802b60:	008007c4 	movi	r2,31
  802b64:	1105c83a 	sub	r2,r2,r4
  802b68:	1896d83a 	srl	r11,r3,r2
  802b6c:	2914983a 	sll	r10,r5,r4
  802b70:	003fb506 	br	802a48 <__pack_d+0x1e8>

00802b74 <__unpack_d>:
  802b74:	20c00117 	ldw	r3,4(r4)
  802b78:	22400017 	ldw	r9,0(r4)
  802b7c:	00800434 	movhi	r2,16
  802b80:	10bfffc4 	addi	r2,r2,-1
  802b84:	1808d53a 	srli	r4,r3,20
  802b88:	180cd7fa 	srli	r6,r3,31
  802b8c:	1894703a 	and	r10,r3,r2
  802b90:	2201ffcc 	andi	r8,r4,2047
  802b94:	281b883a 	mov	r13,r5
  802b98:	4817883a 	mov	r11,r9
  802b9c:	29800115 	stw	r6,4(r5)
  802ba0:	5019883a 	mov	r12,r10
  802ba4:	40001e1e 	bne	r8,zero,802c20 <__unpack_d+0xac>
  802ba8:	4a84b03a 	or	r2,r9,r10
  802bac:	10001926 	beq	r2,zero,802c14 <__unpack_d+0xa0>
  802bb0:	4804d63a 	srli	r2,r9,24
  802bb4:	500c923a 	slli	r6,r10,8
  802bb8:	013f0084 	movi	r4,-1022
  802bbc:	00c40034 	movhi	r3,4096
  802bc0:	18ffffc4 	addi	r3,r3,-1
  802bc4:	118cb03a 	or	r6,r2,r6
  802bc8:	008000c4 	movi	r2,3
  802bcc:	480a923a 	slli	r5,r9,8
  802bd0:	68800015 	stw	r2,0(r13)
  802bd4:	69000215 	stw	r4,8(r13)
  802bd8:	19800b36 	bltu	r3,r6,802c08 <__unpack_d+0x94>
  802bdc:	200f883a 	mov	r7,r4
  802be0:	1811883a 	mov	r8,r3
  802be4:	2945883a 	add	r2,r5,r5
  802be8:	1149803a 	cmpltu	r4,r2,r5
  802bec:	3187883a 	add	r3,r6,r6
  802bf0:	20c9883a 	add	r4,r4,r3
  802bf4:	100b883a 	mov	r5,r2
  802bf8:	200d883a 	mov	r6,r4
  802bfc:	39ffffc4 	addi	r7,r7,-1
  802c00:	413ff82e 	bgeu	r8,r4,802be4 <__unpack_d+0x70>
  802c04:	69c00215 	stw	r7,8(r13)
  802c08:	69800415 	stw	r6,16(r13)
  802c0c:	69400315 	stw	r5,12(r13)
  802c10:	f800283a 	ret
  802c14:	00800084 	movi	r2,2
  802c18:	28800015 	stw	r2,0(r5)
  802c1c:	f800283a 	ret
  802c20:	0081ffc4 	movi	r2,2047
  802c24:	40800f26 	beq	r8,r2,802c64 <__unpack_d+0xf0>
  802c28:	480cd63a 	srli	r6,r9,24
  802c2c:	5006923a 	slli	r3,r10,8
  802c30:	4804923a 	slli	r2,r9,8
  802c34:	0009883a 	mov	r4,zero
  802c38:	30c6b03a 	or	r3,r6,r3
  802c3c:	01440034 	movhi	r5,4096
  802c40:	110cb03a 	or	r6,r2,r4
  802c44:	423f0044 	addi	r8,r8,-1023
  802c48:	194eb03a 	or	r7,r3,r5
  802c4c:	008000c4 	movi	r2,3
  802c50:	69c00415 	stw	r7,16(r13)
  802c54:	6a000215 	stw	r8,8(r13)
  802c58:	68800015 	stw	r2,0(r13)
  802c5c:	69800315 	stw	r6,12(r13)
  802c60:	f800283a 	ret
  802c64:	4a84b03a 	or	r2,r9,r10
  802c68:	1000031e 	bne	r2,zero,802c78 <__unpack_d+0x104>
  802c6c:	00800104 	movi	r2,4
  802c70:	28800015 	stw	r2,0(r5)
  802c74:	f800283a 	ret
  802c78:	0009883a 	mov	r4,zero
  802c7c:	01400234 	movhi	r5,8
  802c80:	4904703a 	and	r2,r9,r4
  802c84:	5146703a 	and	r3,r10,r5
  802c88:	10c4b03a 	or	r2,r2,r3
  802c8c:	10000526 	beq	r2,zero,802ca4 <__unpack_d+0x130>
  802c90:	00800044 	movi	r2,1
  802c94:	68800015 	stw	r2,0(r13)
  802c98:	6b000415 	stw	r12,16(r13)
  802c9c:	6ac00315 	stw	r11,12(r13)
  802ca0:	f800283a 	ret
  802ca4:	68000015 	stw	zero,0(r13)
  802ca8:	003ffb06 	br	802c98 <__unpack_d+0x124>

00802cac <calloc>:
  802cac:	01802074 	movhi	r6,129
  802cb0:	319c2904 	addi	r6,r6,28836
  802cb4:	2007883a 	mov	r3,r4
  802cb8:	31000017 	ldw	r4,0(r6)
  802cbc:	280d883a 	mov	r6,r5
  802cc0:	180b883a 	mov	r5,r3
  802cc4:	0802cc81 	jmpi	802cc8 <_calloc_r>

00802cc8 <_calloc_r>:
  802cc8:	defffe04 	addi	sp,sp,-8
  802ccc:	dc400015 	stw	r17,0(sp)
  802cd0:	2023883a 	mov	r17,r4
  802cd4:	2809883a 	mov	r4,r5
  802cd8:	300b883a 	mov	r5,r6
  802cdc:	dfc00115 	stw	ra,4(sp)
  802ce0:	08027a80 	call	8027a8 <__mulsi3>
  802ce4:	100b883a 	mov	r5,r2
  802ce8:	8809883a 	mov	r4,r17
  802cec:	080485c0 	call	80485c <_malloc_r>
  802cf0:	1023883a 	mov	r17,r2
  802cf4:	01c00904 	movi	r7,36
  802cf8:	10000d26 	beq	r2,zero,802d30 <_calloc_r+0x68>
  802cfc:	10ffff17 	ldw	r3,-4(r2)
  802d00:	1009883a 	mov	r4,r2
  802d04:	00bfff04 	movi	r2,-4
  802d08:	1886703a 	and	r3,r3,r2
  802d0c:	1887883a 	add	r3,r3,r2
  802d10:	180d883a 	mov	r6,r3
  802d14:	000b883a 	mov	r5,zero
  802d18:	38c01736 	bltu	r7,r3,802d78 <_calloc_r+0xb0>
  802d1c:	008004c4 	movi	r2,19
  802d20:	10c00836 	bltu	r2,r3,802d44 <_calloc_r+0x7c>
  802d24:	20000215 	stw	zero,8(r4)
  802d28:	20000015 	stw	zero,0(r4)
  802d2c:	20000115 	stw	zero,4(r4)
  802d30:	8805883a 	mov	r2,r17
  802d34:	dfc00117 	ldw	ra,4(sp)
  802d38:	dc400017 	ldw	r17,0(sp)
  802d3c:	dec00204 	addi	sp,sp,8
  802d40:	f800283a 	ret
  802d44:	008006c4 	movi	r2,27
  802d48:	88000015 	stw	zero,0(r17)
  802d4c:	88000115 	stw	zero,4(r17)
  802d50:	89000204 	addi	r4,r17,8
  802d54:	10fff32e 	bgeu	r2,r3,802d24 <_calloc_r+0x5c>
  802d58:	88000215 	stw	zero,8(r17)
  802d5c:	88000315 	stw	zero,12(r17)
  802d60:	89000404 	addi	r4,r17,16
  802d64:	19ffef1e 	bne	r3,r7,802d24 <_calloc_r+0x5c>
  802d68:	89000604 	addi	r4,r17,24
  802d6c:	88000415 	stw	zero,16(r17)
  802d70:	88000515 	stw	zero,20(r17)
  802d74:	003feb06 	br	802d24 <_calloc_r+0x5c>
  802d78:	08051200 	call	805120 <memset>
  802d7c:	8805883a 	mov	r2,r17
  802d80:	dfc00117 	ldw	ra,4(sp)
  802d84:	dc400017 	ldw	r17,0(sp)
  802d88:	dec00204 	addi	sp,sp,8
  802d8c:	f800283a 	ret

00802d90 <clock>:
  802d90:	00802074 	movhi	r2,129
  802d94:	109c2904 	addi	r2,r2,28836
  802d98:	11000017 	ldw	r4,0(r2)
  802d9c:	defffb04 	addi	sp,sp,-20
  802da0:	d80b883a 	mov	r5,sp
  802da4:	dfc00415 	stw	ra,16(sp)
  802da8:	08059d00 	call	8059d0 <_times_r>
  802dac:	1007883a 	mov	r3,r2
  802db0:	00bfffc4 	movi	r2,-1
  802db4:	18800726 	beq	r3,r2,802dd4 <clock+0x44>
  802db8:	d8c00117 	ldw	r3,4(sp)
  802dbc:	d9000017 	ldw	r4,0(sp)
  802dc0:	d8800217 	ldw	r2,8(sp)
  802dc4:	20c9883a 	add	r4,r4,r3
  802dc8:	d8c00317 	ldw	r3,12(sp)
  802dcc:	10c5883a 	add	r2,r2,r3
  802dd0:	2087883a 	add	r3,r4,r2
  802dd4:	1805883a 	mov	r2,r3
  802dd8:	dfc00417 	ldw	ra,16(sp)
  802ddc:	dec00504 	addi	sp,sp,20
  802de0:	f800283a 	ret

00802de4 <exit>:
  802de4:	defffe04 	addi	sp,sp,-8
  802de8:	000b883a 	mov	r5,zero
  802dec:	dc000015 	stw	r16,0(sp)
  802df0:	dfc00115 	stw	ra,4(sp)
  802df4:	2021883a 	mov	r16,r4
  802df8:	08094ec0 	call	8094ec <__call_exitprocs>
  802dfc:	00802074 	movhi	r2,129
  802e00:	109c2a04 	addi	r2,r2,28840
  802e04:	11000017 	ldw	r4,0(r2)
  802e08:	20800f17 	ldw	r2,60(r4)
  802e0c:	10000126 	beq	r2,zero,802e14 <exit+0x30>
  802e10:	103ee83a 	callr	r2
  802e14:	8009883a 	mov	r4,r16
  802e18:	0811fc80 	call	811fc8 <_exit>

00802e1c <_fclose_r>:
  802e1c:	defffc04 	addi	sp,sp,-16
  802e20:	dc400115 	stw	r17,4(sp)
  802e24:	dc000015 	stw	r16,0(sp)
  802e28:	dfc00315 	stw	ra,12(sp)
  802e2c:	dc800215 	stw	r18,8(sp)
  802e30:	2821883a 	mov	r16,r5
  802e34:	2023883a 	mov	r17,r4
  802e38:	28002926 	beq	r5,zero,802ee0 <_fclose_r+0xc4>
  802e3c:	080345c0 	call	80345c <__sfp_lock_acquire>
  802e40:	88000226 	beq	r17,zero,802e4c <_fclose_r+0x30>
  802e44:	88800e17 	ldw	r2,56(r17)
  802e48:	10002d26 	beq	r2,zero,802f00 <_fclose_r+0xe4>
  802e4c:	8080030f 	ldh	r2,12(r16)
  802e50:	10002226 	beq	r2,zero,802edc <_fclose_r+0xc0>
  802e54:	8809883a 	mov	r4,r17
  802e58:	800b883a 	mov	r5,r16
  802e5c:	0802f400 	call	802f40 <_fflush_r>
  802e60:	1025883a 	mov	r18,r2
  802e64:	80800b17 	ldw	r2,44(r16)
  802e68:	10000426 	beq	r2,zero,802e7c <_fclose_r+0x60>
  802e6c:	81400717 	ldw	r5,28(r16)
  802e70:	8809883a 	mov	r4,r17
  802e74:	103ee83a 	callr	r2
  802e78:	10002a16 	blt	r2,zero,802f24 <_fclose_r+0x108>
  802e7c:	8080030b 	ldhu	r2,12(r16)
  802e80:	1080200c 	andi	r2,r2,128
  802e84:	1000231e 	bne	r2,zero,802f14 <_fclose_r+0xf8>
  802e88:	81400c17 	ldw	r5,48(r16)
  802e8c:	28000526 	beq	r5,zero,802ea4 <_fclose_r+0x88>
  802e90:	80801004 	addi	r2,r16,64
  802e94:	28800226 	beq	r5,r2,802ea0 <_fclose_r+0x84>
  802e98:	8809883a 	mov	r4,r17
  802e9c:	0803be00 	call	803be0 <_free_r>
  802ea0:	80000c15 	stw	zero,48(r16)
  802ea4:	81401117 	ldw	r5,68(r16)
  802ea8:	28000326 	beq	r5,zero,802eb8 <_fclose_r+0x9c>
  802eac:	8809883a 	mov	r4,r17
  802eb0:	0803be00 	call	803be0 <_free_r>
  802eb4:	80001115 	stw	zero,68(r16)
  802eb8:	8000030d 	sth	zero,12(r16)
  802ebc:	08034600 	call	803460 <__sfp_lock_release>
  802ec0:	9005883a 	mov	r2,r18
  802ec4:	dfc00317 	ldw	ra,12(sp)
  802ec8:	dc800217 	ldw	r18,8(sp)
  802ecc:	dc400117 	ldw	r17,4(sp)
  802ed0:	dc000017 	ldw	r16,0(sp)
  802ed4:	dec00404 	addi	sp,sp,16
  802ed8:	f800283a 	ret
  802edc:	08034600 	call	803460 <__sfp_lock_release>
  802ee0:	0025883a 	mov	r18,zero
  802ee4:	9005883a 	mov	r2,r18
  802ee8:	dfc00317 	ldw	ra,12(sp)
  802eec:	dc800217 	ldw	r18,8(sp)
  802ef0:	dc400117 	ldw	r17,4(sp)
  802ef4:	dc000017 	ldw	r16,0(sp)
  802ef8:	dec00404 	addi	sp,sp,16
  802efc:	f800283a 	ret
  802f00:	8809883a 	mov	r4,r17
  802f04:	080346c0 	call	80346c <__sinit>
  802f08:	8080030f 	ldh	r2,12(r16)
  802f0c:	103fd11e 	bne	r2,zero,802e54 <_fclose_r+0x38>
  802f10:	003ff206 	br	802edc <_fclose_r+0xc0>
  802f14:	81400417 	ldw	r5,16(r16)
  802f18:	8809883a 	mov	r4,r17
  802f1c:	0803be00 	call	803be0 <_free_r>
  802f20:	003fd906 	br	802e88 <_fclose_r+0x6c>
  802f24:	04bfffc4 	movi	r18,-1
  802f28:	003fd406 	br	802e7c <_fclose_r+0x60>

00802f2c <fclose>:
  802f2c:	00802074 	movhi	r2,129
  802f30:	109c2904 	addi	r2,r2,28836
  802f34:	200b883a 	mov	r5,r4
  802f38:	11000017 	ldw	r4,0(r2)
  802f3c:	0802e1c1 	jmpi	802e1c <_fclose_r>

00802f40 <_fflush_r>:
  802f40:	defffb04 	addi	sp,sp,-20
  802f44:	dcc00315 	stw	r19,12(sp)
  802f48:	dc800215 	stw	r18,8(sp)
  802f4c:	dfc00415 	stw	ra,16(sp)
  802f50:	dc400115 	stw	r17,4(sp)
  802f54:	dc000015 	stw	r16,0(sp)
  802f58:	2027883a 	mov	r19,r4
  802f5c:	2825883a 	mov	r18,r5
  802f60:	20000226 	beq	r4,zero,802f6c <_fflush_r+0x2c>
  802f64:	20800e17 	ldw	r2,56(r4)
  802f68:	10005626 	beq	r2,zero,8030c4 <_fflush_r+0x184>
  802f6c:	9100030b 	ldhu	r4,12(r18)
  802f70:	20ffffcc 	andi	r3,r4,65535
  802f74:	18e0001c 	xori	r3,r3,32768
  802f78:	18e00004 	addi	r3,r3,-32768
  802f7c:	1880020c 	andi	r2,r3,8
  802f80:	1000261e 	bne	r2,zero,80301c <_fflush_r+0xdc>
  802f84:	90c00117 	ldw	r3,4(r18)
  802f88:	20820014 	ori	r2,r4,2048
  802f8c:	9080030d 	sth	r2,12(r18)
  802f90:	1009883a 	mov	r4,r2
  802f94:	00c0400e 	bge	zero,r3,803098 <_fflush_r+0x158>
  802f98:	92000a17 	ldw	r8,40(r18)
  802f9c:	40004026 	beq	r8,zero,8030a0 <_fflush_r+0x160>
  802fa0:	2084000c 	andi	r2,r4,4096
  802fa4:	10005326 	beq	r2,zero,8030f4 <_fflush_r+0x1b4>
  802fa8:	94001417 	ldw	r16,80(r18)
  802fac:	9080030b 	ldhu	r2,12(r18)
  802fb0:	1080010c 	andi	r2,r2,4
  802fb4:	1000481e 	bne	r2,zero,8030d8 <_fflush_r+0x198>
  802fb8:	91400717 	ldw	r5,28(r18)
  802fbc:	9809883a 	mov	r4,r19
  802fc0:	800d883a 	mov	r6,r16
  802fc4:	000f883a 	mov	r7,zero
  802fc8:	403ee83a 	callr	r8
  802fcc:	8080261e 	bne	r16,r2,803068 <_fflush_r+0x128>
  802fd0:	9080030b 	ldhu	r2,12(r18)
  802fd4:	91000417 	ldw	r4,16(r18)
  802fd8:	90000115 	stw	zero,4(r18)
  802fdc:	10bdffcc 	andi	r2,r2,63487
  802fe0:	10ffffcc 	andi	r3,r2,65535
  802fe4:	18c4000c 	andi	r3,r3,4096
  802fe8:	9080030d 	sth	r2,12(r18)
  802fec:	91000015 	stw	r4,0(r18)
  802ff0:	18002b26 	beq	r3,zero,8030a0 <_fflush_r+0x160>
  802ff4:	0007883a 	mov	r3,zero
  802ff8:	1805883a 	mov	r2,r3
  802ffc:	94001415 	stw	r16,80(r18)
  803000:	dfc00417 	ldw	ra,16(sp)
  803004:	dcc00317 	ldw	r19,12(sp)
  803008:	dc800217 	ldw	r18,8(sp)
  80300c:	dc400117 	ldw	r17,4(sp)
  803010:	dc000017 	ldw	r16,0(sp)
  803014:	dec00504 	addi	sp,sp,20
  803018:	f800283a 	ret
  80301c:	94400417 	ldw	r17,16(r18)
  803020:	88001f26 	beq	r17,zero,8030a0 <_fflush_r+0x160>
  803024:	90800017 	ldw	r2,0(r18)
  803028:	18c000cc 	andi	r3,r3,3
  80302c:	94400015 	stw	r17,0(r18)
  803030:	1461c83a 	sub	r16,r2,r17
  803034:	18002526 	beq	r3,zero,8030cc <_fflush_r+0x18c>
  803038:	0005883a 	mov	r2,zero
  80303c:	90800215 	stw	r2,8(r18)
  803040:	0400170e 	bge	zero,r16,8030a0 <_fflush_r+0x160>
  803044:	90c00917 	ldw	r3,36(r18)
  803048:	91400717 	ldw	r5,28(r18)
  80304c:	880d883a 	mov	r6,r17
  803050:	800f883a 	mov	r7,r16
  803054:	9809883a 	mov	r4,r19
  803058:	183ee83a 	callr	r3
  80305c:	88a3883a 	add	r17,r17,r2
  803060:	80a1c83a 	sub	r16,r16,r2
  803064:	00bff616 	blt	zero,r2,803040 <_fflush_r+0x100>
  803068:	9080030b 	ldhu	r2,12(r18)
  80306c:	00ffffc4 	movi	r3,-1
  803070:	10801014 	ori	r2,r2,64
  803074:	9080030d 	sth	r2,12(r18)
  803078:	1805883a 	mov	r2,r3
  80307c:	dfc00417 	ldw	ra,16(sp)
  803080:	dcc00317 	ldw	r19,12(sp)
  803084:	dc800217 	ldw	r18,8(sp)
  803088:	dc400117 	ldw	r17,4(sp)
  80308c:	dc000017 	ldw	r16,0(sp)
  803090:	dec00504 	addi	sp,sp,20
  803094:	f800283a 	ret
  803098:	90800f17 	ldw	r2,60(r18)
  80309c:	00bfbe16 	blt	zero,r2,802f98 <_fflush_r+0x58>
  8030a0:	0007883a 	mov	r3,zero
  8030a4:	1805883a 	mov	r2,r3
  8030a8:	dfc00417 	ldw	ra,16(sp)
  8030ac:	dcc00317 	ldw	r19,12(sp)
  8030b0:	dc800217 	ldw	r18,8(sp)
  8030b4:	dc400117 	ldw	r17,4(sp)
  8030b8:	dc000017 	ldw	r16,0(sp)
  8030bc:	dec00504 	addi	sp,sp,20
  8030c0:	f800283a 	ret
  8030c4:	080346c0 	call	80346c <__sinit>
  8030c8:	003fa806 	br	802f6c <_fflush_r+0x2c>
  8030cc:	90800517 	ldw	r2,20(r18)
  8030d0:	90800215 	stw	r2,8(r18)
  8030d4:	003fda06 	br	803040 <_fflush_r+0x100>
  8030d8:	90800117 	ldw	r2,4(r18)
  8030dc:	90c00c17 	ldw	r3,48(r18)
  8030e0:	80a1c83a 	sub	r16,r16,r2
  8030e4:	183fb426 	beq	r3,zero,802fb8 <_fflush_r+0x78>
  8030e8:	90800f17 	ldw	r2,60(r18)
  8030ec:	80a1c83a 	sub	r16,r16,r2
  8030f0:	003fb106 	br	802fb8 <_fflush_r+0x78>
  8030f4:	91400717 	ldw	r5,28(r18)
  8030f8:	9809883a 	mov	r4,r19
  8030fc:	000d883a 	mov	r6,zero
  803100:	01c00044 	movi	r7,1
  803104:	403ee83a 	callr	r8
  803108:	1021883a 	mov	r16,r2
  80310c:	00bfffc4 	movi	r2,-1
  803110:	80800226 	beq	r16,r2,80311c <_fflush_r+0x1dc>
  803114:	92000a17 	ldw	r8,40(r18)
  803118:	003fa406 	br	802fac <_fflush_r+0x6c>
  80311c:	98c00017 	ldw	r3,0(r19)
  803120:	00800744 	movi	r2,29
  803124:	18bfde26 	beq	r3,r2,8030a0 <_fflush_r+0x160>
  803128:	9080030b 	ldhu	r2,12(r18)
  80312c:	8007883a 	mov	r3,r16
  803130:	10801014 	ori	r2,r2,64
  803134:	9080030d 	sth	r2,12(r18)
  803138:	003fcf06 	br	803078 <_fflush_r+0x138>

0080313c <fflush>:
  80313c:	01402034 	movhi	r5,128
  803140:	294bd004 	addi	r5,r5,12096
  803144:	2007883a 	mov	r3,r4
  803148:	20000526 	beq	r4,zero,803160 <fflush+0x24>
  80314c:	00802074 	movhi	r2,129
  803150:	109c2904 	addi	r2,r2,28836
  803154:	11000017 	ldw	r4,0(r2)
  803158:	180b883a 	mov	r5,r3
  80315c:	0802f401 	jmpi	802f40 <_fflush_r>
  803160:	00802074 	movhi	r2,129
  803164:	109c2a04 	addi	r2,r2,28840
  803168:	11000017 	ldw	r4,0(r2)
  80316c:	08044341 	jmpi	804434 <_fwalk_reent>

00803170 <fgetc>:
  803170:	defffd04 	addi	sp,sp,-12
  803174:	dc400115 	stw	r17,4(sp)
  803178:	04402074 	movhi	r17,129
  80317c:	8c5c2904 	addi	r17,r17,28836
  803180:	88c00017 	ldw	r3,0(r17)
  803184:	dc000015 	stw	r16,0(sp)
  803188:	dfc00215 	stw	ra,8(sp)
  80318c:	2021883a 	mov	r16,r4
  803190:	18000326 	beq	r3,zero,8031a0 <fgetc+0x30>
  803194:	18800e17 	ldw	r2,56(r3)
  803198:	1809883a 	mov	r4,r3
  80319c:	10000e26 	beq	r2,zero,8031d8 <fgetc+0x68>
  8031a0:	80800117 	ldw	r2,4(r16)
  8031a4:	800b883a 	mov	r5,r16
  8031a8:	10bfffc4 	addi	r2,r2,-1
  8031ac:	80800115 	stw	r2,4(r16)
  8031b0:	10000f16 	blt	r2,zero,8031f0 <fgetc+0x80>
  8031b4:	80c00017 	ldw	r3,0(r16)
  8031b8:	18800003 	ldbu	r2,0(r3)
  8031bc:	18c00044 	addi	r3,r3,1
  8031c0:	80c00015 	stw	r3,0(r16)
  8031c4:	dfc00217 	ldw	ra,8(sp)
  8031c8:	dc400117 	ldw	r17,4(sp)
  8031cc:	dc000017 	ldw	r16,0(sp)
  8031d0:	dec00304 	addi	sp,sp,12
  8031d4:	f800283a 	ret
  8031d8:	080346c0 	call	80346c <__sinit>
  8031dc:	80800117 	ldw	r2,4(r16)
  8031e0:	800b883a 	mov	r5,r16
  8031e4:	10bfffc4 	addi	r2,r2,-1
  8031e8:	80800115 	stw	r2,4(r16)
  8031ec:	103ff10e 	bge	r2,zero,8031b4 <fgetc+0x44>
  8031f0:	89000017 	ldw	r4,0(r17)
  8031f4:	dfc00217 	ldw	ra,8(sp)
  8031f8:	dc400117 	ldw	r17,4(sp)
  8031fc:	dc000017 	ldw	r16,0(sp)
  803200:	dec00304 	addi	sp,sp,12
  803204:	080553c1 	jmpi	80553c <__srget_r>

00803208 <_fgetc_r>:
  803208:	defffd04 	addi	sp,sp,-12
  80320c:	dc400115 	stw	r17,4(sp)
  803210:	dc000015 	stw	r16,0(sp)
  803214:	dfc00215 	stw	ra,8(sp)
  803218:	2021883a 	mov	r16,r4
  80321c:	2823883a 	mov	r17,r5
  803220:	20000226 	beq	r4,zero,80322c <_fgetc_r+0x24>
  803224:	20800e17 	ldw	r2,56(r4)
  803228:	10000f26 	beq	r2,zero,803268 <_fgetc_r+0x60>
  80322c:	88800117 	ldw	r2,4(r17)
  803230:	8009883a 	mov	r4,r16
  803234:	880b883a 	mov	r5,r17
  803238:	10bfffc4 	addi	r2,r2,-1
  80323c:	88800115 	stw	r2,4(r17)
  803240:	10001016 	blt	r2,zero,803284 <_fgetc_r+0x7c>
  803244:	88c00017 	ldw	r3,0(r17)
  803248:	18800003 	ldbu	r2,0(r3)
  80324c:	18c00044 	addi	r3,r3,1
  803250:	88c00015 	stw	r3,0(r17)
  803254:	dfc00217 	ldw	ra,8(sp)
  803258:	dc400117 	ldw	r17,4(sp)
  80325c:	dc000017 	ldw	r16,0(sp)
  803260:	dec00304 	addi	sp,sp,12
  803264:	f800283a 	ret
  803268:	080346c0 	call	80346c <__sinit>
  80326c:	88800117 	ldw	r2,4(r17)
  803270:	8009883a 	mov	r4,r16
  803274:	880b883a 	mov	r5,r17
  803278:	10bfffc4 	addi	r2,r2,-1
  80327c:	88800115 	stw	r2,4(r17)
  803280:	103ff00e 	bge	r2,zero,803244 <_fgetc_r+0x3c>
  803284:	dfc00217 	ldw	ra,8(sp)
  803288:	dc400117 	ldw	r17,4(sp)
  80328c:	dc000017 	ldw	r16,0(sp)
  803290:	dec00304 	addi	sp,sp,12
  803294:	080553c1 	jmpi	80553c <__srget_r>

00803298 <_fgets_r>:
  803298:	defff804 	addi	sp,sp,-32
  80329c:	00800044 	movi	r2,1
  8032a0:	dd800615 	stw	r22,24(sp)
  8032a4:	dd400515 	stw	r21,20(sp)
  8032a8:	dc400115 	stw	r17,4(sp)
  8032ac:	dc000015 	stw	r16,0(sp)
  8032b0:	dfc00715 	stw	ra,28(sp)
  8032b4:	dd000415 	stw	r20,16(sp)
  8032b8:	dcc00315 	stw	r19,12(sp)
  8032bc:	dc800215 	stw	r18,8(sp)
  8032c0:	3021883a 	mov	r16,r6
  8032c4:	282d883a 	mov	r22,r5
  8032c8:	3823883a 	mov	r17,r7
  8032cc:	202b883a 	mov	r21,r4
  8032d0:	1180410e 	bge	r2,r6,8033d8 <_fgets_r+0x140>
  8032d4:	20000226 	beq	r4,zero,8032e0 <_fgets_r+0x48>
  8032d8:	20800e17 	ldw	r2,56(r4)
  8032dc:	10002e26 	beq	r2,zero,803398 <_fgets_r+0x100>
  8032e0:	853fffc4 	addi	r20,r16,-1
  8032e4:	b027883a 	mov	r19,r22
  8032e8:	88800117 	ldw	r2,4(r17)
  8032ec:	a809883a 	mov	r4,r21
  8032f0:	880b883a 	mov	r5,r17
  8032f4:	100d883a 	mov	r6,r2
  8032f8:	1000031e 	bne	r2,zero,803308 <_fgets_r+0x70>
  8032fc:	080535c0 	call	80535c <__srefill_r>
  803300:	1000341e 	bne	r2,zero,8033d4 <_fgets_r+0x13c>
  803304:	89800117 	ldw	r6,4(r17)
  803308:	01400284 	movi	r5,10
  80330c:	3021883a 	mov	r16,r6
  803310:	8c800017 	ldw	r18,0(r17)
  803314:	a180012e 	bgeu	r20,r6,80331c <_fgets_r+0x84>
  803318:	a021883a 	mov	r16,r20
  80331c:	9009883a 	mov	r4,r18
  803320:	800d883a 	mov	r6,r16
  803324:	0804f9c0 	call	804f9c <memchr>
  803328:	1007883a 	mov	r3,r2
  80332c:	900b883a 	mov	r5,r18
  803330:	9809883a 	mov	r4,r19
  803334:	800d883a 	mov	r6,r16
  803338:	1000191e 	bne	r2,zero,8033a0 <_fgets_r+0x108>
  80333c:	88800117 	ldw	r2,4(r17)
  803340:	88c00017 	ldw	r3,0(r17)
  803344:	9c27883a 	add	r19,r19,r16
  803348:	1405c83a 	sub	r2,r2,r16
  80334c:	1c07883a 	add	r3,r3,r16
  803350:	88c00015 	stw	r3,0(r17)
  803354:	88800115 	stw	r2,4(r17)
  803358:	08050800 	call	805080 <memcpy>
  80335c:	a407c83a 	sub	r3,r20,r16
  803360:	1829883a 	mov	r20,r3
  803364:	183fe01e 	bne	r3,zero,8032e8 <_fgets_r+0x50>
  803368:	98000005 	stb	zero,0(r19)
  80336c:	b005883a 	mov	r2,r22
  803370:	dfc00717 	ldw	ra,28(sp)
  803374:	dd800617 	ldw	r22,24(sp)
  803378:	dd400517 	ldw	r21,20(sp)
  80337c:	dd000417 	ldw	r20,16(sp)
  803380:	dcc00317 	ldw	r19,12(sp)
  803384:	dc800217 	ldw	r18,8(sp)
  803388:	dc400117 	ldw	r17,4(sp)
  80338c:	dc000017 	ldw	r16,0(sp)
  803390:	dec00804 	addi	sp,sp,32
  803394:	f800283a 	ret
  803398:	080346c0 	call	80346c <__sinit>
  80339c:	003fd006 	br	8032e0 <_fgets_r+0x48>
  8033a0:	88800117 	ldw	r2,4(r17)
  8033a4:	18c00044 	addi	r3,r3,1
  8033a8:	1ca1c83a 	sub	r16,r3,r18
  8033ac:	1405c83a 	sub	r2,r2,r16
  8033b0:	800d883a 	mov	r6,r16
  8033b4:	88c00015 	stw	r3,0(r17)
  8033b8:	88800115 	stw	r2,4(r17)
  8033bc:	900b883a 	mov	r5,r18
  8033c0:	9809883a 	mov	r4,r19
  8033c4:	08050800 	call	805080 <memcpy>
  8033c8:	9c21883a 	add	r16,r19,r16
  8033cc:	80000005 	stb	zero,0(r16)
  8033d0:	003fe606 	br	80336c <_fgets_r+0xd4>
  8033d4:	9dbfe41e 	bne	r19,r22,803368 <_fgets_r+0xd0>
  8033d8:	002d883a 	mov	r22,zero
  8033dc:	003fe306 	br	80336c <_fgets_r+0xd4>

008033e0 <fgets>:
  8033e0:	00802074 	movhi	r2,129
  8033e4:	109c2904 	addi	r2,r2,28836
  8033e8:	2013883a 	mov	r9,r4
  8033ec:	11000017 	ldw	r4,0(r2)
  8033f0:	2805883a 	mov	r2,r5
  8033f4:	300f883a 	mov	r7,r6
  8033f8:	480b883a 	mov	r5,r9
  8033fc:	100d883a 	mov	r6,r2
  803400:	08032981 	jmpi	803298 <_fgets_r>

00803404 <std>:
  803404:	00802034 	movhi	r2,128
  803408:	1095c804 	addi	r2,r2,22304
  80340c:	20800b15 	stw	r2,44(r4)
  803410:	00802034 	movhi	r2,128
  803414:	10960304 	addi	r2,r2,22540
  803418:	20800815 	stw	r2,32(r4)
  80341c:	00c02034 	movhi	r3,128
  803420:	18d5e404 	addi	r3,r3,22416
  803424:	00802034 	movhi	r2,128
  803428:	1095ca04 	addi	r2,r2,22312
  80342c:	2140030d 	sth	r5,12(r4)
  803430:	2180038d 	sth	r6,14(r4)
  803434:	20c00915 	stw	r3,36(r4)
  803438:	20800a15 	stw	r2,40(r4)
  80343c:	20000015 	stw	zero,0(r4)
  803440:	20000115 	stw	zero,4(r4)
  803444:	20000215 	stw	zero,8(r4)
  803448:	20000415 	stw	zero,16(r4)
  80344c:	20000515 	stw	zero,20(r4)
  803450:	20000615 	stw	zero,24(r4)
  803454:	21000715 	stw	r4,28(r4)
  803458:	f800283a 	ret

0080345c <__sfp_lock_acquire>:
  80345c:	f800283a 	ret

00803460 <__sfp_lock_release>:
  803460:	f800283a 	ret

00803464 <__sinit_lock_acquire>:
  803464:	f800283a 	ret

00803468 <__sinit_lock_release>:
  803468:	f800283a 	ret

0080346c <__sinit>:
  80346c:	20800e17 	ldw	r2,56(r4)
  803470:	defffd04 	addi	sp,sp,-12
  803474:	dc400115 	stw	r17,4(sp)
  803478:	dc000015 	stw	r16,0(sp)
  80347c:	dfc00215 	stw	ra,8(sp)
  803480:	04400044 	movi	r17,1
  803484:	01400104 	movi	r5,4
  803488:	000d883a 	mov	r6,zero
  80348c:	2021883a 	mov	r16,r4
  803490:	2200bb04 	addi	r8,r4,748
  803494:	200f883a 	mov	r7,r4
  803498:	10000526 	beq	r2,zero,8034b0 <__sinit+0x44>
  80349c:	dfc00217 	ldw	ra,8(sp)
  8034a0:	dc400117 	ldw	r17,4(sp)
  8034a4:	dc000017 	ldw	r16,0(sp)
  8034a8:	dec00304 	addi	sp,sp,12
  8034ac:	f800283a 	ret
  8034b0:	21000117 	ldw	r4,4(r4)
  8034b4:	00802034 	movhi	r2,128
  8034b8:	108d5404 	addi	r2,r2,13648
  8034bc:	00c000c4 	movi	r3,3
  8034c0:	80800f15 	stw	r2,60(r16)
  8034c4:	80c0b915 	stw	r3,740(r16)
  8034c8:	8200ba15 	stw	r8,744(r16)
  8034cc:	84400e15 	stw	r17,56(r16)
  8034d0:	8000b815 	stw	zero,736(r16)
  8034d4:	08034040 	call	803404 <std>
  8034d8:	81000217 	ldw	r4,8(r16)
  8034dc:	880d883a 	mov	r6,r17
  8034e0:	800f883a 	mov	r7,r16
  8034e4:	01400284 	movi	r5,10
  8034e8:	08034040 	call	803404 <std>
  8034ec:	81000317 	ldw	r4,12(r16)
  8034f0:	800f883a 	mov	r7,r16
  8034f4:	01400484 	movi	r5,18
  8034f8:	01800084 	movi	r6,2
  8034fc:	dfc00217 	ldw	ra,8(sp)
  803500:	dc400117 	ldw	r17,4(sp)
  803504:	dc000017 	ldw	r16,0(sp)
  803508:	dec00304 	addi	sp,sp,12
  80350c:	08034041 	jmpi	803404 <std>

00803510 <__fp_lock>:
  803510:	0005883a 	mov	r2,zero
  803514:	f800283a 	ret

00803518 <__fp_unlock>:
  803518:	0005883a 	mov	r2,zero
  80351c:	f800283a 	ret

00803520 <__fp_unlock_all>:
  803520:	00802074 	movhi	r2,129
  803524:	109c2904 	addi	r2,r2,28836
  803528:	11000017 	ldw	r4,0(r2)
  80352c:	01402034 	movhi	r5,128
  803530:	294d4604 	addi	r5,r5,13592
  803534:	08044fc1 	jmpi	8044fc <_fwalk>

00803538 <__fp_lock_all>:
  803538:	00802074 	movhi	r2,129
  80353c:	109c2904 	addi	r2,r2,28836
  803540:	11000017 	ldw	r4,0(r2)
  803544:	01402034 	movhi	r5,128
  803548:	294d4404 	addi	r5,r5,13584
  80354c:	08044fc1 	jmpi	8044fc <_fwalk>

00803550 <_cleanup_r>:
  803550:	01402034 	movhi	r5,128
  803554:	294bcb04 	addi	r5,r5,12076
  803558:	08044fc1 	jmpi	8044fc <_fwalk>

0080355c <_cleanup>:
  80355c:	00802074 	movhi	r2,129
  803560:	109c2a04 	addi	r2,r2,28840
  803564:	11000017 	ldw	r4,0(r2)
  803568:	08035501 	jmpi	803550 <_cleanup_r>

0080356c <__sfmoreglue>:
  80356c:	defffc04 	addi	sp,sp,-16
  803570:	dc000015 	stw	r16,0(sp)
  803574:	2821883a 	mov	r16,r5
  803578:	dc400115 	stw	r17,4(sp)
  80357c:	01401704 	movi	r5,92
  803580:	2023883a 	mov	r17,r4
  803584:	8009883a 	mov	r4,r16
  803588:	dfc00315 	stw	ra,12(sp)
  80358c:	dcc00215 	stw	r19,8(sp)
  803590:	08027a80 	call	8027a8 <__mulsi3>
  803594:	11400304 	addi	r5,r2,12
  803598:	8809883a 	mov	r4,r17
  80359c:	1027883a 	mov	r19,r2
  8035a0:	080485c0 	call	80485c <_malloc_r>
  8035a4:	10c00304 	addi	r3,r2,12
  8035a8:	1023883a 	mov	r17,r2
  8035ac:	1809883a 	mov	r4,r3
  8035b0:	980d883a 	mov	r6,r19
  8035b4:	000b883a 	mov	r5,zero
  8035b8:	10000b26 	beq	r2,zero,8035e8 <__sfmoreglue+0x7c>
  8035bc:	14000115 	stw	r16,4(r2)
  8035c0:	10c00215 	stw	r3,8(r2)
  8035c4:	10000015 	stw	zero,0(r2)
  8035c8:	08051200 	call	805120 <memset>
  8035cc:	8805883a 	mov	r2,r17
  8035d0:	dfc00317 	ldw	ra,12(sp)
  8035d4:	dcc00217 	ldw	r19,8(sp)
  8035d8:	dc400117 	ldw	r17,4(sp)
  8035dc:	dc000017 	ldw	r16,0(sp)
  8035e0:	dec00404 	addi	sp,sp,16
  8035e4:	f800283a 	ret
  8035e8:	0023883a 	mov	r17,zero
  8035ec:	8805883a 	mov	r2,r17
  8035f0:	dfc00317 	ldw	ra,12(sp)
  8035f4:	dcc00217 	ldw	r19,8(sp)
  8035f8:	dc400117 	ldw	r17,4(sp)
  8035fc:	dc000017 	ldw	r16,0(sp)
  803600:	dec00404 	addi	sp,sp,16
  803604:	f800283a 	ret

00803608 <__sfp>:
  803608:	defffd04 	addi	sp,sp,-12
  80360c:	00802074 	movhi	r2,129
  803610:	109c2a04 	addi	r2,r2,28840
  803614:	dc000015 	stw	r16,0(sp)
  803618:	14000017 	ldw	r16,0(r2)
  80361c:	dc400115 	stw	r17,4(sp)
  803620:	dfc00215 	stw	ra,8(sp)
  803624:	80800e17 	ldw	r2,56(r16)
  803628:	2023883a 	mov	r17,r4
  80362c:	10002626 	beq	r2,zero,8036c8 <__sfp+0xc0>
  803630:	8400b804 	addi	r16,r16,736
  803634:	80800117 	ldw	r2,4(r16)
  803638:	81000217 	ldw	r4,8(r16)
  80363c:	10ffffc4 	addi	r3,r2,-1
  803640:	18000916 	blt	r3,zero,803668 <__sfp+0x60>
  803644:	2080030f 	ldh	r2,12(r4)
  803648:	10000b26 	beq	r2,zero,803678 <__sfp+0x70>
  80364c:	017fffc4 	movi	r5,-1
  803650:	00000206 	br	80365c <__sfp+0x54>
  803654:	2080030f 	ldh	r2,12(r4)
  803658:	10000726 	beq	r2,zero,803678 <__sfp+0x70>
  80365c:	18ffffc4 	addi	r3,r3,-1
  803660:	21001704 	addi	r4,r4,92
  803664:	197ffb1e 	bne	r3,r5,803654 <__sfp+0x4c>
  803668:	80800017 	ldw	r2,0(r16)
  80366c:	10001926 	beq	r2,zero,8036d4 <__sfp+0xcc>
  803670:	1021883a 	mov	r16,r2
  803674:	003fef06 	br	803634 <__sfp+0x2c>
  803678:	00bfffc4 	movi	r2,-1
  80367c:	00c00044 	movi	r3,1
  803680:	2080038d 	sth	r2,14(r4)
  803684:	20c0030d 	sth	r3,12(r4)
  803688:	20000015 	stw	zero,0(r4)
  80368c:	20000215 	stw	zero,8(r4)
  803690:	20000115 	stw	zero,4(r4)
  803694:	20000415 	stw	zero,16(r4)
  803698:	20000515 	stw	zero,20(r4)
  80369c:	20000615 	stw	zero,24(r4)
  8036a0:	20000c15 	stw	zero,48(r4)
  8036a4:	20000d15 	stw	zero,52(r4)
  8036a8:	20001115 	stw	zero,68(r4)
  8036ac:	20001215 	stw	zero,72(r4)
  8036b0:	2005883a 	mov	r2,r4
  8036b4:	dfc00217 	ldw	ra,8(sp)
  8036b8:	dc400117 	ldw	r17,4(sp)
  8036bc:	dc000017 	ldw	r16,0(sp)
  8036c0:	dec00304 	addi	sp,sp,12
  8036c4:	f800283a 	ret
  8036c8:	8009883a 	mov	r4,r16
  8036cc:	080346c0 	call	80346c <__sinit>
  8036d0:	003fd706 	br	803630 <__sfp+0x28>
  8036d4:	8809883a 	mov	r4,r17
  8036d8:	01400104 	movi	r5,4
  8036dc:	080356c0 	call	80356c <__sfmoreglue>
  8036e0:	80800015 	stw	r2,0(r16)
  8036e4:	103fe21e 	bne	r2,zero,803670 <__sfp+0x68>
  8036e8:	00800304 	movi	r2,12
  8036ec:	0009883a 	mov	r4,zero
  8036f0:	88800015 	stw	r2,0(r17)
  8036f4:	003fee06 	br	8036b0 <__sfp+0xa8>

008036f8 <_fopen_r>:
  8036f8:	defffa04 	addi	sp,sp,-24
  8036fc:	dcc00415 	stw	r19,16(sp)
  803700:	2827883a 	mov	r19,r5
  803704:	300b883a 	mov	r5,r6
  803708:	d80d883a 	mov	r6,sp
  80370c:	dc800315 	stw	r18,12(sp)
  803710:	dc400215 	stw	r17,8(sp)
  803714:	dc000115 	stw	r16,4(sp)
  803718:	dfc00515 	stw	ra,20(sp)
  80371c:	2021883a 	mov	r16,r4
  803720:	080af040 	call	80af04 <__sflags>
  803724:	1025883a 	mov	r18,r2
  803728:	8009883a 	mov	r4,r16
  80372c:	0023883a 	mov	r17,zero
  803730:	1000081e 	bne	r2,zero,803754 <_fopen_r+0x5c>
  803734:	8805883a 	mov	r2,r17
  803738:	dfc00517 	ldw	ra,20(sp)
  80373c:	dcc00417 	ldw	r19,16(sp)
  803740:	dc800317 	ldw	r18,12(sp)
  803744:	dc400217 	ldw	r17,8(sp)
  803748:	dc000117 	ldw	r16,4(sp)
  80374c:	dec00604 	addi	sp,sp,24
  803750:	f800283a 	ret
  803754:	08036080 	call	803608 <__sfp>
  803758:	1023883a 	mov	r17,r2
  80375c:	980b883a 	mov	r5,r19
  803760:	8009883a 	mov	r4,r16
  803764:	01c06d84 	movi	r7,438
  803768:	103ff226 	beq	r2,zero,803734 <_fopen_r+0x3c>
  80376c:	d9800017 	ldw	r6,0(sp)
  803770:	08051b80 	call	8051b8 <_open_r>
  803774:	10001816 	blt	r2,zero,8037d8 <_fopen_r+0xe0>
  803778:	00c02034 	movhi	r3,128
  80377c:	18d5e404 	addi	r3,r3,22416
  803780:	923fffcc 	andi	r8,r18,65535
  803784:	8880038d 	sth	r2,14(r17)
  803788:	00802034 	movhi	r2,128
  80378c:	10960304 	addi	r2,r2,22540
  803790:	88800815 	stw	r2,32(r17)
  803794:	88c00915 	stw	r3,36(r17)
  803798:	00802034 	movhi	r2,128
  80379c:	1095ca04 	addi	r2,r2,22312
  8037a0:	00c02034 	movhi	r3,128
  8037a4:	18d5c804 	addi	r3,r3,22304
  8037a8:	4200400c 	andi	r8,r8,256
  8037ac:	8c80030d 	sth	r18,12(r17)
  8037b0:	8009883a 	mov	r4,r16
  8037b4:	880b883a 	mov	r5,r17
  8037b8:	000d883a 	mov	r6,zero
  8037bc:	01c00084 	movi	r7,2
  8037c0:	88800a15 	stw	r2,40(r17)
  8037c4:	88c00b15 	stw	r3,44(r17)
  8037c8:	8c400715 	stw	r17,28(r17)
  8037cc:	403fd926 	beq	r8,zero,803734 <_fopen_r+0x3c>
  8037d0:	0803f600 	call	803f60 <_fseek_r>
  8037d4:	003fd706 	br	803734 <_fopen_r+0x3c>
  8037d8:	080345c0 	call	80345c <__sfp_lock_acquire>
  8037dc:	8800030d 	sth	zero,12(r17)
  8037e0:	08034600 	call	803460 <__sfp_lock_release>
  8037e4:	0023883a 	mov	r17,zero
  8037e8:	003fd206 	br	803734 <_fopen_r+0x3c>

008037ec <fopen>:
  8037ec:	01802074 	movhi	r6,129
  8037f0:	319c2904 	addi	r6,r6,28836
  8037f4:	2007883a 	mov	r3,r4
  8037f8:	31000017 	ldw	r4,0(r6)
  8037fc:	280d883a 	mov	r6,r5
  803800:	180b883a 	mov	r5,r3
  803804:	08036f81 	jmpi	8036f8 <_fopen_r>

00803808 <fprintf>:
  803808:	defffc04 	addi	sp,sp,-16
  80380c:	dfc00115 	stw	ra,4(sp)
  803810:	d9800215 	stw	r6,8(sp)
  803814:	d9c00315 	stw	r7,12(sp)
  803818:	d8800204 	addi	r2,sp,8
  80381c:	100d883a 	mov	r6,r2
  803820:	d8800015 	stw	r2,0(sp)
  803824:	0807b880 	call	807b88 <__vfprintf_internal>
  803828:	dfc00117 	ldw	ra,4(sp)
  80382c:	dec00404 	addi	sp,sp,16
  803830:	f800283a 	ret

00803834 <_fprintf_r>:
  803834:	defffd04 	addi	sp,sp,-12
  803838:	2807883a 	mov	r3,r5
  80383c:	dfc00115 	stw	ra,4(sp)
  803840:	d9c00215 	stw	r7,8(sp)
  803844:	d8800204 	addi	r2,sp,8
  803848:	300b883a 	mov	r5,r6
  80384c:	1809883a 	mov	r4,r3
  803850:	100d883a 	mov	r6,r2
  803854:	d8800015 	stw	r2,0(sp)
  803858:	0807b880 	call	807b88 <__vfprintf_internal>
  80385c:	dfc00117 	ldw	ra,4(sp)
  803860:	dec00304 	addi	sp,sp,12
  803864:	f800283a 	ret

00803868 <_fread_r>:
  803868:	defff504 	addi	sp,sp,-44
  80386c:	dd800715 	stw	r22,28(sp)
  803870:	dc000115 	stw	r16,4(sp)
  803874:	202d883a 	mov	r22,r4
  803878:	2821883a 	mov	r16,r5
  80387c:	3809883a 	mov	r4,r7
  803880:	300b883a 	mov	r5,r6
  803884:	df000915 	stw	fp,36(sp)
  803888:	ddc00815 	stw	r23,32(sp)
  80388c:	dcc00415 	stw	r19,16(sp)
  803890:	dfc00a15 	stw	ra,40(sp)
  803894:	dd400615 	stw	r21,24(sp)
  803898:	dd000515 	stw	r20,20(sp)
  80389c:	dc800315 	stw	r18,12(sp)
  8038a0:	dc400215 	stw	r17,8(sp)
  8038a4:	d9800015 	stw	r6,0(sp)
  8038a8:	3839883a 	mov	fp,r7
  8038ac:	08027a80 	call	8027a8 <__mulsi3>
  8038b0:	102f883a 	mov	r23,r2
  8038b4:	dcc00b17 	ldw	r19,44(sp)
  8038b8:	10005926 	beq	r2,zero,803a20 <_fread_r+0x1b8>
  8038bc:	b0000226 	beq	r22,zero,8038c8 <_fread_r+0x60>
  8038c0:	b0800e17 	ldw	r2,56(r22)
  8038c4:	10005826 	beq	r2,zero,803a28 <_fread_r+0x1c0>
  8038c8:	9c400117 	ldw	r17,4(r19)
  8038cc:	88005a16 	blt	r17,zero,803a38 <_fread_r+0x1d0>
  8038d0:	9880030b 	ldhu	r2,12(r19)
  8038d4:	8029883a 	mov	r20,r16
  8038d8:	1080008c 	andi	r2,r2,2
  8038dc:	1000221e 	bne	r2,zero,803968 <_fread_r+0x100>
  8038e0:	b825883a 	mov	r18,r23
  8038e4:	00000106 	br	8038ec <_fread_r+0x84>
  8038e8:	9c400117 	ldw	r17,4(r19)
  8038ec:	a009883a 	mov	r4,r20
  8038f0:	880d883a 	mov	r6,r17
  8038f4:	8c80552e 	bgeu	r17,r18,803a4c <_fread_r+0x1e4>
  8038f8:	99400017 	ldw	r5,0(r19)
  8038fc:	a469883a 	add	r20,r20,r17
  803900:	9465c83a 	sub	r18,r18,r17
  803904:	08050800 	call	805080 <memcpy>
  803908:	98800017 	ldw	r2,0(r19)
  80390c:	b009883a 	mov	r4,r22
  803910:	980b883a 	mov	r5,r19
  803914:	1461883a 	add	r16,r2,r17
  803918:	9c000015 	stw	r16,0(r19)
  80391c:	080535c0 	call	80535c <__srefill_r>
  803920:	103ff126 	beq	r2,zero,8038e8 <_fread_r+0x80>
  803924:	d9400017 	ldw	r5,0(sp)
  803928:	bc89c83a 	sub	r4,r23,r18
  80392c:	0811a280 	call	811a28 <__udivsi3>
  803930:	1039883a 	mov	fp,r2
  803934:	e005883a 	mov	r2,fp
  803938:	dfc00a17 	ldw	ra,40(sp)
  80393c:	df000917 	ldw	fp,36(sp)
  803940:	ddc00817 	ldw	r23,32(sp)
  803944:	dd800717 	ldw	r22,28(sp)
  803948:	dd400617 	ldw	r21,24(sp)
  80394c:	dd000517 	ldw	r20,20(sp)
  803950:	dcc00417 	ldw	r19,16(sp)
  803954:	dc800317 	ldw	r18,12(sp)
  803958:	dc400217 	ldw	r17,8(sp)
  80395c:	dc000117 	ldw	r16,4(sp)
  803960:	dec00b04 	addi	sp,sp,44
  803964:	f800283a 	ret
  803968:	b825883a 	mov	r18,r23
  80396c:	8dc03536 	bltu	r17,r23,803a44 <_fread_r+0x1dc>
  803970:	99400017 	ldw	r5,0(r19)
  803974:	a009883a 	mov	r4,r20
  803978:	900d883a 	mov	r6,r18
  80397c:	08050800 	call	805080 <memcpy>
  803980:	9c000017 	ldw	r16,0(r19)
  803984:	98800117 	ldw	r2,4(r19)
  803988:	99400c17 	ldw	r5,48(r19)
  80398c:	84a1883a 	add	r16,r16,r18
  803990:	14a3c83a 	sub	r17,r2,r18
  803994:	a4ab883a 	add	r21,r20,r18
  803998:	9c400115 	stw	r17,4(r19)
  80399c:	9c000015 	stw	r16,0(r19)
  8039a0:	bca9c83a 	sub	r20,r23,r18
  8039a4:	28000826 	beq	r5,zero,8039c8 <_fread_r+0x160>
  8039a8:	a03fe226 	beq	r20,zero,803934 <_fread_r+0xcc>
  8039ac:	98801004 	addi	r2,r19,64
  8039b0:	28800326 	beq	r5,r2,8039c0 <_fread_r+0x158>
  8039b4:	b009883a 	mov	r4,r22
  8039b8:	0803be00 	call	803be0 <_free_r>
  8039bc:	9c000017 	ldw	r16,0(r19)
  8039c0:	98000c15 	stw	zero,48(r19)
  8039c4:	00000106 	br	8039cc <_fread_r+0x164>
  8039c8:	a03fda26 	beq	r20,zero,803934 <_fread_r+0xcc>
  8039cc:	9c800417 	ldw	r18,16(r19)
  8039d0:	9c400517 	ldw	r17,20(r19)
  8039d4:	9d400015 	stw	r21,0(r19)
  8039d8:	9d400415 	stw	r21,16(r19)
  8039dc:	9d000515 	stw	r20,20(r19)
  8039e0:	b009883a 	mov	r4,r22
  8039e4:	980b883a 	mov	r5,r19
  8039e8:	080535c0 	call	80535c <__srefill_r>
  8039ec:	98c00117 	ldw	r3,4(r19)
  8039f0:	9c800415 	stw	r18,16(r19)
  8039f4:	9c400515 	stw	r17,20(r19)
  8039f8:	a8eb883a 	add	r21,r21,r3
  8039fc:	9c000015 	stw	r16,0(r19)
  803a00:	a0e9c83a 	sub	r20,r20,r3
  803a04:	98000115 	stw	zero,4(r19)
  803a08:	103fef26 	beq	r2,zero,8039c8 <_fread_r+0x160>
  803a0c:	d9400017 	ldw	r5,0(sp)
  803a10:	bd09c83a 	sub	r4,r23,r20
  803a14:	0811a280 	call	811a28 <__udivsi3>
  803a18:	1039883a 	mov	fp,r2
  803a1c:	003fc506 	br	803934 <_fread_r+0xcc>
  803a20:	0039883a 	mov	fp,zero
  803a24:	003fc306 	br	803934 <_fread_r+0xcc>
  803a28:	b009883a 	mov	r4,r22
  803a2c:	080346c0 	call	80346c <__sinit>
  803a30:	9c400117 	ldw	r17,4(r19)
  803a34:	883fa60e 	bge	r17,zero,8038d0 <_fread_r+0x68>
  803a38:	0023883a 	mov	r17,zero
  803a3c:	98000115 	stw	zero,4(r19)
  803a40:	003fa306 	br	8038d0 <_fread_r+0x68>
  803a44:	8825883a 	mov	r18,r17
  803a48:	003fc906 	br	803970 <_fread_r+0x108>
  803a4c:	99400017 	ldw	r5,0(r19)
  803a50:	900d883a 	mov	r6,r18
  803a54:	08050800 	call	805080 <memcpy>
  803a58:	98c00117 	ldw	r3,4(r19)
  803a5c:	98800017 	ldw	r2,0(r19)
  803a60:	1c87c83a 	sub	r3,r3,r18
  803a64:	1485883a 	add	r2,r2,r18
  803a68:	98800015 	stw	r2,0(r19)
  803a6c:	98c00115 	stw	r3,4(r19)
  803a70:	003fb006 	br	803934 <_fread_r+0xcc>

00803a74 <fread>:
  803a74:	00802074 	movhi	r2,129
  803a78:	109c2904 	addi	r2,r2,28836
  803a7c:	2017883a 	mov	r11,r4
  803a80:	11000017 	ldw	r4,0(r2)
  803a84:	defffe04 	addi	sp,sp,-8
  803a88:	3013883a 	mov	r9,r6
  803a8c:	2805883a 	mov	r2,r5
  803a90:	d9c00015 	stw	r7,0(sp)
  803a94:	580b883a 	mov	r5,r11
  803a98:	100d883a 	mov	r6,r2
  803a9c:	480f883a 	mov	r7,r9
  803aa0:	dfc00115 	stw	ra,4(sp)
  803aa4:	08038680 	call	803868 <_fread_r>
  803aa8:	dfc00117 	ldw	ra,4(sp)
  803aac:	dec00204 	addi	sp,sp,8
  803ab0:	f800283a 	ret

00803ab4 <_malloc_trim_r>:
  803ab4:	defffb04 	addi	sp,sp,-20
  803ab8:	dcc00315 	stw	r19,12(sp)
  803abc:	04c02074 	movhi	r19,129
  803ac0:	9cd68d04 	addi	r19,r19,23092
  803ac4:	dc800215 	stw	r18,8(sp)
  803ac8:	dc400115 	stw	r17,4(sp)
  803acc:	dc000015 	stw	r16,0(sp)
  803ad0:	2823883a 	mov	r17,r5
  803ad4:	2025883a 	mov	r18,r4
  803ad8:	dfc00415 	stw	ra,16(sp)
  803adc:	08124e00 	call	8124e0 <__malloc_lock>
  803ae0:	98800217 	ldw	r2,8(r19)
  803ae4:	9009883a 	mov	r4,r18
  803ae8:	000b883a 	mov	r5,zero
  803aec:	10c00117 	ldw	r3,4(r2)
  803af0:	00bfff04 	movi	r2,-4
  803af4:	18a0703a 	and	r16,r3,r2
  803af8:	8463c83a 	sub	r17,r16,r17
  803afc:	8c43fbc4 	addi	r17,r17,4079
  803b00:	8822d33a 	srli	r17,r17,12
  803b04:	0083ffc4 	movi	r2,4095
  803b08:	8c7fffc4 	addi	r17,r17,-1
  803b0c:	8822933a 	slli	r17,r17,12
  803b10:	1440060e 	bge	r2,r17,803b2c <_malloc_trim_r+0x78>
  803b14:	080559c0 	call	80559c <_sbrk_r>
  803b18:	98c00217 	ldw	r3,8(r19)
  803b1c:	9009883a 	mov	r4,r18
  803b20:	044bc83a 	sub	r5,zero,r17
  803b24:	80c7883a 	add	r3,r16,r3
  803b28:	10c00926 	beq	r2,r3,803b50 <_malloc_trim_r+0x9c>
  803b2c:	08125000 	call	812500 <__malloc_unlock>
  803b30:	0005883a 	mov	r2,zero
  803b34:	dfc00417 	ldw	ra,16(sp)
  803b38:	dcc00317 	ldw	r19,12(sp)
  803b3c:	dc800217 	ldw	r18,8(sp)
  803b40:	dc400117 	ldw	r17,4(sp)
  803b44:	dc000017 	ldw	r16,0(sp)
  803b48:	dec00504 	addi	sp,sp,20
  803b4c:	f800283a 	ret
  803b50:	9009883a 	mov	r4,r18
  803b54:	080559c0 	call	80559c <_sbrk_r>
  803b58:	844dc83a 	sub	r6,r16,r17
  803b5c:	00ffffc4 	movi	r3,-1
  803b60:	9009883a 	mov	r4,r18
  803b64:	000b883a 	mov	r5,zero
  803b68:	01c020b4 	movhi	r7,130
  803b6c:	39e32104 	addi	r7,r7,-29564
  803b70:	31800054 	ori	r6,r6,1
  803b74:	10c00926 	beq	r2,r3,803b9c <_malloc_trim_r+0xe8>
  803b78:	38800017 	ldw	r2,0(r7)
  803b7c:	98c00217 	ldw	r3,8(r19)
  803b80:	9009883a 	mov	r4,r18
  803b84:	1445c83a 	sub	r2,r2,r17
  803b88:	38800015 	stw	r2,0(r7)
  803b8c:	19800115 	stw	r6,4(r3)
  803b90:	08125000 	call	812500 <__malloc_unlock>
  803b94:	00800044 	movi	r2,1
  803b98:	003fe606 	br	803b34 <_malloc_trim_r+0x80>
  803b9c:	080559c0 	call	80559c <_sbrk_r>
  803ba0:	99800217 	ldw	r6,8(r19)
  803ba4:	100f883a 	mov	r7,r2
  803ba8:	9009883a 	mov	r4,r18
  803bac:	1187c83a 	sub	r3,r2,r6
  803bb0:	008003c4 	movi	r2,15
  803bb4:	19400054 	ori	r5,r3,1
  803bb8:	10ffdc0e 	bge	r2,r3,803b2c <_malloc_trim_r+0x78>
  803bbc:	00802074 	movhi	r2,129
  803bc0:	109c2c04 	addi	r2,r2,28848
  803bc4:	10c00017 	ldw	r3,0(r2)
  803bc8:	008020b4 	movhi	r2,130
  803bcc:	10a32104 	addi	r2,r2,-29564
  803bd0:	31400115 	stw	r5,4(r6)
  803bd4:	38c7c83a 	sub	r3,r7,r3
  803bd8:	10c00015 	stw	r3,0(r2)
  803bdc:	003fd306 	br	803b2c <_malloc_trim_r+0x78>

00803be0 <_free_r>:
  803be0:	defffd04 	addi	sp,sp,-12
  803be4:	dc400115 	stw	r17,4(sp)
  803be8:	dc000015 	stw	r16,0(sp)
  803bec:	dfc00215 	stw	ra,8(sp)
  803bf0:	2821883a 	mov	r16,r5
  803bf4:	2023883a 	mov	r17,r4
  803bf8:	28005a26 	beq	r5,zero,803d64 <_free_r+0x184>
  803bfc:	08124e00 	call	8124e0 <__malloc_lock>
  803c00:	823ffe04 	addi	r8,r16,-8
  803c04:	41400117 	ldw	r5,4(r8)
  803c08:	00bfff84 	movi	r2,-2
  803c0c:	02802074 	movhi	r10,129
  803c10:	52968d04 	addi	r10,r10,23092
  803c14:	288e703a 	and	r7,r5,r2
  803c18:	41cd883a 	add	r6,r8,r7
  803c1c:	30c00117 	ldw	r3,4(r6)
  803c20:	51000217 	ldw	r4,8(r10)
  803c24:	00bfff04 	movi	r2,-4
  803c28:	1892703a 	and	r9,r3,r2
  803c2c:	5017883a 	mov	r11,r10
  803c30:	31006726 	beq	r6,r4,803dd0 <_free_r+0x1f0>
  803c34:	2880004c 	andi	r2,r5,1
  803c38:	1005003a 	cmpeq	r2,r2,zero
  803c3c:	32400115 	stw	r9,4(r6)
  803c40:	10001a1e 	bne	r2,zero,803cac <_free_r+0xcc>
  803c44:	000b883a 	mov	r5,zero
  803c48:	3247883a 	add	r3,r6,r9
  803c4c:	18800117 	ldw	r2,4(r3)
  803c50:	1080004c 	andi	r2,r2,1
  803c54:	1000231e 	bne	r2,zero,803ce4 <_free_r+0x104>
  803c58:	280ac03a 	cmpne	r5,r5,zero
  803c5c:	3a4f883a 	add	r7,r7,r9
  803c60:	2800451e 	bne	r5,zero,803d78 <_free_r+0x198>
  803c64:	31000217 	ldw	r4,8(r6)
  803c68:	00802074 	movhi	r2,129
  803c6c:	10968f04 	addi	r2,r2,23100
  803c70:	20807b26 	beq	r4,r2,803e60 <_free_r+0x280>
  803c74:	30800317 	ldw	r2,12(r6)
  803c78:	3a07883a 	add	r3,r7,r8
  803c7c:	19c00015 	stw	r7,0(r3)
  803c80:	11000215 	stw	r4,8(r2)
  803c84:	20800315 	stw	r2,12(r4)
  803c88:	38800054 	ori	r2,r7,1
  803c8c:	40800115 	stw	r2,4(r8)
  803c90:	28001a26 	beq	r5,zero,803cfc <_free_r+0x11c>
  803c94:	8809883a 	mov	r4,r17
  803c98:	dfc00217 	ldw	ra,8(sp)
  803c9c:	dc400117 	ldw	r17,4(sp)
  803ca0:	dc000017 	ldw	r16,0(sp)
  803ca4:	dec00304 	addi	sp,sp,12
  803ca8:	08125001 	jmpi	812500 <__malloc_unlock>
  803cac:	80bffe17 	ldw	r2,-8(r16)
  803cb0:	50c00204 	addi	r3,r10,8
  803cb4:	4091c83a 	sub	r8,r8,r2
  803cb8:	41000217 	ldw	r4,8(r8)
  803cbc:	388f883a 	add	r7,r7,r2
  803cc0:	20c06126 	beq	r4,r3,803e48 <_free_r+0x268>
  803cc4:	40800317 	ldw	r2,12(r8)
  803cc8:	3247883a 	add	r3,r6,r9
  803ccc:	000b883a 	mov	r5,zero
  803cd0:	11000215 	stw	r4,8(r2)
  803cd4:	20800315 	stw	r2,12(r4)
  803cd8:	18800117 	ldw	r2,4(r3)
  803cdc:	1080004c 	andi	r2,r2,1
  803ce0:	103fdd26 	beq	r2,zero,803c58 <_free_r+0x78>
  803ce4:	38800054 	ori	r2,r7,1
  803ce8:	3a07883a 	add	r3,r7,r8
  803cec:	280ac03a 	cmpne	r5,r5,zero
  803cf0:	40800115 	stw	r2,4(r8)
  803cf4:	19c00015 	stw	r7,0(r3)
  803cf8:	283fe61e 	bne	r5,zero,803c94 <_free_r+0xb4>
  803cfc:	00807fc4 	movi	r2,511
  803d00:	11c01f2e 	bgeu	r2,r7,803d80 <_free_r+0x1a0>
  803d04:	3806d27a 	srli	r3,r7,9
  803d08:	1800481e 	bne	r3,zero,803e2c <_free_r+0x24c>
  803d0c:	3804d0fa 	srli	r2,r7,3
  803d10:	100690fa 	slli	r3,r2,3
  803d14:	1acd883a 	add	r6,r3,r11
  803d18:	31400217 	ldw	r5,8(r6)
  803d1c:	31405926 	beq	r6,r5,803e84 <_free_r+0x2a4>
  803d20:	28800117 	ldw	r2,4(r5)
  803d24:	00ffff04 	movi	r3,-4
  803d28:	10c4703a 	and	r2,r2,r3
  803d2c:	3880022e 	bgeu	r7,r2,803d38 <_free_r+0x158>
  803d30:	29400217 	ldw	r5,8(r5)
  803d34:	317ffa1e 	bne	r6,r5,803d20 <_free_r+0x140>
  803d38:	29800317 	ldw	r6,12(r5)
  803d3c:	41800315 	stw	r6,12(r8)
  803d40:	41400215 	stw	r5,8(r8)
  803d44:	8809883a 	mov	r4,r17
  803d48:	2a000315 	stw	r8,12(r5)
  803d4c:	32000215 	stw	r8,8(r6)
  803d50:	dfc00217 	ldw	ra,8(sp)
  803d54:	dc400117 	ldw	r17,4(sp)
  803d58:	dc000017 	ldw	r16,0(sp)
  803d5c:	dec00304 	addi	sp,sp,12
  803d60:	08125001 	jmpi	812500 <__malloc_unlock>
  803d64:	dfc00217 	ldw	ra,8(sp)
  803d68:	dc400117 	ldw	r17,4(sp)
  803d6c:	dc000017 	ldw	r16,0(sp)
  803d70:	dec00304 	addi	sp,sp,12
  803d74:	f800283a 	ret
  803d78:	31000217 	ldw	r4,8(r6)
  803d7c:	003fbd06 	br	803c74 <_free_r+0x94>
  803d80:	3806d0fa 	srli	r3,r7,3
  803d84:	00800044 	movi	r2,1
  803d88:	51400117 	ldw	r5,4(r10)
  803d8c:	180890fa 	slli	r4,r3,3
  803d90:	1807d0ba 	srai	r3,r3,2
  803d94:	22c9883a 	add	r4,r4,r11
  803d98:	21800217 	ldw	r6,8(r4)
  803d9c:	10c4983a 	sll	r2,r2,r3
  803da0:	41000315 	stw	r4,12(r8)
  803da4:	41800215 	stw	r6,8(r8)
  803da8:	288ab03a 	or	r5,r5,r2
  803dac:	22000215 	stw	r8,8(r4)
  803db0:	8809883a 	mov	r4,r17
  803db4:	51400115 	stw	r5,4(r10)
  803db8:	32000315 	stw	r8,12(r6)
  803dbc:	dfc00217 	ldw	ra,8(sp)
  803dc0:	dc400117 	ldw	r17,4(sp)
  803dc4:	dc000017 	ldw	r16,0(sp)
  803dc8:	dec00304 	addi	sp,sp,12
  803dcc:	08125001 	jmpi	812500 <__malloc_unlock>
  803dd0:	2880004c 	andi	r2,r5,1
  803dd4:	3a4d883a 	add	r6,r7,r9
  803dd8:	1000071e 	bne	r2,zero,803df8 <_free_r+0x218>
  803ddc:	80bffe17 	ldw	r2,-8(r16)
  803de0:	4091c83a 	sub	r8,r8,r2
  803de4:	41000317 	ldw	r4,12(r8)
  803de8:	40c00217 	ldw	r3,8(r8)
  803dec:	308d883a 	add	r6,r6,r2
  803df0:	20c00215 	stw	r3,8(r4)
  803df4:	19000315 	stw	r4,12(r3)
  803df8:	00802074 	movhi	r2,129
  803dfc:	109c2b04 	addi	r2,r2,28844
  803e00:	11000017 	ldw	r4,0(r2)
  803e04:	30c00054 	ori	r3,r6,1
  803e08:	52000215 	stw	r8,8(r10)
  803e0c:	40c00115 	stw	r3,4(r8)
  803e10:	313fa036 	bltu	r6,r4,803c94 <_free_r+0xb4>
  803e14:	008020b4 	movhi	r2,130
  803e18:	10a31304 	addi	r2,r2,-29620
  803e1c:	11400017 	ldw	r5,0(r2)
  803e20:	8809883a 	mov	r4,r17
  803e24:	0803ab40 	call	803ab4 <_malloc_trim_r>
  803e28:	003f9a06 	br	803c94 <_free_r+0xb4>
  803e2c:	00800104 	movi	r2,4
  803e30:	10c0072e 	bgeu	r2,r3,803e50 <_free_r+0x270>
  803e34:	00800504 	movi	r2,20
  803e38:	10c01936 	bltu	r2,r3,803ea0 <_free_r+0x2c0>
  803e3c:	188016c4 	addi	r2,r3,91
  803e40:	100690fa 	slli	r3,r2,3
  803e44:	003fb306 	br	803d14 <_free_r+0x134>
  803e48:	01400044 	movi	r5,1
  803e4c:	003f7e06 	br	803c48 <_free_r+0x68>
  803e50:	3804d1ba 	srli	r2,r7,6
  803e54:	10800e04 	addi	r2,r2,56
  803e58:	100690fa 	slli	r3,r2,3
  803e5c:	003fad06 	br	803d14 <_free_r+0x134>
  803e60:	22000315 	stw	r8,12(r4)
  803e64:	22000215 	stw	r8,8(r4)
  803e68:	3a05883a 	add	r2,r7,r8
  803e6c:	38c00054 	ori	r3,r7,1
  803e70:	11c00015 	stw	r7,0(r2)
  803e74:	41000215 	stw	r4,8(r8)
  803e78:	40c00115 	stw	r3,4(r8)
  803e7c:	41000315 	stw	r4,12(r8)
  803e80:	003f8406 	br	803c94 <_free_r+0xb4>
  803e84:	1005d0ba 	srai	r2,r2,2
  803e88:	00c00044 	movi	r3,1
  803e8c:	51000117 	ldw	r4,4(r10)
  803e90:	1886983a 	sll	r3,r3,r2
  803e94:	20c8b03a 	or	r4,r4,r3
  803e98:	51000115 	stw	r4,4(r10)
  803e9c:	003fa706 	br	803d3c <_free_r+0x15c>
  803ea0:	00801504 	movi	r2,84
  803ea4:	10c00436 	bltu	r2,r3,803eb8 <_free_r+0x2d8>
  803ea8:	3804d33a 	srli	r2,r7,12
  803eac:	10801b84 	addi	r2,r2,110
  803eb0:	100690fa 	slli	r3,r2,3
  803eb4:	003f9706 	br	803d14 <_free_r+0x134>
  803eb8:	00805504 	movi	r2,340
  803ebc:	10c00436 	bltu	r2,r3,803ed0 <_free_r+0x2f0>
  803ec0:	3804d3fa 	srli	r2,r7,15
  803ec4:	10801dc4 	addi	r2,r2,119
  803ec8:	100690fa 	slli	r3,r2,3
  803ecc:	003f9106 	br	803d14 <_free_r+0x134>
  803ed0:	00815504 	movi	r2,1364
  803ed4:	10c0032e 	bgeu	r2,r3,803ee4 <_free_r+0x304>
  803ed8:	00801f84 	movi	r2,126
  803edc:	00c0fc04 	movi	r3,1008
  803ee0:	003f8c06 	br	803d14 <_free_r+0x134>
  803ee4:	3804d4ba 	srli	r2,r7,18
  803ee8:	10801f04 	addi	r2,r2,124
  803eec:	100690fa 	slli	r3,r2,3
  803ef0:	003f8806 	br	803d14 <_free_r+0x134>

00803ef4 <_fscanf_r>:
  803ef4:	defffd04 	addi	sp,sp,-12
  803ef8:	dfc00115 	stw	ra,4(sp)
  803efc:	d9c00215 	stw	r7,8(sp)
  803f00:	d8800204 	addi	r2,sp,8
  803f04:	100f883a 	mov	r7,r2
  803f08:	d8800015 	stw	r2,0(sp)
  803f0c:	0807bac0 	call	807bac <__svfscanf_r>
  803f10:	dfc00117 	ldw	ra,4(sp)
  803f14:	dec00304 	addi	sp,sp,12
  803f18:	f800283a 	ret

00803f1c <fscanf>:
  803f1c:	defffc04 	addi	sp,sp,-16
  803f20:	2007883a 	mov	r3,r4
  803f24:	dfc00115 	stw	ra,4(sp)
  803f28:	d9800215 	stw	r6,8(sp)
  803f2c:	d9c00315 	stw	r7,12(sp)
  803f30:	01802074 	movhi	r6,129
  803f34:	319c2904 	addi	r6,r6,28836
  803f38:	31000017 	ldw	r4,0(r6)
  803f3c:	d8800204 	addi	r2,sp,8
  803f40:	280d883a 	mov	r6,r5
  803f44:	100f883a 	mov	r7,r2
  803f48:	180b883a 	mov	r5,r3
  803f4c:	d8800015 	stw	r2,0(sp)
  803f50:	0807bac0 	call	807bac <__svfscanf_r>
  803f54:	dfc00117 	ldw	ra,4(sp)
  803f58:	dec00404 	addi	sp,sp,16
  803f5c:	f800283a 	ret

00803f60 <_fseek_r>:
  803f60:	deffe804 	addi	sp,sp,-96
  803f64:	dd801515 	stw	r22,84(sp)
  803f68:	dcc01215 	stw	r19,72(sp)
  803f6c:	dc801115 	stw	r18,68(sp)
  803f70:	dc000f15 	stw	r16,60(sp)
  803f74:	dfc01715 	stw	ra,92(sp)
  803f78:	ddc01615 	stw	r23,88(sp)
  803f7c:	dd401415 	stw	r21,80(sp)
  803f80:	dd001315 	stw	r20,76(sp)
  803f84:	dc401015 	stw	r17,64(sp)
  803f88:	2025883a 	mov	r18,r4
  803f8c:	2821883a 	mov	r16,r5
  803f90:	302d883a 	mov	r22,r6
  803f94:	3827883a 	mov	r19,r7
  803f98:	20000226 	beq	r4,zero,803fa4 <_fseek_r+0x44>
  803f9c:	20800e17 	ldw	r2,56(r4)
  803fa0:	10007826 	beq	r2,zero,804184 <_fseek_r+0x224>
  803fa4:	8080030b 	ldhu	r2,12(r16)
  803fa8:	00c04204 	movi	r3,264
  803fac:	1080420c 	andi	r2,r2,264
  803fb0:	10c07926 	beq	r2,r3,804198 <_fseek_r+0x238>
  803fb4:	85400a17 	ldw	r21,40(r16)
  803fb8:	a800ea26 	beq	r21,zero,804364 <_fseek_r+0x404>
  803fbc:	00800044 	movi	r2,1
  803fc0:	98805f26 	beq	r19,r2,804140 <_fseek_r+0x1e0>
  803fc4:	00800084 	movi	r2,2
  803fc8:	98801026 	beq	r19,r2,80400c <_fseek_r+0xac>
  803fcc:	98000f26 	beq	r19,zero,80400c <_fseek_r+0xac>
  803fd0:	00800584 	movi	r2,22
  803fd4:	013fffc4 	movi	r4,-1
  803fd8:	90800015 	stw	r2,0(r18)
  803fdc:	2005883a 	mov	r2,r4
  803fe0:	dfc01717 	ldw	ra,92(sp)
  803fe4:	ddc01617 	ldw	r23,88(sp)
  803fe8:	dd801517 	ldw	r22,84(sp)
  803fec:	dd401417 	ldw	r21,80(sp)
  803ff0:	dd001317 	ldw	r20,76(sp)
  803ff4:	dcc01217 	ldw	r19,72(sp)
  803ff8:	dc801117 	ldw	r18,68(sp)
  803ffc:	dc401017 	ldw	r17,64(sp)
  804000:	dc000f17 	ldw	r16,60(sp)
  804004:	dec01804 	addi	sp,sp,96
  804008:	f800283a 	ret
  80400c:	81800417 	ldw	r6,16(r16)
  804010:	0023883a 	mov	r17,zero
  804014:	002f883a 	mov	r23,zero
  804018:	3000a626 	beq	r6,zero,8042b4 <_fseek_r+0x354>
  80401c:	8100030b 	ldhu	r4,12(r16)
  804020:	2082068c 	andi	r2,r4,2074
  804024:	1000081e 	bne	r2,zero,804048 <_fseek_r+0xe8>
  804028:	2081000c 	andi	r2,r4,1024
  80402c:	10001b1e 	bne	r2,zero,80409c <_fseek_r+0x13c>
  804030:	00802034 	movhi	r2,128
  804034:	1095ca04 	addi	r2,r2,22312
  804038:	a8800926 	beq	r21,r2,804060 <_fseek_r+0x100>
  80403c:	8080030b 	ldhu	r2,12(r16)
  804040:	10820014 	ori	r2,r2,2048
  804044:	8080030d 	sth	r2,12(r16)
  804048:	9009883a 	mov	r4,r18
  80404c:	800b883a 	mov	r5,r16
  804050:	0802f400 	call	802f40 <_fflush_r>
  804054:	1000a326 	beq	r2,zero,8042e4 <_fseek_r+0x384>
  804058:	013fffc4 	movi	r4,-1
  80405c:	003fdf06 	br	803fdc <_fseek_r+0x7c>
  804060:	8140038f 	ldh	r5,14(r16)
  804064:	283ff516 	blt	r5,zero,80403c <_fseek_r+0xdc>
  804068:	9009883a 	mov	r4,r18
  80406c:	d80d883a 	mov	r6,sp
  804070:	08043c00 	call	8043c0 <_fstat_r>
  804074:	103ff11e 	bne	r2,zero,80403c <_fseek_r+0xdc>
  804078:	d8800117 	ldw	r2,4(sp)
  80407c:	00e00014 	movui	r3,32768
  804080:	10bc000c 	andi	r2,r2,61440
  804084:	10ffed1e 	bne	r2,r3,80403c <_fseek_r+0xdc>
  804088:	80c0030b 	ldhu	r3,12(r16)
  80408c:	00810004 	movi	r2,1024
  804090:	80801315 	stw	r2,76(r16)
  804094:	1886b03a 	or	r3,r3,r2
  804098:	80c0030d 	sth	r3,12(r16)
  80409c:	9800701e 	bne	r19,zero,804260 <_fseek_r+0x300>
  8040a0:	b029883a 	mov	r20,r22
  8040a4:	b804c03a 	cmpne	r2,r23,zero
  8040a8:	10003f1e 	bne	r2,zero,8041a8 <_fseek_r+0x248>
  8040ac:	8100030b 	ldhu	r4,12(r16)
  8040b0:	2084000c 	andi	r2,r4,4096
  8040b4:	1000a126 	beq	r2,zero,80433c <_fseek_r+0x3dc>
  8040b8:	81801417 	ldw	r6,80(r16)
  8040bc:	80c00117 	ldw	r3,4(r16)
  8040c0:	81400c17 	ldw	r5,48(r16)
  8040c4:	30e3c83a 	sub	r17,r6,r3
  8040c8:	28008026 	beq	r5,zero,8042cc <_fseek_r+0x36c>
  8040cc:	81c00f17 	ldw	r7,60(r16)
  8040d0:	89e3c83a 	sub	r17,r17,r7
  8040d4:	80800e17 	ldw	r2,56(r16)
  8040d8:	81800417 	ldw	r6,16(r16)
  8040dc:	88c7883a 	add	r3,r17,r3
  8040e0:	1185c83a 	sub	r2,r2,r6
  8040e4:	11cf883a 	add	r7,r2,r7
  8040e8:	1887c83a 	sub	r3,r3,r2
  8040ec:	2088000c 	andi	r2,r4,8192
  8040f0:	10003e1e 	bne	r2,zero,8041ec <_fseek_r+0x28c>
  8040f4:	a0c03d16 	blt	r20,r3,8041ec <_fseek_r+0x28c>
  8040f8:	38c5883a 	add	r2,r7,r3
  8040fc:	a0803b2e 	bgeu	r20,r2,8041ec <_fseek_r+0x28c>
  804100:	a0c5c83a 	sub	r2,r20,r3
  804104:	3887c83a 	sub	r3,r7,r2
  804108:	3085883a 	add	r2,r6,r2
  80410c:	80800015 	stw	r2,0(r16)
  804110:	80c00115 	stw	r3,4(r16)
  804114:	28000526 	beq	r5,zero,80412c <_fseek_r+0x1cc>
  804118:	80801004 	addi	r2,r16,64
  80411c:	28800226 	beq	r5,r2,804128 <_fseek_r+0x1c8>
  804120:	9009883a 	mov	r4,r18
  804124:	0803be00 	call	803be0 <_free_r>
  804128:	80000c15 	stw	zero,48(r16)
  80412c:	8080030b 	ldhu	r2,12(r16)
  804130:	0009883a 	mov	r4,zero
  804134:	10bff7cc 	andi	r2,r2,65503
  804138:	8080030d 	sth	r2,12(r16)
  80413c:	003fa706 	br	803fdc <_fseek_r+0x7c>
  804140:	9009883a 	mov	r4,r18
  804144:	800b883a 	mov	r5,r16
  804148:	0802f400 	call	802f40 <_fflush_r>
  80414c:	8100030b 	ldhu	r4,12(r16)
  804150:	2084000c 	andi	r2,r4,4096
  804154:	10008726 	beq	r2,zero,804374 <_fseek_r+0x414>
  804158:	84401417 	ldw	r17,80(r16)
  80415c:	2080010c 	andi	r2,r4,4
  804160:	1000171e 	bne	r2,zero,8041c0 <_fseek_r+0x260>
  804164:	2080020c 	andi	r2,r4,8
  804168:	10003b26 	beq	r2,zero,804258 <_fseek_r+0x2f8>
  80416c:	80800017 	ldw	r2,0(r16)
  804170:	10003926 	beq	r2,zero,804258 <_fseek_r+0x2f8>
  804174:	81800417 	ldw	r6,16(r16)
  804178:	1185c83a 	sub	r2,r2,r6
  80417c:	88a3883a 	add	r17,r17,r2
  804180:	00001606 	br	8041dc <_fseek_r+0x27c>
  804184:	080346c0 	call	80346c <__sinit>
  804188:	8080030b 	ldhu	r2,12(r16)
  80418c:	00c04204 	movi	r3,264
  804190:	1080420c 	andi	r2,r2,264
  804194:	10ff871e 	bne	r2,r3,803fb4 <_fseek_r+0x54>
  804198:	9009883a 	mov	r4,r18
  80419c:	800b883a 	mov	r5,r16
  8041a0:	0802f400 	call	802f40 <_fflush_r>
  8041a4:	003f8306 	br	803fb4 <_fseek_r+0x54>
  8041a8:	81400c17 	ldw	r5,48(r16)
  8041ac:	28004526 	beq	r5,zero,8042c4 <_fseek_r+0x364>
  8041b0:	8100030b 	ldhu	r4,12(r16)
  8041b4:	80c00117 	ldw	r3,4(r16)
  8041b8:	81c00f17 	ldw	r7,60(r16)
  8041bc:	003fc506 	br	8040d4 <_fseek_r+0x174>
  8041c0:	80c00117 	ldw	r3,4(r16)
  8041c4:	80800c17 	ldw	r2,48(r16)
  8041c8:	88e3c83a 	sub	r17,r17,r3
  8041cc:	10002226 	beq	r2,zero,804258 <_fseek_r+0x2f8>
  8041d0:	81c00f17 	ldw	r7,60(r16)
  8041d4:	81800417 	ldw	r6,16(r16)
  8041d8:	89e3c83a 	sub	r17,r17,r7
  8041dc:	b46d883a 	add	r22,r22,r17
  8041e0:	0027883a 	mov	r19,zero
  8041e4:	05c00044 	movi	r23,1
  8041e8:	003f8b06 	br	804018 <_fseek_r+0xb8>
  8041ec:	80801317 	ldw	r2,76(r16)
  8041f0:	81400717 	ldw	r5,28(r16)
  8041f4:	9009883a 	mov	r4,r18
  8041f8:	0085c83a 	sub	r2,zero,r2
  8041fc:	a0a2703a 	and	r17,r20,r2
  804200:	880d883a 	mov	r6,r17
  804204:	000f883a 	mov	r7,zero
  804208:	a83ee83a 	callr	r21
  80420c:	00ffffc4 	movi	r3,-1
  804210:	10ff8d26 	beq	r2,r3,804048 <_fseek_r+0xe8>
  804214:	80800417 	ldw	r2,16(r16)
  804218:	81400c17 	ldw	r5,48(r16)
  80421c:	80000115 	stw	zero,4(r16)
  804220:	80800015 	stw	r2,0(r16)
  804224:	28000526 	beq	r5,zero,80423c <_fseek_r+0x2dc>
  804228:	80801004 	addi	r2,r16,64
  80422c:	28800226 	beq	r5,r2,804238 <_fseek_r+0x2d8>
  804230:	9009883a 	mov	r4,r18
  804234:	0803be00 	call	803be0 <_free_r>
  804238:	80000c15 	stw	zero,48(r16)
  80423c:	8080030b 	ldhu	r2,12(r16)
  804240:	a463c83a 	sub	r17,r20,r17
  804244:	10bff7cc 	andi	r2,r2,65503
  804248:	8080030d 	sth	r2,12(r16)
  80424c:	88000c1e 	bne	r17,zero,804280 <_fseek_r+0x320>
  804250:	0009883a 	mov	r4,zero
  804254:	003f6106 	br	803fdc <_fseek_r+0x7c>
  804258:	81800417 	ldw	r6,16(r16)
  80425c:	003fdf06 	br	8041dc <_fseek_r+0x27c>
  804260:	8140038f 	ldh	r5,14(r16)
  804264:	9009883a 	mov	r4,r18
  804268:	d80d883a 	mov	r6,sp
  80426c:	08043c00 	call	8043c0 <_fstat_r>
  804270:	103f751e 	bne	r2,zero,804048 <_fseek_r+0xe8>
  804274:	d8800417 	ldw	r2,16(sp)
  804278:	b0a9883a 	add	r20,r22,r2
  80427c:	003f8906 	br	8040a4 <_fseek_r+0x144>
  804280:	9009883a 	mov	r4,r18
  804284:	800b883a 	mov	r5,r16
  804288:	080535c0 	call	80535c <__srefill_r>
  80428c:	103f6e1e 	bne	r2,zero,804048 <_fseek_r+0xe8>
  804290:	80c00117 	ldw	r3,4(r16)
  804294:	1c7f6c36 	bltu	r3,r17,804048 <_fseek_r+0xe8>
  804298:	80800017 	ldw	r2,0(r16)
  80429c:	1c47c83a 	sub	r3,r3,r17
  8042a0:	0009883a 	mov	r4,zero
  8042a4:	1445883a 	add	r2,r2,r17
  8042a8:	80c00115 	stw	r3,4(r16)
  8042ac:	80800015 	stw	r2,0(r16)
  8042b0:	003f4a06 	br	803fdc <_fseek_r+0x7c>
  8042b4:	9009883a 	mov	r4,r18
  8042b8:	800b883a 	mov	r5,r16
  8042bc:	08046a00 	call	8046a0 <__smakebuf_r>
  8042c0:	003f5606 	br	80401c <_fseek_r+0xbc>
  8042c4:	8100030b 	ldhu	r4,12(r16)
  8042c8:	80c00117 	ldw	r3,4(r16)
  8042cc:	80800017 	ldw	r2,0(r16)
  8042d0:	81800417 	ldw	r6,16(r16)
  8042d4:	1185c83a 	sub	r2,r2,r6
  8042d8:	10cf883a 	add	r7,r2,r3
  8042dc:	8887c83a 	sub	r3,r17,r2
  8042e0:	003f8206 	br	8040ec <_fseek_r+0x18c>
  8042e4:	81400717 	ldw	r5,28(r16)
  8042e8:	b00d883a 	mov	r6,r22
  8042ec:	980f883a 	mov	r7,r19
  8042f0:	9009883a 	mov	r4,r18
  8042f4:	a83ee83a 	callr	r21
  8042f8:	00ffffc4 	movi	r3,-1
  8042fc:	10ff5626 	beq	r2,r3,804058 <_fseek_r+0xf8>
  804300:	81400c17 	ldw	r5,48(r16)
  804304:	28000526 	beq	r5,zero,80431c <_fseek_r+0x3bc>
  804308:	80801004 	addi	r2,r16,64
  80430c:	28800226 	beq	r5,r2,804318 <_fseek_r+0x3b8>
  804310:	9009883a 	mov	r4,r18
  804314:	0803be00 	call	803be0 <_free_r>
  804318:	80000c15 	stw	zero,48(r16)
  80431c:	8080030b 	ldhu	r2,12(r16)
  804320:	80c00417 	ldw	r3,16(r16)
  804324:	0009883a 	mov	r4,zero
  804328:	10bdf7cc 	andi	r2,r2,63455
  80432c:	8080030d 	sth	r2,12(r16)
  804330:	80c00015 	stw	r3,0(r16)
  804334:	80000115 	stw	zero,4(r16)
  804338:	003f2806 	br	803fdc <_fseek_r+0x7c>
  80433c:	81400717 	ldw	r5,28(r16)
  804340:	000d883a 	mov	r6,zero
  804344:	9009883a 	mov	r4,r18
  804348:	01c00044 	movi	r7,1
  80434c:	a83ee83a 	callr	r21
  804350:	100d883a 	mov	r6,r2
  804354:	00bfffc4 	movi	r2,-1
  804358:	30bf3b26 	beq	r6,r2,804048 <_fseek_r+0xe8>
  80435c:	8100030b 	ldhu	r4,12(r16)
  804360:	003f5606 	br	8040bc <_fseek_r+0x15c>
  804364:	00800744 	movi	r2,29
  804368:	013fffc4 	movi	r4,-1
  80436c:	90800015 	stw	r2,0(r18)
  804370:	003f1a06 	br	803fdc <_fseek_r+0x7c>
  804374:	81400717 	ldw	r5,28(r16)
  804378:	980f883a 	mov	r7,r19
  80437c:	9009883a 	mov	r4,r18
  804380:	000d883a 	mov	r6,zero
  804384:	a83ee83a 	callr	r21
  804388:	1023883a 	mov	r17,r2
  80438c:	00bfffc4 	movi	r2,-1
  804390:	88bf3126 	beq	r17,r2,804058 <_fseek_r+0xf8>
  804394:	8100030b 	ldhu	r4,12(r16)
  804398:	003f7006 	br	80415c <_fseek_r+0x1fc>

0080439c <fseek>:
  80439c:	00802074 	movhi	r2,129
  8043a0:	109c2904 	addi	r2,r2,28836
  8043a4:	2013883a 	mov	r9,r4
  8043a8:	11000017 	ldw	r4,0(r2)
  8043ac:	2805883a 	mov	r2,r5
  8043b0:	300f883a 	mov	r7,r6
  8043b4:	480b883a 	mov	r5,r9
  8043b8:	100d883a 	mov	r6,r2
  8043bc:	0803f601 	jmpi	803f60 <_fseek_r>

008043c0 <_fstat_r>:
  8043c0:	defffd04 	addi	sp,sp,-12
  8043c4:	dc000015 	stw	r16,0(sp)
  8043c8:	040020b4 	movhi	r16,130
  8043cc:	84231204 	addi	r16,r16,-29624
  8043d0:	dc400115 	stw	r17,4(sp)
  8043d4:	80000015 	stw	zero,0(r16)
  8043d8:	2023883a 	mov	r17,r4
  8043dc:	2809883a 	mov	r4,r5
  8043e0:	300b883a 	mov	r5,r6
  8043e4:	dfc00215 	stw	ra,8(sp)
  8043e8:	0811fe80 	call	811fe8 <fstat>
  8043ec:	1007883a 	mov	r3,r2
  8043f0:	00bfffc4 	movi	r2,-1
  8043f4:	18800626 	beq	r3,r2,804410 <_fstat_r+0x50>
  8043f8:	1805883a 	mov	r2,r3
  8043fc:	dfc00217 	ldw	ra,8(sp)
  804400:	dc400117 	ldw	r17,4(sp)
  804404:	dc000017 	ldw	r16,0(sp)
  804408:	dec00304 	addi	sp,sp,12
  80440c:	f800283a 	ret
  804410:	80800017 	ldw	r2,0(r16)
  804414:	103ff826 	beq	r2,zero,8043f8 <_fstat_r+0x38>
  804418:	88800015 	stw	r2,0(r17)
  80441c:	1805883a 	mov	r2,r3
  804420:	dfc00217 	ldw	ra,8(sp)
  804424:	dc400117 	ldw	r17,4(sp)
  804428:	dc000017 	ldw	r16,0(sp)
  80442c:	dec00304 	addi	sp,sp,12
  804430:	f800283a 	ret

00804434 <_fwalk_reent>:
  804434:	defff704 	addi	sp,sp,-36
  804438:	dcc00315 	stw	r19,12(sp)
  80443c:	24c0b804 	addi	r19,r4,736
  804440:	dd800615 	stw	r22,24(sp)
  804444:	dd400515 	stw	r21,20(sp)
  804448:	dfc00815 	stw	ra,32(sp)
  80444c:	ddc00715 	stw	r23,28(sp)
  804450:	dd000415 	stw	r20,16(sp)
  804454:	dc800215 	stw	r18,8(sp)
  804458:	dc400115 	stw	r17,4(sp)
  80445c:	dc000015 	stw	r16,0(sp)
  804460:	202b883a 	mov	r21,r4
  804464:	282d883a 	mov	r22,r5
  804468:	080345c0 	call	80345c <__sfp_lock_acquire>
  80446c:	98002126 	beq	r19,zero,8044f4 <_fwalk_reent+0xc0>
  804470:	002f883a 	mov	r23,zero
  804474:	9c800117 	ldw	r18,4(r19)
  804478:	9c000217 	ldw	r16,8(r19)
  80447c:	90bfffc4 	addi	r2,r18,-1
  804480:	10000d16 	blt	r2,zero,8044b8 <_fwalk_reent+0x84>
  804484:	0023883a 	mov	r17,zero
  804488:	053fffc4 	movi	r20,-1
  80448c:	8080030f 	ldh	r2,12(r16)
  804490:	8c400044 	addi	r17,r17,1
  804494:	10000626 	beq	r2,zero,8044b0 <_fwalk_reent+0x7c>
  804498:	8080038f 	ldh	r2,14(r16)
  80449c:	800b883a 	mov	r5,r16
  8044a0:	a809883a 	mov	r4,r21
  8044a4:	15000226 	beq	r2,r20,8044b0 <_fwalk_reent+0x7c>
  8044a8:	b03ee83a 	callr	r22
  8044ac:	b8aeb03a 	or	r23,r23,r2
  8044b0:	84001704 	addi	r16,r16,92
  8044b4:	947ff51e 	bne	r18,r17,80448c <_fwalk_reent+0x58>
  8044b8:	9cc00017 	ldw	r19,0(r19)
  8044bc:	983fed1e 	bne	r19,zero,804474 <_fwalk_reent+0x40>
  8044c0:	08034600 	call	803460 <__sfp_lock_release>
  8044c4:	b805883a 	mov	r2,r23
  8044c8:	dfc00817 	ldw	ra,32(sp)
  8044cc:	ddc00717 	ldw	r23,28(sp)
  8044d0:	dd800617 	ldw	r22,24(sp)
  8044d4:	dd400517 	ldw	r21,20(sp)
  8044d8:	dd000417 	ldw	r20,16(sp)
  8044dc:	dcc00317 	ldw	r19,12(sp)
  8044e0:	dc800217 	ldw	r18,8(sp)
  8044e4:	dc400117 	ldw	r17,4(sp)
  8044e8:	dc000017 	ldw	r16,0(sp)
  8044ec:	dec00904 	addi	sp,sp,36
  8044f0:	f800283a 	ret
  8044f4:	002f883a 	mov	r23,zero
  8044f8:	003ff106 	br	8044c0 <_fwalk_reent+0x8c>

008044fc <_fwalk>:
  8044fc:	defff804 	addi	sp,sp,-32
  804500:	dcc00315 	stw	r19,12(sp)
  804504:	24c0b804 	addi	r19,r4,736
  804508:	dd400515 	stw	r21,20(sp)
  80450c:	dfc00715 	stw	ra,28(sp)
  804510:	dd800615 	stw	r22,24(sp)
  804514:	dd000415 	stw	r20,16(sp)
  804518:	dc800215 	stw	r18,8(sp)
  80451c:	dc400115 	stw	r17,4(sp)
  804520:	dc000015 	stw	r16,0(sp)
  804524:	282b883a 	mov	r21,r5
  804528:	080345c0 	call	80345c <__sfp_lock_acquire>
  80452c:	98001f26 	beq	r19,zero,8045ac <_fwalk+0xb0>
  804530:	002d883a 	mov	r22,zero
  804534:	9c800117 	ldw	r18,4(r19)
  804538:	9c000217 	ldw	r16,8(r19)
  80453c:	90bfffc4 	addi	r2,r18,-1
  804540:	10000c16 	blt	r2,zero,804574 <_fwalk+0x78>
  804544:	0023883a 	mov	r17,zero
  804548:	053fffc4 	movi	r20,-1
  80454c:	8080030f 	ldh	r2,12(r16)
  804550:	8c400044 	addi	r17,r17,1
  804554:	10000526 	beq	r2,zero,80456c <_fwalk+0x70>
  804558:	8080038f 	ldh	r2,14(r16)
  80455c:	8009883a 	mov	r4,r16
  804560:	15000226 	beq	r2,r20,80456c <_fwalk+0x70>
  804564:	a83ee83a 	callr	r21
  804568:	b0acb03a 	or	r22,r22,r2
  80456c:	84001704 	addi	r16,r16,92
  804570:	947ff61e 	bne	r18,r17,80454c <_fwalk+0x50>
  804574:	9cc00017 	ldw	r19,0(r19)
  804578:	983fee1e 	bne	r19,zero,804534 <_fwalk+0x38>
  80457c:	08034600 	call	803460 <__sfp_lock_release>
  804580:	b005883a 	mov	r2,r22
  804584:	dfc00717 	ldw	ra,28(sp)
  804588:	dd800617 	ldw	r22,24(sp)
  80458c:	dd400517 	ldw	r21,20(sp)
  804590:	dd000417 	ldw	r20,16(sp)
  804594:	dcc00317 	ldw	r19,12(sp)
  804598:	dc800217 	ldw	r18,8(sp)
  80459c:	dc400117 	ldw	r17,4(sp)
  8045a0:	dc000017 	ldw	r16,0(sp)
  8045a4:	dec00804 	addi	sp,sp,32
  8045a8:	f800283a 	ret
  8045ac:	002d883a 	mov	r22,zero
  8045b0:	003ff206 	br	80457c <_fwalk+0x80>

008045b4 <_fwrite_r>:
  8045b4:	defff604 	addi	sp,sp,-40
  8045b8:	dc000515 	stw	r16,20(sp)
  8045bc:	d9400015 	stw	r5,0(sp)
  8045c0:	2021883a 	mov	r16,r4
  8045c4:	300b883a 	mov	r5,r6
  8045c8:	3809883a 	mov	r4,r7
  8045cc:	dcc00815 	stw	r19,32(sp)
  8045d0:	dc800715 	stw	r18,28(sp)
  8045d4:	dc400615 	stw	r17,24(sp)
  8045d8:	dfc00915 	stw	ra,36(sp)
  8045dc:	3825883a 	mov	r18,r7
  8045e0:	3027883a 	mov	r19,r6
  8045e4:	08027a80 	call	8027a8 <__mulsi3>
  8045e8:	1023883a 	mov	r17,r2
  8045ec:	00800044 	movi	r2,1
  8045f0:	d8800315 	stw	r2,12(sp)
  8045f4:	dc400115 	stw	r17,4(sp)
  8045f8:	dc400415 	stw	r17,16(sp)
  8045fc:	dec00215 	stw	sp,8(sp)
  804600:	80000326 	beq	r16,zero,804610 <_fwrite_r+0x5c>
  804604:	80800e17 	ldw	r2,56(r16)
  804608:	8009883a 	mov	r4,r16
  80460c:	10001226 	beq	r2,zero,804658 <_fwrite_r+0xa4>
  804610:	d9400a17 	ldw	r5,40(sp)
  804614:	8009883a 	mov	r4,r16
  804618:	d9800204 	addi	r6,sp,8
  80461c:	080afa40 	call	80afa4 <__sfvwrite_r>
  804620:	980b883a 	mov	r5,r19
  804624:	10000426 	beq	r2,zero,804638 <_fwrite_r+0x84>
  804628:	d9000417 	ldw	r4,16(sp)
  80462c:	8909c83a 	sub	r4,r17,r4
  804630:	0811a280 	call	811a28 <__udivsi3>
  804634:	1025883a 	mov	r18,r2
  804638:	9005883a 	mov	r2,r18
  80463c:	dfc00917 	ldw	ra,36(sp)
  804640:	dcc00817 	ldw	r19,32(sp)
  804644:	dc800717 	ldw	r18,28(sp)
  804648:	dc400617 	ldw	r17,24(sp)
  80464c:	dc000517 	ldw	r16,20(sp)
  804650:	dec00a04 	addi	sp,sp,40
  804654:	f800283a 	ret
  804658:	080346c0 	call	80346c <__sinit>
  80465c:	003fec06 	br	804610 <_fwrite_r+0x5c>

00804660 <fwrite>:
  804660:	00802074 	movhi	r2,129
  804664:	109c2904 	addi	r2,r2,28836
  804668:	2017883a 	mov	r11,r4
  80466c:	11000017 	ldw	r4,0(r2)
  804670:	defffe04 	addi	sp,sp,-8
  804674:	3013883a 	mov	r9,r6
  804678:	2805883a 	mov	r2,r5
  80467c:	d9c00015 	stw	r7,0(sp)
  804680:	580b883a 	mov	r5,r11
  804684:	100d883a 	mov	r6,r2
  804688:	480f883a 	mov	r7,r9
  80468c:	dfc00115 	stw	ra,4(sp)
  804690:	08045b40 	call	8045b4 <_fwrite_r>
  804694:	dfc00117 	ldw	ra,4(sp)
  804698:	dec00204 	addi	sp,sp,8
  80469c:	f800283a 	ret

008046a0 <__smakebuf_r>:
  8046a0:	2880030b 	ldhu	r2,12(r5)
  8046a4:	deffed04 	addi	sp,sp,-76
  8046a8:	dc401015 	stw	r17,64(sp)
  8046ac:	1080008c 	andi	r2,r2,2
  8046b0:	dc000f15 	stw	r16,60(sp)
  8046b4:	dfc01215 	stw	ra,72(sp)
  8046b8:	dc801115 	stw	r18,68(sp)
  8046bc:	2821883a 	mov	r16,r5
  8046c0:	2023883a 	mov	r17,r4
  8046c4:	10000b26 	beq	r2,zero,8046f4 <__smakebuf_r+0x54>
  8046c8:	28c010c4 	addi	r3,r5,67
  8046cc:	00800044 	movi	r2,1
  8046d0:	28800515 	stw	r2,20(r5)
  8046d4:	28c00415 	stw	r3,16(r5)
  8046d8:	28c00015 	stw	r3,0(r5)
  8046dc:	dfc01217 	ldw	ra,72(sp)
  8046e0:	dc801117 	ldw	r18,68(sp)
  8046e4:	dc401017 	ldw	r17,64(sp)
  8046e8:	dc000f17 	ldw	r16,60(sp)
  8046ec:	dec01304 	addi	sp,sp,76
  8046f0:	f800283a 	ret
  8046f4:	2940038f 	ldh	r5,14(r5)
  8046f8:	28002116 	blt	r5,zero,804780 <__smakebuf_r+0xe0>
  8046fc:	d80d883a 	mov	r6,sp
  804700:	08043c00 	call	8043c0 <_fstat_r>
  804704:	10001e16 	blt	r2,zero,804780 <__smakebuf_r+0xe0>
  804708:	d8800117 	ldw	r2,4(sp)
  80470c:	00e00014 	movui	r3,32768
  804710:	113c000c 	andi	r4,r2,61440
  804714:	20c03126 	beq	r4,r3,8047dc <__smakebuf_r+0x13c>
  804718:	8080030b 	ldhu	r2,12(r16)
  80471c:	00c80004 	movi	r3,8192
  804720:	10820014 	ori	r2,r2,2048
  804724:	8080030d 	sth	r2,12(r16)
  804728:	20c01e26 	beq	r4,r3,8047a4 <__smakebuf_r+0x104>
  80472c:	04810004 	movi	r18,1024
  804730:	8809883a 	mov	r4,r17
  804734:	900b883a 	mov	r5,r18
  804738:	080485c0 	call	80485c <_malloc_r>
  80473c:	1009883a 	mov	r4,r2
  804740:	10003126 	beq	r2,zero,804808 <__smakebuf_r+0x168>
  804744:	80c0030b 	ldhu	r3,12(r16)
  804748:	00802034 	movhi	r2,128
  80474c:	108d5404 	addi	r2,r2,13648
  804750:	88800f15 	stw	r2,60(r17)
  804754:	18c02014 	ori	r3,r3,128
  804758:	84800515 	stw	r18,20(r16)
  80475c:	80c0030d 	sth	r3,12(r16)
  804760:	81000415 	stw	r4,16(r16)
  804764:	81000015 	stw	r4,0(r16)
  804768:	dfc01217 	ldw	ra,72(sp)
  80476c:	dc801117 	ldw	r18,68(sp)
  804770:	dc401017 	ldw	r17,64(sp)
  804774:	dc000f17 	ldw	r16,60(sp)
  804778:	dec01304 	addi	sp,sp,76
  80477c:	f800283a 	ret
  804780:	80c0030b 	ldhu	r3,12(r16)
  804784:	1880200c 	andi	r2,r3,128
  804788:	10000426 	beq	r2,zero,80479c <__smakebuf_r+0xfc>
  80478c:	04801004 	movi	r18,64
  804790:	18820014 	ori	r2,r3,2048
  804794:	8080030d 	sth	r2,12(r16)
  804798:	003fe506 	br	804730 <__smakebuf_r+0x90>
  80479c:	04810004 	movi	r18,1024
  8047a0:	003ffb06 	br	804790 <__smakebuf_r+0xf0>
  8047a4:	8140038f 	ldh	r5,14(r16)
  8047a8:	8809883a 	mov	r4,r17
  8047ac:	080b4400 	call	80b440 <_isatty_r>
  8047b0:	103fde26 	beq	r2,zero,80472c <__smakebuf_r+0x8c>
  8047b4:	8080030b 	ldhu	r2,12(r16)
  8047b8:	80c010c4 	addi	r3,r16,67
  8047bc:	04810004 	movi	r18,1024
  8047c0:	10800054 	ori	r2,r2,1
  8047c4:	8080030d 	sth	r2,12(r16)
  8047c8:	00800044 	movi	r2,1
  8047cc:	80c00415 	stw	r3,16(r16)
  8047d0:	80800515 	stw	r2,20(r16)
  8047d4:	80c00015 	stw	r3,0(r16)
  8047d8:	003fd506 	br	804730 <__smakebuf_r+0x90>
  8047dc:	80c00a17 	ldw	r3,40(r16)
  8047e0:	00802034 	movhi	r2,128
  8047e4:	1095ca04 	addi	r2,r2,22312
  8047e8:	18bfcb1e 	bne	r3,r2,804718 <__smakebuf_r+0x78>
  8047ec:	8080030b 	ldhu	r2,12(r16)
  8047f0:	00c10004 	movi	r3,1024
  8047f4:	1825883a 	mov	r18,r3
  8047f8:	10c4b03a 	or	r2,r2,r3
  8047fc:	8080030d 	sth	r2,12(r16)
  804800:	80c01315 	stw	r3,76(r16)
  804804:	003fca06 	br	804730 <__smakebuf_r+0x90>
  804808:	8100030b 	ldhu	r4,12(r16)
  80480c:	2080800c 	andi	r2,r4,512
  804810:	103fb21e 	bne	r2,zero,8046dc <__smakebuf_r+0x3c>
  804814:	80c010c4 	addi	r3,r16,67
  804818:	21000094 	ori	r4,r4,2
  80481c:	00800044 	movi	r2,1
  804820:	80800515 	stw	r2,20(r16)
  804824:	8100030d 	sth	r4,12(r16)
  804828:	80c00415 	stw	r3,16(r16)
  80482c:	80c00015 	stw	r3,0(r16)
  804830:	003faa06 	br	8046dc <__smakebuf_r+0x3c>

00804834 <free>:
  804834:	00802074 	movhi	r2,129
  804838:	109c2904 	addi	r2,r2,28836
  80483c:	200b883a 	mov	r5,r4
  804840:	11000017 	ldw	r4,0(r2)
  804844:	0803be01 	jmpi	803be0 <_free_r>

00804848 <malloc>:
  804848:	00802074 	movhi	r2,129
  80484c:	109c2904 	addi	r2,r2,28836
  804850:	200b883a 	mov	r5,r4
  804854:	11000017 	ldw	r4,0(r2)
  804858:	080485c1 	jmpi	80485c <_malloc_r>

0080485c <_malloc_r>:
  80485c:	defff604 	addi	sp,sp,-40
  804860:	28c002c4 	addi	r3,r5,11
  804864:	00800584 	movi	r2,22
  804868:	dc800215 	stw	r18,8(sp)
  80486c:	dfc00915 	stw	ra,36(sp)
  804870:	df000815 	stw	fp,32(sp)
  804874:	ddc00715 	stw	r23,28(sp)
  804878:	dd800615 	stw	r22,24(sp)
  80487c:	dd400515 	stw	r21,20(sp)
  804880:	dd000415 	stw	r20,16(sp)
  804884:	dcc00315 	stw	r19,12(sp)
  804888:	dc400115 	stw	r17,4(sp)
  80488c:	dc000015 	stw	r16,0(sp)
  804890:	2025883a 	mov	r18,r4
  804894:	10c01236 	bltu	r2,r3,8048e0 <_malloc_r+0x84>
  804898:	04400404 	movi	r17,16
  80489c:	8940142e 	bgeu	r17,r5,8048f0 <_malloc_r+0x94>
  8048a0:	00800304 	movi	r2,12
  8048a4:	0007883a 	mov	r3,zero
  8048a8:	90800015 	stw	r2,0(r18)
  8048ac:	1805883a 	mov	r2,r3
  8048b0:	dfc00917 	ldw	ra,36(sp)
  8048b4:	df000817 	ldw	fp,32(sp)
  8048b8:	ddc00717 	ldw	r23,28(sp)
  8048bc:	dd800617 	ldw	r22,24(sp)
  8048c0:	dd400517 	ldw	r21,20(sp)
  8048c4:	dd000417 	ldw	r20,16(sp)
  8048c8:	dcc00317 	ldw	r19,12(sp)
  8048cc:	dc800217 	ldw	r18,8(sp)
  8048d0:	dc400117 	ldw	r17,4(sp)
  8048d4:	dc000017 	ldw	r16,0(sp)
  8048d8:	dec00a04 	addi	sp,sp,40
  8048dc:	f800283a 	ret
  8048e0:	00bffe04 	movi	r2,-8
  8048e4:	18a2703a 	and	r17,r3,r2
  8048e8:	883fed16 	blt	r17,zero,8048a0 <_malloc_r+0x44>
  8048ec:	897fec36 	bltu	r17,r5,8048a0 <_malloc_r+0x44>
  8048f0:	9009883a 	mov	r4,r18
  8048f4:	08124e00 	call	8124e0 <__malloc_lock>
  8048f8:	00807dc4 	movi	r2,503
  8048fc:	14402b2e 	bgeu	r2,r17,8049ac <_malloc_r+0x150>
  804900:	8806d27a 	srli	r3,r17,9
  804904:	18003f1e 	bne	r3,zero,804a04 <_malloc_r+0x1a8>
  804908:	880cd0fa 	srli	r6,r17,3
  80490c:	300490fa 	slli	r2,r6,3
  804910:	02c02074 	movhi	r11,129
  804914:	5ad68d04 	addi	r11,r11,23092
  804918:	12cb883a 	add	r5,r2,r11
  80491c:	2c000317 	ldw	r16,12(r5)
  804920:	580f883a 	mov	r7,r11
  804924:	2c00041e 	bne	r5,r16,804938 <_malloc_r+0xdc>
  804928:	00000a06 	br	804954 <_malloc_r+0xf8>
  80492c:	1800860e 	bge	r3,zero,804b48 <_malloc_r+0x2ec>
  804930:	84000317 	ldw	r16,12(r16)
  804934:	2c000726 	beq	r5,r16,804954 <_malloc_r+0xf8>
  804938:	80800117 	ldw	r2,4(r16)
  80493c:	00ffff04 	movi	r3,-4
  804940:	10c8703a 	and	r4,r2,r3
  804944:	2447c83a 	sub	r3,r4,r17
  804948:	008003c4 	movi	r2,15
  80494c:	10fff70e 	bge	r2,r3,80492c <_malloc_r+0xd0>
  804950:	31bfffc4 	addi	r6,r6,-1
  804954:	32400044 	addi	r9,r6,1
  804958:	02802074 	movhi	r10,129
  80495c:	52968f04 	addi	r10,r10,23100
  804960:	54000217 	ldw	r16,8(r10)
  804964:	8280a026 	beq	r16,r10,804be8 <_malloc_r+0x38c>
  804968:	80800117 	ldw	r2,4(r16)
  80496c:	00ffff04 	movi	r3,-4
  804970:	10ca703a 	and	r5,r2,r3
  804974:	2c4dc83a 	sub	r6,r5,r17
  804978:	008003c4 	movi	r2,15
  80497c:	11808316 	blt	r2,r6,804b8c <_malloc_r+0x330>
  804980:	52800315 	stw	r10,12(r10)
  804984:	52800215 	stw	r10,8(r10)
  804988:	30002916 	blt	r6,zero,804a30 <_malloc_r+0x1d4>
  80498c:	8147883a 	add	r3,r16,r5
  804990:	18800117 	ldw	r2,4(r3)
  804994:	9009883a 	mov	r4,r18
  804998:	10800054 	ori	r2,r2,1
  80499c:	18800115 	stw	r2,4(r3)
  8049a0:	08125000 	call	812500 <__malloc_unlock>
  8049a4:	80c00204 	addi	r3,r16,8
  8049a8:	003fc006 	br	8048ac <_malloc_r+0x50>
  8049ac:	02c02074 	movhi	r11,129
  8049b0:	5ad68d04 	addi	r11,r11,23092
  8049b4:	8ac5883a 	add	r2,r17,r11
  8049b8:	14000317 	ldw	r16,12(r2)
  8049bc:	580f883a 	mov	r7,r11
  8049c0:	8806d0fa 	srli	r3,r17,3
  8049c4:	14006c26 	beq	r2,r16,804b78 <_malloc_r+0x31c>
  8049c8:	80c00117 	ldw	r3,4(r16)
  8049cc:	00bfff04 	movi	r2,-4
  8049d0:	81800317 	ldw	r6,12(r16)
  8049d4:	1886703a 	and	r3,r3,r2
  8049d8:	80c7883a 	add	r3,r16,r3
  8049dc:	18800117 	ldw	r2,4(r3)
  8049e0:	81400217 	ldw	r5,8(r16)
  8049e4:	9009883a 	mov	r4,r18
  8049e8:	10800054 	ori	r2,r2,1
  8049ec:	18800115 	stw	r2,4(r3)
  8049f0:	31400215 	stw	r5,8(r6)
  8049f4:	29800315 	stw	r6,12(r5)
  8049f8:	08125000 	call	812500 <__malloc_unlock>
  8049fc:	80c00204 	addi	r3,r16,8
  804a00:	003faa06 	br	8048ac <_malloc_r+0x50>
  804a04:	00800104 	movi	r2,4
  804a08:	10c0052e 	bgeu	r2,r3,804a20 <_malloc_r+0x1c4>
  804a0c:	00800504 	movi	r2,20
  804a10:	10c07836 	bltu	r2,r3,804bf4 <_malloc_r+0x398>
  804a14:	198016c4 	addi	r6,r3,91
  804a18:	300490fa 	slli	r2,r6,3
  804a1c:	003fbc06 	br	804910 <_malloc_r+0xb4>
  804a20:	8804d1ba 	srli	r2,r17,6
  804a24:	11800e04 	addi	r6,r2,56
  804a28:	300490fa 	slli	r2,r6,3
  804a2c:	003fb806 	br	804910 <_malloc_r+0xb4>
  804a30:	00807fc4 	movi	r2,511
  804a34:	1140bb36 	bltu	r2,r5,804d24 <_malloc_r+0x4c8>
  804a38:	2806d0fa 	srli	r3,r5,3
  804a3c:	573ffe04 	addi	fp,r10,-8
  804a40:	00800044 	movi	r2,1
  804a44:	180890fa 	slli	r4,r3,3
  804a48:	1807d0ba 	srai	r3,r3,2
  804a4c:	e1c00117 	ldw	r7,4(fp)
  804a50:	5909883a 	add	r4,r11,r4
  804a54:	21400217 	ldw	r5,8(r4)
  804a58:	10c4983a 	sll	r2,r2,r3
  804a5c:	81000315 	stw	r4,12(r16)
  804a60:	81400215 	stw	r5,8(r16)
  804a64:	388eb03a 	or	r7,r7,r2
  804a68:	2c000315 	stw	r16,12(r5)
  804a6c:	24000215 	stw	r16,8(r4)
  804a70:	e1c00115 	stw	r7,4(fp)
  804a74:	4807883a 	mov	r3,r9
  804a78:	4800cd16 	blt	r9,zero,804db0 <_malloc_r+0x554>
  804a7c:	1807d0ba 	srai	r3,r3,2
  804a80:	00800044 	movi	r2,1
  804a84:	10c8983a 	sll	r4,r2,r3
  804a88:	39004436 	bltu	r7,r4,804b9c <_malloc_r+0x340>
  804a8c:	21c4703a 	and	r2,r4,r7
  804a90:	10000a1e 	bne	r2,zero,804abc <_malloc_r+0x260>
  804a94:	2109883a 	add	r4,r4,r4
  804a98:	00bfff04 	movi	r2,-4
  804a9c:	4884703a 	and	r2,r9,r2
  804aa0:	3906703a 	and	r3,r7,r4
  804aa4:	12400104 	addi	r9,r2,4
  804aa8:	1800041e 	bne	r3,zero,804abc <_malloc_r+0x260>
  804aac:	2109883a 	add	r4,r4,r4
  804ab0:	3904703a 	and	r2,r7,r4
  804ab4:	4a400104 	addi	r9,r9,4
  804ab8:	103ffc26 	beq	r2,zero,804aac <_malloc_r+0x250>
  804abc:	480490fa 	slli	r2,r9,3
  804ac0:	4819883a 	mov	r12,r9
  804ac4:	023fff04 	movi	r8,-4
  804ac8:	589b883a 	add	r13,r11,r2
  804acc:	6807883a 	mov	r3,r13
  804ad0:	014003c4 	movi	r5,15
  804ad4:	1c000317 	ldw	r16,12(r3)
  804ad8:	1c00041e 	bne	r3,r16,804aec <_malloc_r+0x290>
  804adc:	0000a706 	br	804d7c <_malloc_r+0x520>
  804ae0:	3000ab0e 	bge	r6,zero,804d90 <_malloc_r+0x534>
  804ae4:	84000317 	ldw	r16,12(r16)
  804ae8:	1c00a426 	beq	r3,r16,804d7c <_malloc_r+0x520>
  804aec:	80800117 	ldw	r2,4(r16)
  804af0:	1204703a 	and	r2,r2,r8
  804af4:	144dc83a 	sub	r6,r2,r17
  804af8:	29bff90e 	bge	r5,r6,804ae0 <_malloc_r+0x284>
  804afc:	81000317 	ldw	r4,12(r16)
  804b00:	80c00217 	ldw	r3,8(r16)
  804b04:	89400054 	ori	r5,r17,1
  804b08:	8445883a 	add	r2,r16,r17
  804b0c:	20c00215 	stw	r3,8(r4)
  804b10:	19000315 	stw	r4,12(r3)
  804b14:	81400115 	stw	r5,4(r16)
  804b18:	1187883a 	add	r3,r2,r6
  804b1c:	31000054 	ori	r4,r6,1
  804b20:	50800315 	stw	r2,12(r10)
  804b24:	50800215 	stw	r2,8(r10)
  804b28:	19800015 	stw	r6,0(r3)
  804b2c:	11000115 	stw	r4,4(r2)
  804b30:	12800215 	stw	r10,8(r2)
  804b34:	12800315 	stw	r10,12(r2)
  804b38:	9009883a 	mov	r4,r18
  804b3c:	08125000 	call	812500 <__malloc_unlock>
  804b40:	80c00204 	addi	r3,r16,8
  804b44:	003f5906 	br	8048ac <_malloc_r+0x50>
  804b48:	8109883a 	add	r4,r16,r4
  804b4c:	20800117 	ldw	r2,4(r4)
  804b50:	80c00217 	ldw	r3,8(r16)
  804b54:	81400317 	ldw	r5,12(r16)
  804b58:	10800054 	ori	r2,r2,1
  804b5c:	20800115 	stw	r2,4(r4)
  804b60:	28c00215 	stw	r3,8(r5)
  804b64:	19400315 	stw	r5,12(r3)
  804b68:	9009883a 	mov	r4,r18
  804b6c:	08125000 	call	812500 <__malloc_unlock>
  804b70:	80c00204 	addi	r3,r16,8
  804b74:	003f4d06 	br	8048ac <_malloc_r+0x50>
  804b78:	80800204 	addi	r2,r16,8
  804b7c:	14000317 	ldw	r16,12(r2)
  804b80:	143f911e 	bne	r2,r16,8049c8 <_malloc_r+0x16c>
  804b84:	1a400084 	addi	r9,r3,2
  804b88:	003f7306 	br	804958 <_malloc_r+0xfc>
  804b8c:	88c00054 	ori	r3,r17,1
  804b90:	8445883a 	add	r2,r16,r17
  804b94:	80c00115 	stw	r3,4(r16)
  804b98:	003fdf06 	br	804b18 <_malloc_r+0x2bc>
  804b9c:	e4000217 	ldw	r16,8(fp)
  804ba0:	00bfff04 	movi	r2,-4
  804ba4:	80c00117 	ldw	r3,4(r16)
  804ba8:	802d883a 	mov	r22,r16
  804bac:	18aa703a 	and	r21,r3,r2
  804bb0:	ac401636 	bltu	r21,r17,804c0c <_malloc_r+0x3b0>
  804bb4:	ac49c83a 	sub	r4,r21,r17
  804bb8:	008003c4 	movi	r2,15
  804bbc:	1100130e 	bge	r2,r4,804c0c <_malloc_r+0x3b0>
  804bc0:	88800054 	ori	r2,r17,1
  804bc4:	8447883a 	add	r3,r16,r17
  804bc8:	80800115 	stw	r2,4(r16)
  804bcc:	20800054 	ori	r2,r4,1
  804bd0:	18800115 	stw	r2,4(r3)
  804bd4:	e0c00215 	stw	r3,8(fp)
  804bd8:	9009883a 	mov	r4,r18
  804bdc:	08125000 	call	812500 <__malloc_unlock>
  804be0:	80c00204 	addi	r3,r16,8
  804be4:	003f3106 	br	8048ac <_malloc_r+0x50>
  804be8:	39c00117 	ldw	r7,4(r7)
  804bec:	573ffe04 	addi	fp,r10,-8
  804bf0:	003fa006 	br	804a74 <_malloc_r+0x218>
  804bf4:	00801504 	movi	r2,84
  804bf8:	10c06736 	bltu	r2,r3,804d98 <_malloc_r+0x53c>
  804bfc:	8804d33a 	srli	r2,r17,12
  804c00:	11801b84 	addi	r6,r2,110
  804c04:	300490fa 	slli	r2,r6,3
  804c08:	003f4106 	br	804910 <_malloc_r+0xb4>
  804c0c:	d0a6eb17 	ldw	r2,-25684(gp)
  804c10:	d0e00417 	ldw	r3,-32752(gp)
  804c14:	053fffc4 	movi	r20,-1
  804c18:	10800404 	addi	r2,r2,16
  804c1c:	88a7883a 	add	r19,r17,r2
  804c20:	1d000326 	beq	r3,r20,804c30 <_malloc_r+0x3d4>
  804c24:	98c3ffc4 	addi	r3,r19,4095
  804c28:	00bc0004 	movi	r2,-4096
  804c2c:	18a6703a 	and	r19,r3,r2
  804c30:	9009883a 	mov	r4,r18
  804c34:	980b883a 	mov	r5,r19
  804c38:	080559c0 	call	80559c <_sbrk_r>
  804c3c:	1009883a 	mov	r4,r2
  804c40:	15000426 	beq	r2,r20,804c54 <_malloc_r+0x3f8>
  804c44:	854b883a 	add	r5,r16,r21
  804c48:	1029883a 	mov	r20,r2
  804c4c:	11405a2e 	bgeu	r2,r5,804db8 <_malloc_r+0x55c>
  804c50:	87000c26 	beq	r16,fp,804c84 <_malloc_r+0x428>
  804c54:	e4000217 	ldw	r16,8(fp)
  804c58:	80c00117 	ldw	r3,4(r16)
  804c5c:	00bfff04 	movi	r2,-4
  804c60:	1884703a 	and	r2,r3,r2
  804c64:	14400336 	bltu	r2,r17,804c74 <_malloc_r+0x418>
  804c68:	1449c83a 	sub	r4,r2,r17
  804c6c:	008003c4 	movi	r2,15
  804c70:	113fd316 	blt	r2,r4,804bc0 <_malloc_r+0x364>
  804c74:	9009883a 	mov	r4,r18
  804c78:	08125000 	call	812500 <__malloc_unlock>
  804c7c:	0007883a 	mov	r3,zero
  804c80:	003f0a06 	br	8048ac <_malloc_r+0x50>
  804c84:	05c020b4 	movhi	r23,130
  804c88:	bde32104 	addi	r23,r23,-29564
  804c8c:	b8800017 	ldw	r2,0(r23)
  804c90:	988d883a 	add	r6,r19,r2
  804c94:	b9800015 	stw	r6,0(r23)
  804c98:	d0e00417 	ldw	r3,-32752(gp)
  804c9c:	00bfffc4 	movi	r2,-1
  804ca0:	18808e26 	beq	r3,r2,804edc <_malloc_r+0x680>
  804ca4:	2145c83a 	sub	r2,r4,r5
  804ca8:	3085883a 	add	r2,r6,r2
  804cac:	b8800015 	stw	r2,0(r23)
  804cb0:	20c001cc 	andi	r3,r4,7
  804cb4:	18005f1e 	bne	r3,zero,804e34 <_malloc_r+0x5d8>
  804cb8:	000b883a 	mov	r5,zero
  804cbc:	a4c5883a 	add	r2,r20,r19
  804cc0:	1083ffcc 	andi	r2,r2,4095
  804cc4:	00c40004 	movi	r3,4096
  804cc8:	1887c83a 	sub	r3,r3,r2
  804ccc:	28e7883a 	add	r19,r5,r3
  804cd0:	9009883a 	mov	r4,r18
  804cd4:	980b883a 	mov	r5,r19
  804cd8:	080559c0 	call	80559c <_sbrk_r>
  804cdc:	1007883a 	mov	r3,r2
  804ce0:	00bfffc4 	movi	r2,-1
  804ce4:	18807a26 	beq	r3,r2,804ed0 <_malloc_r+0x674>
  804ce8:	1d05c83a 	sub	r2,r3,r20
  804cec:	9885883a 	add	r2,r19,r2
  804cf0:	10c00054 	ori	r3,r2,1
  804cf4:	b8800017 	ldw	r2,0(r23)
  804cf8:	a021883a 	mov	r16,r20
  804cfc:	a0c00115 	stw	r3,4(r20)
  804d00:	9885883a 	add	r2,r19,r2
  804d04:	b8800015 	stw	r2,0(r23)
  804d08:	e5000215 	stw	r20,8(fp)
  804d0c:	b7003626 	beq	r22,fp,804de8 <_malloc_r+0x58c>
  804d10:	018003c4 	movi	r6,15
  804d14:	35404b36 	bltu	r6,r21,804e44 <_malloc_r+0x5e8>
  804d18:	00800044 	movi	r2,1
  804d1c:	a0800115 	stw	r2,4(r20)
  804d20:	003fcd06 	br	804c58 <_malloc_r+0x3fc>
  804d24:	2808d27a 	srli	r4,r5,9
  804d28:	2000371e 	bne	r4,zero,804e08 <_malloc_r+0x5ac>
  804d2c:	2808d0fa 	srli	r4,r5,3
  804d30:	200690fa 	slli	r3,r4,3
  804d34:	1ad1883a 	add	r8,r3,r11
  804d38:	41800217 	ldw	r6,8(r8)
  804d3c:	41805b26 	beq	r8,r6,804eac <_malloc_r+0x650>
  804d40:	30800117 	ldw	r2,4(r6)
  804d44:	00ffff04 	movi	r3,-4
  804d48:	10c4703a 	and	r2,r2,r3
  804d4c:	2880022e 	bgeu	r5,r2,804d58 <_malloc_r+0x4fc>
  804d50:	31800217 	ldw	r6,8(r6)
  804d54:	41bffa1e 	bne	r8,r6,804d40 <_malloc_r+0x4e4>
  804d58:	32000317 	ldw	r8,12(r6)
  804d5c:	39c00117 	ldw	r7,4(r7)
  804d60:	82000315 	stw	r8,12(r16)
  804d64:	81800215 	stw	r6,8(r16)
  804d68:	07002074 	movhi	fp,129
  804d6c:	e7168d04 	addi	fp,fp,23092
  804d70:	34000315 	stw	r16,12(r6)
  804d74:	44000215 	stw	r16,8(r8)
  804d78:	003f3e06 	br	804a74 <_malloc_r+0x218>
  804d7c:	63000044 	addi	r12,r12,1
  804d80:	608000cc 	andi	r2,r12,3
  804d84:	10005d26 	beq	r2,zero,804efc <_malloc_r+0x6a0>
  804d88:	18c00204 	addi	r3,r3,8
  804d8c:	003f5106 	br	804ad4 <_malloc_r+0x278>
  804d90:	8089883a 	add	r4,r16,r2
  804d94:	003f6d06 	br	804b4c <_malloc_r+0x2f0>
  804d98:	00805504 	movi	r2,340
  804d9c:	10c02036 	bltu	r2,r3,804e20 <_malloc_r+0x5c4>
  804da0:	8804d3fa 	srli	r2,r17,15
  804da4:	11801dc4 	addi	r6,r2,119
  804da8:	300490fa 	slli	r2,r6,3
  804dac:	003ed806 	br	804910 <_malloc_r+0xb4>
  804db0:	48c000c4 	addi	r3,r9,3
  804db4:	003f3106 	br	804a7c <_malloc_r+0x220>
  804db8:	05c020b4 	movhi	r23,130
  804dbc:	bde32104 	addi	r23,r23,-29564
  804dc0:	b8800017 	ldw	r2,0(r23)
  804dc4:	988d883a 	add	r6,r19,r2
  804dc8:	b9800015 	stw	r6,0(r23)
  804dcc:	293fb21e 	bne	r5,r4,804c98 <_malloc_r+0x43c>
  804dd0:	2083ffcc 	andi	r2,r4,4095
  804dd4:	103fb01e 	bne	r2,zero,804c98 <_malloc_r+0x43c>
  804dd8:	e4000217 	ldw	r16,8(fp)
  804ddc:	9d45883a 	add	r2,r19,r21
  804de0:	10800054 	ori	r2,r2,1
  804de4:	80800115 	stw	r2,4(r16)
  804de8:	b8c00017 	ldw	r3,0(r23)
  804dec:	d0a6ec17 	ldw	r2,-25680(gp)
  804df0:	10c0012e 	bgeu	r2,r3,804df8 <_malloc_r+0x59c>
  804df4:	d0e6ec15 	stw	r3,-25680(gp)
  804df8:	d0a6ed17 	ldw	r2,-25676(gp)
  804dfc:	10ff962e 	bgeu	r2,r3,804c58 <_malloc_r+0x3fc>
  804e00:	d0e6ed15 	stw	r3,-25676(gp)
  804e04:	003f9406 	br	804c58 <_malloc_r+0x3fc>
  804e08:	00800104 	movi	r2,4
  804e0c:	11001e36 	bltu	r2,r4,804e88 <_malloc_r+0x62c>
  804e10:	2804d1ba 	srli	r2,r5,6
  804e14:	11000e04 	addi	r4,r2,56
  804e18:	200690fa 	slli	r3,r4,3
  804e1c:	003fc506 	br	804d34 <_malloc_r+0x4d8>
  804e20:	00815504 	movi	r2,1364
  804e24:	10c01d2e 	bgeu	r2,r3,804e9c <_malloc_r+0x640>
  804e28:	01801f84 	movi	r6,126
  804e2c:	0080fc04 	movi	r2,1008
  804e30:	003eb706 	br	804910 <_malloc_r+0xb4>
  804e34:	00800204 	movi	r2,8
  804e38:	10cbc83a 	sub	r5,r2,r3
  804e3c:	2169883a 	add	r20,r4,r5
  804e40:	003f9e06 	br	804cbc <_malloc_r+0x460>
  804e44:	00bffe04 	movi	r2,-8
  804e48:	a93ffd04 	addi	r4,r21,-12
  804e4c:	2088703a 	and	r4,r4,r2
  804e50:	b10b883a 	add	r5,r22,r4
  804e54:	00c00144 	movi	r3,5
  804e58:	28c00215 	stw	r3,8(r5)
  804e5c:	28c00115 	stw	r3,4(r5)
  804e60:	b0800117 	ldw	r2,4(r22)
  804e64:	1080004c 	andi	r2,r2,1
  804e68:	2084b03a 	or	r2,r4,r2
  804e6c:	b0800115 	stw	r2,4(r22)
  804e70:	313fdd2e 	bgeu	r6,r4,804de8 <_malloc_r+0x58c>
  804e74:	b1400204 	addi	r5,r22,8
  804e78:	9009883a 	mov	r4,r18
  804e7c:	0803be00 	call	803be0 <_free_r>
  804e80:	e4000217 	ldw	r16,8(fp)
  804e84:	003fd806 	br	804de8 <_malloc_r+0x58c>
  804e88:	00800504 	movi	r2,20
  804e8c:	11001536 	bltu	r2,r4,804ee4 <_malloc_r+0x688>
  804e90:	210016c4 	addi	r4,r4,91
  804e94:	200690fa 	slli	r3,r4,3
  804e98:	003fa606 	br	804d34 <_malloc_r+0x4d8>
  804e9c:	8804d4ba 	srli	r2,r17,18
  804ea0:	11801f04 	addi	r6,r2,124
  804ea4:	300490fa 	slli	r2,r6,3
  804ea8:	003e9906 	br	804910 <_malloc_r+0xb4>
  804eac:	2009d0ba 	srai	r4,r4,2
  804eb0:	01402074 	movhi	r5,129
  804eb4:	29568d04 	addi	r5,r5,23092
  804eb8:	00c00044 	movi	r3,1
  804ebc:	28800117 	ldw	r2,4(r5)
  804ec0:	1906983a 	sll	r3,r3,r4
  804ec4:	10c4b03a 	or	r2,r2,r3
  804ec8:	28800115 	stw	r2,4(r5)
  804ecc:	003fa306 	br	804d5c <_malloc_r+0x500>
  804ed0:	0027883a 	mov	r19,zero
  804ed4:	00c00044 	movi	r3,1
  804ed8:	003f8606 	br	804cf4 <_malloc_r+0x498>
  804edc:	d1200415 	stw	r4,-32752(gp)
  804ee0:	003f7306 	br	804cb0 <_malloc_r+0x454>
  804ee4:	00801504 	movi	r2,84
  804ee8:	11001936 	bltu	r2,r4,804f50 <_malloc_r+0x6f4>
  804eec:	2804d33a 	srli	r2,r5,12
  804ef0:	11001b84 	addi	r4,r2,110
  804ef4:	200690fa 	slli	r3,r4,3
  804ef8:	003f8e06 	br	804d34 <_malloc_r+0x4d8>
  804efc:	480b883a 	mov	r5,r9
  804f00:	6807883a 	mov	r3,r13
  804f04:	288000cc 	andi	r2,r5,3
  804f08:	18fffe04 	addi	r3,r3,-8
  804f0c:	297fffc4 	addi	r5,r5,-1
  804f10:	10001526 	beq	r2,zero,804f68 <_malloc_r+0x70c>
  804f14:	18800217 	ldw	r2,8(r3)
  804f18:	10fffa26 	beq	r2,r3,804f04 <_malloc_r+0x6a8>
  804f1c:	2109883a 	add	r4,r4,r4
  804f20:	393f1e36 	bltu	r7,r4,804b9c <_malloc_r+0x340>
  804f24:	203f1d26 	beq	r4,zero,804b9c <_malloc_r+0x340>
  804f28:	21c4703a 	and	r2,r4,r7
  804f2c:	10000226 	beq	r2,zero,804f38 <_malloc_r+0x6dc>
  804f30:	6013883a 	mov	r9,r12
  804f34:	003ee106 	br	804abc <_malloc_r+0x260>
  804f38:	2109883a 	add	r4,r4,r4
  804f3c:	3904703a 	and	r2,r7,r4
  804f40:	63000104 	addi	r12,r12,4
  804f44:	103ffc26 	beq	r2,zero,804f38 <_malloc_r+0x6dc>
  804f48:	6013883a 	mov	r9,r12
  804f4c:	003edb06 	br	804abc <_malloc_r+0x260>
  804f50:	00805504 	movi	r2,340
  804f54:	11000836 	bltu	r2,r4,804f78 <_malloc_r+0x71c>
  804f58:	2804d3fa 	srli	r2,r5,15
  804f5c:	11001dc4 	addi	r4,r2,119
  804f60:	200690fa 	slli	r3,r4,3
  804f64:	003f7306 	br	804d34 <_malloc_r+0x4d8>
  804f68:	0104303a 	nor	r2,zero,r4
  804f6c:	388e703a 	and	r7,r7,r2
  804f70:	e1c00115 	stw	r7,4(fp)
  804f74:	003fe906 	br	804f1c <_malloc_r+0x6c0>
  804f78:	00815504 	movi	r2,1364
  804f7c:	1100032e 	bgeu	r2,r4,804f8c <_malloc_r+0x730>
  804f80:	01001f84 	movi	r4,126
  804f84:	00c0fc04 	movi	r3,1008
  804f88:	003f6a06 	br	804d34 <_malloc_r+0x4d8>
  804f8c:	2804d4ba 	srli	r2,r5,18
  804f90:	11001f04 	addi	r4,r2,124
  804f94:	200690fa 	slli	r3,r4,3
  804f98:	003f6606 	br	804d34 <_malloc_r+0x4d8>

00804f9c <memchr>:
  804f9c:	008000c4 	movi	r2,3
  804fa0:	29403fcc 	andi	r5,r5,255
  804fa4:	2007883a 	mov	r3,r4
  804fa8:	1180022e 	bgeu	r2,r6,804fb4 <memchr+0x18>
  804fac:	2084703a 	and	r2,r4,r2
  804fb0:	10000b26 	beq	r2,zero,804fe0 <memchr+0x44>
  804fb4:	313fffc4 	addi	r4,r6,-1
  804fb8:	3000051e 	bne	r6,zero,804fd0 <memchr+0x34>
  804fbc:	00002c06 	br	805070 <memchr+0xd4>
  804fc0:	213fffc4 	addi	r4,r4,-1
  804fc4:	00bfffc4 	movi	r2,-1
  804fc8:	18c00044 	addi	r3,r3,1
  804fcc:	20802826 	beq	r4,r2,805070 <memchr+0xd4>
  804fd0:	18800003 	ldbu	r2,0(r3)
  804fd4:	28bffa1e 	bne	r5,r2,804fc0 <memchr+0x24>
  804fd8:	1805883a 	mov	r2,r3
  804fdc:	f800283a 	ret
  804fe0:	0011883a 	mov	r8,zero
  804fe4:	0007883a 	mov	r3,zero
  804fe8:	01c00104 	movi	r7,4
  804fec:	4004923a 	slli	r2,r8,8
  804ff0:	18c00044 	addi	r3,r3,1
  804ff4:	1151883a 	add	r8,r2,r5
  804ff8:	19fffc1e 	bne	r3,r7,804fec <memchr+0x50>
  804ffc:	02bfbff4 	movhi	r10,65279
  805000:	52bfbfc4 	addi	r10,r10,-257
  805004:	02602074 	movhi	r9,32897
  805008:	4a602004 	addi	r9,r9,-32640
  80500c:	02c000c4 	movi	r11,3
  805010:	20800017 	ldw	r2,0(r4)
  805014:	31bfff04 	addi	r6,r6,-4
  805018:	200f883a 	mov	r7,r4
  80501c:	1204f03a 	xor	r2,r2,r8
  805020:	1287883a 	add	r3,r2,r10
  805024:	1a46703a 	and	r3,r3,r9
  805028:	0084303a 	nor	r2,zero,r2
  80502c:	10c4703a 	and	r2,r2,r3
  805030:	10000b26 	beq	r2,zero,805060 <memchr+0xc4>
  805034:	20800003 	ldbu	r2,0(r4)
  805038:	28800f26 	beq	r5,r2,805078 <memchr+0xdc>
  80503c:	20800043 	ldbu	r2,1(r4)
  805040:	21c00044 	addi	r7,r4,1
  805044:	28800c26 	beq	r5,r2,805078 <memchr+0xdc>
  805048:	20800083 	ldbu	r2,2(r4)
  80504c:	21c00084 	addi	r7,r4,2
  805050:	28800926 	beq	r5,r2,805078 <memchr+0xdc>
  805054:	208000c3 	ldbu	r2,3(r4)
  805058:	21c000c4 	addi	r7,r4,3
  80505c:	28800626 	beq	r5,r2,805078 <memchr+0xdc>
  805060:	21000104 	addi	r4,r4,4
  805064:	59bfea36 	bltu	r11,r6,805010 <memchr+0x74>
  805068:	2007883a 	mov	r3,r4
  80506c:	003fd106 	br	804fb4 <memchr+0x18>
  805070:	0005883a 	mov	r2,zero
  805074:	f800283a 	ret
  805078:	3805883a 	mov	r2,r7
  80507c:	f800283a 	ret

00805080 <memcpy>:
  805080:	01c003c4 	movi	r7,15
  805084:	2007883a 	mov	r3,r4
  805088:	3980032e 	bgeu	r7,r6,805098 <memcpy+0x18>
  80508c:	2904b03a 	or	r2,r5,r4
  805090:	108000cc 	andi	r2,r2,3
  805094:	10000926 	beq	r2,zero,8050bc <memcpy+0x3c>
  805098:	30000626 	beq	r6,zero,8050b4 <memcpy+0x34>
  80509c:	30cd883a 	add	r6,r6,r3
  8050a0:	28800003 	ldbu	r2,0(r5)
  8050a4:	29400044 	addi	r5,r5,1
  8050a8:	18800005 	stb	r2,0(r3)
  8050ac:	18c00044 	addi	r3,r3,1
  8050b0:	30fffb1e 	bne	r6,r3,8050a0 <memcpy+0x20>
  8050b4:	2005883a 	mov	r2,r4
  8050b8:	f800283a 	ret
  8050bc:	3811883a 	mov	r8,r7
  8050c0:	200f883a 	mov	r7,r4
  8050c4:	28c00017 	ldw	r3,0(r5)
  8050c8:	31bffc04 	addi	r6,r6,-16
  8050cc:	38c00015 	stw	r3,0(r7)
  8050d0:	28800117 	ldw	r2,4(r5)
  8050d4:	38800115 	stw	r2,4(r7)
  8050d8:	28c00217 	ldw	r3,8(r5)
  8050dc:	38c00215 	stw	r3,8(r7)
  8050e0:	28800317 	ldw	r2,12(r5)
  8050e4:	29400404 	addi	r5,r5,16
  8050e8:	38800315 	stw	r2,12(r7)
  8050ec:	39c00404 	addi	r7,r7,16
  8050f0:	41bff436 	bltu	r8,r6,8050c4 <memcpy+0x44>
  8050f4:	008000c4 	movi	r2,3
  8050f8:	1180072e 	bgeu	r2,r6,805118 <memcpy+0x98>
  8050fc:	1007883a 	mov	r3,r2
  805100:	28800017 	ldw	r2,0(r5)
  805104:	31bfff04 	addi	r6,r6,-4
  805108:	29400104 	addi	r5,r5,4
  80510c:	38800015 	stw	r2,0(r7)
  805110:	39c00104 	addi	r7,r7,4
  805114:	19bffa36 	bltu	r3,r6,805100 <memcpy+0x80>
  805118:	3807883a 	mov	r3,r7
  80511c:	003fde06 	br	805098 <memcpy+0x18>

00805120 <memset>:
  805120:	008000c4 	movi	r2,3
  805124:	29403fcc 	andi	r5,r5,255
  805128:	2007883a 	mov	r3,r4
  80512c:	1180022e 	bgeu	r2,r6,805138 <memset+0x18>
  805130:	2084703a 	and	r2,r4,r2
  805134:	10000826 	beq	r2,zero,805158 <memset+0x38>
  805138:	30000526 	beq	r6,zero,805150 <memset+0x30>
  80513c:	2805883a 	mov	r2,r5
  805140:	30cd883a 	add	r6,r6,r3
  805144:	18800005 	stb	r2,0(r3)
  805148:	18c00044 	addi	r3,r3,1
  80514c:	19bffd1e 	bne	r3,r6,805144 <memset+0x24>
  805150:	2005883a 	mov	r2,r4
  805154:	f800283a 	ret
  805158:	2804923a 	slli	r2,r5,8
  80515c:	020003c4 	movi	r8,15
  805160:	200f883a 	mov	r7,r4
  805164:	2884b03a 	or	r2,r5,r2
  805168:	1006943a 	slli	r3,r2,16
  80516c:	10c6b03a 	or	r3,r2,r3
  805170:	41800a2e 	bgeu	r8,r6,80519c <memset+0x7c>
  805174:	4005883a 	mov	r2,r8
  805178:	31bffc04 	addi	r6,r6,-16
  80517c:	38c00015 	stw	r3,0(r7)
  805180:	38c00115 	stw	r3,4(r7)
  805184:	38c00215 	stw	r3,8(r7)
  805188:	38c00315 	stw	r3,12(r7)
  80518c:	39c00404 	addi	r7,r7,16
  805190:	11bff936 	bltu	r2,r6,805178 <memset+0x58>
  805194:	008000c4 	movi	r2,3
  805198:	1180052e 	bgeu	r2,r6,8051b0 <memset+0x90>
  80519c:	31bfff04 	addi	r6,r6,-4
  8051a0:	008000c4 	movi	r2,3
  8051a4:	38c00015 	stw	r3,0(r7)
  8051a8:	39c00104 	addi	r7,r7,4
  8051ac:	11bffb36 	bltu	r2,r6,80519c <memset+0x7c>
  8051b0:	3807883a 	mov	r3,r7
  8051b4:	003fe006 	br	805138 <memset+0x18>

008051b8 <_open_r>:
  8051b8:	defffd04 	addi	sp,sp,-12
  8051bc:	dc000015 	stw	r16,0(sp)
  8051c0:	040020b4 	movhi	r16,130
  8051c4:	84231204 	addi	r16,r16,-29624
  8051c8:	dc400115 	stw	r17,4(sp)
  8051cc:	80000015 	stw	zero,0(r16)
  8051d0:	2023883a 	mov	r17,r4
  8051d4:	2809883a 	mov	r4,r5
  8051d8:	300b883a 	mov	r5,r6
  8051dc:	380d883a 	mov	r6,r7
  8051e0:	dfc00215 	stw	ra,8(sp)
  8051e4:	08126180 	call	812618 <open>
  8051e8:	1007883a 	mov	r3,r2
  8051ec:	00bfffc4 	movi	r2,-1
  8051f0:	18800626 	beq	r3,r2,80520c <_open_r+0x54>
  8051f4:	1805883a 	mov	r2,r3
  8051f8:	dfc00217 	ldw	ra,8(sp)
  8051fc:	dc400117 	ldw	r17,4(sp)
  805200:	dc000017 	ldw	r16,0(sp)
  805204:	dec00304 	addi	sp,sp,12
  805208:	f800283a 	ret
  80520c:	80800017 	ldw	r2,0(r16)
  805210:	103ff826 	beq	r2,zero,8051f4 <_open_r+0x3c>
  805214:	88800015 	stw	r2,0(r17)
  805218:	1805883a 	mov	r2,r3
  80521c:	dfc00217 	ldw	ra,8(sp)
  805220:	dc400117 	ldw	r17,4(sp)
  805224:	dc000017 	ldw	r16,0(sp)
  805228:	dec00304 	addi	sp,sp,12
  80522c:	f800283a 	ret

00805230 <printf>:
  805230:	defffb04 	addi	sp,sp,-20
  805234:	dfc00115 	stw	ra,4(sp)
  805238:	d9400215 	stw	r5,8(sp)
  80523c:	d9800315 	stw	r6,12(sp)
  805240:	d9c00415 	stw	r7,16(sp)
  805244:	00802074 	movhi	r2,129
  805248:	109c2904 	addi	r2,r2,28836
  80524c:	10c00017 	ldw	r3,0(r2)
  805250:	200b883a 	mov	r5,r4
  805254:	d8800204 	addi	r2,sp,8
  805258:	19000217 	ldw	r4,8(r3)
  80525c:	100d883a 	mov	r6,r2
  805260:	d8800015 	stw	r2,0(sp)
  805264:	0807b880 	call	807b88 <__vfprintf_internal>
  805268:	dfc00117 	ldw	ra,4(sp)
  80526c:	dec00504 	addi	sp,sp,20
  805270:	f800283a 	ret

00805274 <_printf_r>:
  805274:	defffc04 	addi	sp,sp,-16
  805278:	dfc00115 	stw	ra,4(sp)
  80527c:	d9800215 	stw	r6,8(sp)
  805280:	d9c00315 	stw	r7,12(sp)
  805284:	280d883a 	mov	r6,r5
  805288:	21400217 	ldw	r5,8(r4)
  80528c:	d8c00204 	addi	r3,sp,8
  805290:	180f883a 	mov	r7,r3
  805294:	d8c00015 	stw	r3,0(sp)
  805298:	0805cc40 	call	805cc4 <___vfprintf_internal_r>
  80529c:	dfc00117 	ldw	ra,4(sp)
  8052a0:	dec00404 	addi	sp,sp,16
  8052a4:	f800283a 	ret

008052a8 <_puts_r>:
  8052a8:	defff604 	addi	sp,sp,-40
  8052ac:	dc400715 	stw	r17,28(sp)
  8052b0:	2023883a 	mov	r17,r4
  8052b4:	2809883a 	mov	r4,r5
  8052b8:	dfc00915 	stw	ra,36(sp)
  8052bc:	dcc00815 	stw	r19,32(sp)
  8052c0:	2827883a 	mov	r19,r5
  8052c4:	080586c0 	call	80586c <strlen>
  8052c8:	89400217 	ldw	r5,8(r17)
  8052cc:	00c02074 	movhi	r3,129
  8052d0:	18d4d904 	addi	r3,r3,21348
  8052d4:	01c00044 	movi	r7,1
  8052d8:	12000044 	addi	r8,r2,1
  8052dc:	d8c00515 	stw	r3,20(sp)
  8052e0:	d9c00615 	stw	r7,24(sp)
  8052e4:	d8c00304 	addi	r3,sp,12
  8052e8:	01c00084 	movi	r7,2
  8052ec:	8809883a 	mov	r4,r17
  8052f0:	d80d883a 	mov	r6,sp
  8052f4:	d8c00015 	stw	r3,0(sp)
  8052f8:	dcc00315 	stw	r19,12(sp)
  8052fc:	da000215 	stw	r8,8(sp)
  805300:	d9c00115 	stw	r7,4(sp)
  805304:	d8800415 	stw	r2,16(sp)
  805308:	080afa40 	call	80afa4 <__sfvwrite_r>
  80530c:	00ffffc4 	movi	r3,-1
  805310:	10000626 	beq	r2,zero,80532c <_puts_r+0x84>
  805314:	1805883a 	mov	r2,r3
  805318:	dfc00917 	ldw	ra,36(sp)
  80531c:	dcc00817 	ldw	r19,32(sp)
  805320:	dc400717 	ldw	r17,28(sp)
  805324:	dec00a04 	addi	sp,sp,40
  805328:	f800283a 	ret
  80532c:	00c00284 	movi	r3,10
  805330:	1805883a 	mov	r2,r3
  805334:	dfc00917 	ldw	ra,36(sp)
  805338:	dcc00817 	ldw	r19,32(sp)
  80533c:	dc400717 	ldw	r17,28(sp)
  805340:	dec00a04 	addi	sp,sp,40
  805344:	f800283a 	ret

00805348 <puts>:
  805348:	00802074 	movhi	r2,129
  80534c:	109c2904 	addi	r2,r2,28836
  805350:	200b883a 	mov	r5,r4
  805354:	11000017 	ldw	r4,0(r2)
  805358:	08052a81 	jmpi	8052a8 <_puts_r>

0080535c <__srefill_r>:
  80535c:	defffd04 	addi	sp,sp,-12
  805360:	dc400115 	stw	r17,4(sp)
  805364:	dc000015 	stw	r16,0(sp)
  805368:	dfc00215 	stw	ra,8(sp)
  80536c:	2023883a 	mov	r17,r4
  805370:	2821883a 	mov	r16,r5
  805374:	20000226 	beq	r4,zero,805380 <__srefill_r+0x24>
  805378:	20800e17 	ldw	r2,56(r4)
  80537c:	10004126 	beq	r2,zero,805484 <__srefill_r+0x128>
  805380:	80c0030b 	ldhu	r3,12(r16)
  805384:	80000115 	stw	zero,4(r16)
  805388:	1880080c 	andi	r2,r3,32
  80538c:	1000361e 	bne	r2,zero,805468 <__srefill_r+0x10c>
  805390:	1880010c 	andi	r2,r3,4
  805394:	1000211e 	bne	r2,zero,80541c <__srefill_r+0xc0>
  805398:	1880040c 	andi	r2,r3,16
  80539c:	10005026 	beq	r2,zero,8054e0 <__srefill_r+0x184>
  8053a0:	1880020c 	andi	r2,r3,8
  8053a4:	1000541e 	bne	r2,zero,8054f8 <__srefill_r+0x19c>
  8053a8:	8080030b 	ldhu	r2,12(r16)
  8053ac:	10800114 	ori	r2,r2,4
  8053b0:	8080030d 	sth	r2,12(r16)
  8053b4:	80800417 	ldw	r2,16(r16)
  8053b8:	10004526 	beq	r2,zero,8054d0 <__srefill_r+0x174>
  8053bc:	8080030b 	ldhu	r2,12(r16)
  8053c0:	108000cc 	andi	r2,r2,3
  8053c4:	1000361e 	bne	r2,zero,8054a0 <__srefill_r+0x144>
  8053c8:	81800417 	ldw	r6,16(r16)
  8053cc:	80c00817 	ldw	r3,32(r16)
  8053d0:	81400717 	ldw	r5,28(r16)
  8053d4:	81c00517 	ldw	r7,20(r16)
  8053d8:	8809883a 	mov	r4,r17
  8053dc:	81800015 	stw	r6,0(r16)
  8053e0:	183ee83a 	callr	r3
  8053e4:	80c0030b 	ldhu	r3,12(r16)
  8053e8:	1009883a 	mov	r4,r2
  8053ec:	80800115 	stw	r2,4(r16)
  8053f0:	00b7ffc4 	movi	r2,-8193
  8053f4:	1884703a 	and	r2,r3,r2
  8053f8:	8080030d 	sth	r2,12(r16)
  8053fc:	0100230e 	bge	zero,r4,80548c <__srefill_r+0x130>
  805400:	0009883a 	mov	r4,zero
  805404:	2005883a 	mov	r2,r4
  805408:	dfc00217 	ldw	ra,8(sp)
  80540c:	dc400117 	ldw	r17,4(sp)
  805410:	dc000017 	ldw	r16,0(sp)
  805414:	dec00304 	addi	sp,sp,12
  805418:	f800283a 	ret
  80541c:	81400c17 	ldw	r5,48(r16)
  805420:	283fe426 	beq	r5,zero,8053b4 <__srefill_r+0x58>
  805424:	80801004 	addi	r2,r16,64
  805428:	28800226 	beq	r5,r2,805434 <__srefill_r+0xd8>
  80542c:	8809883a 	mov	r4,r17
  805430:	0803be00 	call	803be0 <_free_r>
  805434:	80800f17 	ldw	r2,60(r16)
  805438:	80000c15 	stw	zero,48(r16)
  80543c:	80800115 	stw	r2,4(r16)
  805440:	103fdc26 	beq	r2,zero,8053b4 <__srefill_r+0x58>
  805444:	80800e17 	ldw	r2,56(r16)
  805448:	0009883a 	mov	r4,zero
  80544c:	80800015 	stw	r2,0(r16)
  805450:	2005883a 	mov	r2,r4
  805454:	dfc00217 	ldw	ra,8(sp)
  805458:	dc400117 	ldw	r17,4(sp)
  80545c:	dc000017 	ldw	r16,0(sp)
  805460:	dec00304 	addi	sp,sp,12
  805464:	f800283a 	ret
  805468:	013fffc4 	movi	r4,-1
  80546c:	2005883a 	mov	r2,r4
  805470:	dfc00217 	ldw	ra,8(sp)
  805474:	dc400117 	ldw	r17,4(sp)
  805478:	dc000017 	ldw	r16,0(sp)
  80547c:	dec00304 	addi	sp,sp,12
  805480:	f800283a 	ret
  805484:	080346c0 	call	80346c <__sinit>
  805488:	003fbd06 	br	805380 <__srefill_r+0x24>
  80548c:	20000b1e 	bne	r4,zero,8054bc <__srefill_r+0x160>
  805490:	10800814 	ori	r2,r2,32
  805494:	013fffc4 	movi	r4,-1
  805498:	8080030d 	sth	r2,12(r16)
  80549c:	003fd906 	br	805404 <__srefill_r+0xa8>
  8054a0:	00802074 	movhi	r2,129
  8054a4:	109c2a04 	addi	r2,r2,28840
  8054a8:	11000017 	ldw	r4,0(r2)
  8054ac:	01402034 	movhi	r5,128
  8054b0:	29554804 	addi	r5,r5,21792
  8054b4:	08044fc0 	call	8044fc <_fwalk>
  8054b8:	003fc306 	br	8053c8 <__srefill_r+0x6c>
  8054bc:	10801014 	ori	r2,r2,64
  8054c0:	013fffc4 	movi	r4,-1
  8054c4:	8080030d 	sth	r2,12(r16)
  8054c8:	80000115 	stw	zero,4(r16)
  8054cc:	003fcd06 	br	805404 <__srefill_r+0xa8>
  8054d0:	8809883a 	mov	r4,r17
  8054d4:	800b883a 	mov	r5,r16
  8054d8:	08046a00 	call	8046a0 <__smakebuf_r>
  8054dc:	003fb706 	br	8053bc <__srefill_r+0x60>
  8054e0:	18c01014 	ori	r3,r3,64
  8054e4:	00800244 	movi	r2,9
  8054e8:	013fffc4 	movi	r4,-1
  8054ec:	88800015 	stw	r2,0(r17)
  8054f0:	80c0030d 	sth	r3,12(r16)
  8054f4:	003fc306 	br	805404 <__srefill_r+0xa8>
  8054f8:	8809883a 	mov	r4,r17
  8054fc:	800b883a 	mov	r5,r16
  805500:	0802f400 	call	802f40 <_fflush_r>
  805504:	103fd81e 	bne	r2,zero,805468 <__srefill_r+0x10c>
  805508:	8080030b 	ldhu	r2,12(r16)
  80550c:	80000215 	stw	zero,8(r16)
  805510:	80000615 	stw	zero,24(r16)
  805514:	10bffdcc 	andi	r2,r2,65527
  805518:	8080030d 	sth	r2,12(r16)
  80551c:	003fa206 	br	8053a8 <__srefill_r+0x4c>

00805520 <lflush>:
  805520:	20c0030b 	ldhu	r3,12(r4)
  805524:	01400244 	movi	r5,9
  805528:	0005883a 	mov	r2,zero
  80552c:	18c0024c 	andi	r3,r3,9
  805530:	19400126 	beq	r3,r5,805538 <lflush+0x18>
  805534:	f800283a 	ret
  805538:	080313c1 	jmpi	80313c <fflush>

0080553c <__srget_r>:
  80553c:	defffe04 	addi	sp,sp,-8
  805540:	dc000015 	stw	r16,0(sp)
  805544:	dfc00115 	stw	ra,4(sp)
  805548:	2821883a 	mov	r16,r5
  80554c:	080535c0 	call	80535c <__srefill_r>
  805550:	013fffc4 	movi	r4,-1
  805554:	1000071e 	bne	r2,zero,805574 <__srget_r+0x38>
  805558:	80800117 	ldw	r2,4(r16)
  80555c:	81000017 	ldw	r4,0(r16)
  805560:	10bfffc4 	addi	r2,r2,-1
  805564:	20c00044 	addi	r3,r4,1
  805568:	80800115 	stw	r2,4(r16)
  80556c:	21000003 	ldbu	r4,0(r4)
  805570:	80c00015 	stw	r3,0(r16)
  805574:	2005883a 	mov	r2,r4
  805578:	dfc00117 	ldw	ra,4(sp)
  80557c:	dc000017 	ldw	r16,0(sp)
  805580:	dec00204 	addi	sp,sp,8
  805584:	f800283a 	ret

00805588 <__srget>:
  805588:	00802074 	movhi	r2,129
  80558c:	109c2904 	addi	r2,r2,28836
  805590:	200b883a 	mov	r5,r4
  805594:	11000017 	ldw	r4,0(r2)
  805598:	080553c1 	jmpi	80553c <__srget_r>

0080559c <_sbrk_r>:
  80559c:	defffd04 	addi	sp,sp,-12
  8055a0:	dc000015 	stw	r16,0(sp)
  8055a4:	040020b4 	movhi	r16,130
  8055a8:	84231204 	addi	r16,r16,-29624
  8055ac:	dc400115 	stw	r17,4(sp)
  8055b0:	80000015 	stw	zero,0(r16)
  8055b4:	2023883a 	mov	r17,r4
  8055b8:	2809883a 	mov	r4,r5
  8055bc:	dfc00215 	stw	ra,8(sp)
  8055c0:	0812a000 	call	812a00 <sbrk>
  8055c4:	1007883a 	mov	r3,r2
  8055c8:	00bfffc4 	movi	r2,-1
  8055cc:	18800626 	beq	r3,r2,8055e8 <_sbrk_r+0x4c>
  8055d0:	1805883a 	mov	r2,r3
  8055d4:	dfc00217 	ldw	ra,8(sp)
  8055d8:	dc400117 	ldw	r17,4(sp)
  8055dc:	dc000017 	ldw	r16,0(sp)
  8055e0:	dec00304 	addi	sp,sp,12
  8055e4:	f800283a 	ret
  8055e8:	80800017 	ldw	r2,0(r16)
  8055ec:	103ff826 	beq	r2,zero,8055d0 <_sbrk_r+0x34>
  8055f0:	88800015 	stw	r2,0(r17)
  8055f4:	1805883a 	mov	r2,r3
  8055f8:	dfc00217 	ldw	ra,8(sp)
  8055fc:	dc400117 	ldw	r17,4(sp)
  805600:	dc000017 	ldw	r16,0(sp)
  805604:	dec00304 	addi	sp,sp,12
  805608:	f800283a 	ret

0080560c <eofread>:
  80560c:	0005883a 	mov	r2,zero
  805610:	f800283a 	ret

00805614 <_sscanf_r>:
  805614:	deffe404 	addi	sp,sp,-112
  805618:	dcc01915 	stw	r19,100(sp)
  80561c:	2027883a 	mov	r19,r4
  805620:	dfc01a15 	stw	ra,104(sp)
  805624:	dc401815 	stw	r17,96(sp)
  805628:	d9c01b15 	stw	r7,108(sp)
  80562c:	00808104 	movi	r2,516
  805630:	2809883a 	mov	r4,r5
  805634:	3023883a 	mov	r17,r6
  805638:	d9400115 	stw	r5,4(sp)
  80563c:	d9400515 	stw	r5,20(sp)
  805640:	d880040d 	sth	r2,16(sp)
  805644:	080586c0 	call	80586c <strlen>
  805648:	d8c01b04 	addi	r3,sp,108
  80564c:	d8c00015 	stw	r3,0(sp)
  805650:	180f883a 	mov	r7,r3
  805654:	023fffc4 	movi	r8,-1
  805658:	00c02034 	movhi	r3,128
  80565c:	18d58304 	addi	r3,r3,22028
  805660:	9809883a 	mov	r4,r19
  805664:	880d883a 	mov	r6,r17
  805668:	d9400104 	addi	r5,sp,4
  80566c:	d8800615 	stw	r2,24(sp)
  805670:	d8c00915 	stw	r3,36(sp)
  805674:	da00048d 	sth	r8,18(sp)
  805678:	d8800215 	stw	r2,8(sp)
  80567c:	d8000d15 	stw	zero,52(sp)
  805680:	d8001215 	stw	zero,72(sp)
  805684:	0807bac0 	call	807bac <__svfscanf_r>
  805688:	dfc01a17 	ldw	ra,104(sp)
  80568c:	dcc01917 	ldw	r19,100(sp)
  805690:	dc401817 	ldw	r17,96(sp)
  805694:	dec01c04 	addi	sp,sp,112
  805698:	f800283a 	ret

0080569c <sscanf>:
  80569c:	deffe404 	addi	sp,sp,-112
  8056a0:	dfc01915 	stw	ra,100(sp)
  8056a4:	dc401815 	stw	r17,96(sp)
  8056a8:	d9801a15 	stw	r6,104(sp)
  8056ac:	d9c01b15 	stw	r7,108(sp)
  8056b0:	00808104 	movi	r2,516
  8056b4:	2823883a 	mov	r17,r5
  8056b8:	d9000515 	stw	r4,20(sp)
  8056bc:	d9000115 	stw	r4,4(sp)
  8056c0:	d880040d 	sth	r2,16(sp)
  8056c4:	080586c0 	call	80586c <strlen>
  8056c8:	d8c01a04 	addi	r3,sp,104
  8056cc:	d8c00015 	stw	r3,0(sp)
  8056d0:	00c02074 	movhi	r3,129
  8056d4:	18dc2904 	addi	r3,r3,28836
  8056d8:	19000017 	ldw	r4,0(r3)
  8056dc:	d9c00017 	ldw	r7,0(sp)
  8056e0:	00c02034 	movhi	r3,128
  8056e4:	18d58304 	addi	r3,r3,22028
  8056e8:	023fffc4 	movi	r8,-1
  8056ec:	880d883a 	mov	r6,r17
  8056f0:	d9400104 	addi	r5,sp,4
  8056f4:	d8800615 	stw	r2,24(sp)
  8056f8:	d8c00915 	stw	r3,36(sp)
  8056fc:	da00048d 	sth	r8,18(sp)
  805700:	d8800215 	stw	r2,8(sp)
  805704:	d8000d15 	stw	zero,52(sp)
  805708:	d8001215 	stw	zero,72(sp)
  80570c:	0807bac0 	call	807bac <__svfscanf_r>
  805710:	dfc01917 	ldw	ra,100(sp)
  805714:	dc401817 	ldw	r17,96(sp)
  805718:	dec01c04 	addi	sp,sp,112
  80571c:	f800283a 	ret

00805720 <__sclose>:
  805720:	2940038f 	ldh	r5,14(r5)
  805724:	080969c1 	jmpi	80969c <_close_r>

00805728 <__sseek>:
  805728:	defffe04 	addi	sp,sp,-8
  80572c:	dc000015 	stw	r16,0(sp)
  805730:	2821883a 	mov	r16,r5
  805734:	2940038f 	ldh	r5,14(r5)
  805738:	dfc00115 	stw	ra,4(sp)
  80573c:	080b5a00 	call	80b5a0 <_lseek_r>
  805740:	1007883a 	mov	r3,r2
  805744:	00bfffc4 	movi	r2,-1
  805748:	18800926 	beq	r3,r2,805770 <__sseek+0x48>
  80574c:	8080030b 	ldhu	r2,12(r16)
  805750:	80c01415 	stw	r3,80(r16)
  805754:	10840014 	ori	r2,r2,4096
  805758:	8080030d 	sth	r2,12(r16)
  80575c:	1805883a 	mov	r2,r3
  805760:	dfc00117 	ldw	ra,4(sp)
  805764:	dc000017 	ldw	r16,0(sp)
  805768:	dec00204 	addi	sp,sp,8
  80576c:	f800283a 	ret
  805770:	8080030b 	ldhu	r2,12(r16)
  805774:	10bbffcc 	andi	r2,r2,61439
  805778:	8080030d 	sth	r2,12(r16)
  80577c:	1805883a 	mov	r2,r3
  805780:	dfc00117 	ldw	ra,4(sp)
  805784:	dc000017 	ldw	r16,0(sp)
  805788:	dec00204 	addi	sp,sp,8
  80578c:	f800283a 	ret

00805790 <__swrite>:
  805790:	2880030b 	ldhu	r2,12(r5)
  805794:	defffb04 	addi	sp,sp,-20
  805798:	dcc00315 	stw	r19,12(sp)
  80579c:	1080400c 	andi	r2,r2,256
  8057a0:	dc800215 	stw	r18,8(sp)
  8057a4:	dc400115 	stw	r17,4(sp)
  8057a8:	dc000015 	stw	r16,0(sp)
  8057ac:	3027883a 	mov	r19,r6
  8057b0:	3825883a 	mov	r18,r7
  8057b4:	dfc00415 	stw	ra,16(sp)
  8057b8:	2821883a 	mov	r16,r5
  8057bc:	000d883a 	mov	r6,zero
  8057c0:	01c00084 	movi	r7,2
  8057c4:	2023883a 	mov	r17,r4
  8057c8:	10000226 	beq	r2,zero,8057d4 <__swrite+0x44>
  8057cc:	2940038f 	ldh	r5,14(r5)
  8057d0:	080b5a00 	call	80b5a0 <_lseek_r>
  8057d4:	8080030b 	ldhu	r2,12(r16)
  8057d8:	8140038f 	ldh	r5,14(r16)
  8057dc:	8809883a 	mov	r4,r17
  8057e0:	10bbffcc 	andi	r2,r2,61439
  8057e4:	980d883a 	mov	r6,r19
  8057e8:	900f883a 	mov	r7,r18
  8057ec:	8080030d 	sth	r2,12(r16)
  8057f0:	dfc00417 	ldw	ra,16(sp)
  8057f4:	dcc00317 	ldw	r19,12(sp)
  8057f8:	dc800217 	ldw	r18,8(sp)
  8057fc:	dc400117 	ldw	r17,4(sp)
  805800:	dc000017 	ldw	r16,0(sp)
  805804:	dec00504 	addi	sp,sp,20
  805808:	08093341 	jmpi	809334 <_write_r>

0080580c <__sread>:
  80580c:	defffe04 	addi	sp,sp,-8
  805810:	dc000015 	stw	r16,0(sp)
  805814:	2821883a 	mov	r16,r5
  805818:	2940038f 	ldh	r5,14(r5)
  80581c:	dfc00115 	stw	ra,4(sp)
  805820:	080c8840 	call	80c884 <_read_r>
  805824:	1007883a 	mov	r3,r2
  805828:	10000816 	blt	r2,zero,80584c <__sread+0x40>
  80582c:	80801417 	ldw	r2,80(r16)
  805830:	10c5883a 	add	r2,r2,r3
  805834:	80801415 	stw	r2,80(r16)
  805838:	1805883a 	mov	r2,r3
  80583c:	dfc00117 	ldw	ra,4(sp)
  805840:	dc000017 	ldw	r16,0(sp)
  805844:	dec00204 	addi	sp,sp,8
  805848:	f800283a 	ret
  80584c:	8080030b 	ldhu	r2,12(r16)
  805850:	10bbffcc 	andi	r2,r2,61439
  805854:	8080030d 	sth	r2,12(r16)
  805858:	1805883a 	mov	r2,r3
  80585c:	dfc00117 	ldw	ra,4(sp)
  805860:	dc000017 	ldw	r16,0(sp)
  805864:	dec00204 	addi	sp,sp,8
  805868:	f800283a 	ret

0080586c <strlen>:
  80586c:	208000cc 	andi	r2,r4,3
  805870:	2011883a 	mov	r8,r4
  805874:	1000161e 	bne	r2,zero,8058d0 <strlen+0x64>
  805878:	20c00017 	ldw	r3,0(r4)
  80587c:	017fbff4 	movhi	r5,65279
  805880:	297fbfc4 	addi	r5,r5,-257
  805884:	01e02074 	movhi	r7,32897
  805888:	39e02004 	addi	r7,r7,-32640
  80588c:	1945883a 	add	r2,r3,r5
  805890:	11c4703a 	and	r2,r2,r7
  805894:	00c6303a 	nor	r3,zero,r3
  805898:	1886703a 	and	r3,r3,r2
  80589c:	18000c1e 	bne	r3,zero,8058d0 <strlen+0x64>
  8058a0:	280d883a 	mov	r6,r5
  8058a4:	380b883a 	mov	r5,r7
  8058a8:	21000104 	addi	r4,r4,4
  8058ac:	20800017 	ldw	r2,0(r4)
  8058b0:	1187883a 	add	r3,r2,r6
  8058b4:	1946703a 	and	r3,r3,r5
  8058b8:	0084303a 	nor	r2,zero,r2
  8058bc:	10c4703a 	and	r2,r2,r3
  8058c0:	103ff926 	beq	r2,zero,8058a8 <strlen+0x3c>
  8058c4:	20800007 	ldb	r2,0(r4)
  8058c8:	10000326 	beq	r2,zero,8058d8 <strlen+0x6c>
  8058cc:	21000044 	addi	r4,r4,1
  8058d0:	20800007 	ldb	r2,0(r4)
  8058d4:	103ffd1e 	bne	r2,zero,8058cc <strlen+0x60>
  8058d8:	2205c83a 	sub	r2,r4,r8
  8058dc:	f800283a 	ret

008058e0 <strncmp>:
  8058e0:	30003926 	beq	r6,zero,8059c8 <strncmp+0xe8>
  8058e4:	2144b03a 	or	r2,r4,r5
  8058e8:	108000cc 	andi	r2,r2,3
  8058ec:	028000c4 	movi	r10,3
  8058f0:	1000241e 	bne	r2,zero,805984 <strncmp+0xa4>
  8058f4:	2011883a 	mov	r8,r4
  8058f8:	280f883a 	mov	r7,r5
  8058fc:	51801f2e 	bgeu	r10,r6,80597c <strncmp+0x9c>
  805900:	21000017 	ldw	r4,0(r4)
  805904:	28800017 	ldw	r2,0(r5)
  805908:	20801c1e 	bne	r4,r2,80597c <strncmp+0x9c>
  80590c:	31bfff04 	addi	r6,r6,-4
  805910:	30002d26 	beq	r6,zero,8059c8 <strncmp+0xe8>
  805914:	027fbff4 	movhi	r9,65279
  805918:	4a7fbfc4 	addi	r9,r9,-257
  80591c:	2247883a 	add	r3,r4,r9
  805920:	01602074 	movhi	r5,32897
  805924:	29602004 	addi	r5,r5,-32640
  805928:	1946703a 	and	r3,r3,r5
  80592c:	0104303a 	nor	r2,zero,r4
  805930:	10c4703a 	and	r2,r2,r3
  805934:	1000241e 	bne	r2,zero,8059c8 <strncmp+0xe8>
  805938:	5017883a 	mov	r11,r10
  80593c:	4815883a 	mov	r10,r9
  805940:	2813883a 	mov	r9,r5
  805944:	00000a06 	br	805970 <strncmp+0x90>
  805948:	41000017 	ldw	r4,0(r8)
  80594c:	39400017 	ldw	r5,0(r7)
  805950:	2285883a 	add	r2,r4,r10
  805954:	1244703a 	and	r2,r2,r9
  805958:	0106303a 	nor	r3,zero,r4
  80595c:	1886703a 	and	r3,r3,r2
  805960:	2140061e 	bne	r4,r5,80597c <strncmp+0x9c>
  805964:	31bfff04 	addi	r6,r6,-4
  805968:	30001726 	beq	r6,zero,8059c8 <strncmp+0xe8>
  80596c:	1800161e 	bne	r3,zero,8059c8 <strncmp+0xe8>
  805970:	42000104 	addi	r8,r8,4
  805974:	39c00104 	addi	r7,r7,4
  805978:	59bff336 	bltu	r11,r6,805948 <strncmp+0x68>
  80597c:	4009883a 	mov	r4,r8
  805980:	380b883a 	mov	r5,r7
  805984:	31bfffc4 	addi	r6,r6,-1
  805988:	01ffffc4 	movi	r7,-1
  80598c:	31c00a1e 	bne	r6,r7,8059b8 <strncmp+0xd8>
  805990:	20c00003 	ldbu	r3,0(r4)
  805994:	28800003 	ldbu	r2,0(r5)
  805998:	1885c83a 	sub	r2,r3,r2
  80599c:	f800283a 	ret
  8059a0:	30000926 	beq	r6,zero,8059c8 <strncmp+0xe8>
  8059a4:	18000826 	beq	r3,zero,8059c8 <strncmp+0xe8>
  8059a8:	31bfffc4 	addi	r6,r6,-1
  8059ac:	21000044 	addi	r4,r4,1
  8059b0:	29400044 	addi	r5,r5,1
  8059b4:	31fff626 	beq	r6,r7,805990 <strncmp+0xb0>
  8059b8:	20c00007 	ldb	r3,0(r4)
  8059bc:	28800007 	ldb	r2,0(r5)
  8059c0:	18bff726 	beq	r3,r2,8059a0 <strncmp+0xc0>
  8059c4:	003ff206 	br	805990 <strncmp+0xb0>
  8059c8:	0005883a 	mov	r2,zero
  8059cc:	f800283a 	ret

008059d0 <_times_r>:
  8059d0:	2809883a 	mov	r4,r5
  8059d4:	0812abc1 	jmpi	812abc <times>

008059d8 <__submore>:
  8059d8:	defffa04 	addi	sp,sp,-24
  8059dc:	28c00c17 	ldw	r3,48(r5)
  8059e0:	dc800215 	stw	r18,8(sp)
  8059e4:	2825883a 	mov	r18,r5
  8059e8:	dc000015 	stw	r16,0(sp)
  8059ec:	90801004 	addi	r2,r18,64
  8059f0:	04010004 	movi	r16,1024
  8059f4:	dfc00515 	stw	ra,20(sp)
  8059f8:	dd000415 	stw	r20,16(sp)
  8059fc:	dcc00315 	stw	r19,12(sp)
  805a00:	dc400115 	stw	r17,4(sp)
  805a04:	800b883a 	mov	r5,r16
  805a08:	18801b26 	beq	r3,r2,805a78 <__submore+0xa0>
  805a0c:	94400d17 	ldw	r17,52(r18)
  805a10:	180b883a 	mov	r5,r3
  805a14:	8c69883a 	add	r20,r17,r17
  805a18:	a00d883a 	mov	r6,r20
  805a1c:	080c8fc0 	call	80c8fc <_realloc_r>
  805a20:	1467883a 	add	r19,r2,r17
  805a24:	1021883a 	mov	r16,r2
  805a28:	880d883a 	mov	r6,r17
  805a2c:	9809883a 	mov	r4,r19
  805a30:	100b883a 	mov	r5,r2
  805a34:	10000e26 	beq	r2,zero,805a70 <__submore+0x98>
  805a38:	08050800 	call	805080 <memcpy>
  805a3c:	000d883a 	mov	r6,zero
  805a40:	95000d15 	stw	r20,52(r18)
  805a44:	94c00015 	stw	r19,0(r18)
  805a48:	94000c15 	stw	r16,48(r18)
  805a4c:	3005883a 	mov	r2,r6
  805a50:	dfc00517 	ldw	ra,20(sp)
  805a54:	dd000417 	ldw	r20,16(sp)
  805a58:	dcc00317 	ldw	r19,12(sp)
  805a5c:	dc800217 	ldw	r18,8(sp)
  805a60:	dc400117 	ldw	r17,4(sp)
  805a64:	dc000017 	ldw	r16,0(sp)
  805a68:	dec00604 	addi	sp,sp,24
  805a6c:	f800283a 	ret
  805a70:	01bfffc4 	movi	r6,-1
  805a74:	003ff506 	br	805a4c <__submore+0x74>
  805a78:	080485c0 	call	80485c <_malloc_r>
  805a7c:	1009883a 	mov	r4,r2
  805a80:	1140ff44 	addi	r5,r2,1021
  805a84:	000d883a 	mov	r6,zero
  805a88:	103ff926 	beq	r2,zero,805a70 <__submore+0x98>
  805a8c:	90801083 	ldbu	r2,66(r18)
  805a90:	94000d15 	stw	r16,52(r18)
  805a94:	91000c15 	stw	r4,48(r18)
  805a98:	28800085 	stb	r2,2(r5)
  805a9c:	90c01043 	ldbu	r3,65(r18)
  805aa0:	28c00045 	stb	r3,1(r5)
  805aa4:	90801003 	ldbu	r2,64(r18)
  805aa8:	2080ff45 	stb	r2,1021(r4)
  805aac:	91400015 	stw	r5,0(r18)
  805ab0:	003fe606 	br	805a4c <__submore+0x74>

00805ab4 <_ungetc_r>:
  805ab4:	defffc04 	addi	sp,sp,-16
  805ab8:	00bfffc4 	movi	r2,-1
  805abc:	dc400215 	stw	r17,8(sp)
  805ac0:	dc000115 	stw	r16,4(sp)
  805ac4:	dfc00315 	stw	ra,12(sp)
  805ac8:	2821883a 	mov	r16,r5
  805acc:	2023883a 	mov	r17,r4
  805ad0:	28801826 	beq	r5,r2,805b34 <_ungetc_r+0x80>
  805ad4:	20000226 	beq	r4,zero,805ae0 <_ungetc_r+0x2c>
  805ad8:	20800e17 	ldw	r2,56(r4)
  805adc:	10001b26 	beq	r2,zero,805b4c <_ungetc_r+0x98>
  805ae0:	3100030b 	ldhu	r4,12(r6)
  805ae4:	00bff7c4 	movi	r2,-33
  805ae8:	2084703a 	and	r2,r4,r2
  805aec:	117fffcc 	andi	r5,r2,65535
  805af0:	28c0010c 	andi	r3,r5,4
  805af4:	1009883a 	mov	r4,r2
  805af8:	3080030d 	sth	r2,12(r6)
  805afc:	18003526 	beq	r3,zero,805bd4 <_ungetc_r+0x120>
  805b00:	30800c17 	ldw	r2,48(r6)
  805b04:	84003fcc 	andi	r16,r16,255
  805b08:	10001426 	beq	r2,zero,805b5c <_ungetc_r+0xa8>
  805b0c:	30c00117 	ldw	r3,4(r6)
  805b10:	30800d17 	ldw	r2,52(r6)
  805b14:	1880380e 	bge	r3,r2,805bf8 <_ungetc_r+0x144>
  805b18:	30c00017 	ldw	r3,0(r6)
  805b1c:	19ffffc4 	addi	r7,r3,-1
  805b20:	31c00015 	stw	r7,0(r6)
  805b24:	1c3fffc5 	stb	r16,-1(r3)
  805b28:	30800117 	ldw	r2,4(r6)
  805b2c:	10800044 	addi	r2,r2,1
  805b30:	30800115 	stw	r2,4(r6)
  805b34:	8005883a 	mov	r2,r16
  805b38:	dfc00317 	ldw	ra,12(sp)
  805b3c:	dc400217 	ldw	r17,8(sp)
  805b40:	dc000117 	ldw	r16,4(sp)
  805b44:	dec00404 	addi	sp,sp,16
  805b48:	f800283a 	ret
  805b4c:	d9800015 	stw	r6,0(sp)
  805b50:	080346c0 	call	80346c <__sinit>
  805b54:	d9800017 	ldw	r6,0(sp)
  805b58:	003fe106 	br	805ae0 <_ungetc_r+0x2c>
  805b5c:	30800417 	ldw	r2,16(r6)
  805b60:	10002326 	beq	r2,zero,805bf0 <_ungetc_r+0x13c>
  805b64:	31c00017 	ldw	r7,0(r6)
  805b68:	11c0022e 	bgeu	r2,r7,805b74 <_ungetc_r+0xc0>
  805b6c:	38bfffc3 	ldbu	r2,-1(r7)
  805b70:	80801226 	beq	r16,r2,805bbc <_ungetc_r+0x108>
  805b74:	30c00117 	ldw	r3,4(r6)
  805b78:	00800044 	movi	r2,1
  805b7c:	30800115 	stw	r2,4(r6)
  805b80:	008000c4 	movi	r2,3
  805b84:	31001004 	addi	r4,r6,64
  805b88:	31401084 	addi	r5,r6,66
  805b8c:	30800d15 	stw	r2,52(r6)
  805b90:	8005883a 	mov	r2,r16
  805b94:	30c00f15 	stw	r3,60(r6)
  805b98:	31c00e15 	stw	r7,56(r6)
  805b9c:	31000c15 	stw	r4,48(r6)
  805ba0:	31400015 	stw	r5,0(r6)
  805ba4:	34001085 	stb	r16,66(r6)
  805ba8:	dfc00317 	ldw	ra,12(sp)
  805bac:	dc400217 	ldw	r17,8(sp)
  805bb0:	dc000117 	ldw	r16,4(sp)
  805bb4:	dec00404 	addi	sp,sp,16
  805bb8:	f800283a 	ret
  805bbc:	30800117 	ldw	r2,4(r6)
  805bc0:	39ffffc4 	addi	r7,r7,-1
  805bc4:	31c00015 	stw	r7,0(r6)
  805bc8:	10800044 	addi	r2,r2,1
  805bcc:	30800115 	stw	r2,4(r6)
  805bd0:	003fd806 	br	805b34 <_ungetc_r+0x80>
  805bd4:	2880040c 	andi	r2,r5,16
  805bd8:	10000d26 	beq	r2,zero,805c10 <_ungetc_r+0x15c>
  805bdc:	2880020c 	andi	r2,r5,8
  805be0:	10000d1e 	bne	r2,zero,805c18 <_ungetc_r+0x164>
  805be4:	20800114 	ori	r2,r4,4
  805be8:	3080030d 	sth	r2,12(r6)
  805bec:	003fc406 	br	805b00 <_ungetc_r+0x4c>
  805bf0:	31c00017 	ldw	r7,0(r6)
  805bf4:	003fdf06 	br	805b74 <_ungetc_r+0xc0>
  805bf8:	300b883a 	mov	r5,r6
  805bfc:	8809883a 	mov	r4,r17
  805c00:	d9800015 	stw	r6,0(sp)
  805c04:	08059d80 	call	8059d8 <__submore>
  805c08:	d9800017 	ldw	r6,0(sp)
  805c0c:	103fc226 	beq	r2,zero,805b18 <_ungetc_r+0x64>
  805c10:	043fffc4 	movi	r16,-1
  805c14:	003fc706 	br	805b34 <_ungetc_r+0x80>
  805c18:	300b883a 	mov	r5,r6
  805c1c:	8809883a 	mov	r4,r17
  805c20:	d9800015 	stw	r6,0(sp)
  805c24:	0802f400 	call	802f40 <_fflush_r>
  805c28:	d9800017 	ldw	r6,0(sp)
  805c2c:	103ff81e 	bne	r2,zero,805c10 <_ungetc_r+0x15c>
  805c30:	3100030b 	ldhu	r4,12(r6)
  805c34:	00bffdc4 	movi	r2,-9
  805c38:	30000215 	stw	zero,8(r6)
  805c3c:	2084703a 	and	r2,r4,r2
  805c40:	1009883a 	mov	r4,r2
  805c44:	3080030d 	sth	r2,12(r6)
  805c48:	30000615 	stw	zero,24(r6)
  805c4c:	003fe506 	br	805be4 <_ungetc_r+0x130>

00805c50 <ungetc>:
  805c50:	01802074 	movhi	r6,129
  805c54:	319c2904 	addi	r6,r6,28836
  805c58:	2007883a 	mov	r3,r4
  805c5c:	31000017 	ldw	r4,0(r6)
  805c60:	280d883a 	mov	r6,r5
  805c64:	180b883a 	mov	r5,r3
  805c68:	0805ab41 	jmpi	805ab4 <_ungetc_r>

00805c6c <__sprint_r>:
  805c6c:	30800217 	ldw	r2,8(r6)
  805c70:	defffe04 	addi	sp,sp,-8
  805c74:	dc000015 	stw	r16,0(sp)
  805c78:	dfc00115 	stw	ra,4(sp)
  805c7c:	3021883a 	mov	r16,r6
  805c80:	0007883a 	mov	r3,zero
  805c84:	1000061e 	bne	r2,zero,805ca0 <__sprint_r+0x34>
  805c88:	1805883a 	mov	r2,r3
  805c8c:	30000115 	stw	zero,4(r6)
  805c90:	dfc00117 	ldw	ra,4(sp)
  805c94:	dc000017 	ldw	r16,0(sp)
  805c98:	dec00204 	addi	sp,sp,8
  805c9c:	f800283a 	ret
  805ca0:	080afa40 	call	80afa4 <__sfvwrite_r>
  805ca4:	1007883a 	mov	r3,r2
  805ca8:	1805883a 	mov	r2,r3
  805cac:	80000115 	stw	zero,4(r16)
  805cb0:	80000215 	stw	zero,8(r16)
  805cb4:	dfc00117 	ldw	ra,4(sp)
  805cb8:	dc000017 	ldw	r16,0(sp)
  805cbc:	dec00204 	addi	sp,sp,8
  805cc0:	f800283a 	ret

00805cc4 <___vfprintf_internal_r>:
  805cc4:	defea404 	addi	sp,sp,-1392
  805cc8:	dd815815 	stw	r22,1376(sp)
  805ccc:	dc015215 	stw	r16,1352(sp)
  805cd0:	d9c15115 	stw	r7,1348(sp)
  805cd4:	dfc15b15 	stw	ra,1388(sp)
  805cd8:	df015a15 	stw	fp,1384(sp)
  805cdc:	ddc15915 	stw	r23,1380(sp)
  805ce0:	dd415715 	stw	r21,1372(sp)
  805ce4:	dd015615 	stw	r20,1368(sp)
  805ce8:	dcc15515 	stw	r19,1364(sp)
  805cec:	dc815415 	stw	r18,1360(sp)
  805cf0:	dc415315 	stw	r17,1356(sp)
  805cf4:	282d883a 	mov	r22,r5
  805cf8:	3021883a 	mov	r16,r6
  805cfc:	d9014f15 	stw	r4,1340(sp)
  805d00:	080b4e40 	call	80b4e4 <_localeconv_r>
  805d04:	10800017 	ldw	r2,0(r2)
  805d08:	d9c15117 	ldw	r7,1348(sp)
  805d0c:	d8814915 	stw	r2,1316(sp)
  805d10:	d8814f17 	ldw	r2,1340(sp)
  805d14:	10000226 	beq	r2,zero,805d20 <___vfprintf_internal_r+0x5c>
  805d18:	10800e17 	ldw	r2,56(r2)
  805d1c:	10020d26 	beq	r2,zero,806554 <___vfprintf_internal_r+0x890>
  805d20:	b080030b 	ldhu	r2,12(r22)
  805d24:	1080020c 	andi	r2,r2,8
  805d28:	10020e26 	beq	r2,zero,806564 <___vfprintf_internal_r+0x8a0>
  805d2c:	b0800417 	ldw	r2,16(r22)
  805d30:	10020c26 	beq	r2,zero,806564 <___vfprintf_internal_r+0x8a0>
  805d34:	b200030b 	ldhu	r8,12(r22)
  805d38:	00800284 	movi	r2,10
  805d3c:	40c0068c 	andi	r3,r8,26
  805d40:	18802f1e 	bne	r3,r2,805e00 <___vfprintf_internal_r+0x13c>
  805d44:	b080038f 	ldh	r2,14(r22)
  805d48:	10002d16 	blt	r2,zero,805e00 <___vfprintf_internal_r+0x13c>
  805d4c:	b240038b 	ldhu	r9,14(r22)
  805d50:	b2800717 	ldw	r10,28(r22)
  805d54:	b2c00917 	ldw	r11,36(r22)
  805d58:	d9014f17 	ldw	r4,1340(sp)
  805d5c:	dc402904 	addi	r17,sp,164
  805d60:	d8804004 	addi	r2,sp,256
  805d64:	00c10004 	movi	r3,1024
  805d68:	423fff4c 	andi	r8,r8,65533
  805d6c:	800d883a 	mov	r6,r16
  805d70:	880b883a 	mov	r5,r17
  805d74:	da002c0d 	sth	r8,176(sp)
  805d78:	da402c8d 	sth	r9,178(sp)
  805d7c:	da803015 	stw	r10,192(sp)
  805d80:	dac03215 	stw	r11,200(sp)
  805d84:	d8802d15 	stw	r2,180(sp)
  805d88:	d8c02e15 	stw	r3,184(sp)
  805d8c:	d8802915 	stw	r2,164(sp)
  805d90:	d8c02b15 	stw	r3,172(sp)
  805d94:	d8002f15 	stw	zero,188(sp)
  805d98:	0805cc40 	call	805cc4 <___vfprintf_internal_r>
  805d9c:	d8814b15 	stw	r2,1324(sp)
  805da0:	10000416 	blt	r2,zero,805db4 <___vfprintf_internal_r+0xf0>
  805da4:	d9014f17 	ldw	r4,1340(sp)
  805da8:	880b883a 	mov	r5,r17
  805dac:	0802f400 	call	802f40 <_fflush_r>
  805db0:	1002321e 	bne	r2,zero,80667c <___vfprintf_internal_r+0x9b8>
  805db4:	d8802c0b 	ldhu	r2,176(sp)
  805db8:	1080100c 	andi	r2,r2,64
  805dbc:	10000326 	beq	r2,zero,805dcc <___vfprintf_internal_r+0x108>
  805dc0:	b080030b 	ldhu	r2,12(r22)
  805dc4:	10801014 	ori	r2,r2,64
  805dc8:	b080030d 	sth	r2,12(r22)
  805dcc:	d8814b17 	ldw	r2,1324(sp)
  805dd0:	dfc15b17 	ldw	ra,1388(sp)
  805dd4:	df015a17 	ldw	fp,1384(sp)
  805dd8:	ddc15917 	ldw	r23,1380(sp)
  805ddc:	dd815817 	ldw	r22,1376(sp)
  805de0:	dd415717 	ldw	r21,1372(sp)
  805de4:	dd015617 	ldw	r20,1368(sp)
  805de8:	dcc15517 	ldw	r19,1364(sp)
  805dec:	dc815417 	ldw	r18,1360(sp)
  805df0:	dc415317 	ldw	r17,1356(sp)
  805df4:	dc015217 	ldw	r16,1352(sp)
  805df8:	dec15c04 	addi	sp,sp,1392
  805dfc:	f800283a 	ret
  805e00:	0005883a 	mov	r2,zero
  805e04:	0007883a 	mov	r3,zero
  805e08:	dd401904 	addi	r21,sp,100
  805e0c:	d8814215 	stw	r2,1288(sp)
  805e10:	802f883a 	mov	r23,r16
  805e14:	d8c14315 	stw	r3,1292(sp)
  805e18:	d8014b15 	stw	zero,1324(sp)
  805e1c:	d8014815 	stw	zero,1312(sp)
  805e20:	d8014415 	stw	zero,1296(sp)
  805e24:	d8014715 	stw	zero,1308(sp)
  805e28:	dd400c15 	stw	r21,48(sp)
  805e2c:	d8000e15 	stw	zero,56(sp)
  805e30:	d8000d15 	stw	zero,52(sp)
  805e34:	b8800007 	ldb	r2,0(r23)
  805e38:	10001926 	beq	r2,zero,805ea0 <___vfprintf_internal_r+0x1dc>
  805e3c:	00c00944 	movi	r3,37
  805e40:	10c01726 	beq	r2,r3,805ea0 <___vfprintf_internal_r+0x1dc>
  805e44:	b821883a 	mov	r16,r23
  805e48:	00000106 	br	805e50 <___vfprintf_internal_r+0x18c>
  805e4c:	10c00326 	beq	r2,r3,805e5c <___vfprintf_internal_r+0x198>
  805e50:	84000044 	addi	r16,r16,1
  805e54:	80800007 	ldb	r2,0(r16)
  805e58:	103ffc1e 	bne	r2,zero,805e4c <___vfprintf_internal_r+0x188>
  805e5c:	85e7c83a 	sub	r19,r16,r23
  805e60:	98000e26 	beq	r19,zero,805e9c <___vfprintf_internal_r+0x1d8>
  805e64:	dc800e17 	ldw	r18,56(sp)
  805e68:	dc400d17 	ldw	r17,52(sp)
  805e6c:	008001c4 	movi	r2,7
  805e70:	94e5883a 	add	r18,r18,r19
  805e74:	8c400044 	addi	r17,r17,1
  805e78:	adc00015 	stw	r23,0(r21)
  805e7c:	dc800e15 	stw	r18,56(sp)
  805e80:	acc00115 	stw	r19,4(r21)
  805e84:	dc400d15 	stw	r17,52(sp)
  805e88:	14428b16 	blt	r2,r17,8068b8 <___vfprintf_internal_r+0xbf4>
  805e8c:	ad400204 	addi	r21,r21,8
  805e90:	d9014b17 	ldw	r4,1324(sp)
  805e94:	24c9883a 	add	r4,r4,r19
  805e98:	d9014b15 	stw	r4,1324(sp)
  805e9c:	802f883a 	mov	r23,r16
  805ea0:	b8800007 	ldb	r2,0(r23)
  805ea4:	10013c26 	beq	r2,zero,806398 <___vfprintf_internal_r+0x6d4>
  805ea8:	bdc00044 	addi	r23,r23,1
  805eac:	d8000405 	stb	zero,16(sp)
  805eb0:	b8c00007 	ldb	r3,0(r23)
  805eb4:	04ffffc4 	movi	r19,-1
  805eb8:	d8014c15 	stw	zero,1328(sp)
  805ebc:	d8014a15 	stw	zero,1320(sp)
  805ec0:	d8c14d15 	stw	r3,1332(sp)
  805ec4:	bdc00044 	addi	r23,r23,1
  805ec8:	d9414d17 	ldw	r5,1332(sp)
  805ecc:	00801604 	movi	r2,88
  805ed0:	28fff804 	addi	r3,r5,-32
  805ed4:	10c06036 	bltu	r2,r3,806058 <___vfprintf_internal_r+0x394>
  805ed8:	18c5883a 	add	r2,r3,r3
  805edc:	1085883a 	add	r2,r2,r2
  805ee0:	00c02034 	movhi	r3,128
  805ee4:	18d7bd04 	addi	r3,r3,24308
  805ee8:	10c5883a 	add	r2,r2,r3
  805eec:	11000017 	ldw	r4,0(r2)
  805ef0:	2000683a 	jmp	r4
  805ef4:	00806e68 	cmpgeui	r2,zero,441
  805ef8:	00806058 	cmpnei	r2,zero,385
  805efc:	00806058 	cmpnei	r2,zero,385
  805f00:	00806e54 	movui	r2,441
  805f04:	00806058 	cmpnei	r2,zero,385
  805f08:	00806058 	cmpnei	r2,zero,385
  805f0c:	00806058 	cmpnei	r2,zero,385
  805f10:	00806058 	cmpnei	r2,zero,385
  805f14:	00806058 	cmpnei	r2,zero,385
  805f18:	00806058 	cmpnei	r2,zero,385
  805f1c:	00806c34 	movhi	r2,432
  805f20:	00806e44 	movi	r2,441
  805f24:	00806058 	cmpnei	r2,zero,385
  805f28:	00806c4c 	andi	r2,zero,433
  805f2c:	00806eec 	andhi	r2,zero,443
  805f30:	00806058 	cmpnei	r2,zero,385
  805f34:	00806ed8 	cmpnei	r2,zero,443
  805f38:	00806e94 	movui	r2,442
  805f3c:	00806e94 	movui	r2,442
  805f40:	00806e94 	movui	r2,442
  805f44:	00806e94 	movui	r2,442
  805f48:	00806e94 	movui	r2,442
  805f4c:	00806e94 	movui	r2,442
  805f50:	00806e94 	movui	r2,442
  805f54:	00806e94 	movui	r2,442
  805f58:	00806e94 	movui	r2,442
  805f5c:	00806058 	cmpnei	r2,zero,385
  805f60:	00806058 	cmpnei	r2,zero,385
  805f64:	00806058 	cmpnei	r2,zero,385
  805f68:	00806058 	cmpnei	r2,zero,385
  805f6c:	00806058 	cmpnei	r2,zero,385
  805f70:	00806058 	cmpnei	r2,zero,385
  805f74:	00806058 	cmpnei	r2,zero,385
  805f78:	00806058 	cmpnei	r2,zero,385
  805f7c:	00806058 	cmpnei	r2,zero,385
  805f80:	00806058 	cmpnei	r2,zero,385
  805f84:	008066b0 	cmpltui	r2,zero,410
  805f88:	00806d1c 	xori	r2,zero,436
  805f8c:	00806058 	cmpnei	r2,zero,385
  805f90:	00806d1c 	xori	r2,zero,436
  805f94:	00806058 	cmpnei	r2,zero,385
  805f98:	00806058 	cmpnei	r2,zero,385
  805f9c:	00806058 	cmpnei	r2,zero,385
  805fa0:	00806058 	cmpnei	r2,zero,385
  805fa4:	00806e80 	call	806e8 <__alt_mem_sdram-0x77f918>
  805fa8:	00806058 	cmpnei	r2,zero,385
  805fac:	00806058 	cmpnei	r2,zero,385
  805fb0:	00806764 	muli	r2,zero,413
  805fb4:	00806058 	cmpnei	r2,zero,385
  805fb8:	00806058 	cmpnei	r2,zero,385
  805fbc:	00806058 	cmpnei	r2,zero,385
  805fc0:	00806058 	cmpnei	r2,zero,385
  805fc4:	00806058 	cmpnei	r2,zero,385
  805fc8:	008067b0 	cmpltui	r2,zero,414
  805fcc:	00806058 	cmpnei	r2,zero,385
  805fd0:	00806058 	cmpnei	r2,zero,385
  805fd4:	00806dd0 	cmplti	r2,zero,439
  805fd8:	00806058 	cmpnei	r2,zero,385
  805fdc:	00806058 	cmpnei	r2,zero,385
  805fe0:	00806058 	cmpnei	r2,zero,385
  805fe4:	00806058 	cmpnei	r2,zero,385
  805fe8:	00806058 	cmpnei	r2,zero,385
  805fec:	00806058 	cmpnei	r2,zero,385
  805ff0:	00806058 	cmpnei	r2,zero,385
  805ff4:	00806058 	cmpnei	r2,zero,385
  805ff8:	00806058 	cmpnei	r2,zero,385
  805ffc:	00806058 	cmpnei	r2,zero,385
  806000:	00806da4 	muli	r2,zero,438
  806004:	008066bc 	xorhi	r2,zero,410
  806008:	00806d1c 	xori	r2,zero,436
  80600c:	00806d1c 	xori	r2,zero,436
  806010:	00806d1c 	xori	r2,zero,436
  806014:	00806d08 	cmpgei	r2,zero,436
  806018:	008066bc 	xorhi	r2,zero,410
  80601c:	00806058 	cmpnei	r2,zero,385
  806020:	00806058 	cmpnei	r2,zero,385
  806024:	00806c90 	cmplti	r2,zero,434
  806028:	00806058 	cmpnei	r2,zero,385
  80602c:	00806c60 	cmpeqi	r2,zero,433
  806030:	00806770 	cmpltui	r2,zero,413
  806034:	00806cc0 	call	806cc <__alt_mem_sdram-0x77f934>
  806038:	00806cac 	andhi	r2,zero,434
  80603c:	00806058 	cmpnei	r2,zero,385
  806040:	00806f54 	movui	r2,445
  806044:	00806058 	cmpnei	r2,zero,385
  806048:	008067bc 	xorhi	r2,zero,414
  80604c:	00806058 	cmpnei	r2,zero,385
  806050:	00806058 	cmpnei	r2,zero,385
  806054:	00806e34 	movhi	r2,440
  806058:	d9014d17 	ldw	r4,1332(sp)
  80605c:	2000ce26 	beq	r4,zero,806398 <___vfprintf_internal_r+0x6d4>
  806060:	01400044 	movi	r5,1
  806064:	d9800f04 	addi	r6,sp,60
  806068:	d9c14015 	stw	r7,1280(sp)
  80606c:	d9414515 	stw	r5,1300(sp)
  806070:	d9814115 	stw	r6,1284(sp)
  806074:	280f883a 	mov	r7,r5
  806078:	d9000f05 	stb	r4,60(sp)
  80607c:	d8000405 	stb	zero,16(sp)
  806080:	d8014615 	stw	zero,1304(sp)
  806084:	d8c14c17 	ldw	r3,1328(sp)
  806088:	1880008c 	andi	r2,r3,2
  80608c:	1005003a 	cmpeq	r2,r2,zero
  806090:	d8815015 	stw	r2,1344(sp)
  806094:	1000031e 	bne	r2,zero,8060a4 <___vfprintf_internal_r+0x3e0>
  806098:	d9014517 	ldw	r4,1300(sp)
  80609c:	21000084 	addi	r4,r4,2
  8060a0:	d9014515 	stw	r4,1300(sp)
  8060a4:	d9414c17 	ldw	r5,1328(sp)
  8060a8:	2940210c 	andi	r5,r5,132
  8060ac:	d9414e15 	stw	r5,1336(sp)
  8060b0:	28002d1e 	bne	r5,zero,806168 <___vfprintf_internal_r+0x4a4>
  8060b4:	d9814a17 	ldw	r6,1320(sp)
  8060b8:	d8814517 	ldw	r2,1300(sp)
  8060bc:	30a1c83a 	sub	r16,r6,r2
  8060c0:	0400290e 	bge	zero,r16,806168 <___vfprintf_internal_r+0x4a4>
  8060c4:	00800404 	movi	r2,16
  8060c8:	14045e0e 	bge	r2,r16,807244 <___vfprintf_internal_r+0x1580>
  8060cc:	dc800e17 	ldw	r18,56(sp)
  8060d0:	dc400d17 	ldw	r17,52(sp)
  8060d4:	1027883a 	mov	r19,r2
  8060d8:	07002074 	movhi	fp,129
  8060dc:	e714f584 	addi	fp,fp,21462
  8060e0:	050001c4 	movi	r20,7
  8060e4:	00000306 	br	8060f4 <___vfprintf_internal_r+0x430>
  8060e8:	843ffc04 	addi	r16,r16,-16
  8060ec:	ad400204 	addi	r21,r21,8
  8060f0:	9c00130e 	bge	r19,r16,806140 <___vfprintf_internal_r+0x47c>
  8060f4:	94800404 	addi	r18,r18,16
  8060f8:	8c400044 	addi	r17,r17,1
  8060fc:	af000015 	stw	fp,0(r21)
  806100:	acc00115 	stw	r19,4(r21)
  806104:	dc800e15 	stw	r18,56(sp)
  806108:	dc400d15 	stw	r17,52(sp)
  80610c:	a47ff60e 	bge	r20,r17,8060e8 <___vfprintf_internal_r+0x424>
  806110:	d9014f17 	ldw	r4,1340(sp)
  806114:	b00b883a 	mov	r5,r22
  806118:	d9800c04 	addi	r6,sp,48
  80611c:	d9c15115 	stw	r7,1348(sp)
  806120:	0805c6c0 	call	805c6c <__sprint_r>
  806124:	d9c15117 	ldw	r7,1348(sp)
  806128:	10009e1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  80612c:	843ffc04 	addi	r16,r16,-16
  806130:	dc800e17 	ldw	r18,56(sp)
  806134:	dc400d17 	ldw	r17,52(sp)
  806138:	dd401904 	addi	r21,sp,100
  80613c:	9c3fed16 	blt	r19,r16,8060f4 <___vfprintf_internal_r+0x430>
  806140:	9425883a 	add	r18,r18,r16
  806144:	8c400044 	addi	r17,r17,1
  806148:	008001c4 	movi	r2,7
  80614c:	af000015 	stw	fp,0(r21)
  806150:	ac000115 	stw	r16,4(r21)
  806154:	dc800e15 	stw	r18,56(sp)
  806158:	dc400d15 	stw	r17,52(sp)
  80615c:	1441f516 	blt	r2,r17,806934 <___vfprintf_internal_r+0xc70>
  806160:	ad400204 	addi	r21,r21,8
  806164:	00000206 	br	806170 <___vfprintf_internal_r+0x4ac>
  806168:	dc800e17 	ldw	r18,56(sp)
  80616c:	dc400d17 	ldw	r17,52(sp)
  806170:	d8800407 	ldb	r2,16(sp)
  806174:	10000b26 	beq	r2,zero,8061a4 <___vfprintf_internal_r+0x4e0>
  806178:	00800044 	movi	r2,1
  80617c:	94800044 	addi	r18,r18,1
  806180:	8c400044 	addi	r17,r17,1
  806184:	a8800115 	stw	r2,4(r21)
  806188:	d8c00404 	addi	r3,sp,16
  80618c:	008001c4 	movi	r2,7
  806190:	a8c00015 	stw	r3,0(r21)
  806194:	dc800e15 	stw	r18,56(sp)
  806198:	dc400d15 	stw	r17,52(sp)
  80619c:	1441da16 	blt	r2,r17,806908 <___vfprintf_internal_r+0xc44>
  8061a0:	ad400204 	addi	r21,r21,8
  8061a4:	d9015017 	ldw	r4,1344(sp)
  8061a8:	20000b1e 	bne	r4,zero,8061d8 <___vfprintf_internal_r+0x514>
  8061ac:	d8800444 	addi	r2,sp,17
  8061b0:	94800084 	addi	r18,r18,2
  8061b4:	8c400044 	addi	r17,r17,1
  8061b8:	a8800015 	stw	r2,0(r21)
  8061bc:	00c00084 	movi	r3,2
  8061c0:	008001c4 	movi	r2,7
  8061c4:	a8c00115 	stw	r3,4(r21)
  8061c8:	dc800e15 	stw	r18,56(sp)
  8061cc:	dc400d15 	stw	r17,52(sp)
  8061d0:	1441c216 	blt	r2,r17,8068dc <___vfprintf_internal_r+0xc18>
  8061d4:	ad400204 	addi	r21,r21,8
  8061d8:	d9414e17 	ldw	r5,1336(sp)
  8061dc:	00802004 	movi	r2,128
  8061e0:	2880b126 	beq	r5,r2,8064a8 <___vfprintf_internal_r+0x7e4>
  8061e4:	d8c14617 	ldw	r3,1304(sp)
  8061e8:	19e1c83a 	sub	r16,r3,r7
  8061ec:	0400260e 	bge	zero,r16,806288 <___vfprintf_internal_r+0x5c4>
  8061f0:	00800404 	movi	r2,16
  8061f4:	1403cf0e 	bge	r2,r16,807134 <___vfprintf_internal_r+0x1470>
  8061f8:	1027883a 	mov	r19,r2
  8061fc:	07002074 	movhi	fp,129
  806200:	e714f184 	addi	fp,fp,21446
  806204:	050001c4 	movi	r20,7
  806208:	00000306 	br	806218 <___vfprintf_internal_r+0x554>
  80620c:	843ffc04 	addi	r16,r16,-16
  806210:	ad400204 	addi	r21,r21,8
  806214:	9c00130e 	bge	r19,r16,806264 <___vfprintf_internal_r+0x5a0>
  806218:	94800404 	addi	r18,r18,16
  80621c:	8c400044 	addi	r17,r17,1
  806220:	af000015 	stw	fp,0(r21)
  806224:	acc00115 	stw	r19,4(r21)
  806228:	dc800e15 	stw	r18,56(sp)
  80622c:	dc400d15 	stw	r17,52(sp)
  806230:	a47ff60e 	bge	r20,r17,80620c <___vfprintf_internal_r+0x548>
  806234:	d9014f17 	ldw	r4,1340(sp)
  806238:	b00b883a 	mov	r5,r22
  80623c:	d9800c04 	addi	r6,sp,48
  806240:	d9c15115 	stw	r7,1348(sp)
  806244:	0805c6c0 	call	805c6c <__sprint_r>
  806248:	d9c15117 	ldw	r7,1348(sp)
  80624c:	1000551e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806250:	843ffc04 	addi	r16,r16,-16
  806254:	dc800e17 	ldw	r18,56(sp)
  806258:	dc400d17 	ldw	r17,52(sp)
  80625c:	dd401904 	addi	r21,sp,100
  806260:	9c3fed16 	blt	r19,r16,806218 <___vfprintf_internal_r+0x554>
  806264:	9425883a 	add	r18,r18,r16
  806268:	8c400044 	addi	r17,r17,1
  80626c:	008001c4 	movi	r2,7
  806270:	af000015 	stw	fp,0(r21)
  806274:	ac000115 	stw	r16,4(r21)
  806278:	dc800e15 	stw	r18,56(sp)
  80627c:	dc400d15 	stw	r17,52(sp)
  806280:	14418216 	blt	r2,r17,80688c <___vfprintf_internal_r+0xbc8>
  806284:	ad400204 	addi	r21,r21,8
  806288:	d9014c17 	ldw	r4,1328(sp)
  80628c:	2080400c 	andi	r2,r4,256
  806290:	10004a1e 	bne	r2,zero,8063bc <___vfprintf_internal_r+0x6f8>
  806294:	d9414117 	ldw	r5,1284(sp)
  806298:	91e5883a 	add	r18,r18,r7
  80629c:	8c400044 	addi	r17,r17,1
  8062a0:	008001c4 	movi	r2,7
  8062a4:	a9400015 	stw	r5,0(r21)
  8062a8:	a9c00115 	stw	r7,4(r21)
  8062ac:	dc800e15 	stw	r18,56(sp)
  8062b0:	dc400d15 	stw	r17,52(sp)
  8062b4:	14416716 	blt	r2,r17,806854 <___vfprintf_internal_r+0xb90>
  8062b8:	a8c00204 	addi	r3,r21,8
  8062bc:	d9814c17 	ldw	r6,1328(sp)
  8062c0:	3080010c 	andi	r2,r6,4
  8062c4:	10002826 	beq	r2,zero,806368 <___vfprintf_internal_r+0x6a4>
  8062c8:	d8814a17 	ldw	r2,1320(sp)
  8062cc:	d9014517 	ldw	r4,1300(sp)
  8062d0:	1121c83a 	sub	r16,r2,r4
  8062d4:	0400240e 	bge	zero,r16,806368 <___vfprintf_internal_r+0x6a4>
  8062d8:	00800404 	movi	r2,16
  8062dc:	1404550e 	bge	r2,r16,807434 <___vfprintf_internal_r+0x1770>
  8062e0:	dc400d17 	ldw	r17,52(sp)
  8062e4:	1027883a 	mov	r19,r2
  8062e8:	07002074 	movhi	fp,129
  8062ec:	e714f584 	addi	fp,fp,21462
  8062f0:	050001c4 	movi	r20,7
  8062f4:	00000306 	br	806304 <___vfprintf_internal_r+0x640>
  8062f8:	843ffc04 	addi	r16,r16,-16
  8062fc:	18c00204 	addi	r3,r3,8
  806300:	9c00110e 	bge	r19,r16,806348 <___vfprintf_internal_r+0x684>
  806304:	94800404 	addi	r18,r18,16
  806308:	8c400044 	addi	r17,r17,1
  80630c:	1f000015 	stw	fp,0(r3)
  806310:	1cc00115 	stw	r19,4(r3)
  806314:	dc800e15 	stw	r18,56(sp)
  806318:	dc400d15 	stw	r17,52(sp)
  80631c:	a47ff60e 	bge	r20,r17,8062f8 <___vfprintf_internal_r+0x634>
  806320:	d9014f17 	ldw	r4,1340(sp)
  806324:	b00b883a 	mov	r5,r22
  806328:	d9800c04 	addi	r6,sp,48
  80632c:	0805c6c0 	call	805c6c <__sprint_r>
  806330:	10001c1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806334:	843ffc04 	addi	r16,r16,-16
  806338:	dc800e17 	ldw	r18,56(sp)
  80633c:	dc400d17 	ldw	r17,52(sp)
  806340:	d8c01904 	addi	r3,sp,100
  806344:	9c3fef16 	blt	r19,r16,806304 <___vfprintf_internal_r+0x640>
  806348:	9425883a 	add	r18,r18,r16
  80634c:	8c400044 	addi	r17,r17,1
  806350:	008001c4 	movi	r2,7
  806354:	1f000015 	stw	fp,0(r3)
  806358:	1c000115 	stw	r16,4(r3)
  80635c:	dc800e15 	stw	r18,56(sp)
  806360:	dc400d15 	stw	r17,52(sp)
  806364:	1440cb16 	blt	r2,r17,806694 <___vfprintf_internal_r+0x9d0>
  806368:	d8814a17 	ldw	r2,1320(sp)
  80636c:	d9414517 	ldw	r5,1300(sp)
  806370:	1140010e 	bge	r2,r5,806378 <___vfprintf_internal_r+0x6b4>
  806374:	2805883a 	mov	r2,r5
  806378:	d9814b17 	ldw	r6,1324(sp)
  80637c:	308d883a 	add	r6,r6,r2
  806380:	d9814b15 	stw	r6,1324(sp)
  806384:	90013b1e 	bne	r18,zero,806874 <___vfprintf_internal_r+0xbb0>
  806388:	d9c14017 	ldw	r7,1280(sp)
  80638c:	dd401904 	addi	r21,sp,100
  806390:	d8000d15 	stw	zero,52(sp)
  806394:	003ea706 	br	805e34 <___vfprintf_internal_r+0x170>
  806398:	d8800e17 	ldw	r2,56(sp)
  80639c:	1005451e 	bne	r2,zero,8078b4 <___vfprintf_internal_r+0x1bf0>
  8063a0:	d8000d15 	stw	zero,52(sp)
  8063a4:	b080030b 	ldhu	r2,12(r22)
  8063a8:	1080100c 	andi	r2,r2,64
  8063ac:	103e8726 	beq	r2,zero,805dcc <___vfprintf_internal_r+0x108>
  8063b0:	00bfffc4 	movi	r2,-1
  8063b4:	d8814b15 	stw	r2,1324(sp)
  8063b8:	003e8406 	br	805dcc <___vfprintf_internal_r+0x108>
  8063bc:	d9814d17 	ldw	r6,1332(sp)
  8063c0:	00801944 	movi	r2,101
  8063c4:	11806e16 	blt	r2,r6,806580 <___vfprintf_internal_r+0x8bc>
  8063c8:	d9414717 	ldw	r5,1308(sp)
  8063cc:	00c00044 	movi	r3,1
  8063d0:	1943490e 	bge	r3,r5,8070f8 <___vfprintf_internal_r+0x1434>
  8063d4:	d8814117 	ldw	r2,1284(sp)
  8063d8:	94800044 	addi	r18,r18,1
  8063dc:	8c400044 	addi	r17,r17,1
  8063e0:	a8800015 	stw	r2,0(r21)
  8063e4:	008001c4 	movi	r2,7
  8063e8:	a8c00115 	stw	r3,4(r21)
  8063ec:	dc800e15 	stw	r18,56(sp)
  8063f0:	dc400d15 	stw	r17,52(sp)
  8063f4:	1441ca16 	blt	r2,r17,806b20 <___vfprintf_internal_r+0xe5c>
  8063f8:	a8c00204 	addi	r3,r21,8
  8063fc:	d9014917 	ldw	r4,1316(sp)
  806400:	00800044 	movi	r2,1
  806404:	94800044 	addi	r18,r18,1
  806408:	8c400044 	addi	r17,r17,1
  80640c:	18800115 	stw	r2,4(r3)
  806410:	008001c4 	movi	r2,7
  806414:	19000015 	stw	r4,0(r3)
  806418:	dc800e15 	stw	r18,56(sp)
  80641c:	dc400d15 	stw	r17,52(sp)
  806420:	1441b616 	blt	r2,r17,806afc <___vfprintf_internal_r+0xe38>
  806424:	1cc00204 	addi	r19,r3,8
  806428:	d9014217 	ldw	r4,1288(sp)
  80642c:	d9414317 	ldw	r5,1292(sp)
  806430:	000d883a 	mov	r6,zero
  806434:	000f883a 	mov	r7,zero
  806438:	08114000 	call	811400 <__nedf2>
  80643c:	10017426 	beq	r2,zero,806a10 <___vfprintf_internal_r+0xd4c>
  806440:	d9414717 	ldw	r5,1308(sp)
  806444:	d9814117 	ldw	r6,1284(sp)
  806448:	8c400044 	addi	r17,r17,1
  80644c:	2c85883a 	add	r2,r5,r18
  806450:	14bfffc4 	addi	r18,r2,-1
  806454:	28bfffc4 	addi	r2,r5,-1
  806458:	30c00044 	addi	r3,r6,1
  80645c:	98800115 	stw	r2,4(r19)
  806460:	008001c4 	movi	r2,7
  806464:	98c00015 	stw	r3,0(r19)
  806468:	dc800e15 	stw	r18,56(sp)
  80646c:	dc400d15 	stw	r17,52(sp)
  806470:	14418e16 	blt	r2,r17,806aac <___vfprintf_internal_r+0xde8>
  806474:	9cc00204 	addi	r19,r19,8
  806478:	d9414817 	ldw	r5,1312(sp)
  80647c:	d8800804 	addi	r2,sp,32
  806480:	8c400044 	addi	r17,r17,1
  806484:	9165883a 	add	r18,r18,r5
  806488:	98800015 	stw	r2,0(r19)
  80648c:	008001c4 	movi	r2,7
  806490:	99400115 	stw	r5,4(r19)
  806494:	dc800e15 	stw	r18,56(sp)
  806498:	dc400d15 	stw	r17,52(sp)
  80649c:	1440ed16 	blt	r2,r17,806854 <___vfprintf_internal_r+0xb90>
  8064a0:	98c00204 	addi	r3,r19,8
  8064a4:	003f8506 	br	8062bc <___vfprintf_internal_r+0x5f8>
  8064a8:	d9814a17 	ldw	r6,1320(sp)
  8064ac:	d8814517 	ldw	r2,1300(sp)
  8064b0:	30a1c83a 	sub	r16,r6,r2
  8064b4:	043f4b0e 	bge	zero,r16,8061e4 <___vfprintf_internal_r+0x520>
  8064b8:	00800404 	movi	r2,16
  8064bc:	14043a0e 	bge	r2,r16,8075a8 <___vfprintf_internal_r+0x18e4>
  8064c0:	1027883a 	mov	r19,r2
  8064c4:	07002074 	movhi	fp,129
  8064c8:	e714f184 	addi	fp,fp,21446
  8064cc:	050001c4 	movi	r20,7
  8064d0:	00000306 	br	8064e0 <___vfprintf_internal_r+0x81c>
  8064d4:	843ffc04 	addi	r16,r16,-16
  8064d8:	ad400204 	addi	r21,r21,8
  8064dc:	9c00130e 	bge	r19,r16,80652c <___vfprintf_internal_r+0x868>
  8064e0:	94800404 	addi	r18,r18,16
  8064e4:	8c400044 	addi	r17,r17,1
  8064e8:	af000015 	stw	fp,0(r21)
  8064ec:	acc00115 	stw	r19,4(r21)
  8064f0:	dc800e15 	stw	r18,56(sp)
  8064f4:	dc400d15 	stw	r17,52(sp)
  8064f8:	a47ff60e 	bge	r20,r17,8064d4 <___vfprintf_internal_r+0x810>
  8064fc:	d9014f17 	ldw	r4,1340(sp)
  806500:	b00b883a 	mov	r5,r22
  806504:	d9800c04 	addi	r6,sp,48
  806508:	d9c15115 	stw	r7,1348(sp)
  80650c:	0805c6c0 	call	805c6c <__sprint_r>
  806510:	d9c15117 	ldw	r7,1348(sp)
  806514:	103fa31e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806518:	843ffc04 	addi	r16,r16,-16
  80651c:	dc800e17 	ldw	r18,56(sp)
  806520:	dc400d17 	ldw	r17,52(sp)
  806524:	dd401904 	addi	r21,sp,100
  806528:	9c3fed16 	blt	r19,r16,8064e0 <___vfprintf_internal_r+0x81c>
  80652c:	9425883a 	add	r18,r18,r16
  806530:	8c400044 	addi	r17,r17,1
  806534:	008001c4 	movi	r2,7
  806538:	af000015 	stw	fp,0(r21)
  80653c:	ac000115 	stw	r16,4(r21)
  806540:	dc800e15 	stw	r18,56(sp)
  806544:	dc400d15 	stw	r17,52(sp)
  806548:	14416116 	blt	r2,r17,806ad0 <___vfprintf_internal_r+0xe0c>
  80654c:	ad400204 	addi	r21,r21,8
  806550:	003f2406 	br	8061e4 <___vfprintf_internal_r+0x520>
  806554:	d9014f17 	ldw	r4,1340(sp)
  806558:	080346c0 	call	80346c <__sinit>
  80655c:	d9c15117 	ldw	r7,1348(sp)
  806560:	003def06 	br	805d20 <___vfprintf_internal_r+0x5c>
  806564:	d9014f17 	ldw	r4,1340(sp)
  806568:	b00b883a 	mov	r5,r22
  80656c:	d9c15115 	stw	r7,1348(sp)
  806570:	08093ac0 	call	8093ac <__swsetup_r>
  806574:	d9c15117 	ldw	r7,1348(sp)
  806578:	103dee26 	beq	r2,zero,805d34 <___vfprintf_internal_r+0x70>
  80657c:	003f8c06 	br	8063b0 <___vfprintf_internal_r+0x6ec>
  806580:	d9014217 	ldw	r4,1288(sp)
  806584:	d9414317 	ldw	r5,1292(sp)
  806588:	000d883a 	mov	r6,zero
  80658c:	000f883a 	mov	r7,zero
  806590:	08113780 	call	811378 <__eqdf2>
  806594:	1000f21e 	bne	r2,zero,806960 <___vfprintf_internal_r+0xc9c>
  806598:	00802074 	movhi	r2,129
  80659c:	1094f104 	addi	r2,r2,21444
  8065a0:	94800044 	addi	r18,r18,1
  8065a4:	8c400044 	addi	r17,r17,1
  8065a8:	a8800015 	stw	r2,0(r21)
  8065ac:	00c00044 	movi	r3,1
  8065b0:	008001c4 	movi	r2,7
  8065b4:	a8c00115 	stw	r3,4(r21)
  8065b8:	dc800e15 	stw	r18,56(sp)
  8065bc:	dc400d15 	stw	r17,52(sp)
  8065c0:	14430016 	blt	r2,r17,8071c4 <___vfprintf_internal_r+0x1500>
  8065c4:	a8c00204 	addi	r3,r21,8
  8065c8:	d8800517 	ldw	r2,20(sp)
  8065cc:	d9014717 	ldw	r4,1308(sp)
  8065d0:	11015c0e 	bge	r2,r4,806b44 <___vfprintf_internal_r+0xe80>
  8065d4:	dc400d17 	ldw	r17,52(sp)
  8065d8:	d9814917 	ldw	r6,1316(sp)
  8065dc:	00800044 	movi	r2,1
  8065e0:	94800044 	addi	r18,r18,1
  8065e4:	8c400044 	addi	r17,r17,1
  8065e8:	18800115 	stw	r2,4(r3)
  8065ec:	008001c4 	movi	r2,7
  8065f0:	19800015 	stw	r6,0(r3)
  8065f4:	dc800e15 	stw	r18,56(sp)
  8065f8:	dc400d15 	stw	r17,52(sp)
  8065fc:	14431616 	blt	r2,r17,807258 <___vfprintf_internal_r+0x1594>
  806600:	18c00204 	addi	r3,r3,8
  806604:	d8814717 	ldw	r2,1308(sp)
  806608:	143fffc4 	addi	r16,r2,-1
  80660c:	043f2b0e 	bge	zero,r16,8062bc <___vfprintf_internal_r+0x5f8>
  806610:	00800404 	movi	r2,16
  806614:	1402a80e 	bge	r2,r16,8070b8 <___vfprintf_internal_r+0x13f4>
  806618:	dc400d17 	ldw	r17,52(sp)
  80661c:	1027883a 	mov	r19,r2
  806620:	07002074 	movhi	fp,129
  806624:	e714f184 	addi	fp,fp,21446
  806628:	050001c4 	movi	r20,7
  80662c:	00000306 	br	80663c <___vfprintf_internal_r+0x978>
  806630:	18c00204 	addi	r3,r3,8
  806634:	843ffc04 	addi	r16,r16,-16
  806638:	9c02a20e 	bge	r19,r16,8070c4 <___vfprintf_internal_r+0x1400>
  80663c:	94800404 	addi	r18,r18,16
  806640:	8c400044 	addi	r17,r17,1
  806644:	1f000015 	stw	fp,0(r3)
  806648:	1cc00115 	stw	r19,4(r3)
  80664c:	dc800e15 	stw	r18,56(sp)
  806650:	dc400d15 	stw	r17,52(sp)
  806654:	a47ff60e 	bge	r20,r17,806630 <___vfprintf_internal_r+0x96c>
  806658:	d9014f17 	ldw	r4,1340(sp)
  80665c:	b00b883a 	mov	r5,r22
  806660:	d9800c04 	addi	r6,sp,48
  806664:	0805c6c0 	call	805c6c <__sprint_r>
  806668:	103f4e1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  80666c:	dc800e17 	ldw	r18,56(sp)
  806670:	dc400d17 	ldw	r17,52(sp)
  806674:	d8c01904 	addi	r3,sp,100
  806678:	003fee06 	br	806634 <___vfprintf_internal_r+0x970>
  80667c:	d8802c0b 	ldhu	r2,176(sp)
  806680:	00ffffc4 	movi	r3,-1
  806684:	d8c14b15 	stw	r3,1324(sp)
  806688:	1080100c 	andi	r2,r2,64
  80668c:	103dcc1e 	bne	r2,zero,805dc0 <___vfprintf_internal_r+0xfc>
  806690:	003dce06 	br	805dcc <___vfprintf_internal_r+0x108>
  806694:	d9014f17 	ldw	r4,1340(sp)
  806698:	b00b883a 	mov	r5,r22
  80669c:	d9800c04 	addi	r6,sp,48
  8066a0:	0805c6c0 	call	805c6c <__sprint_r>
  8066a4:	103f3f1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8066a8:	dc800e17 	ldw	r18,56(sp)
  8066ac:	003f2e06 	br	806368 <___vfprintf_internal_r+0x6a4>
  8066b0:	d9414c17 	ldw	r5,1328(sp)
  8066b4:	29400414 	ori	r5,r5,16
  8066b8:	d9414c15 	stw	r5,1328(sp)
  8066bc:	d9814c17 	ldw	r6,1328(sp)
  8066c0:	3080080c 	andi	r2,r6,32
  8066c4:	10014f1e 	bne	r2,zero,806c04 <___vfprintf_internal_r+0xf40>
  8066c8:	d8c14c17 	ldw	r3,1328(sp)
  8066cc:	1880040c 	andi	r2,r3,16
  8066d0:	1002f01e 	bne	r2,zero,807294 <___vfprintf_internal_r+0x15d0>
  8066d4:	d9014c17 	ldw	r4,1328(sp)
  8066d8:	2080100c 	andi	r2,r4,64
  8066dc:	1002ed26 	beq	r2,zero,807294 <___vfprintf_internal_r+0x15d0>
  8066e0:	3880000f 	ldh	r2,0(r7)
  8066e4:	39c00104 	addi	r7,r7,4
  8066e8:	d9c14015 	stw	r7,1280(sp)
  8066ec:	1023d7fa 	srai	r17,r2,31
  8066f0:	1021883a 	mov	r16,r2
  8066f4:	88037816 	blt	r17,zero,8074d8 <___vfprintf_internal_r+0x1814>
  8066f8:	01000044 	movi	r4,1
  8066fc:	98000416 	blt	r19,zero,806710 <___vfprintf_internal_r+0xa4c>
  806700:	d8c14c17 	ldw	r3,1328(sp)
  806704:	00bfdfc4 	movi	r2,-129
  806708:	1886703a 	and	r3,r3,r2
  80670c:	d8c14c15 	stw	r3,1328(sp)
  806710:	8444b03a 	or	r2,r16,r17
  806714:	10022c1e 	bne	r2,zero,806fc8 <___vfprintf_internal_r+0x1304>
  806718:	98022b1e 	bne	r19,zero,806fc8 <___vfprintf_internal_r+0x1304>
  80671c:	20803fcc 	andi	r2,r4,255
  806720:	1002a126 	beq	r2,zero,8071a8 <___vfprintf_internal_r+0x14e4>
  806724:	d8c01904 	addi	r3,sp,100
  806728:	dd000f04 	addi	r20,sp,60
  80672c:	d8c14115 	stw	r3,1284(sp)
  806730:	d8c14117 	ldw	r3,1284(sp)
  806734:	dcc14515 	stw	r19,1300(sp)
  806738:	a0c5c83a 	sub	r2,r20,r3
  80673c:	11c00a04 	addi	r7,r2,40
  806740:	99c0010e 	bge	r19,r7,806748 <___vfprintf_internal_r+0xa84>
  806744:	d9c14515 	stw	r7,1300(sp)
  806748:	dcc14615 	stw	r19,1304(sp)
  80674c:	d8800407 	ldb	r2,16(sp)
  806750:	103e4c26 	beq	r2,zero,806084 <___vfprintf_internal_r+0x3c0>
  806754:	d8814517 	ldw	r2,1300(sp)
  806758:	10800044 	addi	r2,r2,1
  80675c:	d8814515 	stw	r2,1300(sp)
  806760:	003e4806 	br	806084 <___vfprintf_internal_r+0x3c0>
  806764:	d9814c17 	ldw	r6,1328(sp)
  806768:	31800414 	ori	r6,r6,16
  80676c:	d9814c15 	stw	r6,1328(sp)
  806770:	d8c14c17 	ldw	r3,1328(sp)
  806774:	1880080c 	andi	r2,r3,32
  806778:	1001271e 	bne	r2,zero,806c18 <___vfprintf_internal_r+0xf54>
  80677c:	d9414c17 	ldw	r5,1328(sp)
  806780:	2880040c 	andi	r2,r5,16
  806784:	1002bc1e 	bne	r2,zero,807278 <___vfprintf_internal_r+0x15b4>
  806788:	d9814c17 	ldw	r6,1328(sp)
  80678c:	3080100c 	andi	r2,r6,64
  806790:	1002b926 	beq	r2,zero,807278 <___vfprintf_internal_r+0x15b4>
  806794:	3c00000b 	ldhu	r16,0(r7)
  806798:	0009883a 	mov	r4,zero
  80679c:	39c00104 	addi	r7,r7,4
  8067a0:	0023883a 	mov	r17,zero
  8067a4:	d9c14015 	stw	r7,1280(sp)
  8067a8:	d8000405 	stb	zero,16(sp)
  8067ac:	003fd306 	br	8066fc <___vfprintf_internal_r+0xa38>
  8067b0:	d9014c17 	ldw	r4,1328(sp)
  8067b4:	21000414 	ori	r4,r4,16
  8067b8:	d9014c15 	stw	r4,1328(sp)
  8067bc:	d9414c17 	ldw	r5,1328(sp)
  8067c0:	2880080c 	andi	r2,r5,32
  8067c4:	1001081e 	bne	r2,zero,806be8 <___vfprintf_internal_r+0xf24>
  8067c8:	d8c14c17 	ldw	r3,1328(sp)
  8067cc:	1880040c 	andi	r2,r3,16
  8067d0:	1002b61e 	bne	r2,zero,8072ac <___vfprintf_internal_r+0x15e8>
  8067d4:	d9014c17 	ldw	r4,1328(sp)
  8067d8:	2080100c 	andi	r2,r4,64
  8067dc:	1002b326 	beq	r2,zero,8072ac <___vfprintf_internal_r+0x15e8>
  8067e0:	3c00000b 	ldhu	r16,0(r7)
  8067e4:	01000044 	movi	r4,1
  8067e8:	39c00104 	addi	r7,r7,4
  8067ec:	0023883a 	mov	r17,zero
  8067f0:	d9c14015 	stw	r7,1280(sp)
  8067f4:	d8000405 	stb	zero,16(sp)
  8067f8:	003fc006 	br	8066fc <___vfprintf_internal_r+0xa38>
  8067fc:	d9014f17 	ldw	r4,1340(sp)
  806800:	b00b883a 	mov	r5,r22
  806804:	d9800c04 	addi	r6,sp,48
  806808:	0805c6c0 	call	805c6c <__sprint_r>
  80680c:	103ee51e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806810:	dc800e17 	ldw	r18,56(sp)
  806814:	d8c01904 	addi	r3,sp,100
  806818:	d9814c17 	ldw	r6,1328(sp)
  80681c:	3080004c 	andi	r2,r6,1
  806820:	1005003a 	cmpeq	r2,r2,zero
  806824:	103ea51e 	bne	r2,zero,8062bc <___vfprintf_internal_r+0x5f8>
  806828:	00800044 	movi	r2,1
  80682c:	dc400d17 	ldw	r17,52(sp)
  806830:	18800115 	stw	r2,4(r3)
  806834:	d8814917 	ldw	r2,1316(sp)
  806838:	94800044 	addi	r18,r18,1
  80683c:	8c400044 	addi	r17,r17,1
  806840:	18800015 	stw	r2,0(r3)
  806844:	008001c4 	movi	r2,7
  806848:	dc800e15 	stw	r18,56(sp)
  80684c:	dc400d15 	stw	r17,52(sp)
  806850:	1442240e 	bge	r2,r17,8070e4 <___vfprintf_internal_r+0x1420>
  806854:	d9014f17 	ldw	r4,1340(sp)
  806858:	b00b883a 	mov	r5,r22
  80685c:	d9800c04 	addi	r6,sp,48
  806860:	0805c6c0 	call	805c6c <__sprint_r>
  806864:	103ecf1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806868:	dc800e17 	ldw	r18,56(sp)
  80686c:	d8c01904 	addi	r3,sp,100
  806870:	003e9206 	br	8062bc <___vfprintf_internal_r+0x5f8>
  806874:	d9014f17 	ldw	r4,1340(sp)
  806878:	b00b883a 	mov	r5,r22
  80687c:	d9800c04 	addi	r6,sp,48
  806880:	0805c6c0 	call	805c6c <__sprint_r>
  806884:	103ec026 	beq	r2,zero,806388 <___vfprintf_internal_r+0x6c4>
  806888:	003ec606 	br	8063a4 <___vfprintf_internal_r+0x6e0>
  80688c:	d9014f17 	ldw	r4,1340(sp)
  806890:	b00b883a 	mov	r5,r22
  806894:	d9800c04 	addi	r6,sp,48
  806898:	d9c15115 	stw	r7,1348(sp)
  80689c:	0805c6c0 	call	805c6c <__sprint_r>
  8068a0:	d9c15117 	ldw	r7,1348(sp)
  8068a4:	103ebf1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8068a8:	dc800e17 	ldw	r18,56(sp)
  8068ac:	dc400d17 	ldw	r17,52(sp)
  8068b0:	dd401904 	addi	r21,sp,100
  8068b4:	003e7406 	br	806288 <___vfprintf_internal_r+0x5c4>
  8068b8:	d9014f17 	ldw	r4,1340(sp)
  8068bc:	b00b883a 	mov	r5,r22
  8068c0:	d9800c04 	addi	r6,sp,48
  8068c4:	d9c15115 	stw	r7,1348(sp)
  8068c8:	0805c6c0 	call	805c6c <__sprint_r>
  8068cc:	d9c15117 	ldw	r7,1348(sp)
  8068d0:	103eb41e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8068d4:	dd401904 	addi	r21,sp,100
  8068d8:	003d6d06 	br	805e90 <___vfprintf_internal_r+0x1cc>
  8068dc:	d9014f17 	ldw	r4,1340(sp)
  8068e0:	b00b883a 	mov	r5,r22
  8068e4:	d9800c04 	addi	r6,sp,48
  8068e8:	d9c15115 	stw	r7,1348(sp)
  8068ec:	0805c6c0 	call	805c6c <__sprint_r>
  8068f0:	d9c15117 	ldw	r7,1348(sp)
  8068f4:	103eab1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8068f8:	dc800e17 	ldw	r18,56(sp)
  8068fc:	dc400d17 	ldw	r17,52(sp)
  806900:	dd401904 	addi	r21,sp,100
  806904:	003e3406 	br	8061d8 <___vfprintf_internal_r+0x514>
  806908:	d9014f17 	ldw	r4,1340(sp)
  80690c:	b00b883a 	mov	r5,r22
  806910:	d9800c04 	addi	r6,sp,48
  806914:	d9c15115 	stw	r7,1348(sp)
  806918:	0805c6c0 	call	805c6c <__sprint_r>
  80691c:	d9c15117 	ldw	r7,1348(sp)
  806920:	103ea01e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806924:	dc800e17 	ldw	r18,56(sp)
  806928:	dc400d17 	ldw	r17,52(sp)
  80692c:	dd401904 	addi	r21,sp,100
  806930:	003e1c06 	br	8061a4 <___vfprintf_internal_r+0x4e0>
  806934:	d9014f17 	ldw	r4,1340(sp)
  806938:	b00b883a 	mov	r5,r22
  80693c:	d9800c04 	addi	r6,sp,48
  806940:	d9c15115 	stw	r7,1348(sp)
  806944:	0805c6c0 	call	805c6c <__sprint_r>
  806948:	d9c15117 	ldw	r7,1348(sp)
  80694c:	103e951e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806950:	dc800e17 	ldw	r18,56(sp)
  806954:	dc400d17 	ldw	r17,52(sp)
  806958:	dd401904 	addi	r21,sp,100
  80695c:	003e0406 	br	806170 <___vfprintf_internal_r+0x4ac>
  806960:	d9000517 	ldw	r4,20(sp)
  806964:	0102580e 	bge	zero,r4,8072c8 <___vfprintf_internal_r+0x1604>
  806968:	d9814717 	ldw	r6,1308(sp)
  80696c:	21807a16 	blt	r4,r6,806b58 <___vfprintf_internal_r+0xe94>
  806970:	d8814117 	ldw	r2,1284(sp)
  806974:	91a5883a 	add	r18,r18,r6
  806978:	8c400044 	addi	r17,r17,1
  80697c:	a8800015 	stw	r2,0(r21)
  806980:	008001c4 	movi	r2,7
  806984:	a9800115 	stw	r6,4(r21)
  806988:	dc800e15 	stw	r18,56(sp)
  80698c:	dc400d15 	stw	r17,52(sp)
  806990:	1442fc16 	blt	r2,r17,807584 <___vfprintf_internal_r+0x18c0>
  806994:	a8c00204 	addi	r3,r21,8
  806998:	d9414717 	ldw	r5,1308(sp)
  80699c:	2161c83a 	sub	r16,r4,r5
  8069a0:	043f9d0e 	bge	zero,r16,806818 <___vfprintf_internal_r+0xb54>
  8069a4:	00800404 	movi	r2,16
  8069a8:	1402190e 	bge	r2,r16,807210 <___vfprintf_internal_r+0x154c>
  8069ac:	dc400d17 	ldw	r17,52(sp)
  8069b0:	1027883a 	mov	r19,r2
  8069b4:	07002074 	movhi	fp,129
  8069b8:	e714f184 	addi	fp,fp,21446
  8069bc:	050001c4 	movi	r20,7
  8069c0:	00000306 	br	8069d0 <___vfprintf_internal_r+0xd0c>
  8069c4:	18c00204 	addi	r3,r3,8
  8069c8:	843ffc04 	addi	r16,r16,-16
  8069cc:	9c02130e 	bge	r19,r16,80721c <___vfprintf_internal_r+0x1558>
  8069d0:	94800404 	addi	r18,r18,16
  8069d4:	8c400044 	addi	r17,r17,1
  8069d8:	1f000015 	stw	fp,0(r3)
  8069dc:	1cc00115 	stw	r19,4(r3)
  8069e0:	dc800e15 	stw	r18,56(sp)
  8069e4:	dc400d15 	stw	r17,52(sp)
  8069e8:	a47ff60e 	bge	r20,r17,8069c4 <___vfprintf_internal_r+0xd00>
  8069ec:	d9014f17 	ldw	r4,1340(sp)
  8069f0:	b00b883a 	mov	r5,r22
  8069f4:	d9800c04 	addi	r6,sp,48
  8069f8:	0805c6c0 	call	805c6c <__sprint_r>
  8069fc:	103e691e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806a00:	dc800e17 	ldw	r18,56(sp)
  806a04:	dc400d17 	ldw	r17,52(sp)
  806a08:	d8c01904 	addi	r3,sp,100
  806a0c:	003fee06 	br	8069c8 <___vfprintf_internal_r+0xd04>
  806a10:	d8814717 	ldw	r2,1308(sp)
  806a14:	143fffc4 	addi	r16,r2,-1
  806a18:	043e970e 	bge	zero,r16,806478 <___vfprintf_internal_r+0x7b4>
  806a1c:	00800404 	movi	r2,16
  806a20:	1400180e 	bge	r2,r16,806a84 <___vfprintf_internal_r+0xdc0>
  806a24:	1029883a 	mov	r20,r2
  806a28:	07002074 	movhi	fp,129
  806a2c:	e714f184 	addi	fp,fp,21446
  806a30:	054001c4 	movi	r21,7
  806a34:	00000306 	br	806a44 <___vfprintf_internal_r+0xd80>
  806a38:	9cc00204 	addi	r19,r19,8
  806a3c:	843ffc04 	addi	r16,r16,-16
  806a40:	a400120e 	bge	r20,r16,806a8c <___vfprintf_internal_r+0xdc8>
  806a44:	94800404 	addi	r18,r18,16
  806a48:	8c400044 	addi	r17,r17,1
  806a4c:	9f000015 	stw	fp,0(r19)
  806a50:	9d000115 	stw	r20,4(r19)
  806a54:	dc800e15 	stw	r18,56(sp)
  806a58:	dc400d15 	stw	r17,52(sp)
  806a5c:	ac7ff60e 	bge	r21,r17,806a38 <___vfprintf_internal_r+0xd74>
  806a60:	d9014f17 	ldw	r4,1340(sp)
  806a64:	b00b883a 	mov	r5,r22
  806a68:	d9800c04 	addi	r6,sp,48
  806a6c:	0805c6c0 	call	805c6c <__sprint_r>
  806a70:	103e4c1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806a74:	dc800e17 	ldw	r18,56(sp)
  806a78:	dc400d17 	ldw	r17,52(sp)
  806a7c:	dcc01904 	addi	r19,sp,100
  806a80:	003fee06 	br	806a3c <___vfprintf_internal_r+0xd78>
  806a84:	07002074 	movhi	fp,129
  806a88:	e714f184 	addi	fp,fp,21446
  806a8c:	9425883a 	add	r18,r18,r16
  806a90:	8c400044 	addi	r17,r17,1
  806a94:	008001c4 	movi	r2,7
  806a98:	9f000015 	stw	fp,0(r19)
  806a9c:	9c000115 	stw	r16,4(r19)
  806aa0:	dc800e15 	stw	r18,56(sp)
  806aa4:	dc400d15 	stw	r17,52(sp)
  806aa8:	147e720e 	bge	r2,r17,806474 <___vfprintf_internal_r+0x7b0>
  806aac:	d9014f17 	ldw	r4,1340(sp)
  806ab0:	b00b883a 	mov	r5,r22
  806ab4:	d9800c04 	addi	r6,sp,48
  806ab8:	0805c6c0 	call	805c6c <__sprint_r>
  806abc:	103e391e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806ac0:	dc800e17 	ldw	r18,56(sp)
  806ac4:	dc400d17 	ldw	r17,52(sp)
  806ac8:	dcc01904 	addi	r19,sp,100
  806acc:	003e6a06 	br	806478 <___vfprintf_internal_r+0x7b4>
  806ad0:	d9014f17 	ldw	r4,1340(sp)
  806ad4:	b00b883a 	mov	r5,r22
  806ad8:	d9800c04 	addi	r6,sp,48
  806adc:	d9c15115 	stw	r7,1348(sp)
  806ae0:	0805c6c0 	call	805c6c <__sprint_r>
  806ae4:	d9c15117 	ldw	r7,1348(sp)
  806ae8:	103e2e1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806aec:	dc800e17 	ldw	r18,56(sp)
  806af0:	dc400d17 	ldw	r17,52(sp)
  806af4:	dd401904 	addi	r21,sp,100
  806af8:	003dba06 	br	8061e4 <___vfprintf_internal_r+0x520>
  806afc:	d9014f17 	ldw	r4,1340(sp)
  806b00:	b00b883a 	mov	r5,r22
  806b04:	d9800c04 	addi	r6,sp,48
  806b08:	0805c6c0 	call	805c6c <__sprint_r>
  806b0c:	103e251e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806b10:	dc800e17 	ldw	r18,56(sp)
  806b14:	dc400d17 	ldw	r17,52(sp)
  806b18:	dcc01904 	addi	r19,sp,100
  806b1c:	003e4206 	br	806428 <___vfprintf_internal_r+0x764>
  806b20:	d9014f17 	ldw	r4,1340(sp)
  806b24:	b00b883a 	mov	r5,r22
  806b28:	d9800c04 	addi	r6,sp,48
  806b2c:	0805c6c0 	call	805c6c <__sprint_r>
  806b30:	103e1c1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  806b34:	dc800e17 	ldw	r18,56(sp)
  806b38:	dc400d17 	ldw	r17,52(sp)
  806b3c:	d8c01904 	addi	r3,sp,100
  806b40:	003e2e06 	br	8063fc <___vfprintf_internal_r+0x738>
  806b44:	d9414c17 	ldw	r5,1328(sp)
  806b48:	2880004c 	andi	r2,r5,1
  806b4c:	1005003a 	cmpeq	r2,r2,zero
  806b50:	103dda1e 	bne	r2,zero,8062bc <___vfprintf_internal_r+0x5f8>
  806b54:	003e9f06 	br	8065d4 <___vfprintf_internal_r+0x910>
  806b58:	d8c14117 	ldw	r3,1284(sp)
  806b5c:	9125883a 	add	r18,r18,r4
  806b60:	8c400044 	addi	r17,r17,1
  806b64:	008001c4 	movi	r2,7
  806b68:	a8c00015 	stw	r3,0(r21)
  806b6c:	a9000115 	stw	r4,4(r21)
  806b70:	dc800e15 	stw	r18,56(sp)
  806b74:	dc400d15 	stw	r17,52(sp)
  806b78:	14426c16 	blt	r2,r17,80752c <___vfprintf_internal_r+0x1868>
  806b7c:	a8c00204 	addi	r3,r21,8
  806b80:	d9414917 	ldw	r5,1316(sp)
  806b84:	00800044 	movi	r2,1
  806b88:	94800044 	addi	r18,r18,1
  806b8c:	8c400044 	addi	r17,r17,1
  806b90:	18800115 	stw	r2,4(r3)
  806b94:	008001c4 	movi	r2,7
  806b98:	19400015 	stw	r5,0(r3)
  806b9c:	dc800e15 	stw	r18,56(sp)
  806ba0:	dc400d15 	stw	r17,52(sp)
  806ba4:	2021883a 	mov	r16,r4
  806ba8:	14425616 	blt	r2,r17,807504 <___vfprintf_internal_r+0x1840>
  806bac:	19400204 	addi	r5,r3,8
  806bb0:	d9814717 	ldw	r6,1308(sp)
  806bb4:	8c400044 	addi	r17,r17,1
  806bb8:	dc400d15 	stw	r17,52(sp)
  806bbc:	3107c83a 	sub	r3,r6,r4
  806bc0:	d9014117 	ldw	r4,1284(sp)
  806bc4:	90e5883a 	add	r18,r18,r3
  806bc8:	28c00115 	stw	r3,4(r5)
  806bcc:	8105883a 	add	r2,r16,r4
  806bd0:	28800015 	stw	r2,0(r5)
  806bd4:	008001c4 	movi	r2,7
  806bd8:	dc800e15 	stw	r18,56(sp)
  806bdc:	147f1d16 	blt	r2,r17,806854 <___vfprintf_internal_r+0xb90>
  806be0:	28c00204 	addi	r3,r5,8
  806be4:	003db506 	br	8062bc <___vfprintf_internal_r+0x5f8>
  806be8:	3c000017 	ldw	r16,0(r7)
  806bec:	3c400117 	ldw	r17,4(r7)
  806bf0:	39800204 	addi	r6,r7,8
  806bf4:	01000044 	movi	r4,1
  806bf8:	d9814015 	stw	r6,1280(sp)
  806bfc:	d8000405 	stb	zero,16(sp)
  806c00:	003ebe06 	br	8066fc <___vfprintf_internal_r+0xa38>
  806c04:	3c000017 	ldw	r16,0(r7)
  806c08:	3c400117 	ldw	r17,4(r7)
  806c0c:	38800204 	addi	r2,r7,8
  806c10:	d8814015 	stw	r2,1280(sp)
  806c14:	003eb706 	br	8066f4 <___vfprintf_internal_r+0xa30>
  806c18:	3c000017 	ldw	r16,0(r7)
  806c1c:	3c400117 	ldw	r17,4(r7)
  806c20:	39000204 	addi	r4,r7,8
  806c24:	d9014015 	stw	r4,1280(sp)
  806c28:	0009883a 	mov	r4,zero
  806c2c:	d8000405 	stb	zero,16(sp)
  806c30:	003eb206 	br	8066fc <___vfprintf_internal_r+0xa38>
  806c34:	38c00017 	ldw	r3,0(r7)
  806c38:	39c00104 	addi	r7,r7,4
  806c3c:	d8c14a15 	stw	r3,1320(sp)
  806c40:	1800d70e 	bge	r3,zero,806fa0 <___vfprintf_internal_r+0x12dc>
  806c44:	00c7c83a 	sub	r3,zero,r3
  806c48:	d8c14a15 	stw	r3,1320(sp)
  806c4c:	d9014c17 	ldw	r4,1328(sp)
  806c50:	b8c00007 	ldb	r3,0(r23)
  806c54:	21000114 	ori	r4,r4,4
  806c58:	d9014c15 	stw	r4,1328(sp)
  806c5c:	003c9806 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806c60:	d9814c17 	ldw	r6,1328(sp)
  806c64:	3080080c 	andi	r2,r6,32
  806c68:	1001f626 	beq	r2,zero,807444 <___vfprintf_internal_r+0x1780>
  806c6c:	d9014b17 	ldw	r4,1324(sp)
  806c70:	38800017 	ldw	r2,0(r7)
  806c74:	39c00104 	addi	r7,r7,4
  806c78:	d9c14015 	stw	r7,1280(sp)
  806c7c:	2007d7fa 	srai	r3,r4,31
  806c80:	d9c14017 	ldw	r7,1280(sp)
  806c84:	11000015 	stw	r4,0(r2)
  806c88:	10c00115 	stw	r3,4(r2)
  806c8c:	003c6906 	br	805e34 <___vfprintf_internal_r+0x170>
  806c90:	b8c00007 	ldb	r3,0(r23)
  806c94:	00801b04 	movi	r2,108
  806c98:	18825526 	beq	r3,r2,8075f0 <___vfprintf_internal_r+0x192c>
  806c9c:	d9414c17 	ldw	r5,1328(sp)
  806ca0:	29400414 	ori	r5,r5,16
  806ca4:	d9414c15 	stw	r5,1328(sp)
  806ca8:	003c8506 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806cac:	d9814c17 	ldw	r6,1328(sp)
  806cb0:	b8c00007 	ldb	r3,0(r23)
  806cb4:	31800814 	ori	r6,r6,32
  806cb8:	d9814c15 	stw	r6,1328(sp)
  806cbc:	003c8006 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806cc0:	d8814c17 	ldw	r2,1328(sp)
  806cc4:	3c000017 	ldw	r16,0(r7)
  806cc8:	00c01e04 	movi	r3,120
  806ccc:	10800094 	ori	r2,r2,2
  806cd0:	d8814c15 	stw	r2,1328(sp)
  806cd4:	39c00104 	addi	r7,r7,4
  806cd8:	01402074 	movhi	r5,129
  806cdc:	2954da04 	addi	r5,r5,21352
  806ce0:	00800c04 	movi	r2,48
  806ce4:	0023883a 	mov	r17,zero
  806ce8:	01000084 	movi	r4,2
  806cec:	d9c14015 	stw	r7,1280(sp)
  806cf0:	d8c14d15 	stw	r3,1332(sp)
  806cf4:	d9414415 	stw	r5,1296(sp)
  806cf8:	d8800445 	stb	r2,17(sp)
  806cfc:	d8c00485 	stb	r3,18(sp)
  806d00:	d8000405 	stb	zero,16(sp)
  806d04:	003e7d06 	br	8066fc <___vfprintf_internal_r+0xa38>
  806d08:	d8814c17 	ldw	r2,1328(sp)
  806d0c:	b8c00007 	ldb	r3,0(r23)
  806d10:	10801014 	ori	r2,r2,64
  806d14:	d8814c15 	stw	r2,1328(sp)
  806d18:	003c6906 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806d1c:	d9414c17 	ldw	r5,1328(sp)
  806d20:	2880020c 	andi	r2,r5,8
  806d24:	1001e526 	beq	r2,zero,8074bc <___vfprintf_internal_r+0x17f8>
  806d28:	39800017 	ldw	r6,0(r7)
  806d2c:	38800204 	addi	r2,r7,8
  806d30:	d8814015 	stw	r2,1280(sp)
  806d34:	d9814215 	stw	r6,1288(sp)
  806d38:	39c00117 	ldw	r7,4(r7)
  806d3c:	d9c14315 	stw	r7,1292(sp)
  806d40:	d9014217 	ldw	r4,1288(sp)
  806d44:	d9414317 	ldw	r5,1292(sp)
  806d48:	080cef00 	call	80cef0 <__isinfd>
  806d4c:	10021d26 	beq	r2,zero,8075c4 <___vfprintf_internal_r+0x1900>
  806d50:	d9014217 	ldw	r4,1288(sp)
  806d54:	d9414317 	ldw	r5,1292(sp)
  806d58:	000d883a 	mov	r6,zero
  806d5c:	000f883a 	mov	r7,zero
  806d60:	08115980 	call	811598 <__ltdf2>
  806d64:	1002d016 	blt	r2,zero,8078a8 <___vfprintf_internal_r+0x1be4>
  806d68:	d9414d17 	ldw	r5,1332(sp)
  806d6c:	008011c4 	movi	r2,71
  806d70:	11421016 	blt	r2,r5,8075b4 <___vfprintf_internal_r+0x18f0>
  806d74:	01802074 	movhi	r6,129
  806d78:	3194df04 	addi	r6,r6,21372
  806d7c:	d9814115 	stw	r6,1284(sp)
  806d80:	d9014c17 	ldw	r4,1328(sp)
  806d84:	00c000c4 	movi	r3,3
  806d88:	00bfdfc4 	movi	r2,-129
  806d8c:	2088703a 	and	r4,r4,r2
  806d90:	180f883a 	mov	r7,r3
  806d94:	d8c14515 	stw	r3,1300(sp)
  806d98:	d9014c15 	stw	r4,1328(sp)
  806d9c:	d8014615 	stw	zero,1304(sp)
  806da0:	003e6a06 	br	80674c <___vfprintf_internal_r+0xa88>
  806da4:	38800017 	ldw	r2,0(r7)
  806da8:	00c00044 	movi	r3,1
  806dac:	39c00104 	addi	r7,r7,4
  806db0:	d9c14015 	stw	r7,1280(sp)
  806db4:	d9000f04 	addi	r4,sp,60
  806db8:	180f883a 	mov	r7,r3
  806dbc:	d8c14515 	stw	r3,1300(sp)
  806dc0:	d9014115 	stw	r4,1284(sp)
  806dc4:	d8800f05 	stb	r2,60(sp)
  806dc8:	d8000405 	stb	zero,16(sp)
  806dcc:	003cac06 	br	806080 <___vfprintf_internal_r+0x3bc>
  806dd0:	01402074 	movhi	r5,129
  806dd4:	2954e504 	addi	r5,r5,21396
  806dd8:	d9414415 	stw	r5,1296(sp)
  806ddc:	d9814c17 	ldw	r6,1328(sp)
  806de0:	3080080c 	andi	r2,r6,32
  806de4:	1000ff26 	beq	r2,zero,8071e4 <___vfprintf_internal_r+0x1520>
  806de8:	3c000017 	ldw	r16,0(r7)
  806dec:	3c400117 	ldw	r17,4(r7)
  806df0:	38800204 	addi	r2,r7,8
  806df4:	d8814015 	stw	r2,1280(sp)
  806df8:	d9414c17 	ldw	r5,1328(sp)
  806dfc:	2880004c 	andi	r2,r5,1
  806e00:	1005003a 	cmpeq	r2,r2,zero
  806e04:	1000b91e 	bne	r2,zero,8070ec <___vfprintf_internal_r+0x1428>
  806e08:	8444b03a 	or	r2,r16,r17
  806e0c:	1000b726 	beq	r2,zero,8070ec <___vfprintf_internal_r+0x1428>
  806e10:	d9814d17 	ldw	r6,1332(sp)
  806e14:	29400094 	ori	r5,r5,2
  806e18:	00800c04 	movi	r2,48
  806e1c:	01000084 	movi	r4,2
  806e20:	d9414c15 	stw	r5,1328(sp)
  806e24:	d8800445 	stb	r2,17(sp)
  806e28:	d9800485 	stb	r6,18(sp)
  806e2c:	d8000405 	stb	zero,16(sp)
  806e30:	003e3206 	br	8066fc <___vfprintf_internal_r+0xa38>
  806e34:	01802074 	movhi	r6,129
  806e38:	3194da04 	addi	r6,r6,21352
  806e3c:	d9814415 	stw	r6,1296(sp)
  806e40:	003fe606 	br	806ddc <___vfprintf_internal_r+0x1118>
  806e44:	00800ac4 	movi	r2,43
  806e48:	d8800405 	stb	r2,16(sp)
  806e4c:	b8c00007 	ldb	r3,0(r23)
  806e50:	003c1b06 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806e54:	d8814c17 	ldw	r2,1328(sp)
  806e58:	b8c00007 	ldb	r3,0(r23)
  806e5c:	10800054 	ori	r2,r2,1
  806e60:	d8814c15 	stw	r2,1328(sp)
  806e64:	003c1606 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806e68:	d8800407 	ldb	r2,16(sp)
  806e6c:	10004c1e 	bne	r2,zero,806fa0 <___vfprintf_internal_r+0x12dc>
  806e70:	00800804 	movi	r2,32
  806e74:	d8800405 	stb	r2,16(sp)
  806e78:	b8c00007 	ldb	r3,0(r23)
  806e7c:	003c1006 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806e80:	d9814c17 	ldw	r6,1328(sp)
  806e84:	b8c00007 	ldb	r3,0(r23)
  806e88:	31800214 	ori	r6,r6,8
  806e8c:	d9814c15 	stw	r6,1328(sp)
  806e90:	003c0b06 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806e94:	0009883a 	mov	r4,zero
  806e98:	04000244 	movi	r16,9
  806e9c:	01400284 	movi	r5,10
  806ea0:	d9c15115 	stw	r7,1348(sp)
  806ea4:	08027a80 	call	8027a8 <__mulsi3>
  806ea8:	b9000007 	ldb	r4,0(r23)
  806eac:	d8c14d17 	ldw	r3,1332(sp)
  806eb0:	bdc00044 	addi	r23,r23,1
  806eb4:	d9014d15 	stw	r4,1332(sp)
  806eb8:	d9414d17 	ldw	r5,1332(sp)
  806ebc:	1885883a 	add	r2,r3,r2
  806ec0:	113ff404 	addi	r4,r2,-48
  806ec4:	28bff404 	addi	r2,r5,-48
  806ec8:	d9c15117 	ldw	r7,1348(sp)
  806ecc:	80bff32e 	bgeu	r16,r2,806e9c <___vfprintf_internal_r+0x11d8>
  806ed0:	d9014a15 	stw	r4,1320(sp)
  806ed4:	003bfc06 	br	805ec8 <___vfprintf_internal_r+0x204>
  806ed8:	d8814c17 	ldw	r2,1328(sp)
  806edc:	b8c00007 	ldb	r3,0(r23)
  806ee0:	10802014 	ori	r2,r2,128
  806ee4:	d8814c15 	stw	r2,1328(sp)
  806ee8:	003bf506 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806eec:	b8c00007 	ldb	r3,0(r23)
  806ef0:	00800a84 	movi	r2,42
  806ef4:	bdc00044 	addi	r23,r23,1
  806ef8:	18831826 	beq	r3,r2,807b5c <___vfprintf_internal_r+0x1e98>
  806efc:	d8c14d15 	stw	r3,1332(sp)
  806f00:	18bff404 	addi	r2,r3,-48
  806f04:	00c00244 	movi	r3,9
  806f08:	18827b36 	bltu	r3,r2,8078f8 <___vfprintf_internal_r+0x1c34>
  806f0c:	1821883a 	mov	r16,r3
  806f10:	0009883a 	mov	r4,zero
  806f14:	01400284 	movi	r5,10
  806f18:	d9c15115 	stw	r7,1348(sp)
  806f1c:	08027a80 	call	8027a8 <__mulsi3>
  806f20:	d9414d17 	ldw	r5,1332(sp)
  806f24:	b9800007 	ldb	r6,0(r23)
  806f28:	d9c15117 	ldw	r7,1348(sp)
  806f2c:	1145883a 	add	r2,r2,r5
  806f30:	113ff404 	addi	r4,r2,-48
  806f34:	30bff404 	addi	r2,r6,-48
  806f38:	d9814d15 	stw	r6,1332(sp)
  806f3c:	bdc00044 	addi	r23,r23,1
  806f40:	80bff42e 	bgeu	r16,r2,806f14 <___vfprintf_internal_r+0x1250>
  806f44:	2027883a 	mov	r19,r4
  806f48:	203bdf0e 	bge	r4,zero,805ec8 <___vfprintf_internal_r+0x204>
  806f4c:	04ffffc4 	movi	r19,-1
  806f50:	003bdd06 	br	805ec8 <___vfprintf_internal_r+0x204>
  806f54:	d8000405 	stb	zero,16(sp)
  806f58:	39800017 	ldw	r6,0(r7)
  806f5c:	39c00104 	addi	r7,r7,4
  806f60:	d9c14015 	stw	r7,1280(sp)
  806f64:	d9814115 	stw	r6,1284(sp)
  806f68:	3001c926 	beq	r6,zero,807690 <___vfprintf_internal_r+0x19cc>
  806f6c:	98000e16 	blt	r19,zero,806fa8 <___vfprintf_internal_r+0x12e4>
  806f70:	d9014117 	ldw	r4,1284(sp)
  806f74:	000b883a 	mov	r5,zero
  806f78:	980d883a 	mov	r6,r19
  806f7c:	0804f9c0 	call	804f9c <memchr>
  806f80:	10025926 	beq	r2,zero,8078e8 <___vfprintf_internal_r+0x1c24>
  806f84:	d8c14117 	ldw	r3,1284(sp)
  806f88:	10cfc83a 	sub	r7,r2,r3
  806f8c:	99c19e16 	blt	r19,r7,807608 <___vfprintf_internal_r+0x1944>
  806f90:	d9c14515 	stw	r7,1300(sp)
  806f94:	38000916 	blt	r7,zero,806fbc <___vfprintf_internal_r+0x12f8>
  806f98:	d8014615 	stw	zero,1304(sp)
  806f9c:	003deb06 	br	80674c <___vfprintf_internal_r+0xa88>
  806fa0:	b8c00007 	ldb	r3,0(r23)
  806fa4:	003bc606 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  806fa8:	d9014117 	ldw	r4,1284(sp)
  806fac:	080586c0 	call	80586c <strlen>
  806fb0:	d8814515 	stw	r2,1300(sp)
  806fb4:	100f883a 	mov	r7,r2
  806fb8:	103ff70e 	bge	r2,zero,806f98 <___vfprintf_internal_r+0x12d4>
  806fbc:	d8014515 	stw	zero,1300(sp)
  806fc0:	d8014615 	stw	zero,1304(sp)
  806fc4:	003de106 	br	80674c <___vfprintf_internal_r+0xa88>
  806fc8:	20c03fcc 	andi	r3,r4,255
  806fcc:	00800044 	movi	r2,1
  806fd0:	18802d26 	beq	r3,r2,807088 <___vfprintf_internal_r+0x13c4>
  806fd4:	18800e36 	bltu	r3,r2,807010 <___vfprintf_internal_r+0x134c>
  806fd8:	00800084 	movi	r2,2
  806fdc:	1880fa26 	beq	r3,r2,8073c8 <___vfprintf_internal_r+0x1704>
  806fe0:	01002074 	movhi	r4,129
  806fe4:	2114ea04 	addi	r4,r4,21416
  806fe8:	080586c0 	call	80586c <strlen>
  806fec:	100f883a 	mov	r7,r2
  806ff0:	dcc14515 	stw	r19,1300(sp)
  806ff4:	9880010e 	bge	r19,r2,806ffc <___vfprintf_internal_r+0x1338>
  806ff8:	d8814515 	stw	r2,1300(sp)
  806ffc:	00802074 	movhi	r2,129
  807000:	1094ea04 	addi	r2,r2,21416
  807004:	dcc14615 	stw	r19,1304(sp)
  807008:	d8814115 	stw	r2,1284(sp)
  80700c:	003dcf06 	br	80674c <___vfprintf_internal_r+0xa88>
  807010:	d9401904 	addi	r5,sp,100
  807014:	dd000f04 	addi	r20,sp,60
  807018:	d9414115 	stw	r5,1284(sp)
  80701c:	880a977a 	slli	r5,r17,29
  807020:	d9814117 	ldw	r6,1284(sp)
  807024:	8004d0fa 	srli	r2,r16,3
  807028:	8806d0fa 	srli	r3,r17,3
  80702c:	810001cc 	andi	r4,r16,7
  807030:	2884b03a 	or	r2,r5,r2
  807034:	31bfffc4 	addi	r6,r6,-1
  807038:	21000c04 	addi	r4,r4,48
  80703c:	d9814115 	stw	r6,1284(sp)
  807040:	10cab03a 	or	r5,r2,r3
  807044:	31000005 	stb	r4,0(r6)
  807048:	1021883a 	mov	r16,r2
  80704c:	1823883a 	mov	r17,r3
  807050:	283ff21e 	bne	r5,zero,80701c <___vfprintf_internal_r+0x1358>
  807054:	d8c14c17 	ldw	r3,1328(sp)
  807058:	1880004c 	andi	r2,r3,1
  80705c:	1005003a 	cmpeq	r2,r2,zero
  807060:	103db31e 	bne	r2,zero,806730 <___vfprintf_internal_r+0xa6c>
  807064:	20803fcc 	andi	r2,r4,255
  807068:	1080201c 	xori	r2,r2,128
  80706c:	10bfe004 	addi	r2,r2,-128
  807070:	00c00c04 	movi	r3,48
  807074:	10fdae26 	beq	r2,r3,806730 <___vfprintf_internal_r+0xa6c>
  807078:	31bfffc4 	addi	r6,r6,-1
  80707c:	d9814115 	stw	r6,1284(sp)
  807080:	30c00005 	stb	r3,0(r6)
  807084:	003daa06 	br	806730 <___vfprintf_internal_r+0xa6c>
  807088:	88800068 	cmpgeui	r2,r17,1
  80708c:	10002c1e 	bne	r2,zero,807140 <___vfprintf_internal_r+0x147c>
  807090:	8800021e 	bne	r17,zero,80709c <___vfprintf_internal_r+0x13d8>
  807094:	00800244 	movi	r2,9
  807098:	14002936 	bltu	r2,r16,807140 <___vfprintf_internal_r+0x147c>
  80709c:	d90018c4 	addi	r4,sp,99
  8070a0:	dd000f04 	addi	r20,sp,60
  8070a4:	d9014115 	stw	r4,1284(sp)
  8070a8:	d9014117 	ldw	r4,1284(sp)
  8070ac:	80800c04 	addi	r2,r16,48
  8070b0:	20800005 	stb	r2,0(r4)
  8070b4:	003d9e06 	br	806730 <___vfprintf_internal_r+0xa6c>
  8070b8:	dc400d17 	ldw	r17,52(sp)
  8070bc:	07002074 	movhi	fp,129
  8070c0:	e714f184 	addi	fp,fp,21446
  8070c4:	9425883a 	add	r18,r18,r16
  8070c8:	8c400044 	addi	r17,r17,1
  8070cc:	008001c4 	movi	r2,7
  8070d0:	1f000015 	stw	fp,0(r3)
  8070d4:	1c000115 	stw	r16,4(r3)
  8070d8:	dc800e15 	stw	r18,56(sp)
  8070dc:	dc400d15 	stw	r17,52(sp)
  8070e0:	147ddc16 	blt	r2,r17,806854 <___vfprintf_internal_r+0xb90>
  8070e4:	18c00204 	addi	r3,r3,8
  8070e8:	003c7406 	br	8062bc <___vfprintf_internal_r+0x5f8>
  8070ec:	01000084 	movi	r4,2
  8070f0:	d8000405 	stb	zero,16(sp)
  8070f4:	003d8106 	br	8066fc <___vfprintf_internal_r+0xa38>
  8070f8:	d9814c17 	ldw	r6,1328(sp)
  8070fc:	30c4703a 	and	r2,r6,r3
  807100:	1005003a 	cmpeq	r2,r2,zero
  807104:	103cb326 	beq	r2,zero,8063d4 <___vfprintf_internal_r+0x710>
  807108:	d9014117 	ldw	r4,1284(sp)
  80710c:	94800044 	addi	r18,r18,1
  807110:	8c400044 	addi	r17,r17,1
  807114:	008001c4 	movi	r2,7
  807118:	a9000015 	stw	r4,0(r21)
  80711c:	a8c00115 	stw	r3,4(r21)
  807120:	dc800e15 	stw	r18,56(sp)
  807124:	dc400d15 	stw	r17,52(sp)
  807128:	147e6016 	blt	r2,r17,806aac <___vfprintf_internal_r+0xde8>
  80712c:	acc00204 	addi	r19,r21,8
  807130:	003cd106 	br	806478 <___vfprintf_internal_r+0x7b4>
  807134:	07002074 	movhi	fp,129
  807138:	e714f184 	addi	fp,fp,21446
  80713c:	003c4906 	br	806264 <___vfprintf_internal_r+0x5a0>
  807140:	dd000f04 	addi	r20,sp,60
  807144:	dc801904 	addi	r18,sp,100
  807148:	8009883a 	mov	r4,r16
  80714c:	880b883a 	mov	r5,r17
  807150:	01800284 	movi	r6,10
  807154:	000f883a 	mov	r7,zero
  807158:	08107ec0 	call	8107ec <__umoddi3>
  80715c:	12000c04 	addi	r8,r2,48
  807160:	94bfffc4 	addi	r18,r18,-1
  807164:	8009883a 	mov	r4,r16
  807168:	880b883a 	mov	r5,r17
  80716c:	01800284 	movi	r6,10
  807170:	000f883a 	mov	r7,zero
  807174:	92000005 	stb	r8,0(r18)
  807178:	08101800 	call	810180 <__udivdi3>
  80717c:	1009883a 	mov	r4,r2
  807180:	1021883a 	mov	r16,r2
  807184:	18800068 	cmpgeui	r2,r3,1
  807188:	1823883a 	mov	r17,r3
  80718c:	103fee1e 	bne	r2,zero,807148 <___vfprintf_internal_r+0x1484>
  807190:	1800021e 	bne	r3,zero,80719c <___vfprintf_internal_r+0x14d8>
  807194:	00800244 	movi	r2,9
  807198:	113feb36 	bltu	r2,r4,807148 <___vfprintf_internal_r+0x1484>
  80719c:	94bfffc4 	addi	r18,r18,-1
  8071a0:	dc814115 	stw	r18,1284(sp)
  8071a4:	003fc006 	br	8070a8 <___vfprintf_internal_r+0x13e4>
  8071a8:	d9014c17 	ldw	r4,1328(sp)
  8071ac:	2080004c 	andi	r2,r4,1
  8071b0:	10009a1e 	bne	r2,zero,80741c <___vfprintf_internal_r+0x1758>
  8071b4:	d9401904 	addi	r5,sp,100
  8071b8:	dd000f04 	addi	r20,sp,60
  8071bc:	d9414115 	stw	r5,1284(sp)
  8071c0:	003d5b06 	br	806730 <___vfprintf_internal_r+0xa6c>
  8071c4:	d9014f17 	ldw	r4,1340(sp)
  8071c8:	b00b883a 	mov	r5,r22
  8071cc:	d9800c04 	addi	r6,sp,48
  8071d0:	0805c6c0 	call	805c6c <__sprint_r>
  8071d4:	103c731e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8071d8:	dc800e17 	ldw	r18,56(sp)
  8071dc:	d8c01904 	addi	r3,sp,100
  8071e0:	003cf906 	br	8065c8 <___vfprintf_internal_r+0x904>
  8071e4:	d8c14c17 	ldw	r3,1328(sp)
  8071e8:	1880040c 	andi	r2,r3,16
  8071ec:	1000711e 	bne	r2,zero,8073b4 <___vfprintf_internal_r+0x16f0>
  8071f0:	d9014c17 	ldw	r4,1328(sp)
  8071f4:	2080100c 	andi	r2,r4,64
  8071f8:	10006e26 	beq	r2,zero,8073b4 <___vfprintf_internal_r+0x16f0>
  8071fc:	3c00000b 	ldhu	r16,0(r7)
  807200:	0023883a 	mov	r17,zero
  807204:	39c00104 	addi	r7,r7,4
  807208:	d9c14015 	stw	r7,1280(sp)
  80720c:	003efa06 	br	806df8 <___vfprintf_internal_r+0x1134>
  807210:	dc400d17 	ldw	r17,52(sp)
  807214:	07002074 	movhi	fp,129
  807218:	e714f184 	addi	fp,fp,21446
  80721c:	9425883a 	add	r18,r18,r16
  807220:	8c400044 	addi	r17,r17,1
  807224:	008001c4 	movi	r2,7
  807228:	1f000015 	stw	fp,0(r3)
  80722c:	1c000115 	stw	r16,4(r3)
  807230:	dc800e15 	stw	r18,56(sp)
  807234:	dc400d15 	stw	r17,52(sp)
  807238:	147d7016 	blt	r2,r17,8067fc <___vfprintf_internal_r+0xb38>
  80723c:	18c00204 	addi	r3,r3,8
  807240:	003d7506 	br	806818 <___vfprintf_internal_r+0xb54>
  807244:	dc800e17 	ldw	r18,56(sp)
  807248:	dc400d17 	ldw	r17,52(sp)
  80724c:	07002074 	movhi	fp,129
  807250:	e714f584 	addi	fp,fp,21462
  807254:	003bba06 	br	806140 <___vfprintf_internal_r+0x47c>
  807258:	d9014f17 	ldw	r4,1340(sp)
  80725c:	b00b883a 	mov	r5,r22
  807260:	d9800c04 	addi	r6,sp,48
  807264:	0805c6c0 	call	805c6c <__sprint_r>
  807268:	103c4e1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  80726c:	dc800e17 	ldw	r18,56(sp)
  807270:	d8c01904 	addi	r3,sp,100
  807274:	003ce306 	br	806604 <___vfprintf_internal_r+0x940>
  807278:	3c000017 	ldw	r16,0(r7)
  80727c:	0009883a 	mov	r4,zero
  807280:	39c00104 	addi	r7,r7,4
  807284:	0023883a 	mov	r17,zero
  807288:	d9c14015 	stw	r7,1280(sp)
  80728c:	d8000405 	stb	zero,16(sp)
  807290:	003d1a06 	br	8066fc <___vfprintf_internal_r+0xa38>
  807294:	38800017 	ldw	r2,0(r7)
  807298:	39c00104 	addi	r7,r7,4
  80729c:	d9c14015 	stw	r7,1280(sp)
  8072a0:	1023d7fa 	srai	r17,r2,31
  8072a4:	1021883a 	mov	r16,r2
  8072a8:	003d1206 	br	8066f4 <___vfprintf_internal_r+0xa30>
  8072ac:	3c000017 	ldw	r16,0(r7)
  8072b0:	01000044 	movi	r4,1
  8072b4:	39c00104 	addi	r7,r7,4
  8072b8:	0023883a 	mov	r17,zero
  8072bc:	d9c14015 	stw	r7,1280(sp)
  8072c0:	d8000405 	stb	zero,16(sp)
  8072c4:	003d0d06 	br	8066fc <___vfprintf_internal_r+0xa38>
  8072c8:	00802074 	movhi	r2,129
  8072cc:	1094f104 	addi	r2,r2,21444
  8072d0:	94800044 	addi	r18,r18,1
  8072d4:	8c400044 	addi	r17,r17,1
  8072d8:	a8800015 	stw	r2,0(r21)
  8072dc:	00c00044 	movi	r3,1
  8072e0:	008001c4 	movi	r2,7
  8072e4:	a8c00115 	stw	r3,4(r21)
  8072e8:	dc800e15 	stw	r18,56(sp)
  8072ec:	dc400d15 	stw	r17,52(sp)
  8072f0:	1440ca16 	blt	r2,r17,80761c <___vfprintf_internal_r+0x1958>
  8072f4:	a8c00204 	addi	r3,r21,8
  8072f8:	2000061e 	bne	r4,zero,807314 <___vfprintf_internal_r+0x1650>
  8072fc:	d9414717 	ldw	r5,1308(sp)
  807300:	2800041e 	bne	r5,zero,807314 <___vfprintf_internal_r+0x1650>
  807304:	d9814c17 	ldw	r6,1328(sp)
  807308:	3080004c 	andi	r2,r6,1
  80730c:	1005003a 	cmpeq	r2,r2,zero
  807310:	103bea1e 	bne	r2,zero,8062bc <___vfprintf_internal_r+0x5f8>
  807314:	00800044 	movi	r2,1
  807318:	dc400d17 	ldw	r17,52(sp)
  80731c:	18800115 	stw	r2,4(r3)
  807320:	d8814917 	ldw	r2,1316(sp)
  807324:	94800044 	addi	r18,r18,1
  807328:	8c400044 	addi	r17,r17,1
  80732c:	18800015 	stw	r2,0(r3)
  807330:	008001c4 	movi	r2,7
  807334:	dc800e15 	stw	r18,56(sp)
  807338:	dc400d15 	stw	r17,52(sp)
  80733c:	1440ca16 	blt	r2,r17,807668 <___vfprintf_internal_r+0x19a4>
  807340:	18c00204 	addi	r3,r3,8
  807344:	0121c83a 	sub	r16,zero,r4
  807348:	0400500e 	bge	zero,r16,80748c <___vfprintf_internal_r+0x17c8>
  80734c:	00800404 	movi	r2,16
  807350:	1400800e 	bge	r2,r16,807554 <___vfprintf_internal_r+0x1890>
  807354:	1027883a 	mov	r19,r2
  807358:	07002074 	movhi	fp,129
  80735c:	e714f184 	addi	fp,fp,21446
  807360:	050001c4 	movi	r20,7
  807364:	00000306 	br	807374 <___vfprintf_internal_r+0x16b0>
  807368:	18c00204 	addi	r3,r3,8
  80736c:	843ffc04 	addi	r16,r16,-16
  807370:	9c007a0e 	bge	r19,r16,80755c <___vfprintf_internal_r+0x1898>
  807374:	94800404 	addi	r18,r18,16
  807378:	8c400044 	addi	r17,r17,1
  80737c:	1f000015 	stw	fp,0(r3)
  807380:	1cc00115 	stw	r19,4(r3)
  807384:	dc800e15 	stw	r18,56(sp)
  807388:	dc400d15 	stw	r17,52(sp)
  80738c:	a47ff60e 	bge	r20,r17,807368 <___vfprintf_internal_r+0x16a4>
  807390:	d9014f17 	ldw	r4,1340(sp)
  807394:	b00b883a 	mov	r5,r22
  807398:	d9800c04 	addi	r6,sp,48
  80739c:	0805c6c0 	call	805c6c <__sprint_r>
  8073a0:	103c001e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8073a4:	dc800e17 	ldw	r18,56(sp)
  8073a8:	dc400d17 	ldw	r17,52(sp)
  8073ac:	d8c01904 	addi	r3,sp,100
  8073b0:	003fee06 	br	80736c <___vfprintf_internal_r+0x16a8>
  8073b4:	3c000017 	ldw	r16,0(r7)
  8073b8:	0023883a 	mov	r17,zero
  8073bc:	39c00104 	addi	r7,r7,4
  8073c0:	d9c14015 	stw	r7,1280(sp)
  8073c4:	003e8c06 	br	806df8 <___vfprintf_internal_r+0x1134>
  8073c8:	d9401904 	addi	r5,sp,100
  8073cc:	dd000f04 	addi	r20,sp,60
  8073d0:	d9414115 	stw	r5,1284(sp)
  8073d4:	d9814417 	ldw	r6,1296(sp)
  8073d8:	880a973a 	slli	r5,r17,28
  8073dc:	8004d13a 	srli	r2,r16,4
  8073e0:	810003cc 	andi	r4,r16,15
  8073e4:	3109883a 	add	r4,r6,r4
  8073e8:	2884b03a 	or	r2,r5,r2
  8073ec:	21400003 	ldbu	r5,0(r4)
  8073f0:	d9014117 	ldw	r4,1284(sp)
  8073f4:	8806d13a 	srli	r3,r17,4
  8073f8:	1021883a 	mov	r16,r2
  8073fc:	213fffc4 	addi	r4,r4,-1
  807400:	d9014115 	stw	r4,1284(sp)
  807404:	d9814117 	ldw	r6,1284(sp)
  807408:	10c8b03a 	or	r4,r2,r3
  80740c:	1823883a 	mov	r17,r3
  807410:	31400005 	stb	r5,0(r6)
  807414:	203fef1e 	bne	r4,zero,8073d4 <___vfprintf_internal_r+0x1710>
  807418:	003cc506 	br	806730 <___vfprintf_internal_r+0xa6c>
  80741c:	00800c04 	movi	r2,48
  807420:	d98018c4 	addi	r6,sp,99
  807424:	dd000f04 	addi	r20,sp,60
  807428:	d88018c5 	stb	r2,99(sp)
  80742c:	d9814115 	stw	r6,1284(sp)
  807430:	003cbf06 	br	806730 <___vfprintf_internal_r+0xa6c>
  807434:	dc400d17 	ldw	r17,52(sp)
  807438:	07002074 	movhi	fp,129
  80743c:	e714f584 	addi	fp,fp,21462
  807440:	003bc106 	br	806348 <___vfprintf_internal_r+0x684>
  807444:	d9414c17 	ldw	r5,1328(sp)
  807448:	2880040c 	andi	r2,r5,16
  80744c:	10007c26 	beq	r2,zero,807640 <___vfprintf_internal_r+0x197c>
  807450:	38800017 	ldw	r2,0(r7)
  807454:	39c00104 	addi	r7,r7,4
  807458:	d9c14015 	stw	r7,1280(sp)
  80745c:	d9814b17 	ldw	r6,1324(sp)
  807460:	d9c14017 	ldw	r7,1280(sp)
  807464:	11800015 	stw	r6,0(r2)
  807468:	003a7206 	br	805e34 <___vfprintf_internal_r+0x170>
  80746c:	d9014f17 	ldw	r4,1340(sp)
  807470:	b00b883a 	mov	r5,r22
  807474:	d9800c04 	addi	r6,sp,48
  807478:	0805c6c0 	call	805c6c <__sprint_r>
  80747c:	103bc91e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  807480:	dc800e17 	ldw	r18,56(sp)
  807484:	dc400d17 	ldw	r17,52(sp)
  807488:	d8c01904 	addi	r3,sp,100
  80748c:	d9014717 	ldw	r4,1308(sp)
  807490:	d9414117 	ldw	r5,1284(sp)
  807494:	8c400044 	addi	r17,r17,1
  807498:	9125883a 	add	r18,r18,r4
  80749c:	008001c4 	movi	r2,7
  8074a0:	19400015 	stw	r5,0(r3)
  8074a4:	19000115 	stw	r4,4(r3)
  8074a8:	dc800e15 	stw	r18,56(sp)
  8074ac:	dc400d15 	stw	r17,52(sp)
  8074b0:	147ce816 	blt	r2,r17,806854 <___vfprintf_internal_r+0xb90>
  8074b4:	18c00204 	addi	r3,r3,8
  8074b8:	003b8006 	br	8062bc <___vfprintf_internal_r+0x5f8>
  8074bc:	38c00017 	ldw	r3,0(r7)
  8074c0:	39000204 	addi	r4,r7,8
  8074c4:	d9014015 	stw	r4,1280(sp)
  8074c8:	d8c14215 	stw	r3,1288(sp)
  8074cc:	39c00117 	ldw	r7,4(r7)
  8074d0:	d9c14315 	stw	r7,1292(sp)
  8074d4:	003e1a06 	br	806d40 <___vfprintf_internal_r+0x107c>
  8074d8:	0005883a 	mov	r2,zero
  8074dc:	1409c83a 	sub	r4,r2,r16
  8074e0:	1105803a 	cmpltu	r2,r2,r4
  8074e4:	044bc83a 	sub	r5,zero,r17
  8074e8:	2885c83a 	sub	r2,r5,r2
  8074ec:	2021883a 	mov	r16,r4
  8074f0:	1023883a 	mov	r17,r2
  8074f4:	01000044 	movi	r4,1
  8074f8:	00800b44 	movi	r2,45
  8074fc:	d8800405 	stb	r2,16(sp)
  807500:	003c7e06 	br	8066fc <___vfprintf_internal_r+0xa38>
  807504:	d9014f17 	ldw	r4,1340(sp)
  807508:	b00b883a 	mov	r5,r22
  80750c:	d9800c04 	addi	r6,sp,48
  807510:	0805c6c0 	call	805c6c <__sprint_r>
  807514:	103ba31e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  807518:	dc800e17 	ldw	r18,56(sp)
  80751c:	dc400d17 	ldw	r17,52(sp)
  807520:	d9000517 	ldw	r4,20(sp)
  807524:	d9401904 	addi	r5,sp,100
  807528:	003da106 	br	806bb0 <___vfprintf_internal_r+0xeec>
  80752c:	d9014f17 	ldw	r4,1340(sp)
  807530:	b00b883a 	mov	r5,r22
  807534:	d9800c04 	addi	r6,sp,48
  807538:	0805c6c0 	call	805c6c <__sprint_r>
  80753c:	103b991e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  807540:	dc800e17 	ldw	r18,56(sp)
  807544:	dc400d17 	ldw	r17,52(sp)
  807548:	d9000517 	ldw	r4,20(sp)
  80754c:	d8c01904 	addi	r3,sp,100
  807550:	003d8b06 	br	806b80 <___vfprintf_internal_r+0xebc>
  807554:	07002074 	movhi	fp,129
  807558:	e714f184 	addi	fp,fp,21446
  80755c:	9425883a 	add	r18,r18,r16
  807560:	8c400044 	addi	r17,r17,1
  807564:	008001c4 	movi	r2,7
  807568:	1f000015 	stw	fp,0(r3)
  80756c:	1c000115 	stw	r16,4(r3)
  807570:	dc800e15 	stw	r18,56(sp)
  807574:	dc400d15 	stw	r17,52(sp)
  807578:	147fbc16 	blt	r2,r17,80746c <___vfprintf_internal_r+0x17a8>
  80757c:	18c00204 	addi	r3,r3,8
  807580:	003fc206 	br	80748c <___vfprintf_internal_r+0x17c8>
  807584:	d9014f17 	ldw	r4,1340(sp)
  807588:	b00b883a 	mov	r5,r22
  80758c:	d9800c04 	addi	r6,sp,48
  807590:	0805c6c0 	call	805c6c <__sprint_r>
  807594:	103b831e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  807598:	dc800e17 	ldw	r18,56(sp)
  80759c:	d9000517 	ldw	r4,20(sp)
  8075a0:	d8c01904 	addi	r3,sp,100
  8075a4:	003cfc06 	br	806998 <___vfprintf_internal_r+0xcd4>
  8075a8:	07002074 	movhi	fp,129
  8075ac:	e714f184 	addi	fp,fp,21446
  8075b0:	003bde06 	br	80652c <___vfprintf_internal_r+0x868>
  8075b4:	00802074 	movhi	r2,129
  8075b8:	1094e004 	addi	r2,r2,21376
  8075bc:	d8814115 	stw	r2,1284(sp)
  8075c0:	003def06 	br	806d80 <___vfprintf_internal_r+0x10bc>
  8075c4:	d9014217 	ldw	r4,1288(sp)
  8075c8:	d9414317 	ldw	r5,1292(sp)
  8075cc:	080cf300 	call	80cf30 <__isnand>
  8075d0:	10003926 	beq	r2,zero,8076b8 <___vfprintf_internal_r+0x19f4>
  8075d4:	d9414d17 	ldw	r5,1332(sp)
  8075d8:	008011c4 	movi	r2,71
  8075dc:	1140ce16 	blt	r2,r5,807918 <___vfprintf_internal_r+0x1c54>
  8075e0:	01802074 	movhi	r6,129
  8075e4:	3194e104 	addi	r6,r6,21380
  8075e8:	d9814115 	stw	r6,1284(sp)
  8075ec:	003de406 	br	806d80 <___vfprintf_internal_r+0x10bc>
  8075f0:	d9014c17 	ldw	r4,1328(sp)
  8075f4:	bdc00044 	addi	r23,r23,1
  8075f8:	b8c00007 	ldb	r3,0(r23)
  8075fc:	21000814 	ori	r4,r4,32
  807600:	d9014c15 	stw	r4,1328(sp)
  807604:	003a2e06 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  807608:	dcc14515 	stw	r19,1300(sp)
  80760c:	98011016 	blt	r19,zero,807a50 <___vfprintf_internal_r+0x1d8c>
  807610:	980f883a 	mov	r7,r19
  807614:	d8014615 	stw	zero,1304(sp)
  807618:	003c4c06 	br	80674c <___vfprintf_internal_r+0xa88>
  80761c:	d9014f17 	ldw	r4,1340(sp)
  807620:	b00b883a 	mov	r5,r22
  807624:	d9800c04 	addi	r6,sp,48
  807628:	0805c6c0 	call	805c6c <__sprint_r>
  80762c:	103b5d1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  807630:	dc800e17 	ldw	r18,56(sp)
  807634:	d9000517 	ldw	r4,20(sp)
  807638:	d8c01904 	addi	r3,sp,100
  80763c:	003f2e06 	br	8072f8 <___vfprintf_internal_r+0x1634>
  807640:	d8c14c17 	ldw	r3,1328(sp)
  807644:	1880100c 	andi	r2,r3,64
  807648:	1000a026 	beq	r2,zero,8078cc <___vfprintf_internal_r+0x1c08>
  80764c:	38800017 	ldw	r2,0(r7)
  807650:	39c00104 	addi	r7,r7,4
  807654:	d9c14015 	stw	r7,1280(sp)
  807658:	d9014b17 	ldw	r4,1324(sp)
  80765c:	d9c14017 	ldw	r7,1280(sp)
  807660:	1100000d 	sth	r4,0(r2)
  807664:	0039f306 	br	805e34 <___vfprintf_internal_r+0x170>
  807668:	d9014f17 	ldw	r4,1340(sp)
  80766c:	b00b883a 	mov	r5,r22
  807670:	d9800c04 	addi	r6,sp,48
  807674:	0805c6c0 	call	805c6c <__sprint_r>
  807678:	103b4a1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  80767c:	dc800e17 	ldw	r18,56(sp)
  807680:	dc400d17 	ldw	r17,52(sp)
  807684:	d9000517 	ldw	r4,20(sp)
  807688:	d8c01904 	addi	r3,sp,100
  80768c:	003f2d06 	br	807344 <___vfprintf_internal_r+0x1680>
  807690:	00800184 	movi	r2,6
  807694:	14c09a36 	bltu	r2,r19,807900 <___vfprintf_internal_r+0x1c3c>
  807698:	dcc14515 	stw	r19,1300(sp)
  80769c:	9800010e 	bge	r19,zero,8076a4 <___vfprintf_internal_r+0x19e0>
  8076a0:	d8014515 	stw	zero,1300(sp)
  8076a4:	00802074 	movhi	r2,129
  8076a8:	1094e304 	addi	r2,r2,21388
  8076ac:	980f883a 	mov	r7,r19
  8076b0:	d8814115 	stw	r2,1284(sp)
  8076b4:	003a7206 	br	806080 <___vfprintf_internal_r+0x3bc>
  8076b8:	00bfffc4 	movi	r2,-1
  8076bc:	9880e226 	beq	r19,r2,807a48 <___vfprintf_internal_r+0x1d84>
  8076c0:	d9414d17 	ldw	r5,1332(sp)
  8076c4:	008019c4 	movi	r2,103
  8076c8:	2880dc26 	beq	r5,r2,807a3c <___vfprintf_internal_r+0x1d78>
  8076cc:	008011c4 	movi	r2,71
  8076d0:	2880da26 	beq	r5,r2,807a3c <___vfprintf_internal_r+0x1d78>
  8076d4:	d9414c17 	ldw	r5,1328(sp)
  8076d8:	d9014317 	ldw	r4,1292(sp)
  8076dc:	d9814217 	ldw	r6,1288(sp)
  8076e0:	29404014 	ori	r5,r5,256
  8076e4:	d9414c15 	stw	r5,1328(sp)
  8076e8:	2000cc16 	blt	r4,zero,807a1c <___vfprintf_internal_r+0x1d58>
  8076ec:	3021883a 	mov	r16,r6
  8076f0:	2023883a 	mov	r17,r4
  8076f4:	0039883a 	mov	fp,zero
  8076f8:	d9414d17 	ldw	r5,1332(sp)
  8076fc:	00801984 	movi	r2,102
  807700:	2880b726 	beq	r5,r2,8079e0 <___vfprintf_internal_r+0x1d1c>
  807704:	00801184 	movi	r2,70
  807708:	2880b526 	beq	r5,r2,8079e0 <___vfprintf_internal_r+0x1d1c>
  80770c:	00801944 	movi	r2,101
  807710:	2880c826 	beq	r5,r2,807a34 <___vfprintf_internal_r+0x1d70>
  807714:	00801144 	movi	r2,69
  807718:	2880c626 	beq	r5,r2,807a34 <___vfprintf_internal_r+0x1d70>
  80771c:	9829883a 	mov	r20,r19
  807720:	d9014f17 	ldw	r4,1340(sp)
  807724:	d8800504 	addi	r2,sp,20
  807728:	880d883a 	mov	r6,r17
  80772c:	d8800115 	stw	r2,4(sp)
  807730:	d8c00604 	addi	r3,sp,24
  807734:	d8800704 	addi	r2,sp,28
  807738:	800b883a 	mov	r5,r16
  80773c:	01c00084 	movi	r7,2
  807740:	d8c00215 	stw	r3,8(sp)
  807744:	d8800315 	stw	r2,12(sp)
  807748:	dd000015 	stw	r20,0(sp)
  80774c:	08099500 	call	809950 <_dtoa_r>
  807750:	d9814d17 	ldw	r6,1332(sp)
  807754:	d8814115 	stw	r2,1284(sp)
  807758:	008019c4 	movi	r2,103
  80775c:	30809526 	beq	r6,r2,8079b4 <___vfprintf_internal_r+0x1cf0>
  807760:	d8c14d17 	ldw	r3,1332(sp)
  807764:	008011c4 	movi	r2,71
  807768:	18809226 	beq	r3,r2,8079b4 <___vfprintf_internal_r+0x1cf0>
  80776c:	d9414117 	ldw	r5,1284(sp)
  807770:	d9814d17 	ldw	r6,1332(sp)
  807774:	00801984 	movi	r2,102
  807778:	2d25883a 	add	r18,r5,r20
  80777c:	30808626 	beq	r6,r2,807998 <___vfprintf_internal_r+0x1cd4>
  807780:	00801184 	movi	r2,70
  807784:	30808426 	beq	r6,r2,807998 <___vfprintf_internal_r+0x1cd4>
  807788:	000d883a 	mov	r6,zero
  80778c:	000f883a 	mov	r7,zero
  807790:	880b883a 	mov	r5,r17
  807794:	8009883a 	mov	r4,r16
  807798:	08113780 	call	811378 <__eqdf2>
  80779c:	1000751e 	bne	r2,zero,807974 <___vfprintf_internal_r+0x1cb0>
  8077a0:	9005883a 	mov	r2,r18
  8077a4:	dc800715 	stw	r18,28(sp)
  8077a8:	d9014117 	ldw	r4,1284(sp)
  8077ac:	d9414d17 	ldw	r5,1332(sp)
  8077b0:	00c019c4 	movi	r3,103
  8077b4:	1125c83a 	sub	r18,r2,r4
  8077b8:	28c06826 	beq	r5,r3,80795c <___vfprintf_internal_r+0x1c98>
  8077bc:	008011c4 	movi	r2,71
  8077c0:	28806626 	beq	r5,r2,80795c <___vfprintf_internal_r+0x1c98>
  8077c4:	d9000517 	ldw	r4,20(sp)
  8077c8:	d8c14d17 	ldw	r3,1332(sp)
  8077cc:	00801944 	movi	r2,101
  8077d0:	10c05516 	blt	r2,r3,807928 <___vfprintf_internal_r+0x1c64>
  8077d4:	213fffc4 	addi	r4,r4,-1
  8077d8:	d9000515 	stw	r4,20(sp)
  8077dc:	d8c00805 	stb	r3,32(sp)
  8077e0:	2021883a 	mov	r16,r4
  8077e4:	2000c116 	blt	r4,zero,807aec <___vfprintf_internal_r+0x1e28>
  8077e8:	00800ac4 	movi	r2,43
  8077ec:	d8800845 	stb	r2,33(sp)
  8077f0:	00800244 	movi	r2,9
  8077f4:	1400af0e 	bge	r2,r16,807ab4 <___vfprintf_internal_r+0x1df0>
  8077f8:	1027883a 	mov	r19,r2
  8077fc:	dc400b84 	addi	r17,sp,46
  807800:	8009883a 	mov	r4,r16
  807804:	01400284 	movi	r5,10
  807808:	08119c80 	call	8119c8 <__modsi3>
  80780c:	10800c04 	addi	r2,r2,48
  807810:	8c7fffc4 	addi	r17,r17,-1
  807814:	8009883a 	mov	r4,r16
  807818:	01400284 	movi	r5,10
  80781c:	88800005 	stb	r2,0(r17)
  807820:	08119680 	call	811968 <__divsi3>
  807824:	1021883a 	mov	r16,r2
  807828:	98bff516 	blt	r19,r2,807800 <___vfprintf_internal_r+0x1b3c>
  80782c:	10c00c04 	addi	r3,r2,48
  807830:	d88009c4 	addi	r2,sp,39
  807834:	108001c4 	addi	r2,r2,7
  807838:	897fffc4 	addi	r5,r17,-1
  80783c:	88ffffc5 	stb	r3,-1(r17)
  807840:	2880a72e 	bgeu	r5,r2,807ae0 <___vfprintf_internal_r+0x1e1c>
  807844:	1009883a 	mov	r4,r2
  807848:	d9800804 	addi	r6,sp,32
  80784c:	d8c00884 	addi	r3,sp,34
  807850:	28800003 	ldbu	r2,0(r5)
  807854:	29400044 	addi	r5,r5,1
  807858:	18800005 	stb	r2,0(r3)
  80785c:	18c00044 	addi	r3,r3,1
  807860:	293ffb36 	bltu	r5,r4,807850 <___vfprintf_internal_r+0x1b8c>
  807864:	1987c83a 	sub	r3,r3,r6
  807868:	00800044 	movi	r2,1
  80786c:	d8c14815 	stw	r3,1312(sp)
  807870:	90cf883a 	add	r7,r18,r3
  807874:	1480960e 	bge	r2,r18,807ad0 <___vfprintf_internal_r+0x1e0c>
  807878:	39c00044 	addi	r7,r7,1
  80787c:	d9c14515 	stw	r7,1300(sp)
  807880:	38003416 	blt	r7,zero,807954 <___vfprintf_internal_r+0x1c90>
  807884:	e0803fcc 	andi	r2,fp,255
  807888:	1080201c 	xori	r2,r2,128
  80788c:	10bfe004 	addi	r2,r2,-128
  807890:	10004e26 	beq	r2,zero,8079cc <___vfprintf_internal_r+0x1d08>
  807894:	00800b44 	movi	r2,45
  807898:	dc814715 	stw	r18,1308(sp)
  80789c:	d8014615 	stw	zero,1304(sp)
  8078a0:	d8800405 	stb	r2,16(sp)
  8078a4:	003bab06 	br	806754 <___vfprintf_internal_r+0xa90>
  8078a8:	00800b44 	movi	r2,45
  8078ac:	d8800405 	stb	r2,16(sp)
  8078b0:	003d2d06 	br	806d68 <___vfprintf_internal_r+0x10a4>
  8078b4:	d9014f17 	ldw	r4,1340(sp)
  8078b8:	b00b883a 	mov	r5,r22
  8078bc:	d9800c04 	addi	r6,sp,48
  8078c0:	0805c6c0 	call	805c6c <__sprint_r>
  8078c4:	103ab71e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x6e0>
  8078c8:	003ab506 	br	8063a0 <___vfprintf_internal_r+0x6dc>
  8078cc:	38800017 	ldw	r2,0(r7)
  8078d0:	39c00104 	addi	r7,r7,4
  8078d4:	d9c14015 	stw	r7,1280(sp)
  8078d8:	d9414b17 	ldw	r5,1324(sp)
  8078dc:	d9c14017 	ldw	r7,1280(sp)
  8078e0:	11400015 	stw	r5,0(r2)
  8078e4:	00395306 	br	805e34 <___vfprintf_internal_r+0x170>
  8078e8:	980f883a 	mov	r7,r19
  8078ec:	dcc14515 	stw	r19,1300(sp)
  8078f0:	d8014615 	stw	zero,1304(sp)
  8078f4:	003b9506 	br	80674c <___vfprintf_internal_r+0xa88>
  8078f8:	0027883a 	mov	r19,zero
  8078fc:	00397206 	br	805ec8 <___vfprintf_internal_r+0x204>
  807900:	00c02074 	movhi	r3,129
  807904:	18d4e304 	addi	r3,r3,21388
  807908:	100f883a 	mov	r7,r2
  80790c:	d8814515 	stw	r2,1300(sp)
  807910:	d8c14115 	stw	r3,1284(sp)
  807914:	0039da06 	br	806080 <___vfprintf_internal_r+0x3bc>
  807918:	00802074 	movhi	r2,129
  80791c:	1094e204 	addi	r2,r2,21384
  807920:	d8814115 	stw	r2,1284(sp)
  807924:	003d1606 	br	806d80 <___vfprintf_internal_r+0x10bc>
  807928:	d9414d17 	ldw	r5,1332(sp)
  80792c:	00801984 	movi	r2,102
  807930:	28804926 	beq	r5,r2,807a58 <___vfprintf_internal_r+0x1d94>
  807934:	200f883a 	mov	r7,r4
  807938:	24805716 	blt	r4,r18,807a98 <___vfprintf_internal_r+0x1dd4>
  80793c:	d9414c17 	ldw	r5,1328(sp)
  807940:	2880004c 	andi	r2,r5,1
  807944:	10000126 	beq	r2,zero,80794c <___vfprintf_internal_r+0x1c88>
  807948:	21c00044 	addi	r7,r4,1
  80794c:	d9c14515 	stw	r7,1300(sp)
  807950:	383fcc0e 	bge	r7,zero,807884 <___vfprintf_internal_r+0x1bc0>
  807954:	d8014515 	stw	zero,1300(sp)
  807958:	003fca06 	br	807884 <___vfprintf_internal_r+0x1bc0>
  80795c:	d9000517 	ldw	r4,20(sp)
  807960:	00bfff04 	movi	r2,-4
  807964:	1100480e 	bge	r2,r4,807a88 <___vfprintf_internal_r+0x1dc4>
  807968:	99004716 	blt	r19,r4,807a88 <___vfprintf_internal_r+0x1dc4>
  80796c:	d8c14d15 	stw	r3,1332(sp)
  807970:	003ff006 	br	807934 <___vfprintf_internal_r+0x1c70>
  807974:	d8800717 	ldw	r2,28(sp)
  807978:	14bf8b2e 	bgeu	r2,r18,8077a8 <___vfprintf_internal_r+0x1ae4>
  80797c:	9007883a 	mov	r3,r18
  807980:	01000c04 	movi	r4,48
  807984:	11000005 	stb	r4,0(r2)
  807988:	10800044 	addi	r2,r2,1
  80798c:	d8800715 	stw	r2,28(sp)
  807990:	18bffc1e 	bne	r3,r2,807984 <___vfprintf_internal_r+0x1cc0>
  807994:	003f8406 	br	8077a8 <___vfprintf_internal_r+0x1ae4>
  807998:	d8814117 	ldw	r2,1284(sp)
  80799c:	10c00007 	ldb	r3,0(r2)
  8079a0:	00800c04 	movi	r2,48
  8079a4:	18805b26 	beq	r3,r2,807b14 <___vfprintf_internal_r+0x1e50>
  8079a8:	d9000517 	ldw	r4,20(sp)
  8079ac:	9125883a 	add	r18,r18,r4
  8079b0:	003f7506 	br	807788 <___vfprintf_internal_r+0x1ac4>
  8079b4:	d9014c17 	ldw	r4,1328(sp)
  8079b8:	2080004c 	andi	r2,r4,1
  8079bc:	1005003a 	cmpeq	r2,r2,zero
  8079c0:	103f6a26 	beq	r2,zero,80776c <___vfprintf_internal_r+0x1aa8>
  8079c4:	d8800717 	ldw	r2,28(sp)
  8079c8:	003f7706 	br	8077a8 <___vfprintf_internal_r+0x1ae4>
  8079cc:	d9c14515 	stw	r7,1300(sp)
  8079d0:	38004d16 	blt	r7,zero,807b08 <___vfprintf_internal_r+0x1e44>
  8079d4:	dc814715 	stw	r18,1308(sp)
  8079d8:	d8014615 	stw	zero,1304(sp)
  8079dc:	003b5b06 	br	80674c <___vfprintf_internal_r+0xa88>
  8079e0:	d9014f17 	ldw	r4,1340(sp)
  8079e4:	d8800504 	addi	r2,sp,20
  8079e8:	d8800115 	stw	r2,4(sp)
  8079ec:	d8c00604 	addi	r3,sp,24
  8079f0:	d8800704 	addi	r2,sp,28
  8079f4:	800b883a 	mov	r5,r16
  8079f8:	880d883a 	mov	r6,r17
  8079fc:	01c000c4 	movi	r7,3
  807a00:	d8c00215 	stw	r3,8(sp)
  807a04:	d8800315 	stw	r2,12(sp)
  807a08:	dcc00015 	stw	r19,0(sp)
  807a0c:	9829883a 	mov	r20,r19
  807a10:	08099500 	call	809950 <_dtoa_r>
  807a14:	d8814115 	stw	r2,1284(sp)
  807a18:	003f5106 	br	807760 <___vfprintf_internal_r+0x1a9c>
  807a1c:	d8c14217 	ldw	r3,1288(sp)
  807a20:	d9014317 	ldw	r4,1292(sp)
  807a24:	07000b44 	movi	fp,45
  807a28:	1821883a 	mov	r16,r3
  807a2c:	2460003c 	xorhi	r17,r4,32768
  807a30:	003f3106 	br	8076f8 <___vfprintf_internal_r+0x1a34>
  807a34:	9d000044 	addi	r20,r19,1
  807a38:	003f3906 	br	807720 <___vfprintf_internal_r+0x1a5c>
  807a3c:	983f251e 	bne	r19,zero,8076d4 <___vfprintf_internal_r+0x1a10>
  807a40:	04c00044 	movi	r19,1
  807a44:	003f2306 	br	8076d4 <___vfprintf_internal_r+0x1a10>
  807a48:	04c00184 	movi	r19,6
  807a4c:	003f2106 	br	8076d4 <___vfprintf_internal_r+0x1a10>
  807a50:	d8014515 	stw	zero,1300(sp)
  807a54:	003eee06 	br	807610 <___vfprintf_internal_r+0x194c>
  807a58:	200f883a 	mov	r7,r4
  807a5c:	0100370e 	bge	zero,r4,807b3c <___vfprintf_internal_r+0x1e78>
  807a60:	9800031e 	bne	r19,zero,807a70 <___vfprintf_internal_r+0x1dac>
  807a64:	d9814c17 	ldw	r6,1328(sp)
  807a68:	3080004c 	andi	r2,r6,1
  807a6c:	103fb726 	beq	r2,zero,80794c <___vfprintf_internal_r+0x1c88>
  807a70:	20800044 	addi	r2,r4,1
  807a74:	98a7883a 	add	r19,r19,r2
  807a78:	dcc14515 	stw	r19,1300(sp)
  807a7c:	980f883a 	mov	r7,r19
  807a80:	983f800e 	bge	r19,zero,807884 <___vfprintf_internal_r+0x1bc0>
  807a84:	003fb306 	br	807954 <___vfprintf_internal_r+0x1c90>
  807a88:	d9814d17 	ldw	r6,1332(sp)
  807a8c:	31bfff84 	addi	r6,r6,-2
  807a90:	d9814d15 	stw	r6,1332(sp)
  807a94:	003f4c06 	br	8077c8 <___vfprintf_internal_r+0x1b04>
  807a98:	0100180e 	bge	zero,r4,807afc <___vfprintf_internal_r+0x1e38>
  807a9c:	00800044 	movi	r2,1
  807aa0:	1485883a 	add	r2,r2,r18
  807aa4:	d8814515 	stw	r2,1300(sp)
  807aa8:	100f883a 	mov	r7,r2
  807aac:	103f750e 	bge	r2,zero,807884 <___vfprintf_internal_r+0x1bc0>
  807ab0:	003fa806 	br	807954 <___vfprintf_internal_r+0x1c90>
  807ab4:	80c00c04 	addi	r3,r16,48
  807ab8:	00800c04 	movi	r2,48
  807abc:	d8c008c5 	stb	r3,35(sp)
  807ac0:	d9800804 	addi	r6,sp,32
  807ac4:	d8c00904 	addi	r3,sp,36
  807ac8:	d8800885 	stb	r2,34(sp)
  807acc:	003f6506 	br	807864 <___vfprintf_internal_r+0x1ba0>
  807ad0:	d9014c17 	ldw	r4,1328(sp)
  807ad4:	2084703a 	and	r2,r4,r2
  807ad8:	103f9c26 	beq	r2,zero,80794c <___vfprintf_internal_r+0x1c88>
  807adc:	003f6606 	br	807878 <___vfprintf_internal_r+0x1bb4>
  807ae0:	d9800804 	addi	r6,sp,32
  807ae4:	d8c00884 	addi	r3,sp,34
  807ae8:	003f5e06 	br	807864 <___vfprintf_internal_r+0x1ba0>
  807aec:	00800b44 	movi	r2,45
  807af0:	0121c83a 	sub	r16,zero,r4
  807af4:	d8800845 	stb	r2,33(sp)
  807af8:	003f3d06 	br	8077f0 <___vfprintf_internal_r+0x1b2c>
  807afc:	00800084 	movi	r2,2
  807b00:	1105c83a 	sub	r2,r2,r4
  807b04:	003fe606 	br	807aa0 <___vfprintf_internal_r+0x1ddc>
  807b08:	d8014515 	stw	zero,1300(sp)
  807b0c:	dc814715 	stw	r18,1308(sp)
  807b10:	003fb106 	br	8079d8 <___vfprintf_internal_r+0x1d14>
  807b14:	000d883a 	mov	r6,zero
  807b18:	000f883a 	mov	r7,zero
  807b1c:	8009883a 	mov	r4,r16
  807b20:	880b883a 	mov	r5,r17
  807b24:	08114000 	call	811400 <__nedf2>
  807b28:	103f9f26 	beq	r2,zero,8079a8 <___vfprintf_internal_r+0x1ce4>
  807b2c:	00800044 	movi	r2,1
  807b30:	1509c83a 	sub	r4,r2,r20
  807b34:	d9000515 	stw	r4,20(sp)
  807b38:	003f9b06 	br	8079a8 <___vfprintf_internal_r+0x1ce4>
  807b3c:	98000d1e 	bne	r19,zero,807b74 <___vfprintf_internal_r+0x1eb0>
  807b40:	d8c14c17 	ldw	r3,1328(sp)
  807b44:	1880004c 	andi	r2,r3,1
  807b48:	10000a1e 	bne	r2,zero,807b74 <___vfprintf_internal_r+0x1eb0>
  807b4c:	01000044 	movi	r4,1
  807b50:	200f883a 	mov	r7,r4
  807b54:	d9014515 	stw	r4,1300(sp)
  807b58:	003f4a06 	br	807884 <___vfprintf_internal_r+0x1bc0>
  807b5c:	3cc00017 	ldw	r19,0(r7)
  807b60:	39c00104 	addi	r7,r7,4
  807b64:	983d0e0e 	bge	r19,zero,806fa0 <___vfprintf_internal_r+0x12dc>
  807b68:	b8c00007 	ldb	r3,0(r23)
  807b6c:	04ffffc4 	movi	r19,-1
  807b70:	0038d306 	br	805ec0 <___vfprintf_internal_r+0x1fc>
  807b74:	9cc00084 	addi	r19,r19,2
  807b78:	dcc14515 	stw	r19,1300(sp)
  807b7c:	980f883a 	mov	r7,r19
  807b80:	983f400e 	bge	r19,zero,807884 <___vfprintf_internal_r+0x1bc0>
  807b84:	003f7306 	br	807954 <___vfprintf_internal_r+0x1c90>

00807b88 <__vfprintf_internal>:
  807b88:	00802074 	movhi	r2,129
  807b8c:	109c2904 	addi	r2,r2,28836
  807b90:	2013883a 	mov	r9,r4
  807b94:	11000017 	ldw	r4,0(r2)
  807b98:	2805883a 	mov	r2,r5
  807b9c:	300f883a 	mov	r7,r6
  807ba0:	480b883a 	mov	r5,r9
  807ba4:	100d883a 	mov	r6,r2
  807ba8:	0805cc41 	jmpi	805cc4 <___vfprintf_internal_r>

00807bac <__svfscanf_r>:
  807bac:	deff4e04 	addi	sp,sp,-712
  807bb0:	dd80ae15 	stw	r22,696(sp)
  807bb4:	dd00ac15 	stw	r20,688(sp)
  807bb8:	dc40a915 	stw	r17,676(sp)
  807bbc:	dc00a815 	stw	r16,672(sp)
  807bc0:	dfc0b115 	stw	ra,708(sp)
  807bc4:	df00b015 	stw	fp,704(sp)
  807bc8:	ddc0af15 	stw	r23,700(sp)
  807bcc:	dd40ad15 	stw	r21,692(sp)
  807bd0:	dcc0ab15 	stw	r19,684(sp)
  807bd4:	dc80aa15 	stw	r18,680(sp)
  807bd8:	202d883a 	mov	r22,r4
  807bdc:	2821883a 	mov	r16,r5
  807be0:	d9c0a415 	stw	r7,656(sp)
  807be4:	3029883a 	mov	r20,r6
  807be8:	d800a215 	stw	zero,648(sp)
  807bec:	0023883a 	mov	r17,zero
  807bf0:	d800a115 	stw	zero,644(sp)
  807bf4:	d800a015 	stw	zero,640(sp)
  807bf8:	a1000007 	ldb	r4,0(r20)
  807bfc:	d9000115 	stw	r4,4(sp)
  807c00:	20001f26 	beq	r4,zero,807c80 <__svfscanf_r+0xd4>
  807c04:	04c02074 	movhi	r19,129
  807c08:	9cdc2804 	addi	r19,r19,28832
  807c0c:	9c800017 	ldw	r18,0(r19)
  807c10:	a5000044 	addi	r20,r20,1
  807c14:	9107883a 	add	r3,r18,r4
  807c18:	18800003 	ldbu	r2,0(r3)
  807c1c:	1080020c 	andi	r2,r2,8
  807c20:	10002426 	beq	r2,zero,807cb4 <__svfscanf_r+0x108>
  807c24:	80c00117 	ldw	r3,4(r16)
  807c28:	00c00e0e 	bge	zero,r3,807c64 <__svfscanf_r+0xb8>
  807c2c:	81400017 	ldw	r5,0(r16)
  807c30:	98800017 	ldw	r2,0(r19)
  807c34:	28c00003 	ldbu	r3,0(r5)
  807c38:	1887883a 	add	r3,r3,r2
  807c3c:	19000003 	ldbu	r4,0(r3)
  807c40:	2100020c 	andi	r4,r4,8
  807c44:	203fec26 	beq	r4,zero,807bf8 <__svfscanf_r+0x4c>
  807c48:	80c00117 	ldw	r3,4(r16)
  807c4c:	29800044 	addi	r6,r5,1
  807c50:	8c400044 	addi	r17,r17,1
  807c54:	18ffffc4 	addi	r3,r3,-1
  807c58:	81800015 	stw	r6,0(r16)
  807c5c:	80c00115 	stw	r3,4(r16)
  807c60:	00fff216 	blt	zero,r3,807c2c <__svfscanf_r+0x80>
  807c64:	b009883a 	mov	r4,r22
  807c68:	800b883a 	mov	r5,r16
  807c6c:	080535c0 	call	80535c <__srefill_r>
  807c70:	103fee26 	beq	r2,zero,807c2c <__svfscanf_r+0x80>
  807c74:	a1000007 	ldb	r4,0(r20)
  807c78:	d9000115 	stw	r4,4(sp)
  807c7c:	203fe11e 	bne	r4,zero,807c04 <__svfscanf_r+0x58>
  807c80:	d880a217 	ldw	r2,648(sp)
  807c84:	dfc0b117 	ldw	ra,708(sp)
  807c88:	df00b017 	ldw	fp,704(sp)
  807c8c:	ddc0af17 	ldw	r23,700(sp)
  807c90:	dd80ae17 	ldw	r22,696(sp)
  807c94:	dd40ad17 	ldw	r21,692(sp)
  807c98:	dd00ac17 	ldw	r20,688(sp)
  807c9c:	dcc0ab17 	ldw	r19,684(sp)
  807ca0:	dc80aa17 	ldw	r18,680(sp)
  807ca4:	dc40a917 	ldw	r17,676(sp)
  807ca8:	dc00a817 	ldw	r16,672(sp)
  807cac:	dec0b204 	addi	sp,sp,712
  807cb0:	f800283a 	ret
  807cb4:	00800944 	movi	r2,37
  807cb8:	20801626 	beq	r4,r2,807d14 <__svfscanf_r+0x168>
  807cbc:	80800117 	ldw	r2,4(r16)
  807cc0:	00800b0e 	bge	zero,r2,807cf0 <__svfscanf_r+0x144>
  807cc4:	81000017 	ldw	r4,0(r16)
  807cc8:	a0ffffc7 	ldb	r3,-1(r20)
  807ccc:	20800003 	ldbu	r2,0(r4)
  807cd0:	10ffeb1e 	bne	r2,r3,807c80 <__svfscanf_r+0xd4>
  807cd4:	80c00117 	ldw	r3,4(r16)
  807cd8:	21800044 	addi	r6,r4,1
  807cdc:	8c400044 	addi	r17,r17,1
  807ce0:	18ffffc4 	addi	r3,r3,-1
  807ce4:	80c00115 	stw	r3,4(r16)
  807ce8:	81800015 	stw	r6,0(r16)
  807cec:	003fc206 	br	807bf8 <__svfscanf_r+0x4c>
  807cf0:	b009883a 	mov	r4,r22
  807cf4:	800b883a 	mov	r5,r16
  807cf8:	080535c0 	call	80535c <__srefill_r>
  807cfc:	103ff126 	beq	r2,zero,807cc4 <__svfscanf_r+0x118>
  807d00:	d900a217 	ldw	r4,648(sp)
  807d04:	2004981e 	bne	r4,zero,808f68 <__svfscanf_r+0x13bc>
  807d08:	00bfffc4 	movi	r2,-1
  807d0c:	d880a215 	stw	r2,648(sp)
  807d10:	003fdb06 	br	807c80 <__svfscanf_r+0xd4>
  807d14:	d800a315 	stw	zero,652(sp)
  807d18:	002b883a 	mov	r21,zero
  807d1c:	a0c00003 	ldbu	r3,0(r20)
  807d20:	00801e04 	movi	r2,120
  807d24:	a5000044 	addi	r20,r20,1
  807d28:	1dc03fcc 	andi	r23,r3,255
  807d2c:	bdc0201c 	xori	r23,r23,128
  807d30:	bdffe004 	addi	r23,r23,-128
  807d34:	10c08036 	bltu	r2,r3,807f38 <__svfscanf_r+0x38c>
  807d38:	18c5883a 	add	r2,r3,r3
  807d3c:	1085883a 	add	r2,r2,r2
  807d40:	00c02034 	movhi	r3,128
  807d44:	18df5504 	addi	r3,r3,32084
  807d48:	10c5883a 	add	r2,r2,r3
  807d4c:	11000017 	ldw	r4,0(r2)
  807d50:	2000683a 	jmp	r4
  807d54:	00807d08 	cmpgei	r2,zero,500
  807d58:	00807f38 	rdprs	r2,zero,508
  807d5c:	00807f38 	rdprs	r2,zero,508
  807d60:	00807f38 	rdprs	r2,zero,508
  807d64:	00807f38 	rdprs	r2,zero,508
  807d68:	00807f38 	rdprs	r2,zero,508
  807d6c:	00807f38 	rdprs	r2,zero,508
  807d70:	00807f38 	rdprs	r2,zero,508
  807d74:	00807f38 	rdprs	r2,zero,508
  807d78:	00807f38 	rdprs	r2,zero,508
  807d7c:	00807f38 	rdprs	r2,zero,508
  807d80:	00807f38 	rdprs	r2,zero,508
  807d84:	00807f38 	rdprs	r2,zero,508
  807d88:	00807f38 	rdprs	r2,zero,508
  807d8c:	00807f38 	rdprs	r2,zero,508
  807d90:	00807f38 	rdprs	r2,zero,508
  807d94:	00807f38 	rdprs	r2,zero,508
  807d98:	00807f38 	rdprs	r2,zero,508
  807d9c:	00807f38 	rdprs	r2,zero,508
  807da0:	00807f38 	rdprs	r2,zero,508
  807da4:	00807f38 	rdprs	r2,zero,508
  807da8:	00807f38 	rdprs	r2,zero,508
  807dac:	00807f38 	rdprs	r2,zero,508
  807db0:	00807f38 	rdprs	r2,zero,508
  807db4:	00807f38 	rdprs	r2,zero,508
  807db8:	00807f38 	rdprs	r2,zero,508
  807dbc:	00807f38 	rdprs	r2,zero,508
  807dc0:	00807f38 	rdprs	r2,zero,508
  807dc4:	00807f38 	rdprs	r2,zero,508
  807dc8:	00807f38 	rdprs	r2,zero,508
  807dcc:	00807f38 	rdprs	r2,zero,508
  807dd0:	00807f38 	rdprs	r2,zero,508
  807dd4:	00807f38 	rdprs	r2,zero,508
  807dd8:	00807f38 	rdprs	r2,zero,508
  807ddc:	00807f38 	rdprs	r2,zero,508
  807de0:	00807f38 	rdprs	r2,zero,508
  807de4:	00807f38 	rdprs	r2,zero,508
  807de8:	00807cbc 	xorhi	r2,zero,498
  807dec:	00807f38 	rdprs	r2,zero,508
  807df0:	00807f38 	rdprs	r2,zero,508
  807df4:	00807f38 	rdprs	r2,zero,508
  807df8:	00807f38 	rdprs	r2,zero,508
  807dfc:	00808dd8 	cmpnei	r2,zero,567
  807e00:	00807f38 	rdprs	r2,zero,508
  807e04:	00807f38 	rdprs	r2,zero,508
  807e08:	00807f38 	rdprs	r2,zero,508
  807e0c:	00807f38 	rdprs	r2,zero,508
  807e10:	00807f38 	rdprs	r2,zero,508
  807e14:	00808dbc 	xorhi	r2,zero,566
  807e18:	00808dbc 	xorhi	r2,zero,566
  807e1c:	00808dbc 	xorhi	r2,zero,566
  807e20:	00808dbc 	xorhi	r2,zero,566
  807e24:	00808dbc 	xorhi	r2,zero,566
  807e28:	00808dbc 	xorhi	r2,zero,566
  807e2c:	00808dbc 	xorhi	r2,zero,566
  807e30:	00808dbc 	xorhi	r2,zero,566
  807e34:	00808dbc 	xorhi	r2,zero,566
  807e38:	00808dbc 	xorhi	r2,zero,566
  807e3c:	00807f38 	rdprs	r2,zero,508
  807e40:	00807f38 	rdprs	r2,zero,508
  807e44:	00807f38 	rdprs	r2,zero,508
  807e48:	00807f38 	rdprs	r2,zero,508
  807e4c:	00807f38 	rdprs	r2,zero,508
  807e50:	00807f38 	rdprs	r2,zero,508
  807e54:	00807f38 	rdprs	r2,zero,508
  807e58:	00807f38 	rdprs	r2,zero,508
  807e5c:	00807f38 	rdprs	r2,zero,508
  807e60:	00807f38 	rdprs	r2,zero,508
  807e64:	00807f4c 	andi	r2,zero,509
  807e68:	00808ec0 	call	808ec <__alt_mem_sdram-0x77f714>
  807e6c:	00807f38 	rdprs	r2,zero,508
  807e70:	00808ec0 	call	808ec <__alt_mem_sdram-0x77f714>
  807e74:	00807f38 	rdprs	r2,zero,508
  807e78:	00807f38 	rdprs	r2,zero,508
  807e7c:	00807f38 	rdprs	r2,zero,508
  807e80:	00807f38 	rdprs	r2,zero,508
  807e84:	00808db4 	movhi	r2,566
  807e88:	00807f38 	rdprs	r2,zero,508
  807e8c:	00807f38 	rdprs	r2,zero,508
  807e90:	00808d94 	movui	r2,566
  807e94:	00807f38 	rdprs	r2,zero,508
  807e98:	00807f38 	rdprs	r2,zero,508
  807e9c:	00807f38 	rdprs	r2,zero,508
  807ea0:	00807f38 	rdprs	r2,zero,508
  807ea4:	00807f38 	rdprs	r2,zero,508
  807ea8:	00807f38 	rdprs	r2,zero,508
  807eac:	00807f38 	rdprs	r2,zero,508
  807eb0:	00807f38 	rdprs	r2,zero,508
  807eb4:	00808de0 	cmpeqi	r2,zero,567
  807eb8:	00807f38 	rdprs	r2,zero,508
  807ebc:	00807f38 	rdprs	r2,zero,508
  807ec0:	00808d78 	rdprs	r2,zero,565
  807ec4:	00807f38 	rdprs	r2,zero,508
  807ec8:	00807f38 	rdprs	r2,zero,508
  807ecc:	00807f38 	rdprs	r2,zero,508
  807ed0:	00807f38 	rdprs	r2,zero,508
  807ed4:	00807f38 	rdprs	r2,zero,508
  807ed8:	00807f38 	rdprs	r2,zero,508
  807edc:	00807f38 	rdprs	r2,zero,508
  807ee0:	00808ec8 	cmpgei	r2,zero,571
  807ee4:	00807f50 	cmplti	r2,zero,509
  807ee8:	00808ec0 	call	808ec <__alt_mem_sdram-0x77f714>
  807eec:	00808ec0 	call	808ec <__alt_mem_sdram-0x77f714>
  807ef0:	00808ec0 	call	808ec <__alt_mem_sdram-0x77f714>
  807ef4:	00808ed4 	movui	r2,571
  807ef8:	00808e1c 	xori	r2,zero,568
  807efc:	00807f38 	rdprs	r2,zero,508
  807f00:	00807f38 	rdprs	r2,zero,508
  807f04:	008084e4 	muli	r2,zero,531
  807f08:	00807f38 	rdprs	r2,zero,508
  807f0c:	00808fd0 	cmplti	r2,zero,575
  807f10:	00808f8c 	andi	r2,zero,574
  807f14:	00808fb0 	cmpltui	r2,zero,574
  807f18:	00807f38 	rdprs	r2,zero,508
  807f1c:	00807f38 	rdprs	r2,zero,508
  807f20:	00808fa8 	cmpgeui	r2,zero,574
  807f24:	00807f38 	rdprs	r2,zero,508
  807f28:	00808e00 	call	808e0 <__alt_mem_sdram-0x77f720>
  807f2c:	00807f38 	rdprs	r2,zero,508
  807f30:	00807f38 	rdprs	r2,zero,508
  807f34:	00808de0 	cmpeqi	r2,zero,567
  807f38:	bc87883a 	add	r3,r23,r18
  807f3c:	18800003 	ldbu	r2,0(r3)
  807f40:	1080004c 	andi	r2,r2,1
  807f44:	1005003a 	cmpeq	r2,r2,zero
  807f48:	1000011e 	bne	r2,zero,807f50 <__svfscanf_r+0x3a4>
  807f4c:	ad400054 	ori	r21,r21,1
  807f50:	01002074 	movhi	r4,129
  807f54:	213a4304 	addi	r4,r4,-5876
  807f58:	00800284 	movi	r2,10
  807f5c:	d900a015 	stw	r4,640(sp)
  807f60:	048000c4 	movi	r18,3
  807f64:	d880a115 	stw	r2,644(sp)
  807f68:	80c00117 	ldw	r3,4(r16)
  807f6c:	00c13f0e 	bge	zero,r3,80846c <__svfscanf_r+0x8c0>
  807f70:	a880100c 	andi	r2,r21,64
  807f74:	10001326 	beq	r2,zero,807fc4 <__svfscanf_r+0x418>
  807f78:	00800104 	movi	r2,4
  807f7c:	14bf1e36 	bltu	r2,r18,807bf8 <__svfscanf_r+0x4c>
  807f80:	9485883a 	add	r2,r18,r18
  807f84:	1085883a 	add	r2,r2,r2
  807f88:	00c02034 	movhi	r3,128
  807f8c:	18dfe704 	addi	r3,r3,32668
  807f90:	10c5883a 	add	r2,r2,r3
  807f94:	11000017 	ldw	r4,0(r2)
  807f98:	2000683a 	jmp	r4
  807f9c:	00808000 	call	80800 <__alt_mem_sdram-0x77f800>
  807fa0:	00808100 	call	80810 <__alt_mem_sdram-0x77f7f0>
  807fa4:	00808310 	cmplti	r2,zero,524
  807fa8:	00808174 	movhi	r2,517
  807fac:	00808448 	cmpgei	r2,zero,529
  807fb0:	b009883a 	mov	r4,r22
  807fb4:	800b883a 	mov	r5,r16
  807fb8:	080535c0 	call	80535c <__srefill_r>
  807fbc:	103f501e 	bne	r2,zero,807d00 <__svfscanf_r+0x154>
  807fc0:	8c400044 	addi	r17,r17,1
  807fc4:	81400017 	ldw	r5,0(r16)
  807fc8:	98800017 	ldw	r2,0(r19)
  807fcc:	28c00003 	ldbu	r3,0(r5)
  807fd0:	1887883a 	add	r3,r3,r2
  807fd4:	19000003 	ldbu	r4,0(r3)
  807fd8:	2100020c 	andi	r4,r4,8
  807fdc:	203fe626 	beq	r4,zero,807f78 <__svfscanf_r+0x3cc>
  807fe0:	80c00117 	ldw	r3,4(r16)
  807fe4:	18ffffc4 	addi	r3,r3,-1
  807fe8:	80c00115 	stw	r3,4(r16)
  807fec:	00fff00e 	bge	zero,r3,807fb0 <__svfscanf_r+0x404>
  807ff0:	29800044 	addi	r6,r5,1
  807ff4:	8c400044 	addi	r17,r17,1
  807ff8:	81800015 	stw	r6,0(r16)
  807ffc:	003ff106 	br	807fc4 <__svfscanf_r+0x418>
  808000:	d8c0a317 	ldw	r3,652(sp)
  808004:	1800021e 	bne	r3,zero,808010 <__svfscanf_r+0x464>
  808008:	01000044 	movi	r4,1
  80800c:	d900a315 	stw	r4,652(sp)
  808010:	a880004c 	andi	r2,r21,1
  808014:	1005003a 	cmpeq	r2,r2,zero
  808018:	1002811e 	bne	r2,zero,808a20 <__svfscanf_r+0xe74>
  80801c:	ad40040c 	andi	r21,r21,16
  808020:	a805003a 	cmpeq	r2,r21,zero
  808024:	d880a615 	stw	r2,664(sp)
  808028:	1003d31e 	bne	r2,zero,808f78 <__svfscanf_r+0x13cc>
  80802c:	0027883a 	mov	r19,zero
  808030:	d900a317 	ldw	r4,652(sp)
  808034:	2003c726 	beq	r4,zero,808f54 <__svfscanf_r+0x13a8>
  808038:	07002074 	movhi	fp,129
  80803c:	e71c2d04 	addi	fp,fp,28852
  808040:	e0800017 	ldw	r2,0(fp)
  808044:	103f2e26 	beq	r2,zero,807d00 <__svfscanf_r+0x154>
  808048:	d8804404 	addi	r2,sp,272
  80804c:	0025883a 	mov	r18,zero
  808050:	d880a515 	stw	r2,660(sp)
  808054:	05ffffc4 	movi	r23,-1
  808058:	80800017 	ldw	r2,0(r16)
  80805c:	80c00117 	ldw	r3,4(r16)
  808060:	d900a517 	ldw	r4,660(sp)
  808064:	12000003 	ldbu	r8,0(r2)
  808068:	18ffffc4 	addi	r3,r3,-1
  80806c:	11800044 	addi	r6,r2,1
  808070:	248f883a 	add	r7,r4,r18
  808074:	80c00115 	stw	r3,4(r16)
  808078:	81800015 	stw	r6,0(r16)
  80807c:	3a000005 	stb	r8,0(r7)
  808080:	d9000204 	addi	r4,sp,8
  808084:	000b883a 	mov	r5,zero
  808088:	01800204 	movi	r6,8
  80808c:	08051200 	call	805120 <memset>
  808090:	d980a517 	ldw	r6,660(sp)
  808094:	94800044 	addi	r18,r18,1
  808098:	d8800204 	addi	r2,sp,8
  80809c:	b009883a 	mov	r4,r22
  8080a0:	980b883a 	mov	r5,r19
  8080a4:	900f883a 	mov	r7,r18
  8080a8:	d8800015 	stw	r2,0(sp)
  8080ac:	080b6180 	call	80b618 <_mbrtowc_r>
  8080b0:	1007883a 	mov	r3,r2
  8080b4:	15ff1226 	beq	r2,r23,807d00 <__svfscanf_r+0x154>
  8080b8:	10039e1e 	bne	r2,zero,808f34 <__svfscanf_r+0x1388>
  8080bc:	a800011e 	bne	r21,zero,8080c4 <__svfscanf_r+0x518>
  8080c0:	98000015 	stw	zero,0(r19)
  8080c4:	d8c0a317 	ldw	r3,652(sp)
  8080c8:	d900a617 	ldw	r4,664(sp)
  8080cc:	8ca3883a 	add	r17,r17,r18
  8080d0:	18ffffc4 	addi	r3,r3,-1
  8080d4:	d8c0a315 	stw	r3,652(sp)
  8080d8:	20000126 	beq	r4,zero,8080e0 <__svfscanf_r+0x534>
  8080dc:	9cc00104 	addi	r19,r19,4
  8080e0:	0025883a 	mov	r18,zero
  8080e4:	80c00117 	ldw	r3,4(r16)
  8080e8:	00c3950e 	bge	zero,r3,808f40 <__svfscanf_r+0x1394>
  8080ec:	d880a317 	ldw	r2,652(sp)
  8080f0:	10039826 	beq	r2,zero,808f54 <__svfscanf_r+0x13a8>
  8080f4:	e0800017 	ldw	r2,0(fp)
  8080f8:	90bfd71e 	bne	r18,r2,808058 <__svfscanf_r+0x4ac>
  8080fc:	003f0006 	br	807d00 <__svfscanf_r+0x154>
  808100:	d880a317 	ldw	r2,652(sp)
  808104:	1000021e 	bne	r2,zero,808110 <__svfscanf_r+0x564>
  808108:	00ffffc4 	movi	r3,-1
  80810c:	d8c0a315 	stw	r3,652(sp)
  808110:	a880040c 	andi	r2,r21,16
  808114:	1003b826 	beq	r2,zero,808ff8 <__svfscanf_r+0x144c>
  808118:	0027883a 	mov	r19,zero
  80811c:	dd400404 	addi	r21,sp,16
  808120:	81000017 	ldw	r4,0(r16)
  808124:	20800003 	ldbu	r2,0(r4)
  808128:	a885883a 	add	r2,r21,r2
  80812c:	10c00007 	ldb	r3,0(r2)
  808130:	18037d26 	beq	r3,zero,808f28 <__svfscanf_r+0x137c>
  808134:	80c00117 	ldw	r3,4(r16)
  808138:	21800044 	addi	r6,r4,1
  80813c:	d900a317 	ldw	r4,652(sp)
  808140:	18ffffc4 	addi	r3,r3,-1
  808144:	9cc00044 	addi	r19,r19,1
  808148:	81800015 	stw	r6,0(r16)
  80814c:	80c00115 	stw	r3,4(r16)
  808150:	24c37526 	beq	r4,r19,808f28 <__svfscanf_r+0x137c>
  808154:	00fff216 	blt	zero,r3,808120 <__svfscanf_r+0x574>
  808158:	b009883a 	mov	r4,r22
  80815c:	800b883a 	mov	r5,r16
  808160:	080535c0 	call	80535c <__srefill_r>
  808164:	103fee26 	beq	r2,zero,808120 <__svfscanf_r+0x574>
  808168:	983ee526 	beq	r19,zero,807d00 <__svfscanf_r+0x154>
  80816c:	8ce3883a 	add	r17,r17,r19
  808170:	003ea106 	br	807bf8 <__svfscanf_r+0x4c>
  808174:	d900a317 	ldw	r4,652(sp)
  808178:	00805704 	movi	r2,348
  80817c:	20ffffc4 	addi	r3,r4,-1
  808180:	10c0bf2e 	bgeu	r2,r3,808480 <__svfscanf_r+0x8d4>
  808184:	00805744 	movi	r2,349
  808188:	24ffa8c4 	addi	r19,r4,-349
  80818c:	ac836014 	ori	r18,r21,3456
  808190:	d880a315 	stw	r2,652(sp)
  808194:	d8c04404 	addi	r3,sp,272
  808198:	d8c0a515 	stw	r3,660(sp)
  80819c:	002f883a 	mov	r23,zero
  8081a0:	182b883a 	mov	r21,r3
  8081a4:	81800017 	ldw	r6,0(r16)
  8081a8:	00c01344 	movi	r3,77
  8081ac:	31400003 	ldbu	r5,0(r6)
  8081b0:	28bff544 	addi	r2,r5,-43
  8081b4:	10803fcc 	andi	r2,r2,255
  8081b8:	1880b836 	bltu	r3,r2,80849c <__svfscanf_r+0x8f0>
  8081bc:	1085883a 	add	r2,r2,r2
  8081c0:	1085883a 	add	r2,r2,r2
  8081c4:	00c02074 	movhi	r3,129
  8081c8:	18e07604 	addi	r3,r3,-32296
  8081cc:	10c5883a 	add	r2,r2,r3
  8081d0:	11000017 	ldw	r4,0(r2)
  8081d4:	2000683a 	jmp	r4
  8081d8:	008085ec 	andhi	r2,zero,535
  8081dc:	0080849c 	xori	r2,zero,530
  8081e0:	008085ec 	andhi	r2,zero,535
  8081e4:	0080849c 	xori	r2,zero,530
  8081e8:	0080849c 	xori	r2,zero,530
  8081ec:	00808630 	cmpltui	r2,zero,536
  8081f0:	00808e34 	movhi	r2,568
  8081f4:	00808e34 	movhi	r2,568
  8081f8:	00808e34 	movhi	r2,568
  8081fc:	00808e34 	movhi	r2,568
  808200:	00808e34 	movhi	r2,568
  808204:	00808e34 	movhi	r2,568
  808208:	00808e34 	movhi	r2,568
  80820c:	00808e5c 	xori	r2,zero,569
  808210:	00808e5c 	xori	r2,zero,569
  808214:	0080849c 	xori	r2,zero,530
  808218:	0080849c 	xori	r2,zero,530
  80821c:	0080849c 	xori	r2,zero,530
  808220:	0080849c 	xori	r2,zero,530
  808224:	0080849c 	xori	r2,zero,530
  808228:	0080849c 	xori	r2,zero,530
  80822c:	0080849c 	xori	r2,zero,530
  808230:	00808e8c 	andi	r2,zero,570
  808234:	00808e8c 	andi	r2,zero,570
  808238:	00808e8c 	andi	r2,zero,570
  80823c:	00808e8c 	andi	r2,zero,570
  808240:	00808e8c 	andi	r2,zero,570
  808244:	00808e8c 	andi	r2,zero,570
  808248:	0080849c 	xori	r2,zero,530
  80824c:	0080849c 	xori	r2,zero,530
  808250:	0080849c 	xori	r2,zero,530
  808254:	0080849c 	xori	r2,zero,530
  808258:	0080849c 	xori	r2,zero,530
  80825c:	0080849c 	xori	r2,zero,530
  808260:	0080849c 	xori	r2,zero,530
  808264:	0080849c 	xori	r2,zero,530
  808268:	0080849c 	xori	r2,zero,530
  80826c:	0080849c 	xori	r2,zero,530
  808270:	0080849c 	xori	r2,zero,530
  808274:	0080849c 	xori	r2,zero,530
  808278:	0080849c 	xori	r2,zero,530
  80827c:	0080849c 	xori	r2,zero,530
  808280:	0080849c 	xori	r2,zero,530
  808284:	0080849c 	xori	r2,zero,530
  808288:	0080849c 	xori	r2,zero,530
  80828c:	00808e9c 	xori	r2,zero,570
  808290:	0080849c 	xori	r2,zero,530
  808294:	0080849c 	xori	r2,zero,530
  808298:	0080849c 	xori	r2,zero,530
  80829c:	0080849c 	xori	r2,zero,530
  8082a0:	0080849c 	xori	r2,zero,530
  8082a4:	0080849c 	xori	r2,zero,530
  8082a8:	0080849c 	xori	r2,zero,530
  8082ac:	0080849c 	xori	r2,zero,530
  8082b0:	00808e8c 	andi	r2,zero,570
  8082b4:	00808e8c 	andi	r2,zero,570
  8082b8:	00808e8c 	andi	r2,zero,570
  8082bc:	00808e8c 	andi	r2,zero,570
  8082c0:	00808e8c 	andi	r2,zero,570
  8082c4:	00808e8c 	andi	r2,zero,570
  8082c8:	0080849c 	xori	r2,zero,530
  8082cc:	0080849c 	xori	r2,zero,530
  8082d0:	0080849c 	xori	r2,zero,530
  8082d4:	0080849c 	xori	r2,zero,530
  8082d8:	0080849c 	xori	r2,zero,530
  8082dc:	0080849c 	xori	r2,zero,530
  8082e0:	0080849c 	xori	r2,zero,530
  8082e4:	0080849c 	xori	r2,zero,530
  8082e8:	0080849c 	xori	r2,zero,530
  8082ec:	0080849c 	xori	r2,zero,530
  8082f0:	0080849c 	xori	r2,zero,530
  8082f4:	0080849c 	xori	r2,zero,530
  8082f8:	0080849c 	xori	r2,zero,530
  8082fc:	0080849c 	xori	r2,zero,530
  808300:	0080849c 	xori	r2,zero,530
  808304:	0080849c 	xori	r2,zero,530
  808308:	0080849c 	xori	r2,zero,530
  80830c:	00808e9c 	xori	r2,zero,570
  808310:	d900a317 	ldw	r4,652(sp)
  808314:	2000021e 	bne	r4,zero,808320 <__svfscanf_r+0x774>
  808318:	00bfffc4 	movi	r2,-1
  80831c:	d880a315 	stw	r2,652(sp)
  808320:	a880004c 	andi	r2,r21,1
  808324:	1005003a 	cmpeq	r2,r2,zero
  808328:	1003651e 	bne	r2,zero,8090c0 <__svfscanf_r+0x1514>
  80832c:	adc0040c 	andi	r23,r21,16
  808330:	b807003a 	cmpeq	r3,r23,zero
  808334:	d8c0a715 	stw	r3,668(sp)
  808338:	1802f61e 	bne	r3,zero,808f14 <__svfscanf_r+0x1368>
  80833c:	dd400104 	addi	r21,sp,4
  808340:	0025883a 	mov	r18,zero
  808344:	073fffc4 	movi	fp,-1
  808348:	81400017 	ldw	r5,0(r16)
  80834c:	98800017 	ldw	r2,0(r19)
  808350:	29c00003 	ldbu	r7,0(r5)
  808354:	38c03fcc 	andi	r3,r7,255
  808358:	1887883a 	add	r3,r3,r2
  80835c:	19000003 	ldbu	r4,0(r3)
  808360:	2100020c 	andi	r4,r4,8
  808364:	2000321e 	bne	r4,zero,808430 <__svfscanf_r+0x884>
  808368:	d8c0a317 	ldw	r3,652(sp)
  80836c:	18003026 	beq	r3,zero,808430 <__svfscanf_r+0x884>
  808370:	00802074 	movhi	r2,129
  808374:	109c2d04 	addi	r2,r2,28852
  808378:	10c00017 	ldw	r3,0(r2)
  80837c:	90fe6026 	beq	r18,r3,807d00 <__svfscanf_r+0x154>
  808380:	d8c04404 	addi	r3,sp,272
  808384:	80800117 	ldw	r2,4(r16)
  808388:	d8c0a515 	stw	r3,660(sp)
  80838c:	d900a517 	ldw	r4,660(sp)
  808390:	10ffffc4 	addi	r3,r2,-1
  808394:	29800044 	addi	r6,r5,1
  808398:	80c00115 	stw	r3,4(r16)
  80839c:	2485883a 	add	r2,r4,r18
  8083a0:	81800015 	stw	r6,0(r16)
  8083a4:	d9000204 	addi	r4,sp,8
  8083a8:	000b883a 	mov	r5,zero
  8083ac:	01800204 	movi	r6,8
  8083b0:	11c00005 	stb	r7,0(r2)
  8083b4:	08051200 	call	805120 <memset>
  8083b8:	d980a517 	ldw	r6,660(sp)
  8083bc:	94800044 	addi	r18,r18,1
  8083c0:	d8800204 	addi	r2,sp,8
  8083c4:	b009883a 	mov	r4,r22
  8083c8:	a80b883a 	mov	r5,r21
  8083cc:	900f883a 	mov	r7,r18
  8083d0:	d8800015 	stw	r2,0(sp)
  8083d4:	080b6180 	call	80b618 <_mbrtowc_r>
  8083d8:	1007883a 	mov	r3,r2
  8083dc:	173e4826 	beq	r2,fp,807d00 <__svfscanf_r+0x154>
  8083e0:	1002c91e 	bne	r2,zero,808f08 <__svfscanf_r+0x135c>
  8083e4:	a8000015 	stw	zero,0(r21)
  8083e8:	a9000017 	ldw	r4,0(r21)
  8083ec:	080b4b00 	call	80b4b0 <iswspace>
  8083f0:	1002bc1e 	bne	r2,zero,808ee4 <__svfscanf_r+0x1338>
  8083f4:	d900a317 	ldw	r4,652(sp)
  8083f8:	d880a717 	ldw	r2,668(sp)
  8083fc:	8ca3883a 	add	r17,r17,r18
  808400:	213fffc4 	addi	r4,r4,-1
  808404:	d900a315 	stw	r4,652(sp)
  808408:	10000126 	beq	r2,zero,808410 <__svfscanf_r+0x864>
  80840c:	ad400104 	addi	r21,r21,4
  808410:	0025883a 	mov	r18,zero
  808414:	80c00117 	ldw	r3,4(r16)
  808418:	00ffcb16 	blt	zero,r3,808348 <__svfscanf_r+0x79c>
  80841c:	b009883a 	mov	r4,r22
  808420:	800b883a 	mov	r5,r16
  808424:	080535c0 	call	80535c <__srefill_r>
  808428:	103fc726 	beq	r2,zero,808348 <__svfscanf_r+0x79c>
  80842c:	903e341e 	bne	r18,zero,807d00 <__svfscanf_r+0x154>
  808430:	b83df11e 	bne	r23,zero,807bf8 <__svfscanf_r+0x4c>
  808434:	d900a217 	ldw	r4,648(sp)
  808438:	a8000015 	stw	zero,0(r21)
  80843c:	21000044 	addi	r4,r4,1
  808440:	d900a215 	stw	r4,648(sp)
  808444:	003dec06 	br	807bf8 <__svfscanf_r+0x4c>
  808448:	d900a317 	ldw	r4,652(sp)
  80844c:	00805704 	movi	r2,348
  808450:	20ffffc4 	addi	r3,r4,-1
  808454:	10c0902e 	bgeu	r2,r3,808698 <__svfscanf_r+0xaec>
  808458:	00805744 	movi	r2,349
  80845c:	24ffa8c4 	addi	r19,r4,-349
  808460:	ad41e014 	ori	r21,r21,1920
  808464:	d880a315 	stw	r2,652(sp)
  808468:	00010806 	br	80888c <__svfscanf_r+0xce0>
  80846c:	b009883a 	mov	r4,r22
  808470:	800b883a 	mov	r5,r16
  808474:	080535c0 	call	80535c <__srefill_r>
  808478:	103ebd26 	beq	r2,zero,807f70 <__svfscanf_r+0x3c4>
  80847c:	003e2006 	br	807d00 <__svfscanf_r+0x154>
  808480:	d900a317 	ldw	r4,652(sp)
  808484:	ac836014 	ori	r18,r21,3456
  808488:	2002941e 	bne	r4,zero,808edc <__svfscanf_r+0x1330>
  80848c:	d8804404 	addi	r2,sp,272
  808490:	d880a515 	stw	r2,660(sp)
  808494:	002f883a 	mov	r23,zero
  808498:	102b883a 	mov	r21,r2
  80849c:	9080400c 	andi	r2,r18,256
  8084a0:	10000926 	beq	r2,zero,8084c8 <__svfscanf_r+0x91c>
  8084a4:	d8c0a517 	ldw	r3,660(sp)
  8084a8:	1d40052e 	bgeu	r3,r21,8084c0 <__svfscanf_r+0x914>
  8084ac:	ad7fffc4 	addi	r21,r21,-1
  8084b0:	a9400007 	ldb	r5,0(r21)
  8084b4:	b009883a 	mov	r4,r22
  8084b8:	800d883a 	mov	r6,r16
  8084bc:	0805ab40 	call	805ab4 <_ungetc_r>
  8084c0:	d900a517 	ldw	r4,660(sp)
  8084c4:	257dee26 	beq	r4,r21,807c80 <__svfscanf_r+0xd4>
  8084c8:	9080040c 	andi	r2,r18,16
  8084cc:	10000a26 	beq	r2,zero,8084f8 <__svfscanf_r+0x94c>
  8084d0:	d8c0a517 	ldw	r3,660(sp)
  8084d4:	a8c5c83a 	sub	r2,r21,r3
  8084d8:	b885883a 	add	r2,r23,r2
  8084dc:	88a3883a 	add	r17,r17,r2
  8084e0:	003dc506 	br	807bf8 <__svfscanf_r+0x4c>
  8084e4:	a0c00007 	ldb	r3,0(r20)
  8084e8:	00801b04 	movi	r2,108
  8084ec:	18801726 	beq	r3,r2,80854c <__svfscanf_r+0x9a0>
  8084f0:	ad400054 	ori	r21,r21,1
  8084f4:	003e0906 	br	807d1c <__svfscanf_r+0x170>
  8084f8:	a8000005 	stb	zero,0(r21)
  8084fc:	d8c0a017 	ldw	r3,640(sp)
  808500:	d940a517 	ldw	r5,660(sp)
  808504:	d9c0a117 	ldw	r7,644(sp)
  808508:	b009883a 	mov	r4,r22
  80850c:	000d883a 	mov	r6,zero
  808510:	183ee83a 	callr	r3
  808514:	1007883a 	mov	r3,r2
  808518:	9080080c 	andi	r2,r18,32
  80851c:	1000251e 	bne	r2,zero,8085b4 <__svfscanf_r+0xa08>
  808520:	9080010c 	andi	r2,r18,4
  808524:	10000c26 	beq	r2,zero,808558 <__svfscanf_r+0x9ac>
  808528:	d900a417 	ldw	r4,656(sp)
  80852c:	20800017 	ldw	r2,0(r4)
  808530:	21000104 	addi	r4,r4,4
  808534:	d900a415 	stw	r4,656(sp)
  808538:	10c0000d 	sth	r3,0(r2)
  80853c:	d880a217 	ldw	r2,648(sp)
  808540:	10800044 	addi	r2,r2,1
  808544:	d880a215 	stw	r2,648(sp)
  808548:	003fe106 	br	8084d0 <__svfscanf_r+0x924>
  80854c:	a5000044 	addi	r20,r20,1
  808550:	ad400094 	ori	r21,r21,2
  808554:	003df106 	br	807d1c <__svfscanf_r+0x170>
  808558:	9080004c 	andi	r2,r18,1
  80855c:	1005003a 	cmpeq	r2,r2,zero
  808560:	10001426 	beq	r2,zero,8085b4 <__svfscanf_r+0xa08>
  808564:	9080008c 	andi	r2,r18,2
  808568:	10001226 	beq	r2,zero,8085b4 <__svfscanf_r+0xa08>
  80856c:	d8c0a017 	ldw	r3,640(sp)
  808570:	00802074 	movhi	r2,129
  808574:	10bba604 	addi	r2,r2,-4456
  808578:	18801426 	beq	r3,r2,8085cc <__svfscanf_r+0xa20>
  80857c:	d9c0a117 	ldw	r7,644(sp)
  808580:	d940a517 	ldw	r5,660(sp)
  808584:	000d883a 	mov	r6,zero
  808588:	b009883a 	mov	r4,r22
  80858c:	080eb800 	call	80eb80 <_strtoll_r>
  808590:	100d883a 	mov	r6,r2
  808594:	180f883a 	mov	r7,r3
  808598:	d900a417 	ldw	r4,656(sp)
  80859c:	20800017 	ldw	r2,0(r4)
  8085a0:	21000104 	addi	r4,r4,4
  8085a4:	d900a415 	stw	r4,656(sp)
  8085a8:	11c00115 	stw	r7,4(r2)
  8085ac:	11800015 	stw	r6,0(r2)
  8085b0:	003fe206 	br	80853c <__svfscanf_r+0x990>
  8085b4:	d900a417 	ldw	r4,656(sp)
  8085b8:	20800017 	ldw	r2,0(r4)
  8085bc:	21000104 	addi	r4,r4,4
  8085c0:	d900a415 	stw	r4,656(sp)
  8085c4:	10c00015 	stw	r3,0(r2)
  8085c8:	003fdc06 	br	80853c <__svfscanf_r+0x990>
  8085cc:	d9c0a117 	ldw	r7,644(sp)
  8085d0:	d940a517 	ldw	r5,660(sp)
  8085d4:	000d883a 	mov	r6,zero
  8085d8:	b009883a 	mov	r4,r22
  8085dc:	080f0fc0 	call	80f0fc <_strtoull_r>
  8085e0:	100d883a 	mov	r6,r2
  8085e4:	180f883a 	mov	r7,r3
  8085e8:	003feb06 	br	808598 <__svfscanf_r+0x9ec>
  8085ec:	9080200c 	andi	r2,r18,128
  8085f0:	103faa26 	beq	r2,zero,80849c <__svfscanf_r+0x8f0>
  8085f4:	00bfdfc4 	movi	r2,-129
  8085f8:	90a4703a 	and	r18,r18,r2
  8085fc:	a9400005 	stb	r5,0(r21)
  808600:	ad400044 	addi	r21,r21,1
  808604:	80c00117 	ldw	r3,4(r16)
  808608:	18ffffc4 	addi	r3,r3,-1
  80860c:	80c00115 	stw	r3,4(r16)
  808610:	00c0130e 	bge	zero,r3,808660 <__svfscanf_r+0xab4>
  808614:	31800044 	addi	r6,r6,1
  808618:	81800015 	stw	r6,0(r16)
  80861c:	d880a317 	ldw	r2,652(sp)
  808620:	10bfffc4 	addi	r2,r2,-1
  808624:	d880a315 	stw	r2,652(sp)
  808628:	103ede1e 	bne	r2,zero,8081a4 <__svfscanf_r+0x5f8>
  80862c:	003f9b06 	br	80849c <__svfscanf_r+0x8f0>
  808630:	9082000c 	andi	r2,r18,2048
  808634:	103ff126 	beq	r2,zero,8085fc <__svfscanf_r+0xa50>
  808638:	d8c0a117 	ldw	r3,644(sp)
  80863c:	1800031e 	bne	r3,zero,80864c <__svfscanf_r+0xaa0>
  808640:	01000204 	movi	r4,8
  808644:	94808014 	ori	r18,r18,512
  808648:	d900a115 	stw	r4,644(sp)
  80864c:	9081000c 	andi	r2,r18,1024
  808650:	10000826 	beq	r2,zero,808674 <__svfscanf_r+0xac8>
  808654:	00be9fc4 	movi	r2,-1409
  808658:	90a4703a 	and	r18,r18,r2
  80865c:	003fe706 	br	8085fc <__svfscanf_r+0xa50>
  808660:	b009883a 	mov	r4,r22
  808664:	800b883a 	mov	r5,r16
  808668:	080535c0 	call	80535c <__srefill_r>
  80866c:	103feb26 	beq	r2,zero,80861c <__svfscanf_r+0xa70>
  808670:	003f8a06 	br	80849c <__svfscanf_r+0x8f0>
  808674:	98000426 	beq	r19,zero,808688 <__svfscanf_r+0xadc>
  808678:	d880a317 	ldw	r2,652(sp)
  80867c:	9cffffc4 	addi	r19,r19,-1
  808680:	10800044 	addi	r2,r2,1
  808684:	d880a315 	stw	r2,652(sp)
  808688:	00bf1fc4 	movi	r2,-897
  80868c:	90a4703a 	and	r18,r18,r2
  808690:	bdc00044 	addi	r23,r23,1
  808694:	003fdb06 	br	808604 <__svfscanf_r+0xa58>
  808698:	d900a317 	ldw	r4,652(sp)
  80869c:	ad41e014 	ori	r21,r21,1920
  8086a0:	2000791e 	bne	r4,zero,808888 <__svfscanf_r+0xcdc>
  8086a4:	d8c04404 	addi	r3,sp,272
  8086a8:	d8c0a515 	stw	r3,660(sp)
  8086ac:	182f883a 	mov	r23,r3
  8086b0:	d8009c15 	stw	zero,624(sp)
  8086b4:	d8009d15 	stw	zero,628(sp)
  8086b8:	d8009f15 	stw	zero,636(sp)
  8086bc:	d8009e15 	stw	zero,632(sp)
  8086c0:	0039883a 	mov	fp,zero
  8086c4:	e1003fcc 	andi	r4,fp,255
  8086c8:	2100201c 	xori	r4,r4,128
  8086cc:	213fe004 	addi	r4,r4,-128
  8086d0:	20ffffc4 	addi	r3,r4,-1
  8086d4:	00800184 	movi	r2,6
  8086d8:	10c01736 	bltu	r2,r3,808738 <__svfscanf_r+0xb8c>
  8086dc:	00c00084 	movi	r3,2
  8086e0:	19026d0e 	bge	r3,r4,809098 <__svfscanf_r+0x14ec>
  8086e4:	008000c4 	movi	r2,3
  8086e8:	1100130e 	bge	r2,r4,808738 <__svfscanf_r+0xb8c>
  8086ec:	e4ffffc4 	addi	r19,fp,-1
  8086f0:	b825883a 	mov	r18,r23
  8086f4:	94bfffc4 	addi	r18,r18,-1
  8086f8:	91400007 	ldb	r5,0(r18)
  8086fc:	b009883a 	mov	r4,r22
  808700:	800d883a 	mov	r6,r16
  808704:	0805ab40 	call	805ab4 <_ungetc_r>
  808708:	9cffffc4 	addi	r19,r19,-1
  80870c:	98c03fcc 	andi	r3,r19,255
  808710:	18c0201c 	xori	r3,r3,128
  808714:	18ffe004 	addi	r3,r3,-128
  808718:	00800084 	movi	r2,2
  80871c:	18bff51e 	bne	r3,r2,8086f4 <__svfscanf_r+0xb48>
  808720:	e0bfff04 	addi	r2,fp,-4
  808724:	10803fcc 	andi	r2,r2,255
  808728:	b887c83a 	sub	r3,r23,r2
  80872c:	8885c83a 	sub	r2,r17,r2
  808730:	147fffc4 	addi	r17,r2,-1
  808734:	1dffffc4 	addi	r23,r3,-1
  808738:	a880400c 	andi	r2,r21,256
  80873c:	10001226 	beq	r2,zero,808788 <__svfscanf_r+0xbdc>
  808740:	a881000c 	andi	r2,r21,1024
  808744:	10002b1e 	bne	r2,zero,8087f4 <__svfscanf_r+0xc48>
  808748:	bdffffc4 	addi	r23,r23,-1
  80874c:	b9400007 	ldb	r5,0(r23)
  808750:	00801944 	movi	r2,101
  808754:	8c7fffc4 	addi	r17,r17,-1
  808758:	28800826 	beq	r5,r2,80877c <__svfscanf_r+0xbd0>
  80875c:	00801144 	movi	r2,69
  808760:	28800626 	beq	r5,r2,80877c <__svfscanf_r+0xbd0>
  808764:	bdffffc4 	addi	r23,r23,-1
  808768:	b009883a 	mov	r4,r22
  80876c:	800d883a 	mov	r6,r16
  808770:	0805ab40 	call	805ab4 <_ungetc_r>
  808774:	b9400007 	ldb	r5,0(r23)
  808778:	8c7fffc4 	addi	r17,r17,-1
  80877c:	b009883a 	mov	r4,r22
  808780:	800d883a 	mov	r6,r16
  808784:	0805ab40 	call	805ab4 <_ungetc_r>
  808788:	a880040c 	andi	r2,r21,16
  80878c:	103d1a1e 	bne	r2,zero,807bf8 <__svfscanf_r+0x4c>
  808790:	a8c1800c 	andi	r3,r21,1536
  808794:	00810004 	movi	r2,1024
  808798:	b8000005 	stb	zero,0(r23)
  80879c:	18813326 	beq	r3,r2,808c6c <__svfscanf_r+0x10c0>
  8087a0:	d8809d17 	ldw	r2,628(sp)
  8087a4:	1000251e 	bne	r2,zero,80883c <__svfscanf_r+0xc90>
  8087a8:	d940a517 	ldw	r5,660(sp)
  8087ac:	b009883a 	mov	r4,r22
  8087b0:	000d883a 	mov	r6,zero
  8087b4:	080d2000 	call	80d200 <_strtod_r>
  8087b8:	a900004c 	andi	r4,r21,1
  8087bc:	2009003a 	cmpeq	r4,r4,zero
  8087c0:	1025883a 	mov	r18,r2
  8087c4:	1827883a 	mov	r19,r3
  8087c8:	2000141e 	bne	r4,zero,80881c <__svfscanf_r+0xc70>
  8087cc:	d8c0a417 	ldw	r3,656(sp)
  8087d0:	18800017 	ldw	r2,0(r3)
  8087d4:	1d400104 	addi	r21,r3,4
  8087d8:	14c00115 	stw	r19,4(r2)
  8087dc:	14800015 	stw	r18,0(r2)
  8087e0:	d8c0a217 	ldw	r3,648(sp)
  8087e4:	dd40a415 	stw	r21,656(sp)
  8087e8:	18c00044 	addi	r3,r3,1
  8087ec:	d8c0a215 	stw	r3,648(sp)
  8087f0:	003d0106 	br	807bf8 <__svfscanf_r+0x4c>
  8087f4:	d900a517 	ldw	r4,660(sp)
  8087f8:	25fd212e 	bgeu	r4,r23,807c80 <__svfscanf_r+0xd4>
  8087fc:	bdffffc4 	addi	r23,r23,-1
  808800:	b9400007 	ldb	r5,0(r23)
  808804:	b009883a 	mov	r4,r22
  808808:	800d883a 	mov	r6,r16
  80880c:	0805ab40 	call	805ab4 <_ungetc_r>
  808810:	d880a517 	ldw	r2,660(sp)
  808814:	15fff936 	bltu	r2,r23,8087fc <__svfscanf_r+0xc50>
  808818:	003d1906 	br	807c80 <__svfscanf_r+0xd4>
  80881c:	a880008c 	andi	r2,r21,2
  808820:	10011926 	beq	r2,zero,808c88 <__svfscanf_r+0x10dc>
  808824:	d900a417 	ldw	r4,656(sp)
  808828:	20800017 	ldw	r2,0(r4)
  80882c:	25400104 	addi	r21,r4,4
  808830:	10c00115 	stw	r3,4(r2)
  808834:	14800015 	stw	r18,0(r2)
  808838:	003fe906 	br	8087e0 <__svfscanf_r+0xc34>
  80883c:	d8c09c17 	ldw	r3,624(sp)
  808840:	b009883a 	mov	r4,r22
  808844:	000d883a 	mov	r6,zero
  808848:	19400044 	addi	r5,r3,1
  80884c:	01c00284 	movi	r7,10
  808850:	080e90c0 	call	80e90c <_strtol_r>
  808854:	d9009d17 	ldw	r4,628(sp)
  808858:	110dc83a 	sub	r6,r2,r4
  80885c:	d8c0a517 	ldw	r3,660(sp)
  808860:	d9009c17 	ldw	r4,624(sp)
  808864:	188054c4 	addi	r2,r3,339
  808868:	20800236 	bltu	r4,r2,808874 <__svfscanf_r+0xcc8>
  80886c:	18805484 	addi	r2,r3,338
  808870:	d8809c15 	stw	r2,624(sp)
  808874:	d9009c17 	ldw	r4,624(sp)
  808878:	01402074 	movhi	r5,129
  80887c:	2954fa04 	addi	r5,r5,21480
  808880:	080d0280 	call	80d028 <sprintf>
  808884:	003fc806 	br	8087a8 <__svfscanf_r+0xbfc>
  808888:	0027883a 	mov	r19,zero
  80888c:	d8c04404 	addi	r3,sp,272
  808890:	d8c0a515 	stw	r3,660(sp)
  808894:	182f883a 	mov	r23,r3
  808898:	d8009f15 	stw	zero,636(sp)
  80889c:	d8009e15 	stw	zero,632(sp)
  8088a0:	d8009d15 	stw	zero,628(sp)
  8088a4:	d8009c15 	stw	zero,624(sp)
  8088a8:	0039883a 	mov	fp,zero
  8088ac:	0025883a 	mov	r18,zero
  8088b0:	80800017 	ldw	r2,0(r16)
  8088b4:	11400003 	ldbu	r5,0(r2)
  8088b8:	00801384 	movi	r2,78
  8088bc:	28fff544 	addi	r3,r5,-43
  8088c0:	18c03fcc 	andi	r3,r3,255
  8088c4:	10c08336 	bltu	r2,r3,808ad4 <__svfscanf_r+0xf28>
  8088c8:	18c5883a 	add	r2,r3,r3
  8088cc:	1085883a 	add	r2,r2,r2
  8088d0:	00c02074 	movhi	r3,129
  8088d4:	18e23904 	addi	r3,r3,-30492
  8088d8:	10c5883a 	add	r2,r2,r3
  8088dc:	11000017 	ldw	r4,0(r2)
  8088e0:	2000683a 	jmp	r4
  8088e4:	00808a8c 	andi	r2,zero,554
  8088e8:	00808ad4 	movui	r2,555
  8088ec:	00808a8c 	andi	r2,zero,554
  8088f0:	00808b18 	cmpnei	r2,zero,556
  8088f4:	00808ad4 	movui	r2,555
  8088f8:	00808b84 	movi	r2,558
  8088fc:	00808bb8 	rdprs	r2,zero,558
  808900:	00808bb8 	rdprs	r2,zero,558
  808904:	00808bb8 	rdprs	r2,zero,558
  808908:	00808bb8 	rdprs	r2,zero,558
  80890c:	00808bb8 	rdprs	r2,zero,558
  808910:	00808bb8 	rdprs	r2,zero,558
  808914:	00808bb8 	rdprs	r2,zero,558
  808918:	00808bb8 	rdprs	r2,zero,558
  80891c:	00808bb8 	rdprs	r2,zero,558
  808920:	00808ad4 	movui	r2,555
  808924:	00808ad4 	movui	r2,555
  808928:	00808ad4 	movui	r2,555
  80892c:	00808ad4 	movui	r2,555
  808930:	00808ad4 	movui	r2,555
  808934:	00808ad4 	movui	r2,555
  808938:	00808ad4 	movui	r2,555
  80893c:	00808bd8 	cmpnei	r2,zero,559
  808940:	00808ad4 	movui	r2,555
  808944:	00808ad4 	movui	r2,555
  808948:	00808ad4 	movui	r2,555
  80894c:	00808be8 	cmpgeui	r2,zero,559
  808950:	00808c34 	movhi	r2,560
  808954:	00808ad4 	movui	r2,555
  808958:	00808ad4 	movui	r2,555
  80895c:	00808d0c 	andi	r2,zero,564
  808960:	00808ad4 	movui	r2,555
  808964:	00808ad4 	movui	r2,555
  808968:	00808ad4 	movui	r2,555
  80896c:	00808ad4 	movui	r2,555
  808970:	00808cb8 	rdprs	r2,zero,562
  808974:	00808ad4 	movui	r2,555
  808978:	00808ad4 	movui	r2,555
  80897c:	00808ad4 	movui	r2,555
  808980:	00808ad4 	movui	r2,555
  808984:	00808ad4 	movui	r2,555
  808988:	00808d4c 	andi	r2,zero,565
  80898c:	00808ad4 	movui	r2,555
  808990:	00808ad4 	movui	r2,555
  808994:	00808ad4 	movui	r2,555
  808998:	00808ad4 	movui	r2,555
  80899c:	00808c50 	cmplti	r2,zero,561
  8089a0:	00808ad4 	movui	r2,555
  8089a4:	00808ad4 	movui	r2,555
  8089a8:	00808ad4 	movui	r2,555
  8089ac:	00808ad4 	movui	r2,555
  8089b0:	00808ad4 	movui	r2,555
  8089b4:	00808ad4 	movui	r2,555
  8089b8:	00808ad4 	movui	r2,555
  8089bc:	00808bd8 	cmpnei	r2,zero,559
  8089c0:	00808ad4 	movui	r2,555
  8089c4:	00808ad4 	movui	r2,555
  8089c8:	00808ad4 	movui	r2,555
  8089cc:	00808be8 	cmpgeui	r2,zero,559
  8089d0:	00808c34 	movhi	r2,560
  8089d4:	00808ad4 	movui	r2,555
  8089d8:	00808ad4 	movui	r2,555
  8089dc:	00808d0c 	andi	r2,zero,564
  8089e0:	00808ad4 	movui	r2,555
  8089e4:	00808ad4 	movui	r2,555
  8089e8:	00808ad4 	movui	r2,555
  8089ec:	00808ad4 	movui	r2,555
  8089f0:	00808cb8 	rdprs	r2,zero,562
  8089f4:	00808ad4 	movui	r2,555
  8089f8:	00808ad4 	movui	r2,555
  8089fc:	00808ad4 	movui	r2,555
  808a00:	00808ad4 	movui	r2,555
  808a04:	00808ad4 	movui	r2,555
  808a08:	00808d4c 	andi	r2,zero,565
  808a0c:	00808ad4 	movui	r2,555
  808a10:	00808ad4 	movui	r2,555
  808a14:	00808ad4 	movui	r2,555
  808a18:	00808ad4 	movui	r2,555
  808a1c:	00808c50 	cmplti	r2,zero,561
  808a20:	a880040c 	andi	r2,r21,16
  808a24:	10004826 	beq	r2,zero,808b48 <__svfscanf_r+0xf9c>
  808a28:	0027883a 	mov	r19,zero
  808a2c:	00000b06 	br	808a5c <__svfscanf_r+0xeb0>
  808a30:	80800017 	ldw	r2,0(r16)
  808a34:	b009883a 	mov	r4,r22
  808a38:	800b883a 	mov	r5,r16
  808a3c:	148d883a 	add	r6,r2,r18
  808a40:	81800015 	stw	r6,0(r16)
  808a44:	9ca7883a 	add	r19,r19,r18
  808a48:	080535c0 	call	80535c <__srefill_r>
  808a4c:	103dc61e 	bne	r2,zero,808168 <__svfscanf_r+0x5bc>
  808a50:	d880a317 	ldw	r2,652(sp)
  808a54:	1485c83a 	sub	r2,r2,r18
  808a58:	d880a315 	stw	r2,652(sp)
  808a5c:	84800117 	ldw	r18,4(r16)
  808a60:	d900a317 	ldw	r4,652(sp)
  808a64:	913ff216 	blt	r18,r4,808a30 <__svfscanf_r+0xe84>
  808a68:	d900a317 	ldw	r4,652(sp)
  808a6c:	80800017 	ldw	r2,0(r16)
  808a70:	9927883a 	add	r19,r19,r4
  808a74:	9107c83a 	sub	r3,r18,r4
  808a78:	110d883a 	add	r6,r2,r4
  808a7c:	8ce3883a 	add	r17,r17,r19
  808a80:	80c00115 	stw	r3,4(r16)
  808a84:	81800015 	stw	r6,0(r16)
  808a88:	003c5b06 	br	807bf8 <__svfscanf_r+0x4c>
  808a8c:	a880200c 	andi	r2,r21,128
  808a90:	10001026 	beq	r2,zero,808ad4 <__svfscanf_r+0xf28>
  808a94:	00bfdfc4 	movi	r2,-129
  808a98:	a8aa703a 	and	r21,r21,r2
  808a9c:	b9400005 	stb	r5,0(r23)
  808aa0:	bdc00044 	addi	r23,r23,1
  808aa4:	80c00117 	ldw	r3,4(r16)
  808aa8:	8c400044 	addi	r17,r17,1
  808aac:	18bfffc4 	addi	r2,r3,-1
  808ab0:	80800115 	stw	r2,4(r16)
  808ab4:	00801f0e 	bge	zero,r2,808b34 <__svfscanf_r+0xf88>
  808ab8:	80800017 	ldw	r2,0(r16)
  808abc:	10800044 	addi	r2,r2,1
  808ac0:	80800015 	stw	r2,0(r16)
  808ac4:	d880a317 	ldw	r2,652(sp)
  808ac8:	10bfffc4 	addi	r2,r2,-1
  808acc:	d880a315 	stw	r2,652(sp)
  808ad0:	103f771e 	bne	r2,zero,8088b0 <__svfscanf_r+0xd04>
  808ad4:	d8c09e17 	ldw	r3,632(sp)
  808ad8:	18000226 	beq	r3,zero,808ae4 <__svfscanf_r+0xf38>
  808adc:	00bfbfc4 	movi	r2,-257
  808ae0:	a8aa703a 	and	r21,r21,r2
  808ae4:	90ffffc4 	addi	r3,r18,-1
  808ae8:	00800044 	movi	r2,1
  808aec:	10fef536 	bltu	r2,r3,8086c4 <__svfscanf_r+0xb18>
  808af0:	d900a517 	ldw	r4,660(sp)
  808af4:	25fc622e 	bgeu	r4,r23,807c80 <__svfscanf_r+0xd4>
  808af8:	bdffffc4 	addi	r23,r23,-1
  808afc:	b9400007 	ldb	r5,0(r23)
  808b00:	b009883a 	mov	r4,r22
  808b04:	800d883a 	mov	r6,r16
  808b08:	0805ab40 	call	805ab4 <_ungetc_r>
  808b0c:	d880a517 	ldw	r2,660(sp)
  808b10:	15fff936 	bltu	r2,r23,808af8 <__svfscanf_r+0xf4c>
  808b14:	003c5a06 	br	807c80 <__svfscanf_r+0xd4>
  808b18:	a880800c 	andi	r2,r21,512
  808b1c:	103fed26 	beq	r2,zero,808ad4 <__svfscanf_r+0xf28>
  808b20:	d9009e17 	ldw	r4,632(sp)
  808b24:	00bf5fc4 	movi	r2,-641
  808b28:	a8aa703a 	and	r21,r21,r2
  808b2c:	d9009f15 	stw	r4,636(sp)
  808b30:	003fda06 	br	808a9c <__svfscanf_r+0xef0>
  808b34:	b009883a 	mov	r4,r22
  808b38:	800b883a 	mov	r5,r16
  808b3c:	080535c0 	call	80535c <__srefill_r>
  808b40:	103fe026 	beq	r2,zero,808ac4 <__svfscanf_r+0xf18>
  808b44:	003fe306 	br	808ad4 <__svfscanf_r+0xf28>
  808b48:	d880a417 	ldw	r2,656(sp)
  808b4c:	d980a317 	ldw	r6,652(sp)
  808b50:	01400044 	movi	r5,1
  808b54:	11000017 	ldw	r4,0(r2)
  808b58:	800f883a 	mov	r7,r16
  808b5c:	0803a740 	call	803a74 <fread>
  808b60:	103c6726 	beq	r2,zero,807d00 <__svfscanf_r+0x154>
  808b64:	d8c0a417 	ldw	r3,656(sp)
  808b68:	d900a217 	ldw	r4,648(sp)
  808b6c:	88a3883a 	add	r17,r17,r2
  808b70:	18c00104 	addi	r3,r3,4
  808b74:	21000044 	addi	r4,r4,1
  808b78:	d8c0a415 	stw	r3,656(sp)
  808b7c:	d900a215 	stw	r4,648(sp)
  808b80:	003c1d06 	br	807bf8 <__svfscanf_r+0x4c>
  808b84:	a880400c 	andi	r2,r21,256
  808b88:	10000b26 	beq	r2,zero,808bb8 <__svfscanf_r+0x100c>
  808b8c:	00bfdfc4 	movi	r2,-129
  808b90:	a8aa703a 	and	r21,r21,r2
  808b94:	d8809e17 	ldw	r2,632(sp)
  808b98:	10800044 	addi	r2,r2,1
  808b9c:	d8809e15 	stw	r2,632(sp)
  808ba0:	983fc026 	beq	r19,zero,808aa4 <__svfscanf_r+0xef8>
  808ba4:	d8c0a317 	ldw	r3,652(sp)
  808ba8:	9cffffc4 	addi	r19,r19,-1
  808bac:	18c00044 	addi	r3,r3,1
  808bb0:	d8c0a315 	stw	r3,652(sp)
  808bb4:	003fbb06 	br	808aa4 <__svfscanf_r+0xef8>
  808bb8:	e0803fcc 	andi	r2,fp,255
  808bbc:	1080201c 	xori	r2,r2,128
  808bc0:	10bfe004 	addi	r2,r2,-128
  808bc4:	9085883a 	add	r2,r18,r2
  808bc8:	103fc21e 	bne	r2,zero,808ad4 <__svfscanf_r+0xf28>
  808bcc:	00bf9fc4 	movi	r2,-385
  808bd0:	a8aa703a 	and	r21,r21,r2
  808bd4:	003fb106 	br	808a9c <__svfscanf_r+0xef0>
  808bd8:	00800044 	movi	r2,1
  808bdc:	90bfbd1e 	bne	r18,r2,808ad4 <__svfscanf_r+0xf28>
  808be0:	04800084 	movi	r18,2
  808be4:	003fad06 	br	808a9c <__svfscanf_r+0xef0>
  808be8:	a8c1400c 	andi	r3,r21,1280
  808bec:	00810004 	movi	r2,1024
  808bf0:	18800426 	beq	r3,r2,808c04 <__svfscanf_r+0x1058>
  808bf4:	a884703a 	and	r2,r21,r2
  808bf8:	103fb626 	beq	r2,zero,808ad4 <__svfscanf_r+0xf28>
  808bfc:	d8809e17 	ldw	r2,632(sp)
  808c00:	103fb826 	beq	r2,zero,808ae4 <__svfscanf_r+0xf38>
  808c04:	a880800c 	andi	r2,r21,512
  808c08:	1000051e 	bne	r2,zero,808c20 <__svfscanf_r+0x1074>
  808c0c:	d8c09e17 	ldw	r3,632(sp)
  808c10:	d9009f17 	ldw	r4,636(sp)
  808c14:	ddc09c15 	stw	r23,624(sp)
  808c18:	1907c83a 	sub	r3,r3,r4
  808c1c:	d8c09d15 	stw	r3,628(sp)
  808c20:	00be7fc4 	movi	r2,-1537
  808c24:	a884703a 	and	r2,r21,r2
  808c28:	15406014 	ori	r21,r2,384
  808c2c:	d8009e15 	stw	zero,632(sp)
  808c30:	003f9a06 	br	808a9c <__svfscanf_r+0xef0>
  808c34:	e0c03fcc 	andi	r3,fp,255
  808c38:	18c0201c 	xori	r3,r3,128
  808c3c:	18ffe004 	addi	r3,r3,-128
  808c40:	00800084 	movi	r2,2
  808c44:	18bfa31e 	bne	r3,r2,808ad4 <__svfscanf_r+0xf28>
  808c48:	070000c4 	movi	fp,3
  808c4c:	003f9306 	br	808a9c <__svfscanf_r+0xef0>
  808c50:	e0c03fcc 	andi	r3,fp,255
  808c54:	18c0201c 	xori	r3,r3,128
  808c58:	18ffe004 	addi	r3,r3,-128
  808c5c:	008001c4 	movi	r2,7
  808c60:	18bf9c1e 	bne	r3,r2,808ad4 <__svfscanf_r+0xf28>
  808c64:	07000204 	movi	fp,8
  808c68:	003f8c06 	br	808a9c <__svfscanf_r+0xef0>
  808c6c:	d8c09e17 	ldw	r3,632(sp)
  808c70:	d9009f17 	ldw	r4,636(sp)
  808c74:	1905c83a 	sub	r2,r3,r4
  808c78:	103ecb26 	beq	r2,zero,8087a8 <__svfscanf_r+0xbfc>
  808c7c:	008dc83a 	sub	r6,zero,r2
  808c80:	ddc09c15 	stw	r23,624(sp)
  808c84:	003ef506 	br	80885c <__svfscanf_r+0xcb0>
  808c88:	d880a417 	ldw	r2,656(sp)
  808c8c:	9009883a 	mov	r4,r18
  808c90:	180b883a 	mov	r5,r3
  808c94:	15c00017 	ldw	r23,0(r2)
  808c98:	15400104 	addi	r21,r2,4
  808c9c:	080cf300 	call	80cf30 <__isnand>
  808ca0:	1000311e 	bne	r2,zero,808d68 <__svfscanf_r+0x11bc>
  808ca4:	980b883a 	mov	r5,r19
  808ca8:	9009883a 	mov	r4,r18
  808cac:	08118780 	call	811878 <__truncdfsf2>
  808cb0:	b8800015 	stw	r2,0(r23)
  808cb4:	003eca06 	br	8087e0 <__svfscanf_r+0xc34>
  808cb8:	9000101e 	bne	r18,zero,808cfc <__svfscanf_r+0x1150>
  808cbc:	a8c1c00c 	andi	r3,r21,1792
  808cc0:	0081c004 	movi	r2,1792
  808cc4:	18800926 	beq	r3,r2,808cec <__svfscanf_r+0x1140>
  808cc8:	e0c03fcc 	andi	r3,fp,255
  808ccc:	18c0201c 	xori	r3,r3,128
  808cd0:	18ffe004 	addi	r3,r3,-128
  808cd4:	00800044 	movi	r2,1
  808cd8:	18800226 	beq	r3,r2,808ce4 <__svfscanf_r+0x1138>
  808cdc:	00800104 	movi	r2,4
  808ce0:	18bf7c1e 	bne	r3,r2,808ad4 <__svfscanf_r+0xf28>
  808ce4:	e7000044 	addi	fp,fp,1
  808ce8:	003f6c06 	br	808a9c <__svfscanf_r+0xef0>
  808cec:	00be1fc4 	movi	r2,-1921
  808cf0:	a8aa703a 	and	r21,r21,r2
  808cf4:	04800044 	movi	r18,1
  808cf8:	003f6806 	br	808a9c <__svfscanf_r+0xef0>
  808cfc:	00800084 	movi	r2,2
  808d00:	90bff11e 	bne	r18,r2,808cc8 <__svfscanf_r+0x111c>
  808d04:	048000c4 	movi	r18,3
  808d08:	003f6406 	br	808a9c <__svfscanf_r+0xef0>
  808d0c:	e0c03fcc 	andi	r3,fp,255
  808d10:	18c0201c 	xori	r3,r3,128
  808d14:	18ffe004 	addi	r3,r3,-128
  808d18:	1800071e 	bne	r3,zero,808d38 <__svfscanf_r+0x118c>
  808d1c:	a8c1c00c 	andi	r3,r21,1792
  808d20:	0081c004 	movi	r2,1792
  808d24:	18bf6b1e 	bne	r3,r2,808ad4 <__svfscanf_r+0xf28>
  808d28:	00be1fc4 	movi	r2,-1921
  808d2c:	a8aa703a 	and	r21,r21,r2
  808d30:	07000044 	movi	fp,1
  808d34:	003f5906 	br	808a9c <__svfscanf_r+0xef0>
  808d38:	008000c4 	movi	r2,3
  808d3c:	18bfe926 	beq	r3,r2,808ce4 <__svfscanf_r+0x1138>
  808d40:	00800144 	movi	r2,5
  808d44:	18bfe726 	beq	r3,r2,808ce4 <__svfscanf_r+0x1138>
  808d48:	003f6206 	br	808ad4 <__svfscanf_r+0xf28>
  808d4c:	e0c03fcc 	andi	r3,fp,255
  808d50:	18c0201c 	xori	r3,r3,128
  808d54:	18ffe004 	addi	r3,r3,-128
  808d58:	00800184 	movi	r2,6
  808d5c:	18bf5d1e 	bne	r3,r2,808ad4 <__svfscanf_r+0xf28>
  808d60:	070001c4 	movi	fp,7
  808d64:	003f4d06 	br	808a9c <__svfscanf_r+0xef0>
  808d68:	0009883a 	mov	r4,zero
  808d6c:	080d0200 	call	80d020 <nanf>
  808d70:	b8800015 	stw	r2,0(r23)
  808d74:	003e9a06 	br	8087e0 <__svfscanf_r+0xc34>
  808d78:	a00b883a 	mov	r5,r20
  808d7c:	d9000404 	addi	r4,sp,16
  808d80:	080cf600 	call	80cf60 <__sccl>
  808d84:	1029883a 	mov	r20,r2
  808d88:	ad401014 	ori	r21,r21,64
  808d8c:	04800044 	movi	r18,1
  808d90:	003c7506 	br	807f68 <__svfscanf_r+0x3bc>
  808d94:	01000204 	movi	r4,8
  808d98:	00802074 	movhi	r2,129
  808d9c:	10bba604 	addi	r2,r2,-4456
  808da0:	ad400054 	ori	r21,r21,1
  808da4:	048000c4 	movi	r18,3
  808da8:	d900a115 	stw	r4,644(sp)
  808dac:	d880a015 	stw	r2,640(sp)
  808db0:	003c6d06 	br	807f68 <__svfscanf_r+0x3bc>
  808db4:	ad400094 	ori	r21,r21,2
  808db8:	003bd806 	br	807d1c <__svfscanf_r+0x170>
  808dbc:	d900a317 	ldw	r4,652(sp)
  808dc0:	01400284 	movi	r5,10
  808dc4:	08027a80 	call	8027a8 <__mulsi3>
  808dc8:	15c5883a 	add	r2,r2,r23
  808dcc:	10bff404 	addi	r2,r2,-48
  808dd0:	d880a315 	stw	r2,652(sp)
  808dd4:	003bd106 	br	807d1c <__svfscanf_r+0x170>
  808dd8:	ad400414 	ori	r21,r21,16
  808ddc:	003bcf06 	br	807d1c <__svfscanf_r+0x170>
  808de0:	00800404 	movi	r2,16
  808de4:	00c02074 	movhi	r3,129
  808de8:	18fba604 	addi	r3,r3,-4456
  808dec:	ad408014 	ori	r21,r21,512
  808df0:	048000c4 	movi	r18,3
  808df4:	d880a115 	stw	r2,644(sp)
  808df8:	d8c0a015 	stw	r3,640(sp)
  808dfc:	003c5a06 	br	807f68 <__svfscanf_r+0x3bc>
  808e00:	00c00284 	movi	r3,10
  808e04:	01002074 	movhi	r4,129
  808e08:	213ba604 	addi	r4,r4,-4456
  808e0c:	048000c4 	movi	r18,3
  808e10:	d8c0a115 	stw	r3,644(sp)
  808e14:	d900a015 	stw	r4,640(sp)
  808e18:	003c5306 	br	807f68 <__svfscanf_r+0x3bc>
  808e1c:	00c02074 	movhi	r3,129
  808e20:	18fa4304 	addi	r3,r3,-5876
  808e24:	048000c4 	movi	r18,3
  808e28:	d8c0a015 	stw	r3,640(sp)
  808e2c:	d800a115 	stw	zero,644(sp)
  808e30:	003c4d06 	br	807f68 <__svfscanf_r+0x3bc>
  808e34:	d8c0a117 	ldw	r3,644(sp)
  808e38:	18c5883a 	add	r2,r3,r3
  808e3c:	00c02074 	movhi	r3,129
  808e40:	18d4fb84 	addi	r3,r3,21486
  808e44:	10c5883a 	add	r2,r2,r3
  808e48:	1080000f 	ldh	r2,0(r2)
  808e4c:	00fd1fc4 	movi	r3,-2945
  808e50:	90e4703a 	and	r18,r18,r3
  808e54:	d880a115 	stw	r2,644(sp)
  808e58:	003de806 	br	8085fc <__svfscanf_r+0xa50>
  808e5c:	d900a117 	ldw	r4,644(sp)
  808e60:	00c02074 	movhi	r3,129
  808e64:	18d4fb84 	addi	r3,r3,21486
  808e68:	2105883a 	add	r2,r4,r4
  808e6c:	10c5883a 	add	r2,r2,r3
  808e70:	1080000f 	ldh	r2,0(r2)
  808e74:	00c00204 	movi	r3,8
  808e78:	d880a115 	stw	r2,644(sp)
  808e7c:	18bd870e 	bge	r3,r2,80849c <__svfscanf_r+0x8f0>
  808e80:	00bd1fc4 	movi	r2,-2945
  808e84:	90a4703a 	and	r18,r18,r2
  808e88:	003ddc06 	br	8085fc <__svfscanf_r+0xa50>
  808e8c:	d8c0a117 	ldw	r3,644(sp)
  808e90:	00800284 	movi	r2,10
  808e94:	10fffa16 	blt	r2,r3,808e80 <__svfscanf_r+0x12d4>
  808e98:	003d8006 	br	80849c <__svfscanf_r+0x8f0>
  808e9c:	90c1800c 	andi	r3,r18,1536
  808ea0:	00808004 	movi	r2,512
  808ea4:	18bd7d1e 	bne	r3,r2,80849c <__svfscanf_r+0x8f0>
  808ea8:	00bf7fc4 	movi	r2,-513
  808eac:	9084703a 	and	r2,r18,r2
  808eb0:	01000404 	movi	r4,16
  808eb4:	14814014 	ori	r18,r2,1280
  808eb8:	d900a115 	stw	r4,644(sp)
  808ebc:	003dcf06 	br	8085fc <__svfscanf_r+0xa50>
  808ec0:	04800104 	movi	r18,4
  808ec4:	003c2806 	br	807f68 <__svfscanf_r+0x3bc>
  808ec8:	ad401014 	ori	r21,r21,64
  808ecc:	0025883a 	mov	r18,zero
  808ed0:	003c2506 	br	807f68 <__svfscanf_r+0x3bc>
  808ed4:	ad400114 	ori	r21,r21,4
  808ed8:	003b9006 	br	807d1c <__svfscanf_r+0x170>
  808edc:	0027883a 	mov	r19,zero
  808ee0:	003cac06 	br	808194 <__svfscanf_r+0x5e8>
  808ee4:	903d5226 	beq	r18,zero,808430 <__svfscanf_r+0x884>
  808ee8:	94bfffc4 	addi	r18,r18,-1
  808eec:	d8c04404 	addi	r3,sp,272
  808ef0:	1c85883a 	add	r2,r3,r18
  808ef4:	11400003 	ldbu	r5,0(r2)
  808ef8:	b009883a 	mov	r4,r22
  808efc:	800d883a 	mov	r6,r16
  808f00:	0805ab40 	call	805ab4 <_ungetc_r>
  808f04:	003ff706 	br	808ee4 <__svfscanf_r+0x1338>
  808f08:	00bfff84 	movi	r2,-2
  808f0c:	18bd361e 	bne	r3,r2,8083e8 <__svfscanf_r+0x83c>
  808f10:	003d4006 	br	808414 <__svfscanf_r+0x868>
  808f14:	d900a417 	ldw	r4,656(sp)
  808f18:	25400017 	ldw	r21,0(r4)
  808f1c:	21000104 	addi	r4,r4,4
  808f20:	d900a415 	stw	r4,656(sp)
  808f24:	003d0606 	br	808340 <__svfscanf_r+0x794>
  808f28:	983b5526 	beq	r19,zero,807c80 <__svfscanf_r+0xd4>
  808f2c:	8ce3883a 	add	r17,r17,r19
  808f30:	003b3106 	br	807bf8 <__svfscanf_r+0x4c>
  808f34:	00bfff84 	movi	r2,-2
  808f38:	18bc621e 	bne	r3,r2,8080c4 <__svfscanf_r+0x518>
  808f3c:	003c6906 	br	8080e4 <__svfscanf_r+0x538>
  808f40:	b009883a 	mov	r4,r22
  808f44:	800b883a 	mov	r5,r16
  808f48:	080535c0 	call	80535c <__srefill_r>
  808f4c:	103c6726 	beq	r2,zero,8080ec <__svfscanf_r+0x540>
  808f50:	903b6b1e 	bne	r18,zero,807d00 <__svfscanf_r+0x154>
  808f54:	a83b281e 	bne	r21,zero,807bf8 <__svfscanf_r+0x4c>
  808f58:	d8c0a217 	ldw	r3,648(sp)
  808f5c:	18c00044 	addi	r3,r3,1
  808f60:	d8c0a215 	stw	r3,648(sp)
  808f64:	003b2406 	br	807bf8 <__svfscanf_r+0x4c>
  808f68:	8080030b 	ldhu	r2,12(r16)
  808f6c:	1080100c 	andi	r2,r2,64
  808f70:	103b4326 	beq	r2,zero,807c80 <__svfscanf_r+0xd4>
  808f74:	003b6406 	br	807d08 <__svfscanf_r+0x15c>
  808f78:	d8c0a417 	ldw	r3,656(sp)
  808f7c:	1cc00017 	ldw	r19,0(r3)
  808f80:	18c00104 	addi	r3,r3,4
  808f84:	d8c0a415 	stw	r3,656(sp)
  808f88:	003c2906 	br	808030 <__svfscanf_r+0x484>
  808f8c:	00800204 	movi	r2,8
  808f90:	00c02074 	movhi	r3,129
  808f94:	18fba604 	addi	r3,r3,-4456
  808f98:	048000c4 	movi	r18,3
  808f9c:	d880a115 	stw	r2,644(sp)
  808fa0:	d8c0a015 	stw	r3,640(sp)
  808fa4:	003bf006 	br	807f68 <__svfscanf_r+0x3bc>
  808fa8:	04800084 	movi	r18,2
  808fac:	003bee06 	br	807f68 <__svfscanf_r+0x3bc>
  808fb0:	01000404 	movi	r4,16
  808fb4:	00802074 	movhi	r2,129
  808fb8:	10bba604 	addi	r2,r2,-4456
  808fbc:	ad408814 	ori	r21,r21,544
  808fc0:	048000c4 	movi	r18,3
  808fc4:	d900a115 	stw	r4,644(sp)
  808fc8:	d880a015 	stw	r2,640(sp)
  808fcc:	003be606 	br	807f68 <__svfscanf_r+0x3bc>
  808fd0:	a880040c 	andi	r2,r21,16
  808fd4:	103b081e 	bne	r2,zero,807bf8 <__svfscanf_r+0x4c>
  808fd8:	a880010c 	andi	r2,r21,4
  808fdc:	10004e26 	beq	r2,zero,809118 <__svfscanf_r+0x156c>
  808fe0:	d8c0a417 	ldw	r3,656(sp)
  808fe4:	18800017 	ldw	r2,0(r3)
  808fe8:	18c00104 	addi	r3,r3,4
  808fec:	d8c0a415 	stw	r3,656(sp)
  808ff0:	1440000d 	sth	r17,0(r2)
  808ff4:	003b0006 	br	807bf8 <__svfscanf_r+0x4c>
  808ff8:	d880a417 	ldw	r2,656(sp)
  808ffc:	dd400404 	addi	r21,sp,16
  809000:	14800017 	ldw	r18,0(r2)
  809004:	9027883a 	mov	r19,r18
  809008:	81000017 	ldw	r4,0(r16)
  80900c:	20800003 	ldbu	r2,0(r4)
  809010:	a885883a 	add	r2,r21,r2
  809014:	10c00007 	ldb	r3,0(r2)
  809018:	18001426 	beq	r3,zero,80906c <__svfscanf_r+0x14c0>
  80901c:	d8c0a317 	ldw	r3,652(sp)
  809020:	80800117 	ldw	r2,4(r16)
  809024:	21800044 	addi	r6,r4,1
  809028:	18ffffc4 	addi	r3,r3,-1
  80902c:	d8c0a315 	stw	r3,652(sp)
  809030:	10ffffc4 	addi	r3,r2,-1
  809034:	80c00115 	stw	r3,4(r16)
  809038:	20800003 	ldbu	r2,0(r4)
  80903c:	90800005 	stb	r2,0(r18)
  809040:	d900a317 	ldw	r4,652(sp)
  809044:	81800015 	stw	r6,0(r16)
  809048:	94800044 	addi	r18,r18,1
  80904c:	20000726 	beq	r4,zero,80906c <__svfscanf_r+0x14c0>
  809050:	80800117 	ldw	r2,4(r16)
  809054:	00bfec16 	blt	zero,r2,809008 <__svfscanf_r+0x145c>
  809058:	b009883a 	mov	r4,r22
  80905c:	800b883a 	mov	r5,r16
  809060:	080535c0 	call	80535c <__srefill_r>
  809064:	103fe826 	beq	r2,zero,809008 <__svfscanf_r+0x145c>
  809068:	9cbb2526 	beq	r19,r18,807d00 <__svfscanf_r+0x154>
  80906c:	94e7c83a 	sub	r19,r18,r19
  809070:	983b0326 	beq	r19,zero,807c80 <__svfscanf_r+0xd4>
  809074:	90000005 	stb	zero,0(r18)
  809078:	d880a417 	ldw	r2,656(sp)
  80907c:	d8c0a217 	ldw	r3,648(sp)
  809080:	8ce3883a 	add	r17,r17,r19
  809084:	10800104 	addi	r2,r2,4
  809088:	18c00044 	addi	r3,r3,1
  80908c:	d880a415 	stw	r2,656(sp)
  809090:	d8c0a215 	stw	r3,648(sp)
  809094:	003ad806 	br	807bf8 <__svfscanf_r+0x4c>
  809098:	d900a517 	ldw	r4,660(sp)
  80909c:	25faf82e 	bgeu	r4,r23,807c80 <__svfscanf_r+0xd4>
  8090a0:	bdffffc4 	addi	r23,r23,-1
  8090a4:	b9400007 	ldb	r5,0(r23)
  8090a8:	b009883a 	mov	r4,r22
  8090ac:	800d883a 	mov	r6,r16
  8090b0:	0805ab40 	call	805ab4 <_ungetc_r>
  8090b4:	d8c0a517 	ldw	r3,660(sp)
  8090b8:	1dfff936 	bltu	r3,r23,8090a0 <__svfscanf_r+0x14f4>
  8090bc:	003af006 	br	807c80 <__svfscanf_r+0xd4>
  8090c0:	a880040c 	andi	r2,r21,16
  8090c4:	10002d26 	beq	r2,zero,80917c <__svfscanf_r+0x15d0>
  8090c8:	0025883a 	mov	r18,zero
  8090cc:	00000906 	br	8090f4 <__svfscanf_r+0x1548>
  8090d0:	80c00117 	ldw	r3,4(r16)
  8090d4:	d880a317 	ldw	r2,652(sp)
  8090d8:	29800044 	addi	r6,r5,1
  8090dc:	18ffffc4 	addi	r3,r3,-1
  8090e0:	94800044 	addi	r18,r18,1
  8090e4:	81800015 	stw	r6,0(r16)
  8090e8:	80c00115 	stw	r3,4(r16)
  8090ec:	14800826 	beq	r2,r18,809110 <__svfscanf_r+0x1564>
  8090f0:	00c0120e 	bge	zero,r3,80913c <__svfscanf_r+0x1590>
  8090f4:	81400017 	ldw	r5,0(r16)
  8090f8:	98800017 	ldw	r2,0(r19)
  8090fc:	28c00003 	ldbu	r3,0(r5)
  809100:	1887883a 	add	r3,r3,r2
  809104:	19000003 	ldbu	r4,0(r3)
  809108:	2100020c 	andi	r4,r4,8
  80910c:	203ff026 	beq	r4,zero,8090d0 <__svfscanf_r+0x1524>
  809110:	8ca3883a 	add	r17,r17,r18
  809114:	003ab806 	br	807bf8 <__svfscanf_r+0x4c>
  809118:	a880004c 	andi	r2,r21,1
  80911c:	1005003a 	cmpeq	r2,r2,zero
  809120:	10000b1e 	bne	r2,zero,809150 <__svfscanf_r+0x15a4>
  809124:	d900a417 	ldw	r4,656(sp)
  809128:	20800017 	ldw	r2,0(r4)
  80912c:	21000104 	addi	r4,r4,4
  809130:	d900a415 	stw	r4,656(sp)
  809134:	14400015 	stw	r17,0(r2)
  809138:	003aaf06 	br	807bf8 <__svfscanf_r+0x4c>
  80913c:	b009883a 	mov	r4,r22
  809140:	800b883a 	mov	r5,r16
  809144:	080535c0 	call	80535c <__srefill_r>
  809148:	103fea26 	beq	r2,zero,8090f4 <__svfscanf_r+0x1548>
  80914c:	003ff006 	br	809110 <__svfscanf_r+0x1564>
  809150:	a880008c 	andi	r2,r21,2
  809154:	10002c26 	beq	r2,zero,809208 <__svfscanf_r+0x165c>
  809158:	d8c0a417 	ldw	r3,656(sp)
  80915c:	d900a417 	ldw	r4,656(sp)
  809160:	18800017 	ldw	r2,0(r3)
  809164:	8807d7fa 	srai	r3,r17,31
  809168:	21000104 	addi	r4,r4,4
  80916c:	d900a415 	stw	r4,656(sp)
  809170:	14400015 	stw	r17,0(r2)
  809174:	10c00115 	stw	r3,4(r2)
  809178:	003a9f06 	br	807bf8 <__svfscanf_r+0x4c>
  80917c:	d8c0a417 	ldw	r3,656(sp)
  809180:	1d400017 	ldw	r21,0(r3)
  809184:	a825883a 	mov	r18,r21
  809188:	00000e06 	br	8091c4 <__svfscanf_r+0x1618>
  80918c:	80800117 	ldw	r2,4(r16)
  809190:	d900a317 	ldw	r4,652(sp)
  809194:	29800044 	addi	r6,r5,1
  809198:	10ffffc4 	addi	r3,r2,-1
  80919c:	213fffc4 	addi	r4,r4,-1
  8091a0:	d900a315 	stw	r4,652(sp)
  8091a4:	80c00115 	stw	r3,4(r16)
  8091a8:	28800003 	ldbu	r2,0(r5)
  8091ac:	90800005 	stb	r2,0(r18)
  8091b0:	81800015 	stw	r6,0(r16)
  8091b4:	94800044 	addi	r18,r18,1
  8091b8:	20000926 	beq	r4,zero,8091e0 <__svfscanf_r+0x1634>
  8091bc:	80800117 	ldw	r2,4(r16)
  8091c0:	0080170e 	bge	zero,r2,809220 <__svfscanf_r+0x1674>
  8091c4:	81400017 	ldw	r5,0(r16)
  8091c8:	98800017 	ldw	r2,0(r19)
  8091cc:	28c00003 	ldbu	r3,0(r5)
  8091d0:	1887883a 	add	r3,r3,r2
  8091d4:	19000003 	ldbu	r4,0(r3)
  8091d8:	2100020c 	andi	r4,r4,8
  8091dc:	203feb26 	beq	r4,zero,80918c <__svfscanf_r+0x15e0>
  8091e0:	9545c83a 	sub	r2,r18,r21
  8091e4:	d8c0a217 	ldw	r3,648(sp)
  8091e8:	88a3883a 	add	r17,r17,r2
  8091ec:	d880a417 	ldw	r2,656(sp)
  8091f0:	18c00044 	addi	r3,r3,1
  8091f4:	d8c0a215 	stw	r3,648(sp)
  8091f8:	10800104 	addi	r2,r2,4
  8091fc:	d880a415 	stw	r2,656(sp)
  809200:	90000005 	stb	zero,0(r18)
  809204:	003a7c06 	br	807bf8 <__svfscanf_r+0x4c>
  809208:	d8c0a417 	ldw	r3,656(sp)
  80920c:	18800017 	ldw	r2,0(r3)
  809210:	18c00104 	addi	r3,r3,4
  809214:	d8c0a415 	stw	r3,656(sp)
  809218:	14400015 	stw	r17,0(r2)
  80921c:	003a7606 	br	807bf8 <__svfscanf_r+0x4c>
  809220:	b009883a 	mov	r4,r22
  809224:	800b883a 	mov	r5,r16
  809228:	080535c0 	call	80535c <__srefill_r>
  80922c:	103fe526 	beq	r2,zero,8091c4 <__svfscanf_r+0x1618>
  809230:	003feb06 	br	8091e0 <__svfscanf_r+0x1634>

00809234 <__svfscanf>:
  809234:	00802074 	movhi	r2,129
  809238:	109c2904 	addi	r2,r2,28836
  80923c:	2013883a 	mov	r9,r4
  809240:	11000017 	ldw	r4,0(r2)
  809244:	2805883a 	mov	r2,r5
  809248:	300f883a 	mov	r7,r6
  80924c:	480b883a 	mov	r5,r9
  809250:	100d883a 	mov	r6,r2
  809254:	0807bac1 	jmpi	807bac <__svfscanf_r>

00809258 <_vfscanf_r>:
  809258:	defffb04 	addi	sp,sp,-20
  80925c:	dcc00315 	stw	r19,12(sp)
  809260:	dc800215 	stw	r18,8(sp)
  809264:	dc400115 	stw	r17,4(sp)
  809268:	dc000015 	stw	r16,0(sp)
  80926c:	dfc00415 	stw	ra,16(sp)
  809270:	2021883a 	mov	r16,r4
  809274:	2823883a 	mov	r17,r5
  809278:	3025883a 	mov	r18,r6
  80927c:	3827883a 	mov	r19,r7
  809280:	20000226 	beq	r4,zero,80928c <_vfscanf_r+0x34>
  809284:	20800e17 	ldw	r2,56(r4)
  809288:	10000b26 	beq	r2,zero,8092b8 <_vfscanf_r+0x60>
  80928c:	8009883a 	mov	r4,r16
  809290:	880b883a 	mov	r5,r17
  809294:	900d883a 	mov	r6,r18
  809298:	980f883a 	mov	r7,r19
  80929c:	dfc00417 	ldw	ra,16(sp)
  8092a0:	dcc00317 	ldw	r19,12(sp)
  8092a4:	dc800217 	ldw	r18,8(sp)
  8092a8:	dc400117 	ldw	r17,4(sp)
  8092ac:	dc000017 	ldw	r16,0(sp)
  8092b0:	dec00504 	addi	sp,sp,20
  8092b4:	0807bac1 	jmpi	807bac <__svfscanf_r>
  8092b8:	080346c0 	call	80346c <__sinit>
  8092bc:	003ff306 	br	80928c <_vfscanf_r+0x34>

008092c0 <vfscanf>:
  8092c0:	defffb04 	addi	sp,sp,-20
  8092c4:	dcc00315 	stw	r19,12(sp)
  8092c8:	04c02074 	movhi	r19,129
  8092cc:	9cdc2904 	addi	r19,r19,28836
  8092d0:	98c00017 	ldw	r3,0(r19)
  8092d4:	dc800215 	stw	r18,8(sp)
  8092d8:	dc400115 	stw	r17,4(sp)
  8092dc:	dc000015 	stw	r16,0(sp)
  8092e0:	dfc00415 	stw	ra,16(sp)
  8092e4:	2021883a 	mov	r16,r4
  8092e8:	2823883a 	mov	r17,r5
  8092ec:	3025883a 	mov	r18,r6
  8092f0:	18000326 	beq	r3,zero,809300 <vfscanf+0x40>
  8092f4:	18800e17 	ldw	r2,56(r3)
  8092f8:	1809883a 	mov	r4,r3
  8092fc:	10000b26 	beq	r2,zero,80932c <vfscanf+0x6c>
  809300:	99000017 	ldw	r4,0(r19)
  809304:	800b883a 	mov	r5,r16
  809308:	880d883a 	mov	r6,r17
  80930c:	900f883a 	mov	r7,r18
  809310:	dfc00417 	ldw	ra,16(sp)
  809314:	dcc00317 	ldw	r19,12(sp)
  809318:	dc800217 	ldw	r18,8(sp)
  80931c:	dc400117 	ldw	r17,4(sp)
  809320:	dc000017 	ldw	r16,0(sp)
  809324:	dec00504 	addi	sp,sp,20
  809328:	0807bac1 	jmpi	807bac <__svfscanf_r>
  80932c:	080346c0 	call	80346c <__sinit>
  809330:	003ff306 	br	809300 <vfscanf+0x40>

00809334 <_write_r>:
  809334:	defffd04 	addi	sp,sp,-12
  809338:	dc000015 	stw	r16,0(sp)
  80933c:	040020b4 	movhi	r16,130
  809340:	84231204 	addi	r16,r16,-29624
  809344:	dc400115 	stw	r17,4(sp)
  809348:	80000015 	stw	zero,0(r16)
  80934c:	2023883a 	mov	r17,r4
  809350:	2809883a 	mov	r4,r5
  809354:	300b883a 	mov	r5,r6
  809358:	380d883a 	mov	r6,r7
  80935c:	dfc00215 	stw	ra,8(sp)
  809360:	0812bb00 	call	812bb0 <write>
  809364:	1007883a 	mov	r3,r2
  809368:	00bfffc4 	movi	r2,-1
  80936c:	18800626 	beq	r3,r2,809388 <_write_r+0x54>
  809370:	1805883a 	mov	r2,r3
  809374:	dfc00217 	ldw	ra,8(sp)
  809378:	dc400117 	ldw	r17,4(sp)
  80937c:	dc000017 	ldw	r16,0(sp)
  809380:	dec00304 	addi	sp,sp,12
  809384:	f800283a 	ret
  809388:	80800017 	ldw	r2,0(r16)
  80938c:	103ff826 	beq	r2,zero,809370 <_write_r+0x3c>
  809390:	88800015 	stw	r2,0(r17)
  809394:	1805883a 	mov	r2,r3
  809398:	dfc00217 	ldw	ra,8(sp)
  80939c:	dc400117 	ldw	r17,4(sp)
  8093a0:	dc000017 	ldw	r16,0(sp)
  8093a4:	dec00304 	addi	sp,sp,12
  8093a8:	f800283a 	ret

008093ac <__swsetup_r>:
  8093ac:	00802074 	movhi	r2,129
  8093b0:	109c2904 	addi	r2,r2,28836
  8093b4:	10c00017 	ldw	r3,0(r2)
  8093b8:	defffd04 	addi	sp,sp,-12
  8093bc:	dc400115 	stw	r17,4(sp)
  8093c0:	dc000015 	stw	r16,0(sp)
  8093c4:	dfc00215 	stw	ra,8(sp)
  8093c8:	2023883a 	mov	r17,r4
  8093cc:	2821883a 	mov	r16,r5
  8093d0:	18000226 	beq	r3,zero,8093dc <__swsetup_r+0x30>
  8093d4:	18800e17 	ldw	r2,56(r3)
  8093d8:	10001f26 	beq	r2,zero,809458 <__swsetup_r+0xac>
  8093dc:	8100030b 	ldhu	r4,12(r16)
  8093e0:	2080020c 	andi	r2,r4,8
  8093e4:	10002826 	beq	r2,zero,809488 <__swsetup_r+0xdc>
  8093e8:	81400417 	ldw	r5,16(r16)
  8093ec:	28001d26 	beq	r5,zero,809464 <__swsetup_r+0xb8>
  8093f0:	2080004c 	andi	r2,r4,1
  8093f4:	1005003a 	cmpeq	r2,r2,zero
  8093f8:	10000b26 	beq	r2,zero,809428 <__swsetup_r+0x7c>
  8093fc:	2080008c 	andi	r2,r4,2
  809400:	10001226 	beq	r2,zero,80944c <__swsetup_r+0xa0>
  809404:	0005883a 	mov	r2,zero
  809408:	80800215 	stw	r2,8(r16)
  80940c:	28000b26 	beq	r5,zero,80943c <__swsetup_r+0x90>
  809410:	0005883a 	mov	r2,zero
  809414:	dfc00217 	ldw	ra,8(sp)
  809418:	dc400117 	ldw	r17,4(sp)
  80941c:	dc000017 	ldw	r16,0(sp)
  809420:	dec00304 	addi	sp,sp,12
  809424:	f800283a 	ret
  809428:	80800517 	ldw	r2,20(r16)
  80942c:	80000215 	stw	zero,8(r16)
  809430:	0085c83a 	sub	r2,zero,r2
  809434:	80800615 	stw	r2,24(r16)
  809438:	283ff51e 	bne	r5,zero,809410 <__swsetup_r+0x64>
  80943c:	2080200c 	andi	r2,r4,128
  809440:	103ff326 	beq	r2,zero,809410 <__swsetup_r+0x64>
  809444:	00bfffc4 	movi	r2,-1
  809448:	003ff206 	br	809414 <__swsetup_r+0x68>
  80944c:	80800517 	ldw	r2,20(r16)
  809450:	80800215 	stw	r2,8(r16)
  809454:	003fed06 	br	80940c <__swsetup_r+0x60>
  809458:	1809883a 	mov	r4,r3
  80945c:	080346c0 	call	80346c <__sinit>
  809460:	003fde06 	br	8093dc <__swsetup_r+0x30>
  809464:	20c0a00c 	andi	r3,r4,640
  809468:	00808004 	movi	r2,512
  80946c:	18bfe026 	beq	r3,r2,8093f0 <__swsetup_r+0x44>
  809470:	8809883a 	mov	r4,r17
  809474:	800b883a 	mov	r5,r16
  809478:	08046a00 	call	8046a0 <__smakebuf_r>
  80947c:	8100030b 	ldhu	r4,12(r16)
  809480:	81400417 	ldw	r5,16(r16)
  809484:	003fda06 	br	8093f0 <__swsetup_r+0x44>
  809488:	2080040c 	andi	r2,r4,16
  80948c:	103fed26 	beq	r2,zero,809444 <__swsetup_r+0x98>
  809490:	2080010c 	andi	r2,r4,4
  809494:	10001226 	beq	r2,zero,8094e0 <__swsetup_r+0x134>
  809498:	81400c17 	ldw	r5,48(r16)
  80949c:	28000526 	beq	r5,zero,8094b4 <__swsetup_r+0x108>
  8094a0:	80801004 	addi	r2,r16,64
  8094a4:	28800226 	beq	r5,r2,8094b0 <__swsetup_r+0x104>
  8094a8:	8809883a 	mov	r4,r17
  8094ac:	0803be00 	call	803be0 <_free_r>
  8094b0:	80000c15 	stw	zero,48(r16)
  8094b4:	8080030b 	ldhu	r2,12(r16)
  8094b8:	81400417 	ldw	r5,16(r16)
  8094bc:	80000115 	stw	zero,4(r16)
  8094c0:	10bff6cc 	andi	r2,r2,65499
  8094c4:	8080030d 	sth	r2,12(r16)
  8094c8:	81400015 	stw	r5,0(r16)
  8094cc:	8080030b 	ldhu	r2,12(r16)
  8094d0:	10800214 	ori	r2,r2,8
  8094d4:	113fffcc 	andi	r4,r2,65535
  8094d8:	8080030d 	sth	r2,12(r16)
  8094dc:	003fc306 	br	8093ec <__swsetup_r+0x40>
  8094e0:	81400417 	ldw	r5,16(r16)
  8094e4:	003ff906 	br	8094cc <__swsetup_r+0x120>

008094e8 <register_fini>:
  8094e8:	f800283a 	ret

008094ec <__call_exitprocs>:
  8094ec:	00802074 	movhi	r2,129
  8094f0:	109c2a04 	addi	r2,r2,28840
  8094f4:	10800017 	ldw	r2,0(r2)
  8094f8:	defff304 	addi	sp,sp,-52
  8094fc:	df000b15 	stw	fp,44(sp)
  809500:	d8800115 	stw	r2,4(sp)
  809504:	00802034 	movhi	r2,128
  809508:	10920d04 	addi	r2,r2,18484
  80950c:	1005003a 	cmpeq	r2,r2,zero
  809510:	d8800215 	stw	r2,8(sp)
  809514:	d8800117 	ldw	r2,4(sp)
  809518:	dd400815 	stw	r21,32(sp)
  80951c:	dd000715 	stw	r20,28(sp)
  809520:	10805204 	addi	r2,r2,328
  809524:	dfc00c15 	stw	ra,48(sp)
  809528:	ddc00a15 	stw	r23,40(sp)
  80952c:	dd800915 	stw	r22,36(sp)
  809530:	dcc00615 	stw	r19,24(sp)
  809534:	dc800515 	stw	r18,20(sp)
  809538:	dc400415 	stw	r17,16(sp)
  80953c:	dc000315 	stw	r16,12(sp)
  809540:	282b883a 	mov	r21,r5
  809544:	2039883a 	mov	fp,r4
  809548:	d8800015 	stw	r2,0(sp)
  80954c:	2829003a 	cmpeq	r20,r5,zero
  809550:	d8800117 	ldw	r2,4(sp)
  809554:	14405217 	ldw	r17,328(r2)
  809558:	88001026 	beq	r17,zero,80959c <__call_exitprocs+0xb0>
  80955c:	ddc00017 	ldw	r23,0(sp)
  809560:	88800117 	ldw	r2,4(r17)
  809564:	8c802204 	addi	r18,r17,136
  809568:	143fffc4 	addi	r16,r2,-1
  80956c:	80000916 	blt	r16,zero,809594 <__call_exitprocs+0xa8>
  809570:	05bfffc4 	movi	r22,-1
  809574:	a000151e 	bne	r20,zero,8095cc <__call_exitprocs+0xe0>
  809578:	8409883a 	add	r4,r16,r16
  80957c:	2105883a 	add	r2,r4,r4
  809580:	1485883a 	add	r2,r2,r18
  809584:	10c02017 	ldw	r3,128(r2)
  809588:	a8c01126 	beq	r21,r3,8095d0 <__call_exitprocs+0xe4>
  80958c:	843fffc4 	addi	r16,r16,-1
  809590:	85bff81e 	bne	r16,r22,809574 <__call_exitprocs+0x88>
  809594:	d8800217 	ldw	r2,8(sp)
  809598:	10003126 	beq	r2,zero,809660 <__call_exitprocs+0x174>
  80959c:	dfc00c17 	ldw	ra,48(sp)
  8095a0:	df000b17 	ldw	fp,44(sp)
  8095a4:	ddc00a17 	ldw	r23,40(sp)
  8095a8:	dd800917 	ldw	r22,36(sp)
  8095ac:	dd400817 	ldw	r21,32(sp)
  8095b0:	dd000717 	ldw	r20,28(sp)
  8095b4:	dcc00617 	ldw	r19,24(sp)
  8095b8:	dc800517 	ldw	r18,20(sp)
  8095bc:	dc400417 	ldw	r17,16(sp)
  8095c0:	dc000317 	ldw	r16,12(sp)
  8095c4:	dec00d04 	addi	sp,sp,52
  8095c8:	f800283a 	ret
  8095cc:	8409883a 	add	r4,r16,r16
  8095d0:	88c00117 	ldw	r3,4(r17)
  8095d4:	2105883a 	add	r2,r4,r4
  8095d8:	1445883a 	add	r2,r2,r17
  8095dc:	18ffffc4 	addi	r3,r3,-1
  8095e0:	11800217 	ldw	r6,8(r2)
  8095e4:	1c001526 	beq	r3,r16,80963c <__call_exitprocs+0x150>
  8095e8:	10000215 	stw	zero,8(r2)
  8095ec:	303fe726 	beq	r6,zero,80958c <__call_exitprocs+0xa0>
  8095f0:	00c00044 	movi	r3,1
  8095f4:	1c06983a 	sll	r3,r3,r16
  8095f8:	90804017 	ldw	r2,256(r18)
  8095fc:	8cc00117 	ldw	r19,4(r17)
  809600:	1884703a 	and	r2,r3,r2
  809604:	10001426 	beq	r2,zero,809658 <__call_exitprocs+0x16c>
  809608:	90804117 	ldw	r2,260(r18)
  80960c:	1884703a 	and	r2,r3,r2
  809610:	10000c1e 	bne	r2,zero,809644 <__call_exitprocs+0x158>
  809614:	2105883a 	add	r2,r4,r4
  809618:	1485883a 	add	r2,r2,r18
  80961c:	11400017 	ldw	r5,0(r2)
  809620:	e009883a 	mov	r4,fp
  809624:	303ee83a 	callr	r6
  809628:	88800117 	ldw	r2,4(r17)
  80962c:	98bfc81e 	bne	r19,r2,809550 <__call_exitprocs+0x64>
  809630:	b8800017 	ldw	r2,0(r23)
  809634:	147fd526 	beq	r2,r17,80958c <__call_exitprocs+0xa0>
  809638:	003fc506 	br	809550 <__call_exitprocs+0x64>
  80963c:	8c000115 	stw	r16,4(r17)
  809640:	003fea06 	br	8095ec <__call_exitprocs+0x100>
  809644:	2105883a 	add	r2,r4,r4
  809648:	1485883a 	add	r2,r2,r18
  80964c:	11000017 	ldw	r4,0(r2)
  809650:	303ee83a 	callr	r6
  809654:	003ff406 	br	809628 <__call_exitprocs+0x13c>
  809658:	303ee83a 	callr	r6
  80965c:	003ff206 	br	809628 <__call_exitprocs+0x13c>
  809660:	88800117 	ldw	r2,4(r17)
  809664:	1000081e 	bne	r2,zero,809688 <__call_exitprocs+0x19c>
  809668:	89000017 	ldw	r4,0(r17)
  80966c:	20000726 	beq	r4,zero,80968c <__call_exitprocs+0x1a0>
  809670:	b9000015 	stw	r4,0(r23)
  809674:	8809883a 	mov	r4,r17
  809678:	08048340 	call	804834 <free>
  80967c:	bc400017 	ldw	r17,0(r23)
  809680:	883fb71e 	bne	r17,zero,809560 <__call_exitprocs+0x74>
  809684:	003fc506 	br	80959c <__call_exitprocs+0xb0>
  809688:	89000017 	ldw	r4,0(r17)
  80968c:	882f883a 	mov	r23,r17
  809690:	2023883a 	mov	r17,r4
  809694:	883fb21e 	bne	r17,zero,809560 <__call_exitprocs+0x74>
  809698:	003fc006 	br	80959c <__call_exitprocs+0xb0>

0080969c <_close_r>:
  80969c:	defffd04 	addi	sp,sp,-12
  8096a0:	dc000015 	stw	r16,0(sp)
  8096a4:	040020b4 	movhi	r16,130
  8096a8:	84231204 	addi	r16,r16,-29624
  8096ac:	dc400115 	stw	r17,4(sp)
  8096b0:	80000015 	stw	zero,0(r16)
  8096b4:	2023883a 	mov	r17,r4
  8096b8:	2809883a 	mov	r4,r5
  8096bc:	dfc00215 	stw	ra,8(sp)
  8096c0:	0811dfc0 	call	811dfc <close>
  8096c4:	1007883a 	mov	r3,r2
  8096c8:	00bfffc4 	movi	r2,-1
  8096cc:	18800626 	beq	r3,r2,8096e8 <_close_r+0x4c>
  8096d0:	1805883a 	mov	r2,r3
  8096d4:	dfc00217 	ldw	ra,8(sp)
  8096d8:	dc400117 	ldw	r17,4(sp)
  8096dc:	dc000017 	ldw	r16,0(sp)
  8096e0:	dec00304 	addi	sp,sp,12
  8096e4:	f800283a 	ret
  8096e8:	80800017 	ldw	r2,0(r16)
  8096ec:	103ff826 	beq	r2,zero,8096d0 <_close_r+0x34>
  8096f0:	88800015 	stw	r2,0(r17)
  8096f4:	1805883a 	mov	r2,r3
  8096f8:	dfc00217 	ldw	ra,8(sp)
  8096fc:	dc400117 	ldw	r17,4(sp)
  809700:	dc000017 	ldw	r16,0(sp)
  809704:	dec00304 	addi	sp,sp,12
  809708:	f800283a 	ret

0080970c <quorem>:
  80970c:	28c00417 	ldw	r3,16(r5)
  809710:	20800417 	ldw	r2,16(r4)
  809714:	defff104 	addi	sp,sp,-60
  809718:	dfc00e15 	stw	ra,56(sp)
  80971c:	df000d15 	stw	fp,52(sp)
  809720:	ddc00c15 	stw	r23,48(sp)
  809724:	dd800b15 	stw	r22,44(sp)
  809728:	dd400a15 	stw	r21,40(sp)
  80972c:	dd000915 	stw	r20,36(sp)
  809730:	dcc00815 	stw	r19,32(sp)
  809734:	dc800715 	stw	r18,28(sp)
  809738:	dc400615 	stw	r17,24(sp)
  80973c:	dc000515 	stw	r16,20(sp)
  809740:	d9000315 	stw	r4,12(sp)
  809744:	d9400415 	stw	r5,16(sp)
  809748:	10c07f16 	blt	r2,r3,809948 <quorem+0x23c>
  80974c:	1d3fffc4 	addi	r20,r3,-1
  809750:	d8c00417 	ldw	r3,16(sp)
  809754:	d9000317 	ldw	r4,12(sp)
  809758:	a505883a 	add	r2,r20,r20
  80975c:	1085883a 	add	r2,r2,r2
  809760:	1cc00504 	addi	r19,r3,20
  809764:	25c00504 	addi	r23,r4,20
  809768:	98ad883a 	add	r22,r19,r2
  80976c:	15c7883a 	add	r3,r2,r23
  809770:	b1400017 	ldw	r5,0(r22)
  809774:	19000017 	ldw	r4,0(r3)
  809778:	d8c00015 	stw	r3,0(sp)
  80977c:	29400044 	addi	r5,r5,1
  809780:	d9000215 	stw	r4,8(sp)
  809784:	0811a280 	call	811a28 <__udivsi3>
  809788:	1039883a 	mov	fp,r2
  80978c:	10003d1e 	bne	r2,zero,809884 <quorem+0x178>
  809790:	d9400417 	ldw	r5,16(sp)
  809794:	d9000317 	ldw	r4,12(sp)
  809798:	080b9540 	call	80b954 <__mcmp>
  80979c:	10002c16 	blt	r2,zero,809850 <quorem+0x144>
  8097a0:	e7000044 	addi	fp,fp,1
  8097a4:	b80f883a 	mov	r7,r23
  8097a8:	0011883a 	mov	r8,zero
  8097ac:	0009883a 	mov	r4,zero
  8097b0:	99400017 	ldw	r5,0(r19)
  8097b4:	38c00017 	ldw	r3,0(r7)
  8097b8:	9cc00104 	addi	r19,r19,4
  8097bc:	28bfffcc 	andi	r2,r5,65535
  8097c0:	2085883a 	add	r2,r4,r2
  8097c4:	11bfffcc 	andi	r6,r2,65535
  8097c8:	193fffcc 	andi	r4,r3,65535
  8097cc:	1004d43a 	srli	r2,r2,16
  8097d0:	280ad43a 	srli	r5,r5,16
  8097d4:	2189c83a 	sub	r4,r4,r6
  8097d8:	2209883a 	add	r4,r4,r8
  8097dc:	1806d43a 	srli	r3,r3,16
  8097e0:	288b883a 	add	r5,r5,r2
  8097e4:	200dd43a 	srai	r6,r4,16
  8097e8:	28bfffcc 	andi	r2,r5,65535
  8097ec:	1887c83a 	sub	r3,r3,r2
  8097f0:	1987883a 	add	r3,r3,r6
  8097f4:	3900000d 	sth	r4,0(r7)
  8097f8:	38c0008d 	sth	r3,2(r7)
  8097fc:	2808d43a 	srli	r4,r5,16
  809800:	39c00104 	addi	r7,r7,4
  809804:	1811d43a 	srai	r8,r3,16
  809808:	b4ffe92e 	bgeu	r22,r19,8097b0 <quorem+0xa4>
  80980c:	a505883a 	add	r2,r20,r20
  809810:	1085883a 	add	r2,r2,r2
  809814:	b885883a 	add	r2,r23,r2
  809818:	10c00017 	ldw	r3,0(r2)
  80981c:	18000c1e 	bne	r3,zero,809850 <quorem+0x144>
  809820:	113fff04 	addi	r4,r2,-4
  809824:	b900082e 	bgeu	r23,r4,809848 <quorem+0x13c>
  809828:	10bfff17 	ldw	r2,-4(r2)
  80982c:	10000326 	beq	r2,zero,80983c <quorem+0x130>
  809830:	00000506 	br	809848 <quorem+0x13c>
  809834:	20800017 	ldw	r2,0(r4)
  809838:	1000031e 	bne	r2,zero,809848 <quorem+0x13c>
  80983c:	213fff04 	addi	r4,r4,-4
  809840:	a53fffc4 	addi	r20,r20,-1
  809844:	b93ffb36 	bltu	r23,r4,809834 <quorem+0x128>
  809848:	d9000317 	ldw	r4,12(sp)
  80984c:	25000415 	stw	r20,16(r4)
  809850:	e005883a 	mov	r2,fp
  809854:	dfc00e17 	ldw	ra,56(sp)
  809858:	df000d17 	ldw	fp,52(sp)
  80985c:	ddc00c17 	ldw	r23,48(sp)
  809860:	dd800b17 	ldw	r22,44(sp)
  809864:	dd400a17 	ldw	r21,40(sp)
  809868:	dd000917 	ldw	r20,36(sp)
  80986c:	dcc00817 	ldw	r19,32(sp)
  809870:	dc800717 	ldw	r18,28(sp)
  809874:	dc400617 	ldw	r17,24(sp)
  809878:	dc000517 	ldw	r16,20(sp)
  80987c:	dec00f04 	addi	sp,sp,60
  809880:	f800283a 	ret
  809884:	b823883a 	mov	r17,r23
  809888:	9825883a 	mov	r18,r19
  80988c:	d8000115 	stw	zero,4(sp)
  809890:	002b883a 	mov	r21,zero
  809894:	94000017 	ldw	r16,0(r18)
  809898:	e009883a 	mov	r4,fp
  80989c:	94800104 	addi	r18,r18,4
  8098a0:	817fffcc 	andi	r5,r16,65535
  8098a4:	08027a80 	call	8027a8 <__mulsi3>
  8098a8:	800ad43a 	srli	r5,r16,16
  8098ac:	e009883a 	mov	r4,fp
  8098b0:	a8a1883a 	add	r16,r21,r2
  8098b4:	08027a80 	call	8027a8 <__mulsi3>
  8098b8:	89000017 	ldw	r4,0(r17)
  8098bc:	80ffffcc 	andi	r3,r16,65535
  8098c0:	8020d43a 	srli	r16,r16,16
  8098c4:	217fffcc 	andi	r5,r4,65535
  8098c8:	28cbc83a 	sub	r5,r5,r3
  8098cc:	d8c00117 	ldw	r3,4(sp)
  8098d0:	2008d43a 	srli	r4,r4,16
  8098d4:	1405883a 	add	r2,r2,r16
  8098d8:	28cb883a 	add	r5,r5,r3
  8098dc:	280dd43a 	srai	r6,r5,16
  8098e0:	10ffffcc 	andi	r3,r2,65535
  8098e4:	20c9c83a 	sub	r4,r4,r3
  8098e8:	2189883a 	add	r4,r4,r6
  8098ec:	8900008d 	sth	r4,2(r17)
  8098f0:	2009d43a 	srai	r4,r4,16
  8098f4:	8940000d 	sth	r5,0(r17)
  8098f8:	102ad43a 	srli	r21,r2,16
  8098fc:	8c400104 	addi	r17,r17,4
  809900:	d9000115 	stw	r4,4(sp)
  809904:	b4bfe32e 	bgeu	r22,r18,809894 <quorem+0x188>
  809908:	d9000217 	ldw	r4,8(sp)
  80990c:	203fa01e 	bne	r4,zero,809790 <quorem+0x84>
  809910:	d8800017 	ldw	r2,0(sp)
  809914:	10ffff04 	addi	r3,r2,-4
  809918:	b8c0082e 	bgeu	r23,r3,80993c <quorem+0x230>
  80991c:	10bfff17 	ldw	r2,-4(r2)
  809920:	10000326 	beq	r2,zero,809930 <quorem+0x224>
  809924:	00000506 	br	80993c <quorem+0x230>
  809928:	18800017 	ldw	r2,0(r3)
  80992c:	1000031e 	bne	r2,zero,80993c <quorem+0x230>
  809930:	18ffff04 	addi	r3,r3,-4
  809934:	a53fffc4 	addi	r20,r20,-1
  809938:	b8fffb36 	bltu	r23,r3,809928 <quorem+0x21c>
  80993c:	d8c00317 	ldw	r3,12(sp)
  809940:	1d000415 	stw	r20,16(r3)
  809944:	003f9206 	br	809790 <quorem+0x84>
  809948:	0005883a 	mov	r2,zero
  80994c:	003fc106 	br	809854 <quorem+0x148>

00809950 <_dtoa_r>:
  809950:	22001017 	ldw	r8,64(r4)
  809954:	deffda04 	addi	sp,sp,-152
  809958:	dd402115 	stw	r21,132(sp)
  80995c:	dd002015 	stw	r20,128(sp)
  809960:	dc801e15 	stw	r18,120(sp)
  809964:	dc401d15 	stw	r17,116(sp)
  809968:	dfc02515 	stw	ra,148(sp)
  80996c:	df002415 	stw	fp,144(sp)
  809970:	ddc02315 	stw	r23,140(sp)
  809974:	dd802215 	stw	r22,136(sp)
  809978:	dcc01f15 	stw	r19,124(sp)
  80997c:	dc001c15 	stw	r16,112(sp)
  809980:	d9001615 	stw	r4,88(sp)
  809984:	3023883a 	mov	r17,r6
  809988:	2829883a 	mov	r20,r5
  80998c:	d9c01715 	stw	r7,92(sp)
  809990:	dc802817 	ldw	r18,160(sp)
  809994:	302b883a 	mov	r21,r6
  809998:	40000a26 	beq	r8,zero,8099c4 <_dtoa_r+0x74>
  80999c:	20801117 	ldw	r2,68(r4)
  8099a0:	400b883a 	mov	r5,r8
  8099a4:	40800115 	stw	r2,4(r8)
  8099a8:	20c01117 	ldw	r3,68(r4)
  8099ac:	00800044 	movi	r2,1
  8099b0:	10c4983a 	sll	r2,r2,r3
  8099b4:	40800215 	stw	r2,8(r8)
  8099b8:	080b7f80 	call	80b7f8 <_Bfree>
  8099bc:	d8c01617 	ldw	r3,88(sp)
  8099c0:	18001015 	stw	zero,64(r3)
  8099c4:	8800a316 	blt	r17,zero,809c54 <_dtoa_r+0x304>
  8099c8:	90000015 	stw	zero,0(r18)
  8099cc:	a8dffc2c 	andhi	r3,r21,32752
  8099d0:	009ffc34 	movhi	r2,32752
  8099d4:	18809126 	beq	r3,r2,809c1c <_dtoa_r+0x2cc>
  8099d8:	000d883a 	mov	r6,zero
  8099dc:	000f883a 	mov	r7,zero
  8099e0:	a009883a 	mov	r4,r20
  8099e4:	a80b883a 	mov	r5,r21
  8099e8:	dd001215 	stw	r20,72(sp)
  8099ec:	dd401315 	stw	r21,76(sp)
  8099f0:	08114000 	call	811400 <__nedf2>
  8099f4:	1000171e 	bne	r2,zero,809a54 <_dtoa_r+0x104>
  8099f8:	d9802717 	ldw	r6,156(sp)
  8099fc:	00800044 	movi	r2,1
  809a00:	30800015 	stw	r2,0(r6)
  809a04:	d8802917 	ldw	r2,164(sp)
  809a08:	10029b26 	beq	r2,zero,80a478 <_dtoa_r+0xb28>
  809a0c:	d9002917 	ldw	r4,164(sp)
  809a10:	00802074 	movhi	r2,129
  809a14:	1094f144 	addi	r2,r2,21445
  809a18:	10ffffc4 	addi	r3,r2,-1
  809a1c:	20800015 	stw	r2,0(r4)
  809a20:	1805883a 	mov	r2,r3
  809a24:	dfc02517 	ldw	ra,148(sp)
  809a28:	df002417 	ldw	fp,144(sp)
  809a2c:	ddc02317 	ldw	r23,140(sp)
  809a30:	dd802217 	ldw	r22,136(sp)
  809a34:	dd402117 	ldw	r21,132(sp)
  809a38:	dd002017 	ldw	r20,128(sp)
  809a3c:	dcc01f17 	ldw	r19,124(sp)
  809a40:	dc801e17 	ldw	r18,120(sp)
  809a44:	dc401d17 	ldw	r17,116(sp)
  809a48:	dc001c17 	ldw	r16,112(sp)
  809a4c:	dec02604 	addi	sp,sp,152
  809a50:	f800283a 	ret
  809a54:	d9001617 	ldw	r4,88(sp)
  809a58:	d9401217 	ldw	r5,72(sp)
  809a5c:	d8800104 	addi	r2,sp,4
  809a60:	a80d883a 	mov	r6,r21
  809a64:	d9c00204 	addi	r7,sp,8
  809a68:	d8800015 	stw	r2,0(sp)
  809a6c:	080be340 	call	80be34 <__d2b>
  809a70:	d8800715 	stw	r2,28(sp)
  809a74:	a804d53a 	srli	r2,r21,20
  809a78:	1101ffcc 	andi	r4,r2,2047
  809a7c:	20008626 	beq	r4,zero,809c98 <_dtoa_r+0x348>
  809a80:	d8c01217 	ldw	r3,72(sp)
  809a84:	00800434 	movhi	r2,16
  809a88:	10bfffc4 	addi	r2,r2,-1
  809a8c:	ddc00117 	ldw	r23,4(sp)
  809a90:	a884703a 	and	r2,r21,r2
  809a94:	1811883a 	mov	r8,r3
  809a98:	124ffc34 	orhi	r9,r2,16368
  809a9c:	25bf0044 	addi	r22,r4,-1023
  809aa0:	d8000815 	stw	zero,32(sp)
  809aa4:	0005883a 	mov	r2,zero
  809aa8:	00cffe34 	movhi	r3,16376
  809aac:	480b883a 	mov	r5,r9
  809ab0:	4009883a 	mov	r4,r8
  809ab4:	180f883a 	mov	r7,r3
  809ab8:	100d883a 	mov	r6,r2
  809abc:	08022c80 	call	8022c8 <__subdf3>
  809ac0:	0218dbf4 	movhi	r8,25455
  809ac4:	4210d844 	addi	r8,r8,17249
  809ac8:	024ff4f4 	movhi	r9,16339
  809acc:	4a61e9c4 	addi	r9,r9,-30809
  809ad0:	480f883a 	mov	r7,r9
  809ad4:	400d883a 	mov	r6,r8
  809ad8:	180b883a 	mov	r5,r3
  809adc:	1009883a 	mov	r4,r2
  809ae0:	0810fb40 	call	810fb4 <__muldf3>
  809ae4:	0222d874 	movhi	r8,35681
  809ae8:	42322cc4 	addi	r8,r8,-14157
  809aec:	024ff1f4 	movhi	r9,16327
  809af0:	4a628a04 	addi	r9,r9,-30168
  809af4:	480f883a 	mov	r7,r9
  809af8:	400d883a 	mov	r6,r8
  809afc:	180b883a 	mov	r5,r3
  809b00:	1009883a 	mov	r4,r2
  809b04:	08023480 	call	802348 <__adddf3>
  809b08:	b009883a 	mov	r4,r22
  809b0c:	1021883a 	mov	r16,r2
  809b10:	1823883a 	mov	r17,r3
  809b14:	08116a80 	call	8116a8 <__floatsidf>
  809b18:	021427f4 	movhi	r8,20639
  809b1c:	421e7ec4 	addi	r8,r8,31227
  809b20:	024ff4f4 	movhi	r9,16339
  809b24:	4a5104c4 	addi	r9,r9,17427
  809b28:	480f883a 	mov	r7,r9
  809b2c:	400d883a 	mov	r6,r8
  809b30:	180b883a 	mov	r5,r3
  809b34:	1009883a 	mov	r4,r2
  809b38:	0810fb40 	call	810fb4 <__muldf3>
  809b3c:	180f883a 	mov	r7,r3
  809b40:	880b883a 	mov	r5,r17
  809b44:	100d883a 	mov	r6,r2
  809b48:	8009883a 	mov	r4,r16
  809b4c:	08023480 	call	802348 <__adddf3>
  809b50:	1009883a 	mov	r4,r2
  809b54:	180b883a 	mov	r5,r3
  809b58:	1021883a 	mov	r16,r2
  809b5c:	1823883a 	mov	r17,r3
  809b60:	08117a00 	call	8117a0 <__fixdfsi>
  809b64:	000d883a 	mov	r6,zero
  809b68:	000f883a 	mov	r7,zero
  809b6c:	8009883a 	mov	r4,r16
  809b70:	880b883a 	mov	r5,r17
  809b74:	d8800d15 	stw	r2,52(sp)
  809b78:	08115980 	call	811598 <__ltdf2>
  809b7c:	10031716 	blt	r2,zero,80a7dc <_dtoa_r+0xe8c>
  809b80:	d8c00d17 	ldw	r3,52(sp)
  809b84:	00800584 	movi	r2,22
  809b88:	10c1482e 	bgeu	r2,r3,80a0ac <_dtoa_r+0x75c>
  809b8c:	01000044 	movi	r4,1
  809b90:	d9000c15 	stw	r4,48(sp)
  809b94:	bd85c83a 	sub	r2,r23,r22
  809b98:	11bfffc4 	addi	r6,r2,-1
  809b9c:	30030b16 	blt	r6,zero,80a7cc <_dtoa_r+0xe7c>
  809ba0:	d9800a15 	stw	r6,40(sp)
  809ba4:	d8001115 	stw	zero,68(sp)
  809ba8:	d8c00d17 	ldw	r3,52(sp)
  809bac:	1802ff16 	blt	r3,zero,80a7ac <_dtoa_r+0xe5c>
  809bb0:	d9000a17 	ldw	r4,40(sp)
  809bb4:	d8c00915 	stw	r3,36(sp)
  809bb8:	d8001015 	stw	zero,64(sp)
  809bbc:	20c9883a 	add	r4,r4,r3
  809bc0:	d9000a15 	stw	r4,40(sp)
  809bc4:	d9001717 	ldw	r4,92(sp)
  809bc8:	00800244 	movi	r2,9
  809bcc:	11004636 	bltu	r2,r4,809ce8 <_dtoa_r+0x398>
  809bd0:	00800144 	movi	r2,5
  809bd4:	11020416 	blt	r2,r4,80a3e8 <_dtoa_r+0xa98>
  809bd8:	04400044 	movi	r17,1
  809bdc:	d8c01717 	ldw	r3,92(sp)
  809be0:	00800144 	movi	r2,5
  809be4:	10c1ed36 	bltu	r2,r3,80a39c <_dtoa_r+0xa4c>
  809be8:	18c5883a 	add	r2,r3,r3
  809bec:	1085883a 	add	r2,r2,r2
  809bf0:	00c02074 	movhi	r3,129
  809bf4:	18e70104 	addi	r3,r3,-25596
  809bf8:	10c5883a 	add	r2,r2,r3
  809bfc:	11000017 	ldw	r4,0(r2)
  809c00:	2000683a 	jmp	r4
  809c04:	00809cf0 	cmpltui	r2,zero,627
  809c08:	00809cf0 	cmpltui	r2,zero,627
  809c0c:	0080a6f0 	cmpltui	r2,zero,667
  809c10:	0080a6c8 	cmpgei	r2,zero,667
  809c14:	0080a70c 	andi	r2,zero,668
  809c18:	0080a718 	cmpnei	r2,zero,668
  809c1c:	d9002717 	ldw	r4,156(sp)
  809c20:	0089c3c4 	movi	r2,9999
  809c24:	20800015 	stw	r2,0(r4)
  809c28:	a0001026 	beq	r20,zero,809c6c <_dtoa_r+0x31c>
  809c2c:	00c02074 	movhi	r3,129
  809c30:	18d50704 	addi	r3,r3,21532
  809c34:	d9802917 	ldw	r6,164(sp)
  809c38:	303f7926 	beq	r6,zero,809a20 <_dtoa_r+0xd0>
  809c3c:	188000c7 	ldb	r2,3(r3)
  809c40:	190000c4 	addi	r4,r3,3
  809c44:	1000101e 	bne	r2,zero,809c88 <_dtoa_r+0x338>
  809c48:	d8802917 	ldw	r2,164(sp)
  809c4c:	11000015 	stw	r4,0(r2)
  809c50:	003f7306 	br	809a20 <_dtoa_r+0xd0>
  809c54:	00a00034 	movhi	r2,32768
  809c58:	10bfffc4 	addi	r2,r2,-1
  809c5c:	00c00044 	movi	r3,1
  809c60:	88aa703a 	and	r21,r17,r2
  809c64:	90c00015 	stw	r3,0(r18)
  809c68:	003f5806 	br	8099cc <_dtoa_r+0x7c>
  809c6c:	00800434 	movhi	r2,16
  809c70:	10bfffc4 	addi	r2,r2,-1
  809c74:	a884703a 	and	r2,r21,r2
  809c78:	103fec1e 	bne	r2,zero,809c2c <_dtoa_r+0x2dc>
  809c7c:	00c02074 	movhi	r3,129
  809c80:	18d50404 	addi	r3,r3,21520
  809c84:	003feb06 	br	809c34 <_dtoa_r+0x2e4>
  809c88:	d8802917 	ldw	r2,164(sp)
  809c8c:	19000204 	addi	r4,r3,8
  809c90:	11000015 	stw	r4,0(r2)
  809c94:	003f6206 	br	809a20 <_dtoa_r+0xd0>
  809c98:	ddc00117 	ldw	r23,4(sp)
  809c9c:	d8800217 	ldw	r2,8(sp)
  809ca0:	01000804 	movi	r4,32
  809ca4:	b8c10c84 	addi	r3,r23,1074
  809ca8:	18a3883a 	add	r17,r3,r2
  809cac:	2441b80e 	bge	r4,r17,80a390 <_dtoa_r+0xa40>
  809cb0:	00c01004 	movi	r3,64
  809cb4:	1c47c83a 	sub	r3,r3,r17
  809cb8:	88bff804 	addi	r2,r17,-32
  809cbc:	a8c6983a 	sll	r3,r21,r3
  809cc0:	a084d83a 	srl	r2,r20,r2
  809cc4:	1888b03a 	or	r4,r3,r2
  809cc8:	08026140 	call	802614 <__floatunsidf>
  809ccc:	1011883a 	mov	r8,r2
  809cd0:	00bf8434 	movhi	r2,65040
  809cd4:	01000044 	movi	r4,1
  809cd8:	10d3883a 	add	r9,r2,r3
  809cdc:	8dbef344 	addi	r22,r17,-1075
  809ce0:	d9000815 	stw	r4,32(sp)
  809ce4:	003f6f06 	br	809aa4 <_dtoa_r+0x154>
  809ce8:	d8001715 	stw	zero,92(sp)
  809cec:	04400044 	movi	r17,1
  809cf0:	00bfffc4 	movi	r2,-1
  809cf4:	00c00044 	movi	r3,1
  809cf8:	d8800e15 	stw	r2,56(sp)
  809cfc:	d8002615 	stw	zero,152(sp)
  809d00:	d8800f15 	stw	r2,60(sp)
  809d04:	d8c00b15 	stw	r3,44(sp)
  809d08:	1021883a 	mov	r16,r2
  809d0c:	d8801617 	ldw	r2,88(sp)
  809d10:	10001115 	stw	zero,68(r2)
  809d14:	d8801617 	ldw	r2,88(sp)
  809d18:	11401117 	ldw	r5,68(r2)
  809d1c:	1009883a 	mov	r4,r2
  809d20:	080bd780 	call	80bd78 <_Balloc>
  809d24:	d8c01617 	ldw	r3,88(sp)
  809d28:	d8800515 	stw	r2,20(sp)
  809d2c:	18801015 	stw	r2,64(r3)
  809d30:	00800384 	movi	r2,14
  809d34:	14006836 	bltu	r2,r16,809ed8 <_dtoa_r+0x588>
  809d38:	8805003a 	cmpeq	r2,r17,zero
  809d3c:	1000661e 	bne	r2,zero,809ed8 <_dtoa_r+0x588>
  809d40:	d9000d17 	ldw	r4,52(sp)
  809d44:	0102300e 	bge	zero,r4,80a608 <_dtoa_r+0xcb8>
  809d48:	208003cc 	andi	r2,r4,15
  809d4c:	100490fa 	slli	r2,r2,3
  809d50:	2025d13a 	srai	r18,r4,4
  809d54:	00c02074 	movhi	r3,129
  809d58:	18d51804 	addi	r3,r3,21600
  809d5c:	10c5883a 	add	r2,r2,r3
  809d60:	90c0040c 	andi	r3,r18,16
  809d64:	14000017 	ldw	r16,0(r2)
  809d68:	14400117 	ldw	r17,4(r2)
  809d6c:	18036a1e 	bne	r3,zero,80ab18 <_dtoa_r+0x11c8>
  809d70:	05800084 	movi	r22,2
  809d74:	90001026 	beq	r18,zero,809db8 <_dtoa_r+0x468>
  809d78:	04c02074 	movhi	r19,129
  809d7c:	9cd54a04 	addi	r19,r19,21800
  809d80:	9080004c 	andi	r2,r18,1
  809d84:	1005003a 	cmpeq	r2,r2,zero
  809d88:	1000081e 	bne	r2,zero,809dac <_dtoa_r+0x45c>
  809d8c:	99800017 	ldw	r6,0(r19)
  809d90:	99c00117 	ldw	r7,4(r19)
  809d94:	880b883a 	mov	r5,r17
  809d98:	8009883a 	mov	r4,r16
  809d9c:	0810fb40 	call	810fb4 <__muldf3>
  809da0:	1021883a 	mov	r16,r2
  809da4:	b5800044 	addi	r22,r22,1
  809da8:	1823883a 	mov	r17,r3
  809dac:	9025d07a 	srai	r18,r18,1
  809db0:	9cc00204 	addi	r19,r19,8
  809db4:	903ff21e 	bne	r18,zero,809d80 <_dtoa_r+0x430>
  809db8:	a80b883a 	mov	r5,r21
  809dbc:	a009883a 	mov	r4,r20
  809dc0:	880f883a 	mov	r7,r17
  809dc4:	800d883a 	mov	r6,r16
  809dc8:	08023bc0 	call	8023bc <__divdf3>
  809dcc:	1029883a 	mov	r20,r2
  809dd0:	182b883a 	mov	r21,r3
  809dd4:	d8c00c17 	ldw	r3,48(sp)
  809dd8:	1805003a 	cmpeq	r2,r3,zero
  809ddc:	1000081e 	bne	r2,zero,809e00 <_dtoa_r+0x4b0>
  809de0:	0005883a 	mov	r2,zero
  809de4:	00cffc34 	movhi	r3,16368
  809de8:	180f883a 	mov	r7,r3
  809dec:	a009883a 	mov	r4,r20
  809df0:	a80b883a 	mov	r5,r21
  809df4:	100d883a 	mov	r6,r2
  809df8:	08115980 	call	811598 <__ltdf2>
  809dfc:	1003fe16 	blt	r2,zero,80adf8 <_dtoa_r+0x14a8>
  809e00:	b009883a 	mov	r4,r22
  809e04:	08116a80 	call	8116a8 <__floatsidf>
  809e08:	180b883a 	mov	r5,r3
  809e0c:	1009883a 	mov	r4,r2
  809e10:	a00d883a 	mov	r6,r20
  809e14:	a80f883a 	mov	r7,r21
  809e18:	0810fb40 	call	810fb4 <__muldf3>
  809e1c:	0011883a 	mov	r8,zero
  809e20:	02500734 	movhi	r9,16412
  809e24:	1009883a 	mov	r4,r2
  809e28:	180b883a 	mov	r5,r3
  809e2c:	480f883a 	mov	r7,r9
  809e30:	400d883a 	mov	r6,r8
  809e34:	08023480 	call	802348 <__adddf3>
  809e38:	d9000f17 	ldw	r4,60(sp)
  809e3c:	102d883a 	mov	r22,r2
  809e40:	00bf3034 	movhi	r2,64704
  809e44:	18b9883a 	add	fp,r3,r2
  809e48:	e02f883a 	mov	r23,fp
  809e4c:	20028f1e 	bne	r4,zero,80a88c <_dtoa_r+0xf3c>
  809e50:	0005883a 	mov	r2,zero
  809e54:	00d00534 	movhi	r3,16404
  809e58:	a009883a 	mov	r4,r20
  809e5c:	a80b883a 	mov	r5,r21
  809e60:	180f883a 	mov	r7,r3
  809e64:	100d883a 	mov	r6,r2
  809e68:	08022c80 	call	8022c8 <__subdf3>
  809e6c:	1009883a 	mov	r4,r2
  809e70:	e00f883a 	mov	r7,fp
  809e74:	180b883a 	mov	r5,r3
  809e78:	b00d883a 	mov	r6,r22
  809e7c:	1025883a 	mov	r18,r2
  809e80:	1827883a 	mov	r19,r3
  809e84:	08114880 	call	811488 <__gtdf2>
  809e88:	00834f16 	blt	zero,r2,80abc8 <_dtoa_r+0x1278>
  809e8c:	e0e0003c 	xorhi	r3,fp,32768
  809e90:	9009883a 	mov	r4,r18
  809e94:	980b883a 	mov	r5,r19
  809e98:	180f883a 	mov	r7,r3
  809e9c:	b00d883a 	mov	r6,r22
  809ea0:	08115980 	call	811598 <__ltdf2>
  809ea4:	1000080e 	bge	r2,zero,809ec8 <_dtoa_r+0x578>
  809ea8:	0027883a 	mov	r19,zero
  809eac:	0025883a 	mov	r18,zero
  809eb0:	d8802617 	ldw	r2,152(sp)
  809eb4:	df000517 	ldw	fp,20(sp)
  809eb8:	d8000615 	stw	zero,24(sp)
  809ebc:	0084303a 	nor	r2,zero,r2
  809ec0:	d8800d15 	stw	r2,52(sp)
  809ec4:	00019b06 	br	80a534 <_dtoa_r+0xbe4>
  809ec8:	d9801217 	ldw	r6,72(sp)
  809ecc:	d8801317 	ldw	r2,76(sp)
  809ed0:	3029883a 	mov	r20,r6
  809ed4:	102b883a 	mov	r21,r2
  809ed8:	d8c00217 	ldw	r3,8(sp)
  809edc:	18008516 	blt	r3,zero,80a0f4 <_dtoa_r+0x7a4>
  809ee0:	d9000d17 	ldw	r4,52(sp)
  809ee4:	00800384 	movi	r2,14
  809ee8:	11008216 	blt	r2,r4,80a0f4 <_dtoa_r+0x7a4>
  809eec:	200490fa 	slli	r2,r4,3
  809ef0:	d9802617 	ldw	r6,152(sp)
  809ef4:	00c02074 	movhi	r3,129
  809ef8:	18d51804 	addi	r3,r3,21600
  809efc:	10c5883a 	add	r2,r2,r3
  809f00:	14800017 	ldw	r18,0(r2)
  809f04:	14c00117 	ldw	r19,4(r2)
  809f08:	30031e16 	blt	r6,zero,80ab84 <_dtoa_r+0x1234>
  809f0c:	d9000517 	ldw	r4,20(sp)
  809f10:	d8c00f17 	ldw	r3,60(sp)
  809f14:	a823883a 	mov	r17,r21
  809f18:	a021883a 	mov	r16,r20
  809f1c:	192b883a 	add	r21,r3,r4
  809f20:	2039883a 	mov	fp,r4
  809f24:	00000f06 	br	809f64 <_dtoa_r+0x614>
  809f28:	0005883a 	mov	r2,zero
  809f2c:	00d00934 	movhi	r3,16420
  809f30:	5009883a 	mov	r4,r10
  809f34:	580b883a 	mov	r5,r11
  809f38:	180f883a 	mov	r7,r3
  809f3c:	100d883a 	mov	r6,r2
  809f40:	0810fb40 	call	810fb4 <__muldf3>
  809f44:	180b883a 	mov	r5,r3
  809f48:	000d883a 	mov	r6,zero
  809f4c:	000f883a 	mov	r7,zero
  809f50:	1009883a 	mov	r4,r2
  809f54:	1021883a 	mov	r16,r2
  809f58:	1823883a 	mov	r17,r3
  809f5c:	08114000 	call	811400 <__nedf2>
  809f60:	10004526 	beq	r2,zero,80a078 <_dtoa_r+0x728>
  809f64:	900d883a 	mov	r6,r18
  809f68:	980f883a 	mov	r7,r19
  809f6c:	8009883a 	mov	r4,r16
  809f70:	880b883a 	mov	r5,r17
  809f74:	08023bc0 	call	8023bc <__divdf3>
  809f78:	180b883a 	mov	r5,r3
  809f7c:	1009883a 	mov	r4,r2
  809f80:	08117a00 	call	8117a0 <__fixdfsi>
  809f84:	1009883a 	mov	r4,r2
  809f88:	1029883a 	mov	r20,r2
  809f8c:	08116a80 	call	8116a8 <__floatsidf>
  809f90:	180f883a 	mov	r7,r3
  809f94:	9009883a 	mov	r4,r18
  809f98:	980b883a 	mov	r5,r19
  809f9c:	100d883a 	mov	r6,r2
  809fa0:	0810fb40 	call	810fb4 <__muldf3>
  809fa4:	180f883a 	mov	r7,r3
  809fa8:	880b883a 	mov	r5,r17
  809fac:	8009883a 	mov	r4,r16
  809fb0:	100d883a 	mov	r6,r2
  809fb4:	08022c80 	call	8022c8 <__subdf3>
  809fb8:	1015883a 	mov	r10,r2
  809fbc:	a0800c04 	addi	r2,r20,48
  809fc0:	e0800005 	stb	r2,0(fp)
  809fc4:	e7000044 	addi	fp,fp,1
  809fc8:	1817883a 	mov	r11,r3
  809fcc:	e57fd61e 	bne	fp,r21,809f28 <_dtoa_r+0x5d8>
  809fd0:	500d883a 	mov	r6,r10
  809fd4:	180f883a 	mov	r7,r3
  809fd8:	5009883a 	mov	r4,r10
  809fdc:	180b883a 	mov	r5,r3
  809fe0:	08023480 	call	802348 <__adddf3>
  809fe4:	100d883a 	mov	r6,r2
  809fe8:	9009883a 	mov	r4,r18
  809fec:	980b883a 	mov	r5,r19
  809ff0:	180f883a 	mov	r7,r3
  809ff4:	1021883a 	mov	r16,r2
  809ff8:	1823883a 	mov	r17,r3
  809ffc:	08115980 	call	811598 <__ltdf2>
  80a000:	10000816 	blt	r2,zero,80a024 <_dtoa_r+0x6d4>
  80a004:	980b883a 	mov	r5,r19
  80a008:	800d883a 	mov	r6,r16
  80a00c:	880f883a 	mov	r7,r17
  80a010:	9009883a 	mov	r4,r18
  80a014:	08113780 	call	811378 <__eqdf2>
  80a018:	1000171e 	bne	r2,zero,80a078 <_dtoa_r+0x728>
  80a01c:	a080004c 	andi	r2,r20,1
  80a020:	10001526 	beq	r2,zero,80a078 <_dtoa_r+0x728>
  80a024:	d8800d17 	ldw	r2,52(sp)
  80a028:	d8800415 	stw	r2,16(sp)
  80a02c:	e009883a 	mov	r4,fp
  80a030:	213fffc4 	addi	r4,r4,-1
  80a034:	20c00007 	ldb	r3,0(r4)
  80a038:	00800e44 	movi	r2,57
  80a03c:	1880081e 	bne	r3,r2,80a060 <_dtoa_r+0x710>
  80a040:	d8800517 	ldw	r2,20(sp)
  80a044:	113ffa1e 	bne	r2,r4,80a030 <_dtoa_r+0x6e0>
  80a048:	d8c00417 	ldw	r3,16(sp)
  80a04c:	d9800517 	ldw	r6,20(sp)
  80a050:	00800c04 	movi	r2,48
  80a054:	18c00044 	addi	r3,r3,1
  80a058:	d8c00415 	stw	r3,16(sp)
  80a05c:	30800005 	stb	r2,0(r6)
  80a060:	20800003 	ldbu	r2,0(r4)
  80a064:	d8c00417 	ldw	r3,16(sp)
  80a068:	27000044 	addi	fp,r4,1
  80a06c:	10800044 	addi	r2,r2,1
  80a070:	d8c00d15 	stw	r3,52(sp)
  80a074:	20800005 	stb	r2,0(r4)
  80a078:	d9001617 	ldw	r4,88(sp)
  80a07c:	d9400717 	ldw	r5,28(sp)
  80a080:	080b7f80 	call	80b7f8 <_Bfree>
  80a084:	e0000005 	stb	zero,0(fp)
  80a088:	d9800d17 	ldw	r6,52(sp)
  80a08c:	d8c02717 	ldw	r3,156(sp)
  80a090:	d9002917 	ldw	r4,164(sp)
  80a094:	30800044 	addi	r2,r6,1
  80a098:	18800015 	stw	r2,0(r3)
  80a09c:	20029c26 	beq	r4,zero,80ab10 <_dtoa_r+0x11c0>
  80a0a0:	d8c00517 	ldw	r3,20(sp)
  80a0a4:	27000015 	stw	fp,0(r4)
  80a0a8:	003e5d06 	br	809a20 <_dtoa_r+0xd0>
  80a0ac:	d9800d17 	ldw	r6,52(sp)
  80a0b0:	00c02074 	movhi	r3,129
  80a0b4:	18d51804 	addi	r3,r3,21600
  80a0b8:	d9001217 	ldw	r4,72(sp)
  80a0bc:	300490fa 	slli	r2,r6,3
  80a0c0:	d9401317 	ldw	r5,76(sp)
  80a0c4:	10c5883a 	add	r2,r2,r3
  80a0c8:	12000017 	ldw	r8,0(r2)
  80a0cc:	12400117 	ldw	r9,4(r2)
  80a0d0:	400d883a 	mov	r6,r8
  80a0d4:	480f883a 	mov	r7,r9
  80a0d8:	08115980 	call	811598 <__ltdf2>
  80a0dc:	1000030e 	bge	r2,zero,80a0ec <_dtoa_r+0x79c>
  80a0e0:	d8800d17 	ldw	r2,52(sp)
  80a0e4:	10bfffc4 	addi	r2,r2,-1
  80a0e8:	d8800d15 	stw	r2,52(sp)
  80a0ec:	d8000c15 	stw	zero,48(sp)
  80a0f0:	003ea806 	br	809b94 <_dtoa_r+0x244>
  80a0f4:	d9000b17 	ldw	r4,44(sp)
  80a0f8:	202cc03a 	cmpne	r22,r4,zero
  80a0fc:	b000c71e 	bne	r22,zero,80a41c <_dtoa_r+0xacc>
  80a100:	dc001117 	ldw	r16,68(sp)
  80a104:	dc801017 	ldw	r18,64(sp)
  80a108:	0027883a 	mov	r19,zero
  80a10c:	04000b0e 	bge	zero,r16,80a13c <_dtoa_r+0x7ec>
  80a110:	d8c00a17 	ldw	r3,40(sp)
  80a114:	00c0090e 	bge	zero,r3,80a13c <_dtoa_r+0x7ec>
  80a118:	8005883a 	mov	r2,r16
  80a11c:	1c011316 	blt	r3,r16,80a56c <_dtoa_r+0xc1c>
  80a120:	d9000a17 	ldw	r4,40(sp)
  80a124:	d9801117 	ldw	r6,68(sp)
  80a128:	80a1c83a 	sub	r16,r16,r2
  80a12c:	2089c83a 	sub	r4,r4,r2
  80a130:	308dc83a 	sub	r6,r6,r2
  80a134:	d9000a15 	stw	r4,40(sp)
  80a138:	d9801115 	stw	r6,68(sp)
  80a13c:	d8801017 	ldw	r2,64(sp)
  80a140:	0080150e 	bge	zero,r2,80a198 <_dtoa_r+0x848>
  80a144:	d8c00b17 	ldw	r3,44(sp)
  80a148:	1805003a 	cmpeq	r2,r3,zero
  80a14c:	1001c91e 	bne	r2,zero,80a874 <_dtoa_r+0xf24>
  80a150:	04800e0e 	bge	zero,r18,80a18c <_dtoa_r+0x83c>
  80a154:	d9001617 	ldw	r4,88(sp)
  80a158:	980b883a 	mov	r5,r19
  80a15c:	900d883a 	mov	r6,r18
  80a160:	080c6440 	call	80c644 <__pow5mult>
  80a164:	d9001617 	ldw	r4,88(sp)
  80a168:	d9800717 	ldw	r6,28(sp)
  80a16c:	100b883a 	mov	r5,r2
  80a170:	1027883a 	mov	r19,r2
  80a174:	080c2880 	call	80c288 <__multiply>
  80a178:	d9001617 	ldw	r4,88(sp)
  80a17c:	d9400717 	ldw	r5,28(sp)
  80a180:	1023883a 	mov	r17,r2
  80a184:	080b7f80 	call	80b7f8 <_Bfree>
  80a188:	dc400715 	stw	r17,28(sp)
  80a18c:	d9001017 	ldw	r4,64(sp)
  80a190:	248dc83a 	sub	r6,r4,r18
  80a194:	30010e1e 	bne	r6,zero,80a5d0 <_dtoa_r+0xc80>
  80a198:	d9001617 	ldw	r4,88(sp)
  80a19c:	04400044 	movi	r17,1
  80a1a0:	880b883a 	mov	r5,r17
  80a1a4:	080c4dc0 	call	80c4dc <__i2b>
  80a1a8:	d9800917 	ldw	r6,36(sp)
  80a1ac:	1025883a 	mov	r18,r2
  80a1b0:	0180040e 	bge	zero,r6,80a1c4 <_dtoa_r+0x874>
  80a1b4:	d9001617 	ldw	r4,88(sp)
  80a1b8:	100b883a 	mov	r5,r2
  80a1bc:	080c6440 	call	80c644 <__pow5mult>
  80a1c0:	1025883a 	mov	r18,r2
  80a1c4:	d8801717 	ldw	r2,92(sp)
  80a1c8:	8880f30e 	bge	r17,r2,80a598 <_dtoa_r+0xc48>
  80a1cc:	0023883a 	mov	r17,zero
  80a1d0:	d9800917 	ldw	r6,36(sp)
  80a1d4:	30019e1e 	bne	r6,zero,80a850 <_dtoa_r+0xf00>
  80a1d8:	00c00044 	movi	r3,1
  80a1dc:	d9000a17 	ldw	r4,40(sp)
  80a1e0:	20c5883a 	add	r2,r4,r3
  80a1e4:	10c007cc 	andi	r3,r2,31
  80a1e8:	1800841e 	bne	r3,zero,80a3fc <_dtoa_r+0xaac>
  80a1ec:	00800704 	movi	r2,28
  80a1f0:	d9000a17 	ldw	r4,40(sp)
  80a1f4:	d9801117 	ldw	r6,68(sp)
  80a1f8:	80a1883a 	add	r16,r16,r2
  80a1fc:	2089883a 	add	r4,r4,r2
  80a200:	308d883a 	add	r6,r6,r2
  80a204:	d9000a15 	stw	r4,40(sp)
  80a208:	d9801115 	stw	r6,68(sp)
  80a20c:	d8801117 	ldw	r2,68(sp)
  80a210:	0080050e 	bge	zero,r2,80a228 <_dtoa_r+0x8d8>
  80a214:	d9400717 	ldw	r5,28(sp)
  80a218:	d9001617 	ldw	r4,88(sp)
  80a21c:	100d883a 	mov	r6,r2
  80a220:	080c13c0 	call	80c13c <__lshift>
  80a224:	d8800715 	stw	r2,28(sp)
  80a228:	d8c00a17 	ldw	r3,40(sp)
  80a22c:	00c0050e 	bge	zero,r3,80a244 <_dtoa_r+0x8f4>
  80a230:	d9001617 	ldw	r4,88(sp)
  80a234:	900b883a 	mov	r5,r18
  80a238:	180d883a 	mov	r6,r3
  80a23c:	080c13c0 	call	80c13c <__lshift>
  80a240:	1025883a 	mov	r18,r2
  80a244:	d9000c17 	ldw	r4,48(sp)
  80a248:	2005003a 	cmpeq	r2,r4,zero
  80a24c:	10016f26 	beq	r2,zero,80a80c <_dtoa_r+0xebc>
  80a250:	d9000f17 	ldw	r4,60(sp)
  80a254:	0102170e 	bge	zero,r4,80aab4 <_dtoa_r+0x1164>
  80a258:	d9800b17 	ldw	r6,44(sp)
  80a25c:	3005003a 	cmpeq	r2,r6,zero
  80a260:	1000881e 	bne	r2,zero,80a484 <_dtoa_r+0xb34>
  80a264:	0400050e 	bge	zero,r16,80a27c <_dtoa_r+0x92c>
  80a268:	d9001617 	ldw	r4,88(sp)
  80a26c:	980b883a 	mov	r5,r19
  80a270:	800d883a 	mov	r6,r16
  80a274:	080c13c0 	call	80c13c <__lshift>
  80a278:	1027883a 	mov	r19,r2
  80a27c:	8804c03a 	cmpne	r2,r17,zero
  80a280:	1002541e 	bne	r2,zero,80abd4 <_dtoa_r+0x1284>
  80a284:	980b883a 	mov	r5,r19
  80a288:	dd800517 	ldw	r22,20(sp)
  80a28c:	dcc00615 	stw	r19,24(sp)
  80a290:	a700004c 	andi	fp,r20,1
  80a294:	2827883a 	mov	r19,r5
  80a298:	d9000717 	ldw	r4,28(sp)
  80a29c:	900b883a 	mov	r5,r18
  80a2a0:	080970c0 	call	80970c <quorem>
  80a2a4:	d9000717 	ldw	r4,28(sp)
  80a2a8:	d9400617 	ldw	r5,24(sp)
  80a2ac:	1023883a 	mov	r17,r2
  80a2b0:	8dc00c04 	addi	r23,r17,48
  80a2b4:	080b9540 	call	80b954 <__mcmp>
  80a2b8:	d9001617 	ldw	r4,88(sp)
  80a2bc:	900b883a 	mov	r5,r18
  80a2c0:	980d883a 	mov	r6,r19
  80a2c4:	1029883a 	mov	r20,r2
  80a2c8:	080bfb00 	call	80bfb0 <__mdiff>
  80a2cc:	102b883a 	mov	r21,r2
  80a2d0:	10800317 	ldw	r2,12(r2)
  80a2d4:	1001281e 	bne	r2,zero,80a778 <_dtoa_r+0xe28>
  80a2d8:	d9000717 	ldw	r4,28(sp)
  80a2dc:	a80b883a 	mov	r5,r21
  80a2e0:	080b9540 	call	80b954 <__mcmp>
  80a2e4:	d9001617 	ldw	r4,88(sp)
  80a2e8:	1021883a 	mov	r16,r2
  80a2ec:	a80b883a 	mov	r5,r21
  80a2f0:	080b7f80 	call	80b7f8 <_Bfree>
  80a2f4:	8000041e 	bne	r16,zero,80a308 <_dtoa_r+0x9b8>
  80a2f8:	d8801717 	ldw	r2,92(sp)
  80a2fc:	1000021e 	bne	r2,zero,80a308 <_dtoa_r+0x9b8>
  80a300:	e004c03a 	cmpne	r2,fp,zero
  80a304:	10011726 	beq	r2,zero,80a764 <_dtoa_r+0xe14>
  80a308:	a0010616 	blt	r20,zero,80a724 <_dtoa_r+0xdd4>
  80a30c:	a000041e 	bne	r20,zero,80a320 <_dtoa_r+0x9d0>
  80a310:	d8c01717 	ldw	r3,92(sp)
  80a314:	1800021e 	bne	r3,zero,80a320 <_dtoa_r+0x9d0>
  80a318:	e004c03a 	cmpne	r2,fp,zero
  80a31c:	10010126 	beq	r2,zero,80a724 <_dtoa_r+0xdd4>
  80a320:	04023d16 	blt	zero,r16,80ac18 <_dtoa_r+0x12c8>
  80a324:	b5c00005 	stb	r23,0(r22)
  80a328:	d9800517 	ldw	r6,20(sp)
  80a32c:	d9000f17 	ldw	r4,60(sp)
  80a330:	b5800044 	addi	r22,r22,1
  80a334:	3105883a 	add	r2,r6,r4
  80a338:	b0806526 	beq	r22,r2,80a4d0 <_dtoa_r+0xb80>
  80a33c:	d9400717 	ldw	r5,28(sp)
  80a340:	d9001617 	ldw	r4,88(sp)
  80a344:	01800284 	movi	r6,10
  80a348:	000f883a 	mov	r7,zero
  80a34c:	080c5180 	call	80c518 <__multadd>
  80a350:	d8800715 	stw	r2,28(sp)
  80a354:	d8800617 	ldw	r2,24(sp)
  80a358:	14c10c26 	beq	r2,r19,80a78c <_dtoa_r+0xe3c>
  80a35c:	d9400617 	ldw	r5,24(sp)
  80a360:	d9001617 	ldw	r4,88(sp)
  80a364:	01800284 	movi	r6,10
  80a368:	000f883a 	mov	r7,zero
  80a36c:	080c5180 	call	80c518 <__multadd>
  80a370:	d9001617 	ldw	r4,88(sp)
  80a374:	980b883a 	mov	r5,r19
  80a378:	01800284 	movi	r6,10
  80a37c:	000f883a 	mov	r7,zero
  80a380:	d8800615 	stw	r2,24(sp)
  80a384:	080c5180 	call	80c518 <__multadd>
  80a388:	1027883a 	mov	r19,r2
  80a38c:	003fc206 	br	80a298 <_dtoa_r+0x948>
  80a390:	2445c83a 	sub	r2,r4,r17
  80a394:	a088983a 	sll	r4,r20,r2
  80a398:	003e4b06 	br	809cc8 <_dtoa_r+0x378>
  80a39c:	01bfffc4 	movi	r6,-1
  80a3a0:	00800044 	movi	r2,1
  80a3a4:	d9800e15 	stw	r6,56(sp)
  80a3a8:	d9800f15 	stw	r6,60(sp)
  80a3ac:	d8800b15 	stw	r2,44(sp)
  80a3b0:	d8c01617 	ldw	r3,88(sp)
  80a3b4:	008005c4 	movi	r2,23
  80a3b8:	18001115 	stw	zero,68(r3)
  80a3bc:	1580082e 	bgeu	r2,r22,80a3e0 <_dtoa_r+0xa90>
  80a3c0:	00c00104 	movi	r3,4
  80a3c4:	0009883a 	mov	r4,zero
  80a3c8:	18c7883a 	add	r3,r3,r3
  80a3cc:	18800504 	addi	r2,r3,20
  80a3d0:	21000044 	addi	r4,r4,1
  80a3d4:	b0bffc2e 	bgeu	r22,r2,80a3c8 <_dtoa_r+0xa78>
  80a3d8:	d9801617 	ldw	r6,88(sp)
  80a3dc:	31001115 	stw	r4,68(r6)
  80a3e0:	dc000f17 	ldw	r16,60(sp)
  80a3e4:	003e4b06 	br	809d14 <_dtoa_r+0x3c4>
  80a3e8:	d9801717 	ldw	r6,92(sp)
  80a3ec:	0023883a 	mov	r17,zero
  80a3f0:	31bfff04 	addi	r6,r6,-4
  80a3f4:	d9801715 	stw	r6,92(sp)
  80a3f8:	003df806 	br	809bdc <_dtoa_r+0x28c>
  80a3fc:	00800804 	movi	r2,32
  80a400:	10c9c83a 	sub	r4,r2,r3
  80a404:	00c00104 	movi	r3,4
  80a408:	19005a16 	blt	r3,r4,80a574 <_dtoa_r+0xc24>
  80a40c:	008000c4 	movi	r2,3
  80a410:	113f7e16 	blt	r2,r4,80a20c <_dtoa_r+0x8bc>
  80a414:	20800704 	addi	r2,r4,28
  80a418:	003f7506 	br	80a1f0 <_dtoa_r+0x8a0>
  80a41c:	d9801717 	ldw	r6,92(sp)
  80a420:	00800044 	movi	r2,1
  80a424:	1180a10e 	bge	r2,r6,80a6ac <_dtoa_r+0xd5c>
  80a428:	d9800f17 	ldw	r6,60(sp)
  80a42c:	d8c01017 	ldw	r3,64(sp)
  80a430:	30bfffc4 	addi	r2,r6,-1
  80a434:	1881c616 	blt	r3,r2,80ab50 <_dtoa_r+0x1200>
  80a438:	18a5c83a 	sub	r18,r3,r2
  80a43c:	d8800f17 	ldw	r2,60(sp)
  80a440:	10026216 	blt	r2,zero,80adcc <_dtoa_r+0x147c>
  80a444:	dc001117 	ldw	r16,68(sp)
  80a448:	1007883a 	mov	r3,r2
  80a44c:	d9800a17 	ldw	r6,40(sp)
  80a450:	d8801117 	ldw	r2,68(sp)
  80a454:	d9001617 	ldw	r4,88(sp)
  80a458:	30cd883a 	add	r6,r6,r3
  80a45c:	10c5883a 	add	r2,r2,r3
  80a460:	01400044 	movi	r5,1
  80a464:	d9800a15 	stw	r6,40(sp)
  80a468:	d8801115 	stw	r2,68(sp)
  80a46c:	080c4dc0 	call	80c4dc <__i2b>
  80a470:	1027883a 	mov	r19,r2
  80a474:	003f2506 	br	80a10c <_dtoa_r+0x7bc>
  80a478:	00c02074 	movhi	r3,129
  80a47c:	18d4f104 	addi	r3,r3,21444
  80a480:	003d6706 	br	809a20 <_dtoa_r+0xd0>
  80a484:	dd800517 	ldw	r22,20(sp)
  80a488:	04000044 	movi	r16,1
  80a48c:	00000706 	br	80a4ac <_dtoa_r+0xb5c>
  80a490:	d9400717 	ldw	r5,28(sp)
  80a494:	d9001617 	ldw	r4,88(sp)
  80a498:	01800284 	movi	r6,10
  80a49c:	000f883a 	mov	r7,zero
  80a4a0:	080c5180 	call	80c518 <__multadd>
  80a4a4:	d8800715 	stw	r2,28(sp)
  80a4a8:	84000044 	addi	r16,r16,1
  80a4ac:	d9000717 	ldw	r4,28(sp)
  80a4b0:	900b883a 	mov	r5,r18
  80a4b4:	080970c0 	call	80970c <quorem>
  80a4b8:	15c00c04 	addi	r23,r2,48
  80a4bc:	b5c00005 	stb	r23,0(r22)
  80a4c0:	d8c00f17 	ldw	r3,60(sp)
  80a4c4:	b5800044 	addi	r22,r22,1
  80a4c8:	80fff116 	blt	r16,r3,80a490 <_dtoa_r+0xb40>
  80a4cc:	d8000615 	stw	zero,24(sp)
  80a4d0:	d9400717 	ldw	r5,28(sp)
  80a4d4:	d9001617 	ldw	r4,88(sp)
  80a4d8:	01800044 	movi	r6,1
  80a4dc:	080c13c0 	call	80c13c <__lshift>
  80a4e0:	1009883a 	mov	r4,r2
  80a4e4:	900b883a 	mov	r5,r18
  80a4e8:	d8800715 	stw	r2,28(sp)
  80a4ec:	080b9540 	call	80b954 <__mcmp>
  80a4f0:	00803c0e 	bge	zero,r2,80a5e4 <_dtoa_r+0xc94>
  80a4f4:	b009883a 	mov	r4,r22
  80a4f8:	213fffc4 	addi	r4,r4,-1
  80a4fc:	21400003 	ldbu	r5,0(r4)
  80a500:	00800e44 	movi	r2,57
  80a504:	28c03fcc 	andi	r3,r5,255
  80a508:	18c0201c 	xori	r3,r3,128
  80a50c:	18ffe004 	addi	r3,r3,-128
  80a510:	1881981e 	bne	r3,r2,80ab74 <_dtoa_r+0x1224>
  80a514:	d9800517 	ldw	r6,20(sp)
  80a518:	21bff71e 	bne	r4,r6,80a4f8 <_dtoa_r+0xba8>
  80a51c:	d8800d17 	ldw	r2,52(sp)
  80a520:	37000044 	addi	fp,r6,1
  80a524:	10800044 	addi	r2,r2,1
  80a528:	d8800d15 	stw	r2,52(sp)
  80a52c:	00800c44 	movi	r2,49
  80a530:	30800005 	stb	r2,0(r6)
  80a534:	d9001617 	ldw	r4,88(sp)
  80a538:	900b883a 	mov	r5,r18
  80a53c:	080b7f80 	call	80b7f8 <_Bfree>
  80a540:	983ecd26 	beq	r19,zero,80a078 <_dtoa_r+0x728>
  80a544:	d8c00617 	ldw	r3,24(sp)
  80a548:	18000426 	beq	r3,zero,80a55c <_dtoa_r+0xc0c>
  80a54c:	1cc00326 	beq	r3,r19,80a55c <_dtoa_r+0xc0c>
  80a550:	d9001617 	ldw	r4,88(sp)
  80a554:	180b883a 	mov	r5,r3
  80a558:	080b7f80 	call	80b7f8 <_Bfree>
  80a55c:	d9001617 	ldw	r4,88(sp)
  80a560:	980b883a 	mov	r5,r19
  80a564:	080b7f80 	call	80b7f8 <_Bfree>
  80a568:	003ec306 	br	80a078 <_dtoa_r+0x728>
  80a56c:	1805883a 	mov	r2,r3
  80a570:	003eeb06 	br	80a120 <_dtoa_r+0x7d0>
  80a574:	d9800a17 	ldw	r6,40(sp)
  80a578:	d8c01117 	ldw	r3,68(sp)
  80a57c:	20bfff04 	addi	r2,r4,-4
  80a580:	308d883a 	add	r6,r6,r2
  80a584:	1887883a 	add	r3,r3,r2
  80a588:	80a1883a 	add	r16,r16,r2
  80a58c:	d9800a15 	stw	r6,40(sp)
  80a590:	d8c01115 	stw	r3,68(sp)
  80a594:	003f1d06 	br	80a20c <_dtoa_r+0x8bc>
  80a598:	a03f0c1e 	bne	r20,zero,80a1cc <_dtoa_r+0x87c>
  80a59c:	00800434 	movhi	r2,16
  80a5a0:	10bfffc4 	addi	r2,r2,-1
  80a5a4:	a884703a 	and	r2,r21,r2
  80a5a8:	103f081e 	bne	r2,zero,80a1cc <_dtoa_r+0x87c>
  80a5ac:	a89ffc2c 	andhi	r2,r21,32752
  80a5b0:	103f0626 	beq	r2,zero,80a1cc <_dtoa_r+0x87c>
  80a5b4:	d8c01117 	ldw	r3,68(sp)
  80a5b8:	d9000a17 	ldw	r4,40(sp)
  80a5bc:	18c00044 	addi	r3,r3,1
  80a5c0:	21000044 	addi	r4,r4,1
  80a5c4:	d8c01115 	stw	r3,68(sp)
  80a5c8:	d9000a15 	stw	r4,40(sp)
  80a5cc:	003f0006 	br	80a1d0 <_dtoa_r+0x880>
  80a5d0:	d9400717 	ldw	r5,28(sp)
  80a5d4:	d9001617 	ldw	r4,88(sp)
  80a5d8:	080c6440 	call	80c644 <__pow5mult>
  80a5dc:	d8800715 	stw	r2,28(sp)
  80a5e0:	003eed06 	br	80a198 <_dtoa_r+0x848>
  80a5e4:	1000021e 	bne	r2,zero,80a5f0 <_dtoa_r+0xca0>
  80a5e8:	b880004c 	andi	r2,r23,1
  80a5ec:	103fc11e 	bne	r2,zero,80a4f4 <_dtoa_r+0xba4>
  80a5f0:	b5bfffc4 	addi	r22,r22,-1
  80a5f4:	b0c00007 	ldb	r3,0(r22)
  80a5f8:	00800c04 	movi	r2,48
  80a5fc:	18bffc26 	beq	r3,r2,80a5f0 <_dtoa_r+0xca0>
  80a600:	b7000044 	addi	fp,r22,1
  80a604:	003fcb06 	br	80a534 <_dtoa_r+0xbe4>
  80a608:	d9800d17 	ldw	r6,52(sp)
  80a60c:	018fc83a 	sub	r7,zero,r6
  80a610:	3801f726 	beq	r7,zero,80adf0 <_dtoa_r+0x14a0>
  80a614:	398003cc 	andi	r6,r7,15
  80a618:	300c90fa 	slli	r6,r6,3
  80a61c:	01402074 	movhi	r5,129
  80a620:	29551804 	addi	r5,r5,21600
  80a624:	d9001217 	ldw	r4,72(sp)
  80a628:	314d883a 	add	r6,r6,r5
  80a62c:	30c00117 	ldw	r3,4(r6)
  80a630:	30800017 	ldw	r2,0(r6)
  80a634:	d9401317 	ldw	r5,76(sp)
  80a638:	3821d13a 	srai	r16,r7,4
  80a63c:	100d883a 	mov	r6,r2
  80a640:	180f883a 	mov	r7,r3
  80a644:	0810fb40 	call	810fb4 <__muldf3>
  80a648:	1011883a 	mov	r8,r2
  80a64c:	1813883a 	mov	r9,r3
  80a650:	1029883a 	mov	r20,r2
  80a654:	182b883a 	mov	r21,r3
  80a658:	8001e526 	beq	r16,zero,80adf0 <_dtoa_r+0x14a0>
  80a65c:	05800084 	movi	r22,2
  80a660:	04402074 	movhi	r17,129
  80a664:	8c554a04 	addi	r17,r17,21800
  80a668:	8080004c 	andi	r2,r16,1
  80a66c:	1005003a 	cmpeq	r2,r2,zero
  80a670:	1000081e 	bne	r2,zero,80a694 <_dtoa_r+0xd44>
  80a674:	89800017 	ldw	r6,0(r17)
  80a678:	89c00117 	ldw	r7,4(r17)
  80a67c:	480b883a 	mov	r5,r9
  80a680:	4009883a 	mov	r4,r8
  80a684:	0810fb40 	call	810fb4 <__muldf3>
  80a688:	1011883a 	mov	r8,r2
  80a68c:	b5800044 	addi	r22,r22,1
  80a690:	1813883a 	mov	r9,r3
  80a694:	8021d07a 	srai	r16,r16,1
  80a698:	8c400204 	addi	r17,r17,8
  80a69c:	803ff21e 	bne	r16,zero,80a668 <_dtoa_r+0xd18>
  80a6a0:	4029883a 	mov	r20,r8
  80a6a4:	482b883a 	mov	r21,r9
  80a6a8:	003dca06 	br	809dd4 <_dtoa_r+0x484>
  80a6ac:	d9000817 	ldw	r4,32(sp)
  80a6b0:	2005003a 	cmpeq	r2,r4,zero
  80a6b4:	1001f61e 	bne	r2,zero,80ae90 <_dtoa_r+0x1540>
  80a6b8:	dc001117 	ldw	r16,68(sp)
  80a6bc:	dc801017 	ldw	r18,64(sp)
  80a6c0:	18c10cc4 	addi	r3,r3,1075
  80a6c4:	003f6106 	br	80a44c <_dtoa_r+0xafc>
  80a6c8:	d8000b15 	stw	zero,44(sp)
  80a6cc:	d9802617 	ldw	r6,152(sp)
  80a6d0:	d8c00d17 	ldw	r3,52(sp)
  80a6d4:	30800044 	addi	r2,r6,1
  80a6d8:	18ad883a 	add	r22,r3,r2
  80a6dc:	b13fffc4 	addi	r4,r22,-1
  80a6e0:	d9000e15 	stw	r4,56(sp)
  80a6e4:	0581f60e 	bge	zero,r22,80aec0 <_dtoa_r+0x1570>
  80a6e8:	dd800f15 	stw	r22,60(sp)
  80a6ec:	003f3006 	br	80a3b0 <_dtoa_r+0xa60>
  80a6f0:	d8000b15 	stw	zero,44(sp)
  80a6f4:	d9002617 	ldw	r4,152(sp)
  80a6f8:	0101eb0e 	bge	zero,r4,80aea8 <_dtoa_r+0x1558>
  80a6fc:	202d883a 	mov	r22,r4
  80a700:	d9000e15 	stw	r4,56(sp)
  80a704:	d9000f15 	stw	r4,60(sp)
  80a708:	003f2906 	br	80a3b0 <_dtoa_r+0xa60>
  80a70c:	01800044 	movi	r6,1
  80a710:	d9800b15 	stw	r6,44(sp)
  80a714:	003ff706 	br	80a6f4 <_dtoa_r+0xda4>
  80a718:	01000044 	movi	r4,1
  80a71c:	d9000b15 	stw	r4,44(sp)
  80a720:	003fea06 	br	80a6cc <_dtoa_r+0xd7c>
  80a724:	04000c0e 	bge	zero,r16,80a758 <_dtoa_r+0xe08>
  80a728:	d9400717 	ldw	r5,28(sp)
  80a72c:	d9001617 	ldw	r4,88(sp)
  80a730:	01800044 	movi	r6,1
  80a734:	080c13c0 	call	80c13c <__lshift>
  80a738:	1009883a 	mov	r4,r2
  80a73c:	900b883a 	mov	r5,r18
  80a740:	d8800715 	stw	r2,28(sp)
  80a744:	080b9540 	call	80b954 <__mcmp>
  80a748:	0081e00e 	bge	zero,r2,80aecc <_dtoa_r+0x157c>
  80a74c:	bdc00044 	addi	r23,r23,1
  80a750:	00800e84 	movi	r2,58
  80a754:	b881a226 	beq	r23,r2,80ade0 <_dtoa_r+0x1490>
  80a758:	b7000044 	addi	fp,r22,1
  80a75c:	b5c00005 	stb	r23,0(r22)
  80a760:	003f7406 	br	80a534 <_dtoa_r+0xbe4>
  80a764:	00800e44 	movi	r2,57
  80a768:	b8819d26 	beq	r23,r2,80ade0 <_dtoa_r+0x1490>
  80a76c:	053ffa0e 	bge	zero,r20,80a758 <_dtoa_r+0xe08>
  80a770:	8dc00c44 	addi	r23,r17,49
  80a774:	003ff806 	br	80a758 <_dtoa_r+0xe08>
  80a778:	d9001617 	ldw	r4,88(sp)
  80a77c:	a80b883a 	mov	r5,r21
  80a780:	04000044 	movi	r16,1
  80a784:	080b7f80 	call	80b7f8 <_Bfree>
  80a788:	003edf06 	br	80a308 <_dtoa_r+0x9b8>
  80a78c:	d9001617 	ldw	r4,88(sp)
  80a790:	980b883a 	mov	r5,r19
  80a794:	01800284 	movi	r6,10
  80a798:	000f883a 	mov	r7,zero
  80a79c:	080c5180 	call	80c518 <__multadd>
  80a7a0:	1027883a 	mov	r19,r2
  80a7a4:	d8800615 	stw	r2,24(sp)
  80a7a8:	003ebb06 	br	80a298 <_dtoa_r+0x948>
  80a7ac:	d9801117 	ldw	r6,68(sp)
  80a7b0:	d8800d17 	ldw	r2,52(sp)
  80a7b4:	d8000915 	stw	zero,36(sp)
  80a7b8:	308dc83a 	sub	r6,r6,r2
  80a7bc:	0087c83a 	sub	r3,zero,r2
  80a7c0:	d9801115 	stw	r6,68(sp)
  80a7c4:	d8c01015 	stw	r3,64(sp)
  80a7c8:	003cfe06 	br	809bc4 <_dtoa_r+0x274>
  80a7cc:	018dc83a 	sub	r6,zero,r6
  80a7d0:	d9801115 	stw	r6,68(sp)
  80a7d4:	d8000a15 	stw	zero,40(sp)
  80a7d8:	003cf306 	br	809ba8 <_dtoa_r+0x258>
  80a7dc:	d9000d17 	ldw	r4,52(sp)
  80a7e0:	08116a80 	call	8116a8 <__floatsidf>
  80a7e4:	880b883a 	mov	r5,r17
  80a7e8:	8009883a 	mov	r4,r16
  80a7ec:	180f883a 	mov	r7,r3
  80a7f0:	100d883a 	mov	r6,r2
  80a7f4:	08114000 	call	811400 <__nedf2>
  80a7f8:	103ce126 	beq	r2,zero,809b80 <_dtoa_r+0x230>
  80a7fc:	d9800d17 	ldw	r6,52(sp)
  80a800:	31bfffc4 	addi	r6,r6,-1
  80a804:	d9800d15 	stw	r6,52(sp)
  80a808:	003cdd06 	br	809b80 <_dtoa_r+0x230>
  80a80c:	d9000717 	ldw	r4,28(sp)
  80a810:	900b883a 	mov	r5,r18
  80a814:	080b9540 	call	80b954 <__mcmp>
  80a818:	103e8d0e 	bge	r2,zero,80a250 <_dtoa_r+0x900>
  80a81c:	d9400717 	ldw	r5,28(sp)
  80a820:	d9001617 	ldw	r4,88(sp)
  80a824:	01800284 	movi	r6,10
  80a828:	000f883a 	mov	r7,zero
  80a82c:	080c5180 	call	80c518 <__multadd>
  80a830:	d9800d17 	ldw	r6,52(sp)
  80a834:	d8800715 	stw	r2,28(sp)
  80a838:	31bfffc4 	addi	r6,r6,-1
  80a83c:	d9800d15 	stw	r6,52(sp)
  80a840:	b001a71e 	bne	r22,zero,80aee0 <_dtoa_r+0x1590>
  80a844:	d8800e17 	ldw	r2,56(sp)
  80a848:	d8800f15 	stw	r2,60(sp)
  80a84c:	003e8006 	br	80a250 <_dtoa_r+0x900>
  80a850:	90800417 	ldw	r2,16(r18)
  80a854:	1085883a 	add	r2,r2,r2
  80a858:	1085883a 	add	r2,r2,r2
  80a85c:	1485883a 	add	r2,r2,r18
  80a860:	11000417 	ldw	r4,16(r2)
  80a864:	080b8200 	call	80b820 <__hi0bits>
  80a868:	00c00804 	movi	r3,32
  80a86c:	1887c83a 	sub	r3,r3,r2
  80a870:	003e5a06 	br	80a1dc <_dtoa_r+0x88c>
  80a874:	d9400717 	ldw	r5,28(sp)
  80a878:	d9801017 	ldw	r6,64(sp)
  80a87c:	d9001617 	ldw	r4,88(sp)
  80a880:	080c6440 	call	80c644 <__pow5mult>
  80a884:	d8800715 	stw	r2,28(sp)
  80a888:	003e4306 	br	80a198 <_dtoa_r+0x848>
  80a88c:	d9800f17 	ldw	r6,60(sp)
  80a890:	d8800d17 	ldw	r2,52(sp)
  80a894:	d9800315 	stw	r6,12(sp)
  80a898:	d8800415 	stw	r2,16(sp)
  80a89c:	d8c00b17 	ldw	r3,44(sp)
  80a8a0:	1805003a 	cmpeq	r2,r3,zero
  80a8a4:	1000e21e 	bne	r2,zero,80ac30 <_dtoa_r+0x12e0>
  80a8a8:	d9000317 	ldw	r4,12(sp)
  80a8ac:	0005883a 	mov	r2,zero
  80a8b0:	00cff834 	movhi	r3,16352
  80a8b4:	200c90fa 	slli	r6,r4,3
  80a8b8:	01002074 	movhi	r4,129
  80a8bc:	21151804 	addi	r4,r4,21600
  80a8c0:	180b883a 	mov	r5,r3
  80a8c4:	310d883a 	add	r6,r6,r4
  80a8c8:	327fff17 	ldw	r9,-4(r6)
  80a8cc:	323ffe17 	ldw	r8,-8(r6)
  80a8d0:	1009883a 	mov	r4,r2
  80a8d4:	480f883a 	mov	r7,r9
  80a8d8:	400d883a 	mov	r6,r8
  80a8dc:	08023bc0 	call	8023bc <__divdf3>
  80a8e0:	180b883a 	mov	r5,r3
  80a8e4:	b00d883a 	mov	r6,r22
  80a8e8:	b80f883a 	mov	r7,r23
  80a8ec:	1009883a 	mov	r4,r2
  80a8f0:	08022c80 	call	8022c8 <__subdf3>
  80a8f4:	a80b883a 	mov	r5,r21
  80a8f8:	a009883a 	mov	r4,r20
  80a8fc:	d8c01915 	stw	r3,100(sp)
  80a900:	d8801815 	stw	r2,96(sp)
  80a904:	08117a00 	call	8117a0 <__fixdfsi>
  80a908:	1009883a 	mov	r4,r2
  80a90c:	1027883a 	mov	r19,r2
  80a910:	08116a80 	call	8116a8 <__floatsidf>
  80a914:	a80b883a 	mov	r5,r21
  80a918:	a009883a 	mov	r4,r20
  80a91c:	180f883a 	mov	r7,r3
  80a920:	100d883a 	mov	r6,r2
  80a924:	08022c80 	call	8022c8 <__subdf3>
  80a928:	d9801817 	ldw	r6,96(sp)
  80a92c:	1823883a 	mov	r17,r3
  80a930:	d8801415 	stw	r2,80(sp)
  80a934:	302d883a 	mov	r22,r6
  80a938:	d9800517 	ldw	r6,20(sp)
  80a93c:	9cc00c04 	addi	r19,r19,48
  80a940:	dc401515 	stw	r17,84(sp)
  80a944:	d8c01917 	ldw	r3,100(sp)
  80a948:	34c00005 	stb	r19,0(r6)
  80a94c:	d8800517 	ldw	r2,20(sp)
  80a950:	d9401917 	ldw	r5,100(sp)
  80a954:	d9801417 	ldw	r6,80(sp)
  80a958:	b009883a 	mov	r4,r22
  80a95c:	880f883a 	mov	r7,r17
  80a960:	182f883a 	mov	r23,r3
  80a964:	17000044 	addi	fp,r2,1
  80a968:	08114880 	call	811488 <__gtdf2>
  80a96c:	00804e16 	blt	zero,r2,80aaa8 <_dtoa_r+0x1158>
  80a970:	d9801417 	ldw	r6,80(sp)
  80a974:	0005883a 	mov	r2,zero
  80a978:	00cffc34 	movhi	r3,16368
  80a97c:	180b883a 	mov	r5,r3
  80a980:	880f883a 	mov	r7,r17
  80a984:	1009883a 	mov	r4,r2
  80a988:	08022c80 	call	8022c8 <__subdf3>
  80a98c:	d9401917 	ldw	r5,100(sp)
  80a990:	180f883a 	mov	r7,r3
  80a994:	b009883a 	mov	r4,r22
  80a998:	100d883a 	mov	r6,r2
  80a99c:	08114880 	call	811488 <__gtdf2>
  80a9a0:	00bda216 	blt	zero,r2,80a02c <_dtoa_r+0x6dc>
  80a9a4:	d8c00317 	ldw	r3,12(sp)
  80a9a8:	00800044 	movi	r2,1
  80a9ac:	10c01216 	blt	r2,r3,80a9f8 <_dtoa_r+0x10a8>
  80a9b0:	003d4506 	br	809ec8 <_dtoa_r+0x578>
  80a9b4:	d9801417 	ldw	r6,80(sp)
  80a9b8:	0005883a 	mov	r2,zero
  80a9bc:	00cffc34 	movhi	r3,16368
  80a9c0:	180b883a 	mov	r5,r3
  80a9c4:	880f883a 	mov	r7,r17
  80a9c8:	1009883a 	mov	r4,r2
  80a9cc:	08022c80 	call	8022c8 <__subdf3>
  80a9d0:	d9c01b17 	ldw	r7,108(sp)
  80a9d4:	180b883a 	mov	r5,r3
  80a9d8:	1009883a 	mov	r4,r2
  80a9dc:	b00d883a 	mov	r6,r22
  80a9e0:	08115980 	call	811598 <__ltdf2>
  80a9e4:	103d9116 	blt	r2,zero,80a02c <_dtoa_r+0x6dc>
  80a9e8:	d9800517 	ldw	r6,20(sp)
  80a9ec:	d9000317 	ldw	r4,12(sp)
  80a9f0:	3105883a 	add	r2,r6,r4
  80a9f4:	e0bd3426 	beq	fp,r2,809ec8 <_dtoa_r+0x578>
  80a9f8:	04500934 	movhi	r17,16420
  80a9fc:	0021883a 	mov	r16,zero
  80aa00:	b80b883a 	mov	r5,r23
  80aa04:	b009883a 	mov	r4,r22
  80aa08:	800d883a 	mov	r6,r16
  80aa0c:	880f883a 	mov	r7,r17
  80aa10:	0810fb40 	call	810fb4 <__muldf3>
  80aa14:	d9401517 	ldw	r5,84(sp)
  80aa18:	d9001417 	ldw	r4,80(sp)
  80aa1c:	880f883a 	mov	r7,r17
  80aa20:	000d883a 	mov	r6,zero
  80aa24:	d8801a15 	stw	r2,104(sp)
  80aa28:	d8c01b15 	stw	r3,108(sp)
  80aa2c:	0810fb40 	call	810fb4 <__muldf3>
  80aa30:	180b883a 	mov	r5,r3
  80aa34:	1009883a 	mov	r4,r2
  80aa38:	1823883a 	mov	r17,r3
  80aa3c:	1021883a 	mov	r16,r2
  80aa40:	08117a00 	call	8117a0 <__fixdfsi>
  80aa44:	1009883a 	mov	r4,r2
  80aa48:	102b883a 	mov	r21,r2
  80aa4c:	08116a80 	call	8116a8 <__floatsidf>
  80aa50:	880b883a 	mov	r5,r17
  80aa54:	8009883a 	mov	r4,r16
  80aa58:	180f883a 	mov	r7,r3
  80aa5c:	100d883a 	mov	r6,r2
  80aa60:	08022c80 	call	8022c8 <__subdf3>
  80aa64:	1021883a 	mov	r16,r2
  80aa68:	d9001b17 	ldw	r4,108(sp)
  80aa6c:	1823883a 	mov	r17,r3
  80aa70:	dc001415 	stw	r16,80(sp)
  80aa74:	ad400c04 	addi	r21,r21,48
  80aa78:	dc401515 	stw	r17,84(sp)
  80aa7c:	d8801a17 	ldw	r2,104(sp)
  80aa80:	e5400005 	stb	r21,0(fp)
  80aa84:	202f883a 	mov	r23,r4
  80aa88:	d9c01b17 	ldw	r7,108(sp)
  80aa8c:	d9001417 	ldw	r4,80(sp)
  80aa90:	880b883a 	mov	r5,r17
  80aa94:	100d883a 	mov	r6,r2
  80aa98:	102d883a 	mov	r22,r2
  80aa9c:	e7000044 	addi	fp,fp,1
  80aaa0:	08115980 	call	811598 <__ltdf2>
  80aaa4:	103fc30e 	bge	r2,zero,80a9b4 <_dtoa_r+0x1064>
  80aaa8:	d9000417 	ldw	r4,16(sp)
  80aaac:	d9000d15 	stw	r4,52(sp)
  80aab0:	003d7106 	br	80a078 <_dtoa_r+0x728>
  80aab4:	d9801717 	ldw	r6,92(sp)
  80aab8:	00800084 	movi	r2,2
  80aabc:	11bde60e 	bge	r2,r6,80a258 <_dtoa_r+0x908>
  80aac0:	203cfb1e 	bne	r4,zero,809eb0 <_dtoa_r+0x560>
  80aac4:	d9001617 	ldw	r4,88(sp)
  80aac8:	900b883a 	mov	r5,r18
  80aacc:	01800144 	movi	r6,5
  80aad0:	000f883a 	mov	r7,zero
  80aad4:	080c5180 	call	80c518 <__multadd>
  80aad8:	d9000717 	ldw	r4,28(sp)
  80aadc:	100b883a 	mov	r5,r2
  80aae0:	1025883a 	mov	r18,r2
  80aae4:	080b9540 	call	80b954 <__mcmp>
  80aae8:	00bcf10e 	bge	zero,r2,809eb0 <_dtoa_r+0x560>
  80aaec:	d8c00d17 	ldw	r3,52(sp)
  80aaf0:	d9000517 	ldw	r4,20(sp)
  80aaf4:	d8000615 	stw	zero,24(sp)
  80aaf8:	18c00044 	addi	r3,r3,1
  80aafc:	d8c00d15 	stw	r3,52(sp)
  80ab00:	00800c44 	movi	r2,49
  80ab04:	27000044 	addi	fp,r4,1
  80ab08:	20800005 	stb	r2,0(r4)
  80ab0c:	003e8906 	br	80a534 <_dtoa_r+0xbe4>
  80ab10:	d8c00517 	ldw	r3,20(sp)
  80ab14:	003bc206 	br	809a20 <_dtoa_r+0xd0>
  80ab18:	01802074 	movhi	r6,129
  80ab1c:	31954a04 	addi	r6,r6,21800
  80ab20:	30c00917 	ldw	r3,36(r6)
  80ab24:	30800817 	ldw	r2,32(r6)
  80ab28:	d9001217 	ldw	r4,72(sp)
  80ab2c:	d9401317 	ldw	r5,76(sp)
  80ab30:	180f883a 	mov	r7,r3
  80ab34:	100d883a 	mov	r6,r2
  80ab38:	08023bc0 	call	8023bc <__divdf3>
  80ab3c:	948003cc 	andi	r18,r18,15
  80ab40:	058000c4 	movi	r22,3
  80ab44:	1029883a 	mov	r20,r2
  80ab48:	182b883a 	mov	r21,r3
  80ab4c:	003c8906 	br	809d74 <_dtoa_r+0x424>
  80ab50:	d9001017 	ldw	r4,64(sp)
  80ab54:	d9800917 	ldw	r6,36(sp)
  80ab58:	0025883a 	mov	r18,zero
  80ab5c:	1105c83a 	sub	r2,r2,r4
  80ab60:	2089883a 	add	r4,r4,r2
  80ab64:	308d883a 	add	r6,r6,r2
  80ab68:	d9001015 	stw	r4,64(sp)
  80ab6c:	d9800915 	stw	r6,36(sp)
  80ab70:	003e3206 	br	80a43c <_dtoa_r+0xaec>
  80ab74:	28800044 	addi	r2,r5,1
  80ab78:	27000044 	addi	fp,r4,1
  80ab7c:	20800005 	stb	r2,0(r4)
  80ab80:	003e6c06 	br	80a534 <_dtoa_r+0xbe4>
  80ab84:	d8800f17 	ldw	r2,60(sp)
  80ab88:	00bce016 	blt	zero,r2,809f0c <_dtoa_r+0x5bc>
  80ab8c:	d9800f17 	ldw	r6,60(sp)
  80ab90:	303cc51e 	bne	r6,zero,809ea8 <_dtoa_r+0x558>
  80ab94:	0005883a 	mov	r2,zero
  80ab98:	00d00534 	movhi	r3,16404
  80ab9c:	980b883a 	mov	r5,r19
  80aba0:	180f883a 	mov	r7,r3
  80aba4:	9009883a 	mov	r4,r18
  80aba8:	100d883a 	mov	r6,r2
  80abac:	0810fb40 	call	810fb4 <__muldf3>
  80abb0:	180b883a 	mov	r5,r3
  80abb4:	a80f883a 	mov	r7,r21
  80abb8:	1009883a 	mov	r4,r2
  80abbc:	a00d883a 	mov	r6,r20
  80abc0:	08115100 	call	811510 <__gedf2>
  80abc4:	103cb80e 	bge	r2,zero,809ea8 <_dtoa_r+0x558>
  80abc8:	0027883a 	mov	r19,zero
  80abcc:	0025883a 	mov	r18,zero
  80abd0:	003fc606 	br	80aaec <_dtoa_r+0x119c>
  80abd4:	99400117 	ldw	r5,4(r19)
  80abd8:	d9001617 	ldw	r4,88(sp)
  80abdc:	080bd780 	call	80bd78 <_Balloc>
  80abe0:	99800417 	ldw	r6,16(r19)
  80abe4:	11000304 	addi	r4,r2,12
  80abe8:	99400304 	addi	r5,r19,12
  80abec:	318d883a 	add	r6,r6,r6
  80abf0:	318d883a 	add	r6,r6,r6
  80abf4:	31800204 	addi	r6,r6,8
  80abf8:	1023883a 	mov	r17,r2
  80abfc:	08050800 	call	805080 <memcpy>
  80ac00:	d9001617 	ldw	r4,88(sp)
  80ac04:	880b883a 	mov	r5,r17
  80ac08:	01800044 	movi	r6,1
  80ac0c:	080c13c0 	call	80c13c <__lshift>
  80ac10:	100b883a 	mov	r5,r2
  80ac14:	003d9c06 	br	80a288 <_dtoa_r+0x938>
  80ac18:	00800e44 	movi	r2,57
  80ac1c:	b8807026 	beq	r23,r2,80ade0 <_dtoa_r+0x1490>
  80ac20:	b8800044 	addi	r2,r23,1
  80ac24:	b7000044 	addi	fp,r22,1
  80ac28:	b0800005 	stb	r2,0(r22)
  80ac2c:	003e4106 	br	80a534 <_dtoa_r+0xbe4>
  80ac30:	d8800317 	ldw	r2,12(sp)
  80ac34:	01802074 	movhi	r6,129
  80ac38:	31951804 	addi	r6,r6,21600
  80ac3c:	b009883a 	mov	r4,r22
  80ac40:	100e90fa 	slli	r7,r2,3
  80ac44:	b80b883a 	mov	r5,r23
  80ac48:	398f883a 	add	r7,r7,r6
  80ac4c:	38bffe17 	ldw	r2,-8(r7)
  80ac50:	d9800517 	ldw	r6,20(sp)
  80ac54:	38ffff17 	ldw	r3,-4(r7)
  80ac58:	37000044 	addi	fp,r6,1
  80ac5c:	180f883a 	mov	r7,r3
  80ac60:	100d883a 	mov	r6,r2
  80ac64:	0810fb40 	call	810fb4 <__muldf3>
  80ac68:	a80b883a 	mov	r5,r21
  80ac6c:	a009883a 	mov	r4,r20
  80ac70:	182f883a 	mov	r23,r3
  80ac74:	102d883a 	mov	r22,r2
  80ac78:	08117a00 	call	8117a0 <__fixdfsi>
  80ac7c:	1009883a 	mov	r4,r2
  80ac80:	1027883a 	mov	r19,r2
  80ac84:	08116a80 	call	8116a8 <__floatsidf>
  80ac88:	a80b883a 	mov	r5,r21
  80ac8c:	a009883a 	mov	r4,r20
  80ac90:	180f883a 	mov	r7,r3
  80ac94:	100d883a 	mov	r6,r2
  80ac98:	08022c80 	call	8022c8 <__subdf3>
  80ac9c:	180b883a 	mov	r5,r3
  80aca0:	d8c00517 	ldw	r3,20(sp)
  80aca4:	9cc00c04 	addi	r19,r19,48
  80aca8:	1009883a 	mov	r4,r2
  80acac:	1cc00005 	stb	r19,0(r3)
  80acb0:	2021883a 	mov	r16,r4
  80acb4:	d9000317 	ldw	r4,12(sp)
  80acb8:	00800044 	movi	r2,1
  80acbc:	2823883a 	mov	r17,r5
  80acc0:	20802226 	beq	r4,r2,80ad4c <_dtoa_r+0x13fc>
  80acc4:	1029883a 	mov	r20,r2
  80acc8:	0005883a 	mov	r2,zero
  80accc:	00d00934 	movhi	r3,16420
  80acd0:	180f883a 	mov	r7,r3
  80acd4:	100d883a 	mov	r6,r2
  80acd8:	880b883a 	mov	r5,r17
  80acdc:	8009883a 	mov	r4,r16
  80ace0:	0810fb40 	call	810fb4 <__muldf3>
  80ace4:	180b883a 	mov	r5,r3
  80ace8:	1009883a 	mov	r4,r2
  80acec:	1823883a 	mov	r17,r3
  80acf0:	1021883a 	mov	r16,r2
  80acf4:	08117a00 	call	8117a0 <__fixdfsi>
  80acf8:	1009883a 	mov	r4,r2
  80acfc:	102b883a 	mov	r21,r2
  80ad00:	08116a80 	call	8116a8 <__floatsidf>
  80ad04:	880b883a 	mov	r5,r17
  80ad08:	8009883a 	mov	r4,r16
  80ad0c:	180f883a 	mov	r7,r3
  80ad10:	100d883a 	mov	r6,r2
  80ad14:	08022c80 	call	8022c8 <__subdf3>
  80ad18:	180b883a 	mov	r5,r3
  80ad1c:	d8c00517 	ldw	r3,20(sp)
  80ad20:	1009883a 	mov	r4,r2
  80ad24:	ad400c04 	addi	r21,r21,48
  80ad28:	1d05883a 	add	r2,r3,r20
  80ad2c:	15400005 	stb	r21,0(r2)
  80ad30:	2021883a 	mov	r16,r4
  80ad34:	d9000317 	ldw	r4,12(sp)
  80ad38:	a5000044 	addi	r20,r20,1
  80ad3c:	2823883a 	mov	r17,r5
  80ad40:	a13fe11e 	bne	r20,r4,80acc8 <_dtoa_r+0x1378>
  80ad44:	e505883a 	add	r2,fp,r20
  80ad48:	173fffc4 	addi	fp,r2,-1
  80ad4c:	0025883a 	mov	r18,zero
  80ad50:	04cff834 	movhi	r19,16352
  80ad54:	b009883a 	mov	r4,r22
  80ad58:	b80b883a 	mov	r5,r23
  80ad5c:	900d883a 	mov	r6,r18
  80ad60:	980f883a 	mov	r7,r19
  80ad64:	08023480 	call	802348 <__adddf3>
  80ad68:	180b883a 	mov	r5,r3
  80ad6c:	1009883a 	mov	r4,r2
  80ad70:	800d883a 	mov	r6,r16
  80ad74:	880f883a 	mov	r7,r17
  80ad78:	08115980 	call	811598 <__ltdf2>
  80ad7c:	103cab16 	blt	r2,zero,80a02c <_dtoa_r+0x6dc>
  80ad80:	0009883a 	mov	r4,zero
  80ad84:	980b883a 	mov	r5,r19
  80ad88:	b80f883a 	mov	r7,r23
  80ad8c:	b00d883a 	mov	r6,r22
  80ad90:	08022c80 	call	8022c8 <__subdf3>
  80ad94:	180b883a 	mov	r5,r3
  80ad98:	880f883a 	mov	r7,r17
  80ad9c:	1009883a 	mov	r4,r2
  80ada0:	800d883a 	mov	r6,r16
  80ada4:	08114880 	call	811488 <__gtdf2>
  80ada8:	00bc470e 	bge	zero,r2,809ec8 <_dtoa_r+0x578>
  80adac:	00c00c04 	movi	r3,48
  80adb0:	e73fffc4 	addi	fp,fp,-1
  80adb4:	e0800007 	ldb	r2,0(fp)
  80adb8:	10fffd26 	beq	r2,r3,80adb0 <_dtoa_r+0x1460>
  80adbc:	d9800417 	ldw	r6,16(sp)
  80adc0:	e7000044 	addi	fp,fp,1
  80adc4:	d9800d15 	stw	r6,52(sp)
  80adc8:	003cab06 	br	80a078 <_dtoa_r+0x728>
  80adcc:	d8c00f17 	ldw	r3,60(sp)
  80add0:	d9001117 	ldw	r4,68(sp)
  80add4:	20e1c83a 	sub	r16,r4,r3
  80add8:	0007883a 	mov	r3,zero
  80addc:	003d9b06 	br	80a44c <_dtoa_r+0xafc>
  80ade0:	00800e44 	movi	r2,57
  80ade4:	b0800005 	stb	r2,0(r22)
  80ade8:	b5800044 	addi	r22,r22,1
  80adec:	003dc106 	br	80a4f4 <_dtoa_r+0xba4>
  80adf0:	05800084 	movi	r22,2
  80adf4:	003bf706 	br	809dd4 <_dtoa_r+0x484>
  80adf8:	d9000f17 	ldw	r4,60(sp)
  80adfc:	013c000e 	bge	zero,r4,809e00 <_dtoa_r+0x4b0>
  80ae00:	d9800e17 	ldw	r6,56(sp)
  80ae04:	01bc300e 	bge	zero,r6,809ec8 <_dtoa_r+0x578>
  80ae08:	0005883a 	mov	r2,zero
  80ae0c:	00d00934 	movhi	r3,16420
  80ae10:	a80b883a 	mov	r5,r21
  80ae14:	180f883a 	mov	r7,r3
  80ae18:	a009883a 	mov	r4,r20
  80ae1c:	100d883a 	mov	r6,r2
  80ae20:	0810fb40 	call	810fb4 <__muldf3>
  80ae24:	b1000044 	addi	r4,r22,1
  80ae28:	1021883a 	mov	r16,r2
  80ae2c:	1823883a 	mov	r17,r3
  80ae30:	08116a80 	call	8116a8 <__floatsidf>
  80ae34:	880b883a 	mov	r5,r17
  80ae38:	8009883a 	mov	r4,r16
  80ae3c:	180f883a 	mov	r7,r3
  80ae40:	100d883a 	mov	r6,r2
  80ae44:	0810fb40 	call	810fb4 <__muldf3>
  80ae48:	0011883a 	mov	r8,zero
  80ae4c:	02500734 	movhi	r9,16412
  80ae50:	180b883a 	mov	r5,r3
  80ae54:	480f883a 	mov	r7,r9
  80ae58:	1009883a 	mov	r4,r2
  80ae5c:	400d883a 	mov	r6,r8
  80ae60:	08023480 	call	802348 <__adddf3>
  80ae64:	102d883a 	mov	r22,r2
  80ae68:	00bf3034 	movhi	r2,64704
  80ae6c:	10ef883a 	add	r23,r2,r3
  80ae70:	d8800d17 	ldw	r2,52(sp)
  80ae74:	d8c00e17 	ldw	r3,56(sp)
  80ae78:	8029883a 	mov	r20,r16
  80ae7c:	10bfffc4 	addi	r2,r2,-1
  80ae80:	882b883a 	mov	r21,r17
  80ae84:	d8800415 	stw	r2,16(sp)
  80ae88:	d8c00315 	stw	r3,12(sp)
  80ae8c:	003e8306 	br	80a89c <_dtoa_r+0xf4c>
  80ae90:	d8800117 	ldw	r2,4(sp)
  80ae94:	dc001117 	ldw	r16,68(sp)
  80ae98:	dc801017 	ldw	r18,64(sp)
  80ae9c:	00c00d84 	movi	r3,54
  80aea0:	1887c83a 	sub	r3,r3,r2
  80aea4:	003d6906 	br	80a44c <_dtoa_r+0xafc>
  80aea8:	01800044 	movi	r6,1
  80aeac:	3021883a 	mov	r16,r6
  80aeb0:	d9800f15 	stw	r6,60(sp)
  80aeb4:	d9802615 	stw	r6,152(sp)
  80aeb8:	d9800e15 	stw	r6,56(sp)
  80aebc:	003b9306 	br	809d0c <_dtoa_r+0x3bc>
  80aec0:	b021883a 	mov	r16,r22
  80aec4:	dd800f15 	stw	r22,60(sp)
  80aec8:	003b9006 	br	809d0c <_dtoa_r+0x3bc>
  80aecc:	103e221e 	bne	r2,zero,80a758 <_dtoa_r+0xe08>
  80aed0:	b880004c 	andi	r2,r23,1
  80aed4:	1005003a 	cmpeq	r2,r2,zero
  80aed8:	103e1f1e 	bne	r2,zero,80a758 <_dtoa_r+0xe08>
  80aedc:	003e1b06 	br	80a74c <_dtoa_r+0xdfc>
  80aee0:	d9001617 	ldw	r4,88(sp)
  80aee4:	980b883a 	mov	r5,r19
  80aee8:	01800284 	movi	r6,10
  80aeec:	000f883a 	mov	r7,zero
  80aef0:	080c5180 	call	80c518 <__multadd>
  80aef4:	d8c00e17 	ldw	r3,56(sp)
  80aef8:	1027883a 	mov	r19,r2
  80aefc:	d8c00f15 	stw	r3,60(sp)
  80af00:	003cd306 	br	80a250 <_dtoa_r+0x900>

0080af04 <__sflags>:
  80af04:	28c00007 	ldb	r3,0(r5)
  80af08:	00801c84 	movi	r2,114
  80af0c:	18800926 	beq	r3,r2,80af34 <__sflags+0x30>
  80af10:	00801dc4 	movi	r2,119
  80af14:	18801426 	beq	r3,r2,80af68 <__sflags+0x64>
  80af18:	00801844 	movi	r2,97
  80af1c:	18801626 	beq	r3,r2,80af78 <__sflags+0x74>
  80af20:	0007883a 	mov	r3,zero
  80af24:	00800584 	movi	r2,22
  80af28:	20800015 	stw	r2,0(r4)
  80af2c:	1805883a 	mov	r2,r3
  80af30:	f800283a 	ret
  80af34:	000f883a 	mov	r7,zero
  80af38:	0011883a 	mov	r8,zero
  80af3c:	00c00104 	movi	r3,4
  80af40:	28800047 	ldb	r2,1(r5)
  80af44:	10000426 	beq	r2,zero,80af58 <__sflags+0x54>
  80af48:	01000ac4 	movi	r4,43
  80af4c:	11000e26 	beq	r2,r4,80af88 <__sflags+0x84>
  80af50:	28800087 	ldb	r2,2(r5)
  80af54:	11000c26 	beq	r2,r4,80af88 <__sflags+0x84>
  80af58:	3a04b03a 	or	r2,r7,r8
  80af5c:	30800015 	stw	r2,0(r6)
  80af60:	1805883a 	mov	r2,r3
  80af64:	f800283a 	ret
  80af68:	01c00044 	movi	r7,1
  80af6c:	02018004 	movi	r8,1536
  80af70:	00c00204 	movi	r3,8
  80af74:	003ff206 	br	80af40 <__sflags+0x3c>
  80af78:	01c00044 	movi	r7,1
  80af7c:	02008204 	movi	r8,520
  80af80:	00c04204 	movi	r3,264
  80af84:	003fee06 	br	80af40 <__sflags+0x3c>
  80af88:	00bffcc4 	movi	r2,-13
  80af8c:	1884703a 	and	r2,r3,r2
  80af90:	01c00084 	movi	r7,2
  80af94:	10c00414 	ori	r3,r2,16
  80af98:	3a04b03a 	or	r2,r7,r8
  80af9c:	30800015 	stw	r2,0(r6)
  80afa0:	003fef06 	br	80af60 <__sflags+0x5c>

0080afa4 <__sfvwrite_r>:
  80afa4:	30800217 	ldw	r2,8(r6)
  80afa8:	defff504 	addi	sp,sp,-44
  80afac:	df000915 	stw	fp,36(sp)
  80afb0:	dd800715 	stw	r22,28(sp)
  80afb4:	dc800315 	stw	r18,12(sp)
  80afb8:	dfc00a15 	stw	ra,40(sp)
  80afbc:	ddc00815 	stw	r23,32(sp)
  80afc0:	dd400615 	stw	r21,24(sp)
  80afc4:	dd000515 	stw	r20,20(sp)
  80afc8:	dcc00415 	stw	r19,16(sp)
  80afcc:	dc400215 	stw	r17,8(sp)
  80afd0:	dc000115 	stw	r16,4(sp)
  80afd4:	302d883a 	mov	r22,r6
  80afd8:	2039883a 	mov	fp,r4
  80afdc:	2825883a 	mov	r18,r5
  80afe0:	10001c26 	beq	r2,zero,80b054 <__sfvwrite_r+0xb0>
  80afe4:	29c0030b 	ldhu	r7,12(r5)
  80afe8:	3880020c 	andi	r2,r7,8
  80afec:	10002726 	beq	r2,zero,80b08c <__sfvwrite_r+0xe8>
  80aff0:	28800417 	ldw	r2,16(r5)
  80aff4:	10002526 	beq	r2,zero,80b08c <__sfvwrite_r+0xe8>
  80aff8:	3880008c 	andi	r2,r7,2
  80affc:	b5400017 	ldw	r21,0(r22)
  80b000:	10002826 	beq	r2,zero,80b0a4 <__sfvwrite_r+0x100>
  80b004:	0021883a 	mov	r16,zero
  80b008:	0023883a 	mov	r17,zero
  80b00c:	880d883a 	mov	r6,r17
  80b010:	e009883a 	mov	r4,fp
  80b014:	00810004 	movi	r2,1024
  80b018:	80006e26 	beq	r16,zero,80b1d4 <__sfvwrite_r+0x230>
  80b01c:	800f883a 	mov	r7,r16
  80b020:	91400717 	ldw	r5,28(r18)
  80b024:	1400012e 	bgeu	r2,r16,80b02c <__sfvwrite_r+0x88>
  80b028:	100f883a 	mov	r7,r2
  80b02c:	90c00917 	ldw	r3,36(r18)
  80b030:	183ee83a 	callr	r3
  80b034:	1007883a 	mov	r3,r2
  80b038:	80a1c83a 	sub	r16,r16,r2
  80b03c:	88a3883a 	add	r17,r17,r2
  80b040:	00806d0e 	bge	zero,r2,80b1f8 <__sfvwrite_r+0x254>
  80b044:	b0800217 	ldw	r2,8(r22)
  80b048:	10c5c83a 	sub	r2,r2,r3
  80b04c:	b0800215 	stw	r2,8(r22)
  80b050:	103fee1e 	bne	r2,zero,80b00c <__sfvwrite_r+0x68>
  80b054:	0009883a 	mov	r4,zero
  80b058:	2005883a 	mov	r2,r4
  80b05c:	dfc00a17 	ldw	ra,40(sp)
  80b060:	df000917 	ldw	fp,36(sp)
  80b064:	ddc00817 	ldw	r23,32(sp)
  80b068:	dd800717 	ldw	r22,28(sp)
  80b06c:	dd400617 	ldw	r21,24(sp)
  80b070:	dd000517 	ldw	r20,20(sp)
  80b074:	dcc00417 	ldw	r19,16(sp)
  80b078:	dc800317 	ldw	r18,12(sp)
  80b07c:	dc400217 	ldw	r17,8(sp)
  80b080:	dc000117 	ldw	r16,4(sp)
  80b084:	dec00b04 	addi	sp,sp,44
  80b088:	f800283a 	ret
  80b08c:	08093ac0 	call	8093ac <__swsetup_r>
  80b090:	1000e41e 	bne	r2,zero,80b424 <__sfvwrite_r+0x480>
  80b094:	91c0030b 	ldhu	r7,12(r18)
  80b098:	b5400017 	ldw	r21,0(r22)
  80b09c:	3880008c 	andi	r2,r7,2
  80b0a0:	103fd81e 	bne	r2,zero,80b004 <__sfvwrite_r+0x60>
  80b0a4:	3880004c 	andi	r2,r7,1
  80b0a8:	1005003a 	cmpeq	r2,r2,zero
  80b0ac:	10005726 	beq	r2,zero,80b20c <__sfvwrite_r+0x268>
  80b0b0:	0029883a 	mov	r20,zero
  80b0b4:	002f883a 	mov	r23,zero
  80b0b8:	a0004226 	beq	r20,zero,80b1c4 <__sfvwrite_r+0x220>
  80b0bc:	3880800c 	andi	r2,r7,512
  80b0c0:	94000217 	ldw	r16,8(r18)
  80b0c4:	10008b26 	beq	r2,zero,80b2f4 <__sfvwrite_r+0x350>
  80b0c8:	800d883a 	mov	r6,r16
  80b0cc:	a400a536 	bltu	r20,r16,80b364 <__sfvwrite_r+0x3c0>
  80b0d0:	3881200c 	andi	r2,r7,1152
  80b0d4:	10002726 	beq	r2,zero,80b174 <__sfvwrite_r+0x1d0>
  80b0d8:	90800517 	ldw	r2,20(r18)
  80b0dc:	92000417 	ldw	r8,16(r18)
  80b0e0:	91400017 	ldw	r5,0(r18)
  80b0e4:	1087883a 	add	r3,r2,r2
  80b0e8:	1887883a 	add	r3,r3,r2
  80b0ec:	1808d7fa 	srli	r4,r3,31
  80b0f0:	2a21c83a 	sub	r16,r5,r8
  80b0f4:	80800044 	addi	r2,r16,1
  80b0f8:	20c9883a 	add	r4,r4,r3
  80b0fc:	2027d07a 	srai	r19,r4,1
  80b100:	a085883a 	add	r2,r20,r2
  80b104:	980d883a 	mov	r6,r19
  80b108:	9880022e 	bgeu	r19,r2,80b114 <__sfvwrite_r+0x170>
  80b10c:	1027883a 	mov	r19,r2
  80b110:	100d883a 	mov	r6,r2
  80b114:	3881000c 	andi	r2,r7,1024
  80b118:	1000b826 	beq	r2,zero,80b3fc <__sfvwrite_r+0x458>
  80b11c:	300b883a 	mov	r5,r6
  80b120:	e009883a 	mov	r4,fp
  80b124:	080485c0 	call	80485c <_malloc_r>
  80b128:	10003126 	beq	r2,zero,80b1f0 <__sfvwrite_r+0x24c>
  80b12c:	91400417 	ldw	r5,16(r18)
  80b130:	1009883a 	mov	r4,r2
  80b134:	800d883a 	mov	r6,r16
  80b138:	1023883a 	mov	r17,r2
  80b13c:	08050800 	call	805080 <memcpy>
  80b140:	90c0030b 	ldhu	r3,12(r18)
  80b144:	00beffc4 	movi	r2,-1025
  80b148:	1886703a 	and	r3,r3,r2
  80b14c:	18c02014 	ori	r3,r3,128
  80b150:	90c0030d 	sth	r3,12(r18)
  80b154:	9c07c83a 	sub	r3,r19,r16
  80b158:	8c05883a 	add	r2,r17,r16
  80b15c:	a00d883a 	mov	r6,r20
  80b160:	a021883a 	mov	r16,r20
  80b164:	90800015 	stw	r2,0(r18)
  80b168:	90c00215 	stw	r3,8(r18)
  80b16c:	94400415 	stw	r17,16(r18)
  80b170:	94c00515 	stw	r19,20(r18)
  80b174:	91000017 	ldw	r4,0(r18)
  80b178:	b80b883a 	mov	r5,r23
  80b17c:	a023883a 	mov	r17,r20
  80b180:	080b7180 	call	80b718 <memmove>
  80b184:	90c00217 	ldw	r3,8(r18)
  80b188:	90800017 	ldw	r2,0(r18)
  80b18c:	a027883a 	mov	r19,r20
  80b190:	1c07c83a 	sub	r3,r3,r16
  80b194:	1405883a 	add	r2,r2,r16
  80b198:	90c00215 	stw	r3,8(r18)
  80b19c:	a021883a 	mov	r16,r20
  80b1a0:	90800015 	stw	r2,0(r18)
  80b1a4:	b0800217 	ldw	r2,8(r22)
  80b1a8:	1405c83a 	sub	r2,r2,r16
  80b1ac:	b0800215 	stw	r2,8(r22)
  80b1b0:	103fa826 	beq	r2,zero,80b054 <__sfvwrite_r+0xb0>
  80b1b4:	a469c83a 	sub	r20,r20,r17
  80b1b8:	91c0030b 	ldhu	r7,12(r18)
  80b1bc:	bcef883a 	add	r23,r23,r19
  80b1c0:	a03fbe1e 	bne	r20,zero,80b0bc <__sfvwrite_r+0x118>
  80b1c4:	adc00017 	ldw	r23,0(r21)
  80b1c8:	ad000117 	ldw	r20,4(r21)
  80b1cc:	ad400204 	addi	r21,r21,8
  80b1d0:	003fb906 	br	80b0b8 <__sfvwrite_r+0x114>
  80b1d4:	ac400017 	ldw	r17,0(r21)
  80b1d8:	ac000117 	ldw	r16,4(r21)
  80b1dc:	ad400204 	addi	r21,r21,8
  80b1e0:	003f8a06 	br	80b00c <__sfvwrite_r+0x68>
  80b1e4:	91400417 	ldw	r5,16(r18)
  80b1e8:	e009883a 	mov	r4,fp
  80b1ec:	0803be00 	call	803be0 <_free_r>
  80b1f0:	00800304 	movi	r2,12
  80b1f4:	e0800015 	stw	r2,0(fp)
  80b1f8:	9080030b 	ldhu	r2,12(r18)
  80b1fc:	013fffc4 	movi	r4,-1
  80b200:	10801014 	ori	r2,r2,64
  80b204:	9080030d 	sth	r2,12(r18)
  80b208:	003f9306 	br	80b058 <__sfvwrite_r+0xb4>
  80b20c:	0027883a 	mov	r19,zero
  80b210:	002f883a 	mov	r23,zero
  80b214:	d8000015 	stw	zero,0(sp)
  80b218:	0029883a 	mov	r20,zero
  80b21c:	98001e26 	beq	r19,zero,80b298 <__sfvwrite_r+0x2f4>
  80b220:	d8c00017 	ldw	r3,0(sp)
  80b224:	1804c03a 	cmpne	r2,r3,zero
  80b228:	10005e26 	beq	r2,zero,80b3a4 <__sfvwrite_r+0x400>
  80b22c:	9821883a 	mov	r16,r19
  80b230:	a4c0012e 	bgeu	r20,r19,80b238 <__sfvwrite_r+0x294>
  80b234:	a021883a 	mov	r16,r20
  80b238:	91000017 	ldw	r4,0(r18)
  80b23c:	90800417 	ldw	r2,16(r18)
  80b240:	91800217 	ldw	r6,8(r18)
  80b244:	91c00517 	ldw	r7,20(r18)
  80b248:	1100022e 	bgeu	r2,r4,80b254 <__sfvwrite_r+0x2b0>
  80b24c:	31e3883a 	add	r17,r6,r7
  80b250:	8c001616 	blt	r17,r16,80b2ac <__sfvwrite_r+0x308>
  80b254:	81c03816 	blt	r16,r7,80b338 <__sfvwrite_r+0x394>
  80b258:	90c00917 	ldw	r3,36(r18)
  80b25c:	91400717 	ldw	r5,28(r18)
  80b260:	e009883a 	mov	r4,fp
  80b264:	b80d883a 	mov	r6,r23
  80b268:	183ee83a 	callr	r3
  80b26c:	1023883a 	mov	r17,r2
  80b270:	00bfe10e 	bge	zero,r2,80b1f8 <__sfvwrite_r+0x254>
  80b274:	a469c83a 	sub	r20,r20,r17
  80b278:	a0001826 	beq	r20,zero,80b2dc <__sfvwrite_r+0x338>
  80b27c:	b0800217 	ldw	r2,8(r22)
  80b280:	1445c83a 	sub	r2,r2,r17
  80b284:	b0800215 	stw	r2,8(r22)
  80b288:	103f7226 	beq	r2,zero,80b054 <__sfvwrite_r+0xb0>
  80b28c:	9c67c83a 	sub	r19,r19,r17
  80b290:	bc6f883a 	add	r23,r23,r17
  80b294:	983fe21e 	bne	r19,zero,80b220 <__sfvwrite_r+0x27c>
  80b298:	adc00017 	ldw	r23,0(r21)
  80b29c:	acc00117 	ldw	r19,4(r21)
  80b2a0:	ad400204 	addi	r21,r21,8
  80b2a4:	d8000015 	stw	zero,0(sp)
  80b2a8:	003fdc06 	br	80b21c <__sfvwrite_r+0x278>
  80b2ac:	b80b883a 	mov	r5,r23
  80b2b0:	880d883a 	mov	r6,r17
  80b2b4:	080b7180 	call	80b718 <memmove>
  80b2b8:	90c00017 	ldw	r3,0(r18)
  80b2bc:	e009883a 	mov	r4,fp
  80b2c0:	900b883a 	mov	r5,r18
  80b2c4:	1c47883a 	add	r3,r3,r17
  80b2c8:	90c00015 	stw	r3,0(r18)
  80b2cc:	0802f400 	call	802f40 <_fflush_r>
  80b2d0:	103fc91e 	bne	r2,zero,80b1f8 <__sfvwrite_r+0x254>
  80b2d4:	a469c83a 	sub	r20,r20,r17
  80b2d8:	a03fe81e 	bne	r20,zero,80b27c <__sfvwrite_r+0x2d8>
  80b2dc:	e009883a 	mov	r4,fp
  80b2e0:	900b883a 	mov	r5,r18
  80b2e4:	0802f400 	call	802f40 <_fflush_r>
  80b2e8:	103fc31e 	bne	r2,zero,80b1f8 <__sfvwrite_r+0x254>
  80b2ec:	d8000015 	stw	zero,0(sp)
  80b2f0:	003fe206 	br	80b27c <__sfvwrite_r+0x2d8>
  80b2f4:	91000017 	ldw	r4,0(r18)
  80b2f8:	90800417 	ldw	r2,16(r18)
  80b2fc:	1100022e 	bgeu	r2,r4,80b308 <__sfvwrite_r+0x364>
  80b300:	8023883a 	mov	r17,r16
  80b304:	85003136 	bltu	r16,r20,80b3cc <__sfvwrite_r+0x428>
  80b308:	91c00517 	ldw	r7,20(r18)
  80b30c:	a1c01836 	bltu	r20,r7,80b370 <__sfvwrite_r+0x3cc>
  80b310:	90c00917 	ldw	r3,36(r18)
  80b314:	91400717 	ldw	r5,28(r18)
  80b318:	e009883a 	mov	r4,fp
  80b31c:	b80d883a 	mov	r6,r23
  80b320:	183ee83a 	callr	r3
  80b324:	1021883a 	mov	r16,r2
  80b328:	00bfb30e 	bge	zero,r2,80b1f8 <__sfvwrite_r+0x254>
  80b32c:	1023883a 	mov	r17,r2
  80b330:	1027883a 	mov	r19,r2
  80b334:	003f9b06 	br	80b1a4 <__sfvwrite_r+0x200>
  80b338:	b80b883a 	mov	r5,r23
  80b33c:	800d883a 	mov	r6,r16
  80b340:	080b7180 	call	80b718 <memmove>
  80b344:	90c00217 	ldw	r3,8(r18)
  80b348:	90800017 	ldw	r2,0(r18)
  80b34c:	8023883a 	mov	r17,r16
  80b350:	1c07c83a 	sub	r3,r3,r16
  80b354:	1405883a 	add	r2,r2,r16
  80b358:	90c00215 	stw	r3,8(r18)
  80b35c:	90800015 	stw	r2,0(r18)
  80b360:	003fc406 	br	80b274 <__sfvwrite_r+0x2d0>
  80b364:	a00d883a 	mov	r6,r20
  80b368:	a021883a 	mov	r16,r20
  80b36c:	003f8106 	br	80b174 <__sfvwrite_r+0x1d0>
  80b370:	b80b883a 	mov	r5,r23
  80b374:	a00d883a 	mov	r6,r20
  80b378:	080b7180 	call	80b718 <memmove>
  80b37c:	90c00217 	ldw	r3,8(r18)
  80b380:	90800017 	ldw	r2,0(r18)
  80b384:	a021883a 	mov	r16,r20
  80b388:	1d07c83a 	sub	r3,r3,r20
  80b38c:	1505883a 	add	r2,r2,r20
  80b390:	a023883a 	mov	r17,r20
  80b394:	a027883a 	mov	r19,r20
  80b398:	90c00215 	stw	r3,8(r18)
  80b39c:	90800015 	stw	r2,0(r18)
  80b3a0:	003f8006 	br	80b1a4 <__sfvwrite_r+0x200>
  80b3a4:	b809883a 	mov	r4,r23
  80b3a8:	01400284 	movi	r5,10
  80b3ac:	980d883a 	mov	r6,r19
  80b3b0:	0804f9c0 	call	804f9c <memchr>
  80b3b4:	10001726 	beq	r2,zero,80b414 <__sfvwrite_r+0x470>
  80b3b8:	15c5c83a 	sub	r2,r2,r23
  80b3bc:	15000044 	addi	r20,r2,1
  80b3c0:	00800044 	movi	r2,1
  80b3c4:	d8800015 	stw	r2,0(sp)
  80b3c8:	003f9806 	br	80b22c <__sfvwrite_r+0x288>
  80b3cc:	b80b883a 	mov	r5,r23
  80b3d0:	800d883a 	mov	r6,r16
  80b3d4:	080b7180 	call	80b718 <memmove>
  80b3d8:	90c00017 	ldw	r3,0(r18)
  80b3dc:	e009883a 	mov	r4,fp
  80b3e0:	900b883a 	mov	r5,r18
  80b3e4:	1c07883a 	add	r3,r3,r16
  80b3e8:	90c00015 	stw	r3,0(r18)
  80b3ec:	8027883a 	mov	r19,r16
  80b3f0:	0802f400 	call	802f40 <_fflush_r>
  80b3f4:	103f6b26 	beq	r2,zero,80b1a4 <__sfvwrite_r+0x200>
  80b3f8:	003f7f06 	br	80b1f8 <__sfvwrite_r+0x254>
  80b3fc:	400b883a 	mov	r5,r8
  80b400:	e009883a 	mov	r4,fp
  80b404:	080c8fc0 	call	80c8fc <_realloc_r>
  80b408:	103f7626 	beq	r2,zero,80b1e4 <__sfvwrite_r+0x240>
  80b40c:	1023883a 	mov	r17,r2
  80b410:	003f5006 	br	80b154 <__sfvwrite_r+0x1b0>
  80b414:	00c00044 	movi	r3,1
  80b418:	9d000044 	addi	r20,r19,1
  80b41c:	d8c00015 	stw	r3,0(sp)
  80b420:	003f8206 	br	80b22c <__sfvwrite_r+0x288>
  80b424:	9080030b 	ldhu	r2,12(r18)
  80b428:	00c00244 	movi	r3,9
  80b42c:	013fffc4 	movi	r4,-1
  80b430:	10801014 	ori	r2,r2,64
  80b434:	9080030d 	sth	r2,12(r18)
  80b438:	e0c00015 	stw	r3,0(fp)
  80b43c:	003f0606 	br	80b058 <__sfvwrite_r+0xb4>

0080b440 <_isatty_r>:
  80b440:	defffd04 	addi	sp,sp,-12
  80b444:	dc000015 	stw	r16,0(sp)
  80b448:	040020b4 	movhi	r16,130
  80b44c:	84231204 	addi	r16,r16,-29624
  80b450:	dc400115 	stw	r17,4(sp)
  80b454:	80000015 	stw	zero,0(r16)
  80b458:	2023883a 	mov	r17,r4
  80b45c:	2809883a 	mov	r4,r5
  80b460:	dfc00215 	stw	ra,8(sp)
  80b464:	08121200 	call	812120 <isatty>
  80b468:	1007883a 	mov	r3,r2
  80b46c:	00bfffc4 	movi	r2,-1
  80b470:	18800626 	beq	r3,r2,80b48c <_isatty_r+0x4c>
  80b474:	1805883a 	mov	r2,r3
  80b478:	dfc00217 	ldw	ra,8(sp)
  80b47c:	dc400117 	ldw	r17,4(sp)
  80b480:	dc000017 	ldw	r16,0(sp)
  80b484:	dec00304 	addi	sp,sp,12
  80b488:	f800283a 	ret
  80b48c:	80800017 	ldw	r2,0(r16)
  80b490:	103ff826 	beq	r2,zero,80b474 <_isatty_r+0x34>
  80b494:	88800015 	stw	r2,0(r17)
  80b498:	1805883a 	mov	r2,r3
  80b49c:	dfc00217 	ldw	ra,8(sp)
  80b4a0:	dc400117 	ldw	r17,4(sp)
  80b4a4:	dc000017 	ldw	r16,0(sp)
  80b4a8:	dec00304 	addi	sp,sp,12
  80b4ac:	f800283a 	ret

0080b4b0 <iswspace>:
  80b4b0:	00803fc4 	movi	r2,255
  80b4b4:	0007883a 	mov	r3,zero
  80b4b8:	11000636 	bltu	r2,r4,80b4d4 <iswspace+0x24>
  80b4bc:	00802074 	movhi	r2,129
  80b4c0:	109c2804 	addi	r2,r2,28832
  80b4c4:	10c00017 	ldw	r3,0(r2)
  80b4c8:	1907883a 	add	r3,r3,r4
  80b4cc:	18800003 	ldbu	r2,0(r3)
  80b4d0:	10c0020c 	andi	r3,r2,8
  80b4d4:	1805883a 	mov	r2,r3
  80b4d8:	f800283a 	ret

0080b4dc <__locale_charset>:
  80b4dc:	d0a00617 	ldw	r2,-32744(gp)
  80b4e0:	f800283a 	ret

0080b4e4 <_localeconv_r>:
  80b4e4:	00802074 	movhi	r2,129
  80b4e8:	10950c04 	addi	r2,r2,21552
  80b4ec:	f800283a 	ret

0080b4f0 <localeconv>:
  80b4f0:	00802074 	movhi	r2,129
  80b4f4:	109c2904 	addi	r2,r2,28836
  80b4f8:	11000017 	ldw	r4,0(r2)
  80b4fc:	080b4e41 	jmpi	80b4e4 <_localeconv_r>

0080b500 <_setlocale_r>:
  80b500:	defffc04 	addi	sp,sp,-16
  80b504:	00c02074 	movhi	r3,129
  80b508:	18d4d804 	addi	r3,r3,21344
  80b50c:	dc800215 	stw	r18,8(sp)
  80b510:	dc400115 	stw	r17,4(sp)
  80b514:	dc000015 	stw	r16,0(sp)
  80b518:	2023883a 	mov	r17,r4
  80b51c:	2825883a 	mov	r18,r5
  80b520:	dfc00315 	stw	ra,12(sp)
  80b524:	3021883a 	mov	r16,r6
  80b528:	3009883a 	mov	r4,r6
  80b52c:	180b883a 	mov	r5,r3
  80b530:	30000926 	beq	r6,zero,80b558 <_setlocale_r+0x58>
  80b534:	080d0fc0 	call	80d0fc <strcmp>
  80b538:	8009883a 	mov	r4,r16
  80b53c:	01402074 	movhi	r5,129
  80b540:	2954e904 	addi	r5,r5,21412
  80b544:	10000b1e 	bne	r2,zero,80b574 <_setlocale_r+0x74>
  80b548:	8c000d15 	stw	r16,52(r17)
  80b54c:	8c800c15 	stw	r18,48(r17)
  80b550:	00c02074 	movhi	r3,129
  80b554:	18d4d804 	addi	r3,r3,21344
  80b558:	1805883a 	mov	r2,r3
  80b55c:	dfc00317 	ldw	ra,12(sp)
  80b560:	dc800217 	ldw	r18,8(sp)
  80b564:	dc400117 	ldw	r17,4(sp)
  80b568:	dc000017 	ldw	r16,0(sp)
  80b56c:	dec00404 	addi	sp,sp,16
  80b570:	f800283a 	ret
  80b574:	080d0fc0 	call	80d0fc <strcmp>
  80b578:	0007883a 	mov	r3,zero
  80b57c:	103ff226 	beq	r2,zero,80b548 <_setlocale_r+0x48>
  80b580:	003ff506 	br	80b558 <_setlocale_r+0x58>

0080b584 <setlocale>:
  80b584:	01802074 	movhi	r6,129
  80b588:	319c2904 	addi	r6,r6,28836
  80b58c:	2007883a 	mov	r3,r4
  80b590:	31000017 	ldw	r4,0(r6)
  80b594:	280d883a 	mov	r6,r5
  80b598:	180b883a 	mov	r5,r3
  80b59c:	080b5001 	jmpi	80b500 <_setlocale_r>

0080b5a0 <_lseek_r>:
  80b5a0:	defffd04 	addi	sp,sp,-12
  80b5a4:	dc000015 	stw	r16,0(sp)
  80b5a8:	040020b4 	movhi	r16,130
  80b5ac:	84231204 	addi	r16,r16,-29624
  80b5b0:	dc400115 	stw	r17,4(sp)
  80b5b4:	80000015 	stw	zero,0(r16)
  80b5b8:	2023883a 	mov	r17,r4
  80b5bc:	2809883a 	mov	r4,r5
  80b5c0:	300b883a 	mov	r5,r6
  80b5c4:	380d883a 	mov	r6,r7
  80b5c8:	dfc00215 	stw	ra,8(sp)
  80b5cc:	08123300 	call	812330 <lseek>
  80b5d0:	1007883a 	mov	r3,r2
  80b5d4:	00bfffc4 	movi	r2,-1
  80b5d8:	18800626 	beq	r3,r2,80b5f4 <_lseek_r+0x54>
  80b5dc:	1805883a 	mov	r2,r3
  80b5e0:	dfc00217 	ldw	ra,8(sp)
  80b5e4:	dc400117 	ldw	r17,4(sp)
  80b5e8:	dc000017 	ldw	r16,0(sp)
  80b5ec:	dec00304 	addi	sp,sp,12
  80b5f0:	f800283a 	ret
  80b5f4:	80800017 	ldw	r2,0(r16)
  80b5f8:	103ff826 	beq	r2,zero,80b5dc <_lseek_r+0x3c>
  80b5fc:	88800015 	stw	r2,0(r17)
  80b600:	1805883a 	mov	r2,r3
  80b604:	dfc00217 	ldw	ra,8(sp)
  80b608:	dc400117 	ldw	r17,4(sp)
  80b60c:	dc000017 	ldw	r16,0(sp)
  80b610:	dec00304 	addi	sp,sp,12
  80b614:	f800283a 	ret

0080b618 <_mbrtowc_r>:
  80b618:	defffc04 	addi	sp,sp,-16
  80b61c:	dc400215 	stw	r17,8(sp)
  80b620:	dc000115 	stw	r16,4(sp)
  80b624:	dfc00315 	stw	ra,12(sp)
  80b628:	dc000417 	ldw	r16,16(sp)
  80b62c:	2023883a 	mov	r17,r4
  80b630:	30000f26 	beq	r6,zero,80b670 <_mbrtowc_r+0x58>
  80b634:	dc000015 	stw	r16,0(sp)
  80b638:	080b6d80 	call	80b6d8 <_mbtowc_r>
  80b63c:	1007883a 	mov	r3,r2
  80b640:	00bfffc4 	movi	r2,-1
  80b644:	1809883a 	mov	r4,r3
  80b648:	1880111e 	bne	r3,r2,80b690 <_mbrtowc_r+0x78>
  80b64c:	80000015 	stw	zero,0(r16)
  80b650:	00802284 	movi	r2,138
  80b654:	88800015 	stw	r2,0(r17)
  80b658:	2005883a 	mov	r2,r4
  80b65c:	dfc00317 	ldw	ra,12(sp)
  80b660:	dc400217 	ldw	r17,8(sp)
  80b664:	dc000117 	ldw	r16,4(sp)
  80b668:	dec00404 	addi	sp,sp,16
  80b66c:	f800283a 	ret
  80b670:	000b883a 	mov	r5,zero
  80b674:	01802074 	movhi	r6,129
  80b678:	3194e904 	addi	r6,r6,21412
  80b67c:	01c00044 	movi	r7,1
  80b680:	dc000015 	stw	r16,0(sp)
  80b684:	080b6d80 	call	80b6d8 <_mbtowc_r>
  80b688:	1007883a 	mov	r3,r2
  80b68c:	003fec06 	br	80b640 <_mbrtowc_r+0x28>
  80b690:	1809883a 	mov	r4,r3
  80b694:	003ff006 	br	80b658 <_mbrtowc_r+0x40>

0080b698 <mbrtowc>:
  80b698:	00802074 	movhi	r2,129
  80b69c:	109c2904 	addi	r2,r2,28836
  80b6a0:	2017883a 	mov	r11,r4
  80b6a4:	11000017 	ldw	r4,0(r2)
  80b6a8:	defffe04 	addi	sp,sp,-8
  80b6ac:	3013883a 	mov	r9,r6
  80b6b0:	2805883a 	mov	r2,r5
  80b6b4:	d9c00015 	stw	r7,0(sp)
  80b6b8:	580b883a 	mov	r5,r11
  80b6bc:	100d883a 	mov	r6,r2
  80b6c0:	480f883a 	mov	r7,r9
  80b6c4:	dfc00115 	stw	ra,4(sp)
  80b6c8:	080b6180 	call	80b618 <_mbrtowc_r>
  80b6cc:	dfc00117 	ldw	ra,4(sp)
  80b6d0:	dec00204 	addi	sp,sp,8
  80b6d4:	f800283a 	ret

0080b6d8 <_mbtowc_r>:
  80b6d8:	deffff04 	addi	sp,sp,-4
  80b6dc:	0005883a 	mov	r2,zero
  80b6e0:	28000326 	beq	r5,zero,80b6f0 <_mbtowc_r+0x18>
  80b6e4:	3000041e 	bne	r6,zero,80b6f8 <_mbtowc_r+0x20>
  80b6e8:	dec00104 	addi	sp,sp,4
  80b6ec:	f800283a 	ret
  80b6f0:	d80b883a 	mov	r5,sp
  80b6f4:	303ffc26 	beq	r6,zero,80b6e8 <_mbtowc_r+0x10>
  80b6f8:	00bfff84 	movi	r2,-2
  80b6fc:	383ffa26 	beq	r7,zero,80b6e8 <_mbtowc_r+0x10>
  80b700:	30800003 	ldbu	r2,0(r6)
  80b704:	28800015 	stw	r2,0(r5)
  80b708:	30c00003 	ldbu	r3,0(r6)
  80b70c:	1804c03a 	cmpne	r2,r3,zero
  80b710:	dec00104 	addi	sp,sp,4
  80b714:	f800283a 	ret

0080b718 <memmove>:
  80b718:	2807883a 	mov	r3,r5
  80b71c:	2011883a 	mov	r8,r4
  80b720:	29000c2e 	bgeu	r5,r4,80b754 <memmove+0x3c>
  80b724:	298f883a 	add	r7,r5,r6
  80b728:	21c00a2e 	bgeu	r4,r7,80b754 <memmove+0x3c>
  80b72c:	30000726 	beq	r6,zero,80b74c <memmove+0x34>
  80b730:	2187883a 	add	r3,r4,r6
  80b734:	198dc83a 	sub	r6,r3,r6
  80b738:	39ffffc4 	addi	r7,r7,-1
  80b73c:	38800003 	ldbu	r2,0(r7)
  80b740:	18ffffc4 	addi	r3,r3,-1
  80b744:	18800005 	stb	r2,0(r3)
  80b748:	19bffb1e 	bne	r3,r6,80b738 <memmove+0x20>
  80b74c:	2005883a 	mov	r2,r4
  80b750:	f800283a 	ret
  80b754:	01c003c4 	movi	r7,15
  80b758:	39800a36 	bltu	r7,r6,80b784 <memmove+0x6c>
  80b75c:	303ffb26 	beq	r6,zero,80b74c <memmove+0x34>
  80b760:	400f883a 	mov	r7,r8
  80b764:	320d883a 	add	r6,r6,r8
  80b768:	28800003 	ldbu	r2,0(r5)
  80b76c:	29400044 	addi	r5,r5,1
  80b770:	38800005 	stb	r2,0(r7)
  80b774:	39c00044 	addi	r7,r7,1
  80b778:	39bffb1e 	bne	r7,r6,80b768 <memmove+0x50>
  80b77c:	2005883a 	mov	r2,r4
  80b780:	f800283a 	ret
  80b784:	1904b03a 	or	r2,r3,r4
  80b788:	108000cc 	andi	r2,r2,3
  80b78c:	103ff31e 	bne	r2,zero,80b75c <memmove+0x44>
  80b790:	3811883a 	mov	r8,r7
  80b794:	180b883a 	mov	r5,r3
  80b798:	200f883a 	mov	r7,r4
  80b79c:	28c00017 	ldw	r3,0(r5)
  80b7a0:	31bffc04 	addi	r6,r6,-16
  80b7a4:	38c00015 	stw	r3,0(r7)
  80b7a8:	28800117 	ldw	r2,4(r5)
  80b7ac:	38800115 	stw	r2,4(r7)
  80b7b0:	28c00217 	ldw	r3,8(r5)
  80b7b4:	38c00215 	stw	r3,8(r7)
  80b7b8:	28800317 	ldw	r2,12(r5)
  80b7bc:	29400404 	addi	r5,r5,16
  80b7c0:	38800315 	stw	r2,12(r7)
  80b7c4:	39c00404 	addi	r7,r7,16
  80b7c8:	41bff436 	bltu	r8,r6,80b79c <memmove+0x84>
  80b7cc:	008000c4 	movi	r2,3
  80b7d0:	1180072e 	bgeu	r2,r6,80b7f0 <memmove+0xd8>
  80b7d4:	1007883a 	mov	r3,r2
  80b7d8:	28800017 	ldw	r2,0(r5)
  80b7dc:	31bfff04 	addi	r6,r6,-4
  80b7e0:	29400104 	addi	r5,r5,4
  80b7e4:	38800015 	stw	r2,0(r7)
  80b7e8:	39c00104 	addi	r7,r7,4
  80b7ec:	19bffa36 	bltu	r3,r6,80b7d8 <memmove+0xc0>
  80b7f0:	3811883a 	mov	r8,r7
  80b7f4:	003fd906 	br	80b75c <memmove+0x44>

0080b7f8 <_Bfree>:
  80b7f8:	28000826 	beq	r5,zero,80b81c <_Bfree+0x24>
  80b7fc:	28800117 	ldw	r2,4(r5)
  80b800:	21001317 	ldw	r4,76(r4)
  80b804:	1085883a 	add	r2,r2,r2
  80b808:	1085883a 	add	r2,r2,r2
  80b80c:	1105883a 	add	r2,r2,r4
  80b810:	10c00017 	ldw	r3,0(r2)
  80b814:	28c00015 	stw	r3,0(r5)
  80b818:	11400015 	stw	r5,0(r2)
  80b81c:	f800283a 	ret

0080b820 <__hi0bits>:
  80b820:	20bfffec 	andhi	r2,r4,65535
  80b824:	10001426 	beq	r2,zero,80b878 <__hi0bits+0x58>
  80b828:	0007883a 	mov	r3,zero
  80b82c:	20bfc02c 	andhi	r2,r4,65280
  80b830:	1000021e 	bne	r2,zero,80b83c <__hi0bits+0x1c>
  80b834:	2008923a 	slli	r4,r4,8
  80b838:	18c00204 	addi	r3,r3,8
  80b83c:	20bc002c 	andhi	r2,r4,61440
  80b840:	1000021e 	bne	r2,zero,80b84c <__hi0bits+0x2c>
  80b844:	2008913a 	slli	r4,r4,4
  80b848:	18c00104 	addi	r3,r3,4
  80b84c:	20b0002c 	andhi	r2,r4,49152
  80b850:	1000031e 	bne	r2,zero,80b860 <__hi0bits+0x40>
  80b854:	2105883a 	add	r2,r4,r4
  80b858:	18c00084 	addi	r3,r3,2
  80b85c:	1089883a 	add	r4,r2,r2
  80b860:	20000316 	blt	r4,zero,80b870 <__hi0bits+0x50>
  80b864:	2090002c 	andhi	r2,r4,16384
  80b868:	10000626 	beq	r2,zero,80b884 <__hi0bits+0x64>
  80b86c:	18c00044 	addi	r3,r3,1
  80b870:	1805883a 	mov	r2,r3
  80b874:	f800283a 	ret
  80b878:	2008943a 	slli	r4,r4,16
  80b87c:	00c00404 	movi	r3,16
  80b880:	003fea06 	br	80b82c <__hi0bits+0xc>
  80b884:	00c00804 	movi	r3,32
  80b888:	1805883a 	mov	r2,r3
  80b88c:	f800283a 	ret

0080b890 <__lo0bits>:
  80b890:	20c00017 	ldw	r3,0(r4)
  80b894:	188001cc 	andi	r2,r3,7
  80b898:	10000a26 	beq	r2,zero,80b8c4 <__lo0bits+0x34>
  80b89c:	1880004c 	andi	r2,r3,1
  80b8a0:	1005003a 	cmpeq	r2,r2,zero
  80b8a4:	10002126 	beq	r2,zero,80b92c <__lo0bits+0x9c>
  80b8a8:	1880008c 	andi	r2,r3,2
  80b8ac:	1000251e 	bne	r2,zero,80b944 <__lo0bits+0xb4>
  80b8b0:	1804d0ba 	srli	r2,r3,2
  80b8b4:	01400084 	movi	r5,2
  80b8b8:	20800015 	stw	r2,0(r4)
  80b8bc:	2805883a 	mov	r2,r5
  80b8c0:	f800283a 	ret
  80b8c4:	18bfffcc 	andi	r2,r3,65535
  80b8c8:	10001526 	beq	r2,zero,80b920 <__lo0bits+0x90>
  80b8cc:	000b883a 	mov	r5,zero
  80b8d0:	18803fcc 	andi	r2,r3,255
  80b8d4:	1000021e 	bne	r2,zero,80b8e0 <__lo0bits+0x50>
  80b8d8:	1806d23a 	srli	r3,r3,8
  80b8dc:	29400204 	addi	r5,r5,8
  80b8e0:	188003cc 	andi	r2,r3,15
  80b8e4:	1000021e 	bne	r2,zero,80b8f0 <__lo0bits+0x60>
  80b8e8:	1806d13a 	srli	r3,r3,4
  80b8ec:	29400104 	addi	r5,r5,4
  80b8f0:	188000cc 	andi	r2,r3,3
  80b8f4:	1000021e 	bne	r2,zero,80b900 <__lo0bits+0x70>
  80b8f8:	1806d0ba 	srli	r3,r3,2
  80b8fc:	29400084 	addi	r5,r5,2
  80b900:	1880004c 	andi	r2,r3,1
  80b904:	1000031e 	bne	r2,zero,80b914 <__lo0bits+0x84>
  80b908:	1806d07a 	srli	r3,r3,1
  80b90c:	18000a26 	beq	r3,zero,80b938 <__lo0bits+0xa8>
  80b910:	29400044 	addi	r5,r5,1
  80b914:	2805883a 	mov	r2,r5
  80b918:	20c00015 	stw	r3,0(r4)
  80b91c:	f800283a 	ret
  80b920:	1806d43a 	srli	r3,r3,16
  80b924:	01400404 	movi	r5,16
  80b928:	003fe906 	br	80b8d0 <__lo0bits+0x40>
  80b92c:	000b883a 	mov	r5,zero
  80b930:	2805883a 	mov	r2,r5
  80b934:	f800283a 	ret
  80b938:	01400804 	movi	r5,32
  80b93c:	2805883a 	mov	r2,r5
  80b940:	f800283a 	ret
  80b944:	1804d07a 	srli	r2,r3,1
  80b948:	01400044 	movi	r5,1
  80b94c:	20800015 	stw	r2,0(r4)
  80b950:	003fda06 	br	80b8bc <__lo0bits+0x2c>

0080b954 <__mcmp>:
  80b954:	20800417 	ldw	r2,16(r4)
  80b958:	28c00417 	ldw	r3,16(r5)
  80b95c:	10cfc83a 	sub	r7,r2,r3
  80b960:	38000c1e 	bne	r7,zero,80b994 <__mcmp+0x40>
  80b964:	18c5883a 	add	r2,r3,r3
  80b968:	1085883a 	add	r2,r2,r2
  80b96c:	10c00504 	addi	r3,r2,20
  80b970:	21000504 	addi	r4,r4,20
  80b974:	28cb883a 	add	r5,r5,r3
  80b978:	2085883a 	add	r2,r4,r2
  80b97c:	10bfff04 	addi	r2,r2,-4
  80b980:	297fff04 	addi	r5,r5,-4
  80b984:	11800017 	ldw	r6,0(r2)
  80b988:	28c00017 	ldw	r3,0(r5)
  80b98c:	30c0031e 	bne	r6,r3,80b99c <__mcmp+0x48>
  80b990:	20bffa36 	bltu	r4,r2,80b97c <__mcmp+0x28>
  80b994:	3805883a 	mov	r2,r7
  80b998:	f800283a 	ret
  80b99c:	30c00336 	bltu	r6,r3,80b9ac <__mcmp+0x58>
  80b9a0:	01c00044 	movi	r7,1
  80b9a4:	3805883a 	mov	r2,r7
  80b9a8:	f800283a 	ret
  80b9ac:	01ffffc4 	movi	r7,-1
  80b9b0:	003ff806 	br	80b994 <__mcmp+0x40>

0080b9b4 <__ulp>:
  80b9b4:	295ffc2c 	andhi	r5,r5,32752
  80b9b8:	013f3034 	movhi	r4,64704
  80b9bc:	290b883a 	add	r5,r5,r4
  80b9c0:	0145c83a 	sub	r2,zero,r5
  80b9c4:	1007d53a 	srai	r3,r2,20
  80b9c8:	000d883a 	mov	r6,zero
  80b9cc:	0140040e 	bge	zero,r5,80b9e0 <__ulp+0x2c>
  80b9d0:	280f883a 	mov	r7,r5
  80b9d4:	3807883a 	mov	r3,r7
  80b9d8:	3005883a 	mov	r2,r6
  80b9dc:	f800283a 	ret
  80b9e0:	008004c4 	movi	r2,19
  80b9e4:	193ffb04 	addi	r4,r3,-20
  80b9e8:	10c00c0e 	bge	r2,r3,80ba1c <__ulp+0x68>
  80b9ec:	008007c4 	movi	r2,31
  80b9f0:	1107c83a 	sub	r3,r2,r4
  80b9f4:	00800784 	movi	r2,30
  80b9f8:	01400044 	movi	r5,1
  80b9fc:	11000216 	blt	r2,r4,80ba08 <__ulp+0x54>
  80ba00:	00800044 	movi	r2,1
  80ba04:	10ca983a 	sll	r5,r2,r3
  80ba08:	000f883a 	mov	r7,zero
  80ba0c:	280d883a 	mov	r6,r5
  80ba10:	3807883a 	mov	r3,r7
  80ba14:	3005883a 	mov	r2,r6
  80ba18:	f800283a 	ret
  80ba1c:	00800234 	movhi	r2,8
  80ba20:	10cfd83a 	sra	r7,r2,r3
  80ba24:	000d883a 	mov	r6,zero
  80ba28:	3005883a 	mov	r2,r6
  80ba2c:	3807883a 	mov	r3,r7
  80ba30:	f800283a 	ret

0080ba34 <__b2d>:
  80ba34:	20800417 	ldw	r2,16(r4)
  80ba38:	defff904 	addi	sp,sp,-28
  80ba3c:	dd000415 	stw	r20,16(sp)
  80ba40:	1085883a 	add	r2,r2,r2
  80ba44:	25000504 	addi	r20,r4,20
  80ba48:	1085883a 	add	r2,r2,r2
  80ba4c:	dc000015 	stw	r16,0(sp)
  80ba50:	a0a1883a 	add	r16,r20,r2
  80ba54:	dd400515 	stw	r21,20(sp)
  80ba58:	857fff17 	ldw	r21,-4(r16)
  80ba5c:	dc400115 	stw	r17,4(sp)
  80ba60:	dfc00615 	stw	ra,24(sp)
  80ba64:	a809883a 	mov	r4,r21
  80ba68:	2823883a 	mov	r17,r5
  80ba6c:	dcc00315 	stw	r19,12(sp)
  80ba70:	dc800215 	stw	r18,8(sp)
  80ba74:	080b8200 	call	80b820 <__hi0bits>
  80ba78:	100b883a 	mov	r5,r2
  80ba7c:	00800804 	movi	r2,32
  80ba80:	1145c83a 	sub	r2,r2,r5
  80ba84:	88800015 	stw	r2,0(r17)
  80ba88:	00800284 	movi	r2,10
  80ba8c:	80ffff04 	addi	r3,r16,-4
  80ba90:	11401416 	blt	r2,r5,80bae4 <__b2d+0xb0>
  80ba94:	008002c4 	movi	r2,11
  80ba98:	1149c83a 	sub	r4,r2,r5
  80ba9c:	a0c02736 	bltu	r20,r3,80bb3c <__b2d+0x108>
  80baa0:	000d883a 	mov	r6,zero
  80baa4:	28800544 	addi	r2,r5,21
  80baa8:	a906d83a 	srl	r3,r21,r4
  80baac:	a884983a 	sll	r2,r21,r2
  80bab0:	1ccffc34 	orhi	r19,r3,16368
  80bab4:	11a4b03a 	or	r18,r2,r6
  80bab8:	9005883a 	mov	r2,r18
  80babc:	9807883a 	mov	r3,r19
  80bac0:	dfc00617 	ldw	ra,24(sp)
  80bac4:	dd400517 	ldw	r21,20(sp)
  80bac8:	dd000417 	ldw	r20,16(sp)
  80bacc:	dcc00317 	ldw	r19,12(sp)
  80bad0:	dc800217 	ldw	r18,8(sp)
  80bad4:	dc400117 	ldw	r17,4(sp)
  80bad8:	dc000017 	ldw	r16,0(sp)
  80badc:	dec00704 	addi	sp,sp,28
  80bae0:	f800283a 	ret
  80bae4:	a0c00e36 	bltu	r20,r3,80bb20 <__b2d+0xec>
  80bae8:	293ffd44 	addi	r4,r5,-11
  80baec:	000d883a 	mov	r6,zero
  80baf0:	20000f26 	beq	r4,zero,80bb30 <__b2d+0xfc>
  80baf4:	00800804 	movi	r2,32
  80baf8:	110bc83a 	sub	r5,r2,r4
  80bafc:	a0c01236 	bltu	r20,r3,80bb48 <__b2d+0x114>
  80bb00:	000f883a 	mov	r7,zero
  80bb04:	a904983a 	sll	r2,r21,r4
  80bb08:	3146d83a 	srl	r3,r6,r5
  80bb0c:	3108983a 	sll	r4,r6,r4
  80bb10:	108ffc34 	orhi	r2,r2,16368
  80bb14:	18a6b03a 	or	r19,r3,r2
  80bb18:	3924b03a 	or	r18,r7,r4
  80bb1c:	003fe606 	br	80bab8 <__b2d+0x84>
  80bb20:	293ffd44 	addi	r4,r5,-11
  80bb24:	81bffe17 	ldw	r6,-8(r16)
  80bb28:	80fffe04 	addi	r3,r16,-8
  80bb2c:	203ff11e 	bne	r4,zero,80baf4 <__b2d+0xc0>
  80bb30:	accffc34 	orhi	r19,r21,16368
  80bb34:	3025883a 	mov	r18,r6
  80bb38:	003fdf06 	br	80bab8 <__b2d+0x84>
  80bb3c:	18bfff17 	ldw	r2,-4(r3)
  80bb40:	110cd83a 	srl	r6,r2,r4
  80bb44:	003fd706 	br	80baa4 <__b2d+0x70>
  80bb48:	18bfff17 	ldw	r2,-4(r3)
  80bb4c:	114ed83a 	srl	r7,r2,r5
  80bb50:	003fec06 	br	80bb04 <__b2d+0xd0>

0080bb54 <__ratio>:
  80bb54:	defff904 	addi	sp,sp,-28
  80bb58:	dc400215 	stw	r17,8(sp)
  80bb5c:	2823883a 	mov	r17,r5
  80bb60:	d80b883a 	mov	r5,sp
  80bb64:	dfc00615 	stw	ra,24(sp)
  80bb68:	dd000515 	stw	r20,20(sp)
  80bb6c:	dcc00415 	stw	r19,16(sp)
  80bb70:	dc800315 	stw	r18,12(sp)
  80bb74:	2025883a 	mov	r18,r4
  80bb78:	080ba340 	call	80ba34 <__b2d>
  80bb7c:	8809883a 	mov	r4,r17
  80bb80:	d9400104 	addi	r5,sp,4
  80bb84:	1027883a 	mov	r19,r2
  80bb88:	1829883a 	mov	r20,r3
  80bb8c:	080ba340 	call	80ba34 <__b2d>
  80bb90:	89000417 	ldw	r4,16(r17)
  80bb94:	91c00417 	ldw	r7,16(r18)
  80bb98:	d9800117 	ldw	r6,4(sp)
  80bb9c:	180b883a 	mov	r5,r3
  80bba0:	390fc83a 	sub	r7,r7,r4
  80bba4:	1009883a 	mov	r4,r2
  80bba8:	d8800017 	ldw	r2,0(sp)
  80bbac:	380e917a 	slli	r7,r7,5
  80bbb0:	2011883a 	mov	r8,r4
  80bbb4:	1185c83a 	sub	r2,r2,r6
  80bbb8:	11c5883a 	add	r2,r2,r7
  80bbbc:	1006953a 	slli	r3,r2,20
  80bbc0:	2813883a 	mov	r9,r5
  80bbc4:	00800d0e 	bge	zero,r2,80bbfc <__ratio+0xa8>
  80bbc8:	1d29883a 	add	r20,r3,r20
  80bbcc:	a00b883a 	mov	r5,r20
  80bbd0:	480f883a 	mov	r7,r9
  80bbd4:	9809883a 	mov	r4,r19
  80bbd8:	400d883a 	mov	r6,r8
  80bbdc:	08023bc0 	call	8023bc <__divdf3>
  80bbe0:	dfc00617 	ldw	ra,24(sp)
  80bbe4:	dd000517 	ldw	r20,20(sp)
  80bbe8:	dcc00417 	ldw	r19,16(sp)
  80bbec:	dc800317 	ldw	r18,12(sp)
  80bbf0:	dc400217 	ldw	r17,8(sp)
  80bbf4:	dec00704 	addi	sp,sp,28
  80bbf8:	f800283a 	ret
  80bbfc:	28d3c83a 	sub	r9,r5,r3
  80bc00:	003ff206 	br	80bbcc <__ratio+0x78>

0080bc04 <_mprec_log10>:
  80bc04:	defffe04 	addi	sp,sp,-8
  80bc08:	008005c4 	movi	r2,23
  80bc0c:	dc000015 	stw	r16,0(sp)
  80bc10:	dfc00115 	stw	ra,4(sp)
  80bc14:	2021883a 	mov	r16,r4
  80bc18:	11000c16 	blt	r2,r4,80bc4c <_mprec_log10+0x48>
  80bc1c:	200490fa 	slli	r2,r4,3
  80bc20:	00c02074 	movhi	r3,129
  80bc24:	18d51804 	addi	r3,r3,21600
  80bc28:	10c5883a 	add	r2,r2,r3
  80bc2c:	12400117 	ldw	r9,4(r2)
  80bc30:	12000017 	ldw	r8,0(r2)
  80bc34:	4807883a 	mov	r3,r9
  80bc38:	4005883a 	mov	r2,r8
  80bc3c:	dfc00117 	ldw	ra,4(sp)
  80bc40:	dc000017 	ldw	r16,0(sp)
  80bc44:	dec00204 	addi	sp,sp,8
  80bc48:	f800283a 	ret
  80bc4c:	0011883a 	mov	r8,zero
  80bc50:	024ffc34 	movhi	r9,16368
  80bc54:	0005883a 	mov	r2,zero
  80bc58:	00d00934 	movhi	r3,16420
  80bc5c:	480b883a 	mov	r5,r9
  80bc60:	4009883a 	mov	r4,r8
  80bc64:	180f883a 	mov	r7,r3
  80bc68:	100d883a 	mov	r6,r2
  80bc6c:	0810fb40 	call	810fb4 <__muldf3>
  80bc70:	843fffc4 	addi	r16,r16,-1
  80bc74:	1011883a 	mov	r8,r2
  80bc78:	1813883a 	mov	r9,r3
  80bc7c:	803ff51e 	bne	r16,zero,80bc54 <_mprec_log10+0x50>
  80bc80:	4005883a 	mov	r2,r8
  80bc84:	4807883a 	mov	r3,r9
  80bc88:	dfc00117 	ldw	ra,4(sp)
  80bc8c:	dc000017 	ldw	r16,0(sp)
  80bc90:	dec00204 	addi	sp,sp,8
  80bc94:	f800283a 	ret

0080bc98 <__copybits>:
  80bc98:	297fffc4 	addi	r5,r5,-1
  80bc9c:	30800417 	ldw	r2,16(r6)
  80bca0:	280bd17a 	srai	r5,r5,5
  80bca4:	31800504 	addi	r6,r6,20
  80bca8:	1085883a 	add	r2,r2,r2
  80bcac:	294b883a 	add	r5,r5,r5
  80bcb0:	294b883a 	add	r5,r5,r5
  80bcb4:	1085883a 	add	r2,r2,r2
  80bcb8:	290b883a 	add	r5,r5,r4
  80bcbc:	3087883a 	add	r3,r6,r2
  80bcc0:	29400104 	addi	r5,r5,4
  80bcc4:	30c0052e 	bgeu	r6,r3,80bcdc <__copybits+0x44>
  80bcc8:	30800017 	ldw	r2,0(r6)
  80bccc:	31800104 	addi	r6,r6,4
  80bcd0:	20800015 	stw	r2,0(r4)
  80bcd4:	21000104 	addi	r4,r4,4
  80bcd8:	30fffb36 	bltu	r6,r3,80bcc8 <__copybits+0x30>
  80bcdc:	2140032e 	bgeu	r4,r5,80bcec <__copybits+0x54>
  80bce0:	20000015 	stw	zero,0(r4)
  80bce4:	21000104 	addi	r4,r4,4
  80bce8:	217ffd36 	bltu	r4,r5,80bce0 <__copybits+0x48>
  80bcec:	f800283a 	ret

0080bcf0 <__any_on>:
  80bcf0:	20800417 	ldw	r2,16(r4)
  80bcf4:	2807d17a 	srai	r3,r5,5
  80bcf8:	21000504 	addi	r4,r4,20
  80bcfc:	10c00d0e 	bge	r2,r3,80bd34 <__any_on+0x44>
  80bd00:	1085883a 	add	r2,r2,r2
  80bd04:	1085883a 	add	r2,r2,r2
  80bd08:	208d883a 	add	r6,r4,r2
  80bd0c:	2180182e 	bgeu	r4,r6,80bd70 <__any_on+0x80>
  80bd10:	30bfff17 	ldw	r2,-4(r6)
  80bd14:	30ffff04 	addi	r3,r6,-4
  80bd18:	1000041e 	bne	r2,zero,80bd2c <__any_on+0x3c>
  80bd1c:	20c0142e 	bgeu	r4,r3,80bd70 <__any_on+0x80>
  80bd20:	18ffff04 	addi	r3,r3,-4
  80bd24:	18800017 	ldw	r2,0(r3)
  80bd28:	103ffc26 	beq	r2,zero,80bd1c <__any_on+0x2c>
  80bd2c:	00800044 	movi	r2,1
  80bd30:	f800283a 	ret
  80bd34:	18800a0e 	bge	r3,r2,80bd60 <__any_on+0x70>
  80bd38:	294007cc 	andi	r5,r5,31
  80bd3c:	28000826 	beq	r5,zero,80bd60 <__any_on+0x70>
  80bd40:	18c5883a 	add	r2,r3,r3
  80bd44:	1085883a 	add	r2,r2,r2
  80bd48:	208d883a 	add	r6,r4,r2
  80bd4c:	30c00017 	ldw	r3,0(r6)
  80bd50:	1944d83a 	srl	r2,r3,r5
  80bd54:	1144983a 	sll	r2,r2,r5
  80bd58:	18bff41e 	bne	r3,r2,80bd2c <__any_on+0x3c>
  80bd5c:	003feb06 	br	80bd0c <__any_on+0x1c>
  80bd60:	18c5883a 	add	r2,r3,r3
  80bd64:	1085883a 	add	r2,r2,r2
  80bd68:	208d883a 	add	r6,r4,r2
  80bd6c:	003fe706 	br	80bd0c <__any_on+0x1c>
  80bd70:	0005883a 	mov	r2,zero
  80bd74:	f800283a 	ret

0080bd78 <_Balloc>:
  80bd78:	20c01317 	ldw	r3,76(r4)
  80bd7c:	defffb04 	addi	sp,sp,-20
  80bd80:	dcc00315 	stw	r19,12(sp)
  80bd84:	dc800215 	stw	r18,8(sp)
  80bd88:	dfc00415 	stw	ra,16(sp)
  80bd8c:	2825883a 	mov	r18,r5
  80bd90:	dc400115 	stw	r17,4(sp)
  80bd94:	dc000015 	stw	r16,0(sp)
  80bd98:	2027883a 	mov	r19,r4
  80bd9c:	01800404 	movi	r6,16
  80bda0:	01400104 	movi	r5,4
  80bda4:	18001726 	beq	r3,zero,80be04 <_Balloc+0x8c>
  80bda8:	01400044 	movi	r5,1
  80bdac:	9485883a 	add	r2,r18,r18
  80bdb0:	2ca2983a 	sll	r17,r5,r18
  80bdb4:	1085883a 	add	r2,r2,r2
  80bdb8:	10c7883a 	add	r3,r2,r3
  80bdbc:	1c000017 	ldw	r16,0(r3)
  80bdc0:	8c4d883a 	add	r6,r17,r17
  80bdc4:	318d883a 	add	r6,r6,r6
  80bdc8:	9809883a 	mov	r4,r19
  80bdcc:	31800504 	addi	r6,r6,20
  80bdd0:	80001226 	beq	r16,zero,80be1c <_Balloc+0xa4>
  80bdd4:	80800017 	ldw	r2,0(r16)
  80bdd8:	18800015 	stw	r2,0(r3)
  80bddc:	80000415 	stw	zero,16(r16)
  80bde0:	80000315 	stw	zero,12(r16)
  80bde4:	8005883a 	mov	r2,r16
  80bde8:	dfc00417 	ldw	ra,16(sp)
  80bdec:	dcc00317 	ldw	r19,12(sp)
  80bdf0:	dc800217 	ldw	r18,8(sp)
  80bdf4:	dc400117 	ldw	r17,4(sp)
  80bdf8:	dc000017 	ldw	r16,0(sp)
  80bdfc:	dec00504 	addi	sp,sp,20
  80be00:	f800283a 	ret
  80be04:	0802cc80 	call	802cc8 <_calloc_r>
  80be08:	1007883a 	mov	r3,r2
  80be0c:	0021883a 	mov	r16,zero
  80be10:	98801315 	stw	r2,76(r19)
  80be14:	103fe41e 	bne	r2,zero,80bda8 <_Balloc+0x30>
  80be18:	003ff206 	br	80bde4 <_Balloc+0x6c>
  80be1c:	0802cc80 	call	802cc8 <_calloc_r>
  80be20:	103ff026 	beq	r2,zero,80bde4 <_Balloc+0x6c>
  80be24:	1021883a 	mov	r16,r2
  80be28:	14800115 	stw	r18,4(r2)
  80be2c:	14400215 	stw	r17,8(r2)
  80be30:	003fea06 	br	80bddc <_Balloc+0x64>

0080be34 <__d2b>:
  80be34:	defff504 	addi	sp,sp,-44
  80be38:	dcc00515 	stw	r19,20(sp)
  80be3c:	04c00044 	movi	r19,1
  80be40:	dc000215 	stw	r16,8(sp)
  80be44:	2821883a 	mov	r16,r5
  80be48:	980b883a 	mov	r5,r19
  80be4c:	ddc00915 	stw	r23,36(sp)
  80be50:	dd800815 	stw	r22,32(sp)
  80be54:	dd400715 	stw	r21,28(sp)
  80be58:	dd000615 	stw	r20,24(sp)
  80be5c:	dc800415 	stw	r18,16(sp)
  80be60:	dc400315 	stw	r17,12(sp)
  80be64:	dfc00a15 	stw	ra,40(sp)
  80be68:	3023883a 	mov	r17,r6
  80be6c:	382d883a 	mov	r22,r7
  80be70:	ddc00b17 	ldw	r23,44(sp)
  80be74:	080bd780 	call	80bd78 <_Balloc>
  80be78:	1025883a 	mov	r18,r2
  80be7c:	00a00034 	movhi	r2,32768
  80be80:	10bfffc4 	addi	r2,r2,-1
  80be84:	8888703a 	and	r4,r17,r2
  80be88:	202ad53a 	srli	r21,r4,20
  80be8c:	00800434 	movhi	r2,16
  80be90:	10bfffc4 	addi	r2,r2,-1
  80be94:	8886703a 	and	r3,r17,r2
  80be98:	a829003a 	cmpeq	r20,r21,zero
  80be9c:	800b883a 	mov	r5,r16
  80bea0:	d8c00115 	stw	r3,4(sp)
  80bea4:	94000504 	addi	r16,r18,20
  80bea8:	a000021e 	bne	r20,zero,80beb4 <__d2b+0x80>
  80beac:	18c00434 	orhi	r3,r3,16
  80beb0:	d8c00115 	stw	r3,4(sp)
  80beb4:	28002726 	beq	r5,zero,80bf54 <__d2b+0x120>
  80beb8:	d809883a 	mov	r4,sp
  80bebc:	d9400015 	stw	r5,0(sp)
  80bec0:	080b8900 	call	80b890 <__lo0bits>
  80bec4:	100d883a 	mov	r6,r2
  80bec8:	10003526 	beq	r2,zero,80bfa0 <__d2b+0x16c>
  80becc:	d8c00117 	ldw	r3,4(sp)
  80bed0:	00800804 	movi	r2,32
  80bed4:	1185c83a 	sub	r2,r2,r6
  80bed8:	d9000017 	ldw	r4,0(sp)
  80bedc:	1886983a 	sll	r3,r3,r2
  80bee0:	1906b03a 	or	r3,r3,r4
  80bee4:	90c00515 	stw	r3,20(r18)
  80bee8:	d8c00117 	ldw	r3,4(sp)
  80beec:	1986d83a 	srl	r3,r3,r6
  80bef0:	d8c00115 	stw	r3,4(sp)
  80bef4:	180b003a 	cmpeq	r5,r3,zero
  80bef8:	00800084 	movi	r2,2
  80befc:	114bc83a 	sub	r5,r2,r5
  80bf00:	80c00115 	stw	r3,4(r16)
  80bf04:	91400415 	stw	r5,16(r18)
  80bf08:	a0001a1e 	bne	r20,zero,80bf74 <__d2b+0x140>
  80bf0c:	3545883a 	add	r2,r6,r21
  80bf10:	10bef344 	addi	r2,r2,-1075
  80bf14:	00c00d44 	movi	r3,53
  80bf18:	b0800015 	stw	r2,0(r22)
  80bf1c:	1987c83a 	sub	r3,r3,r6
  80bf20:	b8c00015 	stw	r3,0(r23)
  80bf24:	9005883a 	mov	r2,r18
  80bf28:	dfc00a17 	ldw	ra,40(sp)
  80bf2c:	ddc00917 	ldw	r23,36(sp)
  80bf30:	dd800817 	ldw	r22,32(sp)
  80bf34:	dd400717 	ldw	r21,28(sp)
  80bf38:	dd000617 	ldw	r20,24(sp)
  80bf3c:	dcc00517 	ldw	r19,20(sp)
  80bf40:	dc800417 	ldw	r18,16(sp)
  80bf44:	dc400317 	ldw	r17,12(sp)
  80bf48:	dc000217 	ldw	r16,8(sp)
  80bf4c:	dec00b04 	addi	sp,sp,44
  80bf50:	f800283a 	ret
  80bf54:	d9000104 	addi	r4,sp,4
  80bf58:	080b8900 	call	80b890 <__lo0bits>
  80bf5c:	11800804 	addi	r6,r2,32
  80bf60:	d8800117 	ldw	r2,4(sp)
  80bf64:	94c00415 	stw	r19,16(r18)
  80bf68:	980b883a 	mov	r5,r19
  80bf6c:	90800515 	stw	r2,20(r18)
  80bf70:	a03fe626 	beq	r20,zero,80bf0c <__d2b+0xd8>
  80bf74:	2945883a 	add	r2,r5,r5
  80bf78:	1085883a 	add	r2,r2,r2
  80bf7c:	1405883a 	add	r2,r2,r16
  80bf80:	113fff17 	ldw	r4,-4(r2)
  80bf84:	30fef384 	addi	r3,r6,-1074
  80bf88:	2820917a 	slli	r16,r5,5
  80bf8c:	b0c00015 	stw	r3,0(r22)
  80bf90:	080b8200 	call	80b820 <__hi0bits>
  80bf94:	80a1c83a 	sub	r16,r16,r2
  80bf98:	bc000015 	stw	r16,0(r23)
  80bf9c:	003fe106 	br	80bf24 <__d2b+0xf0>
  80bfa0:	d8800017 	ldw	r2,0(sp)
  80bfa4:	90800515 	stw	r2,20(r18)
  80bfa8:	d8c00117 	ldw	r3,4(sp)
  80bfac:	003fd106 	br	80bef4 <__d2b+0xc0>

0080bfb0 <__mdiff>:
  80bfb0:	defffb04 	addi	sp,sp,-20
  80bfb4:	dc000015 	stw	r16,0(sp)
  80bfb8:	2821883a 	mov	r16,r5
  80bfbc:	dc800215 	stw	r18,8(sp)
  80bfc0:	300b883a 	mov	r5,r6
  80bfc4:	2025883a 	mov	r18,r4
  80bfc8:	8009883a 	mov	r4,r16
  80bfcc:	dc400115 	stw	r17,4(sp)
  80bfd0:	dfc00415 	stw	ra,16(sp)
  80bfd4:	dcc00315 	stw	r19,12(sp)
  80bfd8:	3023883a 	mov	r17,r6
  80bfdc:	080b9540 	call	80b954 <__mcmp>
  80bfe0:	10004226 	beq	r2,zero,80c0ec <__mdiff+0x13c>
  80bfe4:	10005016 	blt	r2,zero,80c128 <__mdiff+0x178>
  80bfe8:	0027883a 	mov	r19,zero
  80bfec:	81400117 	ldw	r5,4(r16)
  80bff0:	9009883a 	mov	r4,r18
  80bff4:	080bd780 	call	80bd78 <_Balloc>
  80bff8:	1019883a 	mov	r12,r2
  80bffc:	82800417 	ldw	r10,16(r16)
  80c000:	88800417 	ldw	r2,16(r17)
  80c004:	81800504 	addi	r6,r16,20
  80c008:	5287883a 	add	r3,r10,r10
  80c00c:	1085883a 	add	r2,r2,r2
  80c010:	18c7883a 	add	r3,r3,r3
  80c014:	1085883a 	add	r2,r2,r2
  80c018:	8a000504 	addi	r8,r17,20
  80c01c:	64c00315 	stw	r19,12(r12)
  80c020:	30db883a 	add	r13,r6,r3
  80c024:	4097883a 	add	r11,r8,r2
  80c028:	61c00504 	addi	r7,r12,20
  80c02c:	0013883a 	mov	r9,zero
  80c030:	31000017 	ldw	r4,0(r6)
  80c034:	41400017 	ldw	r5,0(r8)
  80c038:	42000104 	addi	r8,r8,4
  80c03c:	20bfffcc 	andi	r2,r4,65535
  80c040:	28ffffcc 	andi	r3,r5,65535
  80c044:	10c5c83a 	sub	r2,r2,r3
  80c048:	1245883a 	add	r2,r2,r9
  80c04c:	2008d43a 	srli	r4,r4,16
  80c050:	280ad43a 	srli	r5,r5,16
  80c054:	1007d43a 	srai	r3,r2,16
  80c058:	3880000d 	sth	r2,0(r7)
  80c05c:	2149c83a 	sub	r4,r4,r5
  80c060:	20c9883a 	add	r4,r4,r3
  80c064:	3900008d 	sth	r4,2(r7)
  80c068:	31800104 	addi	r6,r6,4
  80c06c:	39c00104 	addi	r7,r7,4
  80c070:	2013d43a 	srai	r9,r4,16
  80c074:	42ffee36 	bltu	r8,r11,80c030 <__mdiff+0x80>
  80c078:	33400c2e 	bgeu	r6,r13,80c0ac <__mdiff+0xfc>
  80c07c:	30800017 	ldw	r2,0(r6)
  80c080:	31800104 	addi	r6,r6,4
  80c084:	10ffffcc 	andi	r3,r2,65535
  80c088:	1a47883a 	add	r3,r3,r9
  80c08c:	1004d43a 	srli	r2,r2,16
  80c090:	1809d43a 	srai	r4,r3,16
  80c094:	38c0000d 	sth	r3,0(r7)
  80c098:	1105883a 	add	r2,r2,r4
  80c09c:	3880008d 	sth	r2,2(r7)
  80c0a0:	1013d43a 	srai	r9,r2,16
  80c0a4:	39c00104 	addi	r7,r7,4
  80c0a8:	337ff436 	bltu	r6,r13,80c07c <__mdiff+0xcc>
  80c0ac:	38bfff17 	ldw	r2,-4(r7)
  80c0b0:	38ffff04 	addi	r3,r7,-4
  80c0b4:	1000041e 	bne	r2,zero,80c0c8 <__mdiff+0x118>
  80c0b8:	18ffff04 	addi	r3,r3,-4
  80c0bc:	18800017 	ldw	r2,0(r3)
  80c0c0:	52bfffc4 	addi	r10,r10,-1
  80c0c4:	103ffc26 	beq	r2,zero,80c0b8 <__mdiff+0x108>
  80c0c8:	6005883a 	mov	r2,r12
  80c0cc:	62800415 	stw	r10,16(r12)
  80c0d0:	dfc00417 	ldw	ra,16(sp)
  80c0d4:	dcc00317 	ldw	r19,12(sp)
  80c0d8:	dc800217 	ldw	r18,8(sp)
  80c0dc:	dc400117 	ldw	r17,4(sp)
  80c0e0:	dc000017 	ldw	r16,0(sp)
  80c0e4:	dec00504 	addi	sp,sp,20
  80c0e8:	f800283a 	ret
  80c0ec:	9009883a 	mov	r4,r18
  80c0f0:	000b883a 	mov	r5,zero
  80c0f4:	080bd780 	call	80bd78 <_Balloc>
  80c0f8:	1019883a 	mov	r12,r2
  80c0fc:	00800044 	movi	r2,1
  80c100:	60800415 	stw	r2,16(r12)
  80c104:	6005883a 	mov	r2,r12
  80c108:	60000515 	stw	zero,20(r12)
  80c10c:	dfc00417 	ldw	ra,16(sp)
  80c110:	dcc00317 	ldw	r19,12(sp)
  80c114:	dc800217 	ldw	r18,8(sp)
  80c118:	dc400117 	ldw	r17,4(sp)
  80c11c:	dc000017 	ldw	r16,0(sp)
  80c120:	dec00504 	addi	sp,sp,20
  80c124:	f800283a 	ret
  80c128:	880d883a 	mov	r6,r17
  80c12c:	04c00044 	movi	r19,1
  80c130:	8023883a 	mov	r17,r16
  80c134:	3021883a 	mov	r16,r6
  80c138:	003fac06 	br	80bfec <__mdiff+0x3c>

0080c13c <__lshift>:
  80c13c:	defff904 	addi	sp,sp,-28
  80c140:	28800417 	ldw	r2,16(r5)
  80c144:	dc000015 	stw	r16,0(sp)
  80c148:	3021d17a 	srai	r16,r6,5
  80c14c:	28c00217 	ldw	r3,8(r5)
  80c150:	10800044 	addi	r2,r2,1
  80c154:	dc400115 	stw	r17,4(sp)
  80c158:	80a3883a 	add	r17,r16,r2
  80c15c:	dd400515 	stw	r21,20(sp)
  80c160:	dd000415 	stw	r20,16(sp)
  80c164:	dc800215 	stw	r18,8(sp)
  80c168:	dfc00615 	stw	ra,24(sp)
  80c16c:	2825883a 	mov	r18,r5
  80c170:	dcc00315 	stw	r19,12(sp)
  80c174:	3029883a 	mov	r20,r6
  80c178:	202b883a 	mov	r21,r4
  80c17c:	29400117 	ldw	r5,4(r5)
  80c180:	1c40030e 	bge	r3,r17,80c190 <__lshift+0x54>
  80c184:	18c7883a 	add	r3,r3,r3
  80c188:	29400044 	addi	r5,r5,1
  80c18c:	1c7ffd16 	blt	r3,r17,80c184 <__lshift+0x48>
  80c190:	a809883a 	mov	r4,r21
  80c194:	080bd780 	call	80bd78 <_Balloc>
  80c198:	1027883a 	mov	r19,r2
  80c19c:	11400504 	addi	r5,r2,20
  80c1a0:	0400090e 	bge	zero,r16,80c1c8 <__lshift+0x8c>
  80c1a4:	2805883a 	mov	r2,r5
  80c1a8:	0007883a 	mov	r3,zero
  80c1ac:	18c00044 	addi	r3,r3,1
  80c1b0:	10000015 	stw	zero,0(r2)
  80c1b4:	10800104 	addi	r2,r2,4
  80c1b8:	80fffc1e 	bne	r16,r3,80c1ac <__lshift+0x70>
  80c1bc:	8405883a 	add	r2,r16,r16
  80c1c0:	1085883a 	add	r2,r2,r2
  80c1c4:	288b883a 	add	r5,r5,r2
  80c1c8:	90800417 	ldw	r2,16(r18)
  80c1cc:	91000504 	addi	r4,r18,20
  80c1d0:	a18007cc 	andi	r6,r20,31
  80c1d4:	1085883a 	add	r2,r2,r2
  80c1d8:	1085883a 	add	r2,r2,r2
  80c1dc:	208f883a 	add	r7,r4,r2
  80c1e0:	30001e26 	beq	r6,zero,80c25c <__lshift+0x120>
  80c1e4:	00800804 	movi	r2,32
  80c1e8:	1191c83a 	sub	r8,r2,r6
  80c1ec:	0007883a 	mov	r3,zero
  80c1f0:	20800017 	ldw	r2,0(r4)
  80c1f4:	1184983a 	sll	r2,r2,r6
  80c1f8:	1884b03a 	or	r2,r3,r2
  80c1fc:	28800015 	stw	r2,0(r5)
  80c200:	20c00017 	ldw	r3,0(r4)
  80c204:	21000104 	addi	r4,r4,4
  80c208:	29400104 	addi	r5,r5,4
  80c20c:	1a06d83a 	srl	r3,r3,r8
  80c210:	21fff736 	bltu	r4,r7,80c1f0 <__lshift+0xb4>
  80c214:	28c00015 	stw	r3,0(r5)
  80c218:	18000126 	beq	r3,zero,80c220 <__lshift+0xe4>
  80c21c:	8c400044 	addi	r17,r17,1
  80c220:	88bfffc4 	addi	r2,r17,-1
  80c224:	98800415 	stw	r2,16(r19)
  80c228:	a809883a 	mov	r4,r21
  80c22c:	900b883a 	mov	r5,r18
  80c230:	080b7f80 	call	80b7f8 <_Bfree>
  80c234:	9805883a 	mov	r2,r19
  80c238:	dfc00617 	ldw	ra,24(sp)
  80c23c:	dd400517 	ldw	r21,20(sp)
  80c240:	dd000417 	ldw	r20,16(sp)
  80c244:	dcc00317 	ldw	r19,12(sp)
  80c248:	dc800217 	ldw	r18,8(sp)
  80c24c:	dc400117 	ldw	r17,4(sp)
  80c250:	dc000017 	ldw	r16,0(sp)
  80c254:	dec00704 	addi	sp,sp,28
  80c258:	f800283a 	ret
  80c25c:	20800017 	ldw	r2,0(r4)
  80c260:	21000104 	addi	r4,r4,4
  80c264:	28800015 	stw	r2,0(r5)
  80c268:	29400104 	addi	r5,r5,4
  80c26c:	21ffec2e 	bgeu	r4,r7,80c220 <__lshift+0xe4>
  80c270:	20800017 	ldw	r2,0(r4)
  80c274:	21000104 	addi	r4,r4,4
  80c278:	28800015 	stw	r2,0(r5)
  80c27c:	29400104 	addi	r5,r5,4
  80c280:	21fff636 	bltu	r4,r7,80c25c <__lshift+0x120>
  80c284:	003fe606 	br	80c220 <__lshift+0xe4>

0080c288 <__multiply>:
  80c288:	defff004 	addi	sp,sp,-64
  80c28c:	dc800815 	stw	r18,32(sp)
  80c290:	dc400715 	stw	r17,28(sp)
  80c294:	2c800417 	ldw	r18,16(r5)
  80c298:	34400417 	ldw	r17,16(r6)
  80c29c:	dcc00915 	stw	r19,36(sp)
  80c2a0:	dc000615 	stw	r16,24(sp)
  80c2a4:	dfc00f15 	stw	ra,60(sp)
  80c2a8:	df000e15 	stw	fp,56(sp)
  80c2ac:	ddc00d15 	stw	r23,52(sp)
  80c2b0:	dd800c15 	stw	r22,48(sp)
  80c2b4:	dd400b15 	stw	r21,44(sp)
  80c2b8:	dd000a15 	stw	r20,40(sp)
  80c2bc:	2821883a 	mov	r16,r5
  80c2c0:	3027883a 	mov	r19,r6
  80c2c4:	9440040e 	bge	r18,r17,80c2d8 <__multiply+0x50>
  80c2c8:	8825883a 	mov	r18,r17
  80c2cc:	2c400417 	ldw	r17,16(r5)
  80c2d0:	2827883a 	mov	r19,r5
  80c2d4:	3021883a 	mov	r16,r6
  80c2d8:	80800217 	ldw	r2,8(r16)
  80c2dc:	9447883a 	add	r3,r18,r17
  80c2e0:	d8c00415 	stw	r3,16(sp)
  80c2e4:	81400117 	ldw	r5,4(r16)
  80c2e8:	10c0010e 	bge	r2,r3,80c2f0 <__multiply+0x68>
  80c2ec:	29400044 	addi	r5,r5,1
  80c2f0:	080bd780 	call	80bd78 <_Balloc>
  80c2f4:	d8800515 	stw	r2,20(sp)
  80c2f8:	d9000417 	ldw	r4,16(sp)
  80c2fc:	d8c00517 	ldw	r3,20(sp)
  80c300:	2105883a 	add	r2,r4,r4
  80c304:	1085883a 	add	r2,r2,r2
  80c308:	19000504 	addi	r4,r3,20
  80c30c:	2085883a 	add	r2,r4,r2
  80c310:	d8800315 	stw	r2,12(sp)
  80c314:	2080052e 	bgeu	r4,r2,80c32c <__multiply+0xa4>
  80c318:	2005883a 	mov	r2,r4
  80c31c:	d8c00317 	ldw	r3,12(sp)
  80c320:	10000015 	stw	zero,0(r2)
  80c324:	10800104 	addi	r2,r2,4
  80c328:	10fffc36 	bltu	r2,r3,80c31c <__multiply+0x94>
  80c32c:	8c45883a 	add	r2,r17,r17
  80c330:	9487883a 	add	r3,r18,r18
  80c334:	9dc00504 	addi	r23,r19,20
  80c338:	1085883a 	add	r2,r2,r2
  80c33c:	84000504 	addi	r16,r16,20
  80c340:	18c7883a 	add	r3,r3,r3
  80c344:	b885883a 	add	r2,r23,r2
  80c348:	dc000015 	stw	r16,0(sp)
  80c34c:	d8800215 	stw	r2,8(sp)
  80c350:	80f9883a 	add	fp,r16,r3
  80c354:	b880432e 	bgeu	r23,r2,80c464 <__multiply+0x1dc>
  80c358:	d9000115 	stw	r4,4(sp)
  80c35c:	b9000017 	ldw	r4,0(r23)
  80c360:	253fffcc 	andi	r20,r4,65535
  80c364:	a0001a26 	beq	r20,zero,80c3d0 <__multiply+0x148>
  80c368:	dcc00017 	ldw	r19,0(sp)
  80c36c:	dc800117 	ldw	r18,4(sp)
  80c370:	002b883a 	mov	r21,zero
  80c374:	9c400017 	ldw	r17,0(r19)
  80c378:	94000017 	ldw	r16,0(r18)
  80c37c:	a009883a 	mov	r4,r20
  80c380:	897fffcc 	andi	r5,r17,65535
  80c384:	08027a80 	call	8027a8 <__mulsi3>
  80c388:	880ad43a 	srli	r5,r17,16
  80c38c:	80ffffcc 	andi	r3,r16,65535
  80c390:	a8c7883a 	add	r3,r21,r3
  80c394:	a009883a 	mov	r4,r20
  80c398:	10e3883a 	add	r17,r2,r3
  80c39c:	8020d43a 	srli	r16,r16,16
  80c3a0:	08027a80 	call	8027a8 <__mulsi3>
  80c3a4:	8806d43a 	srli	r3,r17,16
  80c3a8:	1405883a 	add	r2,r2,r16
  80c3ac:	9cc00104 	addi	r19,r19,4
  80c3b0:	1887883a 	add	r3,r3,r2
  80c3b4:	90c0008d 	sth	r3,2(r18)
  80c3b8:	9440000d 	sth	r17,0(r18)
  80c3bc:	182ad43a 	srli	r21,r3,16
  80c3c0:	94800104 	addi	r18,r18,4
  80c3c4:	9f3feb36 	bltu	r19,fp,80c374 <__multiply+0xec>
  80c3c8:	95400015 	stw	r21,0(r18)
  80c3cc:	b9000017 	ldw	r4,0(r23)
  80c3d0:	202ad43a 	srli	r21,r4,16
  80c3d4:	a8001c26 	beq	r21,zero,80c448 <__multiply+0x1c0>
  80c3d8:	d9000117 	ldw	r4,4(sp)
  80c3dc:	dd000017 	ldw	r20,0(sp)
  80c3e0:	002d883a 	mov	r22,zero
  80c3e4:	24c00017 	ldw	r19,0(r4)
  80c3e8:	2025883a 	mov	r18,r4
  80c3ec:	9823883a 	mov	r17,r19
  80c3f0:	a4000017 	ldw	r16,0(r20)
  80c3f4:	a809883a 	mov	r4,r21
  80c3f8:	a5000104 	addi	r20,r20,4
  80c3fc:	817fffcc 	andi	r5,r16,65535
  80c400:	08027a80 	call	8027a8 <__mulsi3>
  80c404:	8806d43a 	srli	r3,r17,16
  80c408:	800ad43a 	srli	r5,r16,16
  80c40c:	94c0000d 	sth	r19,0(r18)
  80c410:	b0c7883a 	add	r3,r22,r3
  80c414:	10e1883a 	add	r16,r2,r3
  80c418:	9400008d 	sth	r16,2(r18)
  80c41c:	a809883a 	mov	r4,r21
  80c420:	94800104 	addi	r18,r18,4
  80c424:	08027a80 	call	8027a8 <__mulsi3>
  80c428:	94400017 	ldw	r17,0(r18)
  80c42c:	8020d43a 	srli	r16,r16,16
  80c430:	88ffffcc 	andi	r3,r17,65535
  80c434:	10c5883a 	add	r2,r2,r3
  80c438:	80a7883a 	add	r19,r16,r2
  80c43c:	982cd43a 	srli	r22,r19,16
  80c440:	a73feb36 	bltu	r20,fp,80c3f0 <__multiply+0x168>
  80c444:	94c00015 	stw	r19,0(r18)
  80c448:	d8800217 	ldw	r2,8(sp)
  80c44c:	bdc00104 	addi	r23,r23,4
  80c450:	b880042e 	bgeu	r23,r2,80c464 <__multiply+0x1dc>
  80c454:	d8c00117 	ldw	r3,4(sp)
  80c458:	18c00104 	addi	r3,r3,4
  80c45c:	d8c00115 	stw	r3,4(sp)
  80c460:	003fbe06 	br	80c35c <__multiply+0xd4>
  80c464:	d9000417 	ldw	r4,16(sp)
  80c468:	01000c0e 	bge	zero,r4,80c49c <__multiply+0x214>
  80c46c:	d8c00317 	ldw	r3,12(sp)
  80c470:	18bfff17 	ldw	r2,-4(r3)
  80c474:	18ffff04 	addi	r3,r3,-4
  80c478:	10000326 	beq	r2,zero,80c488 <__multiply+0x200>
  80c47c:	00000706 	br	80c49c <__multiply+0x214>
  80c480:	18800017 	ldw	r2,0(r3)
  80c484:	1000051e 	bne	r2,zero,80c49c <__multiply+0x214>
  80c488:	d9000417 	ldw	r4,16(sp)
  80c48c:	18ffff04 	addi	r3,r3,-4
  80c490:	213fffc4 	addi	r4,r4,-1
  80c494:	d9000415 	stw	r4,16(sp)
  80c498:	203ff91e 	bne	r4,zero,80c480 <__multiply+0x1f8>
  80c49c:	d8800417 	ldw	r2,16(sp)
  80c4a0:	d8c00517 	ldw	r3,20(sp)
  80c4a4:	18800415 	stw	r2,16(r3)
  80c4a8:	1805883a 	mov	r2,r3
  80c4ac:	dfc00f17 	ldw	ra,60(sp)
  80c4b0:	df000e17 	ldw	fp,56(sp)
  80c4b4:	ddc00d17 	ldw	r23,52(sp)
  80c4b8:	dd800c17 	ldw	r22,48(sp)
  80c4bc:	dd400b17 	ldw	r21,44(sp)
  80c4c0:	dd000a17 	ldw	r20,40(sp)
  80c4c4:	dcc00917 	ldw	r19,36(sp)
  80c4c8:	dc800817 	ldw	r18,32(sp)
  80c4cc:	dc400717 	ldw	r17,28(sp)
  80c4d0:	dc000617 	ldw	r16,24(sp)
  80c4d4:	dec01004 	addi	sp,sp,64
  80c4d8:	f800283a 	ret

0080c4dc <__i2b>:
  80c4dc:	defffd04 	addi	sp,sp,-12
  80c4e0:	dc000015 	stw	r16,0(sp)
  80c4e4:	04000044 	movi	r16,1
  80c4e8:	dc800115 	stw	r18,4(sp)
  80c4ec:	2825883a 	mov	r18,r5
  80c4f0:	800b883a 	mov	r5,r16
  80c4f4:	dfc00215 	stw	ra,8(sp)
  80c4f8:	080bd780 	call	80bd78 <_Balloc>
  80c4fc:	14000415 	stw	r16,16(r2)
  80c500:	14800515 	stw	r18,20(r2)
  80c504:	dfc00217 	ldw	ra,8(sp)
  80c508:	dc800117 	ldw	r18,4(sp)
  80c50c:	dc000017 	ldw	r16,0(sp)
  80c510:	dec00304 	addi	sp,sp,12
  80c514:	f800283a 	ret

0080c518 <__multadd>:
  80c518:	defff604 	addi	sp,sp,-40
  80c51c:	dd800615 	stw	r22,24(sp)
  80c520:	2d800417 	ldw	r22,16(r5)
  80c524:	df000815 	stw	fp,32(sp)
  80c528:	ddc00715 	stw	r23,28(sp)
  80c52c:	dd400515 	stw	r21,20(sp)
  80c530:	dd000415 	stw	r20,16(sp)
  80c534:	dcc00315 	stw	r19,12(sp)
  80c538:	dc800215 	stw	r18,8(sp)
  80c53c:	dfc00915 	stw	ra,36(sp)
  80c540:	dc400115 	stw	r17,4(sp)
  80c544:	dc000015 	stw	r16,0(sp)
  80c548:	282f883a 	mov	r23,r5
  80c54c:	2039883a 	mov	fp,r4
  80c550:	302b883a 	mov	r21,r6
  80c554:	3829883a 	mov	r20,r7
  80c558:	2c800504 	addi	r18,r5,20
  80c55c:	0027883a 	mov	r19,zero
  80c560:	94400017 	ldw	r17,0(r18)
  80c564:	a80b883a 	mov	r5,r21
  80c568:	9cc00044 	addi	r19,r19,1
  80c56c:	893fffcc 	andi	r4,r17,65535
  80c570:	08027a80 	call	8027a8 <__mulsi3>
  80c574:	8808d43a 	srli	r4,r17,16
  80c578:	1521883a 	add	r16,r2,r20
  80c57c:	a80b883a 	mov	r5,r21
  80c580:	08027a80 	call	8027a8 <__mulsi3>
  80c584:	8008d43a 	srli	r4,r16,16
  80c588:	843fffcc 	andi	r16,r16,65535
  80c58c:	1105883a 	add	r2,r2,r4
  80c590:	1006943a 	slli	r3,r2,16
  80c594:	1028d43a 	srli	r20,r2,16
  80c598:	1c07883a 	add	r3,r3,r16
  80c59c:	90c00015 	stw	r3,0(r18)
  80c5a0:	94800104 	addi	r18,r18,4
  80c5a4:	9dbfee16 	blt	r19,r22,80c560 <__multadd+0x48>
  80c5a8:	a0000826 	beq	r20,zero,80c5cc <__multadd+0xb4>
  80c5ac:	b8800217 	ldw	r2,8(r23)
  80c5b0:	b080130e 	bge	r22,r2,80c600 <__multadd+0xe8>
  80c5b4:	b585883a 	add	r2,r22,r22
  80c5b8:	1085883a 	add	r2,r2,r2
  80c5bc:	15c5883a 	add	r2,r2,r23
  80c5c0:	b0c00044 	addi	r3,r22,1
  80c5c4:	15000515 	stw	r20,20(r2)
  80c5c8:	b8c00415 	stw	r3,16(r23)
  80c5cc:	b805883a 	mov	r2,r23
  80c5d0:	dfc00917 	ldw	ra,36(sp)
  80c5d4:	df000817 	ldw	fp,32(sp)
  80c5d8:	ddc00717 	ldw	r23,28(sp)
  80c5dc:	dd800617 	ldw	r22,24(sp)
  80c5e0:	dd400517 	ldw	r21,20(sp)
  80c5e4:	dd000417 	ldw	r20,16(sp)
  80c5e8:	dcc00317 	ldw	r19,12(sp)
  80c5ec:	dc800217 	ldw	r18,8(sp)
  80c5f0:	dc400117 	ldw	r17,4(sp)
  80c5f4:	dc000017 	ldw	r16,0(sp)
  80c5f8:	dec00a04 	addi	sp,sp,40
  80c5fc:	f800283a 	ret
  80c600:	b9400117 	ldw	r5,4(r23)
  80c604:	e009883a 	mov	r4,fp
  80c608:	29400044 	addi	r5,r5,1
  80c60c:	080bd780 	call	80bd78 <_Balloc>
  80c610:	b9800417 	ldw	r6,16(r23)
  80c614:	b9400304 	addi	r5,r23,12
  80c618:	11000304 	addi	r4,r2,12
  80c61c:	318d883a 	add	r6,r6,r6
  80c620:	318d883a 	add	r6,r6,r6
  80c624:	31800204 	addi	r6,r6,8
  80c628:	1023883a 	mov	r17,r2
  80c62c:	08050800 	call	805080 <memcpy>
  80c630:	b80b883a 	mov	r5,r23
  80c634:	e009883a 	mov	r4,fp
  80c638:	080b7f80 	call	80b7f8 <_Bfree>
  80c63c:	882f883a 	mov	r23,r17
  80c640:	003fdc06 	br	80c5b4 <__multadd+0x9c>

0080c644 <__pow5mult>:
  80c644:	defffa04 	addi	sp,sp,-24
  80c648:	308000cc 	andi	r2,r6,3
  80c64c:	dd000415 	stw	r20,16(sp)
  80c650:	dcc00315 	stw	r19,12(sp)
  80c654:	dc000015 	stw	r16,0(sp)
  80c658:	dfc00515 	stw	ra,20(sp)
  80c65c:	dc800215 	stw	r18,8(sp)
  80c660:	dc400115 	stw	r17,4(sp)
  80c664:	3021883a 	mov	r16,r6
  80c668:	2027883a 	mov	r19,r4
  80c66c:	2829883a 	mov	r20,r5
  80c670:	10002b1e 	bne	r2,zero,80c720 <__pow5mult+0xdc>
  80c674:	8025d0ba 	srai	r18,r16,2
  80c678:	90001b26 	beq	r18,zero,80c6e8 <__pow5mult+0xa4>
  80c67c:	9c001217 	ldw	r16,72(r19)
  80c680:	8000081e 	bne	r16,zero,80c6a4 <__pow5mult+0x60>
  80c684:	00003006 	br	80c748 <__pow5mult+0x104>
  80c688:	800b883a 	mov	r5,r16
  80c68c:	800d883a 	mov	r6,r16
  80c690:	9809883a 	mov	r4,r19
  80c694:	90001426 	beq	r18,zero,80c6e8 <__pow5mult+0xa4>
  80c698:	80800017 	ldw	r2,0(r16)
  80c69c:	10001b26 	beq	r2,zero,80c70c <__pow5mult+0xc8>
  80c6a0:	1021883a 	mov	r16,r2
  80c6a4:	9080004c 	andi	r2,r18,1
  80c6a8:	1005003a 	cmpeq	r2,r2,zero
  80c6ac:	9025d07a 	srai	r18,r18,1
  80c6b0:	800d883a 	mov	r6,r16
  80c6b4:	9809883a 	mov	r4,r19
  80c6b8:	a00b883a 	mov	r5,r20
  80c6bc:	103ff21e 	bne	r2,zero,80c688 <__pow5mult+0x44>
  80c6c0:	080c2880 	call	80c288 <__multiply>
  80c6c4:	a00b883a 	mov	r5,r20
  80c6c8:	9809883a 	mov	r4,r19
  80c6cc:	1023883a 	mov	r17,r2
  80c6d0:	080b7f80 	call	80b7f8 <_Bfree>
  80c6d4:	8829883a 	mov	r20,r17
  80c6d8:	800b883a 	mov	r5,r16
  80c6dc:	800d883a 	mov	r6,r16
  80c6e0:	9809883a 	mov	r4,r19
  80c6e4:	903fec1e 	bne	r18,zero,80c698 <__pow5mult+0x54>
  80c6e8:	a005883a 	mov	r2,r20
  80c6ec:	dfc00517 	ldw	ra,20(sp)
  80c6f0:	dd000417 	ldw	r20,16(sp)
  80c6f4:	dcc00317 	ldw	r19,12(sp)
  80c6f8:	dc800217 	ldw	r18,8(sp)
  80c6fc:	dc400117 	ldw	r17,4(sp)
  80c700:	dc000017 	ldw	r16,0(sp)
  80c704:	dec00604 	addi	sp,sp,24
  80c708:	f800283a 	ret
  80c70c:	080c2880 	call	80c288 <__multiply>
  80c710:	80800015 	stw	r2,0(r16)
  80c714:	1021883a 	mov	r16,r2
  80c718:	10000015 	stw	zero,0(r2)
  80c71c:	003fe106 	br	80c6a4 <__pow5mult+0x60>
  80c720:	1085883a 	add	r2,r2,r2
  80c724:	00c02074 	movhi	r3,129
  80c728:	18d55e04 	addi	r3,r3,21880
  80c72c:	1085883a 	add	r2,r2,r2
  80c730:	10c5883a 	add	r2,r2,r3
  80c734:	11bfff17 	ldw	r6,-4(r2)
  80c738:	000f883a 	mov	r7,zero
  80c73c:	080c5180 	call	80c518 <__multadd>
  80c740:	1029883a 	mov	r20,r2
  80c744:	003fcb06 	br	80c674 <__pow5mult+0x30>
  80c748:	9809883a 	mov	r4,r19
  80c74c:	01409c44 	movi	r5,625
  80c750:	080c4dc0 	call	80c4dc <__i2b>
  80c754:	98801215 	stw	r2,72(r19)
  80c758:	1021883a 	mov	r16,r2
  80c75c:	10000015 	stw	zero,0(r2)
  80c760:	003fd006 	br	80c6a4 <__pow5mult+0x60>

0080c764 <__s2b>:
  80c764:	defff904 	addi	sp,sp,-28
  80c768:	dcc00315 	stw	r19,12(sp)
  80c76c:	dc800215 	stw	r18,8(sp)
  80c770:	2827883a 	mov	r19,r5
  80c774:	2025883a 	mov	r18,r4
  80c778:	01400244 	movi	r5,9
  80c77c:	39000204 	addi	r4,r7,8
  80c780:	dd000415 	stw	r20,16(sp)
  80c784:	dc400115 	stw	r17,4(sp)
  80c788:	dfc00615 	stw	ra,24(sp)
  80c78c:	dd400515 	stw	r21,20(sp)
  80c790:	dc000015 	stw	r16,0(sp)
  80c794:	3829883a 	mov	r20,r7
  80c798:	3023883a 	mov	r17,r6
  80c79c:	08119680 	call	811968 <__divsi3>
  80c7a0:	00c00044 	movi	r3,1
  80c7a4:	1880350e 	bge	r3,r2,80c87c <__s2b+0x118>
  80c7a8:	000b883a 	mov	r5,zero
  80c7ac:	18c7883a 	add	r3,r3,r3
  80c7b0:	29400044 	addi	r5,r5,1
  80c7b4:	18bffd16 	blt	r3,r2,80c7ac <__s2b+0x48>
  80c7b8:	9009883a 	mov	r4,r18
  80c7bc:	080bd780 	call	80bd78 <_Balloc>
  80c7c0:	1011883a 	mov	r8,r2
  80c7c4:	d8800717 	ldw	r2,28(sp)
  80c7c8:	00c00044 	movi	r3,1
  80c7cc:	01800244 	movi	r6,9
  80c7d0:	40800515 	stw	r2,20(r8)
  80c7d4:	40c00415 	stw	r3,16(r8)
  80c7d8:	3440260e 	bge	r6,r17,80c874 <__s2b+0x110>
  80c7dc:	3021883a 	mov	r16,r6
  80c7e0:	99ab883a 	add	r21,r19,r6
  80c7e4:	9c05883a 	add	r2,r19,r16
  80c7e8:	11c00007 	ldb	r7,0(r2)
  80c7ec:	400b883a 	mov	r5,r8
  80c7f0:	9009883a 	mov	r4,r18
  80c7f4:	39fff404 	addi	r7,r7,-48
  80c7f8:	01800284 	movi	r6,10
  80c7fc:	080c5180 	call	80c518 <__multadd>
  80c800:	84000044 	addi	r16,r16,1
  80c804:	1011883a 	mov	r8,r2
  80c808:	8c3ff61e 	bne	r17,r16,80c7e4 <__s2b+0x80>
  80c80c:	ac45883a 	add	r2,r21,r17
  80c810:	117ffe04 	addi	r5,r2,-8
  80c814:	880d883a 	mov	r6,r17
  80c818:	35000c0e 	bge	r6,r20,80c84c <__s2b+0xe8>
  80c81c:	a185c83a 	sub	r2,r20,r6
  80c820:	2821883a 	mov	r16,r5
  80c824:	28a3883a 	add	r17,r5,r2
  80c828:	81c00007 	ldb	r7,0(r16)
  80c82c:	400b883a 	mov	r5,r8
  80c830:	9009883a 	mov	r4,r18
  80c834:	39fff404 	addi	r7,r7,-48
  80c838:	01800284 	movi	r6,10
  80c83c:	080c5180 	call	80c518 <__multadd>
  80c840:	84000044 	addi	r16,r16,1
  80c844:	1011883a 	mov	r8,r2
  80c848:	847ff71e 	bne	r16,r17,80c828 <__s2b+0xc4>
  80c84c:	4005883a 	mov	r2,r8
  80c850:	dfc00617 	ldw	ra,24(sp)
  80c854:	dd400517 	ldw	r21,20(sp)
  80c858:	dd000417 	ldw	r20,16(sp)
  80c85c:	dcc00317 	ldw	r19,12(sp)
  80c860:	dc800217 	ldw	r18,8(sp)
  80c864:	dc400117 	ldw	r17,4(sp)
  80c868:	dc000017 	ldw	r16,0(sp)
  80c86c:	dec00704 	addi	sp,sp,28
  80c870:	f800283a 	ret
  80c874:	99400284 	addi	r5,r19,10
  80c878:	003fe706 	br	80c818 <__s2b+0xb4>
  80c87c:	000b883a 	mov	r5,zero
  80c880:	003fcd06 	br	80c7b8 <__s2b+0x54>

0080c884 <_read_r>:
  80c884:	defffd04 	addi	sp,sp,-12
  80c888:	dc000015 	stw	r16,0(sp)
  80c88c:	040020b4 	movhi	r16,130
  80c890:	84231204 	addi	r16,r16,-29624
  80c894:	dc400115 	stw	r17,4(sp)
  80c898:	80000015 	stw	zero,0(r16)
  80c89c:	2023883a 	mov	r17,r4
  80c8a0:	2809883a 	mov	r4,r5
  80c8a4:	300b883a 	mov	r5,r6
  80c8a8:	380d883a 	mov	r6,r7
  80c8ac:	dfc00215 	stw	ra,8(sp)
  80c8b0:	08128040 	call	812804 <read>
  80c8b4:	1007883a 	mov	r3,r2
  80c8b8:	00bfffc4 	movi	r2,-1
  80c8bc:	18800626 	beq	r3,r2,80c8d8 <_read_r+0x54>
  80c8c0:	1805883a 	mov	r2,r3
  80c8c4:	dfc00217 	ldw	ra,8(sp)
  80c8c8:	dc400117 	ldw	r17,4(sp)
  80c8cc:	dc000017 	ldw	r16,0(sp)
  80c8d0:	dec00304 	addi	sp,sp,12
  80c8d4:	f800283a 	ret
  80c8d8:	80800017 	ldw	r2,0(r16)
  80c8dc:	103ff826 	beq	r2,zero,80c8c0 <_read_r+0x3c>
  80c8e0:	88800015 	stw	r2,0(r17)
  80c8e4:	1805883a 	mov	r2,r3
  80c8e8:	dfc00217 	ldw	ra,8(sp)
  80c8ec:	dc400117 	ldw	r17,4(sp)
  80c8f0:	dc000017 	ldw	r16,0(sp)
  80c8f4:	dec00304 	addi	sp,sp,12
  80c8f8:	f800283a 	ret

0080c8fc <_realloc_r>:
  80c8fc:	defff404 	addi	sp,sp,-48
  80c900:	dd800815 	stw	r22,32(sp)
  80c904:	dc800415 	stw	r18,16(sp)
  80c908:	dc400315 	stw	r17,12(sp)
  80c90c:	dfc00b15 	stw	ra,44(sp)
  80c910:	df000a15 	stw	fp,40(sp)
  80c914:	ddc00915 	stw	r23,36(sp)
  80c918:	dd400715 	stw	r21,28(sp)
  80c91c:	dd000615 	stw	r20,24(sp)
  80c920:	dcc00515 	stw	r19,20(sp)
  80c924:	dc000215 	stw	r16,8(sp)
  80c928:	2825883a 	mov	r18,r5
  80c92c:	3023883a 	mov	r17,r6
  80c930:	202d883a 	mov	r22,r4
  80c934:	2800c926 	beq	r5,zero,80cc5c <_realloc_r+0x360>
  80c938:	08124e00 	call	8124e0 <__malloc_lock>
  80c93c:	943ffe04 	addi	r16,r18,-8
  80c940:	88c002c4 	addi	r3,r17,11
  80c944:	00800584 	movi	r2,22
  80c948:	82000117 	ldw	r8,4(r16)
  80c94c:	10c01b2e 	bgeu	r2,r3,80c9bc <_realloc_r+0xc0>
  80c950:	00bffe04 	movi	r2,-8
  80c954:	188e703a 	and	r7,r3,r2
  80c958:	3839883a 	mov	fp,r7
  80c95c:	38001a16 	blt	r7,zero,80c9c8 <_realloc_r+0xcc>
  80c960:	e4401936 	bltu	fp,r17,80c9c8 <_realloc_r+0xcc>
  80c964:	013fff04 	movi	r4,-4
  80c968:	4126703a 	and	r19,r8,r4
  80c96c:	99c02616 	blt	r19,r7,80ca08 <_realloc_r+0x10c>
  80c970:	802b883a 	mov	r21,r16
  80c974:	9829883a 	mov	r20,r19
  80c978:	84000204 	addi	r16,r16,8
  80c97c:	a80f883a 	mov	r7,r21
  80c980:	a70dc83a 	sub	r6,r20,fp
  80c984:	008003c4 	movi	r2,15
  80c988:	1180c136 	bltu	r2,r6,80cc90 <_realloc_r+0x394>
  80c98c:	38800117 	ldw	r2,4(r7)
  80c990:	a549883a 	add	r4,r20,r21
  80c994:	1080004c 	andi	r2,r2,1
  80c998:	a084b03a 	or	r2,r20,r2
  80c99c:	38800115 	stw	r2,4(r7)
  80c9a0:	20c00117 	ldw	r3,4(r4)
  80c9a4:	18c00054 	ori	r3,r3,1
  80c9a8:	20c00115 	stw	r3,4(r4)
  80c9ac:	b009883a 	mov	r4,r22
  80c9b0:	08125000 	call	812500 <__malloc_unlock>
  80c9b4:	8023883a 	mov	r17,r16
  80c9b8:	00000606 	br	80c9d4 <_realloc_r+0xd8>
  80c9bc:	01c00404 	movi	r7,16
  80c9c0:	3839883a 	mov	fp,r7
  80c9c4:	e47fe72e 	bgeu	fp,r17,80c964 <_realloc_r+0x68>
  80c9c8:	00800304 	movi	r2,12
  80c9cc:	0023883a 	mov	r17,zero
  80c9d0:	b0800015 	stw	r2,0(r22)
  80c9d4:	8805883a 	mov	r2,r17
  80c9d8:	dfc00b17 	ldw	ra,44(sp)
  80c9dc:	df000a17 	ldw	fp,40(sp)
  80c9e0:	ddc00917 	ldw	r23,36(sp)
  80c9e4:	dd800817 	ldw	r22,32(sp)
  80c9e8:	dd400717 	ldw	r21,28(sp)
  80c9ec:	dd000617 	ldw	r20,24(sp)
  80c9f0:	dcc00517 	ldw	r19,20(sp)
  80c9f4:	dc800417 	ldw	r18,16(sp)
  80c9f8:	dc400317 	ldw	r17,12(sp)
  80c9fc:	dc000217 	ldw	r16,8(sp)
  80ca00:	dec00c04 	addi	sp,sp,48
  80ca04:	f800283a 	ret
  80ca08:	00802074 	movhi	r2,129
  80ca0c:	10968d04 	addi	r2,r2,23092
  80ca10:	12400217 	ldw	r9,8(r2)
  80ca14:	84cd883a 	add	r6,r16,r19
  80ca18:	802b883a 	mov	r21,r16
  80ca1c:	3240b926 	beq	r6,r9,80cd04 <_realloc_r+0x408>
  80ca20:	31400117 	ldw	r5,4(r6)
  80ca24:	00bfff84 	movi	r2,-2
  80ca28:	2884703a 	and	r2,r5,r2
  80ca2c:	1185883a 	add	r2,r2,r6
  80ca30:	10c00117 	ldw	r3,4(r2)
  80ca34:	18c0004c 	andi	r3,r3,1
  80ca38:	1807003a 	cmpeq	r3,r3,zero
  80ca3c:	1800a326 	beq	r3,zero,80cccc <_realloc_r+0x3d0>
  80ca40:	2908703a 	and	r4,r5,r4
  80ca44:	9929883a 	add	r20,r19,r4
  80ca48:	a1c0a30e 	bge	r20,r7,80ccd8 <_realloc_r+0x3dc>
  80ca4c:	4080004c 	andi	r2,r8,1
  80ca50:	1000551e 	bne	r2,zero,80cba8 <_realloc_r+0x2ac>
  80ca54:	80800017 	ldw	r2,0(r16)
  80ca58:	80afc83a 	sub	r23,r16,r2
  80ca5c:	b8c00117 	ldw	r3,4(r23)
  80ca60:	00bfff04 	movi	r2,-4
  80ca64:	1884703a 	and	r2,r3,r2
  80ca68:	30002e26 	beq	r6,zero,80cb24 <_realloc_r+0x228>
  80ca6c:	3240b926 	beq	r6,r9,80cd54 <_realloc_r+0x458>
  80ca70:	98a9883a 	add	r20,r19,r2
  80ca74:	2509883a 	add	r4,r4,r20
  80ca78:	d9000015 	stw	r4,0(sp)
  80ca7c:	21c02a16 	blt	r4,r7,80cb28 <_realloc_r+0x22c>
  80ca80:	30800317 	ldw	r2,12(r6)
  80ca84:	30c00217 	ldw	r3,8(r6)
  80ca88:	01400904 	movi	r5,36
  80ca8c:	99bfff04 	addi	r6,r19,-4
  80ca90:	18800315 	stw	r2,12(r3)
  80ca94:	10c00215 	stw	r3,8(r2)
  80ca98:	b9000317 	ldw	r4,12(r23)
  80ca9c:	b8800217 	ldw	r2,8(r23)
  80caa0:	b82b883a 	mov	r21,r23
  80caa4:	bc000204 	addi	r16,r23,8
  80caa8:	20800215 	stw	r2,8(r4)
  80caac:	11000315 	stw	r4,12(r2)
  80cab0:	2980e436 	bltu	r5,r6,80ce44 <_realloc_r+0x548>
  80cab4:	008004c4 	movi	r2,19
  80cab8:	9009883a 	mov	r4,r18
  80cabc:	8011883a 	mov	r8,r16
  80cac0:	11800f2e 	bgeu	r2,r6,80cb00 <_realloc_r+0x204>
  80cac4:	90800017 	ldw	r2,0(r18)
  80cac8:	ba000404 	addi	r8,r23,16
  80cacc:	91000204 	addi	r4,r18,8
  80cad0:	b8800215 	stw	r2,8(r23)
  80cad4:	90c00117 	ldw	r3,4(r18)
  80cad8:	008006c4 	movi	r2,27
  80cadc:	b8c00315 	stw	r3,12(r23)
  80cae0:	1180072e 	bgeu	r2,r6,80cb00 <_realloc_r+0x204>
  80cae4:	90c00217 	ldw	r3,8(r18)
  80cae8:	ba000604 	addi	r8,r23,24
  80caec:	91000404 	addi	r4,r18,16
  80caf0:	b8c00415 	stw	r3,16(r23)
  80caf4:	90800317 	ldw	r2,12(r18)
  80caf8:	b8800515 	stw	r2,20(r23)
  80cafc:	3140e726 	beq	r6,r5,80ce9c <_realloc_r+0x5a0>
  80cb00:	20800017 	ldw	r2,0(r4)
  80cb04:	dd000017 	ldw	r20,0(sp)
  80cb08:	b80f883a 	mov	r7,r23
  80cb0c:	40800015 	stw	r2,0(r8)
  80cb10:	20c00117 	ldw	r3,4(r4)
  80cb14:	40c00115 	stw	r3,4(r8)
  80cb18:	20800217 	ldw	r2,8(r4)
  80cb1c:	40800215 	stw	r2,8(r8)
  80cb20:	003f9706 	br	80c980 <_realloc_r+0x84>
  80cb24:	98a9883a 	add	r20,r19,r2
  80cb28:	a1c01f16 	blt	r20,r7,80cba8 <_realloc_r+0x2ac>
  80cb2c:	b8c00317 	ldw	r3,12(r23)
  80cb30:	b8800217 	ldw	r2,8(r23)
  80cb34:	99bfff04 	addi	r6,r19,-4
  80cb38:	01400904 	movi	r5,36
  80cb3c:	b82b883a 	mov	r21,r23
  80cb40:	18800215 	stw	r2,8(r3)
  80cb44:	10c00315 	stw	r3,12(r2)
  80cb48:	bc000204 	addi	r16,r23,8
  80cb4c:	2980c336 	bltu	r5,r6,80ce5c <_realloc_r+0x560>
  80cb50:	008004c4 	movi	r2,19
  80cb54:	9009883a 	mov	r4,r18
  80cb58:	8011883a 	mov	r8,r16
  80cb5c:	11800f2e 	bgeu	r2,r6,80cb9c <_realloc_r+0x2a0>
  80cb60:	90800017 	ldw	r2,0(r18)
  80cb64:	ba000404 	addi	r8,r23,16
  80cb68:	91000204 	addi	r4,r18,8
  80cb6c:	b8800215 	stw	r2,8(r23)
  80cb70:	90c00117 	ldw	r3,4(r18)
  80cb74:	008006c4 	movi	r2,27
  80cb78:	b8c00315 	stw	r3,12(r23)
  80cb7c:	1180072e 	bgeu	r2,r6,80cb9c <_realloc_r+0x2a0>
  80cb80:	90c00217 	ldw	r3,8(r18)
  80cb84:	ba000604 	addi	r8,r23,24
  80cb88:	91000404 	addi	r4,r18,16
  80cb8c:	b8c00415 	stw	r3,16(r23)
  80cb90:	90800317 	ldw	r2,12(r18)
  80cb94:	b8800515 	stw	r2,20(r23)
  80cb98:	3140c726 	beq	r6,r5,80ceb8 <_realloc_r+0x5bc>
  80cb9c:	20800017 	ldw	r2,0(r4)
  80cba0:	b80f883a 	mov	r7,r23
  80cba4:	003fd906 	br	80cb0c <_realloc_r+0x210>
  80cba8:	880b883a 	mov	r5,r17
  80cbac:	b009883a 	mov	r4,r22
  80cbb0:	080485c0 	call	80485c <_malloc_r>
  80cbb4:	1023883a 	mov	r17,r2
  80cbb8:	10002526 	beq	r2,zero,80cc50 <_realloc_r+0x354>
  80cbbc:	80800117 	ldw	r2,4(r16)
  80cbc0:	00ffff84 	movi	r3,-2
  80cbc4:	893ffe04 	addi	r4,r17,-8
  80cbc8:	10c4703a 	and	r2,r2,r3
  80cbcc:	8085883a 	add	r2,r16,r2
  80cbd0:	20809526 	beq	r4,r2,80ce28 <_realloc_r+0x52c>
  80cbd4:	99bfff04 	addi	r6,r19,-4
  80cbd8:	01c00904 	movi	r7,36
  80cbdc:	39804536 	bltu	r7,r6,80ccf4 <_realloc_r+0x3f8>
  80cbe0:	008004c4 	movi	r2,19
  80cbe4:	9009883a 	mov	r4,r18
  80cbe8:	880b883a 	mov	r5,r17
  80cbec:	11800f2e 	bgeu	r2,r6,80cc2c <_realloc_r+0x330>
  80cbf0:	90800017 	ldw	r2,0(r18)
  80cbf4:	89400204 	addi	r5,r17,8
  80cbf8:	91000204 	addi	r4,r18,8
  80cbfc:	88800015 	stw	r2,0(r17)
  80cc00:	90c00117 	ldw	r3,4(r18)
  80cc04:	008006c4 	movi	r2,27
  80cc08:	88c00115 	stw	r3,4(r17)
  80cc0c:	1180072e 	bgeu	r2,r6,80cc2c <_realloc_r+0x330>
  80cc10:	90c00217 	ldw	r3,8(r18)
  80cc14:	89400404 	addi	r5,r17,16
  80cc18:	91000404 	addi	r4,r18,16
  80cc1c:	88c00215 	stw	r3,8(r17)
  80cc20:	90800317 	ldw	r2,12(r18)
  80cc24:	88800315 	stw	r2,12(r17)
  80cc28:	31c09126 	beq	r6,r7,80ce70 <_realloc_r+0x574>
  80cc2c:	20800017 	ldw	r2,0(r4)
  80cc30:	28800015 	stw	r2,0(r5)
  80cc34:	20c00117 	ldw	r3,4(r4)
  80cc38:	28c00115 	stw	r3,4(r5)
  80cc3c:	20800217 	ldw	r2,8(r4)
  80cc40:	28800215 	stw	r2,8(r5)
  80cc44:	900b883a 	mov	r5,r18
  80cc48:	b009883a 	mov	r4,r22
  80cc4c:	0803be00 	call	803be0 <_free_r>
  80cc50:	b009883a 	mov	r4,r22
  80cc54:	08125000 	call	812500 <__malloc_unlock>
  80cc58:	003f5e06 	br	80c9d4 <_realloc_r+0xd8>
  80cc5c:	300b883a 	mov	r5,r6
  80cc60:	dfc00b17 	ldw	ra,44(sp)
  80cc64:	df000a17 	ldw	fp,40(sp)
  80cc68:	ddc00917 	ldw	r23,36(sp)
  80cc6c:	dd800817 	ldw	r22,32(sp)
  80cc70:	dd400717 	ldw	r21,28(sp)
  80cc74:	dd000617 	ldw	r20,24(sp)
  80cc78:	dcc00517 	ldw	r19,20(sp)
  80cc7c:	dc800417 	ldw	r18,16(sp)
  80cc80:	dc400317 	ldw	r17,12(sp)
  80cc84:	dc000217 	ldw	r16,8(sp)
  80cc88:	dec00c04 	addi	sp,sp,48
  80cc8c:	080485c1 	jmpi	80485c <_malloc_r>
  80cc90:	38800117 	ldw	r2,4(r7)
  80cc94:	e54b883a 	add	r5,fp,r21
  80cc98:	31000054 	ori	r4,r6,1
  80cc9c:	1080004c 	andi	r2,r2,1
  80cca0:	1704b03a 	or	r2,r2,fp
  80cca4:	38800115 	stw	r2,4(r7)
  80cca8:	29000115 	stw	r4,4(r5)
  80ccac:	2987883a 	add	r3,r5,r6
  80ccb0:	18800117 	ldw	r2,4(r3)
  80ccb4:	29400204 	addi	r5,r5,8
  80ccb8:	b009883a 	mov	r4,r22
  80ccbc:	10800054 	ori	r2,r2,1
  80ccc0:	18800115 	stw	r2,4(r3)
  80ccc4:	0803be00 	call	803be0 <_free_r>
  80ccc8:	003f3806 	br	80c9ac <_realloc_r+0xb0>
  80cccc:	000d883a 	mov	r6,zero
  80ccd0:	0009883a 	mov	r4,zero
  80ccd4:	003f5d06 	br	80ca4c <_realloc_r+0x150>
  80ccd8:	30c00217 	ldw	r3,8(r6)
  80ccdc:	30800317 	ldw	r2,12(r6)
  80cce0:	800f883a 	mov	r7,r16
  80cce4:	84000204 	addi	r16,r16,8
  80cce8:	10c00215 	stw	r3,8(r2)
  80ccec:	18800315 	stw	r2,12(r3)
  80ccf0:	003f2306 	br	80c980 <_realloc_r+0x84>
  80ccf4:	8809883a 	mov	r4,r17
  80ccf8:	900b883a 	mov	r5,r18
  80ccfc:	080b7180 	call	80b718 <memmove>
  80cd00:	003fd006 	br	80cc44 <_realloc_r+0x348>
  80cd04:	30800117 	ldw	r2,4(r6)
  80cd08:	e0c00404 	addi	r3,fp,16
  80cd0c:	1108703a 	and	r4,r2,r4
  80cd10:	9905883a 	add	r2,r19,r4
  80cd14:	10ff4d16 	blt	r2,r3,80ca4c <_realloc_r+0x150>
  80cd18:	1705c83a 	sub	r2,r2,fp
  80cd1c:	870b883a 	add	r5,r16,fp
  80cd20:	10800054 	ori	r2,r2,1
  80cd24:	28800115 	stw	r2,4(r5)
  80cd28:	80c00117 	ldw	r3,4(r16)
  80cd2c:	00802074 	movhi	r2,129
  80cd30:	10968d04 	addi	r2,r2,23092
  80cd34:	b009883a 	mov	r4,r22
  80cd38:	18c0004c 	andi	r3,r3,1
  80cd3c:	e0c6b03a 	or	r3,fp,r3
  80cd40:	11400215 	stw	r5,8(r2)
  80cd44:	80c00115 	stw	r3,4(r16)
  80cd48:	08125000 	call	812500 <__malloc_unlock>
  80cd4c:	84400204 	addi	r17,r16,8
  80cd50:	003f2006 	br	80c9d4 <_realloc_r+0xd8>
  80cd54:	98a9883a 	add	r20,r19,r2
  80cd58:	2509883a 	add	r4,r4,r20
  80cd5c:	e0800404 	addi	r2,fp,16
  80cd60:	d9000115 	stw	r4,4(sp)
  80cd64:	20bf7016 	blt	r4,r2,80cb28 <_realloc_r+0x22c>
  80cd68:	b8c00317 	ldw	r3,12(r23)
  80cd6c:	b8800217 	ldw	r2,8(r23)
  80cd70:	99bfff04 	addi	r6,r19,-4
  80cd74:	01400904 	movi	r5,36
  80cd78:	18800215 	stw	r2,8(r3)
  80cd7c:	10c00315 	stw	r3,12(r2)
  80cd80:	bc400204 	addi	r17,r23,8
  80cd84:	29804136 	bltu	r5,r6,80ce8c <_realloc_r+0x590>
  80cd88:	008004c4 	movi	r2,19
  80cd8c:	9009883a 	mov	r4,r18
  80cd90:	880f883a 	mov	r7,r17
  80cd94:	11800f2e 	bgeu	r2,r6,80cdd4 <_realloc_r+0x4d8>
  80cd98:	90800017 	ldw	r2,0(r18)
  80cd9c:	b9c00404 	addi	r7,r23,16
  80cda0:	91000204 	addi	r4,r18,8
  80cda4:	b8800215 	stw	r2,8(r23)
  80cda8:	90c00117 	ldw	r3,4(r18)
  80cdac:	008006c4 	movi	r2,27
  80cdb0:	b8c00315 	stw	r3,12(r23)
  80cdb4:	1180072e 	bgeu	r2,r6,80cdd4 <_realloc_r+0x4d8>
  80cdb8:	90c00217 	ldw	r3,8(r18)
  80cdbc:	b9c00604 	addi	r7,r23,24
  80cdc0:	91000404 	addi	r4,r18,16
  80cdc4:	b8c00415 	stw	r3,16(r23)
  80cdc8:	90800317 	ldw	r2,12(r18)
  80cdcc:	b8800515 	stw	r2,20(r23)
  80cdd0:	31404026 	beq	r6,r5,80ced4 <_realloc_r+0x5d8>
  80cdd4:	20800017 	ldw	r2,0(r4)
  80cdd8:	38800015 	stw	r2,0(r7)
  80cddc:	20c00117 	ldw	r3,4(r4)
  80cde0:	38c00115 	stw	r3,4(r7)
  80cde4:	20800217 	ldw	r2,8(r4)
  80cde8:	38800215 	stw	r2,8(r7)
  80cdec:	d8c00117 	ldw	r3,4(sp)
  80cdf0:	bf0b883a 	add	r5,r23,fp
  80cdf4:	b009883a 	mov	r4,r22
  80cdf8:	1f05c83a 	sub	r2,r3,fp
  80cdfc:	10800054 	ori	r2,r2,1
  80ce00:	28800115 	stw	r2,4(r5)
  80ce04:	b8c00117 	ldw	r3,4(r23)
  80ce08:	00802074 	movhi	r2,129
  80ce0c:	10968d04 	addi	r2,r2,23092
  80ce10:	11400215 	stw	r5,8(r2)
  80ce14:	18c0004c 	andi	r3,r3,1
  80ce18:	e0c6b03a 	or	r3,fp,r3
  80ce1c:	b8c00115 	stw	r3,4(r23)
  80ce20:	08125000 	call	812500 <__malloc_unlock>
  80ce24:	003eeb06 	br	80c9d4 <_realloc_r+0xd8>
  80ce28:	20800117 	ldw	r2,4(r4)
  80ce2c:	00ffff04 	movi	r3,-4
  80ce30:	800f883a 	mov	r7,r16
  80ce34:	10c4703a 	and	r2,r2,r3
  80ce38:	98a9883a 	add	r20,r19,r2
  80ce3c:	84000204 	addi	r16,r16,8
  80ce40:	003ecf06 	br	80c980 <_realloc_r+0x84>
  80ce44:	900b883a 	mov	r5,r18
  80ce48:	8009883a 	mov	r4,r16
  80ce4c:	080b7180 	call	80b718 <memmove>
  80ce50:	dd000017 	ldw	r20,0(sp)
  80ce54:	b80f883a 	mov	r7,r23
  80ce58:	003ec906 	br	80c980 <_realloc_r+0x84>
  80ce5c:	900b883a 	mov	r5,r18
  80ce60:	8009883a 	mov	r4,r16
  80ce64:	080b7180 	call	80b718 <memmove>
  80ce68:	b80f883a 	mov	r7,r23
  80ce6c:	003ec406 	br	80c980 <_realloc_r+0x84>
  80ce70:	90c00417 	ldw	r3,16(r18)
  80ce74:	89400604 	addi	r5,r17,24
  80ce78:	91000604 	addi	r4,r18,24
  80ce7c:	88c00415 	stw	r3,16(r17)
  80ce80:	90800517 	ldw	r2,20(r18)
  80ce84:	88800515 	stw	r2,20(r17)
  80ce88:	003f6806 	br	80cc2c <_realloc_r+0x330>
  80ce8c:	900b883a 	mov	r5,r18
  80ce90:	8809883a 	mov	r4,r17
  80ce94:	080b7180 	call	80b718 <memmove>
  80ce98:	003fd406 	br	80cdec <_realloc_r+0x4f0>
  80ce9c:	90c00417 	ldw	r3,16(r18)
  80cea0:	91000604 	addi	r4,r18,24
  80cea4:	ba000804 	addi	r8,r23,32
  80cea8:	b8c00615 	stw	r3,24(r23)
  80ceac:	90800517 	ldw	r2,20(r18)
  80ceb0:	b8800715 	stw	r2,28(r23)
  80ceb4:	003f1206 	br	80cb00 <_realloc_r+0x204>
  80ceb8:	90c00417 	ldw	r3,16(r18)
  80cebc:	91000604 	addi	r4,r18,24
  80cec0:	ba000804 	addi	r8,r23,32
  80cec4:	b8c00615 	stw	r3,24(r23)
  80cec8:	90800517 	ldw	r2,20(r18)
  80cecc:	b8800715 	stw	r2,28(r23)
  80ced0:	003f3206 	br	80cb9c <_realloc_r+0x2a0>
  80ced4:	90c00417 	ldw	r3,16(r18)
  80ced8:	91000604 	addi	r4,r18,24
  80cedc:	b9c00804 	addi	r7,r23,32
  80cee0:	b8c00615 	stw	r3,24(r23)
  80cee4:	90800517 	ldw	r2,20(r18)
  80cee8:	b8800715 	stw	r2,28(r23)
  80ceec:	003fb906 	br	80cdd4 <_realloc_r+0x4d8>

0080cef0 <__isinfd>:
  80cef0:	200d883a 	mov	r6,r4
  80cef4:	0109c83a 	sub	r4,zero,r4
  80cef8:	2188b03a 	or	r4,r4,r6
  80cefc:	2008d7fa 	srli	r4,r4,31
  80cf00:	00a00034 	movhi	r2,32768
  80cf04:	10bfffc4 	addi	r2,r2,-1
  80cf08:	1144703a 	and	r2,r2,r5
  80cf0c:	2088b03a 	or	r4,r4,r2
  80cf10:	009ffc34 	movhi	r2,32752
  80cf14:	1105c83a 	sub	r2,r2,r4
  80cf18:	0087c83a 	sub	r3,zero,r2
  80cf1c:	10c4b03a 	or	r2,r2,r3
  80cf20:	1004d7fa 	srli	r2,r2,31
  80cf24:	00c00044 	movi	r3,1
  80cf28:	1885c83a 	sub	r2,r3,r2
  80cf2c:	f800283a 	ret

0080cf30 <__isnand>:
  80cf30:	200d883a 	mov	r6,r4
  80cf34:	0109c83a 	sub	r4,zero,r4
  80cf38:	2188b03a 	or	r4,r4,r6
  80cf3c:	2008d7fa 	srli	r4,r4,31
  80cf40:	00a00034 	movhi	r2,32768
  80cf44:	10bfffc4 	addi	r2,r2,-1
  80cf48:	1144703a 	and	r2,r2,r5
  80cf4c:	2088b03a 	or	r4,r4,r2
  80cf50:	009ffc34 	movhi	r2,32752
  80cf54:	1105c83a 	sub	r2,r2,r4
  80cf58:	1004d7fa 	srli	r2,r2,31
  80cf5c:	f800283a 	ret

0080cf60 <__sccl>:
  80cf60:	28c00003 	ldbu	r3,0(r5)
  80cf64:	00801784 	movi	r2,94
  80cf68:	2a000044 	addi	r8,r5,1
  80cf6c:	18802526 	beq	r3,r2,80d004 <__sccl+0xa4>
  80cf70:	180f883a 	mov	r7,r3
  80cf74:	0013883a 	mov	r9,zero
  80cf78:	000d883a 	mov	r6,zero
  80cf7c:	0007883a 	mov	r3,zero
  80cf80:	01404004 	movi	r5,256
  80cf84:	1905883a 	add	r2,r3,r4
  80cf88:	18c00044 	addi	r3,r3,1
  80cf8c:	11800005 	stb	r6,0(r2)
  80cf90:	197ffc1e 	bne	r3,r5,80cf84 <__sccl+0x24>
  80cf94:	38000c26 	beq	r7,zero,80cfc8 <__sccl+0x68>
  80cf98:	00800044 	movi	r2,1
  80cf9c:	124dc83a 	sub	r6,r2,r9
  80cfa0:	3905883a 	add	r2,r7,r4
  80cfa4:	11800005 	stb	r6,0(r2)
  80cfa8:	41400044 	addi	r5,r8,1
  80cfac:	02400b44 	movi	r9,45
  80cfb0:	02801744 	movi	r10,93
  80cfb4:	28bfffc3 	ldbu	r2,-1(r5)
  80cfb8:	2811883a 	mov	r8,r5
  80cfbc:	12400726 	beq	r2,r9,80cfdc <__sccl+0x7c>
  80cfc0:	12800226 	beq	r2,r10,80cfcc <__sccl+0x6c>
  80cfc4:	1000031e 	bne	r2,zero,80cfd4 <__sccl+0x74>
  80cfc8:	423fffc4 	addi	r8,r8,-1
  80cfcc:	4005883a 	mov	r2,r8
  80cfd0:	f800283a 	ret
  80cfd4:	100f883a 	mov	r7,r2
  80cfd8:	003ff106 	br	80cfa0 <__sccl+0x40>
  80cfdc:	28c00003 	ldbu	r3,0(r5)
  80cfe0:	1a800d26 	beq	r3,r10,80d018 <__sccl+0xb8>
  80cfe4:	19c00c16 	blt	r3,r7,80d018 <__sccl+0xb8>
  80cfe8:	21c5883a 	add	r2,r4,r7
  80cfec:	39c00044 	addi	r7,r7,1
  80cff0:	11800045 	stb	r6,1(r2)
  80cff4:	10800044 	addi	r2,r2,1
  80cff8:	38fffc16 	blt	r7,r3,80cfec <__sccl+0x8c>
  80cffc:	29400084 	addi	r5,r5,2
  80d000:	003fec06 	br	80cfb4 <__sccl+0x54>
  80d004:	29c00043 	ldbu	r7,1(r5)
  80d008:	02400044 	movi	r9,1
  80d00c:	2a000084 	addi	r8,r5,2
  80d010:	480d883a 	mov	r6,r9
  80d014:	003fd906 	br	80cf7c <__sccl+0x1c>
  80d018:	01c00b44 	movi	r7,45
  80d01c:	003fe006 	br	80cfa0 <__sccl+0x40>

0080d020 <nanf>:
  80d020:	009ff034 	movhi	r2,32704
  80d024:	f800283a 	ret

0080d028 <sprintf>:
  80d028:	deffe504 	addi	sp,sp,-108
  80d02c:	2013883a 	mov	r9,r4
  80d030:	dfc01815 	stw	ra,96(sp)
  80d034:	d9801915 	stw	r6,100(sp)
  80d038:	d9c01a15 	stw	r7,104(sp)
  80d03c:	d8801904 	addi	r2,sp,100
  80d040:	d8800015 	stw	r2,0(sp)
  80d044:	00802074 	movhi	r2,129
  80d048:	109c2904 	addi	r2,r2,28836
  80d04c:	11000017 	ldw	r4,0(r2)
  80d050:	d9c00017 	ldw	r7,0(sp)
  80d054:	00808204 	movi	r2,520
  80d058:	00e00034 	movhi	r3,32768
  80d05c:	18ffffc4 	addi	r3,r3,-1
  80d060:	280d883a 	mov	r6,r5
  80d064:	d880040d 	sth	r2,16(sp)
  80d068:	d9400104 	addi	r5,sp,4
  80d06c:	00bfffc4 	movi	r2,-1
  80d070:	d8c00615 	stw	r3,24(sp)
  80d074:	d8c00315 	stw	r3,12(sp)
  80d078:	da400515 	stw	r9,20(sp)
  80d07c:	d880048d 	sth	r2,18(sp)
  80d080:	da400115 	stw	r9,4(sp)
  80d084:	0805cc40 	call	805cc4 <___vfprintf_internal_r>
  80d088:	d8c00117 	ldw	r3,4(sp)
  80d08c:	18000005 	stb	zero,0(r3)
  80d090:	dfc01817 	ldw	ra,96(sp)
  80d094:	dec01b04 	addi	sp,sp,108
  80d098:	f800283a 	ret

0080d09c <_sprintf_r>:
  80d09c:	deffe604 	addi	sp,sp,-104
  80d0a0:	2813883a 	mov	r9,r5
  80d0a4:	dfc01815 	stw	ra,96(sp)
  80d0a8:	d9c01915 	stw	r7,100(sp)
  80d0ac:	d8801904 	addi	r2,sp,100
  80d0b0:	d8800015 	stw	r2,0(sp)
  80d0b4:	100f883a 	mov	r7,r2
  80d0b8:	00808204 	movi	r2,520
  80d0bc:	00e00034 	movhi	r3,32768
  80d0c0:	18ffffc4 	addi	r3,r3,-1
  80d0c4:	d880040d 	sth	r2,16(sp)
  80d0c8:	d9400104 	addi	r5,sp,4
  80d0cc:	00bfffc4 	movi	r2,-1
  80d0d0:	d8c00615 	stw	r3,24(sp)
  80d0d4:	d8c00315 	stw	r3,12(sp)
  80d0d8:	da400515 	stw	r9,20(sp)
  80d0dc:	d880048d 	sth	r2,18(sp)
  80d0e0:	da400115 	stw	r9,4(sp)
  80d0e4:	0805cc40 	call	805cc4 <___vfprintf_internal_r>
  80d0e8:	d8c00117 	ldw	r3,4(sp)
  80d0ec:	18000005 	stb	zero,0(r3)
  80d0f0:	dfc01817 	ldw	ra,96(sp)
  80d0f4:	dec01a04 	addi	sp,sp,104
  80d0f8:	f800283a 	ret

0080d0fc <strcmp>:
  80d0fc:	2144b03a 	or	r2,r4,r5
  80d100:	108000cc 	andi	r2,r2,3
  80d104:	10001d1e 	bne	r2,zero,80d17c <strcmp+0x80>
  80d108:	200f883a 	mov	r7,r4
  80d10c:	28800017 	ldw	r2,0(r5)
  80d110:	21000017 	ldw	r4,0(r4)
  80d114:	280d883a 	mov	r6,r5
  80d118:	2080161e 	bne	r4,r2,80d174 <strcmp+0x78>
  80d11c:	023fbff4 	movhi	r8,65279
  80d120:	423fbfc4 	addi	r8,r8,-257
  80d124:	2207883a 	add	r3,r4,r8
  80d128:	01602074 	movhi	r5,32897
  80d12c:	29602004 	addi	r5,r5,-32640
  80d130:	1946703a 	and	r3,r3,r5
  80d134:	0104303a 	nor	r2,zero,r4
  80d138:	10c4703a 	and	r2,r2,r3
  80d13c:	10001c1e 	bne	r2,zero,80d1b0 <strcmp+0xb4>
  80d140:	4013883a 	mov	r9,r8
  80d144:	2811883a 	mov	r8,r5
  80d148:	00000106 	br	80d150 <strcmp+0x54>
  80d14c:	1800181e 	bne	r3,zero,80d1b0 <strcmp+0xb4>
  80d150:	39c00104 	addi	r7,r7,4
  80d154:	39000017 	ldw	r4,0(r7)
  80d158:	31800104 	addi	r6,r6,4
  80d15c:	31400017 	ldw	r5,0(r6)
  80d160:	2245883a 	add	r2,r4,r9
  80d164:	1204703a 	and	r2,r2,r8
  80d168:	0106303a 	nor	r3,zero,r4
  80d16c:	1886703a 	and	r3,r3,r2
  80d170:	217ff626 	beq	r4,r5,80d14c <strcmp+0x50>
  80d174:	3809883a 	mov	r4,r7
  80d178:	300b883a 	mov	r5,r6
  80d17c:	20c00007 	ldb	r3,0(r4)
  80d180:	1800051e 	bne	r3,zero,80d198 <strcmp+0x9c>
  80d184:	00000606 	br	80d1a0 <strcmp+0xa4>
  80d188:	21000044 	addi	r4,r4,1
  80d18c:	20c00007 	ldb	r3,0(r4)
  80d190:	29400044 	addi	r5,r5,1
  80d194:	18000226 	beq	r3,zero,80d1a0 <strcmp+0xa4>
  80d198:	28800007 	ldb	r2,0(r5)
  80d19c:	18bffa26 	beq	r3,r2,80d188 <strcmp+0x8c>
  80d1a0:	20c00003 	ldbu	r3,0(r4)
  80d1a4:	28800003 	ldbu	r2,0(r5)
  80d1a8:	1885c83a 	sub	r2,r3,r2
  80d1ac:	f800283a 	ret
  80d1b0:	0005883a 	mov	r2,zero
  80d1b4:	f800283a 	ret

0080d1b8 <match>:
  80d1b8:	21800017 	ldw	r6,0(r4)
  80d1bc:	01c01004 	movi	r7,64
  80d1c0:	02001684 	movi	r8,90
  80d1c4:	28800007 	ldb	r2,0(r5)
  80d1c8:	29400044 	addi	r5,r5,1
  80d1cc:	10000826 	beq	r2,zero,80d1f0 <match+0x38>
  80d1d0:	31800044 	addi	r6,r6,1
  80d1d4:	30c00007 	ldb	r3,0(r6)
  80d1d8:	38c0020e 	bge	r7,r3,80d1e4 <match+0x2c>
  80d1dc:	40c00116 	blt	r8,r3,80d1e4 <match+0x2c>
  80d1e0:	18c00804 	addi	r3,r3,32
  80d1e4:	18bff726 	beq	r3,r2,80d1c4 <match+0xc>
  80d1e8:	0005883a 	mov	r2,zero
  80d1ec:	f800283a 	ret
  80d1f0:	30800044 	addi	r2,r6,1
  80d1f4:	20800015 	stw	r2,0(r4)
  80d1f8:	00800044 	movi	r2,1
  80d1fc:	f800283a 	ret

0080d200 <_strtod_r>:
  80d200:	deffd504 	addi	sp,sp,-172
  80d204:	df002915 	stw	fp,164(sp)
  80d208:	dd402615 	stw	r21,152(sp)
  80d20c:	dd002515 	stw	r20,148(sp)
  80d210:	dfc02a15 	stw	ra,168(sp)
  80d214:	ddc02815 	stw	r23,160(sp)
  80d218:	dd802715 	stw	r22,156(sp)
  80d21c:	dcc02415 	stw	r19,144(sp)
  80d220:	dc802315 	stw	r18,140(sp)
  80d224:	dc402215 	stw	r17,136(sp)
  80d228:	dc002115 	stw	r16,132(sp)
  80d22c:	2829883a 	mov	r20,r5
  80d230:	202b883a 	mov	r21,r4
  80d234:	d9801d15 	stw	r6,116(sp)
  80d238:	d8000915 	stw	zero,36(sp)
  80d23c:	d8000a15 	stw	zero,40(sp)
  80d240:	d9400415 	stw	r5,16(sp)
  80d244:	df000904 	addi	fp,sp,36
  80d248:	dc000417 	ldw	r16,16(sp)
  80d24c:	00800b44 	movi	r2,45
  80d250:	80c00003 	ldbu	r3,0(r16)
  80d254:	10c03536 	bltu	r2,r3,80d32c <_strtod_r+0x12c>
  80d258:	18c5883a 	add	r2,r3,r3
  80d25c:	1085883a 	add	r2,r2,r2
  80d260:	00c02074 	movhi	r3,129
  80d264:	18f49d04 	addi	r3,r3,-11660
  80d268:	10c5883a 	add	r2,r2,r3
  80d26c:	11000017 	ldw	r4,0(r2)
  80d270:	2000683a 	jmp	r4
  80d274:	0080d4ac 	andhi	r2,zero,850
  80d278:	0080d32c 	andhi	r2,zero,844
  80d27c:	0080d32c 	andhi	r2,zero,844
  80d280:	0080d32c 	andhi	r2,zero,844
  80d284:	0080d32c 	andhi	r2,zero,844
  80d288:	0080d32c 	andhi	r2,zero,844
  80d28c:	0080d32c 	andhi	r2,zero,844
  80d290:	0080d32c 	andhi	r2,zero,844
  80d294:	0080d32c 	andhi	r2,zero,844
  80d298:	0080d7f4 	movhi	r2,863
  80d29c:	0080d7f4 	movhi	r2,863
  80d2a0:	0080d7f4 	movhi	r2,863
  80d2a4:	0080d7f4 	movhi	r2,863
  80d2a8:	0080d7f4 	movhi	r2,863
  80d2ac:	0080d32c 	andhi	r2,zero,844
  80d2b0:	0080d32c 	andhi	r2,zero,844
  80d2b4:	0080d32c 	andhi	r2,zero,844
  80d2b8:	0080d32c 	andhi	r2,zero,844
  80d2bc:	0080d32c 	andhi	r2,zero,844
  80d2c0:	0080d32c 	andhi	r2,zero,844
  80d2c4:	0080d32c 	andhi	r2,zero,844
  80d2c8:	0080d32c 	andhi	r2,zero,844
  80d2cc:	0080d32c 	andhi	r2,zero,844
  80d2d0:	0080d32c 	andhi	r2,zero,844
  80d2d4:	0080d32c 	andhi	r2,zero,844
  80d2d8:	0080d32c 	andhi	r2,zero,844
  80d2dc:	0080d32c 	andhi	r2,zero,844
  80d2e0:	0080d32c 	andhi	r2,zero,844
  80d2e4:	0080d32c 	andhi	r2,zero,844
  80d2e8:	0080d32c 	andhi	r2,zero,844
  80d2ec:	0080d32c 	andhi	r2,zero,844
  80d2f0:	0080d32c 	andhi	r2,zero,844
  80d2f4:	0080d7f4 	movhi	r2,863
  80d2f8:	0080d32c 	andhi	r2,zero,844
  80d2fc:	0080d32c 	andhi	r2,zero,844
  80d300:	0080d32c 	andhi	r2,zero,844
  80d304:	0080d32c 	andhi	r2,zero,844
  80d308:	0080d32c 	andhi	r2,zero,844
  80d30c:	0080d32c 	andhi	r2,zero,844
  80d310:	0080d32c 	andhi	r2,zero,844
  80d314:	0080d32c 	andhi	r2,zero,844
  80d318:	0080d32c 	andhi	r2,zero,844
  80d31c:	0080d32c 	andhi	r2,zero,844
  80d320:	0080d7d4 	movui	r2,863
  80d324:	0080d32c 	andhi	r2,zero,844
  80d328:	0080d800 	call	80d80 <__alt_mem_sdram-0x77f280>
  80d32c:	d8001515 	stw	zero,84(sp)
  80d330:	80c00007 	ldb	r3,0(r16)
  80d334:	00800c04 	movi	r2,48
  80d338:	1880e926 	beq	r3,r2,80d6e0 <_strtod_r+0x4e0>
  80d33c:	d8001615 	stw	zero,88(sp)
  80d340:	dc001415 	stw	r16,80(sp)
  80d344:	84400007 	ldb	r17,0(r16)
  80d348:	00800bc4 	movi	r2,47
  80d34c:	1443760e 	bge	r2,r17,80e128 <_strtod_r+0xf28>
  80d350:	00800e44 	movi	r2,57
  80d354:	14437416 	blt	r2,r17,80e128 <_strtod_r+0xf28>
  80d358:	8025883a 	mov	r18,r16
  80d35c:	0027883a 	mov	r19,zero
  80d360:	d8001215 	stw	zero,72(sp)
  80d364:	d8001115 	stw	zero,68(sp)
  80d368:	00000f06 	br	80d3a8 <_strtod_r+0x1a8>
  80d36c:	d9001217 	ldw	r4,72(sp)
  80d370:	01400284 	movi	r5,10
  80d374:	08027a80 	call	8027a8 <__mulsi3>
  80d378:	1445883a 	add	r2,r2,r17
  80d37c:	10bff404 	addi	r2,r2,-48
  80d380:	d8801215 	stw	r2,72(sp)
  80d384:	94000044 	addi	r16,r18,1
  80d388:	dc000415 	stw	r16,16(sp)
  80d38c:	84400007 	ldb	r17,0(r16)
  80d390:	00800bc4 	movi	r2,47
  80d394:	9cc00044 	addi	r19,r19,1
  80d398:	8025883a 	mov	r18,r16
  80d39c:	1440130e 	bge	r2,r17,80d3ec <_strtod_r+0x1ec>
  80d3a0:	00800e44 	movi	r2,57
  80d3a4:	14401116 	blt	r2,r17,80d3ec <_strtod_r+0x1ec>
  80d3a8:	00800204 	movi	r2,8
  80d3ac:	14ffef0e 	bge	r2,r19,80d36c <_strtod_r+0x16c>
  80d3b0:	008003c4 	movi	r2,15
  80d3b4:	14fff316 	blt	r2,r19,80d384 <_strtod_r+0x184>
  80d3b8:	d9001117 	ldw	r4,68(sp)
  80d3bc:	01400284 	movi	r5,10
  80d3c0:	94000044 	addi	r16,r18,1
  80d3c4:	08027a80 	call	8027a8 <__mulsi3>
  80d3c8:	1445883a 	add	r2,r2,r17
  80d3cc:	10bff404 	addi	r2,r2,-48
  80d3d0:	d8801115 	stw	r2,68(sp)
  80d3d4:	dc000415 	stw	r16,16(sp)
  80d3d8:	84400007 	ldb	r17,0(r16)
  80d3dc:	00800bc4 	movi	r2,47
  80d3e0:	9cc00044 	addi	r19,r19,1
  80d3e4:	8025883a 	mov	r18,r16
  80d3e8:	147fed16 	blt	r2,r17,80d3a0 <_strtod_r+0x1a0>
  80d3ec:	00800b84 	movi	r2,46
  80d3f0:	8880c926 	beq	r17,r2,80d718 <_strtod_r+0x518>
  80d3f4:	dcc01815 	stw	r19,96(sp)
  80d3f8:	d8001b15 	stw	zero,108(sp)
  80d3fc:	d8001715 	stw	zero,92(sp)
  80d400:	000d883a 	mov	r6,zero
  80d404:	00801944 	movi	r2,101
  80d408:	88802126 	beq	r17,r2,80d490 <_strtod_r+0x290>
  80d40c:	00801144 	movi	r2,69
  80d410:	88801f26 	beq	r17,r2,80d490 <_strtod_r+0x290>
  80d414:	d9001817 	ldw	r4,96(sp)
  80d418:	2024c03a 	cmpne	r18,r4,zero
  80d41c:	0009883a 	mov	r4,zero
  80d420:	9000651e 	bne	r18,zero,80d5b8 <_strtod_r+0x3b8>
  80d424:	3000c926 	beq	r6,zero,80d74c <_strtod_r+0x54c>
  80d428:	d8801d17 	ldw	r2,116(sp)
  80d42c:	10000326 	beq	r2,zero,80d43c <_strtod_r+0x23c>
  80d430:	d8800417 	ldw	r2,16(sp)
  80d434:	d8c01d17 	ldw	r3,116(sp)
  80d438:	18800015 	stw	r2,0(r3)
  80d43c:	d9001517 	ldw	r4,84(sp)
  80d440:	2005003a 	cmpeq	r2,r4,zero
  80d444:	10001c1e 	bne	r2,zero,80d4b8 <_strtod_r+0x2b8>
  80d448:	e0800017 	ldw	r2,0(fp)
  80d44c:	e0c00117 	ldw	r3,4(fp)
  80d450:	1009883a 	mov	r4,r2
  80d454:	1960003c 	xorhi	r5,r3,32768
  80d458:	2005883a 	mov	r2,r4
  80d45c:	2807883a 	mov	r3,r5
  80d460:	dfc02a17 	ldw	ra,168(sp)
  80d464:	df002917 	ldw	fp,164(sp)
  80d468:	ddc02817 	ldw	r23,160(sp)
  80d46c:	dd802717 	ldw	r22,156(sp)
  80d470:	dd402617 	ldw	r21,152(sp)
  80d474:	dd002517 	ldw	r20,148(sp)
  80d478:	dcc02417 	ldw	r19,144(sp)
  80d47c:	dc802317 	ldw	r18,140(sp)
  80d480:	dc402217 	ldw	r17,136(sp)
  80d484:	dc002117 	ldw	r16,132(sp)
  80d488:	dec02b04 	addi	sp,sp,172
  80d48c:	f800283a 	ret
  80d490:	d8801817 	ldw	r2,96(sp)
  80d494:	1024c03a 	cmpne	r18,r2,zero
  80d498:	90000a1e 	bne	r18,zero,80d4c4 <_strtod_r+0x2c4>
  80d49c:	3000091e 	bne	r6,zero,80d4c4 <_strtod_r+0x2c4>
  80d4a0:	d8c01617 	ldw	r3,88(sp)
  80d4a4:	1805003a 	cmpeq	r2,r3,zero
  80d4a8:	10000626 	beq	r2,zero,80d4c4 <_strtod_r+0x2c4>
  80d4ac:	d8001515 	stw	zero,84(sp)
  80d4b0:	dd000415 	stw	r20,16(sp)
  80d4b4:	003fdc06 	br	80d428 <_strtod_r+0x228>
  80d4b8:	e1000017 	ldw	r4,0(fp)
  80d4bc:	e1400117 	ldw	r5,4(fp)
  80d4c0:	003fe506 	br	80d458 <_strtod_r+0x258>
  80d4c4:	dd000417 	ldw	r20,16(sp)
  80d4c8:	00800ac4 	movi	r2,43
  80d4cc:	a4000044 	addi	r16,r20,1
  80d4d0:	dc000415 	stw	r16,16(sp)
  80d4d4:	a0c00047 	ldb	r3,1(r20)
  80d4d8:	8009883a 	mov	r4,r16
  80d4dc:	1880cb26 	beq	r3,r2,80d80c <_strtod_r+0x60c>
  80d4e0:	00800b44 	movi	r2,45
  80d4e4:	18838326 	beq	r3,r2,80e2f4 <_strtod_r+0x10f4>
  80d4e8:	1823883a 	mov	r17,r3
  80d4ec:	88fff404 	addi	r3,r17,-48
  80d4f0:	00800244 	movi	r2,9
  80d4f4:	d8001915 	stw	zero,100(sp)
  80d4f8:	10c0cb36 	bltu	r2,r3,80d828 <_strtod_r+0x628>
  80d4fc:	00800c04 	movi	r2,48
  80d500:	8880061e 	bne	r17,r2,80d51c <_strtod_r+0x31c>
  80d504:	dc000417 	ldw	r16,16(sp)
  80d508:	8805883a 	mov	r2,r17
  80d50c:	84000044 	addi	r16,r16,1
  80d510:	dc000415 	stw	r16,16(sp)
  80d514:	84400007 	ldb	r17,0(r16)
  80d518:	88bffc26 	beq	r17,r2,80d50c <_strtod_r+0x30c>
  80d51c:	88fff3c4 	addi	r3,r17,-49
  80d520:	00800204 	movi	r2,8
  80d524:	10ffbd36 	bltu	r2,r3,80d41c <_strtod_r+0x21c>
  80d528:	dc000417 	ldw	r16,16(sp)
  80d52c:	893ff404 	addi	r4,r17,-48
  80d530:	00c00bc4 	movi	r3,47
  80d534:	dc001315 	stw	r16,76(sp)
  80d538:	84000044 	addi	r16,r16,1
  80d53c:	dc000415 	stw	r16,16(sp)
  80d540:	84400007 	ldb	r17,0(r16)
  80d544:	1c40100e 	bge	r3,r17,80d588 <_strtod_r+0x388>
  80d548:	00800e44 	movi	r2,57
  80d54c:	14400e16 	blt	r2,r17,80d588 <_strtod_r+0x388>
  80d550:	182f883a 	mov	r23,r3
  80d554:	102d883a 	mov	r22,r2
  80d558:	00000106 	br	80d560 <_strtod_r+0x360>
  80d55c:	b4400a16 	blt	r22,r17,80d588 <_strtod_r+0x388>
  80d560:	84000044 	addi	r16,r16,1
  80d564:	01400284 	movi	r5,10
  80d568:	d9802015 	stw	r6,128(sp)
  80d56c:	08027a80 	call	8027a8 <__mulsi3>
  80d570:	dc000415 	stw	r16,16(sp)
  80d574:	8885883a 	add	r2,r17,r2
  80d578:	84400007 	ldb	r17,0(r16)
  80d57c:	113ff404 	addi	r4,r2,-48
  80d580:	d9802017 	ldw	r6,128(sp)
  80d584:	bc7ff516 	blt	r23,r17,80d55c <_strtod_r+0x35c>
  80d588:	d8801317 	ldw	r2,76(sp)
  80d58c:	8087c83a 	sub	r3,r16,r2
  80d590:	00800204 	movi	r2,8
  80d594:	10c2ff16 	blt	r2,r3,80e194 <_strtod_r+0xf94>
  80d598:	009387c4 	movi	r2,19999
  80d59c:	1100010e 	bge	r2,r4,80d5a4 <_strtod_r+0x3a4>
  80d5a0:	1009883a 	mov	r4,r2
  80d5a4:	d8c01917 	ldw	r3,100(sp)
  80d5a8:	1805003a 	cmpeq	r2,r3,zero
  80d5ac:	103f9c1e 	bne	r2,zero,80d420 <_strtod_r+0x220>
  80d5b0:	0109c83a 	sub	r4,zero,r4
  80d5b4:	903f9b26 	beq	r18,zero,80d424 <_strtod_r+0x224>
  80d5b8:	d8801717 	ldw	r2,92(sp)
  80d5bc:	2089c83a 	sub	r4,r4,r2
  80d5c0:	d9000f15 	stw	r4,60(sp)
  80d5c4:	9800811e 	bne	r19,zero,80d7cc <_strtod_r+0x5cc>
  80d5c8:	dd001817 	ldw	r20,96(sp)
  80d5cc:	dc801817 	ldw	r18,96(sp)
  80d5d0:	00800404 	movi	r2,16
  80d5d4:	1480010e 	bge	r2,r18,80d5dc <_strtod_r+0x3dc>
  80d5d8:	1025883a 	mov	r18,r2
  80d5dc:	d9001217 	ldw	r4,72(sp)
  80d5e0:	08026140 	call	802614 <__floatunsidf>
  80d5e4:	100f883a 	mov	r7,r2
  80d5e8:	e0800015 	stw	r2,0(fp)
  80d5ec:	00800244 	movi	r2,9
  80d5f0:	e0c00115 	stw	r3,4(fp)
  80d5f4:	1480160e 	bge	r2,r18,80d650 <_strtod_r+0x450>
  80d5f8:	900c90fa 	slli	r6,r18,3
  80d5fc:	01002074 	movhi	r4,129
  80d600:	21151804 	addi	r4,r4,21600
  80d604:	180b883a 	mov	r5,r3
  80d608:	310d883a 	add	r6,r6,r4
  80d60c:	30ffef17 	ldw	r3,-68(r6)
  80d610:	30bfee17 	ldw	r2,-72(r6)
  80d614:	3809883a 	mov	r4,r7
  80d618:	180f883a 	mov	r7,r3
  80d61c:	100d883a 	mov	r6,r2
  80d620:	0810fb40 	call	810fb4 <__muldf3>
  80d624:	d9001117 	ldw	r4,68(sp)
  80d628:	1021883a 	mov	r16,r2
  80d62c:	1823883a 	mov	r17,r3
  80d630:	08026140 	call	802614 <__floatunsidf>
  80d634:	880b883a 	mov	r5,r17
  80d638:	180f883a 	mov	r7,r3
  80d63c:	8009883a 	mov	r4,r16
  80d640:	100d883a 	mov	r6,r2
  80d644:	08023480 	call	802348 <__adddf3>
  80d648:	e0c00115 	stw	r3,4(fp)
  80d64c:	e0800015 	stw	r2,0(fp)
  80d650:	d8c01817 	ldw	r3,96(sp)
  80d654:	010003c4 	movi	r4,15
  80d658:	20c09e16 	blt	r4,r3,80d8d4 <_strtod_r+0x6d4>
  80d65c:	d8800f17 	ldw	r2,60(sp)
  80d660:	103f7126 	beq	r2,zero,80d428 <_strtod_r+0x228>
  80d664:	0083d90e 	bge	zero,r2,80e5cc <_strtod_r+0x13cc>
  80d668:	d8c00f17 	ldw	r3,60(sp)
  80d66c:	00800584 	movi	r2,22
  80d670:	10c2ca0e 	bge	r2,r3,80e19c <_strtod_r+0xf9c>
  80d674:	d8801817 	ldw	r2,96(sp)
  80d678:	d8c00f17 	ldw	r3,60(sp)
  80d67c:	20a3c83a 	sub	r17,r4,r2
  80d680:	88800584 	addi	r2,r17,22
  80d684:	10c09316 	blt	r2,r3,80d8d4 <_strtod_r+0x6d4>
  80d688:	880890fa 	slli	r4,r17,3
  80d68c:	04002074 	movhi	r16,129
  80d690:	84151804 	addi	r16,r16,21600
  80d694:	e0800017 	ldw	r2,0(fp)
  80d698:	2409883a 	add	r4,r4,r16
  80d69c:	22000017 	ldw	r8,0(r4)
  80d6a0:	22400117 	ldw	r9,4(r4)
  80d6a4:	e0c00117 	ldw	r3,4(fp)
  80d6a8:	1009883a 	mov	r4,r2
  80d6ac:	480f883a 	mov	r7,r9
  80d6b0:	180b883a 	mov	r5,r3
  80d6b4:	400d883a 	mov	r6,r8
  80d6b8:	0810fb40 	call	810fb4 <__muldf3>
  80d6bc:	d9000f17 	ldw	r4,60(sp)
  80d6c0:	180b883a 	mov	r5,r3
  80d6c4:	2455c83a 	sub	r10,r4,r17
  80d6c8:	501490fa 	slli	r10,r10,3
  80d6cc:	1009883a 	mov	r4,r2
  80d6d0:	5415883a 	add	r10,r10,r16
  80d6d4:	52000017 	ldw	r8,0(r10)
  80d6d8:	52400117 	ldw	r9,4(r10)
  80d6dc:	0002b906 	br	80e1c4 <_strtod_r+0xfc4>
  80d6e0:	80c00047 	ldb	r3,1(r16)
  80d6e4:	00801604 	movi	r2,88
  80d6e8:	18805226 	beq	r3,r2,80d834 <_strtod_r+0x634>
  80d6ec:	00801e04 	movi	r2,120
  80d6f0:	18805026 	beq	r3,r2,80d834 <_strtod_r+0x634>
  80d6f4:	84000044 	addi	r16,r16,1
  80d6f8:	dc000415 	stw	r16,16(sp)
  80d6fc:	80c00007 	ldb	r3,0(r16)
  80d700:	00800c04 	movi	r2,48
  80d704:	18bffb26 	beq	r3,r2,80d6f4 <_strtod_r+0x4f4>
  80d708:	183f4726 	beq	r3,zero,80d428 <_strtod_r+0x228>
  80d70c:	01000044 	movi	r4,1
  80d710:	d9001615 	stw	r4,88(sp)
  80d714:	003f0a06 	br	80d340 <_strtod_r+0x140>
  80d718:	84000044 	addi	r16,r16,1
  80d71c:	dc000415 	stw	r16,16(sp)
  80d720:	94400047 	ldb	r17,1(r18)
  80d724:	9800ba26 	beq	r19,zero,80da10 <_strtod_r+0x810>
  80d728:	dcc01815 	stw	r19,96(sp)
  80d72c:	d8001715 	stw	zero,92(sp)
  80d730:	000d883a 	mov	r6,zero
  80d734:	8dbff404 	addi	r22,r17,-48
  80d738:	00800244 	movi	r2,9
  80d73c:	15826e2e 	bgeu	r2,r22,80e0f8 <_strtod_r+0xef8>
  80d740:	01000044 	movi	r4,1
  80d744:	d9001b15 	stw	r4,108(sp)
  80d748:	003f2e06 	br	80d404 <_strtod_r+0x204>
  80d74c:	d8c01617 	ldw	r3,88(sp)
  80d750:	1804c03a 	cmpne	r2,r3,zero
  80d754:	103f341e 	bne	r2,zero,80d428 <_strtod_r+0x228>
  80d758:	d9001b17 	ldw	r4,108(sp)
  80d75c:	2004c03a 	cmpne	r2,r4,zero
  80d760:	103f521e 	bne	r2,zero,80d4ac <_strtod_r+0x2ac>
  80d764:	00801384 	movi	r2,78
  80d768:	8883b526 	beq	r17,r2,80e640 <_strtod_r+0x1440>
  80d76c:	1443b016 	blt	r2,r17,80e630 <_strtod_r+0x1430>
  80d770:	00801244 	movi	r2,73
  80d774:	88bf4d1e 	bne	r17,r2,80d4ac <_strtod_r+0x2ac>
  80d778:	dc000404 	addi	r16,sp,16
  80d77c:	8009883a 	mov	r4,r16
  80d780:	01402074 	movhi	r5,129
  80d784:	29556104 	addi	r5,r5,21892
  80d788:	080d1b80 	call	80d1b8 <match>
  80d78c:	103f4726 	beq	r2,zero,80d4ac <_strtod_r+0x2ac>
  80d790:	d8800417 	ldw	r2,16(sp)
  80d794:	8009883a 	mov	r4,r16
  80d798:	01402074 	movhi	r5,129
  80d79c:	29556204 	addi	r5,r5,21896
  80d7a0:	143fffc4 	addi	r16,r2,-1
  80d7a4:	dc000415 	stw	r16,16(sp)
  80d7a8:	080d1b80 	call	80d1b8 <match>
  80d7ac:	1000031e 	bne	r2,zero,80d7bc <_strtod_r+0x5bc>
  80d7b0:	d8800417 	ldw	r2,16(sp)
  80d7b4:	14000044 	addi	r16,r2,1
  80d7b8:	dc000415 	stw	r16,16(sp)
  80d7bc:	019ffc34 	movhi	r6,32752
  80d7c0:	e1800115 	stw	r6,4(fp)
  80d7c4:	e0000015 	stw	zero,0(fp)
  80d7c8:	003f1706 	br	80d428 <_strtod_r+0x228>
  80d7cc:	9829883a 	mov	r20,r19
  80d7d0:	003f7e06 	br	80d5cc <_strtod_r+0x3cc>
  80d7d4:	d8001515 	stw	zero,84(sp)
  80d7d8:	84000044 	addi	r16,r16,1
  80d7dc:	dc000415 	stw	r16,16(sp)
  80d7e0:	80800007 	ldb	r2,0(r16)
  80d7e4:	103ed21e 	bne	r2,zero,80d330 <_strtod_r+0x130>
  80d7e8:	d8001515 	stw	zero,84(sp)
  80d7ec:	dd000415 	stw	r20,16(sp)
  80d7f0:	003f0d06 	br	80d428 <_strtod_r+0x228>
  80d7f4:	84000044 	addi	r16,r16,1
  80d7f8:	dc000415 	stw	r16,16(sp)
  80d7fc:	003e9206 	br	80d248 <_strtod_r+0x48>
  80d800:	00800044 	movi	r2,1
  80d804:	d8801515 	stw	r2,84(sp)
  80d808:	003ff306 	br	80d7d8 <_strtod_r+0x5d8>
  80d80c:	d8001915 	stw	zero,100(sp)
  80d810:	84000044 	addi	r16,r16,1
  80d814:	dc000415 	stw	r16,16(sp)
  80d818:	24400047 	ldb	r17,1(r4)
  80d81c:	00800244 	movi	r2,9
  80d820:	88fff404 	addi	r3,r17,-48
  80d824:	10ff352e 	bgeu	r2,r3,80d4fc <_strtod_r+0x2fc>
  80d828:	0009883a 	mov	r4,zero
  80d82c:	dd000415 	stw	r20,16(sp)
  80d830:	003efb06 	br	80d420 <_strtod_r+0x220>
  80d834:	d8c01517 	ldw	r3,84(sp)
  80d838:	04402074 	movhi	r17,129
  80d83c:	8c579704 	addi	r17,r17,24156
  80d840:	d8800504 	addi	r2,sp,20
  80d844:	a809883a 	mov	r4,r21
  80d848:	d9400404 	addi	r5,sp,16
  80d84c:	880d883a 	mov	r6,r17
  80d850:	d9c00604 	addi	r7,sp,24
  80d854:	d8800015 	stw	r2,0(sp)
  80d858:	d8c00115 	stw	r3,4(sp)
  80d85c:	080f5280 	call	80f528 <__gethex>
  80d860:	140001cc 	andi	r16,r2,7
  80d864:	1025883a 	mov	r18,r2
  80d868:	803eef26 	beq	r16,zero,80d428 <_strtod_r+0x228>
  80d86c:	04c00184 	movi	r19,6
  80d870:	84ff0e26 	beq	r16,r19,80d4ac <_strtod_r+0x2ac>
  80d874:	d9800517 	ldw	r6,20(sp)
  80d878:	30000626 	beq	r6,zero,80d894 <_strtod_r+0x694>
  80d87c:	89400017 	ldw	r5,0(r17)
  80d880:	d9000d04 	addi	r4,sp,52
  80d884:	080bc980 	call	80bc98 <__copybits>
  80d888:	d9400517 	ldw	r5,20(sp)
  80d88c:	a809883a 	mov	r4,r21
  80d890:	080b7f80 	call	80b7f8 <_Bfree>
  80d894:	d9400617 	ldw	r5,24(sp)
  80d898:	9c025436 	bltu	r19,r16,80e1ec <_strtod_r+0xfec>
  80d89c:	8405883a 	add	r2,r16,r16
  80d8a0:	1085883a 	add	r2,r2,r2
  80d8a4:	00c02074 	movhi	r3,129
  80d8a8:	18f62e04 	addi	r3,r3,-10056
  80d8ac:	10c5883a 	add	r2,r2,r3
  80d8b0:	11000017 	ldw	r4,0(r2)
  80d8b4:	2000683a 	jmp	r4
  80d8b8:	0080e22c 	andhi	r2,zero,904
  80d8bc:	0080e238 	rdprs	r2,zero,904
  80d8c0:	0080e1dc 	xori	r2,zero,903
  80d8c4:	0080e204 	movi	r2,904
  80d8c8:	0080e214 	movui	r2,904
  80d8cc:	0080e238 	rdprs	r2,zero,904
  80d8d0:	0080e22c 	andhi	r2,zero,904
  80d8d4:	d9001817 	ldw	r4,96(sp)
  80d8d8:	d8c00f17 	ldw	r3,60(sp)
  80d8dc:	2485c83a 	sub	r2,r4,r18
  80d8e0:	18a1883a 	add	r16,r3,r2
  80d8e4:	0402e80e 	bge	zero,r16,80e488 <_strtod_r+0x1288>
  80d8e8:	814003cc 	andi	r5,r16,15
  80d8ec:	28000f26 	beq	r5,zero,80d92c <_strtod_r+0x72c>
  80d8f0:	280a90fa 	slli	r5,r5,3
  80d8f4:	01002074 	movhi	r4,129
  80d8f8:	21151804 	addi	r4,r4,21600
  80d8fc:	e0800017 	ldw	r2,0(fp)
  80d900:	290b883a 	add	r5,r5,r4
  80d904:	2a000017 	ldw	r8,0(r5)
  80d908:	e0c00117 	ldw	r3,4(fp)
  80d90c:	2a400117 	ldw	r9,4(r5)
  80d910:	1009883a 	mov	r4,r2
  80d914:	180b883a 	mov	r5,r3
  80d918:	480f883a 	mov	r7,r9
  80d91c:	400d883a 	mov	r6,r8
  80d920:	0810fb40 	call	810fb4 <__muldf3>
  80d924:	e0c00115 	stw	r3,4(fp)
  80d928:	e0800015 	stw	r2,0(fp)
  80d92c:	00bffc04 	movi	r2,-16
  80d930:	808c703a 	and	r6,r16,r2
  80d934:	30006726 	beq	r6,zero,80dad4 <_strtod_r+0x8d4>
  80d938:	00804d04 	movi	r2,308
  80d93c:	11820f16 	blt	r2,r6,80e17c <_strtod_r+0xf7c>
  80d940:	3021d13a 	srai	r16,r6,4
  80d944:	00800044 	movi	r2,1
  80d948:	14037f0e 	bge	r2,r16,80e748 <_strtod_r+0x1548>
  80d94c:	05802074 	movhi	r22,129
  80d950:	b5954a04 	addi	r22,r22,21800
  80d954:	1027883a 	mov	r19,r2
  80d958:	0025883a 	mov	r18,zero
  80d95c:	b023883a 	mov	r17,r22
  80d960:	8080004c 	andi	r2,r16,1
  80d964:	1005003a 	cmpeq	r2,r2,zero
  80d968:	1000091e 	bne	r2,zero,80d990 <_strtod_r+0x790>
  80d96c:	e0800017 	ldw	r2,0(fp)
  80d970:	e0c00117 	ldw	r3,4(fp)
  80d974:	89800017 	ldw	r6,0(r17)
  80d978:	89c00117 	ldw	r7,4(r17)
  80d97c:	180b883a 	mov	r5,r3
  80d980:	1009883a 	mov	r4,r2
  80d984:	0810fb40 	call	810fb4 <__muldf3>
  80d988:	e0c00115 	stw	r3,4(fp)
  80d98c:	e0800015 	stw	r2,0(fp)
  80d990:	8021d07a 	srai	r16,r16,1
  80d994:	94800044 	addi	r18,r18,1
  80d998:	8c400204 	addi	r17,r17,8
  80d99c:	9c3ff016 	blt	r19,r16,80d960 <_strtod_r+0x760>
  80d9a0:	900e90fa 	slli	r7,r18,3
  80d9a4:	e2000117 	ldw	r8,4(fp)
  80d9a8:	e1000017 	ldw	r4,0(fp)
  80d9ac:	3d8f883a 	add	r7,r7,r22
  80d9b0:	38800017 	ldw	r2,0(r7)
  80d9b4:	38c00117 	ldw	r3,4(r7)
  80d9b8:	01bf2c34 	movhi	r6,64688
  80d9bc:	418d883a 	add	r6,r8,r6
  80d9c0:	300b883a 	mov	r5,r6
  80d9c4:	180f883a 	mov	r7,r3
  80d9c8:	100d883a 	mov	r6,r2
  80d9cc:	0810fb40 	call	810fb4 <__muldf3>
  80d9d0:	1009883a 	mov	r4,r2
  80d9d4:	180b883a 	mov	r5,r3
  80d9d8:	199ffc2c 	andhi	r6,r3,32752
  80d9dc:	009f2834 	movhi	r2,31904
  80d9e0:	e1000015 	stw	r4,0(fp)
  80d9e4:	e1400115 	stw	r5,4(fp)
  80d9e8:	1181e436 	bltu	r2,r6,80e17c <_strtod_r+0xf7c>
  80d9ec:	009f2434 	movhi	r2,31888
  80d9f0:	11833f2e 	bgeu	r2,r6,80e6f0 <_strtod_r+0x14f0>
  80d9f4:	d8001c15 	stw	zero,112(sp)
  80d9f8:	019ffc34 	movhi	r6,32752
  80d9fc:	31bfffc4 	addi	r6,r6,-1
  80da00:	01ffffc4 	movi	r7,-1
  80da04:	e1800115 	stw	r6,4(fp)
  80da08:	e1c00015 	stw	r7,0(fp)
  80da0c:	00003206 	br	80dad8 <_strtod_r+0x8d8>
  80da10:	00800c04 	movi	r2,48
  80da14:	8883221e 	bne	r17,r2,80e6a0 <_strtod_r+0x14a0>
  80da18:	8805883a 	mov	r2,r17
  80da1c:	000d883a 	mov	r6,zero
  80da20:	84000044 	addi	r16,r16,1
  80da24:	dc000415 	stw	r16,16(sp)
  80da28:	84400007 	ldb	r17,0(r16)
  80da2c:	31800044 	addi	r6,r6,1
  80da30:	88bffb26 	beq	r17,r2,80da20 <_strtod_r+0x820>
  80da34:	88fff3c4 	addi	r3,r17,-49
  80da38:	00800204 	movi	r2,8
  80da3c:	10c1ca36 	bltu	r2,r3,80e168 <_strtod_r+0xf68>
  80da40:	d8c00417 	ldw	r3,16(sp)
  80da44:	d9801715 	stw	r6,92(sp)
  80da48:	8dbff404 	addi	r22,r17,-48
  80da4c:	d8c01415 	stw	r3,80(sp)
  80da50:	1821883a 	mov	r16,r3
  80da54:	d8001815 	stw	zero,96(sp)
  80da58:	01800044 	movi	r6,1
  80da5c:	b0023526 	beq	r22,zero,80e334 <_strtod_r+0x1134>
  80da60:	d9001717 	ldw	r4,92(sp)
  80da64:	00800044 	movi	r2,1
  80da68:	2189883a 	add	r4,r4,r6
  80da6c:	d9001715 	stw	r4,92(sp)
  80da70:	1183390e 	bge	r2,r6,80e758 <_strtod_r+0x1558>
  80da74:	dc401817 	ldw	r17,96(sp)
  80da78:	1025883a 	mov	r18,r2
  80da7c:	05c00204 	movi	r23,8
  80da80:	00000806 	br	80daa4 <_strtod_r+0x8a4>
  80da84:	d9001217 	ldw	r4,72(sp)
  80da88:	01400284 	movi	r5,10
  80da8c:	d9802015 	stw	r6,128(sp)
  80da90:	08027a80 	call	8027a8 <__mulsi3>
  80da94:	d9802017 	ldw	r6,128(sp)
  80da98:	d8801215 	stw	r2,72(sp)
  80da9c:	94800044 	addi	r18,r18,1
  80daa0:	91821726 	beq	r18,r6,80e300 <_strtod_r+0x1100>
  80daa4:	8c400044 	addi	r17,r17,1
  80daa8:	88bfffc4 	addi	r2,r17,-1
  80daac:	b8bff50e 	bge	r23,r2,80da84 <_strtod_r+0x884>
  80dab0:	00800404 	movi	r2,16
  80dab4:	147ff916 	blt	r2,r17,80da9c <_strtod_r+0x89c>
  80dab8:	d9001117 	ldw	r4,68(sp)
  80dabc:	01400284 	movi	r5,10
  80dac0:	d9802015 	stw	r6,128(sp)
  80dac4:	08027a80 	call	8027a8 <__mulsi3>
  80dac8:	d9802017 	ldw	r6,128(sp)
  80dacc:	d8801115 	stw	r2,68(sp)
  80dad0:	003ff206 	br	80da9c <_strtod_r+0x89c>
  80dad4:	d8001c15 	stw	zero,112(sp)
  80dad8:	d8c01217 	ldw	r3,72(sp)
  80dadc:	d9401417 	ldw	r5,80(sp)
  80dae0:	d9c01817 	ldw	r7,96(sp)
  80dae4:	a809883a 	mov	r4,r21
  80dae8:	a00d883a 	mov	r6,r20
  80daec:	d8c00015 	stw	r3,0(sp)
  80daf0:	080c7640 	call	80c764 <__s2b>
  80daf4:	11000304 	addi	r4,r2,12
  80daf8:	d8801015 	stw	r2,64(sp)
  80dafc:	d8800f17 	ldw	r2,60(sp)
  80db00:	d9001f15 	stw	r4,124(sp)
  80db04:	1004803a 	cmplt	r2,r2,zero
  80db08:	d8801e15 	stw	r2,120(sp)
  80db0c:	d8c01017 	ldw	r3,64(sp)
  80db10:	a809883a 	mov	r4,r21
  80db14:	19400117 	ldw	r5,4(r3)
  80db18:	080bd780 	call	80bd78 <_Balloc>
  80db1c:	d9001017 	ldw	r4,64(sp)
  80db20:	d9401f17 	ldw	r5,124(sp)
  80db24:	102f883a 	mov	r23,r2
  80db28:	21800417 	ldw	r6,16(r4)
  80db2c:	11000304 	addi	r4,r2,12
  80db30:	318d883a 	add	r6,r6,r6
  80db34:	318d883a 	add	r6,r6,r6
  80db38:	31800204 	addi	r6,r6,8
  80db3c:	08050800 	call	805080 <memcpy>
  80db40:	e2000017 	ldw	r8,0(fp)
  80db44:	e2400117 	ldw	r9,4(fp)
  80db48:	a809883a 	mov	r4,r21
  80db4c:	400b883a 	mov	r5,r8
  80db50:	d9c00204 	addi	r7,sp,8
  80db54:	d8800304 	addi	r2,sp,12
  80db58:	480d883a 	mov	r6,r9
  80db5c:	d8800015 	stw	r2,0(sp)
  80db60:	080be340 	call	80be34 <__d2b>
  80db64:	a809883a 	mov	r4,r21
  80db68:	01400044 	movi	r5,1
  80db6c:	d8800515 	stw	r2,20(sp)
  80db70:	080c4dc0 	call	80c4dc <__i2b>
  80db74:	d8c01e17 	ldw	r3,120(sp)
  80db78:	102d883a 	mov	r22,r2
  80db7c:	1801091e 	bne	r3,zero,80dfa4 <_strtod_r+0xda4>
  80db80:	dd000f17 	ldw	r20,60(sp)
  80db84:	000f883a 	mov	r7,zero
  80db88:	0013883a 	mov	r9,zero
  80db8c:	a011883a 	mov	r8,r20
  80db90:	d8800217 	ldw	r2,8(sp)
  80db94:	10010116 	blt	r2,zero,80df9c <_strtod_r+0xd9c>
  80db98:	388f883a 	add	r7,r7,r2
  80db9c:	d8c01c17 	ldw	r3,112(sp)
  80dba0:	d9400317 	ldw	r5,12(sp)
  80dba4:	10c9c83a 	sub	r4,r2,r3
  80dba8:	2145883a 	add	r2,r4,r5
  80dbac:	10bfffc4 	addi	r2,r2,-1
  80dbb0:	00ff0084 	movi	r3,-1022
  80dbb4:	10c09f0e 	bge	r2,r3,80de34 <_strtod_r+0xc34>
  80dbb8:	21810cc4 	addi	r6,r4,1075
  80dbbc:	d9001c17 	ldw	r4,112(sp)
  80dbc0:	4185883a 	add	r2,r8,r6
  80dbc4:	39a1883a 	add	r16,r7,r6
  80dbc8:	20a5883a 	add	r18,r4,r2
  80dbcc:	3807883a 	mov	r3,r7
  80dbd0:	81c0010e 	bge	r16,r7,80dbd8 <_strtod_r+0x9d8>
  80dbd4:	8007883a 	mov	r3,r16
  80dbd8:	9005883a 	mov	r2,r18
  80dbdc:	1c80010e 	bge	r3,r18,80dbe4 <_strtod_r+0x9e4>
  80dbe0:	1805883a 	mov	r2,r3
  80dbe4:	0080eb0e 	bge	zero,r2,80df94 <_strtod_r+0xd94>
  80dbe8:	38a7c83a 	sub	r19,r7,r2
  80dbec:	80a1c83a 	sub	r16,r16,r2
  80dbf0:	90a5c83a 	sub	r18,r18,r2
  80dbf4:	02400e0e 	bge	zero,r9,80dc30 <_strtod_r+0xa30>
  80dbf8:	480d883a 	mov	r6,r9
  80dbfc:	b00b883a 	mov	r5,r22
  80dc00:	a809883a 	mov	r4,r21
  80dc04:	080c6440 	call	80c644 <__pow5mult>
  80dc08:	d9800517 	ldw	r6,20(sp)
  80dc0c:	a809883a 	mov	r4,r21
  80dc10:	100b883a 	mov	r5,r2
  80dc14:	102d883a 	mov	r22,r2
  80dc18:	080c2880 	call	80c288 <__multiply>
  80dc1c:	d9400517 	ldw	r5,20(sp)
  80dc20:	1023883a 	mov	r17,r2
  80dc24:	a809883a 	mov	r4,r21
  80dc28:	080b7f80 	call	80b7f8 <_Bfree>
  80dc2c:	dc400515 	stw	r17,20(sp)
  80dc30:	0400050e 	bge	zero,r16,80dc48 <_strtod_r+0xa48>
  80dc34:	d9400517 	ldw	r5,20(sp)
  80dc38:	800d883a 	mov	r6,r16
  80dc3c:	a809883a 	mov	r4,r21
  80dc40:	080c13c0 	call	80c13c <__lshift>
  80dc44:	d8800515 	stw	r2,20(sp)
  80dc48:	a000741e 	bne	r20,zero,80de1c <_strtod_r+0xc1c>
  80dc4c:	0480050e 	bge	zero,r18,80dc64 <_strtod_r+0xa64>
  80dc50:	b80b883a 	mov	r5,r23
  80dc54:	900d883a 	mov	r6,r18
  80dc58:	a809883a 	mov	r4,r21
  80dc5c:	080c13c0 	call	80c13c <__lshift>
  80dc60:	102f883a 	mov	r23,r2
  80dc64:	04c0050e 	bge	zero,r19,80dc7c <_strtod_r+0xa7c>
  80dc68:	b00b883a 	mov	r5,r22
  80dc6c:	980d883a 	mov	r6,r19
  80dc70:	a809883a 	mov	r4,r21
  80dc74:	080c13c0 	call	80c13c <__lshift>
  80dc78:	102d883a 	mov	r22,r2
  80dc7c:	d9400517 	ldw	r5,20(sp)
  80dc80:	a809883a 	mov	r4,r21
  80dc84:	b80d883a 	mov	r6,r23
  80dc88:	080bfb00 	call	80bfb0 <__mdiff>
  80dc8c:	1029883a 	mov	r20,r2
  80dc90:	10800317 	ldw	r2,12(r2)
  80dc94:	a009883a 	mov	r4,r20
  80dc98:	a0000315 	stw	zero,12(r20)
  80dc9c:	b00b883a 	mov	r5,r22
  80dca0:	d8801a15 	stw	r2,104(sp)
  80dca4:	080b9540 	call	80b954 <__mcmp>
  80dca8:	1001a616 	blt	r2,zero,80e344 <_strtod_r+0x1144>
  80dcac:	10016d26 	beq	r2,zero,80e264 <_strtod_r+0x1064>
  80dcb0:	a009883a 	mov	r4,r20
  80dcb4:	b00b883a 	mov	r5,r22
  80dcb8:	080bb540 	call	80bb54 <__ratio>
  80dcbc:	0011883a 	mov	r8,zero
  80dcc0:	02500034 	movhi	r9,16384
  80dcc4:	480f883a 	mov	r7,r9
  80dcc8:	1009883a 	mov	r4,r2
  80dccc:	180b883a 	mov	r5,r3
  80dcd0:	400d883a 	mov	r6,r8
  80dcd4:	1021883a 	mov	r16,r2
  80dcd8:	1823883a 	mov	r17,r3
  80dcdc:	08116200 	call	811620 <__ledf2>
  80dce0:	00805716 	blt	zero,r2,80de40 <_strtod_r+0xc40>
  80dce4:	d8801a17 	ldw	r2,104(sp)
  80dce8:	1025003a 	cmpeq	r18,r2,zero
  80dcec:	90008c1e 	bne	r18,zero,80df20 <_strtod_r+0xd20>
  80dcf0:	008ffc34 	movhi	r2,16368
  80dcf4:	0021883a 	mov	r16,zero
  80dcf8:	1023883a 	mov	r17,r2
  80dcfc:	d8000715 	stw	zero,28(sp)
  80dd00:	d8800815 	stw	r2,32(sp)
  80dd04:	e1c00117 	ldw	r7,4(fp)
  80dd08:	009ff834 	movhi	r2,32736
  80dd0c:	3cdffc2c 	andhi	r19,r7,32752
  80dd10:	98805f26 	beq	r19,r2,80de90 <_strtod_r+0xc90>
  80dd14:	d8c01c17 	ldw	r3,112(sp)
  80dd18:	18001b26 	beq	r3,zero,80dd88 <_strtod_r+0xb88>
  80dd1c:	0081a834 	movhi	r2,1696
  80dd20:	14c01936 	bltu	r2,r19,80dd88 <_strtod_r+0xb88>
  80dd24:	00bff034 	movhi	r2,65472
  80dd28:	00d07834 	movhi	r3,16864
  80dd2c:	18ffffc4 	addi	r3,r3,-1
  80dd30:	180f883a 	mov	r7,r3
  80dd34:	8009883a 	mov	r4,r16
  80dd38:	880b883a 	mov	r5,r17
  80dd3c:	100d883a 	mov	r6,r2
  80dd40:	08116200 	call	811620 <__ledf2>
  80dd44:	00800b16 	blt	zero,r2,80dd74 <_strtod_r+0xb74>
  80dd48:	880b883a 	mov	r5,r17
  80dd4c:	8009883a 	mov	r4,r16
  80dd50:	08100dc0 	call	8100dc <__fixunsdfsi>
  80dd54:	1000e31e 	bne	r2,zero,80e0e4 <_strtod_r+0xee4>
  80dd58:	0021883a 	mov	r16,zero
  80dd5c:	044ffc34 	movhi	r17,16368
  80dd60:	9000dd1e 	bne	r18,zero,80e0d8 <_strtod_r+0xed8>
  80dd64:	8005883a 	mov	r2,r16
  80dd68:	8807883a 	mov	r3,r17
  80dd6c:	d8c00815 	stw	r3,32(sp)
  80dd70:	d8800715 	stw	r2,28(sp)
  80dd74:	d8800817 	ldw	r2,32(sp)
  80dd78:	00c1ac34 	movhi	r3,1712
  80dd7c:	14c5c83a 	sub	r2,r2,r19
  80dd80:	10c5883a 	add	r2,r2,r3
  80dd84:	d8800815 	stw	r2,32(sp)
  80dd88:	e0800017 	ldw	r2,0(fp)
  80dd8c:	e0c00117 	ldw	r3,4(fp)
  80dd90:	1009883a 	mov	r4,r2
  80dd94:	180b883a 	mov	r5,r3
  80dd98:	080b9b40 	call	80b9b4 <__ulp>
  80dd9c:	d9800717 	ldw	r6,28(sp)
  80dda0:	d9c00817 	ldw	r7,32(sp)
  80dda4:	180b883a 	mov	r5,r3
  80dda8:	1009883a 	mov	r4,r2
  80ddac:	0810fb40 	call	810fb4 <__muldf3>
  80ddb0:	e2000017 	ldw	r8,0(fp)
  80ddb4:	e2400117 	ldw	r9,4(fp)
  80ddb8:	180b883a 	mov	r5,r3
  80ddbc:	1009883a 	mov	r4,r2
  80ddc0:	480f883a 	mov	r7,r9
  80ddc4:	400d883a 	mov	r6,r8
  80ddc8:	08023480 	call	802348 <__adddf3>
  80ddcc:	e0c00115 	stw	r3,4(fp)
  80ddd0:	e0800015 	stw	r2,0(fp)
  80ddd4:	d9001c17 	ldw	r4,112(sp)
  80ddd8:	e4800117 	ldw	r18,4(fp)
  80dddc:	2000021e 	bne	r4,zero,80dde8 <_strtod_r+0xbe8>
  80dde0:	909ffc2c 	andhi	r2,r18,32752
  80dde4:	98807f26 	beq	r19,r2,80dfe4 <_strtod_r+0xde4>
  80dde8:	d9400517 	ldw	r5,20(sp)
  80ddec:	a809883a 	mov	r4,r21
  80ddf0:	080b7f80 	call	80b7f8 <_Bfree>
  80ddf4:	a809883a 	mov	r4,r21
  80ddf8:	b80b883a 	mov	r5,r23
  80ddfc:	080b7f80 	call	80b7f8 <_Bfree>
  80de00:	a809883a 	mov	r4,r21
  80de04:	b00b883a 	mov	r5,r22
  80de08:	080b7f80 	call	80b7f8 <_Bfree>
  80de0c:	a809883a 	mov	r4,r21
  80de10:	a00b883a 	mov	r5,r20
  80de14:	080b7f80 	call	80b7f8 <_Bfree>
  80de18:	003f3c06 	br	80db0c <_strtod_r+0x90c>
  80de1c:	b80b883a 	mov	r5,r23
  80de20:	a00d883a 	mov	r6,r20
  80de24:	a809883a 	mov	r4,r21
  80de28:	080c6440 	call	80c644 <__pow5mult>
  80de2c:	102f883a 	mov	r23,r2
  80de30:	003f8606 	br	80dc4c <_strtod_r+0xa4c>
  80de34:	00800d84 	movi	r2,54
  80de38:	114dc83a 	sub	r6,r2,r5
  80de3c:	003f5f06 	br	80dbbc <_strtod_r+0x9bc>
  80de40:	0005883a 	mov	r2,zero
  80de44:	00cff834 	movhi	r3,16352
  80de48:	8009883a 	mov	r4,r16
  80de4c:	880b883a 	mov	r5,r17
  80de50:	180f883a 	mov	r7,r3
  80de54:	100d883a 	mov	r6,r2
  80de58:	0810fb40 	call	810fb4 <__muldf3>
  80de5c:	1009883a 	mov	r4,r2
  80de60:	d8801a17 	ldw	r2,104(sp)
  80de64:	2021883a 	mov	r16,r4
  80de68:	1823883a 	mov	r17,r3
  80de6c:	1025003a 	cmpeq	r18,r2,zero
  80de70:	9000451e 	bne	r18,zero,80df88 <_strtod_r+0xd88>
  80de74:	2005883a 	mov	r2,r4
  80de78:	d8800715 	stw	r2,28(sp)
  80de7c:	d8c00815 	stw	r3,32(sp)
  80de80:	e1c00117 	ldw	r7,4(fp)
  80de84:	009ff834 	movhi	r2,32736
  80de88:	3cdffc2c 	andhi	r19,r7,32752
  80de8c:	98bfa11e 	bne	r19,r2,80dd14 <_strtod_r+0xb14>
  80de90:	e1000017 	ldw	r4,0(fp)
  80de94:	01bf2c34 	movhi	r6,64688
  80de98:	398d883a 	add	r6,r7,r6
  80de9c:	d9000b15 	stw	r4,44(sp)
  80dea0:	d9c00c15 	stw	r7,48(sp)
  80dea4:	300b883a 	mov	r5,r6
  80dea8:	e1800115 	stw	r6,4(fp)
  80deac:	080b9b40 	call	80b9b4 <__ulp>
  80deb0:	d9800717 	ldw	r6,28(sp)
  80deb4:	d9c00817 	ldw	r7,32(sp)
  80deb8:	180b883a 	mov	r5,r3
  80debc:	1009883a 	mov	r4,r2
  80dec0:	0810fb40 	call	810fb4 <__muldf3>
  80dec4:	e2000017 	ldw	r8,0(fp)
  80dec8:	e2400117 	ldw	r9,4(fp)
  80decc:	180b883a 	mov	r5,r3
  80ded0:	1009883a 	mov	r4,r2
  80ded4:	480f883a 	mov	r7,r9
  80ded8:	400d883a 	mov	r6,r8
  80dedc:	08023480 	call	802348 <__adddf3>
  80dee0:	1009883a 	mov	r4,r2
  80dee4:	180b883a 	mov	r5,r3
  80dee8:	009f2834 	movhi	r2,31904
  80deec:	10bfffc4 	addi	r2,r2,-1
  80def0:	18dffc2c 	andhi	r3,r3,32752
  80def4:	e1000015 	stw	r4,0(fp)
  80def8:	e1400115 	stw	r5,4(fp)
  80defc:	10c0722e 	bgeu	r2,r3,80e0c8 <_strtod_r+0xec8>
  80df00:	d8800c17 	ldw	r2,48(sp)
  80df04:	011ffc34 	movhi	r4,32752
  80df08:	213fffc4 	addi	r4,r4,-1
  80df0c:	11007d26 	beq	r2,r4,80e104 <_strtod_r+0xf04>
  80df10:	01ffffc4 	movi	r7,-1
  80df14:	e1000115 	stw	r4,4(fp)
  80df18:	e1c00015 	stw	r7,0(fp)
  80df1c:	003fb206 	br	80dde8 <_strtod_r+0xbe8>
  80df20:	e0c00017 	ldw	r3,0(fp)
  80df24:	1800251e 	bne	r3,zero,80dfbc <_strtod_r+0xdbc>
  80df28:	e0800117 	ldw	r2,4(fp)
  80df2c:	00c00434 	movhi	r3,16
  80df30:	18ffffc4 	addi	r3,r3,-1
  80df34:	10c4703a 	and	r2,r2,r3
  80df38:	1000241e 	bne	r2,zero,80dfcc <_strtod_r+0xdcc>
  80df3c:	0005883a 	mov	r2,zero
  80df40:	00cffc34 	movhi	r3,16368
  80df44:	180f883a 	mov	r7,r3
  80df48:	8009883a 	mov	r4,r16
  80df4c:	880b883a 	mov	r5,r17
  80df50:	100d883a 	mov	r6,r2
  80df54:	08115980 	call	811598 <__ltdf2>
  80df58:	10014616 	blt	r2,zero,80e474 <_strtod_r+0x1274>
  80df5c:	0005883a 	mov	r2,zero
  80df60:	00cff834 	movhi	r3,16352
  80df64:	880b883a 	mov	r5,r17
  80df68:	8009883a 	mov	r4,r16
  80df6c:	180f883a 	mov	r7,r3
  80df70:	100d883a 	mov	r6,r2
  80df74:	0810fb40 	call	810fb4 <__muldf3>
  80df78:	1823883a 	mov	r17,r3
  80df7c:	1021883a 	mov	r16,r2
  80df80:	18e0003c 	xorhi	r3,r3,32768
  80df84:	003fbc06 	br	80de78 <_strtod_r+0xc78>
  80df88:	2005883a 	mov	r2,r4
  80df8c:	18e0003c 	xorhi	r3,r3,32768
  80df90:	003fb906 	br	80de78 <_strtod_r+0xc78>
  80df94:	3827883a 	mov	r19,r7
  80df98:	003f1606 	br	80dbf4 <_strtod_r+0x9f4>
  80df9c:	4091c83a 	sub	r8,r8,r2
  80dfa0:	003efe06 	br	80db9c <_strtod_r+0x99c>
  80dfa4:	d9000f17 	ldw	r4,60(sp)
  80dfa8:	0011883a 	mov	r8,zero
  80dfac:	0029883a 	mov	r20,zero
  80dfb0:	0113c83a 	sub	r9,zero,r4
  80dfb4:	480f883a 	mov	r7,r9
  80dfb8:	003ef506 	br	80db90 <_strtod_r+0x990>
  80dfbc:	00800044 	movi	r2,1
  80dfc0:	1880021e 	bne	r3,r2,80dfcc <_strtod_r+0xdcc>
  80dfc4:	e0800117 	ldw	r2,4(fp)
  80dfc8:	1000c526 	beq	r2,zero,80e2e0 <_strtod_r+0x10e0>
  80dfcc:	00affc34 	movhi	r2,49136
  80dfd0:	0021883a 	mov	r16,zero
  80dfd4:	044ffc34 	movhi	r17,16368
  80dfd8:	d8800815 	stw	r2,32(sp)
  80dfdc:	d8000715 	stw	zero,28(sp)
  80dfe0:	003f4806 	br	80dd04 <_strtod_r+0xb04>
  80dfe4:	880b883a 	mov	r5,r17
  80dfe8:	8009883a 	mov	r4,r16
  80dfec:	08117a00 	call	8117a0 <__fixdfsi>
  80dff0:	1009883a 	mov	r4,r2
  80dff4:	08116a80 	call	8116a8 <__floatsidf>
  80dff8:	880b883a 	mov	r5,r17
  80dffc:	8009883a 	mov	r4,r16
  80e000:	100d883a 	mov	r6,r2
  80e004:	180f883a 	mov	r7,r3
  80e008:	08022c80 	call	8022c8 <__subdf3>
  80e00c:	100b883a 	mov	r5,r2
  80e010:	1021883a 	mov	r16,r2
  80e014:	d8801a17 	ldw	r2,104(sp)
  80e018:	180d883a 	mov	r6,r3
  80e01c:	1823883a 	mov	r17,r3
  80e020:	1000061e 	bne	r2,zero,80e03c <_strtod_r+0xe3c>
  80e024:	e0800017 	ldw	r2,0(fp)
  80e028:	1000041e 	bne	r2,zero,80e03c <_strtod_r+0xe3c>
  80e02c:	00c00434 	movhi	r3,16
  80e030:	18ffffc4 	addi	r3,r3,-1
  80e034:	90c4703a 	and	r2,r18,r3
  80e038:	10004026 	beq	r2,zero,80e13c <_strtod_r+0xf3c>
  80e03c:	00a52834 	movhi	r2,38048
  80e040:	108d6544 	addi	r2,r2,13717
  80e044:	00cff834 	movhi	r3,16352
  80e048:	18ffffc4 	addi	r3,r3,-1
  80e04c:	180f883a 	mov	r7,r3
  80e050:	8009883a 	mov	r4,r16
  80e054:	880b883a 	mov	r5,r17
  80e058:	100d883a 	mov	r6,r2
  80e05c:	08115980 	call	811598 <__ltdf2>
  80e060:	10000916 	blt	r2,zero,80e088 <_strtod_r+0xe88>
  80e064:	008d6c34 	movhi	r2,13744
  80e068:	10b94d44 	addi	r2,r2,-6859
  80e06c:	00cff834 	movhi	r3,16352
  80e070:	880b883a 	mov	r5,r17
  80e074:	180f883a 	mov	r7,r3
  80e078:	8009883a 	mov	r4,r16
  80e07c:	100d883a 	mov	r6,r2
  80e080:	08114880 	call	811488 <__gtdf2>
  80e084:	00bf580e 	bge	zero,r2,80dde8 <_strtod_r+0xbe8>
  80e088:	d9400517 	ldw	r5,20(sp)
  80e08c:	a809883a 	mov	r4,r21
  80e090:	080b7f80 	call	80b7f8 <_Bfree>
  80e094:	a809883a 	mov	r4,r21
  80e098:	b80b883a 	mov	r5,r23
  80e09c:	080b7f80 	call	80b7f8 <_Bfree>
  80e0a0:	a809883a 	mov	r4,r21
  80e0a4:	b00b883a 	mov	r5,r22
  80e0a8:	080b7f80 	call	80b7f8 <_Bfree>
  80e0ac:	d9401017 	ldw	r5,64(sp)
  80e0b0:	a809883a 	mov	r4,r21
  80e0b4:	080b7f80 	call	80b7f8 <_Bfree>
  80e0b8:	a809883a 	mov	r4,r21
  80e0bc:	a00b883a 	mov	r5,r20
  80e0c0:	080b7f80 	call	80b7f8 <_Bfree>
  80e0c4:	003cd806 	br	80d428 <_strtod_r+0x228>
  80e0c8:	0080d434 	movhi	r2,848
  80e0cc:	288d883a 	add	r6,r5,r2
  80e0d0:	e1800115 	stw	r6,4(fp)
  80e0d4:	003f3f06 	br	80ddd4 <_strtod_r+0xbd4>
  80e0d8:	8005883a 	mov	r2,r16
  80e0dc:	88e0003c 	xorhi	r3,r17,32768
  80e0e0:	003f2206 	br	80dd6c <_strtod_r+0xb6c>
  80e0e4:	1009883a 	mov	r4,r2
  80e0e8:	08026140 	call	802614 <__floatunsidf>
  80e0ec:	1021883a 	mov	r16,r2
  80e0f0:	1823883a 	mov	r17,r3
  80e0f4:	003f1a06 	br	80dd60 <_strtod_r+0xb60>
  80e0f8:	dc000417 	ldw	r16,16(sp)
  80e0fc:	31800044 	addi	r6,r6,1
  80e100:	003e5606 	br	80da5c <_strtod_r+0x85c>
  80e104:	d8c00b17 	ldw	r3,44(sp)
  80e108:	00bfffc4 	movi	r2,-1
  80e10c:	18bf801e 	bne	r3,r2,80df10 <_strtod_r+0xd10>
  80e110:	00c00884 	movi	r3,34
  80e114:	a8c00015 	stw	r3,0(r21)
  80e118:	009ffc34 	movhi	r2,32752
  80e11c:	e0800115 	stw	r2,4(fp)
  80e120:	e0000015 	stw	zero,0(fp)
  80e124:	003fd806 	br	80e088 <_strtod_r+0xe88>
  80e128:	8025883a 	mov	r18,r16
  80e12c:	0027883a 	mov	r19,zero
  80e130:	d8001215 	stw	zero,72(sp)
  80e134:	d8001115 	stw	zero,68(sp)
  80e138:	003cac06 	br	80d3ec <_strtod_r+0x1ec>
  80e13c:	00a52834 	movhi	r2,38048
  80e140:	108d6544 	addi	r2,r2,13717
  80e144:	00cff434 	movhi	r3,16336
  80e148:	18ffffc4 	addi	r3,r3,-1
  80e14c:	2809883a 	mov	r4,r5
  80e150:	180f883a 	mov	r7,r3
  80e154:	300b883a 	mov	r5,r6
  80e158:	100d883a 	mov	r6,r2
  80e15c:	08115980 	call	811598 <__ltdf2>
  80e160:	103f210e 	bge	r2,zero,80dde8 <_strtod_r+0xbe8>
  80e164:	003fc806 	br	80e088 <_strtod_r+0xe88>
  80e168:	00800044 	movi	r2,1
  80e16c:	d8001815 	stw	zero,96(sp)
  80e170:	d8801b15 	stw	r2,108(sp)
  80e174:	d8001715 	stw	zero,92(sp)
  80e178:	003ca206 	br	80d404 <_strtod_r+0x204>
  80e17c:	00800884 	movi	r2,34
  80e180:	a8800015 	stw	r2,0(r21)
  80e184:	019ffc34 	movhi	r6,32752
  80e188:	e1800115 	stw	r6,4(fp)
  80e18c:	e0000015 	stw	zero,0(fp)
  80e190:	003ca506 	br	80d428 <_strtod_r+0x228>
  80e194:	011387c4 	movi	r4,19999
  80e198:	003d0206 	br	80d5a4 <_strtod_r+0x3a4>
  80e19c:	180a90fa 	slli	r5,r3,3
  80e1a0:	e0800017 	ldw	r2,0(fp)
  80e1a4:	e0c00117 	ldw	r3,4(fp)
  80e1a8:	01002074 	movhi	r4,129
  80e1ac:	21151804 	addi	r4,r4,21600
  80e1b0:	290b883a 	add	r5,r5,r4
  80e1b4:	2a000017 	ldw	r8,0(r5)
  80e1b8:	2a400117 	ldw	r9,4(r5)
  80e1bc:	1009883a 	mov	r4,r2
  80e1c0:	180b883a 	mov	r5,r3
  80e1c4:	480f883a 	mov	r7,r9
  80e1c8:	400d883a 	mov	r6,r8
  80e1cc:	0810fb40 	call	810fb4 <__muldf3>
  80e1d0:	e0c00115 	stw	r3,4(fp)
  80e1d4:	e0800015 	stw	r2,0(fp)
  80e1d8:	003c9306 	br	80d428 <_strtod_r+0x228>
  80e1dc:	d8800d17 	ldw	r2,52(sp)
  80e1e0:	e0800015 	stw	r2,0(fp)
  80e1e4:	d8c00e17 	ldw	r3,56(sp)
  80e1e8:	e0c00115 	stw	r3,4(fp)
  80e1ec:	9080020c 	andi	r2,r18,8
  80e1f0:	103c8d26 	beq	r2,zero,80d428 <_strtod_r+0x228>
  80e1f4:	e0800117 	ldw	r2,4(fp)
  80e1f8:	10a00034 	orhi	r2,r2,32768
  80e1fc:	e0800115 	stw	r2,4(fp)
  80e200:	003c8906 	br	80d428 <_strtod_r+0x228>
  80e204:	009ffc34 	movhi	r2,32752
  80e208:	e0800115 	stw	r2,4(fp)
  80e20c:	e0000015 	stw	zero,0(fp)
  80e210:	003ff606 	br	80e1ec <_strtod_r+0xfec>
  80e214:	00a00034 	movhi	r2,32768
  80e218:	10bfffc4 	addi	r2,r2,-1
  80e21c:	00ffffc4 	movi	r3,-1
  80e220:	e0800115 	stw	r2,4(fp)
  80e224:	e0c00015 	stw	r3,0(fp)
  80e228:	003ff006 	br	80e1ec <_strtod_r+0xfec>
  80e22c:	e0000115 	stw	zero,4(fp)
  80e230:	e0000015 	stw	zero,0(fp)
  80e234:	003fed06 	br	80e1ec <_strtod_r+0xfec>
  80e238:	d8800e17 	ldw	r2,56(sp)
  80e23c:	29010cc4 	addi	r4,r5,1075
  80e240:	00fffc34 	movhi	r3,65520
  80e244:	18ffffc4 	addi	r3,r3,-1
  80e248:	2008953a 	slli	r4,r4,20
  80e24c:	10c4703a 	and	r2,r2,r3
  80e250:	d8c00d17 	ldw	r3,52(sp)
  80e254:	1104b03a 	or	r2,r2,r4
  80e258:	e0800115 	stw	r2,4(fp)
  80e25c:	e0c00015 	stw	r3,0(fp)
  80e260:	003fe206 	br	80e1ec <_strtod_r+0xfec>
  80e264:	d8c01a17 	ldw	r3,104(sp)
  80e268:	1825003a 	cmpeq	r18,r3,zero
  80e26c:	9000cf1e 	bne	r18,zero,80e5ac <_strtod_r+0x13ac>
  80e270:	e1400117 	ldw	r5,4(fp)
  80e274:	01000434 	movhi	r4,16
  80e278:	213fffc4 	addi	r4,r4,-1
  80e27c:	2904703a 	and	r2,r5,r4
  80e280:	11006826 	beq	r2,r4,80e424 <_strtod_r+0x1224>
  80e284:	e1c00017 	ldw	r7,0(fp)
  80e288:	3880004c 	andi	r2,r7,1
  80e28c:	1005003a 	cmpeq	r2,r2,zero
  80e290:	1000601e 	bne	r2,zero,80e414 <_strtod_r+0x1214>
  80e294:	90010426 	beq	r18,zero,80e6a8 <_strtod_r+0x14a8>
  80e298:	e4400117 	ldw	r17,4(fp)
  80e29c:	3809883a 	mov	r4,r7
  80e2a0:	3821883a 	mov	r16,r7
  80e2a4:	880b883a 	mov	r5,r17
  80e2a8:	080b9b40 	call	80b9b4 <__ulp>
  80e2ac:	180f883a 	mov	r7,r3
  80e2b0:	880b883a 	mov	r5,r17
  80e2b4:	8009883a 	mov	r4,r16
  80e2b8:	100d883a 	mov	r6,r2
  80e2bc:	08022c80 	call	8022c8 <__subdf3>
  80e2c0:	1009883a 	mov	r4,r2
  80e2c4:	000d883a 	mov	r6,zero
  80e2c8:	000f883a 	mov	r7,zero
  80e2cc:	180b883a 	mov	r5,r3
  80e2d0:	e0800015 	stw	r2,0(fp)
  80e2d4:	e0c00115 	stw	r3,4(fp)
  80e2d8:	08114000 	call	811400 <__nedf2>
  80e2dc:	10004d1e 	bne	r2,zero,80e414 <_strtod_r+0x1214>
  80e2e0:	00800884 	movi	r2,34
  80e2e4:	a8800015 	stw	r2,0(r21)
  80e2e8:	e0000015 	stw	zero,0(fp)
  80e2ec:	e0000115 	stw	zero,4(fp)
  80e2f0:	003f6506 	br	80e088 <_strtod_r+0xe88>
  80e2f4:	00800044 	movi	r2,1
  80e2f8:	d8801915 	stw	r2,100(sp)
  80e2fc:	003d4406 	br	80d810 <_strtod_r+0x610>
  80e300:	d8c01817 	ldw	r3,96(sp)
  80e304:	1985883a 	add	r2,r3,r6
  80e308:	11ffffc4 	addi	r7,r2,-1
  80e30c:	39000044 	addi	r4,r7,1
  80e310:	00800204 	movi	r2,8
  80e314:	d9001815 	stw	r4,96(sp)
  80e318:	11c0d716 	blt	r2,r7,80e678 <_strtod_r+0x1478>
  80e31c:	d9001217 	ldw	r4,72(sp)
  80e320:	01400284 	movi	r5,10
  80e324:	08027a80 	call	8027a8 <__mulsi3>
  80e328:	1585883a 	add	r2,r2,r22
  80e32c:	d8801215 	stw	r2,72(sp)
  80e330:	000d883a 	mov	r6,zero
  80e334:	84000044 	addi	r16,r16,1
  80e338:	dc000415 	stw	r16,16(sp)
  80e33c:	84400007 	ldb	r17,0(r16)
  80e340:	003cfc06 	br	80d734 <_strtod_r+0x534>
  80e344:	d8c01a17 	ldw	r3,104(sp)
  80e348:	1800321e 	bne	r3,zero,80e414 <_strtod_r+0x1214>
  80e34c:	e0800017 	ldw	r2,0(fp)
  80e350:	1000b31e 	bne	r2,zero,80e620 <_strtod_r+0x1420>
  80e354:	e0c00117 	ldw	r3,4(fp)
  80e358:	01000434 	movhi	r4,16
  80e35c:	213fffc4 	addi	r4,r4,-1
  80e360:	1904703a 	and	r2,r3,r4
  80e364:	1000e71e 	bne	r2,zero,80e704 <_strtod_r+0x1504>
  80e368:	18dffc2c 	andhi	r3,r3,32752
  80e36c:	0081ac34 	movhi	r2,1712
  80e370:	10c0282e 	bgeu	r2,r3,80e414 <_strtod_r+0x1214>
  80e374:	a0800517 	ldw	r2,20(r20)
  80e378:	1000031e 	bne	r2,zero,80e388 <_strtod_r+0x1188>
  80e37c:	a0c00417 	ldw	r3,16(r20)
  80e380:	00800044 	movi	r2,1
  80e384:	10c0a60e 	bge	r2,r3,80e620 <_strtod_r+0x1420>
  80e388:	a00b883a 	mov	r5,r20
  80e38c:	a809883a 	mov	r4,r21
  80e390:	01800044 	movi	r6,1
  80e394:	080c13c0 	call	80c13c <__lshift>
  80e398:	1009883a 	mov	r4,r2
  80e39c:	b00b883a 	mov	r5,r22
  80e3a0:	1029883a 	mov	r20,r2
  80e3a4:	080b9540 	call	80b954 <__mcmp>
  80e3a8:	00809d0e 	bge	zero,r2,80e620 <_strtod_r+0x1420>
  80e3ac:	e1800117 	ldw	r6,4(fp)
  80e3b0:	d9001c17 	ldw	r4,112(sp)
  80e3b4:	2013003a 	cmpeq	r9,r4,zero
  80e3b8:	4800d61e 	bne	r9,zero,80e714 <_strtod_r+0x1514>
  80e3bc:	30dffc2c 	andhi	r3,r6,32752
  80e3c0:	0081ac34 	movhi	r2,1712
  80e3c4:	10c0d336 	bltu	r2,r3,80e714 <_strtod_r+0x1514>
  80e3c8:	0080dc34 	movhi	r2,880
  80e3cc:	10ffc42e 	bgeu	r2,r3,80e2e0 <_strtod_r+0x10e0>
  80e3d0:	e0800017 	ldw	r2,0(fp)
  80e3d4:	e0c00117 	ldw	r3,4(fp)
  80e3d8:	020e5434 	movhi	r8,14672
  80e3dc:	000d883a 	mov	r6,zero
  80e3e0:	400f883a 	mov	r7,r8
  80e3e4:	180b883a 	mov	r5,r3
  80e3e8:	1009883a 	mov	r4,r2
  80e3ec:	da000c15 	stw	r8,48(sp)
  80e3f0:	d8000b15 	stw	zero,44(sp)
  80e3f4:	0810fb40 	call	810fb4 <__muldf3>
  80e3f8:	e0800015 	stw	r2,0(fp)
  80e3fc:	e0c00115 	stw	r3,4(fp)
  80e400:	183f211e 	bne	r3,zero,80e088 <_strtod_r+0xe88>
  80e404:	103f201e 	bne	r2,zero,80e088 <_strtod_r+0xe88>
  80e408:	00800884 	movi	r2,34
  80e40c:	a8800015 	stw	r2,0(r21)
  80e410:	003f1d06 	br	80e088 <_strtod_r+0xe88>
  80e414:	d9001c17 	ldw	r4,112(sp)
  80e418:	2013003a 	cmpeq	r9,r4,zero
  80e41c:	483f1a1e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e420:	003feb06 	br	80e3d0 <_strtod_r+0x11d0>
  80e424:	d8801c17 	ldw	r2,112(sp)
  80e428:	e1c00017 	ldw	r7,0(fp)
  80e42c:	1013003a 	cmpeq	r9,r2,zero
  80e430:	4800c31e 	bne	r9,zero,80e740 <_strtod_r+0x1540>
  80e434:	28dffc2c 	andhi	r3,r5,32752
  80e438:	0081a834 	movhi	r2,1696
  80e43c:	10c0c036 	bltu	r2,r3,80e740 <_strtod_r+0x1540>
  80e440:	1804d53a 	srli	r2,r3,20
  80e444:	00c01ac4 	movi	r3,107
  80e448:	013fffc4 	movi	r4,-1
  80e44c:	1887c83a 	sub	r3,r3,r2
  80e450:	20c4983a 	sll	r2,r4,r3
  80e454:	11ff8c1e 	bne	r2,r7,80e288 <_strtod_r+0x1088>
  80e458:	28dffc2c 	andhi	r3,r5,32752
  80e45c:	00800434 	movhi	r2,16
  80e460:	188d883a 	add	r6,r3,r2
  80e464:	e1800115 	stw	r6,4(fp)
  80e468:	e0000015 	stw	zero,0(fp)
  80e46c:	483f061e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e470:	003fd706 	br	80e3d0 <_strtod_r+0x11d0>
  80e474:	0021883a 	mov	r16,zero
  80e478:	0005883a 	mov	r2,zero
  80e47c:	044ff834 	movhi	r17,16352
  80e480:	00eff834 	movhi	r3,49120
  80e484:	003e7c06 	br	80de78 <_strtod_r+0xc78>
  80e488:	803d9226 	beq	r16,zero,80dad4 <_strtod_r+0x8d4>
  80e48c:	0421c83a 	sub	r16,zero,r16
  80e490:	814003cc 	andi	r5,r16,15
  80e494:	28000f26 	beq	r5,zero,80e4d4 <_strtod_r+0x12d4>
  80e498:	280a90fa 	slli	r5,r5,3
  80e49c:	01002074 	movhi	r4,129
  80e4a0:	21151804 	addi	r4,r4,21600
  80e4a4:	e0800017 	ldw	r2,0(fp)
  80e4a8:	290b883a 	add	r5,r5,r4
  80e4ac:	2a000017 	ldw	r8,0(r5)
  80e4b0:	e0c00117 	ldw	r3,4(fp)
  80e4b4:	2a400117 	ldw	r9,4(r5)
  80e4b8:	1009883a 	mov	r4,r2
  80e4bc:	180b883a 	mov	r5,r3
  80e4c0:	480f883a 	mov	r7,r9
  80e4c4:	400d883a 	mov	r6,r8
  80e4c8:	08023bc0 	call	8023bc <__divdf3>
  80e4cc:	e0c00115 	stw	r3,4(fp)
  80e4d0:	e0800015 	stw	r2,0(fp)
  80e4d4:	8021d13a 	srai	r16,r16,4
  80e4d8:	803d7e26 	beq	r16,zero,80dad4 <_strtod_r+0x8d4>
  80e4dc:	008007c4 	movi	r2,31
  80e4e0:	14002d16 	blt	r2,r16,80e598 <_strtod_r+0x1398>
  80e4e4:	8080040c 	andi	r2,r16,16
  80e4e8:	10009d26 	beq	r2,zero,80e760 <_strtod_r+0x1560>
  80e4ec:	01001a84 	movi	r4,106
  80e4f0:	d9001c15 	stw	r4,112(sp)
  80e4f4:	0400110e 	bge	zero,r16,80e53c <_strtod_r+0x133c>
  80e4f8:	04402074 	movhi	r17,129
  80e4fc:	8c556504 	addi	r17,r17,21908
  80e500:	8080004c 	andi	r2,r16,1
  80e504:	1005003a 	cmpeq	r2,r2,zero
  80e508:	1000091e 	bne	r2,zero,80e530 <_strtod_r+0x1330>
  80e50c:	e0800017 	ldw	r2,0(fp)
  80e510:	e0c00117 	ldw	r3,4(fp)
  80e514:	89800017 	ldw	r6,0(r17)
  80e518:	89c00117 	ldw	r7,4(r17)
  80e51c:	180b883a 	mov	r5,r3
  80e520:	1009883a 	mov	r4,r2
  80e524:	0810fb40 	call	810fb4 <__muldf3>
  80e528:	e0c00115 	stw	r3,4(fp)
  80e52c:	e0800015 	stw	r2,0(fp)
  80e530:	8021d07a 	srai	r16,r16,1
  80e534:	8c400204 	addi	r17,r17,8
  80e538:	043ff116 	blt	zero,r16,80e500 <_strtod_r+0x1300>
  80e53c:	d8801c17 	ldw	r2,112(sp)
  80e540:	10000d26 	beq	r2,zero,80e578 <_strtod_r+0x1378>
  80e544:	e1000117 	ldw	r4,4(fp)
  80e548:	00c01ac4 	movi	r3,107
  80e54c:	209ffc2c 	andhi	r2,r4,32752
  80e550:	1004d53a 	srli	r2,r2,20
  80e554:	1887c83a 	sub	r3,r3,r2
  80e558:	00c0070e 	bge	zero,r3,80e578 <_strtod_r+0x1378>
  80e55c:	008007c4 	movi	r2,31
  80e560:	10c0940e 	bge	r2,r3,80e7b4 <_strtod_r+0x15b4>
  80e564:	00800d04 	movi	r2,52
  80e568:	e0000015 	stw	zero,0(fp)
  80e56c:	10c08b0e 	bge	r2,r3,80e79c <_strtod_r+0x159c>
  80e570:	0180dc34 	movhi	r6,880
  80e574:	e1800115 	stw	r6,4(fp)
  80e578:	e0800017 	ldw	r2,0(fp)
  80e57c:	e0c00117 	ldw	r3,4(fp)
  80e580:	000d883a 	mov	r6,zero
  80e584:	000f883a 	mov	r7,zero
  80e588:	180b883a 	mov	r5,r3
  80e58c:	1009883a 	mov	r4,r2
  80e590:	08114000 	call	811400 <__nedf2>
  80e594:	103d501e 	bne	r2,zero,80dad8 <_strtod_r+0x8d8>
  80e598:	00800884 	movi	r2,34
  80e59c:	a8800015 	stw	r2,0(r21)
  80e5a0:	e0000015 	stw	zero,0(fp)
  80e5a4:	e0000115 	stw	zero,4(fp)
  80e5a8:	003b9f06 	br	80d428 <_strtod_r+0x228>
  80e5ac:	e1800117 	ldw	r6,4(fp)
  80e5b0:	00c00434 	movhi	r3,16
  80e5b4:	18ffffc4 	addi	r3,r3,-1
  80e5b8:	30c4703a 	and	r2,r6,r3
  80e5bc:	103f311e 	bne	r2,zero,80e284 <_strtod_r+0x1084>
  80e5c0:	e1c00017 	ldw	r7,0(fp)
  80e5c4:	383f301e 	bne	r7,zero,80e288 <_strtod_r+0x1088>
  80e5c8:	003f7906 	br	80e3b0 <_strtod_r+0x11b0>
  80e5cc:	d8c00f17 	ldw	r3,60(sp)
  80e5d0:	00bffa84 	movi	r2,-22
  80e5d4:	18bcbf16 	blt	r3,r2,80d8d4 <_strtod_r+0x6d4>
  80e5d8:	1809883a 	mov	r4,r3
  80e5dc:	017ffe04 	movi	r5,-8
  80e5e0:	08027a80 	call	8027a8 <__mulsi3>
  80e5e4:	00c02074 	movhi	r3,129
  80e5e8:	18d51804 	addi	r3,r3,21600
  80e5ec:	10c5883a 	add	r2,r2,r3
  80e5f0:	e2000017 	ldw	r8,0(fp)
  80e5f4:	e2400117 	ldw	r9,4(fp)
  80e5f8:	12800017 	ldw	r10,0(r2)
  80e5fc:	12c00117 	ldw	r11,4(r2)
  80e600:	480b883a 	mov	r5,r9
  80e604:	4009883a 	mov	r4,r8
  80e608:	580f883a 	mov	r7,r11
  80e60c:	500d883a 	mov	r6,r10
  80e610:	08023bc0 	call	8023bc <__divdf3>
  80e614:	e0c00115 	stw	r3,4(fp)
  80e618:	e0800015 	stw	r2,0(fp)
  80e61c:	003b8206 	br	80d428 <_strtod_r+0x228>
  80e620:	d8801c17 	ldw	r2,112(sp)
  80e624:	1013003a 	cmpeq	r9,r2,zero
  80e628:	483e971e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e62c:	003f6806 	br	80e3d0 <_strtod_r+0x11d0>
  80e630:	00801a44 	movi	r2,105
  80e634:	88bc5026 	beq	r17,r2,80d778 <_strtod_r+0x578>
  80e638:	00801b84 	movi	r2,110
  80e63c:	88bb9b1e 	bne	r17,r2,80d4ac <_strtod_r+0x2ac>
  80e640:	dc000404 	addi	r16,sp,16
  80e644:	8009883a 	mov	r4,r16
  80e648:	01402074 	movhi	r5,129
  80e64c:	29556404 	addi	r5,r5,21904
  80e650:	080d1b80 	call	80d1b8 <match>
  80e654:	103b9526 	beq	r2,zero,80d4ac <_strtod_r+0x2ac>
  80e658:	d8800417 	ldw	r2,16(sp)
  80e65c:	00c00a04 	movi	r3,40
  80e660:	11000007 	ldb	r4,0(r2)
  80e664:	20c04026 	beq	r4,r3,80e768 <_strtod_r+0x1568>
  80e668:	01bffe34 	movhi	r6,65528
  80e66c:	e1800115 	stw	r6,4(fp)
  80e670:	e0000015 	stw	zero,0(fp)
  80e674:	003b6c06 	br	80d428 <_strtod_r+0x228>
  80e678:	d8c01817 	ldw	r3,96(sp)
  80e67c:	00800404 	movi	r2,16
  80e680:	10c00516 	blt	r2,r3,80e698 <_strtod_r+0x1498>
  80e684:	d9001117 	ldw	r4,68(sp)
  80e688:	01400284 	movi	r5,10
  80e68c:	08027a80 	call	8027a8 <__mulsi3>
  80e690:	1585883a 	add	r2,r2,r22
  80e694:	d8801115 	stw	r2,68(sp)
  80e698:	000d883a 	mov	r6,zero
  80e69c:	003f2506 	br	80e334 <_strtod_r+0x1134>
  80e6a0:	000d883a 	mov	r6,zero
  80e6a4:	003ce306 	br	80da34 <_strtod_r+0x834>
  80e6a8:	e4400117 	ldw	r17,4(fp)
  80e6ac:	3809883a 	mov	r4,r7
  80e6b0:	3821883a 	mov	r16,r7
  80e6b4:	880b883a 	mov	r5,r17
  80e6b8:	080b9b40 	call	80b9b4 <__ulp>
  80e6bc:	180f883a 	mov	r7,r3
  80e6c0:	880b883a 	mov	r5,r17
  80e6c4:	8009883a 	mov	r4,r16
  80e6c8:	100d883a 	mov	r6,r2
  80e6cc:	08023480 	call	802348 <__adddf3>
  80e6d0:	180b883a 	mov	r5,r3
  80e6d4:	d8c01c17 	ldw	r3,112(sp)
  80e6d8:	1009883a 	mov	r4,r2
  80e6dc:	e1400115 	stw	r5,4(fp)
  80e6e0:	1813003a 	cmpeq	r9,r3,zero
  80e6e4:	e1000015 	stw	r4,0(fp)
  80e6e8:	483e671e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e6ec:	003f3806 	br	80e3d0 <_strtod_r+0x11d0>
  80e6f0:	0080d434 	movhi	r2,848
  80e6f4:	188d883a 	add	r6,r3,r2
  80e6f8:	d8001c15 	stw	zero,112(sp)
  80e6fc:	e1800115 	stw	r6,4(fp)
  80e700:	003cf506 	br	80dad8 <_strtod_r+0x8d8>
  80e704:	d8c01c17 	ldw	r3,112(sp)
  80e708:	1813003a 	cmpeq	r9,r3,zero
  80e70c:	483e5e1e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e710:	003f2f06 	br	80e3d0 <_strtod_r+0x11d0>
  80e714:	309ffc2c 	andhi	r2,r6,32752
  80e718:	00fffc34 	movhi	r3,65520
  80e71c:	10c5883a 	add	r2,r2,r3
  80e720:	00c00434 	movhi	r3,16
  80e724:	18ffffc4 	addi	r3,r3,-1
  80e728:	10ccb03a 	or	r6,r2,r3
  80e72c:	01ffffc4 	movi	r7,-1
  80e730:	e1800115 	stw	r6,4(fp)
  80e734:	e1c00015 	stw	r7,0(fp)
  80e738:	483e531e 	bne	r9,zero,80e088 <_strtod_r+0xe88>
  80e73c:	003f2406 	br	80e3d0 <_strtod_r+0x11d0>
  80e740:	00bfffc4 	movi	r2,-1
  80e744:	003f4306 	br	80e454 <_strtod_r+0x1254>
  80e748:	0025883a 	mov	r18,zero
  80e74c:	05802074 	movhi	r22,129
  80e750:	b5954a04 	addi	r22,r22,21800
  80e754:	003c9206 	br	80d9a0 <_strtod_r+0x7a0>
  80e758:	d9c01817 	ldw	r7,96(sp)
  80e75c:	003eeb06 	br	80e30c <_strtod_r+0x110c>
  80e760:	d8001c15 	stw	zero,112(sp)
  80e764:	003f6306 	br	80e4f4 <_strtod_r+0x12f4>
  80e768:	8009883a 	mov	r4,r16
  80e76c:	01402074 	movhi	r5,129
  80e770:	29579204 	addi	r5,r5,24136
  80e774:	d9800d04 	addi	r6,sp,52
  80e778:	080fd700 	call	80fd70 <__hexnan>
  80e77c:	00c00144 	movi	r3,5
  80e780:	10ffb91e 	bne	r2,r3,80e668 <_strtod_r+0x1468>
  80e784:	d8800e17 	ldw	r2,56(sp)
  80e788:	d9c00d17 	ldw	r7,52(sp)
  80e78c:	119ffc34 	orhi	r6,r2,32752
  80e790:	e1800115 	stw	r6,4(fp)
  80e794:	e1c00015 	stw	r7,0(fp)
  80e798:	003b2306 	br	80d428 <_strtod_r+0x228>
  80e79c:	18fff804 	addi	r3,r3,-32
  80e7a0:	00bfffc4 	movi	r2,-1
  80e7a4:	10c4983a 	sll	r2,r2,r3
  80e7a8:	208c703a 	and	r6,r4,r2
  80e7ac:	e1800115 	stw	r6,4(fp)
  80e7b0:	003f7106 	br	80e578 <_strtod_r+0x1378>
  80e7b4:	00bfffc4 	movi	r2,-1
  80e7b8:	10c4983a 	sll	r2,r2,r3
  80e7bc:	e0c00017 	ldw	r3,0(fp)
  80e7c0:	188e703a 	and	r7,r3,r2
  80e7c4:	e1c00015 	stw	r7,0(fp)
  80e7c8:	003f6b06 	br	80e578 <_strtod_r+0x1378>

0080e7cc <strtof>:
  80e7cc:	defffa04 	addi	sp,sp,-24
  80e7d0:	dd000415 	stw	r20,16(sp)
  80e7d4:	05002074 	movhi	r20,129
  80e7d8:	a51c2904 	addi	r20,r20,28836
  80e7dc:	2007883a 	mov	r3,r4
  80e7e0:	a1000017 	ldw	r4,0(r20)
  80e7e4:	280d883a 	mov	r6,r5
  80e7e8:	180b883a 	mov	r5,r3
  80e7ec:	dfc00515 	stw	ra,20(sp)
  80e7f0:	dcc00315 	stw	r19,12(sp)
  80e7f4:	dc800215 	stw	r18,8(sp)
  80e7f8:	dc400115 	stw	r17,4(sp)
  80e7fc:	dc000015 	stw	r16,0(sp)
  80e800:	080d2000 	call	80d200 <_strtod_r>
  80e804:	180b883a 	mov	r5,r3
  80e808:	1009883a 	mov	r4,r2
  80e80c:	1823883a 	mov	r17,r3
  80e810:	1021883a 	mov	r16,r2
  80e814:	08118780 	call	811878 <__truncdfsf2>
  80e818:	1009883a 	mov	r4,r2
  80e81c:	000b883a 	mov	r5,zero
  80e820:	1025883a 	mov	r18,r2
  80e824:	1027883a 	mov	r19,r2
  80e828:	0810e4c0 	call	810e4c <__nesf2>
  80e82c:	000d883a 	mov	r6,zero
  80e830:	000f883a 	mov	r7,zero
  80e834:	8009883a 	mov	r4,r16
  80e838:	880b883a 	mov	r5,r17
  80e83c:	10000e1e 	bne	r2,zero,80e878 <strtof+0xac>
  80e840:	08114000 	call	811400 <__nedf2>
  80e844:	10000c26 	beq	r2,zero,80e878 <strtof+0xac>
  80e848:	a0c00017 	ldw	r3,0(r20)
  80e84c:	00800884 	movi	r2,34
  80e850:	18800015 	stw	r2,0(r3)
  80e854:	9805883a 	mov	r2,r19
  80e858:	dfc00517 	ldw	ra,20(sp)
  80e85c:	dd000417 	ldw	r20,16(sp)
  80e860:	dcc00317 	ldw	r19,12(sp)
  80e864:	dc800217 	ldw	r18,8(sp)
  80e868:	dc400117 	ldw	r17,4(sp)
  80e86c:	dc000017 	ldw	r16,0(sp)
  80e870:	dec00604 	addi	sp,sp,24
  80e874:	f800283a 	ret
  80e878:	9009883a 	mov	r4,r18
  80e87c:	015fe034 	movhi	r5,32640
  80e880:	297fffc4 	addi	r5,r5,-1
  80e884:	0810ec40 	call	810ec4 <__gtsf2>
  80e888:	00ffffc4 	movi	r3,-1
  80e88c:	011ffc34 	movhi	r4,32752
  80e890:	213fffc4 	addi	r4,r4,-1
  80e894:	200f883a 	mov	r7,r4
  80e898:	180d883a 	mov	r6,r3
  80e89c:	8009883a 	mov	r4,r16
  80e8a0:	880b883a 	mov	r5,r17
  80e8a4:	00800f16 	blt	zero,r2,80e8e4 <strtof+0x118>
  80e8a8:	9009883a 	mov	r4,r18
  80e8ac:	017fe034 	movhi	r5,65408
  80e8b0:	297fffc4 	addi	r5,r5,-1
  80e8b4:	0810f3c0 	call	810f3c <__ltsf2>
  80e8b8:	023fffc4 	movi	r8,-1
  80e8bc:	027ffc34 	movhi	r9,65520
  80e8c0:	4a7fffc4 	addi	r9,r9,-1
  80e8c4:	880b883a 	mov	r5,r17
  80e8c8:	480f883a 	mov	r7,r9
  80e8cc:	8009883a 	mov	r4,r16
  80e8d0:	400d883a 	mov	r6,r8
  80e8d4:	103fdf0e 	bge	r2,zero,80e854 <strtof+0x88>
  80e8d8:	08115980 	call	811598 <__ltdf2>
  80e8dc:	103fda0e 	bge	r2,zero,80e848 <strtof+0x7c>
  80e8e0:	003fdc06 	br	80e854 <strtof+0x88>
  80e8e4:	08114880 	call	811488 <__gtdf2>
  80e8e8:	00bfd70e 	bge	zero,r2,80e848 <strtof+0x7c>
  80e8ec:	003fee06 	br	80e8a8 <strtof+0xdc>

0080e8f0 <strtod>:
  80e8f0:	01802074 	movhi	r6,129
  80e8f4:	319c2904 	addi	r6,r6,28836
  80e8f8:	2007883a 	mov	r3,r4
  80e8fc:	31000017 	ldw	r4,0(r6)
  80e900:	280d883a 	mov	r6,r5
  80e904:	180b883a 	mov	r5,r3
  80e908:	080d2001 	jmpi	80d200 <_strtod_r>

0080e90c <_strtol_r>:
  80e90c:	defff304 	addi	sp,sp,-52
  80e910:	00802074 	movhi	r2,129
  80e914:	109c2804 	addi	r2,r2,28832
  80e918:	dd000715 	stw	r20,28(sp)
  80e91c:	15000017 	ldw	r20,0(r2)
  80e920:	ddc00a15 	stw	r23,40(sp)
  80e924:	dc800515 	stw	r18,20(sp)
  80e928:	dc400415 	stw	r17,16(sp)
  80e92c:	dfc00c15 	stw	ra,48(sp)
  80e930:	df000b15 	stw	fp,44(sp)
  80e934:	dd800915 	stw	r22,36(sp)
  80e938:	dd400815 	stw	r21,32(sp)
  80e93c:	dcc00615 	stw	r19,24(sp)
  80e940:	dc000315 	stw	r16,12(sp)
  80e944:	282f883a 	mov	r23,r5
  80e948:	d9000115 	stw	r4,4(sp)
  80e94c:	d9800215 	stw	r6,8(sp)
  80e950:	3825883a 	mov	r18,r7
  80e954:	2823883a 	mov	r17,r5
  80e958:	8c000007 	ldb	r16,0(r17)
  80e95c:	8c400044 	addi	r17,r17,1
  80e960:	a407883a 	add	r3,r20,r16
  80e964:	18800003 	ldbu	r2,0(r3)
  80e968:	1080020c 	andi	r2,r2,8
  80e96c:	103ffa1e 	bne	r2,zero,80e958 <_strtol_r+0x4c>
  80e970:	00800b44 	movi	r2,45
  80e974:	80805c26 	beq	r16,r2,80eae8 <_strtol_r+0x1dc>
  80e978:	00800ac4 	movi	r2,43
  80e97c:	80805726 	beq	r16,r2,80eadc <_strtol_r+0x1d0>
  80e980:	d8000015 	stw	zero,0(sp)
  80e984:	9007003a 	cmpeq	r3,r18,zero
  80e988:	1800431e 	bne	r3,zero,80ea98 <_strtol_r+0x18c>
  80e98c:	00800404 	movi	r2,16
  80e990:	90804126 	beq	r18,r2,80ea98 <_strtol_r+0x18c>
  80e994:	902b883a 	mov	r21,r18
  80e998:	d8c00017 	ldw	r3,0(sp)
  80e99c:	1838c03a 	cmpne	fp,r3,zero
  80e9a0:	e0004a1e 	bne	fp,zero,80eacc <_strtol_r+0x1c0>
  80e9a4:	04e00034 	movhi	r19,32768
  80e9a8:	9cffffc4 	addi	r19,r19,-1
  80e9ac:	9809883a 	mov	r4,r19
  80e9b0:	a80b883a 	mov	r5,r21
  80e9b4:	0811a300 	call	811a30 <__umodsi3>
  80e9b8:	9809883a 	mov	r4,r19
  80e9bc:	a80b883a 	mov	r5,r21
  80e9c0:	102d883a 	mov	r22,r2
  80e9c4:	0811a280 	call	811a28 <__udivsi3>
  80e9c8:	1027883a 	mov	r19,r2
  80e9cc:	a405883a 	add	r2,r20,r16
  80e9d0:	11400003 	ldbu	r5,0(r2)
  80e9d4:	0009883a 	mov	r4,zero
  80e9d8:	000d883a 	mov	r6,zero
  80e9dc:	28c0010c 	andi	r3,r5,4
  80e9e0:	18000f26 	beq	r3,zero,80ea20 <_strtol_r+0x114>
  80e9e4:	843ff404 	addi	r16,r16,-48
  80e9e8:	8480150e 	bge	r16,r18,80ea40 <_strtol_r+0x134>
  80e9ec:	30003216 	blt	r6,zero,80eab8 <_strtol_r+0x1ac>
  80e9f0:	99003136 	bltu	r19,r4,80eab8 <_strtol_r+0x1ac>
  80e9f4:	24c02f26 	beq	r4,r19,80eab4 <_strtol_r+0x1a8>
  80e9f8:	a80b883a 	mov	r5,r21
  80e9fc:	08027a80 	call	8027a8 <__mulsi3>
  80ea00:	1409883a 	add	r4,r2,r16
  80ea04:	01800044 	movi	r6,1
  80ea08:	8c000007 	ldb	r16,0(r17)
  80ea0c:	8c400044 	addi	r17,r17,1
  80ea10:	a405883a 	add	r2,r20,r16
  80ea14:	11400003 	ldbu	r5,0(r2)
  80ea18:	28c0010c 	andi	r3,r5,4
  80ea1c:	183ff11e 	bne	r3,zero,80e9e4 <_strtol_r+0xd8>
  80ea20:	288000cc 	andi	r2,r5,3
  80ea24:	10000626 	beq	r2,zero,80ea40 <_strtol_r+0x134>
  80ea28:	2880004c 	andi	r2,r5,1
  80ea2c:	1005003a 	cmpeq	r2,r2,zero
  80ea30:	1000231e 	bne	r2,zero,80eac0 <_strtol_r+0x1b4>
  80ea34:	00800dc4 	movi	r2,55
  80ea38:	80a1c83a 	sub	r16,r16,r2
  80ea3c:	84bfeb16 	blt	r16,r18,80e9ec <_strtol_r+0xe0>
  80ea40:	30002e16 	blt	r6,zero,80eafc <_strtol_r+0x1f0>
  80ea44:	e000231e 	bne	fp,zero,80ead4 <_strtol_r+0x1c8>
  80ea48:	2007883a 	mov	r3,r4
  80ea4c:	d8800217 	ldw	r2,8(sp)
  80ea50:	10000426 	beq	r2,zero,80ea64 <_strtol_r+0x158>
  80ea54:	30000126 	beq	r6,zero,80ea5c <_strtol_r+0x150>
  80ea58:	8dffffc4 	addi	r23,r17,-1
  80ea5c:	d9000217 	ldw	r4,8(sp)
  80ea60:	25c00015 	stw	r23,0(r4)
  80ea64:	1805883a 	mov	r2,r3
  80ea68:	dfc00c17 	ldw	ra,48(sp)
  80ea6c:	df000b17 	ldw	fp,44(sp)
  80ea70:	ddc00a17 	ldw	r23,40(sp)
  80ea74:	dd800917 	ldw	r22,36(sp)
  80ea78:	dd400817 	ldw	r21,32(sp)
  80ea7c:	dd000717 	ldw	r20,28(sp)
  80ea80:	dcc00617 	ldw	r19,24(sp)
  80ea84:	dc800517 	ldw	r18,20(sp)
  80ea88:	dc400417 	ldw	r17,16(sp)
  80ea8c:	dc000317 	ldw	r16,12(sp)
  80ea90:	dec00d04 	addi	sp,sp,52
  80ea94:	f800283a 	ret
  80ea98:	00800c04 	movi	r2,48
  80ea9c:	80801f26 	beq	r16,r2,80eb1c <_strtol_r+0x210>
  80eaa0:	183fbc26 	beq	r3,zero,80e994 <_strtol_r+0x88>
  80eaa4:	00800c04 	movi	r2,48
  80eaa8:	80802926 	beq	r16,r2,80eb50 <_strtol_r+0x244>
  80eaac:	04800284 	movi	r18,10
  80eab0:	003fb806 	br	80e994 <_strtol_r+0x88>
  80eab4:	b43fd00e 	bge	r22,r16,80e9f8 <_strtol_r+0xec>
  80eab8:	01bfffc4 	movi	r6,-1
  80eabc:	003fd206 	br	80ea08 <_strtol_r+0xfc>
  80eac0:	008015c4 	movi	r2,87
  80eac4:	80a1c83a 	sub	r16,r16,r2
  80eac8:	003fdc06 	br	80ea3c <_strtol_r+0x130>
  80eacc:	04e00034 	movhi	r19,32768
  80ead0:	003fb606 	br	80e9ac <_strtol_r+0xa0>
  80ead4:	0107c83a 	sub	r3,zero,r4
  80ead8:	003fdc06 	br	80ea4c <_strtol_r+0x140>
  80eadc:	8c000007 	ldb	r16,0(r17)
  80eae0:	8c400044 	addi	r17,r17,1
  80eae4:	003fa606 	br	80e980 <_strtol_r+0x74>
  80eae8:	8c000007 	ldb	r16,0(r17)
  80eaec:	00800044 	movi	r2,1
  80eaf0:	8c400044 	addi	r17,r17,1
  80eaf4:	d8800015 	stw	r2,0(sp)
  80eaf8:	003fa206 	br	80e984 <_strtol_r+0x78>
  80eafc:	d9000017 	ldw	r4,0(sp)
  80eb00:	2005003a 	cmpeq	r2,r4,zero
  80eb04:	10000f1e 	bne	r2,zero,80eb44 <_strtol_r+0x238>
  80eb08:	00e00034 	movhi	r3,32768
  80eb0c:	d9000117 	ldw	r4,4(sp)
  80eb10:	00800884 	movi	r2,34
  80eb14:	20800015 	stw	r2,0(r4)
  80eb18:	003fcc06 	br	80ea4c <_strtol_r+0x140>
  80eb1c:	89000007 	ldb	r4,0(r17)
  80eb20:	00801e04 	movi	r2,120
  80eb24:	20800226 	beq	r4,r2,80eb30 <_strtol_r+0x224>
  80eb28:	00801604 	movi	r2,88
  80eb2c:	20bfdc1e 	bne	r4,r2,80eaa0 <_strtol_r+0x194>
  80eb30:	8c000047 	ldb	r16,1(r17)
  80eb34:	04800404 	movi	r18,16
  80eb38:	8c400084 	addi	r17,r17,2
  80eb3c:	902b883a 	mov	r21,r18
  80eb40:	003f9506 	br	80e998 <_strtol_r+0x8c>
  80eb44:	00e00034 	movhi	r3,32768
  80eb48:	18ffffc4 	addi	r3,r3,-1
  80eb4c:	003fef06 	br	80eb0c <_strtol_r+0x200>
  80eb50:	04800204 	movi	r18,8
  80eb54:	902b883a 	mov	r21,r18
  80eb58:	003f8f06 	br	80e998 <_strtol_r+0x8c>

0080eb5c <strtol>:
  80eb5c:	00802074 	movhi	r2,129
  80eb60:	109c2904 	addi	r2,r2,28836
  80eb64:	2013883a 	mov	r9,r4
  80eb68:	11000017 	ldw	r4,0(r2)
  80eb6c:	2805883a 	mov	r2,r5
  80eb70:	300f883a 	mov	r7,r6
  80eb74:	480b883a 	mov	r5,r9
  80eb78:	100d883a 	mov	r6,r2
  80eb7c:	080e90c1 	jmpi	80e90c <_strtol_r>

0080eb80 <_strtoll_r>:
  80eb80:	defff004 	addi	sp,sp,-64
  80eb84:	00802074 	movhi	r2,129
  80eb88:	109c2804 	addi	r2,r2,28832
  80eb8c:	df000e15 	stw	fp,56(sp)
  80eb90:	17000017 	ldw	fp,0(r2)
  80eb94:	ddc00d15 	stw	r23,52(sp)
  80eb98:	dd000a15 	stw	r20,40(sp)
  80eb9c:	dfc00f15 	stw	ra,60(sp)
  80eba0:	dd800c15 	stw	r22,48(sp)
  80eba4:	dd400b15 	stw	r21,44(sp)
  80eba8:	dcc00915 	stw	r19,36(sp)
  80ebac:	dc800815 	stw	r18,32(sp)
  80ebb0:	dc400715 	stw	r17,28(sp)
  80ebb4:	dc000615 	stw	r16,24(sp)
  80ebb8:	d9400315 	stw	r5,12(sp)
  80ebbc:	d9000215 	stw	r4,8(sp)
  80ebc0:	d9800415 	stw	r6,16(sp)
  80ebc4:	382f883a 	mov	r23,r7
  80ebc8:	2829883a 	mov	r20,r5
  80ebcc:	a4c00007 	ldb	r19,0(r20)
  80ebd0:	a5000044 	addi	r20,r20,1
  80ebd4:	e4c7883a 	add	r3,fp,r19
  80ebd8:	18800003 	ldbu	r2,0(r3)
  80ebdc:	1080020c 	andi	r2,r2,8
  80ebe0:	103ffa1e 	bne	r2,zero,80ebcc <_strtoll_r+0x4c>
  80ebe4:	00800b44 	movi	r2,45
  80ebe8:	98808826 	beq	r19,r2,80ee0c <_strtoll_r+0x28c>
  80ebec:	00800ac4 	movi	r2,43
  80ebf0:	98808326 	beq	r19,r2,80ee00 <_strtoll_r+0x280>
  80ebf4:	d8000115 	stw	zero,4(sp)
  80ebf8:	b807003a 	cmpeq	r3,r23,zero
  80ebfc:	18005f1e 	bne	r3,zero,80ed7c <_strtoll_r+0x1fc>
  80ec00:	00800404 	movi	r2,16
  80ec04:	b8805d26 	beq	r23,r2,80ed7c <_strtoll_r+0x1fc>
  80ec08:	b82dd7fa 	srai	r22,r23,31
  80ec0c:	b82b883a 	mov	r21,r23
  80ec10:	d8c00117 	ldw	r3,4(sp)
  80ec14:	1806c03a 	cmpne	r3,r3,zero
  80ec18:	d8c00515 	stw	r3,20(sp)
  80ec1c:	1800631e 	bne	r3,zero,80edac <_strtoll_r+0x22c>
  80ec20:	043fffc4 	movi	r16,-1
  80ec24:	04600034 	movhi	r17,32768
  80ec28:	8c7fffc4 	addi	r17,r17,-1
  80ec2c:	880b883a 	mov	r5,r17
  80ec30:	8009883a 	mov	r4,r16
  80ec34:	a80d883a 	mov	r6,r21
  80ec38:	b00f883a 	mov	r7,r22
  80ec3c:	08107ec0 	call	8107ec <__umoddi3>
  80ec40:	880b883a 	mov	r5,r17
  80ec44:	8009883a 	mov	r4,r16
  80ec48:	b00f883a 	mov	r7,r22
  80ec4c:	a80d883a 	mov	r6,r21
  80ec50:	d8800015 	stw	r2,0(sp)
  80ec54:	08101800 	call	810180 <__udivdi3>
  80ec58:	1023883a 	mov	r17,r2
  80ec5c:	e4c5883a 	add	r2,fp,r19
  80ec60:	11000003 	ldbu	r4,0(r2)
  80ec64:	1825883a 	mov	r18,r3
  80ec68:	0015883a 	mov	r10,zero
  80ec6c:	20c0010c 	andi	r3,r4,4
  80ec70:	0017883a 	mov	r11,zero
  80ec74:	000f883a 	mov	r7,zero
  80ec78:	18001a26 	beq	r3,zero,80ece4 <_strtoll_r+0x164>
  80ec7c:	9c3ff404 	addi	r16,r19,-48
  80ec80:	85c0200e 	bge	r16,r23,80ed04 <_strtoll_r+0x184>
  80ec84:	38003b16 	blt	r7,zero,80ed74 <_strtoll_r+0x1f4>
  80ec88:	92c03a36 	bltu	r18,r11,80ed74 <_strtoll_r+0x1f4>
  80ec8c:	5c803826 	beq	r11,r18,80ed70 <_strtoll_r+0x1f0>
  80ec90:	54404c26 	beq	r10,r17,80edc4 <_strtoll_r+0x244>
  80ec94:	580b883a 	mov	r5,r11
  80ec98:	5009883a 	mov	r4,r10
  80ec9c:	a80d883a 	mov	r6,r21
  80eca0:	b00f883a 	mov	r7,r22
  80eca4:	080ffb80 	call	80ffb8 <__muldi3>
  80eca8:	8013d7fa 	srai	r9,r16,31
  80ecac:	100d883a 	mov	r6,r2
  80ecb0:	1405883a 	add	r2,r2,r16
  80ecb4:	118d803a 	cmpltu	r6,r2,r6
  80ecb8:	1a47883a 	add	r3,r3,r9
  80ecbc:	30cd883a 	add	r6,r6,r3
  80ecc0:	1015883a 	mov	r10,r2
  80ecc4:	3017883a 	mov	r11,r6
  80ecc8:	01c00044 	movi	r7,1
  80eccc:	a4c00007 	ldb	r19,0(r20)
  80ecd0:	a5000044 	addi	r20,r20,1
  80ecd4:	e4c5883a 	add	r2,fp,r19
  80ecd8:	11000003 	ldbu	r4,0(r2)
  80ecdc:	20c0010c 	andi	r3,r4,4
  80ece0:	183fe61e 	bne	r3,zero,80ec7c <_strtoll_r+0xfc>
  80ece4:	208000cc 	andi	r2,r4,3
  80ece8:	10000626 	beq	r2,zero,80ed04 <_strtoll_r+0x184>
  80ecec:	2080004c 	andi	r2,r4,1
  80ecf0:	1005003a 	cmpeq	r2,r2,zero
  80ecf4:	1000301e 	bne	r2,zero,80edb8 <_strtoll_r+0x238>
  80ecf8:	02000dc4 	movi	r8,55
  80ecfc:	9a21c83a 	sub	r16,r19,r8
  80ed00:	85ffe016 	blt	r16,r23,80ec84 <_strtoll_r+0x104>
  80ed04:	38004616 	blt	r7,zero,80ee20 <_strtoll_r+0x2a0>
  80ed08:	d8800517 	ldw	r2,20(sp)
  80ed0c:	1000341e 	bne	r2,zero,80ede0 <_strtoll_r+0x260>
  80ed10:	500b883a 	mov	r5,r10
  80ed14:	580d883a 	mov	r6,r11
  80ed18:	d8c00417 	ldw	r3,16(sp)
  80ed1c:	18000626 	beq	r3,zero,80ed38 <_strtoll_r+0x1b8>
  80ed20:	38000226 	beq	r7,zero,80ed2c <_strtoll_r+0x1ac>
  80ed24:	a53fffc4 	addi	r20,r20,-1
  80ed28:	dd000315 	stw	r20,12(sp)
  80ed2c:	d8c00317 	ldw	r3,12(sp)
  80ed30:	d8800417 	ldw	r2,16(sp)
  80ed34:	10c00015 	stw	r3,0(r2)
  80ed38:	2805883a 	mov	r2,r5
  80ed3c:	3007883a 	mov	r3,r6
  80ed40:	dfc00f17 	ldw	ra,60(sp)
  80ed44:	df000e17 	ldw	fp,56(sp)
  80ed48:	ddc00d17 	ldw	r23,52(sp)
  80ed4c:	dd800c17 	ldw	r22,48(sp)
  80ed50:	dd400b17 	ldw	r21,44(sp)
  80ed54:	dd000a17 	ldw	r20,40(sp)
  80ed58:	dcc00917 	ldw	r19,36(sp)
  80ed5c:	dc800817 	ldw	r18,32(sp)
  80ed60:	dc400717 	ldw	r17,28(sp)
  80ed64:	dc000617 	ldw	r16,24(sp)
  80ed68:	dec01004 	addi	sp,sp,64
  80ed6c:	f800283a 	ret
  80ed70:	8abfc72e 	bgeu	r17,r10,80ec90 <_strtoll_r+0x110>
  80ed74:	01ffffc4 	movi	r7,-1
  80ed78:	003fd406 	br	80eccc <_strtoll_r+0x14c>
  80ed7c:	00800c04 	movi	r2,48
  80ed80:	98803226 	beq	r19,r2,80ee4c <_strtoll_r+0x2cc>
  80ed84:	183fa026 	beq	r3,zero,80ec08 <_strtoll_r+0x88>
  80ed88:	00800c04 	movi	r2,48
  80ed8c:	98803e26 	beq	r19,r2,80ee88 <_strtoll_r+0x308>
  80ed90:	d8c00117 	ldw	r3,4(sp)
  80ed94:	05c00284 	movi	r23,10
  80ed98:	b82b883a 	mov	r21,r23
  80ed9c:	1806c03a 	cmpne	r3,r3,zero
  80eda0:	002d883a 	mov	r22,zero
  80eda4:	d8c00515 	stw	r3,20(sp)
  80eda8:	183f9d26 	beq	r3,zero,80ec20 <_strtoll_r+0xa0>
  80edac:	0021883a 	mov	r16,zero
  80edb0:	04600034 	movhi	r17,32768
  80edb4:	003f9d06 	br	80ec2c <_strtoll_r+0xac>
  80edb8:	020015c4 	movi	r8,87
  80edbc:	9a21c83a 	sub	r16,r19,r8
  80edc0:	003fcf06 	br	80ed00 <_strtoll_r+0x180>
  80edc4:	5cbfb31e 	bne	r11,r18,80ec94 <_strtoll_r+0x114>
  80edc8:	d8800017 	ldw	r2,0(sp)
  80edcc:	143fb10e 	bge	r2,r16,80ec94 <_strtoll_r+0x114>
  80edd0:	8815883a 	mov	r10,r17
  80edd4:	9017883a 	mov	r11,r18
  80edd8:	01ffffc4 	movi	r7,-1
  80eddc:	003fbb06 	br	80eccc <_strtoll_r+0x14c>
  80ede0:	0009883a 	mov	r4,zero
  80ede4:	2285c83a 	sub	r2,r4,r10
  80ede8:	2089803a 	cmpltu	r4,r4,r2
  80edec:	02c7c83a 	sub	r3,zero,r11
  80edf0:	1909c83a 	sub	r4,r3,r4
  80edf4:	100b883a 	mov	r5,r2
  80edf8:	200d883a 	mov	r6,r4
  80edfc:	003fc606 	br	80ed18 <_strtoll_r+0x198>
  80ee00:	a4c00007 	ldb	r19,0(r20)
  80ee04:	a5000044 	addi	r20,r20,1
  80ee08:	003f7a06 	br	80ebf4 <_strtoll_r+0x74>
  80ee0c:	a4c00007 	ldb	r19,0(r20)
  80ee10:	00800044 	movi	r2,1
  80ee14:	a5000044 	addi	r20,r20,1
  80ee18:	d8800115 	stw	r2,4(sp)
  80ee1c:	003f7606 	br	80ebf8 <_strtoll_r+0x78>
  80ee20:	d8c00117 	ldw	r3,4(sp)
  80ee24:	1805003a 	cmpeq	r2,r3,zero
  80ee28:	1000131e 	bne	r2,zero,80ee78 <_strtoll_r+0x2f8>
  80ee2c:	0005883a 	mov	r2,zero
  80ee30:	00e00034 	movhi	r3,32768
  80ee34:	100b883a 	mov	r5,r2
  80ee38:	180d883a 	mov	r6,r3
  80ee3c:	d8c00217 	ldw	r3,8(sp)
  80ee40:	00800884 	movi	r2,34
  80ee44:	18800015 	stw	r2,0(r3)
  80ee48:	003fb306 	br	80ed18 <_strtoll_r+0x198>
  80ee4c:	a1000007 	ldb	r4,0(r20)
  80ee50:	00801e04 	movi	r2,120
  80ee54:	20800226 	beq	r4,r2,80ee60 <_strtoll_r+0x2e0>
  80ee58:	00801604 	movi	r2,88
  80ee5c:	20bfc91e 	bne	r4,r2,80ed84 <_strtoll_r+0x204>
  80ee60:	a4c00047 	ldb	r19,1(r20)
  80ee64:	05c00404 	movi	r23,16
  80ee68:	b82b883a 	mov	r21,r23
  80ee6c:	a5000084 	addi	r20,r20,2
  80ee70:	002d883a 	mov	r22,zero
  80ee74:	003f6606 	br	80ec10 <_strtoll_r+0x90>
  80ee78:	017fffc4 	movi	r5,-1
  80ee7c:	01a00034 	movhi	r6,32768
  80ee80:	31bfffc4 	addi	r6,r6,-1
  80ee84:	003fed06 	br	80ee3c <_strtoll_r+0x2bc>
  80ee88:	05c00204 	movi	r23,8
  80ee8c:	b82b883a 	mov	r21,r23
  80ee90:	002d883a 	mov	r22,zero
  80ee94:	003f5e06 	br	80ec10 <_strtoll_r+0x90>

0080ee98 <_strtoul_r>:
  80ee98:	defff404 	addi	sp,sp,-48
  80ee9c:	00802074 	movhi	r2,129
  80eea0:	109c2804 	addi	r2,r2,28832
  80eea4:	dd000615 	stw	r20,24(sp)
  80eea8:	15000017 	ldw	r20,0(r2)
  80eeac:	df000a15 	stw	fp,40(sp)
  80eeb0:	ddc00915 	stw	r23,36(sp)
  80eeb4:	dc800415 	stw	r18,16(sp)
  80eeb8:	dc400315 	stw	r17,12(sp)
  80eebc:	dfc00b15 	stw	ra,44(sp)
  80eec0:	dd800815 	stw	r22,32(sp)
  80eec4:	dd400715 	stw	r21,28(sp)
  80eec8:	dcc00515 	stw	r19,20(sp)
  80eecc:	dc000215 	stw	r16,8(sp)
  80eed0:	282f883a 	mov	r23,r5
  80eed4:	d9000115 	stw	r4,4(sp)
  80eed8:	3039883a 	mov	fp,r6
  80eedc:	3825883a 	mov	r18,r7
  80eee0:	2823883a 	mov	r17,r5
  80eee4:	8c000007 	ldb	r16,0(r17)
  80eee8:	8c400044 	addi	r17,r17,1
  80eeec:	a407883a 	add	r3,r20,r16
  80eef0:	18800003 	ldbu	r2,0(r3)
  80eef4:	1080020c 	andi	r2,r2,8
  80eef8:	103ffa1e 	bne	r2,zero,80eee4 <_strtoul_r+0x4c>
  80eefc:	00800b44 	movi	r2,45
  80ef00:	80805826 	beq	r16,r2,80f064 <_strtoul_r+0x1cc>
  80ef04:	00800ac4 	movi	r2,43
  80ef08:	80805326 	beq	r16,r2,80f058 <_strtoul_r+0x1c0>
  80ef0c:	d8000015 	stw	zero,0(sp)
  80ef10:	9007003a 	cmpeq	r3,r18,zero
  80ef14:	18003d1e 	bne	r3,zero,80f00c <_strtoul_r+0x174>
  80ef18:	00800404 	movi	r2,16
  80ef1c:	90803b26 	beq	r18,r2,80f00c <_strtoul_r+0x174>
  80ef20:	013fffc4 	movi	r4,-1
  80ef24:	900b883a 	mov	r5,r18
  80ef28:	0811a280 	call	811a28 <__udivsi3>
  80ef2c:	013fffc4 	movi	r4,-1
  80ef30:	900b883a 	mov	r5,r18
  80ef34:	1027883a 	mov	r19,r2
  80ef38:	0811a300 	call	811a30 <__umodsi3>
  80ef3c:	102d883a 	mov	r22,r2
  80ef40:	902b883a 	mov	r21,r18
  80ef44:	a405883a 	add	r2,r20,r16
  80ef48:	11400003 	ldbu	r5,0(r2)
  80ef4c:	0009883a 	mov	r4,zero
  80ef50:	000d883a 	mov	r6,zero
  80ef54:	28c0010c 	andi	r3,r5,4
  80ef58:	18000f26 	beq	r3,zero,80ef98 <_strtoul_r+0x100>
  80ef5c:	843ff404 	addi	r16,r16,-48
  80ef60:	8480150e 	bge	r16,r18,80efb8 <_strtoul_r+0x120>
  80ef64:	30003516 	blt	r6,zero,80f03c <_strtoul_r+0x1a4>
  80ef68:	99003436 	bltu	r19,r4,80f03c <_strtoul_r+0x1a4>
  80ef6c:	24c03226 	beq	r4,r19,80f038 <_strtoul_r+0x1a0>
  80ef70:	a80b883a 	mov	r5,r21
  80ef74:	08027a80 	call	8027a8 <__mulsi3>
  80ef78:	1409883a 	add	r4,r2,r16
  80ef7c:	01800044 	movi	r6,1
  80ef80:	8c000007 	ldb	r16,0(r17)
  80ef84:	8c400044 	addi	r17,r17,1
  80ef88:	a405883a 	add	r2,r20,r16
  80ef8c:	11400003 	ldbu	r5,0(r2)
  80ef90:	28c0010c 	andi	r3,r5,4
  80ef94:	183ff11e 	bne	r3,zero,80ef5c <_strtoul_r+0xc4>
  80ef98:	288000cc 	andi	r2,r5,3
  80ef9c:	10000626 	beq	r2,zero,80efb8 <_strtoul_r+0x120>
  80efa0:	2880004c 	andi	r2,r5,1
  80efa4:	1005003a 	cmpeq	r2,r2,zero
  80efa8:	1000261e 	bne	r2,zero,80f044 <_strtoul_r+0x1ac>
  80efac:	00800dc4 	movi	r2,55
  80efb0:	80a1c83a 	sub	r16,r16,r2
  80efb4:	84bfeb16 	blt	r16,r18,80ef64 <_strtoul_r+0xcc>
  80efb8:	3000420e 	bge	r6,zero,80f0c4 <_strtoul_r+0x22c>
  80efbc:	d8c00117 	ldw	r3,4(sp)
  80efc0:	00800884 	movi	r2,34
  80efc4:	013fffc4 	movi	r4,-1
  80efc8:	18800015 	stw	r2,0(r3)
  80efcc:	e0000226 	beq	fp,zero,80efd8 <_strtoul_r+0x140>
  80efd0:	30001f1e 	bne	r6,zero,80f050 <_strtoul_r+0x1b8>
  80efd4:	e5c00015 	stw	r23,0(fp)
  80efd8:	2005883a 	mov	r2,r4
  80efdc:	dfc00b17 	ldw	ra,44(sp)
  80efe0:	df000a17 	ldw	fp,40(sp)
  80efe4:	ddc00917 	ldw	r23,36(sp)
  80efe8:	dd800817 	ldw	r22,32(sp)
  80efec:	dd400717 	ldw	r21,28(sp)
  80eff0:	dd000617 	ldw	r20,24(sp)
  80eff4:	dcc00517 	ldw	r19,20(sp)
  80eff8:	dc800417 	ldw	r18,16(sp)
  80effc:	dc400317 	ldw	r17,12(sp)
  80f000:	dc000217 	ldw	r16,8(sp)
  80f004:	dec00c04 	addi	sp,sp,48
  80f008:	f800283a 	ret
  80f00c:	00800c04 	movi	r2,48
  80f010:	80801926 	beq	r16,r2,80f078 <_strtoul_r+0x1e0>
  80f014:	183fc226 	beq	r3,zero,80ef20 <_strtoul_r+0x88>
  80f018:	00800c04 	movi	r2,48
  80f01c:	80802326 	beq	r16,r2,80f0ac <_strtoul_r+0x214>
  80f020:	04800284 	movi	r18,10
  80f024:	902b883a 	mov	r21,r18
  80f028:	04c666b4 	movhi	r19,6554
  80f02c:	9ce66644 	addi	r19,r19,-26215
  80f030:	05800144 	movi	r22,5
  80f034:	003fc306 	br	80ef44 <_strtoul_r+0xac>
  80f038:	b43fcd0e 	bge	r22,r16,80ef70 <_strtoul_r+0xd8>
  80f03c:	01bfffc4 	movi	r6,-1
  80f040:	003fcf06 	br	80ef80 <_strtoul_r+0xe8>
  80f044:	008015c4 	movi	r2,87
  80f048:	80a1c83a 	sub	r16,r16,r2
  80f04c:	003fd906 	br	80efb4 <_strtoul_r+0x11c>
  80f050:	8dffffc4 	addi	r23,r17,-1
  80f054:	003fdf06 	br	80efd4 <_strtoul_r+0x13c>
  80f058:	8c000007 	ldb	r16,0(r17)
  80f05c:	8c400044 	addi	r17,r17,1
  80f060:	003faa06 	br	80ef0c <_strtoul_r+0x74>
  80f064:	8c000007 	ldb	r16,0(r17)
  80f068:	00800044 	movi	r2,1
  80f06c:	8c400044 	addi	r17,r17,1
  80f070:	d8800015 	stw	r2,0(sp)
  80f074:	003fa606 	br	80ef10 <_strtoul_r+0x78>
  80f078:	89000007 	ldb	r4,0(r17)
  80f07c:	00801e04 	movi	r2,120
  80f080:	20800226 	beq	r4,r2,80f08c <_strtoul_r+0x1f4>
  80f084:	00801604 	movi	r2,88
  80f088:	20bfe21e 	bne	r4,r2,80f014 <_strtoul_r+0x17c>
  80f08c:	8c000047 	ldb	r16,1(r17)
  80f090:	04800404 	movi	r18,16
  80f094:	8c400084 	addi	r17,r17,2
  80f098:	902b883a 	mov	r21,r18
  80f09c:	04c40034 	movhi	r19,4096
  80f0a0:	9cffffc4 	addi	r19,r19,-1
  80f0a4:	058003c4 	movi	r22,15
  80f0a8:	003fa606 	br	80ef44 <_strtoul_r+0xac>
  80f0ac:	04800204 	movi	r18,8
  80f0b0:	902b883a 	mov	r21,r18
  80f0b4:	04c80034 	movhi	r19,8192
  80f0b8:	9cffffc4 	addi	r19,r19,-1
  80f0bc:	058001c4 	movi	r22,7
  80f0c0:	003fa006 	br	80ef44 <_strtoul_r+0xac>
  80f0c4:	d8c00017 	ldw	r3,0(sp)
  80f0c8:	1805003a 	cmpeq	r2,r3,zero
  80f0cc:	103fbf1e 	bne	r2,zero,80efcc <_strtoul_r+0x134>
  80f0d0:	0109c83a 	sub	r4,zero,r4
  80f0d4:	003fbd06 	br	80efcc <_strtoul_r+0x134>

0080f0d8 <strtoul>:
  80f0d8:	00802074 	movhi	r2,129
  80f0dc:	109c2904 	addi	r2,r2,28836
  80f0e0:	2013883a 	mov	r9,r4
  80f0e4:	11000017 	ldw	r4,0(r2)
  80f0e8:	2805883a 	mov	r2,r5
  80f0ec:	300f883a 	mov	r7,r6
  80f0f0:	480b883a 	mov	r5,r9
  80f0f4:	100d883a 	mov	r6,r2
  80f0f8:	080ee981 	jmpi	80ee98 <_strtoul_r>

0080f0fc <_strtoull_r>:
  80f0fc:	defff104 	addi	sp,sp,-60
  80f100:	00802074 	movhi	r2,129
  80f104:	109c2804 	addi	r2,r2,28832
  80f108:	df000d15 	stw	fp,52(sp)
  80f10c:	17000017 	ldw	fp,0(r2)
  80f110:	ddc00c15 	stw	r23,48(sp)
  80f114:	dcc00815 	stw	r19,32(sp)
  80f118:	dfc00e15 	stw	ra,56(sp)
  80f11c:	dd800b15 	stw	r22,44(sp)
  80f120:	dd400a15 	stw	r21,40(sp)
  80f124:	dd000915 	stw	r20,36(sp)
  80f128:	dc800715 	stw	r18,28(sp)
  80f12c:	dc400615 	stw	r17,24(sp)
  80f130:	dc000515 	stw	r16,20(sp)
  80f134:	d9400215 	stw	r5,8(sp)
  80f138:	d9000115 	stw	r4,4(sp)
  80f13c:	d9800315 	stw	r6,12(sp)
  80f140:	382f883a 	mov	r23,r7
  80f144:	2827883a 	mov	r19,r5
  80f148:	9d000007 	ldb	r20,0(r19)
  80f14c:	9cc00044 	addi	r19,r19,1
  80f150:	e507883a 	add	r3,fp,r20
  80f154:	18800003 	ldbu	r2,0(r3)
  80f158:	1080020c 	andi	r2,r2,8
  80f15c:	103ffa1e 	bne	r2,zero,80f148 <_strtoull_r+0x4c>
  80f160:	00800b44 	movi	r2,45
  80f164:	a0807a26 	beq	r20,r2,80f350 <_strtoull_r+0x254>
  80f168:	00800ac4 	movi	r2,43
  80f16c:	a0807526 	beq	r20,r2,80f344 <_strtoull_r+0x248>
  80f170:	d8000015 	stw	zero,0(sp)
  80f174:	b807003a 	cmpeq	r3,r23,zero
  80f178:	18005a1e 	bne	r3,zero,80f2e4 <_strtoull_r+0x1e8>
  80f17c:	00800404 	movi	r2,16
  80f180:	b8805826 	beq	r23,r2,80f2e4 <_strtoull_r+0x1e8>
  80f184:	b82dd7fa 	srai	r22,r23,31
  80f188:	043fffc4 	movi	r16,-1
  80f18c:	8009883a 	mov	r4,r16
  80f190:	800b883a 	mov	r5,r16
  80f194:	b80d883a 	mov	r6,r23
  80f198:	b00f883a 	mov	r7,r22
  80f19c:	08101800 	call	810180 <__udivdi3>
  80f1a0:	8009883a 	mov	r4,r16
  80f1a4:	800b883a 	mov	r5,r16
  80f1a8:	b80d883a 	mov	r6,r23
  80f1ac:	b00f883a 	mov	r7,r22
  80f1b0:	1023883a 	mov	r17,r2
  80f1b4:	1825883a 	mov	r18,r3
  80f1b8:	08107ec0 	call	8107ec <__umoddi3>
  80f1bc:	b82b883a 	mov	r21,r23
  80f1c0:	1019883a 	mov	r12,r2
  80f1c4:	e505883a 	add	r2,fp,r20
  80f1c8:	11000003 	ldbu	r4,0(r2)
  80f1cc:	0015883a 	mov	r10,zero
  80f1d0:	0017883a 	mov	r11,zero
  80f1d4:	20c0010c 	andi	r3,r4,4
  80f1d8:	000d883a 	mov	r6,zero
  80f1dc:	18001c26 	beq	r3,zero,80f250 <_strtoull_r+0x154>
  80f1e0:	a43ff404 	addi	r16,r20,-48
  80f1e4:	85c0220e 	bge	r16,r23,80f270 <_strtoull_r+0x174>
  80f1e8:	30003c16 	blt	r6,zero,80f2dc <_strtoull_r+0x1e0>
  80f1ec:	92c03b36 	bltu	r18,r11,80f2dc <_strtoull_r+0x1e0>
  80f1f0:	5c803926 	beq	r11,r18,80f2d8 <_strtoull_r+0x1dc>
  80f1f4:	54404c26 	beq	r10,r17,80f328 <_strtoull_r+0x22c>
  80f1f8:	580b883a 	mov	r5,r11
  80f1fc:	5009883a 	mov	r4,r10
  80f200:	a80d883a 	mov	r6,r21
  80f204:	b00f883a 	mov	r7,r22
  80f208:	db000415 	stw	r12,16(sp)
  80f20c:	080ffb80 	call	80ffb8 <__muldi3>
  80f210:	8013d7fa 	srai	r9,r16,31
  80f214:	100d883a 	mov	r6,r2
  80f218:	1405883a 	add	r2,r2,r16
  80f21c:	118d803a 	cmpltu	r6,r2,r6
  80f220:	1a47883a 	add	r3,r3,r9
  80f224:	db000417 	ldw	r12,16(sp)
  80f228:	30cd883a 	add	r6,r6,r3
  80f22c:	3017883a 	mov	r11,r6
  80f230:	1015883a 	mov	r10,r2
  80f234:	01800044 	movi	r6,1
  80f238:	9d000007 	ldb	r20,0(r19)
  80f23c:	9cc00044 	addi	r19,r19,1
  80f240:	e505883a 	add	r2,fp,r20
  80f244:	11000003 	ldbu	r4,0(r2)
  80f248:	20c0010c 	andi	r3,r4,4
  80f24c:	183fe41e 	bne	r3,zero,80f1e0 <_strtoull_r+0xe4>
  80f250:	208000cc 	andi	r2,r4,3
  80f254:	10000626 	beq	r2,zero,80f270 <_strtoull_r+0x174>
  80f258:	2080004c 	andi	r2,r4,1
  80f25c:	1005003a 	cmpeq	r2,r2,zero
  80f260:	10002e1e 	bne	r2,zero,80f31c <_strtoull_r+0x220>
  80f264:	02000dc4 	movi	r8,55
  80f268:	a221c83a 	sub	r16,r20,r8
  80f26c:	85ffde16 	blt	r16,r23,80f1e8 <_strtoull_r+0xec>
  80f270:	3000530e 	bge	r6,zero,80f3c0 <_strtoull_r+0x2c4>
  80f274:	d8c00117 	ldw	r3,4(sp)
  80f278:	02bfffc4 	movi	r10,-1
  80f27c:	00800884 	movi	r2,34
  80f280:	5017883a 	mov	r11,r10
  80f284:	18800015 	stw	r2,0(r3)
  80f288:	d8800317 	ldw	r2,12(sp)
  80f28c:	10000426 	beq	r2,zero,80f2a0 <_strtoull_r+0x1a4>
  80f290:	3000291e 	bne	r6,zero,80f338 <_strtoull_r+0x23c>
  80f294:	d8800217 	ldw	r2,8(sp)
  80f298:	d8c00317 	ldw	r3,12(sp)
  80f29c:	18800015 	stw	r2,0(r3)
  80f2a0:	5005883a 	mov	r2,r10
  80f2a4:	5807883a 	mov	r3,r11
  80f2a8:	dfc00e17 	ldw	ra,56(sp)
  80f2ac:	df000d17 	ldw	fp,52(sp)
  80f2b0:	ddc00c17 	ldw	r23,48(sp)
  80f2b4:	dd800b17 	ldw	r22,44(sp)
  80f2b8:	dd400a17 	ldw	r21,40(sp)
  80f2bc:	dd000917 	ldw	r20,36(sp)
  80f2c0:	dcc00817 	ldw	r19,32(sp)
  80f2c4:	dc800717 	ldw	r18,28(sp)
  80f2c8:	dc400617 	ldw	r17,24(sp)
  80f2cc:	dc000517 	ldw	r16,20(sp)
  80f2d0:	dec00f04 	addi	sp,sp,60
  80f2d4:	f800283a 	ret
  80f2d8:	8abfc62e 	bgeu	r17,r10,80f1f4 <_strtoull_r+0xf8>
  80f2dc:	01bfffc4 	movi	r6,-1
  80f2e0:	003fd506 	br	80f238 <_strtoull_r+0x13c>
  80f2e4:	00800c04 	movi	r2,48
  80f2e8:	a0801e26 	beq	r20,r2,80f364 <_strtoull_r+0x268>
  80f2ec:	183fa526 	beq	r3,zero,80f184 <_strtoull_r+0x88>
  80f2f0:	00800c04 	movi	r2,48
  80f2f4:	a0802a26 	beq	r20,r2,80f3a0 <_strtoull_r+0x2a4>
  80f2f8:	05c00284 	movi	r23,10
  80f2fc:	b82b883a 	mov	r21,r23
  80f300:	046666b4 	movhi	r17,39322
  80f304:	8c666644 	addi	r17,r17,-26215
  80f308:	002d883a 	mov	r22,zero
  80f30c:	048666b4 	movhi	r18,6554
  80f310:	94a66644 	addi	r18,r18,-26215
  80f314:	03000144 	movi	r12,5
  80f318:	003faa06 	br	80f1c4 <_strtoull_r+0xc8>
  80f31c:	020015c4 	movi	r8,87
  80f320:	a221c83a 	sub	r16,r20,r8
  80f324:	003fd106 	br	80f26c <_strtoull_r+0x170>
  80f328:	5cbfb31e 	bne	r11,r18,80f1f8 <_strtoull_r+0xfc>
  80f32c:	643fb20e 	bge	r12,r16,80f1f8 <_strtoull_r+0xfc>
  80f330:	01bfffc4 	movi	r6,-1
  80f334:	003fc006 	br	80f238 <_strtoull_r+0x13c>
  80f338:	9cffffc4 	addi	r19,r19,-1
  80f33c:	dcc00215 	stw	r19,8(sp)
  80f340:	003fd406 	br	80f294 <_strtoull_r+0x198>
  80f344:	9d000007 	ldb	r20,0(r19)
  80f348:	9cc00044 	addi	r19,r19,1
  80f34c:	003f8806 	br	80f170 <_strtoull_r+0x74>
  80f350:	9d000007 	ldb	r20,0(r19)
  80f354:	00800044 	movi	r2,1
  80f358:	9cc00044 	addi	r19,r19,1
  80f35c:	d8800015 	stw	r2,0(sp)
  80f360:	003f8406 	br	80f174 <_strtoull_r+0x78>
  80f364:	99000007 	ldb	r4,0(r19)
  80f368:	00801e04 	movi	r2,120
  80f36c:	20800226 	beq	r4,r2,80f378 <_strtoull_r+0x27c>
  80f370:	00801604 	movi	r2,88
  80f374:	20bfdd1e 	bne	r4,r2,80f2ec <_strtoull_r+0x1f0>
  80f378:	9d000047 	ldb	r20,1(r19)
  80f37c:	05c00404 	movi	r23,16
  80f380:	b82b883a 	mov	r21,r23
  80f384:	047fffc4 	movi	r17,-1
  80f388:	9cc00084 	addi	r19,r19,2
  80f38c:	002d883a 	mov	r22,zero
  80f390:	04840034 	movhi	r18,4096
  80f394:	94bfffc4 	addi	r18,r18,-1
  80f398:	030003c4 	movi	r12,15
  80f39c:	003f8906 	br	80f1c4 <_strtoull_r+0xc8>
  80f3a0:	05c00204 	movi	r23,8
  80f3a4:	b82b883a 	mov	r21,r23
  80f3a8:	047fffc4 	movi	r17,-1
  80f3ac:	002d883a 	mov	r22,zero
  80f3b0:	04880034 	movhi	r18,8192
  80f3b4:	94bfffc4 	addi	r18,r18,-1
  80f3b8:	030001c4 	movi	r12,7
  80f3bc:	003f8106 	br	80f1c4 <_strtoull_r+0xc8>
  80f3c0:	d8c00017 	ldw	r3,0(sp)
  80f3c4:	1805003a 	cmpeq	r2,r3,zero
  80f3c8:	103faf1e 	bne	r2,zero,80f288 <_strtoull_r+0x18c>
  80f3cc:	0009883a 	mov	r4,zero
  80f3d0:	2285c83a 	sub	r2,r4,r10
  80f3d4:	02c7c83a 	sub	r3,zero,r11
  80f3d8:	2089803a 	cmpltu	r4,r4,r2
  80f3dc:	1909c83a 	sub	r4,r3,r4
  80f3e0:	1015883a 	mov	r10,r2
  80f3e4:	2017883a 	mov	r11,r4
  80f3e8:	003fa706 	br	80f288 <_strtoull_r+0x18c>

0080f3ec <htinit>:
  80f3ec:	28800003 	ldbu	r2,0(r5)
  80f3f0:	10000626 	beq	r2,zero,80f40c <htinit+0x20>
  80f3f4:	1105883a 	add	r2,r2,r4
  80f3f8:	11800005 	stb	r6,0(r2)
  80f3fc:	28800043 	ldbu	r2,1(r5)
  80f400:	31800044 	addi	r6,r6,1
  80f404:	29400044 	addi	r5,r5,1
  80f408:	103ffa1e 	bne	r2,zero,80f3f4 <htinit+0x8>
  80f40c:	f800283a 	ret

0080f410 <__hexdig_init>:
  80f410:	defffd04 	addi	sp,sp,-12
  80f414:	dc400015 	stw	r17,0(sp)
  80f418:	044020b4 	movhi	r17,130
  80f41c:	8c632b04 	addi	r17,r17,-29524
  80f420:	dcc00115 	stw	r19,4(sp)
  80f424:	8809883a 	mov	r4,r17
  80f428:	04c00684 	movi	r19,26
  80f42c:	01402074 	movhi	r5,129
  80f430:	29556f04 	addi	r5,r5,21948
  80f434:	01800404 	movi	r6,16
  80f438:	dfc00215 	stw	ra,8(sp)
  80f43c:	080f3ec0 	call	80f3ec <htinit>
  80f440:	980d883a 	mov	r6,r19
  80f444:	8809883a 	mov	r4,r17
  80f448:	01402074 	movhi	r5,129
  80f44c:	29557204 	addi	r5,r5,21960
  80f450:	080f3ec0 	call	80f3ec <htinit>
  80f454:	8809883a 	mov	r4,r17
  80f458:	980d883a 	mov	r6,r19
  80f45c:	01402074 	movhi	r5,129
  80f460:	29557404 	addi	r5,r5,21968
  80f464:	dfc00217 	ldw	ra,8(sp)
  80f468:	dcc00117 	ldw	r19,4(sp)
  80f46c:	dc400017 	ldw	r17,0(sp)
  80f470:	dec00304 	addi	sp,sp,12
  80f474:	080f3ec1 	jmpi	80f3ec <htinit>

0080f478 <rshift>:
  80f478:	2807d17a 	srai	r3,r5,5
  80f47c:	20800417 	ldw	r2,16(r4)
  80f480:	22400504 	addi	r9,r4,20
  80f484:	480f883a 	mov	r7,r9
  80f488:	1880190e 	bge	r3,r2,80f4f0 <rshift+0x78>
  80f48c:	1085883a 	add	r2,r2,r2
  80f490:	18c7883a 	add	r3,r3,r3
  80f494:	1085883a 	add	r2,r2,r2
  80f498:	18c7883a 	add	r3,r3,r3
  80f49c:	294007cc 	andi	r5,r5,31
  80f4a0:	4891883a 	add	r8,r9,r2
  80f4a4:	48cd883a 	add	r6,r9,r3
  80f4a8:	28001726 	beq	r5,zero,80f508 <rshift+0x90>
  80f4ac:	30c00017 	ldw	r3,0(r6)
  80f4b0:	00800804 	movi	r2,32
  80f4b4:	31800104 	addi	r6,r6,4
  80f4b8:	1155c83a 	sub	r10,r2,r5
  80f4bc:	1946d83a 	srl	r3,r3,r5
  80f4c0:	3200092e 	bgeu	r6,r8,80f4e8 <rshift+0x70>
  80f4c4:	30800017 	ldw	r2,0(r6)
  80f4c8:	1284983a 	sll	r2,r2,r10
  80f4cc:	10c4b03a 	or	r2,r2,r3
  80f4d0:	38800015 	stw	r2,0(r7)
  80f4d4:	30c00017 	ldw	r3,0(r6)
  80f4d8:	31800104 	addi	r6,r6,4
  80f4dc:	39c00104 	addi	r7,r7,4
  80f4e0:	1946d83a 	srl	r3,r3,r5
  80f4e4:	323ff736 	bltu	r6,r8,80f4c4 <rshift+0x4c>
  80f4e8:	38c00015 	stw	r3,0(r7)
  80f4ec:	18000c1e 	bne	r3,zero,80f520 <rshift+0xa8>
  80f4f0:	3a45c83a 	sub	r2,r7,r9
  80f4f4:	1005d0ba 	srai	r2,r2,2
  80f4f8:	20800415 	stw	r2,16(r4)
  80f4fc:	1000011e 	bne	r2,zero,80f504 <rshift+0x8c>
  80f500:	20000515 	stw	zero,20(r4)
  80f504:	f800283a 	ret
  80f508:	323ff92e 	bgeu	r6,r8,80f4f0 <rshift+0x78>
  80f50c:	30800017 	ldw	r2,0(r6)
  80f510:	31800104 	addi	r6,r6,4
  80f514:	38800015 	stw	r2,0(r7)
  80f518:	39c00104 	addi	r7,r7,4
  80f51c:	003ffa06 	br	80f508 <rshift+0x90>
  80f520:	39c00104 	addi	r7,r7,4
  80f524:	003ff206 	br	80f4f0 <rshift+0x78>

0080f528 <__gethex>:
  80f528:	defff104 	addi	sp,sp,-60
  80f52c:	df000d15 	stw	fp,52(sp)
  80f530:	dcc00815 	stw	r19,32(sp)
  80f534:	dfc00e15 	stw	ra,56(sp)
  80f538:	ddc00c15 	stw	r23,48(sp)
  80f53c:	dd800b15 	stw	r22,44(sp)
  80f540:	dd400a15 	stw	r21,40(sp)
  80f544:	dd000915 	stw	r20,36(sp)
  80f548:	dc800715 	stw	r18,28(sp)
  80f54c:	dc400615 	stw	r17,24(sp)
  80f550:	dc000515 	stw	r16,20(sp)
  80f554:	04c020b4 	movhi	r19,130
  80f558:	9ce32b04 	addi	r19,r19,-29524
  80f55c:	98800c03 	ldbu	r2,48(r19)
  80f560:	d9000115 	stw	r4,4(sp)
  80f564:	2839883a 	mov	fp,r5
  80f568:	d9800215 	stw	r6,8(sp)
  80f56c:	d9c00315 	stw	r7,12(sp)
  80f570:	10007526 	beq	r2,zero,80f748 <__gethex+0x220>
  80f574:	e1800017 	ldw	r6,0(fp)
  80f578:	00800c04 	movi	r2,48
  80f57c:	31000083 	ldbu	r4,2(r6)
  80f580:	30c00084 	addi	r3,r6,2
  80f584:	2080761e 	bne	r4,r2,80f760 <__gethex+0x238>
  80f588:	200b883a 	mov	r5,r4
  80f58c:	3007883a 	mov	r3,r6
  80f590:	188000c3 	ldbu	r2,3(r3)
  80f594:	18c00044 	addi	r3,r3,1
  80f598:	1009883a 	mov	r4,r2
  80f59c:	117ffc26 	beq	r2,r5,80f590 <__gethex+0x68>
  80f5a0:	198fc83a 	sub	r7,r3,r6
  80f5a4:	19400084 	addi	r5,r3,2
  80f5a8:	24c5883a 	add	r2,r4,r19
  80f5ac:	10c00003 	ldbu	r3,0(r2)
  80f5b0:	18002e26 	beq	r3,zero,80f66c <__gethex+0x144>
  80f5b4:	29000003 	ldbu	r4,0(r5)
  80f5b8:	282b883a 	mov	r21,r5
  80f5bc:	000d883a 	mov	r6,zero
  80f5c0:	002d883a 	mov	r22,zero
  80f5c4:	21003fcc 	andi	r4,r4,255
  80f5c8:	24c5883a 	add	r2,r4,r19
  80f5cc:	10c00003 	ldbu	r3,0(r2)
  80f5d0:	18000526 	beq	r3,zero,80f5e8 <__gethex+0xc0>
  80f5d4:	29400044 	addi	r5,r5,1
  80f5d8:	29000003 	ldbu	r4,0(r5)
  80f5dc:	24c5883a 	add	r2,r4,r19
  80f5e0:	10c00003 	ldbu	r3,0(r2)
  80f5e4:	183ffb1e 	bne	r3,zero,80f5d4 <__gethex+0xac>
  80f5e8:	00800b84 	movi	r2,46
  80f5ec:	20805f26 	beq	r4,r2,80f76c <__gethex+0x244>
  80f5f0:	30008226 	beq	r6,zero,80f7fc <__gethex+0x2d4>
  80f5f4:	2985c83a 	sub	r2,r5,r6
  80f5f8:	1085883a 	add	r2,r2,r2
  80f5fc:	1085883a 	add	r2,r2,r2
  80f600:	0085c83a 	sub	r2,zero,r2
  80f604:	d8800015 	stw	r2,0(sp)
  80f608:	2825883a 	mov	r18,r5
  80f60c:	90c00003 	ldbu	r3,0(r18)
  80f610:	00801404 	movi	r2,80
  80f614:	18801e26 	beq	r3,r2,80f690 <__gethex+0x168>
  80f618:	00801c04 	movi	r2,112
  80f61c:	18801c26 	beq	r3,r2,80f690 <__gethex+0x168>
  80f620:	9023883a 	mov	r17,r18
  80f624:	b005003a 	cmpeq	r2,r22,zero
  80f628:	e4400015 	stw	r17,0(fp)
  80f62c:	10008d1e 	bne	r2,zero,80f864 <__gethex+0x33c>
  80f630:	38004326 	beq	r7,zero,80f740 <__gethex+0x218>
  80f634:	0025883a 	mov	r18,zero
  80f638:	9005883a 	mov	r2,r18
  80f63c:	dfc00e17 	ldw	ra,56(sp)
  80f640:	df000d17 	ldw	fp,52(sp)
  80f644:	ddc00c17 	ldw	r23,48(sp)
  80f648:	dd800b17 	ldw	r22,44(sp)
  80f64c:	dd400a17 	ldw	r21,40(sp)
  80f650:	dd000917 	ldw	r20,36(sp)
  80f654:	dcc00817 	ldw	r19,32(sp)
  80f658:	dc800717 	ldw	r18,28(sp)
  80f65c:	dc400617 	ldw	r17,24(sp)
  80f660:	dc000517 	ldw	r16,20(sp)
  80f664:	dec00f04 	addi	sp,sp,60
  80f668:	f800283a 	ret
  80f66c:	00800b84 	movi	r2,46
  80f670:	20805126 	beq	r4,r2,80f7b8 <__gethex+0x290>
  80f674:	2825883a 	mov	r18,r5
  80f678:	d8000015 	stw	zero,0(sp)
  80f67c:	90c00003 	ldbu	r3,0(r18)
  80f680:	00801404 	movi	r2,80
  80f684:	282b883a 	mov	r21,r5
  80f688:	05800044 	movi	r22,1
  80f68c:	18bfe21e 	bne	r3,r2,80f618 <__gethex+0xf0>
  80f690:	90c00043 	ldbu	r3,1(r18)
  80f694:	00800ac4 	movi	r2,43
  80f698:	91400044 	addi	r5,r18,1
  80f69c:	18805126 	beq	r3,r2,80f7e4 <__gethex+0x2bc>
  80f6a0:	00800b44 	movi	r2,45
  80f6a4:	18805326 	beq	r3,r2,80f7f4 <__gethex+0x2cc>
  80f6a8:	002f883a 	mov	r23,zero
  80f6ac:	1cc5883a 	add	r2,r3,r19
  80f6b0:	10800003 	ldbu	r2,0(r2)
  80f6b4:	103fda26 	beq	r2,zero,80f620 <__gethex+0xf8>
  80f6b8:	01800644 	movi	r6,25
  80f6bc:	30bfd816 	blt	r6,r2,80f620 <__gethex+0xf8>
  80f6c0:	28c00043 	ldbu	r3,1(r5)
  80f6c4:	113ffc04 	addi	r4,r2,-16
  80f6c8:	008020b4 	movhi	r2,130
  80f6cc:	10a32b04 	addi	r2,r2,-29524
  80f6d0:	1887883a 	add	r3,r3,r2
  80f6d4:	18800003 	ldbu	r2,0(r3)
  80f6d8:	2c400044 	addi	r17,r5,1
  80f6dc:	10001126 	beq	r2,zero,80f724 <__gethex+0x1fc>
  80f6e0:	1021883a 	mov	r16,r2
  80f6e4:	30800f16 	blt	r6,r2,80f724 <__gethex+0x1fc>
  80f6e8:	3029883a 	mov	r20,r6
  80f6ec:	00000106 	br	80f6f4 <__gethex+0x1cc>
  80f6f0:	a0800c16 	blt	r20,r2,80f724 <__gethex+0x1fc>
  80f6f4:	8c400044 	addi	r17,r17,1
  80f6f8:	01400284 	movi	r5,10
  80f6fc:	d9c00415 	stw	r7,16(sp)
  80f700:	08027a80 	call	8027a8 <__mulsi3>
  80f704:	88c00003 	ldbu	r3,0(r17)
  80f708:	1405883a 	add	r2,r2,r16
  80f70c:	113ffc04 	addi	r4,r2,-16
  80f710:	1cc7883a 	add	r3,r3,r19
  80f714:	18800003 	ldbu	r2,0(r3)
  80f718:	d9c00417 	ldw	r7,16(sp)
  80f71c:	1021883a 	mov	r16,r2
  80f720:	103ff31e 	bne	r2,zero,80f6f0 <__gethex+0x1c8>
  80f724:	b805003a 	cmpeq	r2,r23,zero
  80f728:	1000011e 	bne	r2,zero,80f730 <__gethex+0x208>
  80f72c:	0109c83a 	sub	r4,zero,r4
  80f730:	d8800017 	ldw	r2,0(sp)
  80f734:	1105883a 	add	r2,r2,r4
  80f738:	d8800015 	stw	r2,0(sp)
  80f73c:	003fb906 	br	80f624 <__gethex+0xfc>
  80f740:	04800184 	movi	r18,6
  80f744:	003fbc06 	br	80f638 <__gethex+0x110>
  80f748:	080f4100 	call	80f410 <__hexdig_init>
  80f74c:	e1800017 	ldw	r6,0(fp)
  80f750:	00800c04 	movi	r2,48
  80f754:	31000083 	ldbu	r4,2(r6)
  80f758:	30c00084 	addi	r3,r6,2
  80f75c:	20bf8a26 	beq	r4,r2,80f588 <__gethex+0x60>
  80f760:	180b883a 	mov	r5,r3
  80f764:	000f883a 	mov	r7,zero
  80f768:	003f8f06 	br	80f5a8 <__gethex+0x80>
  80f76c:	303fa11e 	bne	r6,zero,80f5f4 <__gethex+0xcc>
  80f770:	29400044 	addi	r5,r5,1
  80f774:	28800003 	ldbu	r2,0(r5)
  80f778:	14c5883a 	add	r2,r2,r19
  80f77c:	10c00003 	ldbu	r3,0(r2)
  80f780:	1800b526 	beq	r3,zero,80fa58 <__gethex+0x530>
  80f784:	2809883a 	mov	r4,r5
  80f788:	21000044 	addi	r4,r4,1
  80f78c:	20800003 	ldbu	r2,0(r4)
  80f790:	14c5883a 	add	r2,r2,r19
  80f794:	10c00003 	ldbu	r3,0(r2)
  80f798:	183ffb1e 	bne	r3,zero,80f788 <__gethex+0x260>
  80f79c:	2145c83a 	sub	r2,r4,r5
  80f7a0:	1085883a 	add	r2,r2,r2
  80f7a4:	1085883a 	add	r2,r2,r2
  80f7a8:	0085c83a 	sub	r2,zero,r2
  80f7ac:	200b883a 	mov	r5,r4
  80f7b0:	d8800015 	stw	r2,0(sp)
  80f7b4:	003f9406 	br	80f608 <__gethex+0xe0>
  80f7b8:	29000043 	ldbu	r4,1(r5)
  80f7bc:	008020b4 	movhi	r2,130
  80f7c0:	10a32b04 	addi	r2,r2,-29524
  80f7c4:	2c800044 	addi	r18,r5,1
  80f7c8:	2085883a 	add	r2,r4,r2
  80f7cc:	10c00003 	ldbu	r3,0(r2)
  80f7d0:	18000d1e 	bne	r3,zero,80f808 <__gethex+0x2e0>
  80f7d4:	282b883a 	mov	r21,r5
  80f7d8:	05800044 	movi	r22,1
  80f7dc:	d8000015 	stw	zero,0(sp)
  80f7e0:	003f8a06 	br	80f60c <__gethex+0xe4>
  80f7e4:	002f883a 	mov	r23,zero
  80f7e8:	29400044 	addi	r5,r5,1
  80f7ec:	28c00003 	ldbu	r3,0(r5)
  80f7f0:	003fae06 	br	80f6ac <__gethex+0x184>
  80f7f4:	05c00044 	movi	r23,1
  80f7f8:	003ffb06 	br	80f7e8 <__gethex+0x2c0>
  80f7fc:	2825883a 	mov	r18,r5
  80f800:	d8000015 	stw	zero,0(sp)
  80f804:	003f8106 	br	80f60c <__gethex+0xe4>
  80f808:	00800c04 	movi	r2,48
  80f80c:	20800e1e 	bne	r4,r2,80f848 <__gethex+0x320>
  80f810:	2007883a 	mov	r3,r4
  80f814:	900b883a 	mov	r5,r18
  80f818:	29400044 	addi	r5,r5,1
  80f81c:	29000003 	ldbu	r4,0(r5)
  80f820:	20803fcc 	andi	r2,r4,255
  80f824:	10fffc26 	beq	r2,r3,80f818 <__gethex+0x2f0>
  80f828:	14c5883a 	add	r2,r2,r19
  80f82c:	10c00003 	ldbu	r3,0(r2)
  80f830:	1800071e 	bne	r3,zero,80f850 <__gethex+0x328>
  80f834:	01c00044 	movi	r7,1
  80f838:	900d883a 	mov	r6,r18
  80f83c:	282b883a 	mov	r21,r5
  80f840:	382d883a 	mov	r22,r7
  80f844:	003f5f06 	br	80f5c4 <__gethex+0x9c>
  80f848:	91000003 	ldbu	r4,0(r18)
  80f84c:	900b883a 	mov	r5,r18
  80f850:	900d883a 	mov	r6,r18
  80f854:	282b883a 	mov	r21,r5
  80f858:	01c00044 	movi	r7,1
  80f85c:	002d883a 	mov	r22,zero
  80f860:	003f5806 	br	80f5c4 <__gethex+0x9c>
  80f864:	9545c83a 	sub	r2,r18,r21
  80f868:	10bfffc4 	addi	r2,r2,-1
  80f86c:	00c001c4 	movi	r3,7
  80f870:	1880770e 	bge	r3,r2,80fa50 <__gethex+0x528>
  80f874:	000b883a 	mov	r5,zero
  80f878:	1005d07a 	srai	r2,r2,1
  80f87c:	29400044 	addi	r5,r5,1
  80f880:	18bffd16 	blt	r3,r2,80f878 <__gethex+0x350>
  80f884:	d9000117 	ldw	r4,4(sp)
  80f888:	080bd780 	call	80bd78 <_Balloc>
  80f88c:	1029883a 	mov	r20,r2
  80f890:	15800504 	addi	r22,r2,20
  80f894:	ac80562e 	bgeu	r21,r18,80f9f0 <__gethex+0x4c8>
  80f898:	900b883a 	mov	r5,r18
  80f89c:	b011883a 	mov	r8,r22
  80f8a0:	000f883a 	mov	r7,zero
  80f8a4:	0009883a 	mov	r4,zero
  80f8a8:	02400b84 	movi	r9,46
  80f8ac:	02800804 	movi	r10,32
  80f8b0:	297fffc4 	addi	r5,r5,-1
  80f8b4:	28c00003 	ldbu	r3,0(r5)
  80f8b8:	1a400826 	beq	r3,r9,80f8dc <__gethex+0x3b4>
  80f8bc:	380d883a 	mov	r6,r7
  80f8c0:	3a802a26 	beq	r7,r10,80f96c <__gethex+0x444>
  80f8c4:	39c00104 	addi	r7,r7,4
  80f8c8:	1cc7883a 	add	r3,r3,r19
  80f8cc:	18800003 	ldbu	r2,0(r3)
  80f8d0:	108003cc 	andi	r2,r2,15
  80f8d4:	1184983a 	sll	r2,r2,r6
  80f8d8:	2088b03a 	or	r4,r4,r2
  80f8dc:	a97ff436 	bltu	r21,r5,80f8b0 <__gethex+0x388>
  80f8e0:	40800104 	addi	r2,r8,4
  80f8e4:	1585c83a 	sub	r2,r2,r22
  80f8e8:	1021d0ba 	srai	r16,r2,2
  80f8ec:	41000015 	stw	r4,0(r8)
  80f8f0:	a4000415 	stw	r16,16(r20)
  80f8f4:	080b8200 	call	80b820 <__hi0bits>
  80f8f8:	d9000217 	ldw	r4,8(sp)
  80f8fc:	8006917a 	slli	r3,r16,5
  80f900:	24c00017 	ldw	r19,0(r4)
  80f904:	1885c83a 	sub	r2,r3,r2
  80f908:	98801f16 	blt	r19,r2,80f988 <__gethex+0x460>
  80f90c:	14c00c16 	blt	r2,r19,80f940 <__gethex+0x418>
  80f910:	002b883a 	mov	r21,zero
  80f914:	d9000217 	ldw	r4,8(sp)
  80f918:	d8c00017 	ldw	r3,0(sp)
  80f91c:	20800217 	ldw	r2,8(r4)
  80f920:	10c0360e 	bge	r2,r3,80f9fc <__gethex+0x4d4>
  80f924:	d9000117 	ldw	r4,4(sp)
  80f928:	a00b883a 	mov	r5,r20
  80f92c:	048028c4 	movi	r18,163
  80f930:	080b7f80 	call	80b7f8 <_Bfree>
  80f934:	d9000f17 	ldw	r4,60(sp)
  80f938:	20000015 	stw	zero,0(r4)
  80f93c:	003f3e06 	br	80f638 <__gethex+0x110>
  80f940:	d9000117 	ldw	r4,4(sp)
  80f944:	98a1c83a 	sub	r16,r19,r2
  80f948:	a00b883a 	mov	r5,r20
  80f94c:	800d883a 	mov	r6,r16
  80f950:	080c13c0 	call	80c13c <__lshift>
  80f954:	d8c00017 	ldw	r3,0(sp)
  80f958:	1029883a 	mov	r20,r2
  80f95c:	15800504 	addi	r22,r2,20
  80f960:	1c07c83a 	sub	r3,r3,r16
  80f964:	d8c00015 	stw	r3,0(sp)
  80f968:	003fe906 	br	80f910 <__gethex+0x3e8>
  80f96c:	41000015 	stw	r4,0(r8)
  80f970:	28c00003 	ldbu	r3,0(r5)
  80f974:	01c00104 	movi	r7,4
  80f978:	000d883a 	mov	r6,zero
  80f97c:	41d1883a 	add	r8,r8,r7
  80f980:	0009883a 	mov	r4,zero
  80f984:	003fd006 	br	80f8c8 <__gethex+0x3a0>
  80f988:	14e1c83a 	sub	r16,r2,r19
  80f98c:	a009883a 	mov	r4,r20
  80f990:	800b883a 	mov	r5,r16
  80f994:	080bcf00 	call	80bcf0 <__any_on>
  80f998:	1000081e 	bne	r2,zero,80f9bc <__gethex+0x494>
  80f99c:	002b883a 	mov	r21,zero
  80f9a0:	a009883a 	mov	r4,r20
  80f9a4:	800b883a 	mov	r5,r16
  80f9a8:	080f4780 	call	80f478 <rshift>
  80f9ac:	d8800017 	ldw	r2,0(sp)
  80f9b0:	1405883a 	add	r2,r2,r16
  80f9b4:	d8800015 	stw	r2,0(sp)
  80f9b8:	003fd606 	br	80f914 <__gethex+0x3ec>
  80f9bc:	817fffc4 	addi	r5,r16,-1
  80f9c0:	2805d17a 	srai	r2,r5,5
  80f9c4:	290007cc 	andi	r4,r5,31
  80f9c8:	01800044 	movi	r6,1
  80f9cc:	1085883a 	add	r2,r2,r2
  80f9d0:	1085883a 	add	r2,r2,r2
  80f9d4:	1585883a 	add	r2,r2,r22
  80f9d8:	3108983a 	sll	r4,r6,r4
  80f9dc:	10c00017 	ldw	r3,0(r2)
  80f9e0:	20c8703a 	and	r4,r4,r3
  80f9e4:	20001e1e 	bne	r4,zero,80fa60 <__gethex+0x538>
  80f9e8:	302b883a 	mov	r21,r6
  80f9ec:	003fec06 	br	80f9a0 <__gethex+0x478>
  80f9f0:	b011883a 	mov	r8,r22
  80f9f4:	0009883a 	mov	r4,zero
  80f9f8:	003fb906 	br	80f8e0 <__gethex+0x3b8>
  80f9fc:	d8800217 	ldw	r2,8(sp)
  80fa00:	d8c00017 	ldw	r3,0(sp)
  80fa04:	11000117 	ldw	r4,4(r2)
  80fa08:	19001c16 	blt	r3,r4,80fa7c <__gethex+0x554>
  80fa0c:	04800044 	movi	r18,1
  80fa10:	a8000926 	beq	r21,zero,80fa38 <__gethex+0x510>
  80fa14:	d8c00217 	ldw	r3,8(sp)
  80fa18:	00800084 	movi	r2,2
  80fa1c:	19000317 	ldw	r4,12(r3)
  80fa20:	20809826 	beq	r4,r2,80fc84 <__gethex+0x75c>
  80fa24:	008000c4 	movi	r2,3
  80fa28:	20805b26 	beq	r4,r2,80fb98 <__gethex+0x670>
  80fa2c:	00800044 	movi	r2,1
  80fa30:	20804326 	beq	r4,r2,80fb40 <__gethex+0x618>
  80fa34:	94800414 	ori	r18,r18,16
  80fa38:	d9000f17 	ldw	r4,60(sp)
  80fa3c:	d8800017 	ldw	r2,0(sp)
  80fa40:	d8c00317 	ldw	r3,12(sp)
  80fa44:	25000015 	stw	r20,0(r4)
  80fa48:	18800015 	stw	r2,0(r3)
  80fa4c:	003efa06 	br	80f638 <__gethex+0x110>
  80fa50:	000b883a 	mov	r5,zero
  80fa54:	003f8b06 	br	80f884 <__gethex+0x35c>
  80fa58:	d8000015 	stw	zero,0(sp)
  80fa5c:	003eea06 	br	80f608 <__gethex+0xe0>
  80fa60:	3140180e 	bge	r6,r5,80fac4 <__gethex+0x59c>
  80fa64:	a009883a 	mov	r4,r20
  80fa68:	817fff84 	addi	r5,r16,-2
  80fa6c:	080bcf00 	call	80bcf0 <__any_on>
  80fa70:	10001426 	beq	r2,zero,80fac4 <__gethex+0x59c>
  80fa74:	054000c4 	movi	r21,3
  80fa78:	003fc906 	br	80f9a0 <__gethex+0x478>
  80fa7c:	d8800017 	ldw	r2,0(sp)
  80fa80:	20a3c83a 	sub	r17,r4,r2
  80fa84:	8cc01116 	blt	r17,r19,80facc <__gethex+0x5a4>
  80fa88:	d8800217 	ldw	r2,8(sp)
  80fa8c:	10c00317 	ldw	r3,12(r2)
  80fa90:	00800084 	movi	r2,2
  80fa94:	18809426 	beq	r3,r2,80fce8 <__gethex+0x7c0>
  80fa98:	008000c4 	movi	r2,3
  80fa9c:	18808f26 	beq	r3,r2,80fcdc <__gethex+0x7b4>
  80faa0:	00800044 	movi	r2,1
  80faa4:	18807c26 	beq	r3,r2,80fc98 <__gethex+0x770>
  80faa8:	d9000117 	ldw	r4,4(sp)
  80faac:	a00b883a 	mov	r5,r20
  80fab0:	04801404 	movi	r18,80
  80fab4:	080b7f80 	call	80b7f8 <_Bfree>
  80fab8:	d9000f17 	ldw	r4,60(sp)
  80fabc:	20000015 	stw	zero,0(r4)
  80fac0:	003edd06 	br	80f638 <__gethex+0x110>
  80fac4:	05400084 	movi	r21,2
  80fac8:	003fb506 	br	80f9a0 <__gethex+0x478>
  80facc:	8c3fffc4 	addi	r16,r17,-1
  80fad0:	a8001526 	beq	r21,zero,80fb28 <__gethex+0x600>
  80fad4:	05400044 	movi	r21,1
  80fad8:	8005d17a 	srai	r2,r16,5
  80fadc:	814007cc 	andi	r5,r16,31
  80fae0:	00c00044 	movi	r3,1
  80fae4:	1085883a 	add	r2,r2,r2
  80fae8:	1085883a 	add	r2,r2,r2
  80faec:	1585883a 	add	r2,r2,r22
  80faf0:	1946983a 	sll	r3,r3,r5
  80faf4:	11000017 	ldw	r4,0(r2)
  80faf8:	1906703a 	and	r3,r3,r4
  80fafc:	18000126 	beq	r3,zero,80fb04 <__gethex+0x5dc>
  80fb00:	ad400094 	ori	r21,r21,2
  80fb04:	880b883a 	mov	r5,r17
  80fb08:	a009883a 	mov	r4,r20
  80fb0c:	080f4780 	call	80f478 <rshift>
  80fb10:	d8800217 	ldw	r2,8(sp)
  80fb14:	9c67c83a 	sub	r19,r19,r17
  80fb18:	04800084 	movi	r18,2
  80fb1c:	10800117 	ldw	r2,4(r2)
  80fb20:	d8800015 	stw	r2,0(sp)
  80fb24:	003fba06 	br	80fa10 <__gethex+0x4e8>
  80fb28:	043feb0e 	bge	zero,r16,80fad8 <__gethex+0x5b0>
  80fb2c:	a009883a 	mov	r4,r20
  80fb30:	800b883a 	mov	r5,r16
  80fb34:	080bcf00 	call	80bcf0 <__any_on>
  80fb38:	102b883a 	mov	r21,r2
  80fb3c:	003fe606 	br	80fad8 <__gethex+0x5b0>
  80fb40:	a880008c 	andi	r2,r21,2
  80fb44:	103fbb26 	beq	r2,zero,80fa34 <__gethex+0x50c>
  80fb48:	b0800017 	ldw	r2,0(r22)
  80fb4c:	a884b03a 	or	r2,r21,r2
  80fb50:	1104703a 	and	r2,r2,r4
  80fb54:	103fb726 	beq	r2,zero,80fa34 <__gethex+0x50c>
  80fb58:	a4000417 	ldw	r16,16(r20)
  80fb5c:	b007883a 	mov	r3,r22
  80fb60:	017fffc4 	movi	r5,-1
  80fb64:	8405883a 	add	r2,r16,r16
  80fb68:	10ab883a 	add	r21,r2,r2
  80fb6c:	802f883a 	mov	r23,r16
  80fb70:	b549883a 	add	r4,r22,r21
  80fb74:	00000306 	br	80fb84 <__gethex+0x65c>
  80fb78:	18000015 	stw	zero,0(r3)
  80fb7c:	18c00104 	addi	r3,r3,4
  80fb80:	1900082e 	bgeu	r3,r4,80fba4 <__gethex+0x67c>
  80fb84:	18800017 	ldw	r2,0(r3)
  80fb88:	117ffb26 	beq	r2,r5,80fb78 <__gethex+0x650>
  80fb8c:	10800044 	addi	r2,r2,1
  80fb90:	18800015 	stw	r2,0(r3)
  80fb94:	00001e06 	br	80fc10 <__gethex+0x6e8>
  80fb98:	d8801017 	ldw	r2,64(sp)
  80fb9c:	103fa526 	beq	r2,zero,80fa34 <__gethex+0x50c>
  80fba0:	003fed06 	br	80fb58 <__gethex+0x630>
  80fba4:	a0800217 	ldw	r2,8(r20)
  80fba8:	80801216 	blt	r16,r2,80fbf4 <__gethex+0x6cc>
  80fbac:	a1400117 	ldw	r5,4(r20)
  80fbb0:	d9000117 	ldw	r4,4(sp)
  80fbb4:	29400044 	addi	r5,r5,1
  80fbb8:	080bd780 	call	80bd78 <_Balloc>
  80fbbc:	a1800417 	ldw	r6,16(r20)
  80fbc0:	a1400304 	addi	r5,r20,12
  80fbc4:	11000304 	addi	r4,r2,12
  80fbc8:	318d883a 	add	r6,r6,r6
  80fbcc:	318d883a 	add	r6,r6,r6
  80fbd0:	31800204 	addi	r6,r6,8
  80fbd4:	1023883a 	mov	r17,r2
  80fbd8:	08050800 	call	805080 <memcpy>
  80fbdc:	d9000117 	ldw	r4,4(sp)
  80fbe0:	a00b883a 	mov	r5,r20
  80fbe4:	8d800504 	addi	r22,r17,20
  80fbe8:	080b7f80 	call	80b7f8 <_Bfree>
  80fbec:	8c000417 	ldw	r16,16(r17)
  80fbf0:	8829883a 	mov	r20,r17
  80fbf4:	8405883a 	add	r2,r16,r16
  80fbf8:	1085883a 	add	r2,r2,r2
  80fbfc:	1505883a 	add	r2,r2,r20
  80fc00:	84000044 	addi	r16,r16,1
  80fc04:	00c00044 	movi	r3,1
  80fc08:	10c00515 	stw	r3,20(r2)
  80fc0c:	a4000415 	stw	r16,16(r20)
  80fc10:	00800084 	movi	r2,2
  80fc14:	90801526 	beq	r18,r2,80fc6c <__gethex+0x744>
  80fc18:	bc000a16 	blt	r23,r16,80fc44 <__gethex+0x71c>
  80fc1c:	9c0007cc 	andi	r16,r19,31
  80fc20:	8000021e 	bne	r16,zero,80fc2c <__gethex+0x704>
  80fc24:	94800814 	ori	r18,r18,32
  80fc28:	003f8306 	br	80fa38 <__gethex+0x510>
  80fc2c:	b545883a 	add	r2,r22,r21
  80fc30:	113fff17 	ldw	r4,-4(r2)
  80fc34:	080b8200 	call	80b820 <__hi0bits>
  80fc38:	00c00804 	movi	r3,32
  80fc3c:	1c07c83a 	sub	r3,r3,r16
  80fc40:	10fff80e 	bge	r2,r3,80fc24 <__gethex+0x6fc>
  80fc44:	a009883a 	mov	r4,r20
  80fc48:	01400044 	movi	r5,1
  80fc4c:	080f4780 	call	80f478 <rshift>
  80fc50:	d9000217 	ldw	r4,8(sp)
  80fc54:	d8c00017 	ldw	r3,0(sp)
  80fc58:	20800217 	ldw	r2,8(r4)
  80fc5c:	18c00044 	addi	r3,r3,1
  80fc60:	d8c00015 	stw	r3,0(sp)
  80fc64:	10ff2f16 	blt	r2,r3,80f924 <__gethex+0x3fc>
  80fc68:	003fee06 	br	80fc24 <__gethex+0x6fc>
  80fc6c:	d8c00217 	ldw	r3,8(sp)
  80fc70:	18800017 	ldw	r2,0(r3)
  80fc74:	10bfffc4 	addi	r2,r2,-1
  80fc78:	98801e26 	beq	r19,r2,80fcf4 <__gethex+0x7cc>
  80fc7c:	04800884 	movi	r18,34
  80fc80:	003f6d06 	br	80fa38 <__gethex+0x510>
  80fc84:	d9001017 	ldw	r4,64(sp)
  80fc88:	00800044 	movi	r2,1
  80fc8c:	1105c83a 	sub	r2,r2,r4
  80fc90:	103f6826 	beq	r2,zero,80fa34 <__gethex+0x50c>
  80fc94:	003fb006 	br	80fb58 <__gethex+0x630>
  80fc98:	9c7f831e 	bne	r19,r17,80faa8 <__gethex+0x580>
  80fc9c:	1cc0060e 	bge	r3,r19,80fcb8 <__gethex+0x790>
  80fca0:	98cbc83a 	sub	r5,r19,r3
  80fca4:	a009883a 	mov	r4,r20
  80fca8:	080bcf00 	call	80bcf0 <__any_on>
  80fcac:	103f7e26 	beq	r2,zero,80faa8 <__gethex+0x580>
  80fcb0:	d8c00217 	ldw	r3,8(sp)
  80fcb4:	19000117 	ldw	r4,4(r3)
  80fcb8:	d8800317 	ldw	r2,12(sp)
  80fcbc:	d8c00f17 	ldw	r3,60(sp)
  80fcc0:	04000044 	movi	r16,1
  80fcc4:	11000015 	stw	r4,0(r2)
  80fcc8:	04801884 	movi	r18,98
  80fccc:	b4000015 	stw	r16,0(r22)
  80fcd0:	1d000015 	stw	r20,0(r3)
  80fcd4:	a4000415 	stw	r16,16(r20)
  80fcd8:	003e5706 	br	80f638 <__gethex+0x110>
  80fcdc:	d8801017 	ldw	r2,64(sp)
  80fce0:	103f7126 	beq	r2,zero,80faa8 <__gethex+0x580>
  80fce4:	003ff406 	br	80fcb8 <__gethex+0x790>
  80fce8:	d8c01017 	ldw	r3,64(sp)
  80fcec:	183ff226 	beq	r3,zero,80fcb8 <__gethex+0x790>
  80fcf0:	003f6d06 	br	80faa8 <__gethex+0x580>
  80fcf4:	9805d17a 	srai	r2,r19,5
  80fcf8:	994007cc 	andi	r5,r19,31
  80fcfc:	00c00044 	movi	r3,1
  80fd00:	1085883a 	add	r2,r2,r2
  80fd04:	1085883a 	add	r2,r2,r2
  80fd08:	1585883a 	add	r2,r2,r22
  80fd0c:	1946983a 	sll	r3,r3,r5
  80fd10:	11000017 	ldw	r4,0(r2)
  80fd14:	1906703a 	and	r3,r3,r4
  80fd18:	183fd826 	beq	r3,zero,80fc7c <__gethex+0x754>
  80fd1c:	04800844 	movi	r18,33
  80fd20:	003f4506 	br	80fa38 <__gethex+0x510>

0080fd24 <L_shift>:
  80fd24:	00800204 	movi	r2,8
  80fd28:	1185c83a 	sub	r2,r2,r6
  80fd2c:	1085883a 	add	r2,r2,r2
  80fd30:	21c00017 	ldw	r7,0(r4)
  80fd34:	1093883a 	add	r9,r2,r2
  80fd38:	00800804 	movi	r2,32
  80fd3c:	200d883a 	mov	r6,r4
  80fd40:	1251c83a 	sub	r8,r2,r9
  80fd44:	31800104 	addi	r6,r6,4
  80fd48:	3805883a 	mov	r2,r7
  80fd4c:	31c00017 	ldw	r7,0(r6)
  80fd50:	3a08983a 	sll	r4,r7,r8
  80fd54:	3a46d83a 	srl	r3,r7,r9
  80fd58:	1104b03a 	or	r2,r2,r4
  80fd5c:	180f883a 	mov	r7,r3
  80fd60:	30bfff15 	stw	r2,-4(r6)
  80fd64:	30c00015 	stw	r3,0(r6)
  80fd68:	317ff636 	bltu	r6,r5,80fd44 <L_shift+0x20>
  80fd6c:	f800283a 	ret

0080fd70 <__hexnan>:
  80fd70:	defff404 	addi	sp,sp,-48
  80fd74:	dd800815 	stw	r22,32(sp)
  80fd78:	058020b4 	movhi	r22,130
  80fd7c:	b5a32b04 	addi	r22,r22,-29524
  80fd80:	b0800c03 	ldbu	r2,48(r22)
  80fd84:	dcc00515 	stw	r19,20(sp)
  80fd88:	dc000215 	stw	r16,8(sp)
  80fd8c:	dfc00b15 	stw	ra,44(sp)
  80fd90:	df000a15 	stw	fp,40(sp)
  80fd94:	ddc00915 	stw	r23,36(sp)
  80fd98:	dd400715 	stw	r21,28(sp)
  80fd9c:	dd000615 	stw	r20,24(sp)
  80fda0:	dc800415 	stw	r18,16(sp)
  80fda4:	dc400315 	stw	r17,12(sp)
  80fda8:	d9000115 	stw	r4,4(sp)
  80fdac:	2821883a 	mov	r16,r5
  80fdb0:	3027883a 	mov	r19,r6
  80fdb4:	10007426 	beq	r2,zero,80ff88 <__hexnan+0x218>
  80fdb8:	80c00017 	ldw	r3,0(r16)
  80fdbc:	1805d17a 	srai	r2,r3,5
  80fdc0:	18c007cc 	andi	r3,r3,31
  80fdc4:	1839003a 	cmpeq	fp,r3,zero
  80fdc8:	1085883a 	add	r2,r2,r2
  80fdcc:	1085883a 	add	r2,r2,r2
  80fdd0:	d8c00015 	stw	r3,0(sp)
  80fdd4:	14c5883a 	add	r2,r2,r19
  80fdd8:	e000011e 	bne	fp,zero,80fde0 <__hexnan+0x70>
  80fddc:	10800104 	addi	r2,r2,4
  80fde0:	d8c00117 	ldw	r3,4(sp)
  80fde4:	153fff04 	addi	r20,r2,-4
  80fde8:	a021883a 	mov	r16,r20
  80fdec:	1c400017 	ldw	r17,0(r3)
  80fdf0:	a02b883a 	mov	r21,r20
  80fdf4:	0025883a 	mov	r18,zero
  80fdf8:	002f883a 	mov	r23,zero
  80fdfc:	000d883a 	mov	r6,zero
  80fe00:	103fff15 	stw	zero,-4(r2)
  80fe04:	8c400044 	addi	r17,r17,1
  80fe08:	89000003 	ldbu	r4,0(r17)
  80fe0c:	20000e26 	beq	r4,zero,80fe48 <__hexnan+0xd8>
  80fe10:	2585883a 	add	r2,r4,r22
  80fe14:	10c00003 	ldbu	r3,0(r2)
  80fe18:	18002e1e 	bne	r3,zero,80fed4 <__hexnan+0x164>
  80fe1c:	00800804 	movi	r2,32
  80fe20:	11005536 	bltu	r2,r4,80ff78 <__hexnan+0x208>
  80fe24:	bcbff70e 	bge	r23,r18,80fe04 <__hexnan+0x94>
  80fe28:	8540022e 	bgeu	r16,r21,80fe34 <__hexnan+0xc4>
  80fe2c:	008001c4 	movi	r2,7
  80fe30:	11803c0e 	bge	r2,r6,80ff24 <__hexnan+0x1b4>
  80fe34:	9c003536 	bltu	r19,r16,80ff0c <__hexnan+0x19c>
  80fe38:	8c400044 	addi	r17,r17,1
  80fe3c:	89000003 	ldbu	r4,0(r17)
  80fe40:	01800204 	movi	r6,8
  80fe44:	203ff21e 	bne	r4,zero,80fe10 <__hexnan+0xa0>
  80fe48:	90004d26 	beq	r18,zero,80ff80 <__hexnan+0x210>
  80fe4c:	85404336 	bltu	r16,r21,80ff5c <__hexnan+0x1ec>
  80fe50:	9c00382e 	bgeu	r19,r16,80ff34 <__hexnan+0x1c4>
  80fe54:	9807883a 	mov	r3,r19
  80fe58:	80800017 	ldw	r2,0(r16)
  80fe5c:	84000104 	addi	r16,r16,4
  80fe60:	18800015 	stw	r2,0(r3)
  80fe64:	18c00104 	addi	r3,r3,4
  80fe68:	a43ffb2e 	bgeu	r20,r16,80fe58 <__hexnan+0xe8>
  80fe6c:	18000015 	stw	zero,0(r3)
  80fe70:	18c00104 	addi	r3,r3,4
  80fe74:	a0fffd2e 	bgeu	r20,r3,80fe6c <__hexnan+0xfc>
  80fe78:	a0800017 	ldw	r2,0(r20)
  80fe7c:	1000071e 	bne	r2,zero,80fe9c <__hexnan+0x12c>
  80fe80:	9d004326 	beq	r19,r20,80ff90 <__hexnan+0x220>
  80fe84:	a007883a 	mov	r3,r20
  80fe88:	00000106 	br	80fe90 <__hexnan+0x120>
  80fe8c:	98c04026 	beq	r19,r3,80ff90 <__hexnan+0x220>
  80fe90:	18ffff04 	addi	r3,r3,-4
  80fe94:	18800017 	ldw	r2,0(r3)
  80fe98:	103ffc26 	beq	r2,zero,80fe8c <__hexnan+0x11c>
  80fe9c:	00c00144 	movi	r3,5
  80fea0:	1805883a 	mov	r2,r3
  80fea4:	dfc00b17 	ldw	ra,44(sp)
  80fea8:	df000a17 	ldw	fp,40(sp)
  80feac:	ddc00917 	ldw	r23,36(sp)
  80feb0:	dd800817 	ldw	r22,32(sp)
  80feb4:	dd400717 	ldw	r21,28(sp)
  80feb8:	dd000617 	ldw	r20,24(sp)
  80febc:	dcc00517 	ldw	r19,20(sp)
  80fec0:	dc800417 	ldw	r18,16(sp)
  80fec4:	dc400317 	ldw	r17,12(sp)
  80fec8:	dc000217 	ldw	r16,8(sp)
  80fecc:	dec00c04 	addi	sp,sp,48
  80fed0:	f800283a 	ret
  80fed4:	31800044 	addi	r6,r6,1
  80fed8:	00800204 	movi	r2,8
  80fedc:	94800044 	addi	r18,r18,1
  80fee0:	1180040e 	bge	r2,r6,80fef4 <__hexnan+0x184>
  80fee4:	9c3fc72e 	bgeu	r19,r16,80fe04 <__hexnan+0x94>
  80fee8:	843fff04 	addi	r16,r16,-4
  80feec:	80000015 	stw	zero,0(r16)
  80fef0:	01800044 	movi	r6,1
  80fef4:	80800017 	ldw	r2,0(r16)
  80fef8:	18c003cc 	andi	r3,r3,15
  80fefc:	1004913a 	slli	r2,r2,4
  80ff00:	10c4b03a 	or	r2,r2,r3
  80ff04:	80800015 	stw	r2,0(r16)
  80ff08:	003fbe06 	br	80fe04 <__hexnan+0x94>
  80ff0c:	843fff04 	addi	r16,r16,-4
  80ff10:	802b883a 	mov	r21,r16
  80ff14:	902f883a 	mov	r23,r18
  80ff18:	000d883a 	mov	r6,zero
  80ff1c:	80000015 	stw	zero,0(r16)
  80ff20:	003fb806 	br	80fe04 <__hexnan+0x94>
  80ff24:	8009883a 	mov	r4,r16
  80ff28:	a80b883a 	mov	r5,r21
  80ff2c:	080fd240 	call	80fd24 <L_shift>
  80ff30:	003fc006 	br	80fe34 <__hexnan+0xc4>
  80ff34:	e03fd01e 	bne	fp,zero,80fe78 <__hexnan+0x108>
  80ff38:	d8c00017 	ldw	r3,0(sp)
  80ff3c:	00800804 	movi	r2,32
  80ff40:	10c5c83a 	sub	r2,r2,r3
  80ff44:	00ffffc4 	movi	r3,-1
  80ff48:	1886d83a 	srl	r3,r3,r2
  80ff4c:	a0800017 	ldw	r2,0(r20)
  80ff50:	10c4703a 	and	r2,r2,r3
  80ff54:	a0800015 	stw	r2,0(r20)
  80ff58:	003fc806 	br	80fe7c <__hexnan+0x10c>
  80ff5c:	008001c4 	movi	r2,7
  80ff60:	11bfbb16 	blt	r2,r6,80fe50 <__hexnan+0xe0>
  80ff64:	a80b883a 	mov	r5,r21
  80ff68:	8009883a 	mov	r4,r16
  80ff6c:	080fd240 	call	80fd24 <L_shift>
  80ff70:	9c3ff02e 	bgeu	r19,r16,80ff34 <__hexnan+0x1c4>
  80ff74:	003fb706 	br	80fe54 <__hexnan+0xe4>
  80ff78:	00800a44 	movi	r2,41
  80ff7c:	20800826 	beq	r4,r2,80ffa0 <__hexnan+0x230>
  80ff80:	00c00104 	movi	r3,4
  80ff84:	003fc606 	br	80fea0 <__hexnan+0x130>
  80ff88:	080f4100 	call	80f410 <__hexdig_init>
  80ff8c:	003f8a06 	br	80fdb8 <__hexnan+0x48>
  80ff90:	00800044 	movi	r2,1
  80ff94:	00c00144 	movi	r3,5
  80ff98:	98800015 	stw	r2,0(r19)
  80ff9c:	003fc006 	br	80fea0 <__hexnan+0x130>
  80ffa0:	903ff726 	beq	r18,zero,80ff80 <__hexnan+0x210>
  80ffa4:	d8c00117 	ldw	r3,4(sp)
  80ffa8:	88800044 	addi	r2,r17,1
  80ffac:	18800015 	stw	r2,0(r3)
  80ffb0:	857fa72e 	bgeu	r16,r21,80fe50 <__hexnan+0xe0>
  80ffb4:	003fe906 	br	80ff5c <__hexnan+0x1ec>

0080ffb8 <__muldi3>:
  80ffb8:	defff204 	addi	sp,sp,-56
  80ffbc:	df000c15 	stw	fp,48(sp)
  80ffc0:	3038d43a 	srli	fp,r6,16
  80ffc4:	dd000815 	stw	r20,32(sp)
  80ffc8:	dc400515 	stw	r17,20(sp)
  80ffcc:	2028d43a 	srli	r20,r4,16
  80ffd0:	247fffcc 	andi	r17,r4,65535
  80ffd4:	dc000415 	stw	r16,16(sp)
  80ffd8:	343fffcc 	andi	r16,r6,65535
  80ffdc:	dcc00715 	stw	r19,28(sp)
  80ffe0:	d9000015 	stw	r4,0(sp)
  80ffe4:	2827883a 	mov	r19,r5
  80ffe8:	8809883a 	mov	r4,r17
  80ffec:	d9400115 	stw	r5,4(sp)
  80fff0:	800b883a 	mov	r5,r16
  80fff4:	d9800215 	stw	r6,8(sp)
  80fff8:	dfc00d15 	stw	ra,52(sp)
  80fffc:	d9c00315 	stw	r7,12(sp)
  810000:	dd800a15 	stw	r22,40(sp)
  810004:	dd400915 	stw	r21,36(sp)
  810008:	302d883a 	mov	r22,r6
  81000c:	ddc00b15 	stw	r23,44(sp)
  810010:	dc800615 	stw	r18,24(sp)
  810014:	08027a80 	call	8027a8 <__mulsi3>
  810018:	8809883a 	mov	r4,r17
  81001c:	e00b883a 	mov	r5,fp
  810020:	102b883a 	mov	r21,r2
  810024:	08027a80 	call	8027a8 <__mulsi3>
  810028:	800b883a 	mov	r5,r16
  81002c:	a009883a 	mov	r4,r20
  810030:	1023883a 	mov	r17,r2
  810034:	08027a80 	call	8027a8 <__mulsi3>
  810038:	a009883a 	mov	r4,r20
  81003c:	e00b883a 	mov	r5,fp
  810040:	1021883a 	mov	r16,r2
  810044:	08027a80 	call	8027a8 <__mulsi3>
  810048:	a8ffffcc 	andi	r3,r21,65535
  81004c:	a82ad43a 	srli	r21,r21,16
  810050:	8c23883a 	add	r17,r17,r16
  810054:	1011883a 	mov	r8,r2
  810058:	ac6b883a 	add	r21,r21,r17
  81005c:	a804943a 	slli	r2,r21,16
  810060:	b009883a 	mov	r4,r22
  810064:	980b883a 	mov	r5,r19
  810068:	10c7883a 	add	r3,r2,r3
  81006c:	a812d43a 	srli	r9,r21,16
  810070:	180d883a 	mov	r6,r3
  810074:	ac00022e 	bgeu	r21,r16,810080 <__muldi3+0xc8>
  810078:	00800074 	movhi	r2,1
  81007c:	4091883a 	add	r8,r8,r2
  810080:	4267883a 	add	r19,r8,r9
  810084:	302d883a 	mov	r22,r6
  810088:	08027a80 	call	8027a8 <__mulsi3>
  81008c:	d9400317 	ldw	r5,12(sp)
  810090:	d9000017 	ldw	r4,0(sp)
  810094:	1023883a 	mov	r17,r2
  810098:	08027a80 	call	8027a8 <__mulsi3>
  81009c:	14cb883a 	add	r5,r2,r19
  8100a0:	894b883a 	add	r5,r17,r5
  8100a4:	b005883a 	mov	r2,r22
  8100a8:	2807883a 	mov	r3,r5
  8100ac:	dfc00d17 	ldw	ra,52(sp)
  8100b0:	df000c17 	ldw	fp,48(sp)
  8100b4:	ddc00b17 	ldw	r23,44(sp)
  8100b8:	dd800a17 	ldw	r22,40(sp)
  8100bc:	dd400917 	ldw	r21,36(sp)
  8100c0:	dd000817 	ldw	r20,32(sp)
  8100c4:	dcc00717 	ldw	r19,28(sp)
  8100c8:	dc800617 	ldw	r18,24(sp)
  8100cc:	dc400517 	ldw	r17,20(sp)
  8100d0:	dc000417 	ldw	r16,16(sp)
  8100d4:	dec00e04 	addi	sp,sp,56
  8100d8:	f800283a 	ret

008100dc <__fixunsdfsi>:
  8100dc:	defffb04 	addi	sp,sp,-20
  8100e0:	dc400115 	stw	r17,4(sp)
  8100e4:	dc000015 	stw	r16,0(sp)
  8100e8:	04507834 	movhi	r17,16864
  8100ec:	0021883a 	mov	r16,zero
  8100f0:	800d883a 	mov	r6,r16
  8100f4:	880f883a 	mov	r7,r17
  8100f8:	dcc00315 	stw	r19,12(sp)
  8100fc:	dc800215 	stw	r18,8(sp)
  810100:	2827883a 	mov	r19,r5
  810104:	2025883a 	mov	r18,r4
  810108:	dfc00415 	stw	ra,16(sp)
  81010c:	08115100 	call	811510 <__gedf2>
  810110:	000d883a 	mov	r6,zero
  810114:	880f883a 	mov	r7,r17
  810118:	980b883a 	mov	r5,r19
  81011c:	9009883a 	mov	r4,r18
  810120:	10000d16 	blt	r2,zero,810158 <__fixunsdfsi+0x7c>
  810124:	08022c80 	call	8022c8 <__subdf3>
  810128:	180b883a 	mov	r5,r3
  81012c:	1009883a 	mov	r4,r2
  810130:	08117a00 	call	8117a0 <__fixdfsi>
  810134:	00e00034 	movhi	r3,32768
  810138:	10c5883a 	add	r2,r2,r3
  81013c:	dfc00417 	ldw	ra,16(sp)
  810140:	dcc00317 	ldw	r19,12(sp)
  810144:	dc800217 	ldw	r18,8(sp)
  810148:	dc400117 	ldw	r17,4(sp)
  81014c:	dc000017 	ldw	r16,0(sp)
  810150:	dec00504 	addi	sp,sp,20
  810154:	f800283a 	ret
  810158:	980b883a 	mov	r5,r19
  81015c:	9009883a 	mov	r4,r18
  810160:	08117a00 	call	8117a0 <__fixdfsi>
  810164:	dfc00417 	ldw	ra,16(sp)
  810168:	dcc00317 	ldw	r19,12(sp)
  81016c:	dc800217 	ldw	r18,8(sp)
  810170:	dc400117 	ldw	r17,4(sp)
  810174:	dc000017 	ldw	r16,0(sp)
  810178:	dec00504 	addi	sp,sp,20
  81017c:	f800283a 	ret

00810180 <__udivdi3>:
  810180:	defff104 	addi	sp,sp,-60
  810184:	0015883a 	mov	r10,zero
  810188:	2005883a 	mov	r2,r4
  81018c:	3011883a 	mov	r8,r6
  810190:	df000d15 	stw	fp,52(sp)
  810194:	dd400a15 	stw	r21,40(sp)
  810198:	dcc00815 	stw	r19,32(sp)
  81019c:	dfc00e15 	stw	ra,56(sp)
  8101a0:	ddc00c15 	stw	r23,48(sp)
  8101a4:	dd800b15 	stw	r22,44(sp)
  8101a8:	dd000915 	stw	r20,36(sp)
  8101ac:	dc800715 	stw	r18,28(sp)
  8101b0:	dc400615 	stw	r17,24(sp)
  8101b4:	dc000515 	stw	r16,20(sp)
  8101b8:	da800315 	stw	r10,12(sp)
  8101bc:	4027883a 	mov	r19,r8
  8101c0:	1039883a 	mov	fp,r2
  8101c4:	282b883a 	mov	r21,r5
  8101c8:	da800415 	stw	r10,16(sp)
  8101cc:	3800401e 	bne	r7,zero,8102d0 <__udivdi3+0x150>
  8101d0:	2a006536 	bltu	r5,r8,810368 <__udivdi3+0x1e8>
  8101d4:	4000b526 	beq	r8,zero,8104ac <__udivdi3+0x32c>
  8101d8:	00bfffd4 	movui	r2,65535
  8101dc:	14c0ad36 	bltu	r2,r19,810494 <__udivdi3+0x314>
  8101e0:	00803fc4 	movi	r2,255
  8101e4:	14c15e36 	bltu	r2,r19,810760 <__udivdi3+0x5e0>
  8101e8:	000b883a 	mov	r5,zero
  8101ec:	0005883a 	mov	r2,zero
  8101f0:	9884d83a 	srl	r2,r19,r2
  8101f4:	01002074 	movhi	r4,129
  8101f8:	2113f704 	addi	r4,r4,20444
  8101fc:	01800804 	movi	r6,32
  810200:	1105883a 	add	r2,r2,r4
  810204:	10c00003 	ldbu	r3,0(r2)
  810208:	28c7883a 	add	r3,r5,r3
  81020c:	30e9c83a 	sub	r20,r6,r3
  810210:	a0010a1e 	bne	r20,zero,81063c <__udivdi3+0x4bc>
  810214:	982ed43a 	srli	r23,r19,16
  810218:	acebc83a 	sub	r21,r21,r19
  81021c:	9dbfffcc 	andi	r22,r19,65535
  810220:	05000044 	movi	r20,1
  810224:	a809883a 	mov	r4,r21
  810228:	b80b883a 	mov	r5,r23
  81022c:	0811a280 	call	811a28 <__udivsi3>
  810230:	100b883a 	mov	r5,r2
  810234:	b009883a 	mov	r4,r22
  810238:	1021883a 	mov	r16,r2
  81023c:	08027a80 	call	8027a8 <__mulsi3>
  810240:	a809883a 	mov	r4,r21
  810244:	b80b883a 	mov	r5,r23
  810248:	1023883a 	mov	r17,r2
  81024c:	0811a300 	call	811a30 <__umodsi3>
  810250:	1004943a 	slli	r2,r2,16
  810254:	e006d43a 	srli	r3,fp,16
  810258:	10c4b03a 	or	r2,r2,r3
  81025c:	1440042e 	bgeu	r2,r17,810270 <__udivdi3+0xf0>
  810260:	14c5883a 	add	r2,r2,r19
  810264:	843fffc4 	addi	r16,r16,-1
  810268:	14c00136 	bltu	r2,r19,810270 <__udivdi3+0xf0>
  81026c:	14415c36 	bltu	r2,r17,8107e0 <__udivdi3+0x660>
  810270:	1463c83a 	sub	r17,r2,r17
  810274:	8809883a 	mov	r4,r17
  810278:	b80b883a 	mov	r5,r23
  81027c:	0811a280 	call	811a28 <__udivsi3>
  810280:	100b883a 	mov	r5,r2
  810284:	b009883a 	mov	r4,r22
  810288:	102b883a 	mov	r21,r2
  81028c:	08027a80 	call	8027a8 <__mulsi3>
  810290:	8809883a 	mov	r4,r17
  810294:	b80b883a 	mov	r5,r23
  810298:	1025883a 	mov	r18,r2
  81029c:	0811a300 	call	811a30 <__umodsi3>
  8102a0:	1004943a 	slli	r2,r2,16
  8102a4:	e0ffffcc 	andi	r3,fp,65535
  8102a8:	10c4b03a 	or	r2,r2,r3
  8102ac:	1480042e 	bgeu	r2,r18,8102c0 <__udivdi3+0x140>
  8102b0:	9885883a 	add	r2,r19,r2
  8102b4:	ad7fffc4 	addi	r21,r21,-1
  8102b8:	14c00136 	bltu	r2,r19,8102c0 <__udivdi3+0x140>
  8102bc:	14813c36 	bltu	r2,r18,8107b0 <__udivdi3+0x630>
  8102c0:	8004943a 	slli	r2,r16,16
  8102c4:	a009883a 	mov	r4,r20
  8102c8:	a884b03a 	or	r2,r21,r2
  8102cc:	00001506 	br	810324 <__udivdi3+0x1a4>
  8102d0:	380d883a 	mov	r6,r7
  8102d4:	29c06c36 	bltu	r5,r7,810488 <__udivdi3+0x308>
  8102d8:	00bfffd4 	movui	r2,65535
  8102dc:	11c06436 	bltu	r2,r7,810470 <__udivdi3+0x2f0>
  8102e0:	00803fc4 	movi	r2,255
  8102e4:	11c11836 	bltu	r2,r7,810748 <__udivdi3+0x5c8>
  8102e8:	000b883a 	mov	r5,zero
  8102ec:	0005883a 	mov	r2,zero
  8102f0:	3084d83a 	srl	r2,r6,r2
  8102f4:	01002074 	movhi	r4,129
  8102f8:	2113f704 	addi	r4,r4,20444
  8102fc:	01c00804 	movi	r7,32
  810300:	1105883a 	add	r2,r2,r4
  810304:	10c00003 	ldbu	r3,0(r2)
  810308:	28c7883a 	add	r3,r5,r3
  81030c:	38edc83a 	sub	r22,r7,r3
  810310:	b000731e 	bne	r22,zero,8104e0 <__udivdi3+0x360>
  810314:	35400136 	bltu	r6,r21,81031c <__udivdi3+0x19c>
  810318:	e4c05b36 	bltu	fp,r19,810488 <__udivdi3+0x308>
  81031c:	00800044 	movi	r2,1
  810320:	0009883a 	mov	r4,zero
  810324:	d8800315 	stw	r2,12(sp)
  810328:	d9400317 	ldw	r5,12(sp)
  81032c:	2007883a 	mov	r3,r4
  810330:	d9000415 	stw	r4,16(sp)
  810334:	2805883a 	mov	r2,r5
  810338:	dfc00e17 	ldw	ra,56(sp)
  81033c:	df000d17 	ldw	fp,52(sp)
  810340:	ddc00c17 	ldw	r23,48(sp)
  810344:	dd800b17 	ldw	r22,44(sp)
  810348:	dd400a17 	ldw	r21,40(sp)
  81034c:	dd000917 	ldw	r20,36(sp)
  810350:	dcc00817 	ldw	r19,32(sp)
  810354:	dc800717 	ldw	r18,28(sp)
  810358:	dc400617 	ldw	r17,24(sp)
  81035c:	dc000517 	ldw	r16,20(sp)
  810360:	dec00f04 	addi	sp,sp,60
  810364:	f800283a 	ret
  810368:	00bfffd4 	movui	r2,65535
  81036c:	12005636 	bltu	r2,r8,8104c8 <__udivdi3+0x348>
  810370:	00803fc4 	movi	r2,255
  810374:	12010036 	bltu	r2,r8,810778 <__udivdi3+0x5f8>
  810378:	000b883a 	mov	r5,zero
  81037c:	0005883a 	mov	r2,zero
  810380:	9884d83a 	srl	r2,r19,r2
  810384:	01002074 	movhi	r4,129
  810388:	2113f704 	addi	r4,r4,20444
  81038c:	01800804 	movi	r6,32
  810390:	1105883a 	add	r2,r2,r4
  810394:	10c00003 	ldbu	r3,0(r2)
  810398:	28c7883a 	add	r3,r5,r3
  81039c:	30cbc83a 	sub	r5,r6,r3
  8103a0:	28000626 	beq	r5,zero,8103bc <__udivdi3+0x23c>
  8103a4:	3145c83a 	sub	r2,r6,r5
  8103a8:	e084d83a 	srl	r2,fp,r2
  8103ac:	a946983a 	sll	r3,r21,r5
  8103b0:	e178983a 	sll	fp,fp,r5
  8103b4:	9966983a 	sll	r19,r19,r5
  8103b8:	18aab03a 	or	r21,r3,r2
  8103bc:	982ed43a 	srli	r23,r19,16
  8103c0:	a809883a 	mov	r4,r21
  8103c4:	9cbfffcc 	andi	r18,r19,65535
  8103c8:	b80b883a 	mov	r5,r23
  8103cc:	0811a280 	call	811a28 <__udivsi3>
  8103d0:	100b883a 	mov	r5,r2
  8103d4:	9009883a 	mov	r4,r18
  8103d8:	1021883a 	mov	r16,r2
  8103dc:	08027a80 	call	8027a8 <__mulsi3>
  8103e0:	a809883a 	mov	r4,r21
  8103e4:	b80b883a 	mov	r5,r23
  8103e8:	1023883a 	mov	r17,r2
  8103ec:	0811a300 	call	811a30 <__umodsi3>
  8103f0:	1004943a 	slli	r2,r2,16
  8103f4:	e006d43a 	srli	r3,fp,16
  8103f8:	10c4b03a 	or	r2,r2,r3
  8103fc:	1440042e 	bgeu	r2,r17,810410 <__udivdi3+0x290>
  810400:	14c5883a 	add	r2,r2,r19
  810404:	843fffc4 	addi	r16,r16,-1
  810408:	14c00136 	bltu	r2,r19,810410 <__udivdi3+0x290>
  81040c:	1440ea36 	bltu	r2,r17,8107b8 <__udivdi3+0x638>
  810410:	1463c83a 	sub	r17,r2,r17
  810414:	8809883a 	mov	r4,r17
  810418:	b80b883a 	mov	r5,r23
  81041c:	0811a280 	call	811a28 <__udivsi3>
  810420:	100b883a 	mov	r5,r2
  810424:	9009883a 	mov	r4,r18
  810428:	102b883a 	mov	r21,r2
  81042c:	08027a80 	call	8027a8 <__mulsi3>
  810430:	8809883a 	mov	r4,r17
  810434:	b80b883a 	mov	r5,r23
  810438:	1025883a 	mov	r18,r2
  81043c:	0811a300 	call	811a30 <__umodsi3>
  810440:	1004943a 	slli	r2,r2,16
  810444:	e0ffffcc 	andi	r3,fp,65535
  810448:	10c4b03a 	or	r2,r2,r3
  81044c:	1480042e 	bgeu	r2,r18,810460 <__udivdi3+0x2e0>
  810450:	9885883a 	add	r2,r19,r2
  810454:	ad7fffc4 	addi	r21,r21,-1
  810458:	14c00136 	bltu	r2,r19,810460 <__udivdi3+0x2e0>
  81045c:	1480d936 	bltu	r2,r18,8107c4 <__udivdi3+0x644>
  810460:	8004943a 	slli	r2,r16,16
  810464:	0009883a 	mov	r4,zero
  810468:	a884b03a 	or	r2,r21,r2
  81046c:	003fad06 	br	810324 <__udivdi3+0x1a4>
  810470:	00804034 	movhi	r2,256
  810474:	10bfffc4 	addi	r2,r2,-1
  810478:	11c0b636 	bltu	r2,r7,810754 <__udivdi3+0x5d4>
  81047c:	01400404 	movi	r5,16
  810480:	2805883a 	mov	r2,r5
  810484:	003f9a06 	br	8102f0 <__udivdi3+0x170>
  810488:	0005883a 	mov	r2,zero
  81048c:	0009883a 	mov	r4,zero
  810490:	003fa406 	br	810324 <__udivdi3+0x1a4>
  810494:	00804034 	movhi	r2,256
  810498:	10bfffc4 	addi	r2,r2,-1
  81049c:	14c0b336 	bltu	r2,r19,81076c <__udivdi3+0x5ec>
  8104a0:	01400404 	movi	r5,16
  8104a4:	2805883a 	mov	r2,r5
  8104a8:	003f5106 	br	8101f0 <__udivdi3+0x70>
  8104ac:	01000044 	movi	r4,1
  8104b0:	000b883a 	mov	r5,zero
  8104b4:	0811a280 	call	811a28 <__udivsi3>
  8104b8:	1027883a 	mov	r19,r2
  8104bc:	00bfffd4 	movui	r2,65535
  8104c0:	14fff436 	bltu	r2,r19,810494 <__udivdi3+0x314>
  8104c4:	003f4606 	br	8101e0 <__udivdi3+0x60>
  8104c8:	00804034 	movhi	r2,256
  8104cc:	10bfffc4 	addi	r2,r2,-1
  8104d0:	1200ac36 	bltu	r2,r8,810784 <__udivdi3+0x604>
  8104d4:	01400404 	movi	r5,16
  8104d8:	2805883a 	mov	r2,r5
  8104dc:	003fa806 	br	810380 <__udivdi3+0x200>
  8104e0:	3d85c83a 	sub	r2,r7,r22
  8104e4:	3588983a 	sll	r4,r6,r22
  8104e8:	9886d83a 	srl	r3,r19,r2
  8104ec:	a8a2d83a 	srl	r17,r21,r2
  8104f0:	e084d83a 	srl	r2,fp,r2
  8104f4:	20eeb03a 	or	r23,r4,r3
  8104f8:	b824d43a 	srli	r18,r23,16
  8104fc:	ad86983a 	sll	r3,r21,r22
  810500:	8809883a 	mov	r4,r17
  810504:	900b883a 	mov	r5,r18
  810508:	1886b03a 	or	r3,r3,r2
  81050c:	d8c00115 	stw	r3,4(sp)
  810510:	bc3fffcc 	andi	r16,r23,65535
  810514:	0811a280 	call	811a28 <__udivsi3>
  810518:	100b883a 	mov	r5,r2
  81051c:	8009883a 	mov	r4,r16
  810520:	1029883a 	mov	r20,r2
  810524:	08027a80 	call	8027a8 <__mulsi3>
  810528:	900b883a 	mov	r5,r18
  81052c:	8809883a 	mov	r4,r17
  810530:	102b883a 	mov	r21,r2
  810534:	0811a300 	call	811a30 <__umodsi3>
  810538:	d9400117 	ldw	r5,4(sp)
  81053c:	1004943a 	slli	r2,r2,16
  810540:	9da6983a 	sll	r19,r19,r22
  810544:	2806d43a 	srli	r3,r5,16
  810548:	10c4b03a 	or	r2,r2,r3
  81054c:	1540032e 	bgeu	r2,r21,81055c <__udivdi3+0x3dc>
  810550:	15c5883a 	add	r2,r2,r23
  810554:	a53fffc4 	addi	r20,r20,-1
  810558:	15c0912e 	bgeu	r2,r23,8107a0 <__udivdi3+0x620>
  81055c:	1563c83a 	sub	r17,r2,r21
  810560:	8809883a 	mov	r4,r17
  810564:	900b883a 	mov	r5,r18
  810568:	0811a280 	call	811a28 <__udivsi3>
  81056c:	100b883a 	mov	r5,r2
  810570:	8009883a 	mov	r4,r16
  810574:	102b883a 	mov	r21,r2
  810578:	08027a80 	call	8027a8 <__mulsi3>
  81057c:	8809883a 	mov	r4,r17
  810580:	900b883a 	mov	r5,r18
  810584:	1021883a 	mov	r16,r2
  810588:	0811a300 	call	811a30 <__umodsi3>
  81058c:	da800117 	ldw	r10,4(sp)
  810590:	1004943a 	slli	r2,r2,16
  810594:	50ffffcc 	andi	r3,r10,65535
  810598:	10c6b03a 	or	r3,r2,r3
  81059c:	1c00032e 	bgeu	r3,r16,8105ac <__udivdi3+0x42c>
  8105a0:	1dc7883a 	add	r3,r3,r23
  8105a4:	ad7fffc4 	addi	r21,r21,-1
  8105a8:	1dc0792e 	bgeu	r3,r23,810790 <__udivdi3+0x610>
  8105ac:	a004943a 	slli	r2,r20,16
  8105b0:	982ed43a 	srli	r23,r19,16
  8105b4:	9cffffcc 	andi	r19,r19,65535
  8105b8:	a8a4b03a 	or	r18,r21,r2
  8105bc:	947fffcc 	andi	r17,r18,65535
  8105c0:	902ad43a 	srli	r21,r18,16
  8105c4:	8809883a 	mov	r4,r17
  8105c8:	980b883a 	mov	r5,r19
  8105cc:	1c21c83a 	sub	r16,r3,r16
  8105d0:	08027a80 	call	8027a8 <__mulsi3>
  8105d4:	8809883a 	mov	r4,r17
  8105d8:	b80b883a 	mov	r5,r23
  8105dc:	1029883a 	mov	r20,r2
  8105e0:	08027a80 	call	8027a8 <__mulsi3>
  8105e4:	980b883a 	mov	r5,r19
  8105e8:	a809883a 	mov	r4,r21
  8105ec:	1023883a 	mov	r17,r2
  8105f0:	08027a80 	call	8027a8 <__mulsi3>
  8105f4:	a809883a 	mov	r4,r21
  8105f8:	b80b883a 	mov	r5,r23
  8105fc:	1027883a 	mov	r19,r2
  810600:	08027a80 	call	8027a8 <__mulsi3>
  810604:	1009883a 	mov	r4,r2
  810608:	a004d43a 	srli	r2,r20,16
  81060c:	8ce3883a 	add	r17,r17,r19
  810610:	1447883a 	add	r3,r2,r17
  810614:	1cc0022e 	bgeu	r3,r19,810620 <__udivdi3+0x4a0>
  810618:	00800074 	movhi	r2,1
  81061c:	2089883a 	add	r4,r4,r2
  810620:	1804d43a 	srli	r2,r3,16
  810624:	2085883a 	add	r2,r4,r2
  810628:	80804436 	bltu	r16,r2,81073c <__udivdi3+0x5bc>
  81062c:	80803e26 	beq	r16,r2,810728 <__udivdi3+0x5a8>
  810630:	9005883a 	mov	r2,r18
  810634:	0009883a 	mov	r4,zero
  810638:	003f3a06 	br	810324 <__udivdi3+0x1a4>
  81063c:	9d26983a 	sll	r19,r19,r20
  810640:	3505c83a 	sub	r2,r6,r20
  810644:	a8a2d83a 	srl	r17,r21,r2
  810648:	982ed43a 	srli	r23,r19,16
  81064c:	e084d83a 	srl	r2,fp,r2
  810650:	ad06983a 	sll	r3,r21,r20
  810654:	8809883a 	mov	r4,r17
  810658:	b80b883a 	mov	r5,r23
  81065c:	1886b03a 	or	r3,r3,r2
  810660:	d8c00015 	stw	r3,0(sp)
  810664:	9dbfffcc 	andi	r22,r19,65535
  810668:	0811a280 	call	811a28 <__udivsi3>
  81066c:	100b883a 	mov	r5,r2
  810670:	b009883a 	mov	r4,r22
  810674:	d8800215 	stw	r2,8(sp)
  810678:	08027a80 	call	8027a8 <__mulsi3>
  81067c:	8809883a 	mov	r4,r17
  810680:	b80b883a 	mov	r5,r23
  810684:	102b883a 	mov	r21,r2
  810688:	0811a300 	call	811a30 <__umodsi3>
  81068c:	d9000017 	ldw	r4,0(sp)
  810690:	1004943a 	slli	r2,r2,16
  810694:	2006d43a 	srli	r3,r4,16
  810698:	10c4b03a 	or	r2,r2,r3
  81069c:	1540052e 	bgeu	r2,r21,8106b4 <__udivdi3+0x534>
  8106a0:	d9400217 	ldw	r5,8(sp)
  8106a4:	14c5883a 	add	r2,r2,r19
  8106a8:	297fffc4 	addi	r5,r5,-1
  8106ac:	d9400215 	stw	r5,8(sp)
  8106b0:	14c0462e 	bgeu	r2,r19,8107cc <__udivdi3+0x64c>
  8106b4:	1563c83a 	sub	r17,r2,r21
  8106b8:	8809883a 	mov	r4,r17
  8106bc:	b80b883a 	mov	r5,r23
  8106c0:	0811a280 	call	811a28 <__udivsi3>
  8106c4:	100b883a 	mov	r5,r2
  8106c8:	b009883a 	mov	r4,r22
  8106cc:	1025883a 	mov	r18,r2
  8106d0:	08027a80 	call	8027a8 <__mulsi3>
  8106d4:	8809883a 	mov	r4,r17
  8106d8:	b80b883a 	mov	r5,r23
  8106dc:	1021883a 	mov	r16,r2
  8106e0:	0811a300 	call	811a30 <__umodsi3>
  8106e4:	da800017 	ldw	r10,0(sp)
  8106e8:	1004943a 	slli	r2,r2,16
  8106ec:	50ffffcc 	andi	r3,r10,65535
  8106f0:	10c6b03a 	or	r3,r2,r3
  8106f4:	1c00062e 	bgeu	r3,r16,810710 <__udivdi3+0x590>
  8106f8:	1cc7883a 	add	r3,r3,r19
  8106fc:	94bfffc4 	addi	r18,r18,-1
  810700:	1cc00336 	bltu	r3,r19,810710 <__udivdi3+0x590>
  810704:	1c00022e 	bgeu	r3,r16,810710 <__udivdi3+0x590>
  810708:	94bfffc4 	addi	r18,r18,-1
  81070c:	1cc7883a 	add	r3,r3,r19
  810710:	d9000217 	ldw	r4,8(sp)
  810714:	e538983a 	sll	fp,fp,r20
  810718:	1c2bc83a 	sub	r21,r3,r16
  81071c:	2004943a 	slli	r2,r4,16
  810720:	90a8b03a 	or	r20,r18,r2
  810724:	003ebf06 	br	810224 <__udivdi3+0xa4>
  810728:	1804943a 	slli	r2,r3,16
  81072c:	e588983a 	sll	r4,fp,r22
  810730:	a0ffffcc 	andi	r3,r20,65535
  810734:	10c5883a 	add	r2,r2,r3
  810738:	20bfbd2e 	bgeu	r4,r2,810630 <__udivdi3+0x4b0>
  81073c:	90bfffc4 	addi	r2,r18,-1
  810740:	0009883a 	mov	r4,zero
  810744:	003ef706 	br	810324 <__udivdi3+0x1a4>
  810748:	01400204 	movi	r5,8
  81074c:	2805883a 	mov	r2,r5
  810750:	003ee706 	br	8102f0 <__udivdi3+0x170>
  810754:	01400604 	movi	r5,24
  810758:	2805883a 	mov	r2,r5
  81075c:	003ee406 	br	8102f0 <__udivdi3+0x170>
  810760:	01400204 	movi	r5,8
  810764:	2805883a 	mov	r2,r5
  810768:	003ea106 	br	8101f0 <__udivdi3+0x70>
  81076c:	01400604 	movi	r5,24
  810770:	2805883a 	mov	r2,r5
  810774:	003e9e06 	br	8101f0 <__udivdi3+0x70>
  810778:	01400204 	movi	r5,8
  81077c:	2805883a 	mov	r2,r5
  810780:	003eff06 	br	810380 <__udivdi3+0x200>
  810784:	01400604 	movi	r5,24
  810788:	2805883a 	mov	r2,r5
  81078c:	003efc06 	br	810380 <__udivdi3+0x200>
  810790:	1c3f862e 	bgeu	r3,r16,8105ac <__udivdi3+0x42c>
  810794:	1dc7883a 	add	r3,r3,r23
  810798:	ad7fffc4 	addi	r21,r21,-1
  81079c:	003f8306 	br	8105ac <__udivdi3+0x42c>
  8107a0:	157f6e2e 	bgeu	r2,r21,81055c <__udivdi3+0x3dc>
  8107a4:	a53fffc4 	addi	r20,r20,-1
  8107a8:	15c5883a 	add	r2,r2,r23
  8107ac:	003f6b06 	br	81055c <__udivdi3+0x3dc>
  8107b0:	ad7fffc4 	addi	r21,r21,-1
  8107b4:	003ec206 	br	8102c0 <__udivdi3+0x140>
  8107b8:	843fffc4 	addi	r16,r16,-1
  8107bc:	14c5883a 	add	r2,r2,r19
  8107c0:	003f1306 	br	810410 <__udivdi3+0x290>
  8107c4:	ad7fffc4 	addi	r21,r21,-1
  8107c8:	003f2506 	br	810460 <__udivdi3+0x2e0>
  8107cc:	157fb92e 	bgeu	r2,r21,8106b4 <__udivdi3+0x534>
  8107d0:	297fffc4 	addi	r5,r5,-1
  8107d4:	14c5883a 	add	r2,r2,r19
  8107d8:	d9400215 	stw	r5,8(sp)
  8107dc:	003fb506 	br	8106b4 <__udivdi3+0x534>
  8107e0:	843fffc4 	addi	r16,r16,-1
  8107e4:	14c5883a 	add	r2,r2,r19
  8107e8:	003ea106 	br	810270 <__udivdi3+0xf0>

008107ec <__umoddi3>:
  8107ec:	defff004 	addi	sp,sp,-64
  8107f0:	3011883a 	mov	r8,r6
  8107f4:	000d883a 	mov	r6,zero
  8107f8:	dd400b15 	stw	r21,44(sp)
  8107fc:	dcc00915 	stw	r19,36(sp)
  810800:	dc000615 	stw	r16,24(sp)
  810804:	dfc00f15 	stw	ra,60(sp)
  810808:	df000e15 	stw	fp,56(sp)
  81080c:	ddc00d15 	stw	r23,52(sp)
  810810:	dd800c15 	stw	r22,48(sp)
  810814:	dd000a15 	stw	r20,40(sp)
  810818:	dc800815 	stw	r18,32(sp)
  81081c:	dc400715 	stw	r17,28(sp)
  810820:	2817883a 	mov	r11,r5
  810824:	d9800415 	stw	r6,16(sp)
  810828:	4027883a 	mov	r19,r8
  81082c:	d9800515 	stw	r6,20(sp)
  810830:	2021883a 	mov	r16,r4
  810834:	282b883a 	mov	r21,r5
  810838:	38002c1e 	bne	r7,zero,8108ec <__umoddi3+0x100>
  81083c:	2a005636 	bltu	r5,r8,810998 <__umoddi3+0x1ac>
  810840:	40009a26 	beq	r8,zero,810aac <__umoddi3+0x2c0>
  810844:	00bfffd4 	movui	r2,65535
  810848:	14c09236 	bltu	r2,r19,810a94 <__umoddi3+0x2a8>
  81084c:	00803fc4 	movi	r2,255
  810850:	14c15c36 	bltu	r2,r19,810dc4 <__umoddi3+0x5d8>
  810854:	000b883a 	mov	r5,zero
  810858:	0005883a 	mov	r2,zero
  81085c:	9884d83a 	srl	r2,r19,r2
  810860:	01002074 	movhi	r4,129
  810864:	2113f704 	addi	r4,r4,20444
  810868:	01800804 	movi	r6,32
  81086c:	1105883a 	add	r2,r2,r4
  810870:	10c00003 	ldbu	r3,0(r2)
  810874:	28c7883a 	add	r3,r5,r3
  810878:	30e5c83a 	sub	r18,r6,r3
  81087c:	9000a41e 	bne	r18,zero,810b10 <__umoddi3+0x324>
  810880:	982ed43a 	srli	r23,r19,16
  810884:	acebc83a 	sub	r21,r21,r19
  810888:	9d3fffcc 	andi	r20,r19,65535
  81088c:	002d883a 	mov	r22,zero
  810890:	a809883a 	mov	r4,r21
  810894:	b80b883a 	mov	r5,r23
  810898:	0811a280 	call	811a28 <__udivsi3>
  81089c:	100b883a 	mov	r5,r2
  8108a0:	a009883a 	mov	r4,r20
  8108a4:	08027a80 	call	8027a8 <__mulsi3>
  8108a8:	a809883a 	mov	r4,r21
  8108ac:	b80b883a 	mov	r5,r23
  8108b0:	1023883a 	mov	r17,r2
  8108b4:	0811a300 	call	811a30 <__umodsi3>
  8108b8:	1004943a 	slli	r2,r2,16
  8108bc:	8006d43a 	srli	r3,r16,16
  8108c0:	10c4b03a 	or	r2,r2,r3
  8108c4:	1440032e 	bgeu	r2,r17,8108d4 <__umoddi3+0xe8>
  8108c8:	14c5883a 	add	r2,r2,r19
  8108cc:	14c00136 	bltu	r2,r19,8108d4 <__umoddi3+0xe8>
  8108d0:	14415836 	bltu	r2,r17,810e34 <__umoddi3+0x648>
  8108d4:	1463c83a 	sub	r17,r2,r17
  8108d8:	8809883a 	mov	r4,r17
  8108dc:	b80b883a 	mov	r5,r23
  8108e0:	0811a280 	call	811a28 <__udivsi3>
  8108e4:	a009883a 	mov	r4,r20
  8108e8:	00005306 	br	810a38 <__umoddi3+0x24c>
  8108ec:	380d883a 	mov	r6,r7
  8108f0:	29c0132e 	bgeu	r5,r7,810940 <__umoddi3+0x154>
  8108f4:	d9000415 	stw	r4,16(sp)
  8108f8:	d9400515 	stw	r5,20(sp)
  8108fc:	d9400417 	ldw	r5,16(sp)
  810900:	5813883a 	mov	r9,r11
  810904:	2811883a 	mov	r8,r5
  810908:	4005883a 	mov	r2,r8
  81090c:	4807883a 	mov	r3,r9
  810910:	dfc00f17 	ldw	ra,60(sp)
  810914:	df000e17 	ldw	fp,56(sp)
  810918:	ddc00d17 	ldw	r23,52(sp)
  81091c:	dd800c17 	ldw	r22,48(sp)
  810920:	dd400b17 	ldw	r21,44(sp)
  810924:	dd000a17 	ldw	r20,40(sp)
  810928:	dcc00917 	ldw	r19,36(sp)
  81092c:	dc800817 	ldw	r18,32(sp)
  810930:	dc400717 	ldw	r17,28(sp)
  810934:	dc000617 	ldw	r16,24(sp)
  810938:	dec01004 	addi	sp,sp,64
  81093c:	f800283a 	ret
  810940:	00bfffd4 	movui	r2,65535
  810944:	11c06636 	bltu	r2,r7,810ae0 <__umoddi3+0x2f4>
  810948:	00803fc4 	movi	r2,255
  81094c:	11c12036 	bltu	r2,r7,810dd0 <__umoddi3+0x5e4>
  810950:	000b883a 	mov	r5,zero
  810954:	0005883a 	mov	r2,zero
  810958:	3084d83a 	srl	r2,r6,r2
  81095c:	01002074 	movhi	r4,129
  810960:	2113f704 	addi	r4,r4,20444
  810964:	01c00804 	movi	r7,32
  810968:	1105883a 	add	r2,r2,r4
  81096c:	10c00003 	ldbu	r3,0(r2)
  810970:	28c7883a 	add	r3,r5,r3
  810974:	38e5c83a 	sub	r18,r7,r3
  810978:	9000941e 	bne	r18,zero,810bcc <__umoddi3+0x3e0>
  81097c:	35405e36 	bltu	r6,r21,810af8 <__umoddi3+0x30c>
  810980:	84c05d2e 	bgeu	r16,r19,810af8 <__umoddi3+0x30c>
  810984:	8011883a 	mov	r8,r16
  810988:	a813883a 	mov	r9,r21
  81098c:	dc000415 	stw	r16,16(sp)
  810990:	dd400515 	stw	r21,20(sp)
  810994:	003fdc06 	br	810908 <__umoddi3+0x11c>
  810998:	00bfffd4 	movui	r2,65535
  81099c:	12004a36 	bltu	r2,r8,810ac8 <__umoddi3+0x2dc>
  8109a0:	00803fc4 	movi	r2,255
  8109a4:	12010d36 	bltu	r2,r8,810ddc <__umoddi3+0x5f0>
  8109a8:	000b883a 	mov	r5,zero
  8109ac:	0005883a 	mov	r2,zero
  8109b0:	9884d83a 	srl	r2,r19,r2
  8109b4:	01002074 	movhi	r4,129
  8109b8:	2113f704 	addi	r4,r4,20444
  8109bc:	01800804 	movi	r6,32
  8109c0:	1105883a 	add	r2,r2,r4
  8109c4:	10c00003 	ldbu	r3,0(r2)
  8109c8:	28c7883a 	add	r3,r5,r3
  8109cc:	30c7c83a 	sub	r3,r6,r3
  8109d0:	1800dc1e 	bne	r3,zero,810d44 <__umoddi3+0x558>
  8109d4:	002d883a 	mov	r22,zero
  8109d8:	982ed43a 	srli	r23,r19,16
  8109dc:	a809883a 	mov	r4,r21
  8109e0:	9cbfffcc 	andi	r18,r19,65535
  8109e4:	b80b883a 	mov	r5,r23
  8109e8:	0811a280 	call	811a28 <__udivsi3>
  8109ec:	100b883a 	mov	r5,r2
  8109f0:	9009883a 	mov	r4,r18
  8109f4:	08027a80 	call	8027a8 <__mulsi3>
  8109f8:	a809883a 	mov	r4,r21
  8109fc:	b80b883a 	mov	r5,r23
  810a00:	1023883a 	mov	r17,r2
  810a04:	0811a300 	call	811a30 <__umodsi3>
  810a08:	1004943a 	slli	r2,r2,16
  810a0c:	8006d43a 	srli	r3,r16,16
  810a10:	10c4b03a 	or	r2,r2,r3
  810a14:	1440032e 	bgeu	r2,r17,810a24 <__umoddi3+0x238>
  810a18:	14c5883a 	add	r2,r2,r19
  810a1c:	14c00136 	bltu	r2,r19,810a24 <__umoddi3+0x238>
  810a20:	14410236 	bltu	r2,r17,810e2c <__umoddi3+0x640>
  810a24:	1463c83a 	sub	r17,r2,r17
  810a28:	8809883a 	mov	r4,r17
  810a2c:	b80b883a 	mov	r5,r23
  810a30:	0811a280 	call	811a28 <__udivsi3>
  810a34:	9009883a 	mov	r4,r18
  810a38:	100b883a 	mov	r5,r2
  810a3c:	08027a80 	call	8027a8 <__mulsi3>
  810a40:	8809883a 	mov	r4,r17
  810a44:	b80b883a 	mov	r5,r23
  810a48:	102b883a 	mov	r21,r2
  810a4c:	0811a300 	call	811a30 <__umodsi3>
  810a50:	1004943a 	slli	r2,r2,16
  810a54:	80ffffcc 	andi	r3,r16,65535
  810a58:	10c4b03a 	or	r2,r2,r3
  810a5c:	1540042e 	bgeu	r2,r21,810a70 <__umoddi3+0x284>
  810a60:	14c5883a 	add	r2,r2,r19
  810a64:	14c00236 	bltu	r2,r19,810a70 <__umoddi3+0x284>
  810a68:	1540012e 	bgeu	r2,r21,810a70 <__umoddi3+0x284>
  810a6c:	14c5883a 	add	r2,r2,r19
  810a70:	1545c83a 	sub	r2,r2,r21
  810a74:	1584d83a 	srl	r2,r2,r22
  810a78:	0013883a 	mov	r9,zero
  810a7c:	d8800415 	stw	r2,16(sp)
  810a80:	d8c00417 	ldw	r3,16(sp)
  810a84:	0005883a 	mov	r2,zero
  810a88:	d8800515 	stw	r2,20(sp)
  810a8c:	1811883a 	mov	r8,r3
  810a90:	003f9d06 	br	810908 <__umoddi3+0x11c>
  810a94:	00804034 	movhi	r2,256
  810a98:	10bfffc4 	addi	r2,r2,-1
  810a9c:	14c0c636 	bltu	r2,r19,810db8 <__umoddi3+0x5cc>
  810aa0:	01400404 	movi	r5,16
  810aa4:	2805883a 	mov	r2,r5
  810aa8:	003f6c06 	br	81085c <__umoddi3+0x70>
  810aac:	01000044 	movi	r4,1
  810ab0:	000b883a 	mov	r5,zero
  810ab4:	0811a280 	call	811a28 <__udivsi3>
  810ab8:	1027883a 	mov	r19,r2
  810abc:	00bfffd4 	movui	r2,65535
  810ac0:	14fff436 	bltu	r2,r19,810a94 <__umoddi3+0x2a8>
  810ac4:	003f6106 	br	81084c <__umoddi3+0x60>
  810ac8:	00804034 	movhi	r2,256
  810acc:	10bfffc4 	addi	r2,r2,-1
  810ad0:	1200c536 	bltu	r2,r8,810de8 <__umoddi3+0x5fc>
  810ad4:	01400404 	movi	r5,16
  810ad8:	2805883a 	mov	r2,r5
  810adc:	003fb406 	br	8109b0 <__umoddi3+0x1c4>
  810ae0:	00804034 	movhi	r2,256
  810ae4:	10bfffc4 	addi	r2,r2,-1
  810ae8:	11c0c236 	bltu	r2,r7,810df4 <__umoddi3+0x608>
  810aec:	01400404 	movi	r5,16
  810af0:	2805883a 	mov	r2,r5
  810af4:	003f9806 	br	810958 <__umoddi3+0x16c>
  810af8:	84c9c83a 	sub	r4,r16,r19
  810afc:	8105803a 	cmpltu	r2,r16,r4
  810b00:	a987c83a 	sub	r3,r21,r6
  810b04:	18abc83a 	sub	r21,r3,r2
  810b08:	2021883a 	mov	r16,r4
  810b0c:	003f9d06 	br	810984 <__umoddi3+0x198>
  810b10:	9ca6983a 	sll	r19,r19,r18
  810b14:	3485c83a 	sub	r2,r6,r18
  810b18:	a8a2d83a 	srl	r17,r21,r2
  810b1c:	982ed43a 	srli	r23,r19,16
  810b20:	ac86983a 	sll	r3,r21,r18
  810b24:	8084d83a 	srl	r2,r16,r2
  810b28:	8809883a 	mov	r4,r17
  810b2c:	b80b883a 	mov	r5,r23
  810b30:	18b8b03a 	or	fp,r3,r2
  810b34:	9d3fffcc 	andi	r20,r19,65535
  810b38:	0811a280 	call	811a28 <__udivsi3>
  810b3c:	100b883a 	mov	r5,r2
  810b40:	a009883a 	mov	r4,r20
  810b44:	08027a80 	call	8027a8 <__mulsi3>
  810b48:	8809883a 	mov	r4,r17
  810b4c:	b80b883a 	mov	r5,r23
  810b50:	102b883a 	mov	r21,r2
  810b54:	0811a300 	call	811a30 <__umodsi3>
  810b58:	1004943a 	slli	r2,r2,16
  810b5c:	e006d43a 	srli	r3,fp,16
  810b60:	902d883a 	mov	r22,r18
  810b64:	10c4b03a 	or	r2,r2,r3
  810b68:	1540022e 	bgeu	r2,r21,810b74 <__umoddi3+0x388>
  810b6c:	14c5883a 	add	r2,r2,r19
  810b70:	14c0ab2e 	bgeu	r2,r19,810e20 <__umoddi3+0x634>
  810b74:	1563c83a 	sub	r17,r2,r21
  810b78:	8809883a 	mov	r4,r17
  810b7c:	b80b883a 	mov	r5,r23
  810b80:	0811a280 	call	811a28 <__udivsi3>
  810b84:	100b883a 	mov	r5,r2
  810b88:	a009883a 	mov	r4,r20
  810b8c:	08027a80 	call	8027a8 <__mulsi3>
  810b90:	8809883a 	mov	r4,r17
  810b94:	b80b883a 	mov	r5,r23
  810b98:	102b883a 	mov	r21,r2
  810b9c:	0811a300 	call	811a30 <__umodsi3>
  810ba0:	1004943a 	slli	r2,r2,16
  810ba4:	e0ffffcc 	andi	r3,fp,65535
  810ba8:	10c4b03a 	or	r2,r2,r3
  810bac:	1540042e 	bgeu	r2,r21,810bc0 <__umoddi3+0x3d4>
  810bb0:	14c5883a 	add	r2,r2,r19
  810bb4:	14c00236 	bltu	r2,r19,810bc0 <__umoddi3+0x3d4>
  810bb8:	1540012e 	bgeu	r2,r21,810bc0 <__umoddi3+0x3d4>
  810bbc:	14c5883a 	add	r2,r2,r19
  810bc0:	84a0983a 	sll	r16,r16,r18
  810bc4:	156bc83a 	sub	r21,r2,r21
  810bc8:	003f3106 	br	810890 <__umoddi3+0xa4>
  810bcc:	3c8fc83a 	sub	r7,r7,r18
  810bd0:	3486983a 	sll	r3,r6,r18
  810bd4:	99c4d83a 	srl	r2,r19,r7
  810bd8:	a9e2d83a 	srl	r17,r21,r7
  810bdc:	ac8c983a 	sll	r6,r21,r18
  810be0:	18acb03a 	or	r22,r3,r2
  810be4:	b02ed43a 	srli	r23,r22,16
  810be8:	81c4d83a 	srl	r2,r16,r7
  810bec:	8809883a 	mov	r4,r17
  810bf0:	b80b883a 	mov	r5,r23
  810bf4:	308cb03a 	or	r6,r6,r2
  810bf8:	d9c00315 	stw	r7,12(sp)
  810bfc:	d9800215 	stw	r6,8(sp)
  810c00:	b53fffcc 	andi	r20,r22,65535
  810c04:	0811a280 	call	811a28 <__udivsi3>
  810c08:	100b883a 	mov	r5,r2
  810c0c:	a009883a 	mov	r4,r20
  810c10:	1039883a 	mov	fp,r2
  810c14:	08027a80 	call	8027a8 <__mulsi3>
  810c18:	8809883a 	mov	r4,r17
  810c1c:	b80b883a 	mov	r5,r23
  810c20:	102b883a 	mov	r21,r2
  810c24:	0811a300 	call	811a30 <__umodsi3>
  810c28:	d9000217 	ldw	r4,8(sp)
  810c2c:	1004943a 	slli	r2,r2,16
  810c30:	9ca6983a 	sll	r19,r19,r18
  810c34:	2006d43a 	srli	r3,r4,16
  810c38:	84a0983a 	sll	r16,r16,r18
  810c3c:	dcc00015 	stw	r19,0(sp)
  810c40:	10c4b03a 	or	r2,r2,r3
  810c44:	dc000115 	stw	r16,4(sp)
  810c48:	1540032e 	bgeu	r2,r21,810c58 <__umoddi3+0x46c>
  810c4c:	1585883a 	add	r2,r2,r22
  810c50:	e73fffc4 	addi	fp,fp,-1
  810c54:	15806e2e 	bgeu	r2,r22,810e10 <__umoddi3+0x624>
  810c58:	1563c83a 	sub	r17,r2,r21
  810c5c:	8809883a 	mov	r4,r17
  810c60:	b80b883a 	mov	r5,r23
  810c64:	0811a280 	call	811a28 <__udivsi3>
  810c68:	100b883a 	mov	r5,r2
  810c6c:	a009883a 	mov	r4,r20
  810c70:	1021883a 	mov	r16,r2
  810c74:	08027a80 	call	8027a8 <__mulsi3>
  810c78:	b80b883a 	mov	r5,r23
  810c7c:	8809883a 	mov	r4,r17
  810c80:	1029883a 	mov	r20,r2
  810c84:	0811a300 	call	811a30 <__umodsi3>
  810c88:	d9400217 	ldw	r5,8(sp)
  810c8c:	1004943a 	slli	r2,r2,16
  810c90:	28ffffcc 	andi	r3,r5,65535
  810c94:	10c4b03a 	or	r2,r2,r3
  810c98:	1500032e 	bgeu	r2,r20,810ca8 <__umoddi3+0x4bc>
  810c9c:	1585883a 	add	r2,r2,r22
  810ca0:	843fffc4 	addi	r16,r16,-1
  810ca4:	1580562e 	bgeu	r2,r22,810e00 <__umoddi3+0x614>
  810ca8:	d9800017 	ldw	r6,0(sp)
  810cac:	e022943a 	slli	r17,fp,16
  810cb0:	302ed43a 	srli	r23,r6,16
  810cb4:	8462b03a 	or	r17,r16,r17
  810cb8:	34ffffcc 	andi	r19,r6,65535
  810cbc:	882ad43a 	srli	r21,r17,16
  810cc0:	8c7fffcc 	andi	r17,r17,65535
  810cc4:	8809883a 	mov	r4,r17
  810cc8:	980b883a 	mov	r5,r19
  810ccc:	1521c83a 	sub	r16,r2,r20
  810cd0:	08027a80 	call	8027a8 <__mulsi3>
  810cd4:	8809883a 	mov	r4,r17
  810cd8:	b80b883a 	mov	r5,r23
  810cdc:	1029883a 	mov	r20,r2
  810ce0:	08027a80 	call	8027a8 <__mulsi3>
  810ce4:	980b883a 	mov	r5,r19
  810ce8:	a809883a 	mov	r4,r21
  810cec:	1023883a 	mov	r17,r2
  810cf0:	08027a80 	call	8027a8 <__mulsi3>
  810cf4:	a809883a 	mov	r4,r21
  810cf8:	b80b883a 	mov	r5,r23
  810cfc:	1027883a 	mov	r19,r2
  810d00:	08027a80 	call	8027a8 <__mulsi3>
  810d04:	100b883a 	mov	r5,r2
  810d08:	a004d43a 	srli	r2,r20,16
  810d0c:	8ce3883a 	add	r17,r17,r19
  810d10:	1449883a 	add	r4,r2,r17
  810d14:	24c0022e 	bgeu	r4,r19,810d20 <__umoddi3+0x534>
  810d18:	00800074 	movhi	r2,1
  810d1c:	288b883a 	add	r5,r5,r2
  810d20:	2004d43a 	srli	r2,r4,16
  810d24:	2008943a 	slli	r4,r4,16
  810d28:	a0ffffcc 	andi	r3,r20,65535
  810d2c:	288d883a 	add	r6,r5,r2
  810d30:	20c9883a 	add	r4,r4,r3
  810d34:	81800b36 	bltu	r16,r6,810d64 <__umoddi3+0x578>
  810d38:	81804026 	beq	r16,r6,810e3c <__umoddi3+0x650>
  810d3c:	818dc83a 	sub	r6,r16,r6
  810d40:	00000f06 	br	810d80 <__umoddi3+0x594>
  810d44:	30c5c83a 	sub	r2,r6,r3
  810d48:	182d883a 	mov	r22,r3
  810d4c:	8084d83a 	srl	r2,r16,r2
  810d50:	a8c6983a 	sll	r3,r21,r3
  810d54:	9da6983a 	sll	r19,r19,r22
  810d58:	85a0983a 	sll	r16,r16,r22
  810d5c:	18aab03a 	or	r21,r3,r2
  810d60:	003f1d06 	br	8109d8 <__umoddi3+0x1ec>
  810d64:	d8c00017 	ldw	r3,0(sp)
  810d68:	20c5c83a 	sub	r2,r4,r3
  810d6c:	2089803a 	cmpltu	r4,r4,r2
  810d70:	3587c83a 	sub	r3,r6,r22
  810d74:	1907c83a 	sub	r3,r3,r4
  810d78:	80cdc83a 	sub	r6,r16,r3
  810d7c:	1009883a 	mov	r4,r2
  810d80:	d9400117 	ldw	r5,4(sp)
  810d84:	2905c83a 	sub	r2,r5,r4
  810d88:	2887803a 	cmpltu	r3,r5,r2
  810d8c:	30c7c83a 	sub	r3,r6,r3
  810d90:	d9800317 	ldw	r6,12(sp)
  810d94:	1484d83a 	srl	r2,r2,r18
  810d98:	1988983a 	sll	r4,r3,r6
  810d9c:	1c86d83a 	srl	r3,r3,r18
  810da0:	2088b03a 	or	r4,r4,r2
  810da4:	2011883a 	mov	r8,r4
  810da8:	1813883a 	mov	r9,r3
  810dac:	d9000415 	stw	r4,16(sp)
  810db0:	d8c00515 	stw	r3,20(sp)
  810db4:	003ed406 	br	810908 <__umoddi3+0x11c>
  810db8:	01400604 	movi	r5,24
  810dbc:	2805883a 	mov	r2,r5
  810dc0:	003ea606 	br	81085c <__umoddi3+0x70>
  810dc4:	01400204 	movi	r5,8
  810dc8:	2805883a 	mov	r2,r5
  810dcc:	003ea306 	br	81085c <__umoddi3+0x70>
  810dd0:	01400204 	movi	r5,8
  810dd4:	2805883a 	mov	r2,r5
  810dd8:	003edf06 	br	810958 <__umoddi3+0x16c>
  810ddc:	01400204 	movi	r5,8
  810de0:	2805883a 	mov	r2,r5
  810de4:	003ef206 	br	8109b0 <__umoddi3+0x1c4>
  810de8:	01400604 	movi	r5,24
  810dec:	2805883a 	mov	r2,r5
  810df0:	003eef06 	br	8109b0 <__umoddi3+0x1c4>
  810df4:	01400604 	movi	r5,24
  810df8:	2805883a 	mov	r2,r5
  810dfc:	003ed606 	br	810958 <__umoddi3+0x16c>
  810e00:	153fa92e 	bgeu	r2,r20,810ca8 <__umoddi3+0x4bc>
  810e04:	843fffc4 	addi	r16,r16,-1
  810e08:	1585883a 	add	r2,r2,r22
  810e0c:	003fa606 	br	810ca8 <__umoddi3+0x4bc>
  810e10:	157f912e 	bgeu	r2,r21,810c58 <__umoddi3+0x46c>
  810e14:	e73fffc4 	addi	fp,fp,-1
  810e18:	1585883a 	add	r2,r2,r22
  810e1c:	003f8e06 	br	810c58 <__umoddi3+0x46c>
  810e20:	157f542e 	bgeu	r2,r21,810b74 <__umoddi3+0x388>
  810e24:	14c5883a 	add	r2,r2,r19
  810e28:	003f5206 	br	810b74 <__umoddi3+0x388>
  810e2c:	14c5883a 	add	r2,r2,r19
  810e30:	003efc06 	br	810a24 <__umoddi3+0x238>
  810e34:	14c5883a 	add	r2,r2,r19
  810e38:	003ea606 	br	8108d4 <__umoddi3+0xe8>
  810e3c:	d8800117 	ldw	r2,4(sp)
  810e40:	113fc836 	bltu	r2,r4,810d64 <__umoddi3+0x578>
  810e44:	000d883a 	mov	r6,zero
  810e48:	003fcd06 	br	810d80 <__umoddi3+0x594>

00810e4c <__nesf2>:
  810e4c:	defff304 	addi	sp,sp,-52
  810e50:	dc400b15 	stw	r17,44(sp)
  810e54:	dc400204 	addi	r17,sp,8
  810e58:	dc000a15 	stw	r16,40(sp)
  810e5c:	d9000015 	stw	r4,0(sp)
  810e60:	d9400115 	stw	r5,4(sp)
  810e64:	d809883a 	mov	r4,sp
  810e68:	880b883a 	mov	r5,r17
  810e6c:	dc000604 	addi	r16,sp,24
  810e70:	dfc00c15 	stw	ra,48(sp)
  810e74:	0811a380 	call	811a38 <__unpack_f>
  810e78:	d9000104 	addi	r4,sp,4
  810e7c:	800b883a 	mov	r5,r16
  810e80:	0811a380 	call	811a38 <__unpack_f>
  810e84:	d8800217 	ldw	r2,8(sp)
  810e88:	00c00044 	movi	r3,1
  810e8c:	180d883a 	mov	r6,r3
  810e90:	1880062e 	bgeu	r3,r2,810eac <__nesf2+0x60>
  810e94:	d8800617 	ldw	r2,24(sp)
  810e98:	8809883a 	mov	r4,r17
  810e9c:	800b883a 	mov	r5,r16
  810ea0:	1880022e 	bgeu	r3,r2,810eac <__nesf2+0x60>
  810ea4:	0811b000 	call	811b00 <__fpcmp_parts_f>
  810ea8:	100d883a 	mov	r6,r2
  810eac:	3005883a 	mov	r2,r6
  810eb0:	dfc00c17 	ldw	ra,48(sp)
  810eb4:	dc400b17 	ldw	r17,44(sp)
  810eb8:	dc000a17 	ldw	r16,40(sp)
  810ebc:	dec00d04 	addi	sp,sp,52
  810ec0:	f800283a 	ret

00810ec4 <__gtsf2>:
  810ec4:	defff304 	addi	sp,sp,-52
  810ec8:	dc400b15 	stw	r17,44(sp)
  810ecc:	dc400204 	addi	r17,sp,8
  810ed0:	dc000a15 	stw	r16,40(sp)
  810ed4:	d9000015 	stw	r4,0(sp)
  810ed8:	d9400115 	stw	r5,4(sp)
  810edc:	d809883a 	mov	r4,sp
  810ee0:	880b883a 	mov	r5,r17
  810ee4:	dc000604 	addi	r16,sp,24
  810ee8:	dfc00c15 	stw	ra,48(sp)
  810eec:	0811a380 	call	811a38 <__unpack_f>
  810ef0:	d9000104 	addi	r4,sp,4
  810ef4:	800b883a 	mov	r5,r16
  810ef8:	0811a380 	call	811a38 <__unpack_f>
  810efc:	d8800217 	ldw	r2,8(sp)
  810f00:	00c00044 	movi	r3,1
  810f04:	01bfffc4 	movi	r6,-1
  810f08:	1880062e 	bgeu	r3,r2,810f24 <__gtsf2+0x60>
  810f0c:	d8800617 	ldw	r2,24(sp)
  810f10:	8809883a 	mov	r4,r17
  810f14:	800b883a 	mov	r5,r16
  810f18:	1880022e 	bgeu	r3,r2,810f24 <__gtsf2+0x60>
  810f1c:	0811b000 	call	811b00 <__fpcmp_parts_f>
  810f20:	100d883a 	mov	r6,r2
  810f24:	3005883a 	mov	r2,r6
  810f28:	dfc00c17 	ldw	ra,48(sp)
  810f2c:	dc400b17 	ldw	r17,44(sp)
  810f30:	dc000a17 	ldw	r16,40(sp)
  810f34:	dec00d04 	addi	sp,sp,52
  810f38:	f800283a 	ret

00810f3c <__ltsf2>:
  810f3c:	defff304 	addi	sp,sp,-52
  810f40:	dc400b15 	stw	r17,44(sp)
  810f44:	dc400204 	addi	r17,sp,8
  810f48:	dc000a15 	stw	r16,40(sp)
  810f4c:	d9000015 	stw	r4,0(sp)
  810f50:	d9400115 	stw	r5,4(sp)
  810f54:	d809883a 	mov	r4,sp
  810f58:	880b883a 	mov	r5,r17
  810f5c:	dc000604 	addi	r16,sp,24
  810f60:	dfc00c15 	stw	ra,48(sp)
  810f64:	0811a380 	call	811a38 <__unpack_f>
  810f68:	d9000104 	addi	r4,sp,4
  810f6c:	800b883a 	mov	r5,r16
  810f70:	0811a380 	call	811a38 <__unpack_f>
  810f74:	d8800217 	ldw	r2,8(sp)
  810f78:	00c00044 	movi	r3,1
  810f7c:	180d883a 	mov	r6,r3
  810f80:	1880062e 	bgeu	r3,r2,810f9c <__ltsf2+0x60>
  810f84:	d8800617 	ldw	r2,24(sp)
  810f88:	8809883a 	mov	r4,r17
  810f8c:	800b883a 	mov	r5,r16
  810f90:	1880022e 	bgeu	r3,r2,810f9c <__ltsf2+0x60>
  810f94:	0811b000 	call	811b00 <__fpcmp_parts_f>
  810f98:	100d883a 	mov	r6,r2
  810f9c:	3005883a 	mov	r2,r6
  810fa0:	dfc00c17 	ldw	ra,48(sp)
  810fa4:	dc400b17 	ldw	r17,44(sp)
  810fa8:	dc000a17 	ldw	r16,40(sp)
  810fac:	dec00d04 	addi	sp,sp,52
  810fb0:	f800283a 	ret

00810fb4 <__muldf3>:
  810fb4:	deffe004 	addi	sp,sp,-128
  810fb8:	dc401815 	stw	r17,96(sp)
  810fbc:	dc400404 	addi	r17,sp,16
  810fc0:	2011883a 	mov	r8,r4
  810fc4:	2813883a 	mov	r9,r5
  810fc8:	dc001715 	stw	r16,92(sp)
  810fcc:	d809883a 	mov	r4,sp
  810fd0:	880b883a 	mov	r5,r17
  810fd4:	dc000904 	addi	r16,sp,36
  810fd8:	dfc01f15 	stw	ra,124(sp)
  810fdc:	da400115 	stw	r9,4(sp)
  810fe0:	d9c00315 	stw	r7,12(sp)
  810fe4:	da000015 	stw	r8,0(sp)
  810fe8:	d9800215 	stw	r6,8(sp)
  810fec:	ddc01e15 	stw	r23,120(sp)
  810ff0:	dd801d15 	stw	r22,116(sp)
  810ff4:	dd401c15 	stw	r21,112(sp)
  810ff8:	dd001b15 	stw	r20,108(sp)
  810ffc:	dcc01a15 	stw	r19,104(sp)
  811000:	dc801915 	stw	r18,100(sp)
  811004:	0802b740 	call	802b74 <__unpack_d>
  811008:	d9000204 	addi	r4,sp,8
  81100c:	800b883a 	mov	r5,r16
  811010:	0802b740 	call	802b74 <__unpack_d>
  811014:	d9000417 	ldw	r4,16(sp)
  811018:	00800044 	movi	r2,1
  81101c:	1100102e 	bgeu	r2,r4,811060 <__muldf3+0xac>
  811020:	d8c00917 	ldw	r3,36(sp)
  811024:	10c0062e 	bgeu	r2,r3,811040 <__muldf3+0x8c>
  811028:	00800104 	movi	r2,4
  81102c:	20800a26 	beq	r4,r2,811058 <__muldf3+0xa4>
  811030:	1880cc26 	beq	r3,r2,811364 <__muldf3+0x3b0>
  811034:	00800084 	movi	r2,2
  811038:	20800926 	beq	r4,r2,811060 <__muldf3+0xac>
  81103c:	1880191e 	bne	r3,r2,8110a4 <__muldf3+0xf0>
  811040:	d8c00a17 	ldw	r3,40(sp)
  811044:	d8800517 	ldw	r2,20(sp)
  811048:	8009883a 	mov	r4,r16
  81104c:	10c4c03a 	cmpne	r2,r2,r3
  811050:	d8800a15 	stw	r2,40(sp)
  811054:	00000706 	br	811074 <__muldf3+0xc0>
  811058:	00800084 	movi	r2,2
  81105c:	1880c326 	beq	r3,r2,81136c <__muldf3+0x3b8>
  811060:	d8800517 	ldw	r2,20(sp)
  811064:	d8c00a17 	ldw	r3,40(sp)
  811068:	8809883a 	mov	r4,r17
  81106c:	10c4c03a 	cmpne	r2,r2,r3
  811070:	d8800515 	stw	r2,20(sp)
  811074:	08028600 	call	802860 <__pack_d>
  811078:	dfc01f17 	ldw	ra,124(sp)
  81107c:	ddc01e17 	ldw	r23,120(sp)
  811080:	dd801d17 	ldw	r22,116(sp)
  811084:	dd401c17 	ldw	r21,112(sp)
  811088:	dd001b17 	ldw	r20,108(sp)
  81108c:	dcc01a17 	ldw	r19,104(sp)
  811090:	dc801917 	ldw	r18,100(sp)
  811094:	dc401817 	ldw	r17,96(sp)
  811098:	dc001717 	ldw	r16,92(sp)
  81109c:	dec02004 	addi	sp,sp,128
  8110a0:	f800283a 	ret
  8110a4:	dd800717 	ldw	r22,28(sp)
  8110a8:	dc800c17 	ldw	r18,48(sp)
  8110ac:	002b883a 	mov	r21,zero
  8110b0:	0023883a 	mov	r17,zero
  8110b4:	a80b883a 	mov	r5,r21
  8110b8:	b00d883a 	mov	r6,r22
  8110bc:	880f883a 	mov	r7,r17
  8110c0:	ddc00817 	ldw	r23,32(sp)
  8110c4:	dcc00d17 	ldw	r19,52(sp)
  8110c8:	9009883a 	mov	r4,r18
  8110cc:	080ffb80 	call	80ffb8 <__muldi3>
  8110d0:	001b883a 	mov	r13,zero
  8110d4:	680f883a 	mov	r7,r13
  8110d8:	b009883a 	mov	r4,r22
  8110dc:	000b883a 	mov	r5,zero
  8110e0:	980d883a 	mov	r6,r19
  8110e4:	b82d883a 	mov	r22,r23
  8110e8:	002f883a 	mov	r23,zero
  8110ec:	db401615 	stw	r13,88(sp)
  8110f0:	d8801315 	stw	r2,76(sp)
  8110f4:	d8c01415 	stw	r3,80(sp)
  8110f8:	dcc01515 	stw	r19,84(sp)
  8110fc:	080ffb80 	call	80ffb8 <__muldi3>
  811100:	b00d883a 	mov	r6,r22
  811104:	000b883a 	mov	r5,zero
  811108:	9009883a 	mov	r4,r18
  81110c:	b80f883a 	mov	r7,r23
  811110:	1021883a 	mov	r16,r2
  811114:	1823883a 	mov	r17,r3
  811118:	080ffb80 	call	80ffb8 <__muldi3>
  81111c:	8085883a 	add	r2,r16,r2
  811120:	140d803a 	cmpltu	r6,r2,r16
  811124:	88c7883a 	add	r3,r17,r3
  811128:	30cd883a 	add	r6,r6,r3
  81112c:	1029883a 	mov	r20,r2
  811130:	302b883a 	mov	r21,r6
  811134:	da801317 	ldw	r10,76(sp)
  811138:	dac01417 	ldw	r11,80(sp)
  81113c:	db001517 	ldw	r12,84(sp)
  811140:	db401617 	ldw	r13,88(sp)
  811144:	3440612e 	bgeu	r6,r17,8112cc <__muldf3+0x318>
  811148:	0009883a 	mov	r4,zero
  81114c:	5105883a 	add	r2,r10,r4
  811150:	128d803a 	cmpltu	r6,r2,r10
  811154:	5d07883a 	add	r3,r11,r20
  811158:	30cd883a 	add	r6,r6,r3
  81115c:	0021883a 	mov	r16,zero
  811160:	04400044 	movi	r17,1
  811164:	1025883a 	mov	r18,r2
  811168:	3027883a 	mov	r19,r6
  81116c:	32c06236 	bltu	r6,r11,8112f8 <__muldf3+0x344>
  811170:	59807a26 	beq	r11,r6,81135c <__muldf3+0x3a8>
  811174:	680b883a 	mov	r5,r13
  811178:	b80f883a 	mov	r7,r23
  81117c:	6009883a 	mov	r4,r12
  811180:	b00d883a 	mov	r6,r22
  811184:	080ffb80 	call	80ffb8 <__muldi3>
  811188:	1009883a 	mov	r4,r2
  81118c:	000f883a 	mov	r7,zero
  811190:	1545883a 	add	r2,r2,r21
  811194:	1111803a 	cmpltu	r8,r2,r4
  811198:	19c7883a 	add	r3,r3,r7
  81119c:	40c7883a 	add	r3,r8,r3
  8111a0:	88cb883a 	add	r5,r17,r3
  8111a4:	d8c00617 	ldw	r3,24(sp)
  8111a8:	8089883a 	add	r4,r16,r2
  8111ac:	d8800b17 	ldw	r2,44(sp)
  8111b0:	18c00104 	addi	r3,r3,4
  8111b4:	240d803a 	cmpltu	r6,r4,r16
  8111b8:	10c7883a 	add	r3,r2,r3
  8111bc:	2013883a 	mov	r9,r4
  8111c0:	d8800a17 	ldw	r2,40(sp)
  8111c4:	d9000517 	ldw	r4,20(sp)
  8111c8:	314d883a 	add	r6,r6,r5
  8111cc:	3015883a 	mov	r10,r6
  8111d0:	2088c03a 	cmpne	r4,r4,r2
  8111d4:	00880034 	movhi	r2,8192
  8111d8:	10bfffc4 	addi	r2,r2,-1
  8111dc:	d9000f15 	stw	r4,60(sp)
  8111e0:	d8c01015 	stw	r3,64(sp)
  8111e4:	1180162e 	bgeu	r2,r6,811240 <__muldf3+0x28c>
  8111e8:	1811883a 	mov	r8,r3
  8111ec:	101f883a 	mov	r15,r2
  8111f0:	980497fa 	slli	r2,r19,31
  8111f4:	9016d07a 	srli	r11,r18,1
  8111f8:	500697fa 	slli	r3,r10,31
  8111fc:	480cd07a 	srli	r6,r9,1
  811200:	500ed07a 	srli	r7,r10,1
  811204:	12d6b03a 	or	r11,r2,r11
  811208:	00800044 	movi	r2,1
  81120c:	198cb03a 	or	r6,r3,r6
  811210:	4888703a 	and	r4,r9,r2
  811214:	9818d07a 	srli	r12,r19,1
  811218:	001b883a 	mov	r13,zero
  81121c:	03a00034 	movhi	r14,32768
  811220:	3013883a 	mov	r9,r6
  811224:	3815883a 	mov	r10,r7
  811228:	4091883a 	add	r8,r8,r2
  81122c:	20000226 	beq	r4,zero,811238 <__muldf3+0x284>
  811230:	5b64b03a 	or	r18,r11,r13
  811234:	63a6b03a 	or	r19,r12,r14
  811238:	7abfed36 	bltu	r15,r10,8111f0 <__muldf3+0x23c>
  81123c:	da001015 	stw	r8,64(sp)
  811240:	00840034 	movhi	r2,4096
  811244:	10bfffc4 	addi	r2,r2,-1
  811248:	12801436 	bltu	r2,r10,81129c <__muldf3+0x2e8>
  81124c:	da001017 	ldw	r8,64(sp)
  811250:	101f883a 	mov	r15,r2
  811254:	4a45883a 	add	r2,r9,r9
  811258:	124d803a 	cmpltu	r6,r2,r9
  81125c:	5287883a 	add	r3,r10,r10
  811260:	9497883a 	add	r11,r18,r18
  811264:	5c8f803a 	cmpltu	r7,r11,r18
  811268:	9cd9883a 	add	r12,r19,r19
  81126c:	01000044 	movi	r4,1
  811270:	30cd883a 	add	r6,r6,r3
  811274:	3b0f883a 	add	r7,r7,r12
  811278:	423fffc4 	addi	r8,r8,-1
  81127c:	1013883a 	mov	r9,r2
  811280:	3015883a 	mov	r10,r6
  811284:	111ab03a 	or	r13,r2,r4
  811288:	98003016 	blt	r19,zero,81134c <__muldf3+0x398>
  81128c:	5825883a 	mov	r18,r11
  811290:	3827883a 	mov	r19,r7
  811294:	7abfef2e 	bgeu	r15,r10,811254 <__muldf3+0x2a0>
  811298:	da001015 	stw	r8,64(sp)
  81129c:	00803fc4 	movi	r2,255
  8112a0:	488e703a 	and	r7,r9,r2
  8112a4:	00802004 	movi	r2,128
  8112a8:	0007883a 	mov	r3,zero
  8112ac:	0011883a 	mov	r8,zero
  8112b0:	38801826 	beq	r7,r2,811314 <__muldf3+0x360>
  8112b4:	008000c4 	movi	r2,3
  8112b8:	d9000e04 	addi	r4,sp,56
  8112bc:	da801215 	stw	r10,72(sp)
  8112c0:	d8800e15 	stw	r2,56(sp)
  8112c4:	da401115 	stw	r9,68(sp)
  8112c8:	003f6a06 	br	811074 <__muldf3+0xc0>
  8112cc:	89802126 	beq	r17,r6,811354 <__muldf3+0x3a0>
  8112d0:	0009883a 	mov	r4,zero
  8112d4:	5105883a 	add	r2,r10,r4
  8112d8:	128d803a 	cmpltu	r6,r2,r10
  8112dc:	5d07883a 	add	r3,r11,r20
  8112e0:	30cd883a 	add	r6,r6,r3
  8112e4:	0021883a 	mov	r16,zero
  8112e8:	0023883a 	mov	r17,zero
  8112ec:	1025883a 	mov	r18,r2
  8112f0:	3027883a 	mov	r19,r6
  8112f4:	32ff9e2e 	bgeu	r6,r11,811170 <__muldf3+0x1bc>
  8112f8:	00800044 	movi	r2,1
  8112fc:	8089883a 	add	r4,r16,r2
  811300:	240d803a 	cmpltu	r6,r4,r16
  811304:	344d883a 	add	r6,r6,r17
  811308:	2021883a 	mov	r16,r4
  81130c:	3023883a 	mov	r17,r6
  811310:	003f9806 	br	811174 <__muldf3+0x1c0>
  811314:	403fe71e 	bne	r8,zero,8112b4 <__muldf3+0x300>
  811318:	01004004 	movi	r4,256
  81131c:	4904703a 	and	r2,r9,r4
  811320:	10c4b03a 	or	r2,r2,r3
  811324:	103fe31e 	bne	r2,zero,8112b4 <__muldf3+0x300>
  811328:	94c4b03a 	or	r2,r18,r19
  81132c:	103fe126 	beq	r2,zero,8112b4 <__muldf3+0x300>
  811330:	49c5883a 	add	r2,r9,r7
  811334:	1251803a 	cmpltu	r8,r2,r9
  811338:	4291883a 	add	r8,r8,r10
  81133c:	013fc004 	movi	r4,-256
  811340:	1112703a 	and	r9,r2,r4
  811344:	4015883a 	mov	r10,r8
  811348:	003fda06 	br	8112b4 <__muldf3+0x300>
  81134c:	6813883a 	mov	r9,r13
  811350:	003fce06 	br	81128c <__muldf3+0x2d8>
  811354:	143f7c36 	bltu	r2,r16,811148 <__muldf3+0x194>
  811358:	003fdd06 	br	8112d0 <__muldf3+0x31c>
  81135c:	12bf852e 	bgeu	r2,r10,811174 <__muldf3+0x1c0>
  811360:	003fe506 	br	8112f8 <__muldf3+0x344>
  811364:	00800084 	movi	r2,2
  811368:	20bf351e 	bne	r4,r2,811040 <__muldf3+0x8c>
  81136c:	01002074 	movhi	r4,129
  811370:	2113f204 	addi	r4,r4,20424
  811374:	003f3f06 	br	811074 <__muldf3+0xc0>

00811378 <__eqdf2>:
  811378:	deffef04 	addi	sp,sp,-68
  81137c:	dc400f15 	stw	r17,60(sp)
  811380:	dc400404 	addi	r17,sp,16
  811384:	2005883a 	mov	r2,r4
  811388:	2807883a 	mov	r3,r5
  81138c:	dc000e15 	stw	r16,56(sp)
  811390:	d809883a 	mov	r4,sp
  811394:	880b883a 	mov	r5,r17
  811398:	dc000904 	addi	r16,sp,36
  81139c:	d8c00115 	stw	r3,4(sp)
  8113a0:	d8800015 	stw	r2,0(sp)
  8113a4:	d9800215 	stw	r6,8(sp)
  8113a8:	dfc01015 	stw	ra,64(sp)
  8113ac:	d9c00315 	stw	r7,12(sp)
  8113b0:	0802b740 	call	802b74 <__unpack_d>
  8113b4:	d9000204 	addi	r4,sp,8
  8113b8:	800b883a 	mov	r5,r16
  8113bc:	0802b740 	call	802b74 <__unpack_d>
  8113c0:	d8800417 	ldw	r2,16(sp)
  8113c4:	00c00044 	movi	r3,1
  8113c8:	180d883a 	mov	r6,r3
  8113cc:	1880062e 	bgeu	r3,r2,8113e8 <__eqdf2+0x70>
  8113d0:	d8800917 	ldw	r2,36(sp)
  8113d4:	8809883a 	mov	r4,r17
  8113d8:	800b883a 	mov	r5,r16
  8113dc:	1880022e 	bgeu	r3,r2,8113e8 <__eqdf2+0x70>
  8113e0:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  8113e4:	100d883a 	mov	r6,r2
  8113e8:	3005883a 	mov	r2,r6
  8113ec:	dfc01017 	ldw	ra,64(sp)
  8113f0:	dc400f17 	ldw	r17,60(sp)
  8113f4:	dc000e17 	ldw	r16,56(sp)
  8113f8:	dec01104 	addi	sp,sp,68
  8113fc:	f800283a 	ret

00811400 <__nedf2>:
  811400:	deffef04 	addi	sp,sp,-68
  811404:	dc400f15 	stw	r17,60(sp)
  811408:	dc400404 	addi	r17,sp,16
  81140c:	2005883a 	mov	r2,r4
  811410:	2807883a 	mov	r3,r5
  811414:	dc000e15 	stw	r16,56(sp)
  811418:	d809883a 	mov	r4,sp
  81141c:	880b883a 	mov	r5,r17
  811420:	dc000904 	addi	r16,sp,36
  811424:	d8c00115 	stw	r3,4(sp)
  811428:	d8800015 	stw	r2,0(sp)
  81142c:	d9800215 	stw	r6,8(sp)
  811430:	dfc01015 	stw	ra,64(sp)
  811434:	d9c00315 	stw	r7,12(sp)
  811438:	0802b740 	call	802b74 <__unpack_d>
  81143c:	d9000204 	addi	r4,sp,8
  811440:	800b883a 	mov	r5,r16
  811444:	0802b740 	call	802b74 <__unpack_d>
  811448:	d8800417 	ldw	r2,16(sp)
  81144c:	00c00044 	movi	r3,1
  811450:	180d883a 	mov	r6,r3
  811454:	1880062e 	bgeu	r3,r2,811470 <__nedf2+0x70>
  811458:	d8800917 	ldw	r2,36(sp)
  81145c:	8809883a 	mov	r4,r17
  811460:	800b883a 	mov	r5,r16
  811464:	1880022e 	bgeu	r3,r2,811470 <__nedf2+0x70>
  811468:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  81146c:	100d883a 	mov	r6,r2
  811470:	3005883a 	mov	r2,r6
  811474:	dfc01017 	ldw	ra,64(sp)
  811478:	dc400f17 	ldw	r17,60(sp)
  81147c:	dc000e17 	ldw	r16,56(sp)
  811480:	dec01104 	addi	sp,sp,68
  811484:	f800283a 	ret

00811488 <__gtdf2>:
  811488:	deffef04 	addi	sp,sp,-68
  81148c:	dc400f15 	stw	r17,60(sp)
  811490:	dc400404 	addi	r17,sp,16
  811494:	2005883a 	mov	r2,r4
  811498:	2807883a 	mov	r3,r5
  81149c:	dc000e15 	stw	r16,56(sp)
  8114a0:	d809883a 	mov	r4,sp
  8114a4:	880b883a 	mov	r5,r17
  8114a8:	dc000904 	addi	r16,sp,36
  8114ac:	d8c00115 	stw	r3,4(sp)
  8114b0:	d8800015 	stw	r2,0(sp)
  8114b4:	d9800215 	stw	r6,8(sp)
  8114b8:	dfc01015 	stw	ra,64(sp)
  8114bc:	d9c00315 	stw	r7,12(sp)
  8114c0:	0802b740 	call	802b74 <__unpack_d>
  8114c4:	d9000204 	addi	r4,sp,8
  8114c8:	800b883a 	mov	r5,r16
  8114cc:	0802b740 	call	802b74 <__unpack_d>
  8114d0:	d8800417 	ldw	r2,16(sp)
  8114d4:	00c00044 	movi	r3,1
  8114d8:	01bfffc4 	movi	r6,-1
  8114dc:	1880062e 	bgeu	r3,r2,8114f8 <__gtdf2+0x70>
  8114e0:	d8800917 	ldw	r2,36(sp)
  8114e4:	8809883a 	mov	r4,r17
  8114e8:	800b883a 	mov	r5,r16
  8114ec:	1880022e 	bgeu	r3,r2,8114f8 <__gtdf2+0x70>
  8114f0:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  8114f4:	100d883a 	mov	r6,r2
  8114f8:	3005883a 	mov	r2,r6
  8114fc:	dfc01017 	ldw	ra,64(sp)
  811500:	dc400f17 	ldw	r17,60(sp)
  811504:	dc000e17 	ldw	r16,56(sp)
  811508:	dec01104 	addi	sp,sp,68
  81150c:	f800283a 	ret

00811510 <__gedf2>:
  811510:	deffef04 	addi	sp,sp,-68
  811514:	dc400f15 	stw	r17,60(sp)
  811518:	dc400404 	addi	r17,sp,16
  81151c:	2005883a 	mov	r2,r4
  811520:	2807883a 	mov	r3,r5
  811524:	dc000e15 	stw	r16,56(sp)
  811528:	d809883a 	mov	r4,sp
  81152c:	880b883a 	mov	r5,r17
  811530:	dc000904 	addi	r16,sp,36
  811534:	d8c00115 	stw	r3,4(sp)
  811538:	d8800015 	stw	r2,0(sp)
  81153c:	d9800215 	stw	r6,8(sp)
  811540:	dfc01015 	stw	ra,64(sp)
  811544:	d9c00315 	stw	r7,12(sp)
  811548:	0802b740 	call	802b74 <__unpack_d>
  81154c:	d9000204 	addi	r4,sp,8
  811550:	800b883a 	mov	r5,r16
  811554:	0802b740 	call	802b74 <__unpack_d>
  811558:	d8800417 	ldw	r2,16(sp)
  81155c:	00c00044 	movi	r3,1
  811560:	01bfffc4 	movi	r6,-1
  811564:	1880062e 	bgeu	r3,r2,811580 <__gedf2+0x70>
  811568:	d8800917 	ldw	r2,36(sp)
  81156c:	8809883a 	mov	r4,r17
  811570:	800b883a 	mov	r5,r16
  811574:	1880022e 	bgeu	r3,r2,811580 <__gedf2+0x70>
  811578:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  81157c:	100d883a 	mov	r6,r2
  811580:	3005883a 	mov	r2,r6
  811584:	dfc01017 	ldw	ra,64(sp)
  811588:	dc400f17 	ldw	r17,60(sp)
  81158c:	dc000e17 	ldw	r16,56(sp)
  811590:	dec01104 	addi	sp,sp,68
  811594:	f800283a 	ret

00811598 <__ltdf2>:
  811598:	deffef04 	addi	sp,sp,-68
  81159c:	dc400f15 	stw	r17,60(sp)
  8115a0:	dc400404 	addi	r17,sp,16
  8115a4:	2005883a 	mov	r2,r4
  8115a8:	2807883a 	mov	r3,r5
  8115ac:	dc000e15 	stw	r16,56(sp)
  8115b0:	d809883a 	mov	r4,sp
  8115b4:	880b883a 	mov	r5,r17
  8115b8:	dc000904 	addi	r16,sp,36
  8115bc:	d8c00115 	stw	r3,4(sp)
  8115c0:	d8800015 	stw	r2,0(sp)
  8115c4:	d9800215 	stw	r6,8(sp)
  8115c8:	dfc01015 	stw	ra,64(sp)
  8115cc:	d9c00315 	stw	r7,12(sp)
  8115d0:	0802b740 	call	802b74 <__unpack_d>
  8115d4:	d9000204 	addi	r4,sp,8
  8115d8:	800b883a 	mov	r5,r16
  8115dc:	0802b740 	call	802b74 <__unpack_d>
  8115e0:	d8800417 	ldw	r2,16(sp)
  8115e4:	00c00044 	movi	r3,1
  8115e8:	180d883a 	mov	r6,r3
  8115ec:	1880062e 	bgeu	r3,r2,811608 <__ltdf2+0x70>
  8115f0:	d8800917 	ldw	r2,36(sp)
  8115f4:	8809883a 	mov	r4,r17
  8115f8:	800b883a 	mov	r5,r16
  8115fc:	1880022e 	bgeu	r3,r2,811608 <__ltdf2+0x70>
  811600:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  811604:	100d883a 	mov	r6,r2
  811608:	3005883a 	mov	r2,r6
  81160c:	dfc01017 	ldw	ra,64(sp)
  811610:	dc400f17 	ldw	r17,60(sp)
  811614:	dc000e17 	ldw	r16,56(sp)
  811618:	dec01104 	addi	sp,sp,68
  81161c:	f800283a 	ret

00811620 <__ledf2>:
  811620:	deffef04 	addi	sp,sp,-68
  811624:	dc400f15 	stw	r17,60(sp)
  811628:	dc400404 	addi	r17,sp,16
  81162c:	2005883a 	mov	r2,r4
  811630:	2807883a 	mov	r3,r5
  811634:	dc000e15 	stw	r16,56(sp)
  811638:	d809883a 	mov	r4,sp
  81163c:	880b883a 	mov	r5,r17
  811640:	dc000904 	addi	r16,sp,36
  811644:	d8c00115 	stw	r3,4(sp)
  811648:	d8800015 	stw	r2,0(sp)
  81164c:	d9800215 	stw	r6,8(sp)
  811650:	dfc01015 	stw	ra,64(sp)
  811654:	d9c00315 	stw	r7,12(sp)
  811658:	0802b740 	call	802b74 <__unpack_d>
  81165c:	d9000204 	addi	r4,sp,8
  811660:	800b883a 	mov	r5,r16
  811664:	0802b740 	call	802b74 <__unpack_d>
  811668:	d8800417 	ldw	r2,16(sp)
  81166c:	00c00044 	movi	r3,1
  811670:	180d883a 	mov	r6,r3
  811674:	1880062e 	bgeu	r3,r2,811690 <__ledf2+0x70>
  811678:	d8800917 	ldw	r2,36(sp)
  81167c:	8809883a 	mov	r4,r17
  811680:	800b883a 	mov	r5,r16
  811684:	1880022e 	bgeu	r3,r2,811690 <__ledf2+0x70>
  811688:	0811bd40 	call	811bd4 <__fpcmp_parts_d>
  81168c:	100d883a 	mov	r6,r2
  811690:	3005883a 	mov	r2,r6
  811694:	dfc01017 	ldw	ra,64(sp)
  811698:	dc400f17 	ldw	r17,60(sp)
  81169c:	dc000e17 	ldw	r16,56(sp)
  8116a0:	dec01104 	addi	sp,sp,68
  8116a4:	f800283a 	ret

008116a8 <__floatsidf>:
  8116a8:	2006d7fa 	srli	r3,r4,31
  8116ac:	defff604 	addi	sp,sp,-40
  8116b0:	008000c4 	movi	r2,3
  8116b4:	dfc00915 	stw	ra,36(sp)
  8116b8:	dcc00815 	stw	r19,32(sp)
  8116bc:	dc800715 	stw	r18,28(sp)
  8116c0:	dc400615 	stw	r17,24(sp)
  8116c4:	dc000515 	stw	r16,20(sp)
  8116c8:	d8800015 	stw	r2,0(sp)
  8116cc:	d8c00115 	stw	r3,4(sp)
  8116d0:	20000f1e 	bne	r4,zero,811710 <__floatsidf+0x68>
  8116d4:	00800084 	movi	r2,2
  8116d8:	d8800015 	stw	r2,0(sp)
  8116dc:	d809883a 	mov	r4,sp
  8116e0:	08028600 	call	802860 <__pack_d>
  8116e4:	1009883a 	mov	r4,r2
  8116e8:	180b883a 	mov	r5,r3
  8116ec:	2005883a 	mov	r2,r4
  8116f0:	2807883a 	mov	r3,r5
  8116f4:	dfc00917 	ldw	ra,36(sp)
  8116f8:	dcc00817 	ldw	r19,32(sp)
  8116fc:	dc800717 	ldw	r18,28(sp)
  811700:	dc400617 	ldw	r17,24(sp)
  811704:	dc000517 	ldw	r16,20(sp)
  811708:	dec00a04 	addi	sp,sp,40
  81170c:	f800283a 	ret
  811710:	00800f04 	movi	r2,60
  811714:	1807003a 	cmpeq	r3,r3,zero
  811718:	d8800215 	stw	r2,8(sp)
  81171c:	18001126 	beq	r3,zero,811764 <__floatsidf+0xbc>
  811720:	0027883a 	mov	r19,zero
  811724:	2025883a 	mov	r18,r4
  811728:	d9000315 	stw	r4,12(sp)
  81172c:	dcc00415 	stw	r19,16(sp)
  811730:	08027e00 	call	8027e0 <__clzsi2>
  811734:	11000744 	addi	r4,r2,29
  811738:	013fe80e 	bge	zero,r4,8116dc <__floatsidf+0x34>
  81173c:	10bfff44 	addi	r2,r2,-3
  811740:	10000c16 	blt	r2,zero,811774 <__floatsidf+0xcc>
  811744:	90a2983a 	sll	r17,r18,r2
  811748:	0021883a 	mov	r16,zero
  81174c:	d8800217 	ldw	r2,8(sp)
  811750:	dc400415 	stw	r17,16(sp)
  811754:	dc000315 	stw	r16,12(sp)
  811758:	1105c83a 	sub	r2,r2,r4
  81175c:	d8800215 	stw	r2,8(sp)
  811760:	003fde06 	br	8116dc <__floatsidf+0x34>
  811764:	00a00034 	movhi	r2,32768
  811768:	20800a26 	beq	r4,r2,811794 <__floatsidf+0xec>
  81176c:	0109c83a 	sub	r4,zero,r4
  811770:	003feb06 	br	811720 <__floatsidf+0x78>
  811774:	9006d07a 	srli	r3,r18,1
  811778:	008007c4 	movi	r2,31
  81177c:	1105c83a 	sub	r2,r2,r4
  811780:	1886d83a 	srl	r3,r3,r2
  811784:	9922983a 	sll	r17,r19,r4
  811788:	9120983a 	sll	r16,r18,r4
  81178c:	1c62b03a 	or	r17,r3,r17
  811790:	003fee06 	br	81174c <__floatsidf+0xa4>
  811794:	0009883a 	mov	r4,zero
  811798:	01707834 	movhi	r5,49632
  81179c:	003fd306 	br	8116ec <__floatsidf+0x44>

008117a0 <__fixdfsi>:
  8117a0:	defff804 	addi	sp,sp,-32
  8117a4:	2005883a 	mov	r2,r4
  8117a8:	2807883a 	mov	r3,r5
  8117ac:	d809883a 	mov	r4,sp
  8117b0:	d9400204 	addi	r5,sp,8
  8117b4:	d8c00115 	stw	r3,4(sp)
  8117b8:	d8800015 	stw	r2,0(sp)
  8117bc:	dfc00715 	stw	ra,28(sp)
  8117c0:	0802b740 	call	802b74 <__unpack_d>
  8117c4:	d8c00217 	ldw	r3,8(sp)
  8117c8:	00800084 	movi	r2,2
  8117cc:	1880051e 	bne	r3,r2,8117e4 <__fixdfsi+0x44>
  8117d0:	0007883a 	mov	r3,zero
  8117d4:	1805883a 	mov	r2,r3
  8117d8:	dfc00717 	ldw	ra,28(sp)
  8117dc:	dec00804 	addi	sp,sp,32
  8117e0:	f800283a 	ret
  8117e4:	00800044 	movi	r2,1
  8117e8:	10fff92e 	bgeu	r2,r3,8117d0 <__fixdfsi+0x30>
  8117ec:	00800104 	movi	r2,4
  8117f0:	18800426 	beq	r3,r2,811804 <__fixdfsi+0x64>
  8117f4:	d8c00417 	ldw	r3,16(sp)
  8117f8:	183ff516 	blt	r3,zero,8117d0 <__fixdfsi+0x30>
  8117fc:	00800784 	movi	r2,30
  811800:	10c0080e 	bge	r2,r3,811824 <__fixdfsi+0x84>
  811804:	d8800317 	ldw	r2,12(sp)
  811808:	1000121e 	bne	r2,zero,811854 <__fixdfsi+0xb4>
  81180c:	00e00034 	movhi	r3,32768
  811810:	18ffffc4 	addi	r3,r3,-1
  811814:	1805883a 	mov	r2,r3
  811818:	dfc00717 	ldw	ra,28(sp)
  81181c:	dec00804 	addi	sp,sp,32
  811820:	f800283a 	ret
  811824:	00800f04 	movi	r2,60
  811828:	10d1c83a 	sub	r8,r2,r3
  81182c:	40bff804 	addi	r2,r8,-32
  811830:	d9800517 	ldw	r6,20(sp)
  811834:	d9c00617 	ldw	r7,24(sp)
  811838:	10000816 	blt	r2,zero,81185c <__fixdfsi+0xbc>
  81183c:	3888d83a 	srl	r4,r7,r2
  811840:	d8800317 	ldw	r2,12(sp)
  811844:	2007883a 	mov	r3,r4
  811848:	103fe226 	beq	r2,zero,8117d4 <__fixdfsi+0x34>
  81184c:	0107c83a 	sub	r3,zero,r4
  811850:	003fe006 	br	8117d4 <__fixdfsi+0x34>
  811854:	00e00034 	movhi	r3,32768
  811858:	003fde06 	br	8117d4 <__fixdfsi+0x34>
  81185c:	39c7883a 	add	r3,r7,r7
  811860:	008007c4 	movi	r2,31
  811864:	1205c83a 	sub	r2,r2,r8
  811868:	1886983a 	sll	r3,r3,r2
  81186c:	3208d83a 	srl	r4,r6,r8
  811870:	1908b03a 	or	r4,r3,r4
  811874:	003ff206 	br	811840 <__fixdfsi+0xa0>

00811878 <__truncdfsf2>:
  811878:	defff804 	addi	sp,sp,-32
  81187c:	2005883a 	mov	r2,r4
  811880:	2807883a 	mov	r3,r5
  811884:	d809883a 	mov	r4,sp
  811888:	d9400204 	addi	r5,sp,8
  81188c:	d8c00115 	stw	r3,4(sp)
  811890:	d8800015 	stw	r2,0(sp)
  811894:	dfc00715 	stw	ra,28(sp)
  811898:	0802b740 	call	802b74 <__unpack_d>
  81189c:	d9c00517 	ldw	r7,20(sp)
  8118a0:	da000617 	ldw	r8,24(sp)
  8118a4:	02d00034 	movhi	r11,16384
  8118a8:	5affffc4 	addi	r11,r11,-1
  8118ac:	3812d7ba 	srli	r9,r7,30
  8118b0:	401a90ba 	slli	r13,r8,2
  8118b4:	3ac4703a 	and	r2,r7,r11
  8118b8:	0007883a 	mov	r3,zero
  8118bc:	6a52b03a 	or	r9,r13,r9
  8118c0:	10c4b03a 	or	r2,r2,r3
  8118c4:	d9000217 	ldw	r4,8(sp)
  8118c8:	d9400317 	ldw	r5,12(sp)
  8118cc:	d9800417 	ldw	r6,16(sp)
  8118d0:	480f883a 	mov	r7,r9
  8118d4:	10000126 	beq	r2,zero,8118dc <__truncdfsf2+0x64>
  8118d8:	49c00054 	ori	r7,r9,1
  8118dc:	0811ba80 	call	811ba8 <__make_fp>
  8118e0:	dfc00717 	ldw	ra,28(sp)
  8118e4:	dec00804 	addi	sp,sp,32
  8118e8:	f800283a 	ret

008118ec <udivmodsi4>:
  8118ec:	29001b2e 	bgeu	r5,r4,81195c <udivmodsi4+0x70>
  8118f0:	28001a16 	blt	r5,zero,81195c <udivmodsi4+0x70>
  8118f4:	00800044 	movi	r2,1
  8118f8:	0007883a 	mov	r3,zero
  8118fc:	01c007c4 	movi	r7,31
  811900:	00000306 	br	811910 <udivmodsi4+0x24>
  811904:	19c01326 	beq	r3,r7,811954 <udivmodsi4+0x68>
  811908:	18c00044 	addi	r3,r3,1
  81190c:	28000416 	blt	r5,zero,811920 <udivmodsi4+0x34>
  811910:	294b883a 	add	r5,r5,r5
  811914:	1085883a 	add	r2,r2,r2
  811918:	293ffa36 	bltu	r5,r4,811904 <udivmodsi4+0x18>
  81191c:	10000d26 	beq	r2,zero,811954 <udivmodsi4+0x68>
  811920:	0007883a 	mov	r3,zero
  811924:	21400236 	bltu	r4,r5,811930 <udivmodsi4+0x44>
  811928:	2149c83a 	sub	r4,r4,r5
  81192c:	1886b03a 	or	r3,r3,r2
  811930:	1004d07a 	srli	r2,r2,1
  811934:	280ad07a 	srli	r5,r5,1
  811938:	103ffa1e 	bne	r2,zero,811924 <udivmodsi4+0x38>
  81193c:	30000226 	beq	r6,zero,811948 <udivmodsi4+0x5c>
  811940:	2005883a 	mov	r2,r4
  811944:	f800283a 	ret
  811948:	1809883a 	mov	r4,r3
  81194c:	2005883a 	mov	r2,r4
  811950:	f800283a 	ret
  811954:	0007883a 	mov	r3,zero
  811958:	003ff806 	br	81193c <udivmodsi4+0x50>
  81195c:	00800044 	movi	r2,1
  811960:	0007883a 	mov	r3,zero
  811964:	003fef06 	br	811924 <udivmodsi4+0x38>

00811968 <__divsi3>:
  811968:	defffe04 	addi	sp,sp,-8
  81196c:	dc000015 	stw	r16,0(sp)
  811970:	dfc00115 	stw	ra,4(sp)
  811974:	0021883a 	mov	r16,zero
  811978:	20000c16 	blt	r4,zero,8119ac <__divsi3+0x44>
  81197c:	000d883a 	mov	r6,zero
  811980:	28000e16 	blt	r5,zero,8119bc <__divsi3+0x54>
  811984:	08118ec0 	call	8118ec <udivmodsi4>
  811988:	1007883a 	mov	r3,r2
  81198c:	8005003a 	cmpeq	r2,r16,zero
  811990:	1000011e 	bne	r2,zero,811998 <__divsi3+0x30>
  811994:	00c7c83a 	sub	r3,zero,r3
  811998:	1805883a 	mov	r2,r3
  81199c:	dfc00117 	ldw	ra,4(sp)
  8119a0:	dc000017 	ldw	r16,0(sp)
  8119a4:	dec00204 	addi	sp,sp,8
  8119a8:	f800283a 	ret
  8119ac:	0109c83a 	sub	r4,zero,r4
  8119b0:	04000044 	movi	r16,1
  8119b4:	000d883a 	mov	r6,zero
  8119b8:	283ff20e 	bge	r5,zero,811984 <__divsi3+0x1c>
  8119bc:	014bc83a 	sub	r5,zero,r5
  8119c0:	8021003a 	cmpeq	r16,r16,zero
  8119c4:	003fef06 	br	811984 <__divsi3+0x1c>

008119c8 <__modsi3>:
  8119c8:	deffff04 	addi	sp,sp,-4
  8119cc:	dfc00015 	stw	ra,0(sp)
  8119d0:	01800044 	movi	r6,1
  8119d4:	2807883a 	mov	r3,r5
  8119d8:	20000416 	blt	r4,zero,8119ec <__modsi3+0x24>
  8119dc:	28000c16 	blt	r5,zero,811a10 <__modsi3+0x48>
  8119e0:	dfc00017 	ldw	ra,0(sp)
  8119e4:	dec00104 	addi	sp,sp,4
  8119e8:	08118ec1 	jmpi	8118ec <udivmodsi4>
  8119ec:	0109c83a 	sub	r4,zero,r4
  8119f0:	28000b16 	blt	r5,zero,811a20 <__modsi3+0x58>
  8119f4:	180b883a 	mov	r5,r3
  8119f8:	01800044 	movi	r6,1
  8119fc:	08118ec0 	call	8118ec <udivmodsi4>
  811a00:	0085c83a 	sub	r2,zero,r2
  811a04:	dfc00017 	ldw	ra,0(sp)
  811a08:	dec00104 	addi	sp,sp,4
  811a0c:	f800283a 	ret
  811a10:	014bc83a 	sub	r5,zero,r5
  811a14:	dfc00017 	ldw	ra,0(sp)
  811a18:	dec00104 	addi	sp,sp,4
  811a1c:	08118ec1 	jmpi	8118ec <udivmodsi4>
  811a20:	0147c83a 	sub	r3,zero,r5
  811a24:	003ff306 	br	8119f4 <__modsi3+0x2c>

00811a28 <__udivsi3>:
  811a28:	000d883a 	mov	r6,zero
  811a2c:	08118ec1 	jmpi	8118ec <udivmodsi4>

00811a30 <__umodsi3>:
  811a30:	01800044 	movi	r6,1
  811a34:	08118ec1 	jmpi	8118ec <udivmodsi4>

00811a38 <__unpack_f>:
  811a38:	21800017 	ldw	r6,0(r4)
  811a3c:	00c02034 	movhi	r3,128
  811a40:	18ffffc4 	addi	r3,r3,-1
  811a44:	3004d5fa 	srli	r2,r6,23
  811a48:	3008d7fa 	srli	r4,r6,31
  811a4c:	30ce703a 	and	r7,r6,r3
  811a50:	10c03fcc 	andi	r3,r2,255
  811a54:	29000115 	stw	r4,4(r5)
  811a58:	1800131e 	bne	r3,zero,811aa8 <__unpack_f+0x70>
  811a5c:	38000f26 	beq	r7,zero,811a9c <__unpack_f+0x64>
  811a60:	380691fa 	slli	r3,r7,7
  811a64:	01bfe084 	movi	r6,-126
  811a68:	008000c4 	movi	r2,3
  811a6c:	01100034 	movhi	r4,16384
  811a70:	213fffc4 	addi	r4,r4,-1
  811a74:	28800015 	stw	r2,0(r5)
  811a78:	29800215 	stw	r6,8(r5)
  811a7c:	20c00536 	bltu	r4,r3,811a94 <__unpack_f+0x5c>
  811a80:	3005883a 	mov	r2,r6
  811a84:	18c7883a 	add	r3,r3,r3
  811a88:	10bfffc4 	addi	r2,r2,-1
  811a8c:	20fffd2e 	bgeu	r4,r3,811a84 <__unpack_f+0x4c>
  811a90:	28800215 	stw	r2,8(r5)
  811a94:	28c00315 	stw	r3,12(r5)
  811a98:	f800283a 	ret
  811a9c:	00800084 	movi	r2,2
  811aa0:	28800015 	stw	r2,0(r5)
  811aa4:	f800283a 	ret
  811aa8:	00803fc4 	movi	r2,255
  811aac:	18800826 	beq	r3,r2,811ad0 <__unpack_f+0x98>
  811ab0:	380491fa 	slli	r2,r7,7
  811ab4:	18ffe044 	addi	r3,r3,-127
  811ab8:	28c00215 	stw	r3,8(r5)
  811abc:	10900034 	orhi	r2,r2,16384
  811ac0:	28800315 	stw	r2,12(r5)
  811ac4:	008000c4 	movi	r2,3
  811ac8:	28800015 	stw	r2,0(r5)
  811acc:	f800283a 	ret
  811ad0:	3800031e 	bne	r7,zero,811ae0 <__unpack_f+0xa8>
  811ad4:	00800104 	movi	r2,4
  811ad8:	28800015 	stw	r2,0(r5)
  811adc:	f800283a 	ret
  811ae0:	3080042c 	andhi	r2,r6,16
  811ae4:	10000426 	beq	r2,zero,811af8 <__unpack_f+0xc0>
  811ae8:	00800044 	movi	r2,1
  811aec:	28800015 	stw	r2,0(r5)
  811af0:	29c00315 	stw	r7,12(r5)
  811af4:	f800283a 	ret
  811af8:	28000015 	stw	zero,0(r5)
  811afc:	003ffc06 	br	811af0 <__unpack_f+0xb8>

00811b00 <__fpcmp_parts_f>:
  811b00:	21800017 	ldw	r6,0(r4)
  811b04:	00c00044 	movi	r3,1
  811b08:	19800a2e 	bgeu	r3,r6,811b34 <__fpcmp_parts_f+0x34>
  811b0c:	28800017 	ldw	r2,0(r5)
  811b10:	1880082e 	bgeu	r3,r2,811b34 <__fpcmp_parts_f+0x34>
  811b14:	00c00104 	movi	r3,4
  811b18:	30c01e26 	beq	r6,r3,811b94 <__fpcmp_parts_f+0x94>
  811b1c:	10c01a26 	beq	r2,r3,811b88 <__fpcmp_parts_f+0x88>
  811b20:	00c00084 	movi	r3,2
  811b24:	30c00526 	beq	r6,r3,811b3c <__fpcmp_parts_f+0x3c>
  811b28:	10c0071e 	bne	r2,r3,811b48 <__fpcmp_parts_f+0x48>
  811b2c:	20800117 	ldw	r2,4(r4)
  811b30:	1000091e 	bne	r2,zero,811b58 <__fpcmp_parts_f+0x58>
  811b34:	00800044 	movi	r2,1
  811b38:	f800283a 	ret
  811b3c:	10c0121e 	bne	r2,r3,811b88 <__fpcmp_parts_f+0x88>
  811b40:	0005883a 	mov	r2,zero
  811b44:	f800283a 	ret
  811b48:	20c00117 	ldw	r3,4(r4)
  811b4c:	28800117 	ldw	r2,4(r5)
  811b50:	18800326 	beq	r3,r2,811b60 <__fpcmp_parts_f+0x60>
  811b54:	183ff726 	beq	r3,zero,811b34 <__fpcmp_parts_f+0x34>
  811b58:	00bfffc4 	movi	r2,-1
  811b5c:	f800283a 	ret
  811b60:	21800217 	ldw	r6,8(r4)
  811b64:	28800217 	ldw	r2,8(r5)
  811b68:	11bffa16 	blt	r2,r6,811b54 <__fpcmp_parts_f+0x54>
  811b6c:	30800416 	blt	r6,r2,811b80 <__fpcmp_parts_f+0x80>
  811b70:	21000317 	ldw	r4,12(r4)
  811b74:	29400317 	ldw	r5,12(r5)
  811b78:	293ff636 	bltu	r5,r4,811b54 <__fpcmp_parts_f+0x54>
  811b7c:	217ff02e 	bgeu	r4,r5,811b40 <__fpcmp_parts_f+0x40>
  811b80:	183fec1e 	bne	r3,zero,811b34 <__fpcmp_parts_f+0x34>
  811b84:	003ff406 	br	811b58 <__fpcmp_parts_f+0x58>
  811b88:	28800117 	ldw	r2,4(r5)
  811b8c:	103fe91e 	bne	r2,zero,811b34 <__fpcmp_parts_f+0x34>
  811b90:	003ff106 	br	811b58 <__fpcmp_parts_f+0x58>
  811b94:	11bfe51e 	bne	r2,r6,811b2c <__fpcmp_parts_f+0x2c>
  811b98:	28c00117 	ldw	r3,4(r5)
  811b9c:	20800117 	ldw	r2,4(r4)
  811ba0:	1885c83a 	sub	r2,r3,r2
  811ba4:	f800283a 	ret

00811ba8 <__make_fp>:
  811ba8:	defffb04 	addi	sp,sp,-20
  811bac:	d9000015 	stw	r4,0(sp)
  811bb0:	d809883a 	mov	r4,sp
  811bb4:	dfc00415 	stw	ra,16(sp)
  811bb8:	d9400115 	stw	r5,4(sp)
  811bbc:	d9800215 	stw	r6,8(sp)
  811bc0:	d9c00315 	stw	r7,12(sp)
  811bc4:	0811c9c0 	call	811c9c <__pack_f>
  811bc8:	dfc00417 	ldw	ra,16(sp)
  811bcc:	dec00504 	addi	sp,sp,20
  811bd0:	f800283a 	ret

00811bd4 <__fpcmp_parts_d>:
  811bd4:	21800017 	ldw	r6,0(r4)
  811bd8:	00c00044 	movi	r3,1
  811bdc:	19800a2e 	bgeu	r3,r6,811c08 <__fpcmp_parts_d+0x34>
  811be0:	28800017 	ldw	r2,0(r5)
  811be4:	1880082e 	bgeu	r3,r2,811c08 <__fpcmp_parts_d+0x34>
  811be8:	00c00104 	movi	r3,4
  811bec:	30c02626 	beq	r6,r3,811c88 <__fpcmp_parts_d+0xb4>
  811bf0:	10c02226 	beq	r2,r3,811c7c <__fpcmp_parts_d+0xa8>
  811bf4:	00c00084 	movi	r3,2
  811bf8:	30c00526 	beq	r6,r3,811c10 <__fpcmp_parts_d+0x3c>
  811bfc:	10c0071e 	bne	r2,r3,811c1c <__fpcmp_parts_d+0x48>
  811c00:	20800117 	ldw	r2,4(r4)
  811c04:	1000091e 	bne	r2,zero,811c2c <__fpcmp_parts_d+0x58>
  811c08:	00800044 	movi	r2,1
  811c0c:	f800283a 	ret
  811c10:	10c01a1e 	bne	r2,r3,811c7c <__fpcmp_parts_d+0xa8>
  811c14:	0005883a 	mov	r2,zero
  811c18:	f800283a 	ret
  811c1c:	22000117 	ldw	r8,4(r4)
  811c20:	28800117 	ldw	r2,4(r5)
  811c24:	40800326 	beq	r8,r2,811c34 <__fpcmp_parts_d+0x60>
  811c28:	403ff726 	beq	r8,zero,811c08 <__fpcmp_parts_d+0x34>
  811c2c:	00bfffc4 	movi	r2,-1
  811c30:	f800283a 	ret
  811c34:	20c00217 	ldw	r3,8(r4)
  811c38:	28800217 	ldw	r2,8(r5)
  811c3c:	10fffa16 	blt	r2,r3,811c28 <__fpcmp_parts_d+0x54>
  811c40:	18800916 	blt	r3,r2,811c68 <__fpcmp_parts_d+0x94>
  811c44:	21c00417 	ldw	r7,16(r4)
  811c48:	28c00417 	ldw	r3,16(r5)
  811c4c:	21800317 	ldw	r6,12(r4)
  811c50:	28800317 	ldw	r2,12(r5)
  811c54:	19fff436 	bltu	r3,r7,811c28 <__fpcmp_parts_d+0x54>
  811c58:	38c00526 	beq	r7,r3,811c70 <__fpcmp_parts_d+0x9c>
  811c5c:	38c00236 	bltu	r7,r3,811c68 <__fpcmp_parts_d+0x94>
  811c60:	19ffec1e 	bne	r3,r7,811c14 <__fpcmp_parts_d+0x40>
  811c64:	30bfeb2e 	bgeu	r6,r2,811c14 <__fpcmp_parts_d+0x40>
  811c68:	403fe71e 	bne	r8,zero,811c08 <__fpcmp_parts_d+0x34>
  811c6c:	003fef06 	br	811c2c <__fpcmp_parts_d+0x58>
  811c70:	11bffa2e 	bgeu	r2,r6,811c5c <__fpcmp_parts_d+0x88>
  811c74:	403fe426 	beq	r8,zero,811c08 <__fpcmp_parts_d+0x34>
  811c78:	003fec06 	br	811c2c <__fpcmp_parts_d+0x58>
  811c7c:	28800117 	ldw	r2,4(r5)
  811c80:	103fe11e 	bne	r2,zero,811c08 <__fpcmp_parts_d+0x34>
  811c84:	003fe906 	br	811c2c <__fpcmp_parts_d+0x58>
  811c88:	11bfdd1e 	bne	r2,r6,811c00 <__fpcmp_parts_d+0x2c>
  811c8c:	28c00117 	ldw	r3,4(r5)
  811c90:	20800117 	ldw	r2,4(r4)
  811c94:	1885c83a 	sub	r2,r3,r2
  811c98:	f800283a 	ret

00811c9c <__pack_f>:
  811c9c:	20c00017 	ldw	r3,0(r4)
  811ca0:	01c00044 	movi	r7,1
  811ca4:	21800317 	ldw	r6,12(r4)
  811ca8:	21400117 	ldw	r5,4(r4)
  811cac:	38c02d2e 	bgeu	r7,r3,811d64 <__pack_f+0xc8>
  811cb0:	00800104 	movi	r2,4
  811cb4:	18802826 	beq	r3,r2,811d58 <__pack_f+0xbc>
  811cb8:	00800084 	movi	r2,2
  811cbc:	18800126 	beq	r3,r2,811cc4 <__pack_f+0x28>
  811cc0:	3000101e 	bne	r6,zero,811d04 <__pack_f+0x68>
  811cc4:	000d883a 	mov	r6,zero
  811cc8:	0007883a 	mov	r3,zero
  811ccc:	19003fcc 	andi	r4,r3,255
  811cd0:	200895fa 	slli	r4,r4,23
  811cd4:	00c02034 	movhi	r3,128
  811cd8:	18ffffc4 	addi	r3,r3,-1
  811cdc:	30c6703a 	and	r3,r6,r3
  811ce0:	10a0002c 	andhi	r2,r2,32768
  811ce4:	10c4b03a 	or	r2,r2,r3
  811ce8:	280a97fa 	slli	r5,r5,31
  811cec:	1104b03a 	or	r2,r2,r4
  811cf0:	00e00034 	movhi	r3,32768
  811cf4:	18ffffc4 	addi	r3,r3,-1
  811cf8:	10c4703a 	and	r2,r2,r3
  811cfc:	1144b03a 	or	r2,r2,r5
  811d00:	f800283a 	ret
  811d04:	21000217 	ldw	r4,8(r4)
  811d08:	00bfe084 	movi	r2,-126
  811d0c:	20801b16 	blt	r4,r2,811d7c <__pack_f+0xe0>
  811d10:	00801fc4 	movi	r2,127
  811d14:	11001016 	blt	r2,r4,811d58 <__pack_f+0xbc>
  811d18:	308e703a 	and	r7,r6,r2
  811d1c:	2087883a 	add	r3,r4,r2
  811d20:	00801004 	movi	r2,64
  811d24:	38800526 	beq	r7,r2,811d3c <__pack_f+0xa0>
  811d28:	31800fc4 	addi	r6,r6,63
  811d2c:	30000716 	blt	r6,zero,811d4c <__pack_f+0xb0>
  811d30:	300490ba 	slli	r2,r6,2
  811d34:	100cd27a 	srli	r6,r2,9
  811d38:	003fe406 	br	811ccc <__pack_f+0x30>
  811d3c:	3080200c 	andi	r2,r6,128
  811d40:	103ffa26 	beq	r2,zero,811d2c <__pack_f+0x90>
  811d44:	31cd883a 	add	r6,r6,r7
  811d48:	003ff806 	br	811d2c <__pack_f+0x90>
  811d4c:	300cd07a 	srli	r6,r6,1
  811d50:	18c00044 	addi	r3,r3,1
  811d54:	003ff606 	br	811d30 <__pack_f+0x94>
  811d58:	000d883a 	mov	r6,zero
  811d5c:	00ffffc4 	movi	r3,-1
  811d60:	003fda06 	br	811ccc <__pack_f+0x30>
  811d64:	31800434 	orhi	r6,r6,16
  811d68:	00802034 	movhi	r2,128
  811d6c:	10bfffc4 	addi	r2,r2,-1
  811d70:	308c703a 	and	r6,r6,r2
  811d74:	00ffffc4 	movi	r3,-1
  811d78:	003fd406 	br	811ccc <__pack_f+0x30>
  811d7c:	1109c83a 	sub	r4,r2,r4
  811d80:	00800644 	movi	r2,25
  811d84:	11001216 	blt	r2,r4,811dd0 <__pack_f+0x134>
  811d88:	3904983a 	sll	r2,r7,r4
  811d8c:	3106d83a 	srl	r3,r6,r4
  811d90:	10bfffc4 	addi	r2,r2,-1
  811d94:	3084703a 	and	r2,r6,r2
  811d98:	1004c03a 	cmpne	r2,r2,zero
  811d9c:	1886b03a 	or	r3,r3,r2
  811da0:	19001fcc 	andi	r4,r3,127
  811da4:	00801004 	movi	r2,64
  811da8:	20800c26 	beq	r4,r2,811ddc <__pack_f+0x140>
  811dac:	18c00fc4 	addi	r3,r3,63
  811db0:	00900034 	movhi	r2,16384
  811db4:	10bfffc4 	addi	r2,r2,-1
  811db8:	180cd1fa 	srli	r6,r3,7
  811dbc:	10c7803a 	cmpltu	r3,r2,r3
  811dc0:	00802034 	movhi	r2,128
  811dc4:	10bfffc4 	addi	r2,r2,-1
  811dc8:	308c703a 	and	r6,r6,r2
  811dcc:	003fbf06 	br	811ccc <__pack_f+0x30>
  811dd0:	0007883a 	mov	r3,zero
  811dd4:	000d883a 	mov	r6,zero
  811dd8:	003ff906 	br	811dc0 <__pack_f+0x124>
  811ddc:	1880200c 	andi	r2,r3,128
  811de0:	10000126 	beq	r2,zero,811de8 <__pack_f+0x14c>
  811de4:	1907883a 	add	r3,r3,r4
  811de8:	180cd1fa 	srli	r6,r3,7
  811dec:	00900034 	movhi	r2,16384
  811df0:	10bfffc4 	addi	r2,r2,-1
  811df4:	10c7803a 	cmpltu	r3,r2,r3
  811df8:	003ff106 	br	811dc0 <__pack_f+0x124>

00811dfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  811dfc:	defff804 	addi	sp,sp,-32
  811e00:	dfc00715 	stw	ra,28(sp)
  811e04:	df000615 	stw	fp,24(sp)
  811e08:	df000604 	addi	fp,sp,24
  811e0c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	1004803a 	cmplt	r2,r2,zero
  811e18:	1000091e 	bne	r2,zero,811e40 <close+0x44>
  811e1c:	e13ffc17 	ldw	r4,-16(fp)
  811e20:	01400304 	movi	r5,12
  811e24:	08027a80 	call	8027a8 <__mulsi3>
  811e28:	1007883a 	mov	r3,r2
  811e2c:	00802074 	movhi	r2,129
  811e30:	1097a604 	addi	r2,r2,24216
  811e34:	1887883a 	add	r3,r3,r2
  811e38:	e0ffff15 	stw	r3,-4(fp)
  811e3c:	00000106 	br	811e44 <close+0x48>
  811e40:	e03fff15 	stw	zero,-4(fp)
  811e44:	e0bfff17 	ldw	r2,-4(fp)
  811e48:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811e4c:	e0bffb17 	ldw	r2,-20(fp)
  811e50:	1005003a 	cmpeq	r2,r2,zero
  811e54:	10001d1e 	bne	r2,zero,811ecc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  811e58:	e0bffb17 	ldw	r2,-20(fp)
  811e5c:	10800017 	ldw	r2,0(r2)
  811e60:	10800417 	ldw	r2,16(r2)
  811e64:	1005003a 	cmpeq	r2,r2,zero
  811e68:	1000071e 	bne	r2,zero,811e88 <close+0x8c>
  811e6c:	e0bffb17 	ldw	r2,-20(fp)
  811e70:	10800017 	ldw	r2,0(r2)
  811e74:	10800417 	ldw	r2,16(r2)
  811e78:	e13ffb17 	ldw	r4,-20(fp)
  811e7c:	103ee83a 	callr	r2
  811e80:	e0bffe15 	stw	r2,-8(fp)
  811e84:	00000106 	br	811e8c <close+0x90>
  811e88:	e03ffe15 	stw	zero,-8(fp)
  811e8c:	e0bffe17 	ldw	r2,-8(fp)
  811e90:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  811e94:	e13ffc17 	ldw	r4,-16(fp)
  811e98:	08129880 	call	812988 <alt_release_fd>
    if (rval < 0)
  811e9c:	e0bffa17 	ldw	r2,-24(fp)
  811ea0:	1004403a 	cmpge	r2,r2,zero
  811ea4:	1000071e 	bne	r2,zero,811ec4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  811ea8:	0811efc0 	call	811efc <alt_get_errno>
  811eac:	e0fffa17 	ldw	r3,-24(fp)
  811eb0:	00c7c83a 	sub	r3,zero,r3
  811eb4:	10c00015 	stw	r3,0(r2)
      return -1;
  811eb8:	00bfffc4 	movi	r2,-1
  811ebc:	e0bffd15 	stw	r2,-12(fp)
  811ec0:	00000806 	br	811ee4 <close+0xe8>
    }
    return 0;
  811ec4:	e03ffd15 	stw	zero,-12(fp)
  811ec8:	00000606 	br	811ee4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811ecc:	0811efc0 	call	811efc <alt_get_errno>
  811ed0:	1007883a 	mov	r3,r2
  811ed4:	00801444 	movi	r2,81
  811ed8:	18800015 	stw	r2,0(r3)
    return -1;
  811edc:	00bfffc4 	movi	r2,-1
  811ee0:	e0bffd15 	stw	r2,-12(fp)
  811ee4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  811ee8:	e037883a 	mov	sp,fp
  811eec:	dfc00117 	ldw	ra,4(sp)
  811ef0:	df000017 	ldw	fp,0(sp)
  811ef4:	dec00204 	addi	sp,sp,8
  811ef8:	f800283a 	ret

00811efc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811efc:	defffd04 	addi	sp,sp,-12
  811f00:	dfc00215 	stw	ra,8(sp)
  811f04:	df000115 	stw	fp,4(sp)
  811f08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811f0c:	00802074 	movhi	r2,129
  811f10:	109c3404 	addi	r2,r2,28880
  811f14:	10800017 	ldw	r2,0(r2)
  811f18:	1005003a 	cmpeq	r2,r2,zero
  811f1c:	1000061e 	bne	r2,zero,811f38 <alt_get_errno+0x3c>
  811f20:	00802074 	movhi	r2,129
  811f24:	109c3404 	addi	r2,r2,28880
  811f28:	10800017 	ldw	r2,0(r2)
  811f2c:	103ee83a 	callr	r2
  811f30:	e0bfff15 	stw	r2,-4(fp)
  811f34:	00000306 	br	811f44 <alt_get_errno+0x48>
  811f38:	008020b4 	movhi	r2,130
  811f3c:	10a31204 	addi	r2,r2,-29624
  811f40:	e0bfff15 	stw	r2,-4(fp)
  811f44:	e0bfff17 	ldw	r2,-4(fp)
}
  811f48:	e037883a 	mov	sp,fp
  811f4c:	dfc00117 	ldw	ra,4(sp)
  811f50:	df000017 	ldw	fp,0(sp)
  811f54:	dec00204 	addi	sp,sp,8
  811f58:	f800283a 	ret

00811f5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811f5c:	defffc04 	addi	sp,sp,-16
  811f60:	df000315 	stw	fp,12(sp)
  811f64:	df000304 	addi	fp,sp,12
  811f68:	e13ffd15 	stw	r4,-12(fp)
  811f6c:	e17ffe15 	stw	r5,-8(fp)
  811f70:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811f74:	e0bfff17 	ldw	r2,-4(fp)
}
  811f78:	e037883a 	mov	sp,fp
  811f7c:	df000017 	ldw	fp,0(sp)
  811f80:	dec00104 	addi	sp,sp,4
  811f84:	f800283a 	ret

00811f88 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811f88:	defffd04 	addi	sp,sp,-12
  811f8c:	df000215 	stw	fp,8(sp)
  811f90:	df000204 	addi	fp,sp,8
  811f94:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811f98:	e0bfff17 	ldw	r2,-4(fp)
  811f9c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811fa0:	e0bffe17 	ldw	r2,-8(fp)
  811fa4:	1005003a 	cmpeq	r2,r2,zero
  811fa8:	1000021e 	bne	r2,zero,811fb4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811fac:	002af070 	cmpltui	zero,zero,43969
  811fb0:	00000106 	br	811fb8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811fb4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811fb8:	e037883a 	mov	sp,fp
  811fbc:	df000017 	ldw	fp,0(sp)
  811fc0:	dec00104 	addi	sp,sp,4
  811fc4:	f800283a 	ret

00811fc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811fc8:	defffd04 	addi	sp,sp,-12
  811fcc:	dfc00215 	stw	ra,8(sp)
  811fd0:	df000115 	stw	fp,4(sp)
  811fd4:	df000104 	addi	fp,sp,4
  811fd8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811fdc:	e13fff17 	ldw	r4,-4(fp)
  811fe0:	0811f880 	call	811f88 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811fe4:	003fff06 	br	811fe4 <_exit+0x1c>

00811fe8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811fe8:	defff904 	addi	sp,sp,-28
  811fec:	dfc00615 	stw	ra,24(sp)
  811ff0:	df000515 	stw	fp,20(sp)
  811ff4:	df000504 	addi	fp,sp,20
  811ff8:	e13ffc15 	stw	r4,-16(fp)
  811ffc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812000:	e0bffc17 	ldw	r2,-16(fp)
  812004:	1004803a 	cmplt	r2,r2,zero
  812008:	1000091e 	bne	r2,zero,812030 <fstat+0x48>
  81200c:	e13ffc17 	ldw	r4,-16(fp)
  812010:	01400304 	movi	r5,12
  812014:	08027a80 	call	8027a8 <__mulsi3>
  812018:	1007883a 	mov	r3,r2
  81201c:	00802074 	movhi	r2,129
  812020:	1097a604 	addi	r2,r2,24216
  812024:	1887883a 	add	r3,r3,r2
  812028:	e0ffff15 	stw	r3,-4(fp)
  81202c:	00000106 	br	812034 <fstat+0x4c>
  812030:	e03fff15 	stw	zero,-4(fp)
  812034:	e0bfff17 	ldw	r2,-4(fp)
  812038:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81203c:	e0bffb17 	ldw	r2,-20(fp)
  812040:	1005003a 	cmpeq	r2,r2,zero
  812044:	1000121e 	bne	r2,zero,812090 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  812048:	e0bffb17 	ldw	r2,-20(fp)
  81204c:	10800017 	ldw	r2,0(r2)
  812050:	10800817 	ldw	r2,32(r2)
  812054:	1005003a 	cmpeq	r2,r2,zero
  812058:	1000081e 	bne	r2,zero,81207c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  81205c:	e0bffb17 	ldw	r2,-20(fp)
  812060:	10800017 	ldw	r2,0(r2)
  812064:	10800817 	ldw	r2,32(r2)
  812068:	e13ffb17 	ldw	r4,-20(fp)
  81206c:	e17ffd17 	ldw	r5,-12(fp)
  812070:	103ee83a 	callr	r2
  812074:	e0bffe15 	stw	r2,-8(fp)
  812078:	00000b06 	br	8120a8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81207c:	e0fffd17 	ldw	r3,-12(fp)
  812080:	00880004 	movi	r2,8192
  812084:	18800115 	stw	r2,4(r3)
      return 0;
  812088:	e03ffe15 	stw	zero,-8(fp)
  81208c:	00000606 	br	8120a8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812090:	08120c00 	call	8120c0 <alt_get_errno>
  812094:	1007883a 	mov	r3,r2
  812098:	00801444 	movi	r2,81
  81209c:	18800015 	stw	r2,0(r3)
    return -1;
  8120a0:	00bfffc4 	movi	r2,-1
  8120a4:	e0bffe15 	stw	r2,-8(fp)
  8120a8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8120ac:	e037883a 	mov	sp,fp
  8120b0:	dfc00117 	ldw	ra,4(sp)
  8120b4:	df000017 	ldw	fp,0(sp)
  8120b8:	dec00204 	addi	sp,sp,8
  8120bc:	f800283a 	ret

008120c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8120c0:	defffd04 	addi	sp,sp,-12
  8120c4:	dfc00215 	stw	ra,8(sp)
  8120c8:	df000115 	stw	fp,4(sp)
  8120cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8120d0:	00802074 	movhi	r2,129
  8120d4:	109c3404 	addi	r2,r2,28880
  8120d8:	10800017 	ldw	r2,0(r2)
  8120dc:	1005003a 	cmpeq	r2,r2,zero
  8120e0:	1000061e 	bne	r2,zero,8120fc <alt_get_errno+0x3c>
  8120e4:	00802074 	movhi	r2,129
  8120e8:	109c3404 	addi	r2,r2,28880
  8120ec:	10800017 	ldw	r2,0(r2)
  8120f0:	103ee83a 	callr	r2
  8120f4:	e0bfff15 	stw	r2,-4(fp)
  8120f8:	00000306 	br	812108 <alt_get_errno+0x48>
  8120fc:	008020b4 	movhi	r2,130
  812100:	10a31204 	addi	r2,r2,-29624
  812104:	e0bfff15 	stw	r2,-4(fp)
  812108:	e0bfff17 	ldw	r2,-4(fp)
}
  81210c:	e037883a 	mov	sp,fp
  812110:	dfc00117 	ldw	ra,4(sp)
  812114:	df000017 	ldw	fp,0(sp)
  812118:	dec00204 	addi	sp,sp,8
  81211c:	f800283a 	ret

00812120 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  812120:	deffeb04 	addi	sp,sp,-84
  812124:	dfc01415 	stw	ra,80(sp)
  812128:	df001315 	stw	fp,76(sp)
  81212c:	df001304 	addi	fp,sp,76
  812130:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812134:	e0bffd17 	ldw	r2,-12(fp)
  812138:	1004803a 	cmplt	r2,r2,zero
  81213c:	1000091e 	bne	r2,zero,812164 <isatty+0x44>
  812140:	e13ffd17 	ldw	r4,-12(fp)
  812144:	01400304 	movi	r5,12
  812148:	08027a80 	call	8027a8 <__mulsi3>
  81214c:	1007883a 	mov	r3,r2
  812150:	00802074 	movhi	r2,129
  812154:	1097a604 	addi	r2,r2,24216
  812158:	1887883a 	add	r3,r3,r2
  81215c:	e0ffff15 	stw	r3,-4(fp)
  812160:	00000106 	br	812168 <isatty+0x48>
  812164:	e03fff15 	stw	zero,-4(fp)
  812168:	e0bfff17 	ldw	r2,-4(fp)
  81216c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  812170:	e0bfed17 	ldw	r2,-76(fp)
  812174:	1005003a 	cmpeq	r2,r2,zero
  812178:	10000f1e 	bne	r2,zero,8121b8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81217c:	e0bfed17 	ldw	r2,-76(fp)
  812180:	10800017 	ldw	r2,0(r2)
  812184:	10800817 	ldw	r2,32(r2)
  812188:	1004c03a 	cmpne	r2,r2,zero
  81218c:	1000031e 	bne	r2,zero,81219c <isatty+0x7c>
    {
      return 1;
  812190:	00800044 	movi	r2,1
  812194:	e0bffe15 	stw	r2,-8(fp)
  812198:	00000c06 	br	8121cc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81219c:	e17fee04 	addi	r5,fp,-72
  8121a0:	e13ffd17 	ldw	r4,-12(fp)
  8121a4:	0811fe80 	call	811fe8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8121a8:	e0bfef17 	ldw	r2,-68(fp)
  8121ac:	10880020 	cmpeqi	r2,r2,8192
  8121b0:	e0bffe15 	stw	r2,-8(fp)
  8121b4:	00000506 	br	8121cc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8121b8:	08121e40 	call	8121e4 <alt_get_errno>
  8121bc:	1007883a 	mov	r3,r2
  8121c0:	00801444 	movi	r2,81
  8121c4:	18800015 	stw	r2,0(r3)
    return 0;
  8121c8:	e03ffe15 	stw	zero,-8(fp)
  8121cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8121d0:	e037883a 	mov	sp,fp
  8121d4:	dfc00117 	ldw	ra,4(sp)
  8121d8:	df000017 	ldw	fp,0(sp)
  8121dc:	dec00204 	addi	sp,sp,8
  8121e0:	f800283a 	ret

008121e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8121e4:	defffd04 	addi	sp,sp,-12
  8121e8:	dfc00215 	stw	ra,8(sp)
  8121ec:	df000115 	stw	fp,4(sp)
  8121f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8121f4:	00802074 	movhi	r2,129
  8121f8:	109c3404 	addi	r2,r2,28880
  8121fc:	10800017 	ldw	r2,0(r2)
  812200:	1005003a 	cmpeq	r2,r2,zero
  812204:	1000061e 	bne	r2,zero,812220 <alt_get_errno+0x3c>
  812208:	00802074 	movhi	r2,129
  81220c:	109c3404 	addi	r2,r2,28880
  812210:	10800017 	ldw	r2,0(r2)
  812214:	103ee83a 	callr	r2
  812218:	e0bfff15 	stw	r2,-4(fp)
  81221c:	00000306 	br	81222c <alt_get_errno+0x48>
  812220:	008020b4 	movhi	r2,130
  812224:	10a31204 	addi	r2,r2,-29624
  812228:	e0bfff15 	stw	r2,-4(fp)
  81222c:	e0bfff17 	ldw	r2,-4(fp)
}
  812230:	e037883a 	mov	sp,fp
  812234:	dfc00117 	ldw	ra,4(sp)
  812238:	df000017 	ldw	fp,0(sp)
  81223c:	dec00204 	addi	sp,sp,8
  812240:	f800283a 	ret

00812244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  812244:	defffe04 	addi	sp,sp,-8
  812248:	dfc00115 	stw	ra,4(sp)
  81224c:	df000015 	stw	fp,0(sp)
  812250:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  812254:	01002074 	movhi	r4,129
  812258:	211c4b04 	addi	r4,r4,28972
  81225c:	01402074 	movhi	r5,129
  812260:	29558404 	addi	r5,r5,22032
  812264:	01802074 	movhi	r6,129
  812268:	319c4b04 	addi	r6,r6,28972
  81226c:	08122c40 	call	8122c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  812270:	01002034 	movhi	r4,128
  812274:	21000004 	addi	r4,r4,0
  812278:	01404234 	movhi	r5,264
  81227c:	29400804 	addi	r5,r5,32
  812280:	01804234 	movhi	r6,264
  812284:	31806d04 	addi	r6,r6,436
  812288:	08122c40 	call	8122c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81228c:	01002074 	movhi	r4,129
  812290:	21131504 	addi	r4,r4,19540
  812294:	01402074 	movhi	r5,129
  812298:	29531504 	addi	r5,r5,19540
  81229c:	01802074 	movhi	r6,129
  8122a0:	31958404 	addi	r6,r6,22032
  8122a4:	08122c40 	call	8122c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8122a8:	08140d00 	call	8140d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8122ac:	081453c0 	call	81453c <alt_icache_flush_all>
}
  8122b0:	e037883a 	mov	sp,fp
  8122b4:	dfc00117 	ldw	ra,4(sp)
  8122b8:	df000017 	ldw	fp,0(sp)
  8122bc:	dec00204 	addi	sp,sp,8
  8122c0:	f800283a 	ret

008122c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8122c4:	defffc04 	addi	sp,sp,-16
  8122c8:	df000315 	stw	fp,12(sp)
  8122cc:	df000304 	addi	fp,sp,12
  8122d0:	e13ffd15 	stw	r4,-12(fp)
  8122d4:	e17ffe15 	stw	r5,-8(fp)
  8122d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8122dc:	e0fffe17 	ldw	r3,-8(fp)
  8122e0:	e0bffd17 	ldw	r2,-12(fp)
  8122e4:	18800e26 	beq	r3,r2,812320 <alt_load_section+0x5c>
  {
    while( to != end )
  8122e8:	00000a06 	br	812314 <alt_load_section+0x50>
    {
      *to++ = *from++;
  8122ec:	e0bffd17 	ldw	r2,-12(fp)
  8122f0:	10c00017 	ldw	r3,0(r2)
  8122f4:	e0bffe17 	ldw	r2,-8(fp)
  8122f8:	10c00015 	stw	r3,0(r2)
  8122fc:	e0bffe17 	ldw	r2,-8(fp)
  812300:	10800104 	addi	r2,r2,4
  812304:	e0bffe15 	stw	r2,-8(fp)
  812308:	e0bffd17 	ldw	r2,-12(fp)
  81230c:	10800104 	addi	r2,r2,4
  812310:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  812314:	e0fffe17 	ldw	r3,-8(fp)
  812318:	e0bfff17 	ldw	r2,-4(fp)
  81231c:	18bff31e 	bne	r3,r2,8122ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  812320:	e037883a 	mov	sp,fp
  812324:	df000017 	ldw	fp,0(sp)
  812328:	dec00104 	addi	sp,sp,4
  81232c:	f800283a 	ret

00812330 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  812330:	defff804 	addi	sp,sp,-32
  812334:	dfc00715 	stw	ra,28(sp)
  812338:	df000615 	stw	fp,24(sp)
  81233c:	df000604 	addi	fp,sp,24
  812340:	e13ffc15 	stw	r4,-16(fp)
  812344:	e17ffd15 	stw	r5,-12(fp)
  812348:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81234c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812350:	e0bffc17 	ldw	r2,-16(fp)
  812354:	1004803a 	cmplt	r2,r2,zero
  812358:	1000091e 	bne	r2,zero,812380 <lseek+0x50>
  81235c:	e13ffc17 	ldw	r4,-16(fp)
  812360:	01400304 	movi	r5,12
  812364:	08027a80 	call	8027a8 <__mulsi3>
  812368:	1007883a 	mov	r3,r2
  81236c:	00802074 	movhi	r2,129
  812370:	1097a604 	addi	r2,r2,24216
  812374:	1887883a 	add	r3,r3,r2
  812378:	e0ffff15 	stw	r3,-4(fp)
  81237c:	00000106 	br	812384 <lseek+0x54>
  812380:	e03fff15 	stw	zero,-4(fp)
  812384:	e0bfff17 	ldw	r2,-4(fp)
  812388:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  81238c:	e0bffb17 	ldw	r2,-20(fp)
  812390:	1005003a 	cmpeq	r2,r2,zero
  812394:	1000111e 	bne	r2,zero,8123dc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  812398:	e0bffb17 	ldw	r2,-20(fp)
  81239c:	10800017 	ldw	r2,0(r2)
  8123a0:	10800717 	ldw	r2,28(r2)
  8123a4:	1005003a 	cmpeq	r2,r2,zero
  8123a8:	1000091e 	bne	r2,zero,8123d0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8123ac:	e0bffb17 	ldw	r2,-20(fp)
  8123b0:	10800017 	ldw	r2,0(r2)
  8123b4:	10800717 	ldw	r2,28(r2)
  8123b8:	e13ffb17 	ldw	r4,-20(fp)
  8123bc:	e17ffd17 	ldw	r5,-12(fp)
  8123c0:	e1bffe17 	ldw	r6,-8(fp)
  8123c4:	103ee83a 	callr	r2
  8123c8:	e0bffa15 	stw	r2,-24(fp)
  8123cc:	00000506 	br	8123e4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8123d0:	00bfde84 	movi	r2,-134
  8123d4:	e0bffa15 	stw	r2,-24(fp)
  8123d8:	00000206 	br	8123e4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  8123dc:	00bfebc4 	movi	r2,-81
  8123e0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8123e4:	e0bffa17 	ldw	r2,-24(fp)
  8123e8:	1004403a 	cmpge	r2,r2,zero
  8123ec:	1000071e 	bne	r2,zero,81240c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  8123f0:	08124240 	call	812424 <alt_get_errno>
  8123f4:	1007883a 	mov	r3,r2
  8123f8:	e0bffa17 	ldw	r2,-24(fp)
  8123fc:	0085c83a 	sub	r2,zero,r2
  812400:	18800015 	stw	r2,0(r3)
    rc = -1;
  812404:	00bfffc4 	movi	r2,-1
  812408:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  81240c:	e0bffa17 	ldw	r2,-24(fp)
}
  812410:	e037883a 	mov	sp,fp
  812414:	dfc00117 	ldw	ra,4(sp)
  812418:	df000017 	ldw	fp,0(sp)
  81241c:	dec00204 	addi	sp,sp,8
  812420:	f800283a 	ret

00812424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812424:	defffd04 	addi	sp,sp,-12
  812428:	dfc00215 	stw	ra,8(sp)
  81242c:	df000115 	stw	fp,4(sp)
  812430:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812434:	00802074 	movhi	r2,129
  812438:	109c3404 	addi	r2,r2,28880
  81243c:	10800017 	ldw	r2,0(r2)
  812440:	1005003a 	cmpeq	r2,r2,zero
  812444:	1000061e 	bne	r2,zero,812460 <alt_get_errno+0x3c>
  812448:	00802074 	movhi	r2,129
  81244c:	109c3404 	addi	r2,r2,28880
  812450:	10800017 	ldw	r2,0(r2)
  812454:	103ee83a 	callr	r2
  812458:	e0bfff15 	stw	r2,-4(fp)
  81245c:	00000306 	br	81246c <alt_get_errno+0x48>
  812460:	008020b4 	movhi	r2,130
  812464:	10a31204 	addi	r2,r2,-29624
  812468:	e0bfff15 	stw	r2,-4(fp)
  81246c:	e0bfff17 	ldw	r2,-4(fp)
}
  812470:	e037883a 	mov	sp,fp
  812474:	dfc00117 	ldw	ra,4(sp)
  812478:	df000017 	ldw	fp,0(sp)
  81247c:	dec00204 	addi	sp,sp,8
  812480:	f800283a 	ret

00812484 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  812484:	defffd04 	addi	sp,sp,-12
  812488:	dfc00215 	stw	ra,8(sp)
  81248c:	df000115 	stw	fp,4(sp)
  812490:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  812494:	0009883a 	mov	r4,zero
  812498:	0812d340 	call	812d34 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81249c:	0812d680 	call	812d68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8124a0:	01002074 	movhi	r4,129
  8124a4:	21157904 	addi	r4,r4,21988
  8124a8:	01402074 	movhi	r5,129
  8124ac:	29557904 	addi	r5,r5,21988
  8124b0:	01802074 	movhi	r6,129
  8124b4:	31957904 	addi	r6,r6,21988
  8124b8:	08149100 	call	814910 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8124bc:	d126f117 	ldw	r4,-25660(gp)
  8124c0:	d166f217 	ldw	r5,-25656(gp)
  8124c4:	d1a6f317 	ldw	r6,-25652(gp)
  8124c8:	08006480 	call	800648 <main>
  8124cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8124d0:	01000044 	movi	r4,1
  8124d4:	0811dfc0 	call	811dfc <close>
  exit (result);
  8124d8:	e13fff17 	ldw	r4,-4(fp)
  8124dc:	0802de40 	call	802de4 <exit>

008124e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8124e0:	defffe04 	addi	sp,sp,-8
  8124e4:	df000115 	stw	fp,4(sp)
  8124e8:	df000104 	addi	fp,sp,4
  8124ec:	e13fff15 	stw	r4,-4(fp)
}
  8124f0:	e037883a 	mov	sp,fp
  8124f4:	df000017 	ldw	fp,0(sp)
  8124f8:	dec00104 	addi	sp,sp,4
  8124fc:	f800283a 	ret

00812500 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  812500:	defffe04 	addi	sp,sp,-8
  812504:	df000115 	stw	fp,4(sp)
  812508:	df000104 	addi	fp,sp,4
  81250c:	e13fff15 	stw	r4,-4(fp)
}
  812510:	e037883a 	mov	sp,fp
  812514:	df000017 	ldw	fp,0(sp)
  812518:	dec00104 	addi	sp,sp,4
  81251c:	f800283a 	ret

00812520 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812520:	defffa04 	addi	sp,sp,-24
  812524:	dfc00515 	stw	ra,20(sp)
  812528:	df000415 	stw	fp,16(sp)
  81252c:	dc000315 	stw	r16,12(sp)
  812530:	df000304 	addi	fp,sp,12
  812534:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812538:	e0bffe17 	ldw	r2,-8(fp)
  81253c:	10800217 	ldw	r2,8(r2)
  812540:	10d00034 	orhi	r3,r2,16384
  812544:	e0bffe17 	ldw	r2,-8(fp)
  812548:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81254c:	e03ffd15 	stw	zero,-12(fp)
  812550:	00002306 	br	8125e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  812554:	e13ffd17 	ldw	r4,-12(fp)
  812558:	04002074 	movhi	r16,129
  81255c:	8417a604 	addi	r16,r16,24216
  812560:	01400304 	movi	r5,12
  812564:	08027a80 	call	8027a8 <__mulsi3>
  812568:	1405883a 	add	r2,r2,r16
  81256c:	10c00017 	ldw	r3,0(r2)
  812570:	e0bffe17 	ldw	r2,-8(fp)
  812574:	10800017 	ldw	r2,0(r2)
  812578:	1880161e 	bne	r3,r2,8125d4 <alt_file_locked+0xb4>
  81257c:	e13ffd17 	ldw	r4,-12(fp)
  812580:	04002074 	movhi	r16,129
  812584:	8417a604 	addi	r16,r16,24216
  812588:	01400304 	movi	r5,12
  81258c:	08027a80 	call	8027a8 <__mulsi3>
  812590:	1405883a 	add	r2,r2,r16
  812594:	10800204 	addi	r2,r2,8
  812598:	10800017 	ldw	r2,0(r2)
  81259c:	1004403a 	cmpge	r2,r2,zero
  8125a0:	10000c1e 	bne	r2,zero,8125d4 <alt_file_locked+0xb4>
  8125a4:	e13ffd17 	ldw	r4,-12(fp)
  8125a8:	01400304 	movi	r5,12
  8125ac:	08027a80 	call	8027a8 <__mulsi3>
  8125b0:	1007883a 	mov	r3,r2
  8125b4:	00802074 	movhi	r2,129
  8125b8:	1097a604 	addi	r2,r2,24216
  8125bc:	1887883a 	add	r3,r3,r2
  8125c0:	e0bffe17 	ldw	r2,-8(fp)
  8125c4:	18800326 	beq	r3,r2,8125d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8125c8:	00bffcc4 	movi	r2,-13
  8125cc:	e0bfff15 	stw	r2,-4(fp)
  8125d0:	00000a06 	br	8125fc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8125d4:	e0bffd17 	ldw	r2,-12(fp)
  8125d8:	10800044 	addi	r2,r2,1
  8125dc:	e0bffd15 	stw	r2,-12(fp)
  8125e0:	00802074 	movhi	r2,129
  8125e4:	109c3304 	addi	r2,r2,28876
  8125e8:	10800017 	ldw	r2,0(r2)
  8125ec:	1007883a 	mov	r3,r2
  8125f0:	e0bffd17 	ldw	r2,-12(fp)
  8125f4:	18bfd72e 	bgeu	r3,r2,812554 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8125f8:	e03fff15 	stw	zero,-4(fp)
  8125fc:	e0bfff17 	ldw	r2,-4(fp)
}
  812600:	e037883a 	mov	sp,fp
  812604:	dfc00217 	ldw	ra,8(sp)
  812608:	df000117 	ldw	fp,4(sp)
  81260c:	dc000017 	ldw	r16,0(sp)
  812610:	dec00304 	addi	sp,sp,12
  812614:	f800283a 	ret

00812618 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812618:	defff404 	addi	sp,sp,-48
  81261c:	dfc00b15 	stw	ra,44(sp)
  812620:	df000a15 	stw	fp,40(sp)
  812624:	df000a04 	addi	fp,sp,40
  812628:	e13ffb15 	stw	r4,-20(fp)
  81262c:	e17ffc15 	stw	r5,-16(fp)
  812630:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  812634:	00bfffc4 	movi	r2,-1
  812638:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81263c:	00bffb44 	movi	r2,-19
  812640:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  812644:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812648:	e13ffb17 	ldw	r4,-20(fp)
  81264c:	01402074 	movhi	r5,129
  812650:	295c3104 	addi	r5,r5,28868
  812654:	08142280 	call	814228 <alt_find_dev>
  812658:	e0bffa15 	stw	r2,-24(fp)
  81265c:	e0bffa17 	ldw	r2,-24(fp)
  812660:	1004c03a 	cmpne	r2,r2,zero
  812664:	1000051e 	bne	r2,zero,81267c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  812668:	e13ffb17 	ldw	r4,-20(fp)
  81266c:	08142bc0 	call	8142bc <alt_find_file>
  812670:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  812674:	00800044 	movi	r2,1
  812678:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81267c:	e0bffa17 	ldw	r2,-24(fp)
  812680:	1005003a 	cmpeq	r2,r2,zero
  812684:	1000311e 	bne	r2,zero,81274c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  812688:	e13ffa17 	ldw	r4,-24(fp)
  81268c:	081446c0 	call	81446c <alt_get_fd>
  812690:	e0bff815 	stw	r2,-32(fp)
  812694:	e0bff817 	ldw	r2,-32(fp)
  812698:	1004403a 	cmpge	r2,r2,zero
  81269c:	1000031e 	bne	r2,zero,8126ac <open+0x94>
    {
      status = index;
  8126a0:	e0bff817 	ldw	r2,-32(fp)
  8126a4:	e0bff715 	stw	r2,-36(fp)
  8126a8:	00002a06 	br	812754 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  8126ac:	e13ff817 	ldw	r4,-32(fp)
  8126b0:	01400304 	movi	r5,12
  8126b4:	08027a80 	call	8027a8 <__mulsi3>
  8126b8:	1007883a 	mov	r3,r2
  8126bc:	00802074 	movhi	r2,129
  8126c0:	1097a604 	addi	r2,r2,24216
  8126c4:	1885883a 	add	r2,r3,r2
  8126c8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8126cc:	e0fffc17 	ldw	r3,-16(fp)
  8126d0:	00900034 	movhi	r2,16384
  8126d4:	10bfffc4 	addi	r2,r2,-1
  8126d8:	1886703a 	and	r3,r3,r2
  8126dc:	e0bff917 	ldw	r2,-28(fp)
  8126e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8126e4:	e0bff617 	ldw	r2,-40(fp)
  8126e8:	1004c03a 	cmpne	r2,r2,zero
  8126ec:	1000061e 	bne	r2,zero,812708 <open+0xf0>
  8126f0:	e13ff917 	ldw	r4,-28(fp)
  8126f4:	08125200 	call	812520 <alt_file_locked>
  8126f8:	e0bff715 	stw	r2,-36(fp)
  8126fc:	e0bff717 	ldw	r2,-36(fp)
  812700:	1004803a 	cmplt	r2,r2,zero
  812704:	1000131e 	bne	r2,zero,812754 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  812708:	e0bffa17 	ldw	r2,-24(fp)
  81270c:	10800317 	ldw	r2,12(r2)
  812710:	1005003a 	cmpeq	r2,r2,zero
  812714:	1000091e 	bne	r2,zero,81273c <open+0x124>
  812718:	e0bffa17 	ldw	r2,-24(fp)
  81271c:	10800317 	ldw	r2,12(r2)
  812720:	e13ff917 	ldw	r4,-28(fp)
  812724:	e17ffb17 	ldw	r5,-20(fp)
  812728:	e1bffc17 	ldw	r6,-16(fp)
  81272c:	e1fffd17 	ldw	r7,-12(fp)
  812730:	103ee83a 	callr	r2
  812734:	e0bfff15 	stw	r2,-4(fp)
  812738:	00000106 	br	812740 <open+0x128>
  81273c:	e03fff15 	stw	zero,-4(fp)
  812740:	e0bfff17 	ldw	r2,-4(fp)
  812744:	e0bff715 	stw	r2,-36(fp)
  812748:	00000206 	br	812754 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81274c:	00bffb44 	movi	r2,-19
  812750:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  812754:	e0bff717 	ldw	r2,-36(fp)
  812758:	1004403a 	cmpge	r2,r2,zero
  81275c:	1000091e 	bne	r2,zero,812784 <open+0x16c>
  {
    alt_release_fd (index);  
  812760:	e13ff817 	ldw	r4,-32(fp)
  812764:	08129880 	call	812988 <alt_release_fd>
    ALT_ERRNO = -status;
  812768:	08127a40 	call	8127a4 <alt_get_errno>
  81276c:	e0fff717 	ldw	r3,-36(fp)
  812770:	00c7c83a 	sub	r3,zero,r3
  812774:	10c00015 	stw	r3,0(r2)
    return -1;
  812778:	00bfffc4 	movi	r2,-1
  81277c:	e0bffe15 	stw	r2,-8(fp)
  812780:	00000206 	br	81278c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  812784:	e0bff817 	ldw	r2,-32(fp)
  812788:	e0bffe15 	stw	r2,-8(fp)
  81278c:	e0bffe17 	ldw	r2,-8(fp)
}
  812790:	e037883a 	mov	sp,fp
  812794:	dfc00117 	ldw	ra,4(sp)
  812798:	df000017 	ldw	fp,0(sp)
  81279c:	dec00204 	addi	sp,sp,8
  8127a0:	f800283a 	ret

008127a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8127a4:	defffd04 	addi	sp,sp,-12
  8127a8:	dfc00215 	stw	ra,8(sp)
  8127ac:	df000115 	stw	fp,4(sp)
  8127b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8127b4:	00802074 	movhi	r2,129
  8127b8:	109c3404 	addi	r2,r2,28880
  8127bc:	10800017 	ldw	r2,0(r2)
  8127c0:	1005003a 	cmpeq	r2,r2,zero
  8127c4:	1000061e 	bne	r2,zero,8127e0 <alt_get_errno+0x3c>
  8127c8:	00802074 	movhi	r2,129
  8127cc:	109c3404 	addi	r2,r2,28880
  8127d0:	10800017 	ldw	r2,0(r2)
  8127d4:	103ee83a 	callr	r2
  8127d8:	e0bfff15 	stw	r2,-4(fp)
  8127dc:	00000306 	br	8127ec <alt_get_errno+0x48>
  8127e0:	008020b4 	movhi	r2,130
  8127e4:	10a31204 	addi	r2,r2,-29624
  8127e8:	e0bfff15 	stw	r2,-4(fp)
  8127ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8127f0:	e037883a 	mov	sp,fp
  8127f4:	dfc00117 	ldw	ra,4(sp)
  8127f8:	df000017 	ldw	fp,0(sp)
  8127fc:	dec00204 	addi	sp,sp,8
  812800:	f800283a 	ret

00812804 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  812804:	defff704 	addi	sp,sp,-36
  812808:	dfc00815 	stw	ra,32(sp)
  81280c:	df000715 	stw	fp,28(sp)
  812810:	df000704 	addi	fp,sp,28
  812814:	e13ffb15 	stw	r4,-20(fp)
  812818:	e17ffc15 	stw	r5,-16(fp)
  81281c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812820:	e0bffb17 	ldw	r2,-20(fp)
  812824:	1004803a 	cmplt	r2,r2,zero
  812828:	1000091e 	bne	r2,zero,812850 <read+0x4c>
  81282c:	e13ffb17 	ldw	r4,-20(fp)
  812830:	01400304 	movi	r5,12
  812834:	08027a80 	call	8027a8 <__mulsi3>
  812838:	1007883a 	mov	r3,r2
  81283c:	00802074 	movhi	r2,129
  812840:	1097a604 	addi	r2,r2,24216
  812844:	1887883a 	add	r3,r3,r2
  812848:	e0ffff15 	stw	r3,-4(fp)
  81284c:	00000106 	br	812854 <read+0x50>
  812850:	e03fff15 	stw	zero,-4(fp)
  812854:	e0bfff17 	ldw	r2,-4(fp)
  812858:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81285c:	e0bffa17 	ldw	r2,-24(fp)
  812860:	1005003a 	cmpeq	r2,r2,zero
  812864:	1000241e 	bne	r2,zero,8128f8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  812868:	e0bffa17 	ldw	r2,-24(fp)
  81286c:	10800217 	ldw	r2,8(r2)
  812870:	108000cc 	andi	r2,r2,3
  812874:	10800060 	cmpeqi	r2,r2,1
  812878:	10001a1e 	bne	r2,zero,8128e4 <read+0xe0>
  81287c:	e0bffa17 	ldw	r2,-24(fp)
  812880:	10800017 	ldw	r2,0(r2)
  812884:	10800517 	ldw	r2,20(r2)
  812888:	1005003a 	cmpeq	r2,r2,zero
  81288c:	1000151e 	bne	r2,zero,8128e4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  812890:	e0bffa17 	ldw	r2,-24(fp)
  812894:	10800017 	ldw	r2,0(r2)
  812898:	10800517 	ldw	r2,20(r2)
  81289c:	e17ffc17 	ldw	r5,-16(fp)
  8128a0:	e1bffd17 	ldw	r6,-12(fp)
  8128a4:	e13ffa17 	ldw	r4,-24(fp)
  8128a8:	103ee83a 	callr	r2
  8128ac:	e0bff915 	stw	r2,-28(fp)
  8128b0:	e0bff917 	ldw	r2,-28(fp)
  8128b4:	1004403a 	cmpge	r2,r2,zero
  8128b8:	1000071e 	bne	r2,zero,8128d8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  8128bc:	08129280 	call	812928 <alt_get_errno>
  8128c0:	e0fff917 	ldw	r3,-28(fp)
  8128c4:	00c7c83a 	sub	r3,zero,r3
  8128c8:	10c00015 	stw	r3,0(r2)
          return -1;
  8128cc:	00bfffc4 	movi	r2,-1
  8128d0:	e0bffe15 	stw	r2,-8(fp)
  8128d4:	00000e06 	br	812910 <read+0x10c>
        }
        return rval;
  8128d8:	e0bff917 	ldw	r2,-28(fp)
  8128dc:	e0bffe15 	stw	r2,-8(fp)
  8128e0:	00000b06 	br	812910 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8128e4:	08129280 	call	812928 <alt_get_errno>
  8128e8:	1007883a 	mov	r3,r2
  8128ec:	00800344 	movi	r2,13
  8128f0:	18800015 	stw	r2,0(r3)
  8128f4:	00000406 	br	812908 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8128f8:	08129280 	call	812928 <alt_get_errno>
  8128fc:	1007883a 	mov	r3,r2
  812900:	00801444 	movi	r2,81
  812904:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812908:	00bfffc4 	movi	r2,-1
  81290c:	e0bffe15 	stw	r2,-8(fp)
  812910:	e0bffe17 	ldw	r2,-8(fp)
}
  812914:	e037883a 	mov	sp,fp
  812918:	dfc00117 	ldw	ra,4(sp)
  81291c:	df000017 	ldw	fp,0(sp)
  812920:	dec00204 	addi	sp,sp,8
  812924:	f800283a 	ret

00812928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812928:	defffd04 	addi	sp,sp,-12
  81292c:	dfc00215 	stw	ra,8(sp)
  812930:	df000115 	stw	fp,4(sp)
  812934:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812938:	00802074 	movhi	r2,129
  81293c:	109c3404 	addi	r2,r2,28880
  812940:	10800017 	ldw	r2,0(r2)
  812944:	1005003a 	cmpeq	r2,r2,zero
  812948:	1000061e 	bne	r2,zero,812964 <alt_get_errno+0x3c>
  81294c:	00802074 	movhi	r2,129
  812950:	109c3404 	addi	r2,r2,28880
  812954:	10800017 	ldw	r2,0(r2)
  812958:	103ee83a 	callr	r2
  81295c:	e0bfff15 	stw	r2,-4(fp)
  812960:	00000306 	br	812970 <alt_get_errno+0x48>
  812964:	008020b4 	movhi	r2,130
  812968:	10a31204 	addi	r2,r2,-29624
  81296c:	e0bfff15 	stw	r2,-4(fp)
  812970:	e0bfff17 	ldw	r2,-4(fp)
}
  812974:	e037883a 	mov	sp,fp
  812978:	dfc00117 	ldw	ra,4(sp)
  81297c:	df000017 	ldw	fp,0(sp)
  812980:	dec00204 	addi	sp,sp,8
  812984:	f800283a 	ret

00812988 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  812988:	defffc04 	addi	sp,sp,-16
  81298c:	dfc00315 	stw	ra,12(sp)
  812990:	df000215 	stw	fp,8(sp)
  812994:	dc000115 	stw	r16,4(sp)
  812998:	df000104 	addi	fp,sp,4
  81299c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8129a0:	e0bfff17 	ldw	r2,-4(fp)
  8129a4:	108000d0 	cmplti	r2,r2,3
  8129a8:	10000f1e 	bne	r2,zero,8129e8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  8129ac:	e13fff17 	ldw	r4,-4(fp)
  8129b0:	04002074 	movhi	r16,129
  8129b4:	8417a604 	addi	r16,r16,24216
  8129b8:	01400304 	movi	r5,12
  8129bc:	08027a80 	call	8027a8 <__mulsi3>
  8129c0:	1405883a 	add	r2,r2,r16
  8129c4:	10800204 	addi	r2,r2,8
  8129c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8129cc:	e13fff17 	ldw	r4,-4(fp)
  8129d0:	04002074 	movhi	r16,129
  8129d4:	8417a604 	addi	r16,r16,24216
  8129d8:	01400304 	movi	r5,12
  8129dc:	08027a80 	call	8027a8 <__mulsi3>
  8129e0:	1405883a 	add	r2,r2,r16
  8129e4:	10000015 	stw	zero,0(r2)
  }
}
  8129e8:	e037883a 	mov	sp,fp
  8129ec:	dfc00217 	ldw	ra,8(sp)
  8129f0:	df000117 	ldw	fp,4(sp)
  8129f4:	dc000017 	ldw	r16,0(sp)
  8129f8:	dec00304 	addi	sp,sp,12
  8129fc:	f800283a 	ret

00812a00 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  812a00:	defff804 	addi	sp,sp,-32
  812a04:	df000715 	stw	fp,28(sp)
  812a08:	df000704 	addi	fp,sp,28
  812a0c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a10:	0005303a 	rdctl	r2,status
  812a14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a18:	e0fffb17 	ldw	r3,-20(fp)
  812a1c:	00bfff84 	movi	r2,-2
  812a20:	1884703a 	and	r2,r3,r2
  812a24:	1001703a 	wrctl	status,r2
  
  return context;
  812a28:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  812a2c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  812a30:	d0a00d17 	ldw	r2,-32716(gp)
  812a34:	10c000c4 	addi	r3,r2,3
  812a38:	00bfff04 	movi	r2,-4
  812a3c:	1884703a 	and	r2,r3,r2
  812a40:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  812a44:	d0e00d17 	ldw	r3,-32716(gp)
  812a48:	e0bffe17 	ldw	r2,-8(fp)
  812a4c:	1887883a 	add	r3,r3,r2
  812a50:	00804034 	movhi	r2,256
  812a54:	10800004 	addi	r2,r2,0
  812a58:	10c0072e 	bgeu	r2,r3,812a78 <sbrk+0x78>
  812a5c:	e0bffd17 	ldw	r2,-12(fp)
  812a60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a64:	e0bffa17 	ldw	r2,-24(fp)
  812a68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  812a6c:	00bfffc4 	movi	r2,-1
  812a70:	e0bfff15 	stw	r2,-4(fp)
  812a74:	00000c06 	br	812aa8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  812a78:	d0a00d17 	ldw	r2,-32716(gp)
  812a7c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  812a80:	d0e00d17 	ldw	r3,-32716(gp)
  812a84:	e0bffe17 	ldw	r2,-8(fp)
  812a88:	1885883a 	add	r2,r3,r2
  812a8c:	d0a00d15 	stw	r2,-32716(gp)
  812a90:	e0bffd17 	ldw	r2,-12(fp)
  812a94:	e0bff915 	stw	r2,-28(fp)
  812a98:	e0bff917 	ldw	r2,-28(fp)
  812a9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  812aa0:	e0bffc17 	ldw	r2,-16(fp)
  812aa4:	e0bfff15 	stw	r2,-4(fp)
  812aa8:	e0bfff17 	ldw	r2,-4(fp)
} 
  812aac:	e037883a 	mov	sp,fp
  812ab0:	df000017 	ldw	fp,0(sp)
  812ab4:	dec00104 	addi	sp,sp,4
  812ab8:	f800283a 	ret

00812abc <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  812abc:	defffb04 	addi	sp,sp,-20
  812ac0:	dfc00415 	stw	ra,16(sp)
  812ac4:	df000315 	stw	fp,12(sp)
  812ac8:	df000304 	addi	fp,sp,12
  812acc:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812ad0:	008020b4 	movhi	r2,130
  812ad4:	10a32004 	addi	r2,r2,-29568
  812ad8:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  812adc:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812ae0:	008020b4 	movhi	r2,130
  812ae4:	10a31f04 	addi	r2,r2,-29572
  812ae8:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  812aec:	1004c03a 	cmpne	r2,r2,zero
  812af0:	1000061e 	bne	r2,zero,812b0c <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
  812af4:	0812b500 	call	812b50 <alt_get_errno>
  812af8:	1007883a 	mov	r3,r2
  812afc:	00801604 	movi	r2,88
  812b00:	18800015 	stw	r2,0(r3)
    return 0;
  812b04:	e03fff15 	stw	zero,-4(fp)
  812b08:	00000b06 	br	812b38 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  812b0c:	e0bffe17 	ldw	r2,-8(fp)
  812b10:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  812b14:	e0fffe17 	ldw	r3,-8(fp)
  812b18:	e0bffd17 	ldw	r2,-12(fp)
  812b1c:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
  812b20:	e0bffe17 	ldw	r2,-8(fp)
  812b24:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  812b28:	e0bffe17 	ldw	r2,-8(fp)
  812b2c:	10000315 	stw	zero,12(r2)

  return ticks;
  812b30:	e0bffd17 	ldw	r2,-12(fp)
  812b34:	e0bfff15 	stw	r2,-4(fp)
  812b38:	e0bfff17 	ldw	r2,-4(fp)
}
  812b3c:	e037883a 	mov	sp,fp
  812b40:	dfc00117 	ldw	ra,4(sp)
  812b44:	df000017 	ldw	fp,0(sp)
  812b48:	dec00204 	addi	sp,sp,8
  812b4c:	f800283a 	ret

00812b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812b50:	defffd04 	addi	sp,sp,-12
  812b54:	dfc00215 	stw	ra,8(sp)
  812b58:	df000115 	stw	fp,4(sp)
  812b5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812b60:	00802074 	movhi	r2,129
  812b64:	109c3404 	addi	r2,r2,28880
  812b68:	10800017 	ldw	r2,0(r2)
  812b6c:	1005003a 	cmpeq	r2,r2,zero
  812b70:	1000061e 	bne	r2,zero,812b8c <alt_get_errno+0x3c>
  812b74:	00802074 	movhi	r2,129
  812b78:	109c3404 	addi	r2,r2,28880
  812b7c:	10800017 	ldw	r2,0(r2)
  812b80:	103ee83a 	callr	r2
  812b84:	e0bfff15 	stw	r2,-4(fp)
  812b88:	00000306 	br	812b98 <alt_get_errno+0x48>
  812b8c:	008020b4 	movhi	r2,130
  812b90:	10a31204 	addi	r2,r2,-29624
  812b94:	e0bfff15 	stw	r2,-4(fp)
  812b98:	e0bfff17 	ldw	r2,-4(fp)
}
  812b9c:	e037883a 	mov	sp,fp
  812ba0:	dfc00117 	ldw	ra,4(sp)
  812ba4:	df000017 	ldw	fp,0(sp)
  812ba8:	dec00204 	addi	sp,sp,8
  812bac:	f800283a 	ret

00812bb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  812bb0:	defff704 	addi	sp,sp,-36
  812bb4:	dfc00815 	stw	ra,32(sp)
  812bb8:	df000715 	stw	fp,28(sp)
  812bbc:	df000704 	addi	fp,sp,28
  812bc0:	e13ffb15 	stw	r4,-20(fp)
  812bc4:	e17ffc15 	stw	r5,-16(fp)
  812bc8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812bcc:	e0bffb17 	ldw	r2,-20(fp)
  812bd0:	1004803a 	cmplt	r2,r2,zero
  812bd4:	1000091e 	bne	r2,zero,812bfc <write+0x4c>
  812bd8:	e13ffb17 	ldw	r4,-20(fp)
  812bdc:	01400304 	movi	r5,12
  812be0:	08027a80 	call	8027a8 <__mulsi3>
  812be4:	1007883a 	mov	r3,r2
  812be8:	00802074 	movhi	r2,129
  812bec:	1097a604 	addi	r2,r2,24216
  812bf0:	1887883a 	add	r3,r3,r2
  812bf4:	e0ffff15 	stw	r3,-4(fp)
  812bf8:	00000106 	br	812c00 <write+0x50>
  812bfc:	e03fff15 	stw	zero,-4(fp)
  812c00:	e0bfff17 	ldw	r2,-4(fp)
  812c04:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812c08:	e0bffa17 	ldw	r2,-24(fp)
  812c0c:	1005003a 	cmpeq	r2,r2,zero
  812c10:	1000241e 	bne	r2,zero,812ca4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  812c14:	e0bffa17 	ldw	r2,-24(fp)
  812c18:	10800217 	ldw	r2,8(r2)
  812c1c:	108000cc 	andi	r2,r2,3
  812c20:	1005003a 	cmpeq	r2,r2,zero
  812c24:	10001a1e 	bne	r2,zero,812c90 <write+0xe0>
  812c28:	e0bffa17 	ldw	r2,-24(fp)
  812c2c:	10800017 	ldw	r2,0(r2)
  812c30:	10800617 	ldw	r2,24(r2)
  812c34:	1005003a 	cmpeq	r2,r2,zero
  812c38:	1000151e 	bne	r2,zero,812c90 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  812c3c:	e0bffa17 	ldw	r2,-24(fp)
  812c40:	10800017 	ldw	r2,0(r2)
  812c44:	10800617 	ldw	r2,24(r2)
  812c48:	e17ffc17 	ldw	r5,-16(fp)
  812c4c:	e1bffd17 	ldw	r6,-12(fp)
  812c50:	e13ffa17 	ldw	r4,-24(fp)
  812c54:	103ee83a 	callr	r2
  812c58:	e0bff915 	stw	r2,-28(fp)
  812c5c:	e0bff917 	ldw	r2,-28(fp)
  812c60:	1004403a 	cmpge	r2,r2,zero
  812c64:	1000071e 	bne	r2,zero,812c84 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  812c68:	0812cd40 	call	812cd4 <alt_get_errno>
  812c6c:	e0fff917 	ldw	r3,-28(fp)
  812c70:	00c7c83a 	sub	r3,zero,r3
  812c74:	10c00015 	stw	r3,0(r2)
        return -1;
  812c78:	00bfffc4 	movi	r2,-1
  812c7c:	e0bffe15 	stw	r2,-8(fp)
  812c80:	00000e06 	br	812cbc <write+0x10c>
      }
      return rval;
  812c84:	e0bff917 	ldw	r2,-28(fp)
  812c88:	e0bffe15 	stw	r2,-8(fp)
  812c8c:	00000b06 	br	812cbc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  812c90:	0812cd40 	call	812cd4 <alt_get_errno>
  812c94:	1007883a 	mov	r3,r2
  812c98:	00800344 	movi	r2,13
  812c9c:	18800015 	stw	r2,0(r3)
  812ca0:	00000406 	br	812cb4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  812ca4:	0812cd40 	call	812cd4 <alt_get_errno>
  812ca8:	1007883a 	mov	r3,r2
  812cac:	00801444 	movi	r2,81
  812cb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812cb4:	00bfffc4 	movi	r2,-1
  812cb8:	e0bffe15 	stw	r2,-8(fp)
  812cbc:	e0bffe17 	ldw	r2,-8(fp)
}
  812cc0:	e037883a 	mov	sp,fp
  812cc4:	dfc00117 	ldw	ra,4(sp)
  812cc8:	df000017 	ldw	fp,0(sp)
  812ccc:	dec00204 	addi	sp,sp,8
  812cd0:	f800283a 	ret

00812cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812cd4:	defffd04 	addi	sp,sp,-12
  812cd8:	dfc00215 	stw	ra,8(sp)
  812cdc:	df000115 	stw	fp,4(sp)
  812ce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812ce4:	00802074 	movhi	r2,129
  812ce8:	109c3404 	addi	r2,r2,28880
  812cec:	10800017 	ldw	r2,0(r2)
  812cf0:	1005003a 	cmpeq	r2,r2,zero
  812cf4:	1000061e 	bne	r2,zero,812d10 <alt_get_errno+0x3c>
  812cf8:	00802074 	movhi	r2,129
  812cfc:	109c3404 	addi	r2,r2,28880
  812d00:	10800017 	ldw	r2,0(r2)
  812d04:	103ee83a 	callr	r2
  812d08:	e0bfff15 	stw	r2,-4(fp)
  812d0c:	00000306 	br	812d1c <alt_get_errno+0x48>
  812d10:	008020b4 	movhi	r2,130
  812d14:	10a31204 	addi	r2,r2,-29624
  812d18:	e0bfff15 	stw	r2,-4(fp)
  812d1c:	e0bfff17 	ldw	r2,-4(fp)
}
  812d20:	e037883a 	mov	sp,fp
  812d24:	dfc00117 	ldw	ra,4(sp)
  812d28:	df000017 	ldw	fp,0(sp)
  812d2c:	dec00204 	addi	sp,sp,8
  812d30:	f800283a 	ret

00812d34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812d34:	defffd04 	addi	sp,sp,-12
  812d38:	dfc00215 	stw	ra,8(sp)
  812d3c:	df000115 	stw	fp,4(sp)
  812d40:	df000104 	addi	fp,sp,4
  812d44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  812d48:	0814b2c0 	call	814b2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  812d4c:	00800044 	movi	r2,1
  812d50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812d54:	e037883a 	mov	sp,fp
  812d58:	dfc00117 	ldw	ra,4(sp)
  812d5c:	df000017 	ldw	fp,0(sp)
  812d60:	dec00204 	addi	sp,sp,8
  812d64:	f800283a 	ret

00812d68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  812d68:	defffe04 	addi	sp,sp,-8
  812d6c:	dfc00115 	stw	ra,4(sp)
  812d70:	df000015 	stw	fp,0(sp)
  812d74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  812d78:	01004474 	movhi	r4,273
  812d7c:	21040804 	addi	r4,r4,4128
  812d80:	000b883a 	mov	r5,zero
  812d84:	01800044 	movi	r6,1
  812d88:	01c0fa04 	movi	r7,1000
  812d8c:	081394c0 	call	81394c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  812d90:	00c020b4 	movhi	r3,130
  812d94:	18e31c04 	addi	r3,r3,-29584
  812d98:	00804474 	movhi	r2,273
  812d9c:	10840004 	addi	r2,r2,4096
  812da0:	18800015 	stw	r2,0(r3)
  812da4:	00c020b4 	movhi	r3,130
  812da8:	18e31d04 	addi	r3,r3,-29580
  812dac:	0080bef4 	movhi	r2,763
  812db0:	10bc2004 	addi	r2,r2,-3968
  812db4:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  812db8:	01002074 	movhi	r4,129
  812dbc:	21181004 	addi	r4,r4,24640
  812dc0:	000b883a 	mov	r5,zero
  812dc4:	01800404 	movi	r6,16
  812dc8:	0812f780 	call	812f78 <altera_avalon_jtag_uart_init>
  812dcc:	01002074 	movhi	r4,129
  812dd0:	21180604 	addi	r4,r4,24600
  812dd4:	0812df80 	call	812df8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  812dd8:	01002074 	movhi	r4,129
  812ddc:	211c1e04 	addi	r4,r4,28792
  812de0:	08143dc0 	call	8143dc <alt_fs_reg>
}
  812de4:	e037883a 	mov	sp,fp
  812de8:	dfc00117 	ldw	ra,4(sp)
  812dec:	df000017 	ldw	fp,0(sp)
  812df0:	dec00204 	addi	sp,sp,8
  812df4:	f800283a 	ret

00812df8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812df8:	defffd04 	addi	sp,sp,-12
  812dfc:	dfc00215 	stw	ra,8(sp)
  812e00:	df000115 	stw	fp,4(sp)
  812e04:	df000104 	addi	fp,sp,4
  812e08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812e0c:	e13fff17 	ldw	r4,-4(fp)
  812e10:	01402074 	movhi	r5,129
  812e14:	295c3104 	addi	r5,r5,28868
  812e18:	08141140 	call	814114 <alt_dev_llist_insert>
}
  812e1c:	e037883a 	mov	sp,fp
  812e20:	dfc00117 	ldw	ra,4(sp)
  812e24:	df000017 	ldw	fp,0(sp)
  812e28:	dec00204 	addi	sp,sp,8
  812e2c:	f800283a 	ret

00812e30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812e30:	defffa04 	addi	sp,sp,-24
  812e34:	dfc00515 	stw	ra,20(sp)
  812e38:	df000415 	stw	fp,16(sp)
  812e3c:	df000404 	addi	fp,sp,16
  812e40:	e13ffd15 	stw	r4,-12(fp)
  812e44:	e17ffe15 	stw	r5,-8(fp)
  812e48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812e4c:	e0bffd17 	ldw	r2,-12(fp)
  812e50:	10800017 	ldw	r2,0(r2)
  812e54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812e58:	e0bffc17 	ldw	r2,-16(fp)
  812e5c:	11000a04 	addi	r4,r2,40
  812e60:	e0bffd17 	ldw	r2,-12(fp)
  812e64:	11c00217 	ldw	r7,8(r2)
  812e68:	e17ffe17 	ldw	r5,-8(fp)
  812e6c:	e1bfff17 	ldw	r6,-4(fp)
  812e70:	08134780 	call	813478 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812e74:	e037883a 	mov	sp,fp
  812e78:	dfc00117 	ldw	ra,4(sp)
  812e7c:	df000017 	ldw	fp,0(sp)
  812e80:	dec00204 	addi	sp,sp,8
  812e84:	f800283a 	ret

00812e88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812e88:	defffa04 	addi	sp,sp,-24
  812e8c:	dfc00515 	stw	ra,20(sp)
  812e90:	df000415 	stw	fp,16(sp)
  812e94:	df000404 	addi	fp,sp,16
  812e98:	e13ffd15 	stw	r4,-12(fp)
  812e9c:	e17ffe15 	stw	r5,-8(fp)
  812ea0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812ea4:	e0bffd17 	ldw	r2,-12(fp)
  812ea8:	10800017 	ldw	r2,0(r2)
  812eac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812eb0:	e0bffc17 	ldw	r2,-16(fp)
  812eb4:	11000a04 	addi	r4,r2,40
  812eb8:	e0bffd17 	ldw	r2,-12(fp)
  812ebc:	11c00217 	ldw	r7,8(r2)
  812ec0:	e17ffe17 	ldw	r5,-8(fp)
  812ec4:	e1bfff17 	ldw	r6,-4(fp)
  812ec8:	081369c0 	call	81369c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812ecc:	e037883a 	mov	sp,fp
  812ed0:	dfc00117 	ldw	ra,4(sp)
  812ed4:	df000017 	ldw	fp,0(sp)
  812ed8:	dec00204 	addi	sp,sp,8
  812edc:	f800283a 	ret

00812ee0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812ee0:	defffc04 	addi	sp,sp,-16
  812ee4:	dfc00315 	stw	ra,12(sp)
  812ee8:	df000215 	stw	fp,8(sp)
  812eec:	df000204 	addi	fp,sp,8
  812ef0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812ef4:	e0bfff17 	ldw	r2,-4(fp)
  812ef8:	10800017 	ldw	r2,0(r2)
  812efc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812f00:	e0bffe17 	ldw	r2,-8(fp)
  812f04:	11000a04 	addi	r4,r2,40
  812f08:	e0bfff17 	ldw	r2,-4(fp)
  812f0c:	11400217 	ldw	r5,8(r2)
  812f10:	08133100 	call	813310 <altera_avalon_jtag_uart_close>
}
  812f14:	e037883a 	mov	sp,fp
  812f18:	dfc00117 	ldw	ra,4(sp)
  812f1c:	df000017 	ldw	fp,0(sp)
  812f20:	dec00204 	addi	sp,sp,8
  812f24:	f800283a 	ret

00812f28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812f28:	defffa04 	addi	sp,sp,-24
  812f2c:	dfc00515 	stw	ra,20(sp)
  812f30:	df000415 	stw	fp,16(sp)
  812f34:	df000404 	addi	fp,sp,16
  812f38:	e13ffd15 	stw	r4,-12(fp)
  812f3c:	e17ffe15 	stw	r5,-8(fp)
  812f40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812f44:	e0bffd17 	ldw	r2,-12(fp)
  812f48:	10800017 	ldw	r2,0(r2)
  812f4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812f50:	e0bffc17 	ldw	r2,-16(fp)
  812f54:	11000a04 	addi	r4,r2,40
  812f58:	e17ffe17 	ldw	r5,-8(fp)
  812f5c:	e1bfff17 	ldw	r6,-4(fp)
  812f60:	08133840 	call	813384 <altera_avalon_jtag_uart_ioctl>
}
  812f64:	e037883a 	mov	sp,fp
  812f68:	dfc00117 	ldw	ra,4(sp)
  812f6c:	df000017 	ldw	fp,0(sp)
  812f70:	dec00204 	addi	sp,sp,8
  812f74:	f800283a 	ret

00812f78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  812f78:	defffa04 	addi	sp,sp,-24
  812f7c:	dfc00515 	stw	ra,20(sp)
  812f80:	df000415 	stw	fp,16(sp)
  812f84:	df000404 	addi	fp,sp,16
  812f88:	e13ffd15 	stw	r4,-12(fp)
  812f8c:	e17ffe15 	stw	r5,-8(fp)
  812f90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812f94:	e0fffd17 	ldw	r3,-12(fp)
  812f98:	00800044 	movi	r2,1
  812f9c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812fa0:	e0bffd17 	ldw	r2,-12(fp)
  812fa4:	10800017 	ldw	r2,0(r2)
  812fa8:	11000104 	addi	r4,r2,4
  812fac:	e0bffd17 	ldw	r2,-12(fp)
  812fb0:	10800817 	ldw	r2,32(r2)
  812fb4:	1007883a 	mov	r3,r2
  812fb8:	2005883a 	mov	r2,r4
  812fbc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  812fc0:	e13ffe17 	ldw	r4,-8(fp)
  812fc4:	e17fff17 	ldw	r5,-4(fp)
  812fc8:	d8000015 	stw	zero,0(sp)
  812fcc:	01802074 	movhi	r6,129
  812fd0:	318c0e04 	addi	r6,r6,12344
  812fd4:	e1fffd17 	ldw	r7,-12(fp)
  812fd8:	081456c0 	call	81456c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812fdc:	e0bffd17 	ldw	r2,-12(fp)
  812fe0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812fe4:	e0bffd17 	ldw	r2,-12(fp)
  812fe8:	11000204 	addi	r4,r2,8
  812fec:	008020b4 	movhi	r2,130
  812ff0:	10a31f04 	addi	r2,r2,-29572
  812ff4:	10800017 	ldw	r2,0(r2)
  812ff8:	100b883a 	mov	r5,r2
  812ffc:	01802074 	movhi	r6,129
  813000:	318c9804 	addi	r6,r6,12896
  813004:	e1fffd17 	ldw	r7,-12(fp)
  813008:	0813f7c0 	call	813f7c <alt_alarm_start>
  81300c:	1004403a 	cmpge	r2,r2,zero
  813010:	1000041e 	bne	r2,zero,813024 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813014:	e0fffd17 	ldw	r3,-12(fp)
  813018:	00a00034 	movhi	r2,32768
  81301c:	10bfffc4 	addi	r2,r2,-1
  813020:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813024:	e037883a 	mov	sp,fp
  813028:	dfc00117 	ldw	ra,4(sp)
  81302c:	df000017 	ldw	fp,0(sp)
  813030:	dec00204 	addi	sp,sp,8
  813034:	f800283a 	ret

00813038 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813038:	defff804 	addi	sp,sp,-32
  81303c:	df000715 	stw	fp,28(sp)
  813040:	df000704 	addi	fp,sp,28
  813044:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813048:	e0bfff17 	ldw	r2,-4(fp)
  81304c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  813050:	e0bffe17 	ldw	r2,-8(fp)
  813054:	10800017 	ldw	r2,0(r2)
  813058:	e0bffd15 	stw	r2,-12(fp)
  81305c:	00000006 	br	813060 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813060:	e0bffd17 	ldw	r2,-12(fp)
  813064:	10800104 	addi	r2,r2,4
  813068:	10800037 	ldwio	r2,0(r2)
  81306c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813070:	e0bffc17 	ldw	r2,-16(fp)
  813074:	1080c00c 	andi	r2,r2,768
  813078:	1005003a 	cmpeq	r2,r2,zero
  81307c:	1000741e 	bne	r2,zero,813250 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813080:	e0bffc17 	ldw	r2,-16(fp)
  813084:	1080400c 	andi	r2,r2,256
  813088:	1005003a 	cmpeq	r2,r2,zero
  81308c:	1000351e 	bne	r2,zero,813164 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813090:	00800074 	movhi	r2,1
  813094:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813098:	e0bffe17 	ldw	r2,-8(fp)
  81309c:	10800a17 	ldw	r2,40(r2)
  8130a0:	10800044 	addi	r2,r2,1
  8130a4:	1081ffcc 	andi	r2,r2,2047
  8130a8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8130ac:	e0bffe17 	ldw	r2,-8(fp)
  8130b0:	10c00b17 	ldw	r3,44(r2)
  8130b4:	e0bffa17 	ldw	r2,-24(fp)
  8130b8:	18801626 	beq	r3,r2,813114 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8130bc:	e0bffd17 	ldw	r2,-12(fp)
  8130c0:	10800037 	ldwio	r2,0(r2)
  8130c4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8130c8:	e0bffb17 	ldw	r2,-20(fp)
  8130cc:	10a0000c 	andi	r2,r2,32768
  8130d0:	1005003a 	cmpeq	r2,r2,zero
  8130d4:	10000f1e 	bne	r2,zero,813114 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8130d8:	e0bffe17 	ldw	r2,-8(fp)
  8130dc:	10c00a17 	ldw	r3,40(r2)
  8130e0:	e0bffb17 	ldw	r2,-20(fp)
  8130e4:	1009883a 	mov	r4,r2
  8130e8:	e0bffe17 	ldw	r2,-8(fp)
  8130ec:	1885883a 	add	r2,r3,r2
  8130f0:	10800e04 	addi	r2,r2,56
  8130f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	10800a17 	ldw	r2,40(r2)
  813100:	10800044 	addi	r2,r2,1
  813104:	10c1ffcc 	andi	r3,r2,2047
  813108:	e0bffe17 	ldw	r2,-8(fp)
  81310c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813110:	003fe106 	br	813098 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813114:	e0bffb17 	ldw	r2,-20(fp)
  813118:	10bfffec 	andhi	r2,r2,65535
  81311c:	1005003a 	cmpeq	r2,r2,zero
  813120:	1000101e 	bne	r2,zero,813164 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813124:	e0bffe17 	ldw	r2,-8(fp)
  813128:	10c00817 	ldw	r3,32(r2)
  81312c:	00bfff84 	movi	r2,-2
  813130:	1886703a 	and	r3,r3,r2
  813134:	e0bffe17 	ldw	r2,-8(fp)
  813138:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81313c:	e0bffd17 	ldw	r2,-12(fp)
  813140:	11000104 	addi	r4,r2,4
  813144:	e0bffe17 	ldw	r2,-8(fp)
  813148:	10800817 	ldw	r2,32(r2)
  81314c:	1007883a 	mov	r3,r2
  813150:	2005883a 	mov	r2,r4
  813154:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813158:	e0bffd17 	ldw	r2,-12(fp)
  81315c:	10800104 	addi	r2,r2,4
  813160:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813164:	e0bffc17 	ldw	r2,-16(fp)
  813168:	1080800c 	andi	r2,r2,512
  81316c:	1005003a 	cmpeq	r2,r2,zero
  813170:	103fbb1e 	bne	r2,zero,813060 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813174:	e0bffc17 	ldw	r2,-16(fp)
  813178:	10bfffec 	andhi	r2,r2,65535
  81317c:	1004d43a 	srli	r2,r2,16
  813180:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813184:	00001506 	br	8131dc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813188:	e13ffd17 	ldw	r4,-12(fp)
  81318c:	e0bffe17 	ldw	r2,-8(fp)
  813190:	10c00d17 	ldw	r3,52(r2)
  813194:	e0bffe17 	ldw	r2,-8(fp)
  813198:	1885883a 	add	r2,r3,r2
  81319c:	10820e04 	addi	r2,r2,2104
  8131a0:	10800003 	ldbu	r2,0(r2)
  8131a4:	10c03fcc 	andi	r3,r2,255
  8131a8:	18c0201c 	xori	r3,r3,128
  8131ac:	18ffe004 	addi	r3,r3,-128
  8131b0:	2005883a 	mov	r2,r4
  8131b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8131b8:	e0bffe17 	ldw	r2,-8(fp)
  8131bc:	10800d17 	ldw	r2,52(r2)
  8131c0:	10800044 	addi	r2,r2,1
  8131c4:	10c1ffcc 	andi	r3,r2,2047
  8131c8:	e0bffe17 	ldw	r2,-8(fp)
  8131cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8131d0:	e0bff917 	ldw	r2,-28(fp)
  8131d4:	10bfffc4 	addi	r2,r2,-1
  8131d8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8131dc:	e0bff917 	ldw	r2,-28(fp)
  8131e0:	1005003a 	cmpeq	r2,r2,zero
  8131e4:	1000051e 	bne	r2,zero,8131fc <altera_avalon_jtag_uart_irq+0x1c4>
  8131e8:	e0bffe17 	ldw	r2,-8(fp)
  8131ec:	10c00d17 	ldw	r3,52(r2)
  8131f0:	e0bffe17 	ldw	r2,-8(fp)
  8131f4:	10800c17 	ldw	r2,48(r2)
  8131f8:	18bfe31e 	bne	r3,r2,813188 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8131fc:	e0bff917 	ldw	r2,-28(fp)
  813200:	1005003a 	cmpeq	r2,r2,zero
  813204:	103f961e 	bne	r2,zero,813060 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813208:	e0bffe17 	ldw	r2,-8(fp)
  81320c:	10c00817 	ldw	r3,32(r2)
  813210:	00bfff44 	movi	r2,-3
  813214:	1886703a 	and	r3,r3,r2
  813218:	e0bffe17 	ldw	r2,-8(fp)
  81321c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813220:	e0bffe17 	ldw	r2,-8(fp)
  813224:	10800017 	ldw	r2,0(r2)
  813228:	11000104 	addi	r4,r2,4
  81322c:	e0bffe17 	ldw	r2,-8(fp)
  813230:	10800817 	ldw	r2,32(r2)
  813234:	1007883a 	mov	r3,r2
  813238:	2005883a 	mov	r2,r4
  81323c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813240:	e0bffd17 	ldw	r2,-12(fp)
  813244:	10800104 	addi	r2,r2,4
  813248:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81324c:	003f8406 	br	813060 <altera_avalon_jtag_uart_irq+0x28>
}
  813250:	e037883a 	mov	sp,fp
  813254:	df000017 	ldw	fp,0(sp)
  813258:	dec00104 	addi	sp,sp,4
  81325c:	f800283a 	ret

00813260 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813260:	defffc04 	addi	sp,sp,-16
  813264:	df000315 	stw	fp,12(sp)
  813268:	df000304 	addi	fp,sp,12
  81326c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813270:	e0bfff17 	ldw	r2,-4(fp)
  813274:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813278:	e0bffe17 	ldw	r2,-8(fp)
  81327c:	10800017 	ldw	r2,0(r2)
  813280:	10800104 	addi	r2,r2,4
  813284:	10800037 	ldwio	r2,0(r2)
  813288:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81328c:	e0bffd17 	ldw	r2,-12(fp)
  813290:	1081000c 	andi	r2,r2,1024
  813294:	1005003a 	cmpeq	r2,r2,zero
  813298:	10000c1e 	bne	r2,zero,8132cc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81329c:	e0bffe17 	ldw	r2,-8(fp)
  8132a0:	10800017 	ldw	r2,0(r2)
  8132a4:	11000104 	addi	r4,r2,4
  8132a8:	e0bffe17 	ldw	r2,-8(fp)
  8132ac:	10800817 	ldw	r2,32(r2)
  8132b0:	10810014 	ori	r2,r2,1024
  8132b4:	1007883a 	mov	r3,r2
  8132b8:	2005883a 	mov	r2,r4
  8132bc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8132c0:	e0bffe17 	ldw	r2,-8(fp)
  8132c4:	10000915 	stw	zero,36(r2)
  8132c8:	00000a06 	br	8132f4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8132cc:	e0bffe17 	ldw	r2,-8(fp)
  8132d0:	10c00917 	ldw	r3,36(r2)
  8132d4:	00a00034 	movhi	r2,32768
  8132d8:	10bfff04 	addi	r2,r2,-4
  8132dc:	10c00536 	bltu	r2,r3,8132f4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  8132e0:	e0bffe17 	ldw	r2,-8(fp)
  8132e4:	10800917 	ldw	r2,36(r2)
  8132e8:	10c00044 	addi	r3,r2,1
  8132ec:	e0bffe17 	ldw	r2,-8(fp)
  8132f0:	10c00915 	stw	r3,36(r2)
  8132f4:	008020b4 	movhi	r2,130
  8132f8:	10a31f04 	addi	r2,r2,-29572
  8132fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813300:	e037883a 	mov	sp,fp
  813304:	df000017 	ldw	fp,0(sp)
  813308:	dec00104 	addi	sp,sp,4
  81330c:	f800283a 	ret

00813310 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813310:	defffc04 	addi	sp,sp,-16
  813314:	df000315 	stw	fp,12(sp)
  813318:	df000304 	addi	fp,sp,12
  81331c:	e13ffd15 	stw	r4,-12(fp)
  813320:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813324:	00000706 	br	813344 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813328:	e0bffe17 	ldw	r2,-8(fp)
  81332c:	1090000c 	andi	r2,r2,16384
  813330:	1005003a 	cmpeq	r2,r2,zero
  813334:	1000031e 	bne	r2,zero,813344 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813338:	00bffd44 	movi	r2,-11
  81333c:	e0bfff15 	stw	r2,-4(fp)
  813340:	00000b06 	br	813370 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813344:	e0bffd17 	ldw	r2,-12(fp)
  813348:	10c00d17 	ldw	r3,52(r2)
  81334c:	e0bffd17 	ldw	r2,-12(fp)
  813350:	10800c17 	ldw	r2,48(r2)
  813354:	18800526 	beq	r3,r2,81336c <altera_avalon_jtag_uart_close+0x5c>
  813358:	e0bffd17 	ldw	r2,-12(fp)
  81335c:	10c00917 	ldw	r3,36(r2)
  813360:	e0bffd17 	ldw	r2,-12(fp)
  813364:	10800117 	ldw	r2,4(r2)
  813368:	18bfef36 	bltu	r3,r2,813328 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81336c:	e03fff15 	stw	zero,-4(fp)
  813370:	e0bfff17 	ldw	r2,-4(fp)
}
  813374:	e037883a 	mov	sp,fp
  813378:	df000017 	ldw	fp,0(sp)
  81337c:	dec00104 	addi	sp,sp,4
  813380:	f800283a 	ret

00813384 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813384:	defff804 	addi	sp,sp,-32
  813388:	df000715 	stw	fp,28(sp)
  81338c:	df000704 	addi	fp,sp,28
  813390:	e13ffb15 	stw	r4,-20(fp)
  813394:	e17ffc15 	stw	r5,-16(fp)
  813398:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81339c:	00bff9c4 	movi	r2,-25
  8133a0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8133a4:	e0bffc17 	ldw	r2,-16(fp)
  8133a8:	e0bfff15 	stw	r2,-4(fp)
  8133ac:	e0ffff17 	ldw	r3,-4(fp)
  8133b0:	189a8060 	cmpeqi	r2,r3,27137
  8133b4:	1000041e 	bne	r2,zero,8133c8 <altera_avalon_jtag_uart_ioctl+0x44>
  8133b8:	e0ffff17 	ldw	r3,-4(fp)
  8133bc:	189a80a0 	cmpeqi	r2,r3,27138
  8133c0:	10001b1e 	bne	r2,zero,813430 <altera_avalon_jtag_uart_ioctl+0xac>
  8133c4:	00002706 	br	813464 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8133c8:	e0bffb17 	ldw	r2,-20(fp)
  8133cc:	10c00117 	ldw	r3,4(r2)
  8133d0:	00a00034 	movhi	r2,32768
  8133d4:	10bfffc4 	addi	r2,r2,-1
  8133d8:	18802226 	beq	r3,r2,813464 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8133dc:	e0bffd17 	ldw	r2,-12(fp)
  8133e0:	10800017 	ldw	r2,0(r2)
  8133e4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8133e8:	e0bff917 	ldw	r2,-28(fp)
  8133ec:	10800090 	cmplti	r2,r2,2
  8133f0:	1000071e 	bne	r2,zero,813410 <altera_avalon_jtag_uart_ioctl+0x8c>
  8133f4:	e0fff917 	ldw	r3,-28(fp)
  8133f8:	00a00034 	movhi	r2,32768
  8133fc:	10bfffc4 	addi	r2,r2,-1
  813400:	18800326 	beq	r3,r2,813410 <altera_avalon_jtag_uart_ioctl+0x8c>
  813404:	e0bff917 	ldw	r2,-28(fp)
  813408:	e0bffe15 	stw	r2,-8(fp)
  81340c:	00000306 	br	81341c <altera_avalon_jtag_uart_ioctl+0x98>
  813410:	00e00034 	movhi	r3,32768
  813414:	18ffff84 	addi	r3,r3,-2
  813418:	e0fffe15 	stw	r3,-8(fp)
  81341c:	e0bffb17 	ldw	r2,-20(fp)
  813420:	e0fffe17 	ldw	r3,-8(fp)
  813424:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813428:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  81342c:	00000d06 	br	813464 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813430:	e0bffb17 	ldw	r2,-20(fp)
  813434:	10c00117 	ldw	r3,4(r2)
  813438:	00a00034 	movhi	r2,32768
  81343c:	10bfffc4 	addi	r2,r2,-1
  813440:	18800826 	beq	r3,r2,813464 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813444:	e13ffd17 	ldw	r4,-12(fp)
  813448:	e0bffb17 	ldw	r2,-20(fp)
  81344c:	10c00917 	ldw	r3,36(r2)
  813450:	e0bffb17 	ldw	r2,-20(fp)
  813454:	10800117 	ldw	r2,4(r2)
  813458:	1885803a 	cmpltu	r2,r3,r2
  81345c:	20800015 	stw	r2,0(r4)
      rc = 0;
  813460:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  813464:	e0bffa17 	ldw	r2,-24(fp)
}
  813468:	e037883a 	mov	sp,fp
  81346c:	df000017 	ldw	fp,0(sp)
  813470:	dec00104 	addi	sp,sp,4
  813474:	f800283a 	ret

00813478 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813478:	defff204 	addi	sp,sp,-56
  81347c:	dfc00d15 	stw	ra,52(sp)
  813480:	df000c15 	stw	fp,48(sp)
  813484:	df000c04 	addi	fp,sp,48
  813488:	e13ffb15 	stw	r4,-20(fp)
  81348c:	e17ffc15 	stw	r5,-16(fp)
  813490:	e1bffd15 	stw	r6,-12(fp)
  813494:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813498:	e0bffc17 	ldw	r2,-16(fp)
  81349c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8134a0:	00004806 	br	8135c4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8134a4:	e0bffb17 	ldw	r2,-20(fp)
  8134a8:	10800a17 	ldw	r2,40(r2)
  8134ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8134b0:	e0bffb17 	ldw	r2,-20(fp)
  8134b4:	10800b17 	ldw	r2,44(r2)
  8134b8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  8134bc:	e0fff717 	ldw	r3,-36(fp)
  8134c0:	e0bff617 	ldw	r2,-40(fp)
  8134c4:	18800536 	bltu	r3,r2,8134dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8134c8:	e0bff717 	ldw	r2,-36(fp)
  8134cc:	e0fff617 	ldw	r3,-40(fp)
  8134d0:	10c5c83a 	sub	r2,r2,r3
  8134d4:	e0bff815 	stw	r2,-32(fp)
  8134d8:	00000406 	br	8134ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8134dc:	00820004 	movi	r2,2048
  8134e0:	e0fff617 	ldw	r3,-40(fp)
  8134e4:	10c5c83a 	sub	r2,r2,r3
  8134e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8134ec:	e0bff817 	ldw	r2,-32(fp)
  8134f0:	1005003a 	cmpeq	r2,r2,zero
  8134f4:	10001f1e 	bne	r2,zero,813574 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  8134f8:	e0fffd17 	ldw	r3,-12(fp)
  8134fc:	e0bff817 	ldw	r2,-32(fp)
  813500:	1880022e 	bgeu	r3,r2,81350c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  813504:	e0bffd17 	ldw	r2,-12(fp)
  813508:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81350c:	e0bffb17 	ldw	r2,-20(fp)
  813510:	10c00e04 	addi	r3,r2,56
  813514:	e0bff617 	ldw	r2,-40(fp)
  813518:	1887883a 	add	r3,r3,r2
  81351c:	e0bffa17 	ldw	r2,-24(fp)
  813520:	1009883a 	mov	r4,r2
  813524:	180b883a 	mov	r5,r3
  813528:	e1bff817 	ldw	r6,-32(fp)
  81352c:	08050800 	call	805080 <memcpy>
      ptr   += n;
  813530:	e0fff817 	ldw	r3,-32(fp)
  813534:	e0bffa17 	ldw	r2,-24(fp)
  813538:	10c5883a 	add	r2,r2,r3
  81353c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  813540:	e0fffd17 	ldw	r3,-12(fp)
  813544:	e0bff817 	ldw	r2,-32(fp)
  813548:	1885c83a 	sub	r2,r3,r2
  81354c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813550:	e0fff617 	ldw	r3,-40(fp)
  813554:	e0bff817 	ldw	r2,-32(fp)
  813558:	1885883a 	add	r2,r3,r2
  81355c:	10c1ffcc 	andi	r3,r2,2047
  813560:	e0bffb17 	ldw	r2,-20(fp)
  813564:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  813568:	e0bffd17 	ldw	r2,-12(fp)
  81356c:	10800048 	cmpgei	r2,r2,1
  813570:	103fcc1e 	bne	r2,zero,8134a4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813574:	e0fffa17 	ldw	r3,-24(fp)
  813578:	e0bffc17 	ldw	r2,-16(fp)
  81357c:	1880141e 	bne	r3,r2,8135d0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	1090000c 	andi	r2,r2,16384
  813588:	1004c03a 	cmpne	r2,r2,zero
  81358c:	1000101e 	bne	r2,zero,8135d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813590:	e0bffb17 	ldw	r2,-20(fp)
  813594:	10c00a17 	ldw	r3,40(r2)
  813598:	e0bff717 	ldw	r2,-36(fp)
  81359c:	1880051e 	bne	r3,r2,8135b4 <altera_avalon_jtag_uart_read+0x13c>
  8135a0:	e0bffb17 	ldw	r2,-20(fp)
  8135a4:	10c00917 	ldw	r3,36(r2)
  8135a8:	e0bffb17 	ldw	r2,-20(fp)
  8135ac:	10800117 	ldw	r2,4(r2)
  8135b0:	18bff736 	bltu	r3,r2,813590 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8135b4:	e0bffb17 	ldw	r2,-20(fp)
  8135b8:	10c00a17 	ldw	r3,40(r2)
  8135bc:	e0bff717 	ldw	r2,-36(fp)
  8135c0:	18800326 	beq	r3,r2,8135d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8135c4:	e0bffd17 	ldw	r2,-12(fp)
  8135c8:	10800048 	cmpgei	r2,r2,1
  8135cc:	103fb51e 	bne	r2,zero,8134a4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8135d0:	e0fffa17 	ldw	r3,-24(fp)
  8135d4:	e0bffc17 	ldw	r2,-16(fp)
  8135d8:	18801926 	beq	r3,r2,813640 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135dc:	0005303a 	rdctl	r2,status
  8135e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135e4:	e0fff517 	ldw	r3,-44(fp)
  8135e8:	00bfff84 	movi	r2,-2
  8135ec:	1884703a 	and	r2,r3,r2
  8135f0:	1001703a 	wrctl	status,r2
  
  return context;
  8135f4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8135f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8135fc:	e0bffb17 	ldw	r2,-20(fp)
  813600:	10800817 	ldw	r2,32(r2)
  813604:	10c00054 	ori	r3,r2,1
  813608:	e0bffb17 	ldw	r2,-20(fp)
  81360c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813610:	e0bffb17 	ldw	r2,-20(fp)
  813614:	10800017 	ldw	r2,0(r2)
  813618:	11000104 	addi	r4,r2,4
  81361c:	e0bffb17 	ldw	r2,-20(fp)
  813620:	10800817 	ldw	r2,32(r2)
  813624:	1007883a 	mov	r3,r2
  813628:	2005883a 	mov	r2,r4
  81362c:	10c00035 	stwio	r3,0(r2)
  813630:	e0bff917 	ldw	r2,-28(fp)
  813634:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813638:	e0bff417 	ldw	r2,-48(fp)
  81363c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813640:	e0fffa17 	ldw	r3,-24(fp)
  813644:	e0bffc17 	ldw	r2,-16(fp)
  813648:	18800526 	beq	r3,r2,813660 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  81364c:	e0fffa17 	ldw	r3,-24(fp)
  813650:	e0bffc17 	ldw	r2,-16(fp)
  813654:	1887c83a 	sub	r3,r3,r2
  813658:	e0ffff15 	stw	r3,-4(fp)
  81365c:	00000906 	br	813684 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	1090000c 	andi	r2,r2,16384
  813668:	1005003a 	cmpeq	r2,r2,zero
  81366c:	1000031e 	bne	r2,zero,81367c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  813670:	00bffd44 	movi	r2,-11
  813674:	e0bfff15 	stw	r2,-4(fp)
  813678:	00000206 	br	813684 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  81367c:	00bffec4 	movi	r2,-5
  813680:	e0bfff15 	stw	r2,-4(fp)
  813684:	e0bfff17 	ldw	r2,-4(fp)
}
  813688:	e037883a 	mov	sp,fp
  81368c:	dfc00117 	ldw	ra,4(sp)
  813690:	df000017 	ldw	fp,0(sp)
  813694:	dec00204 	addi	sp,sp,8
  813698:	f800283a 	ret

0081369c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81369c:	defff204 	addi	sp,sp,-56
  8136a0:	dfc00d15 	stw	ra,52(sp)
  8136a4:	df000c15 	stw	fp,48(sp)
  8136a8:	df000c04 	addi	fp,sp,48
  8136ac:	e13ffb15 	stw	r4,-20(fp)
  8136b0:	e17ffc15 	stw	r5,-16(fp)
  8136b4:	e1bffd15 	stw	r6,-12(fp)
  8136b8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8136bc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8136c0:	e0bffc17 	ldw	r2,-16(fp)
  8136c4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8136c8:	00003a06 	br	8137b4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8136cc:	e0bffb17 	ldw	r2,-20(fp)
  8136d0:	10800c17 	ldw	r2,48(r2)
  8136d4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8136d8:	e0bffb17 	ldw	r2,-20(fp)
  8136dc:	10800d17 	ldw	r2,52(r2)
  8136e0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8136e4:	e0fffa17 	ldw	r3,-24(fp)
  8136e8:	e0bff917 	ldw	r2,-28(fp)
  8136ec:	1880062e 	bgeu	r3,r2,813708 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8136f0:	e0fff917 	ldw	r3,-28(fp)
  8136f4:	e0bffa17 	ldw	r2,-24(fp)
  8136f8:	1885c83a 	sub	r2,r3,r2
  8136fc:	10bfffc4 	addi	r2,r2,-1
  813700:	e0bff815 	stw	r2,-32(fp)
  813704:	00000c06 	br	813738 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  813708:	e0bff917 	ldw	r2,-28(fp)
  81370c:	1005003a 	cmpeq	r2,r2,zero
  813710:	1000051e 	bne	r2,zero,813728 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  813714:	00820004 	movi	r2,2048
  813718:	e0fffa17 	ldw	r3,-24(fp)
  81371c:	10c5c83a 	sub	r2,r2,r3
  813720:	e0bff815 	stw	r2,-32(fp)
  813724:	00000406 	br	813738 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813728:	0081ffc4 	movi	r2,2047
  81372c:	e0fffa17 	ldw	r3,-24(fp)
  813730:	10c5c83a 	sub	r2,r2,r3
  813734:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813738:	e0bff817 	ldw	r2,-32(fp)
  81373c:	1005003a 	cmpeq	r2,r2,zero
  813740:	10001f1e 	bne	r2,zero,8137c0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  813744:	e0fffd17 	ldw	r3,-12(fp)
  813748:	e0bff817 	ldw	r2,-32(fp)
  81374c:	1880022e 	bgeu	r3,r2,813758 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  813750:	e0bffd17 	ldw	r2,-12(fp)
  813754:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  813758:	e0bffb17 	ldw	r2,-20(fp)
  81375c:	10c20e04 	addi	r3,r2,2104
  813760:	e0bffa17 	ldw	r2,-24(fp)
  813764:	1885883a 	add	r2,r3,r2
  813768:	e0fffc17 	ldw	r3,-16(fp)
  81376c:	1009883a 	mov	r4,r2
  813770:	180b883a 	mov	r5,r3
  813774:	e1bff817 	ldw	r6,-32(fp)
  813778:	08050800 	call	805080 <memcpy>
      ptr   += n;
  81377c:	e0fff817 	ldw	r3,-32(fp)
  813780:	e0bffc17 	ldw	r2,-16(fp)
  813784:	10c5883a 	add	r2,r2,r3
  813788:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81378c:	e0fffd17 	ldw	r3,-12(fp)
  813790:	e0bff817 	ldw	r2,-32(fp)
  813794:	1885c83a 	sub	r2,r3,r2
  813798:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81379c:	e0fffa17 	ldw	r3,-24(fp)
  8137a0:	e0bff817 	ldw	r2,-32(fp)
  8137a4:	1885883a 	add	r2,r3,r2
  8137a8:	10c1ffcc 	andi	r3,r2,2047
  8137ac:	e0bffb17 	ldw	r2,-20(fp)
  8137b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8137b4:	e0bffd17 	ldw	r2,-12(fp)
  8137b8:	10800048 	cmpgei	r2,r2,1
  8137bc:	103fc31e 	bne	r2,zero,8136cc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137c0:	0005303a 	rdctl	r2,status
  8137c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137c8:	e0fff517 	ldw	r3,-44(fp)
  8137cc:	00bfff84 	movi	r2,-2
  8137d0:	1884703a 	and	r2,r3,r2
  8137d4:	1001703a 	wrctl	status,r2
  
  return context;
  8137d8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8137dc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8137e0:	e0bffb17 	ldw	r2,-20(fp)
  8137e4:	10800817 	ldw	r2,32(r2)
  8137e8:	10c00094 	ori	r3,r2,2
  8137ec:	e0bffb17 	ldw	r2,-20(fp)
  8137f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8137f4:	e0bffb17 	ldw	r2,-20(fp)
  8137f8:	10800017 	ldw	r2,0(r2)
  8137fc:	11000104 	addi	r4,r2,4
  813800:	e0bffb17 	ldw	r2,-20(fp)
  813804:	10800817 	ldw	r2,32(r2)
  813808:	1007883a 	mov	r3,r2
  81380c:	2005883a 	mov	r2,r4
  813810:	10c00035 	stwio	r3,0(r2)
  813814:	e0bff717 	ldw	r2,-36(fp)
  813818:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81381c:	e0bff417 	ldw	r2,-48(fp)
  813820:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  813824:	e0bffd17 	ldw	r2,-12(fp)
  813828:	10800050 	cmplti	r2,r2,1
  81382c:	1000111e 	bne	r2,zero,813874 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  813830:	e0bffe17 	ldw	r2,-8(fp)
  813834:	1090000c 	andi	r2,r2,16384
  813838:	1004c03a 	cmpne	r2,r2,zero
  81383c:	1000101e 	bne	r2,zero,813880 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813840:	e0bffb17 	ldw	r2,-20(fp)
  813844:	10c00d17 	ldw	r3,52(r2)
  813848:	e0bff917 	ldw	r2,-28(fp)
  81384c:	1880051e 	bne	r3,r2,813864 <altera_avalon_jtag_uart_write+0x1c8>
  813850:	e0bffb17 	ldw	r2,-20(fp)
  813854:	10c00917 	ldw	r3,36(r2)
  813858:	e0bffb17 	ldw	r2,-20(fp)
  81385c:	10800117 	ldw	r2,4(r2)
  813860:	18bff736 	bltu	r3,r2,813840 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  813864:	e0bffb17 	ldw	r2,-20(fp)
  813868:	10c00d17 	ldw	r3,52(r2)
  81386c:	e0bff917 	ldw	r2,-28(fp)
  813870:	18800326 	beq	r3,r2,813880 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  813874:	e0bffd17 	ldw	r2,-12(fp)
  813878:	10800048 	cmpgei	r2,r2,1
  81387c:	103fcd1e 	bne	r2,zero,8137b4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  813880:	e0fffc17 	ldw	r3,-16(fp)
  813884:	e0bff617 	ldw	r2,-40(fp)
  813888:	18800526 	beq	r3,r2,8138a0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  81388c:	e0fffc17 	ldw	r3,-16(fp)
  813890:	e0bff617 	ldw	r2,-40(fp)
  813894:	1887c83a 	sub	r3,r3,r2
  813898:	e0ffff15 	stw	r3,-4(fp)
  81389c:	00000906 	br	8138c4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8138a0:	e0bffe17 	ldw	r2,-8(fp)
  8138a4:	1090000c 	andi	r2,r2,16384
  8138a8:	1005003a 	cmpeq	r2,r2,zero
  8138ac:	1000031e 	bne	r2,zero,8138bc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8138b0:	00bffd44 	movi	r2,-11
  8138b4:	e0bfff15 	stw	r2,-4(fp)
  8138b8:	00000206 	br	8138c4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8138bc:	00bffec4 	movi	r2,-5
  8138c0:	e0bfff15 	stw	r2,-4(fp)
  8138c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8138c8:	e037883a 	mov	sp,fp
  8138cc:	dfc00117 	ldw	ra,4(sp)
  8138d0:	df000017 	ldw	fp,0(sp)
  8138d4:	dec00204 	addi	sp,sp,8
  8138d8:	f800283a 	ret

008138dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8138dc:	defffa04 	addi	sp,sp,-24
  8138e0:	dfc00515 	stw	ra,20(sp)
  8138e4:	df000415 	stw	fp,16(sp)
  8138e8:	df000404 	addi	fp,sp,16
  8138ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8138f0:	e0bfff17 	ldw	r2,-4(fp)
  8138f4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8138f8:	e0bfff17 	ldw	r2,-4(fp)
  8138fc:	10800104 	addi	r2,r2,4
  813900:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813904:	0005303a 	rdctl	r2,status
  813908:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81390c:	e0fffd17 	ldw	r3,-12(fp)
  813910:	00bfff84 	movi	r2,-2
  813914:	1884703a 	and	r2,r3,r2
  813918:	1001703a 	wrctl	status,r2
  
  return context;
  81391c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813920:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  813924:	0814a200 	call	814a20 <alt_tick>
  813928:	e0bffe17 	ldw	r2,-8(fp)
  81392c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813930:	e0bffc17 	ldw	r2,-16(fp)
  813934:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813938:	e037883a 	mov	sp,fp
  81393c:	dfc00117 	ldw	ra,4(sp)
  813940:	df000017 	ldw	fp,0(sp)
  813944:	dec00204 	addi	sp,sp,8
  813948:	f800283a 	ret

0081394c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81394c:	defff804 	addi	sp,sp,-32
  813950:	dfc00715 	stw	ra,28(sp)
  813954:	df000615 	stw	fp,24(sp)
  813958:	df000604 	addi	fp,sp,24
  81395c:	e13ffc15 	stw	r4,-16(fp)
  813960:	e17ffd15 	stw	r5,-12(fp)
  813964:	e1bffe15 	stw	r6,-8(fp)
  813968:	e1ffff15 	stw	r7,-4(fp)
  81396c:	e0bfff17 	ldw	r2,-4(fp)
  813970:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813974:	008020b4 	movhi	r2,130
  813978:	10a31f04 	addi	r2,r2,-29572
  81397c:	10800017 	ldw	r2,0(r2)
  813980:	1004c03a 	cmpne	r2,r2,zero
  813984:	1000041e 	bne	r2,zero,813998 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813988:	00c020b4 	movhi	r3,130
  81398c:	18e31f04 	addi	r3,r3,-29572
  813990:	e0bffb17 	ldw	r2,-20(fp)
  813994:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813998:	e0bffc17 	ldw	r2,-16(fp)
  81399c:	10800104 	addi	r2,r2,4
  8139a0:	1007883a 	mov	r3,r2
  8139a4:	008001c4 	movi	r2,7
  8139a8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8139ac:	d8000015 	stw	zero,0(sp)
  8139b0:	e13ffd17 	ldw	r4,-12(fp)
  8139b4:	e17ffe17 	ldw	r5,-8(fp)
  8139b8:	01802074 	movhi	r6,129
  8139bc:	318e3704 	addi	r6,r6,14556
  8139c0:	e1fffc17 	ldw	r7,-16(fp)
  8139c4:	081456c0 	call	81456c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8139c8:	e037883a 	mov	sp,fp
  8139cc:	dfc00117 	ldw	ra,4(sp)
  8139d0:	df000017 	ldw	fp,0(sp)
  8139d4:	dec00204 	addi	sp,sp,8
  8139d8:	f800283a 	ret

008139dc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  8139dc:	deffee04 	addi	sp,sp,-72
  8139e0:	df001115 	stw	fp,68(sp)
  8139e4:	df001104 	addi	fp,sp,68
  8139e8:	e13ffc15 	stw	r4,-16(fp)
  8139ec:	e17ffd15 	stw	r5,-12(fp)
  8139f0:	e1bffe15 	stw	r6,-8(fp)
  8139f4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  8139f8:	e0bffc17 	ldw	r2,-16(fp)
  8139fc:	10800017 	ldw	r2,0(r2)
  813a00:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  813a04:	e0bffb17 	ldw	r2,-20(fp)
  813a08:	10800217 	ldw	r2,8(r2)
  813a0c:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  813a10:	e0bff117 	ldw	r2,-60(fp)
  813a14:	10bfffc4 	addi	r2,r2,-1
  813a18:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
  813a1c:	e0bff217 	ldw	r2,-56(fp)
  813a20:	10800044 	addi	r2,r2,1
  813a24:	e0bff215 	stw	r2,-56(fp)
  813a28:	e0bff217 	ldw	r2,-56(fp)
  813a2c:	10800003 	ldbu	r2,0(r2)
  813a30:	10803fcc 	andi	r2,r2,255
  813a34:	1080201c 	xori	r2,r2,128
  813a38:	10bfe004 	addi	r2,r2,-128
  813a3c:	1004c03a 	cmpne	r2,r2,zero
  813a40:	103ff61e 	bne	r2,zero,813a1c <alt_hostfs_open+0x40>
    ;

  return ptr - string;
  813a44:	e0fff217 	ldw	r3,-56(fp)
  813a48:	e0bff117 	ldw	r2,-60(fp)
  813a4c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  813a50:	1007883a 	mov	r3,r2
  813a54:	e0bffd17 	ldw	r2,-12(fp)
  813a58:	1885883a 	add	r2,r3,r2
  813a5c:	10800044 	addi	r2,r2,1
  813a60:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  813a64:	d0a00e04 	addi	r2,gp,-32712
  813a68:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
  813a6c:	e0bffd17 	ldw	r2,-12(fp)
  813a70:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
  813a74:	e0bffe17 	ldw	r2,-8(fp)
  813a78:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
  813a7c:	e0bfff17 	ldw	r2,-4(fp)
  813a80:	e0bff415 	stw	r2,-48(fp)
  813a84:	e0bffd17 	ldw	r2,-12(fp)
  813a88:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  813a8c:	e0bfef17 	ldw	r2,-68(fp)
  813a90:	10bfffc4 	addi	r2,r2,-1
  813a94:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
  813a98:	e0bff017 	ldw	r2,-64(fp)
  813a9c:	10800044 	addi	r2,r2,1
  813aa0:	e0bff015 	stw	r2,-64(fp)
  813aa4:	e0bff017 	ldw	r2,-64(fp)
  813aa8:	10800003 	ldbu	r2,0(r2)
  813aac:	10803fcc 	andi	r2,r2,255
  813ab0:	1080201c 	xori	r2,r2,128
  813ab4:	10bfe004 	addi	r2,r2,-128
  813ab8:	1004c03a 	cmpne	r2,r2,zero
  813abc:	103ff61e 	bne	r2,zero,813a98 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
  813ac0:	e0fff017 	ldw	r3,-64(fp)
  813ac4:	e0bfef17 	ldw	r2,-68(fp)
  813ac8:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  813acc:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
  813ad0:	e13ff617 	ldw	r4,-40(fp)
  813ad4:	e17ff517 	ldw	r5,-44(fp)
  813ad8:	e1bff417 	ldw	r6,-48(fp)
  813adc:	e1fff317 	ldw	r7,-52(fp)
  813ae0:	e0fff717 	ldw	r3,-36(fp)
  813ae4:	003da07a 	break	1
  813ae8:	e0bff815 	stw	r2,-32(fp)
  813aec:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
  813af0:	e0bff817 	ldw	r2,-32(fp)
  813af4:	e0bff915 	stw	r2,-28(fp)
  error = r3;
  813af8:	e0bff717 	ldw	r2,-36(fp)
  813afc:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
  813b00:	e0bffa17 	ldw	r2,-24(fp)
  813b04:	1004c03a 	cmpne	r2,r2,zero
  813b08:	1000031e 	bne	r2,zero,813b18 <alt_hostfs_open+0x13c>
    fd->priv = handle;
  813b0c:	e0fff917 	ldw	r3,-28(fp)
  813b10:	e0bffc17 	ldw	r2,-16(fp)
  813b14:	10c00115 	stw	r3,4(r2)

  return -error;
  813b18:	e0bffa17 	ldw	r2,-24(fp)
  813b1c:	0085c83a 	sub	r2,zero,r2
}
  813b20:	e037883a 	mov	sp,fp
  813b24:	df000017 	ldw	fp,0(sp)
  813b28:	dec00104 	addi	sp,sp,4
  813b2c:	f800283a 	ret

00813b30 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  813b30:	defffb04 	addi	sp,sp,-20
  813b34:	df000415 	stw	fp,16(sp)
  813b38:	df000404 	addi	fp,sp,16
  813b3c:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
  813b40:	d0a01104 	addi	r2,gp,-32700
  813b44:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
  813b48:	e0bfff17 	ldw	r2,-4(fp)
  813b4c:	10800117 	ldw	r2,4(r2)
  813b50:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
  813b54:	e13ffc17 	ldw	r4,-16(fp)
  813b58:	e0fffd17 	ldw	r3,-12(fp)
  813b5c:	003da07a 	break	1
  813b60:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
  813b64:	e0bffd17 	ldw	r2,-12(fp)
  813b68:	e0bffe15 	stw	r2,-8(fp)

  return -error;
  813b6c:	e0bffe17 	ldw	r2,-8(fp)
  813b70:	0085c83a 	sub	r2,zero,r2
}
  813b74:	e037883a 	mov	sp,fp
  813b78:	df000017 	ldw	fp,0(sp)
  813b7c:	dec00104 	addi	sp,sp,4
  813b80:	f800283a 	ret

00813b84 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  813b84:	defff404 	addi	sp,sp,-48
  813b88:	df000b15 	stw	fp,44(sp)
  813b8c:	df000b04 	addi	fp,sp,44
  813b90:	e13ffc15 	stw	r4,-16(fp)
  813b94:	e17ffd15 	stw	r5,-12(fp)
  813b98:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813b9c:	d0a01404 	addi	r2,gp,-32688
  813ba0:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813ba4:	e0bffc17 	ldw	r2,-16(fp)
  813ba8:	10800117 	ldw	r2,4(r2)
  813bac:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813bb0:	e0bffd17 	ldw	r2,-12(fp)
  813bb4:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813bb8:	e0bffe17 	ldw	r2,-8(fp)
  813bbc:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813bc0:	e13ff717 	ldw	r4,-36(fp)
  813bc4:	e17ff617 	ldw	r5,-40(fp)
  813bc8:	e1bff517 	ldw	r6,-44(fp)
  813bcc:	e0fff817 	ldw	r3,-32(fp)
  813bd0:	003da07a 	break	1
  813bd4:	e0bff915 	stw	r2,-28(fp)
  813bd8:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813bdc:	e0bff917 	ldw	r2,-28(fp)
  813be0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813be4:	e0bff817 	ldw	r2,-32(fp)
  813be8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813bec:	e0bffb17 	ldw	r2,-20(fp)
  813bf0:	1005003a 	cmpeq	r2,r2,zero
  813bf4:	1000041e 	bne	r2,zero,813c08 <alt_hostfs_read+0x84>
  813bf8:	e0bffb17 	ldw	r2,-20(fp)
  813bfc:	0085c83a 	sub	r2,zero,r2
  813c00:	e0bfff15 	stw	r2,-4(fp)
  813c04:	00000206 	br	813c10 <alt_hostfs_read+0x8c>
  813c08:	e0bffa17 	ldw	r2,-24(fp)
  813c0c:	e0bfff15 	stw	r2,-4(fp)
  813c10:	e0bfff17 	ldw	r2,-4(fp)
}
  813c14:	e037883a 	mov	sp,fp
  813c18:	df000017 	ldw	fp,0(sp)
  813c1c:	dec00104 	addi	sp,sp,4
  813c20:	f800283a 	ret

00813c24 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  813c24:	defff404 	addi	sp,sp,-48
  813c28:	df000b15 	stw	fp,44(sp)
  813c2c:	df000b04 	addi	fp,sp,44
  813c30:	e13ffc15 	stw	r4,-16(fp)
  813c34:	e17ffd15 	stw	r5,-12(fp)
  813c38:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813c3c:	d0a01704 	addi	r2,gp,-32676
  813c40:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813c44:	e0bffc17 	ldw	r2,-16(fp)
  813c48:	10800117 	ldw	r2,4(r2)
  813c4c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813c50:	e0bffd17 	ldw	r2,-12(fp)
  813c54:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813c58:	e0bffe17 	ldw	r2,-8(fp)
  813c5c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813c60:	e13ff717 	ldw	r4,-36(fp)
  813c64:	e17ff617 	ldw	r5,-40(fp)
  813c68:	e1bff517 	ldw	r6,-44(fp)
  813c6c:	e0fff817 	ldw	r3,-32(fp)
  813c70:	003da07a 	break	1
  813c74:	e0bff915 	stw	r2,-28(fp)
  813c78:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813c7c:	e0bff917 	ldw	r2,-28(fp)
  813c80:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813c84:	e0bff817 	ldw	r2,-32(fp)
  813c88:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813c8c:	e0bffb17 	ldw	r2,-20(fp)
  813c90:	1005003a 	cmpeq	r2,r2,zero
  813c94:	1000041e 	bne	r2,zero,813ca8 <alt_hostfs_write+0x84>
  813c98:	e0bffb17 	ldw	r2,-20(fp)
  813c9c:	0085c83a 	sub	r2,zero,r2
  813ca0:	e0bfff15 	stw	r2,-4(fp)
  813ca4:	00000206 	br	813cb0 <alt_hostfs_write+0x8c>
  813ca8:	e0bffa17 	ldw	r2,-24(fp)
  813cac:	e0bfff15 	stw	r2,-4(fp)
  813cb0:	e0bfff17 	ldw	r2,-4(fp)
}
  813cb4:	e037883a 	mov	sp,fp
  813cb8:	df000017 	ldw	fp,0(sp)
  813cbc:	dec00104 	addi	sp,sp,4
  813cc0:	f800283a 	ret

00813cc4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  813cc4:	defff404 	addi	sp,sp,-48
  813cc8:	df000b15 	stw	fp,44(sp)
  813ccc:	df000b04 	addi	fp,sp,44
  813cd0:	e13ffc15 	stw	r4,-16(fp)
  813cd4:	e17ffd15 	stw	r5,-12(fp)
  813cd8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813cdc:	d0a01a04 	addi	r2,gp,-32664
  813ce0:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813ce4:	e0bffc17 	ldw	r2,-16(fp)
  813ce8:	10800117 	ldw	r2,4(r2)
  813cec:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
  813cf0:	e0bffd17 	ldw	r2,-12(fp)
  813cf4:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
  813cf8:	e0bffe17 	ldw	r2,-8(fp)
  813cfc:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813d00:	e13ff717 	ldw	r4,-36(fp)
  813d04:	e17ff617 	ldw	r5,-40(fp)
  813d08:	e1bff517 	ldw	r6,-44(fp)
  813d0c:	e0fff817 	ldw	r3,-32(fp)
  813d10:	003da07a 	break	1
  813d14:	e0bff915 	stw	r2,-28(fp)
  813d18:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813d1c:	e0bff917 	ldw	r2,-28(fp)
  813d20:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813d24:	e0bff817 	ldw	r2,-32(fp)
  813d28:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813d2c:	e0bffb17 	ldw	r2,-20(fp)
  813d30:	1005003a 	cmpeq	r2,r2,zero
  813d34:	1000041e 	bne	r2,zero,813d48 <alt_hostfs_seek+0x84>
  813d38:	e0bffb17 	ldw	r2,-20(fp)
  813d3c:	0085c83a 	sub	r2,zero,r2
  813d40:	e0bfff15 	stw	r2,-4(fp)
  813d44:	00000206 	br	813d50 <alt_hostfs_seek+0x8c>
  813d48:	e0bffa17 	ldw	r2,-24(fp)
  813d4c:	e0bfff15 	stw	r2,-4(fp)
  813d50:	e0bfff17 	ldw	r2,-4(fp)
}
  813d54:	e037883a 	mov	sp,fp
  813d58:	df000017 	ldw	fp,0(sp)
  813d5c:	dec00104 	addi	sp,sp,4
  813d60:	f800283a 	ret

00813d64 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  813d64:	deffe404 	addi	sp,sp,-112
  813d68:	df001b15 	stw	fp,108(sp)
  813d6c:	df001b04 	addi	fp,sp,108
  813d70:	e13ffd15 	stw	r4,-12(fp)
  813d74:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
  813d78:	d0a01d04 	addi	r2,gp,-32652
  813d7c:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
  813d80:	e0bffd17 	ldw	r2,-12(fp)
  813d84:	10800117 	ldw	r2,4(r2)
  813d88:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
  813d8c:	e0bfed04 	addi	r2,fp,-76
  813d90:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
  813d94:	e13fe817 	ldw	r4,-96(fp)
  813d98:	e17fe717 	ldw	r5,-100(fp)
  813d9c:	e0ffe917 	ldw	r3,-92(fp)
  813da0:	003da07a 	break	1
  813da4:	e0bfea15 	stw	r2,-88(fp)
  813da8:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
  813dac:	e0bfea17 	ldw	r2,-88(fp)
  813db0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  813db4:	e0bfe917 	ldw	r2,-92(fp)
  813db8:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
  813dbc:	e0bfec17 	ldw	r2,-80(fp)
  813dc0:	1004c03a 	cmpne	r2,r2,zero
  813dc4:	1000651e 	bne	r2,zero,813f5c <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  813dc8:	e0bfed04 	addi	r2,fp,-76
  813dcc:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  813dd0:	e0bfe617 	ldw	r2,-104(fp)
  813dd4:	10801004 	addi	r2,r2,64
  813dd8:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813ddc:	00001806 	br	813e40 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  813de0:	e0bfe617 	ldw	r2,-104(fp)
  813de4:	10800017 	ldw	r2,0(r2)
  813de8:	10bfc02c 	andhi	r2,r2,65280
  813dec:	1006d63a 	srli	r3,r2,24
  813df0:	e0bfe617 	ldw	r2,-104(fp)
  813df4:	10800017 	ldw	r2,0(r2)
  813df8:	10803fec 	andhi	r2,r2,255
  813dfc:	1004d23a 	srli	r2,r2,8
  813e00:	1886b03a 	or	r3,r3,r2
  813e04:	e0bfe617 	ldw	r2,-104(fp)
  813e08:	10800017 	ldw	r2,0(r2)
  813e0c:	10bfc00c 	andi	r2,r2,65280
  813e10:	1004923a 	slli	r2,r2,8
  813e14:	1886b03a 	or	r3,r3,r2
  813e18:	e0bfe617 	ldw	r2,-104(fp)
  813e1c:	10800017 	ldw	r2,0(r2)
  813e20:	10803fcc 	andi	r2,r2,255
  813e24:	1004963a 	slli	r2,r2,24
  813e28:	1886b03a 	or	r3,r3,r2
  813e2c:	e0bfe617 	ldw	r2,-104(fp)
  813e30:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  813e34:	e0bfe617 	ldw	r2,-104(fp)
  813e38:	10800104 	addi	r2,r2,4
  813e3c:	e0bfe615 	stw	r2,-104(fp)
  813e40:	e0ffe617 	ldw	r3,-104(fp)
  813e44:	e0bfe517 	ldw	r2,-108(fp)
  813e48:	18bfe536 	bltu	r3,r2,813de0 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  813e4c:	e0bffe17 	ldw	r2,-8(fp)
  813e50:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  813e54:	e0bfe617 	ldw	r2,-104(fp)
  813e58:	10800f04 	addi	r2,r2,60
  813e5c:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813e60:	00000506 	br	813e78 <alt_hostfs_fstat+0x114>
      *ptr = 0;
  813e64:	e0bfe617 	ldw	r2,-104(fp)
  813e68:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  813e6c:	e0bfe617 	ldw	r2,-104(fp)
  813e70:	10800104 	addi	r2,r2,4
  813e74:	e0bfe615 	stw	r2,-104(fp)
  813e78:	e0ffe617 	ldw	r3,-104(fp)
  813e7c:	e0bfe517 	ldw	r2,-108(fp)
  813e80:	18bff836 	bltu	r3,r2,813e64 <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  813e84:	e0bfed17 	ldw	r2,-76(fp)
  813e88:	1007883a 	mov	r3,r2
  813e8c:	e0bffe17 	ldw	r2,-8(fp)
  813e90:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  813e94:	e0bfee17 	ldw	r2,-72(fp)
  813e98:	1007883a 	mov	r3,r2
  813e9c:	e0bffe17 	ldw	r2,-8(fp)
  813ea0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  813ea4:	e0ffef17 	ldw	r3,-68(fp)
  813ea8:	e0bffe17 	ldw	r2,-8(fp)
  813eac:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  813eb0:	e0bff017 	ldw	r2,-64(fp)
  813eb4:	1007883a 	mov	r3,r2
  813eb8:	e0bffe17 	ldw	r2,-8(fp)
  813ebc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  813ec0:	e0bff117 	ldw	r2,-60(fp)
  813ec4:	1007883a 	mov	r3,r2
  813ec8:	e0bffe17 	ldw	r2,-8(fp)
  813ecc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  813ed0:	e0bff217 	ldw	r2,-56(fp)
  813ed4:	1007883a 	mov	r3,r2
  813ed8:	e0bffe17 	ldw	r2,-8(fp)
  813edc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  813ee0:	e0bff317 	ldw	r2,-52(fp)
  813ee4:	1007883a 	mov	r3,r2
  813ee8:	e0bffe17 	ldw	r2,-8(fp)
  813eec:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  813ef0:	e0bff517 	ldw	r2,-44(fp)
  813ef4:	1007883a 	mov	r3,r2
  813ef8:	e0bffe17 	ldw	r2,-8(fp)
  813efc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  813f00:	e0bffa17 	ldw	r2,-24(fp)
  813f04:	1007883a 	mov	r3,r2
  813f08:	e0bffe17 	ldw	r2,-8(fp)
  813f0c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  813f10:	e0bffb17 	ldw	r2,-20(fp)
  813f14:	1007883a 	mov	r3,r2
  813f18:	e0bffe17 	ldw	r2,-8(fp)
  813f1c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  813f20:	e0bffc17 	ldw	r2,-16(fp)
  813f24:	1007883a 	mov	r3,r2
  813f28:	e0bffe17 	ldw	r2,-8(fp)
  813f2c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  813f30:	e0bff717 	ldw	r2,-36(fp)
  813f34:	1007883a 	mov	r3,r2
  813f38:	e0bffe17 	ldw	r2,-8(fp)
  813f3c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  813f40:	e0bff917 	ldw	r2,-28(fp)
  813f44:	1007883a 	mov	r3,r2
  813f48:	e0bffe17 	ldw	r2,-8(fp)
  813f4c:	10c00c15 	stw	r3,48(r2)

    return rc;
  813f50:	e0bfeb17 	ldw	r2,-84(fp)
  813f54:	e0bfff15 	stw	r2,-4(fp)
  813f58:	00000306 	br	813f68 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
  813f5c:	e0bfec17 	ldw	r2,-80(fp)
  813f60:	0085c83a 	sub	r2,zero,r2
  813f64:	e0bfff15 	stw	r2,-4(fp)
  813f68:	e0bfff17 	ldw	r2,-4(fp)
}
  813f6c:	e037883a 	mov	sp,fp
  813f70:	df000017 	ldw	fp,0(sp)
  813f74:	dec00104 	addi	sp,sp,4
  813f78:	f800283a 	ret

00813f7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  813f7c:	defff404 	addi	sp,sp,-48
  813f80:	df000b15 	stw	fp,44(sp)
  813f84:	df000b04 	addi	fp,sp,44
  813f88:	e13ffb15 	stw	r4,-20(fp)
  813f8c:	e17ffc15 	stw	r5,-16(fp)
  813f90:	e1bffd15 	stw	r6,-12(fp)
  813f94:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813f98:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813f9c:	008020b4 	movhi	r2,130
  813fa0:	10a31f04 	addi	r2,r2,-29572
  813fa4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  813fa8:	1005003a 	cmpeq	r2,r2,zero
  813fac:	1000411e 	bne	r2,zero,8140b4 <alt_alarm_start+0x138>
  {
    if (alarm)
  813fb0:	e0bffb17 	ldw	r2,-20(fp)
  813fb4:	1005003a 	cmpeq	r2,r2,zero
  813fb8:	10003b1e 	bne	r2,zero,8140a8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  813fbc:	e0fffb17 	ldw	r3,-20(fp)
  813fc0:	e0bffd17 	ldw	r2,-12(fp)
  813fc4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  813fc8:	e0fffb17 	ldw	r3,-20(fp)
  813fcc:	e0bffe17 	ldw	r2,-8(fp)
  813fd0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813fd4:	0005303a 	rdctl	r2,status
  813fd8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813fdc:	e0fff817 	ldw	r3,-32(fp)
  813fe0:	00bfff84 	movi	r2,-2
  813fe4:	1884703a 	and	r2,r3,r2
  813fe8:	1001703a 	wrctl	status,r2
  
  return context;
  813fec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  813ff0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813ff4:	008020b4 	movhi	r2,130
  813ff8:	10a32004 	addi	r2,r2,-29568
  813ffc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  814000:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  814004:	e0fffc17 	ldw	r3,-16(fp)
  814008:	e0bff917 	ldw	r2,-28(fp)
  81400c:	1885883a 	add	r2,r3,r2
  814010:	10c00044 	addi	r3,r2,1
  814014:	e0bffb17 	ldw	r2,-20(fp)
  814018:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81401c:	e0bffb17 	ldw	r2,-20(fp)
  814020:	10c00217 	ldw	r3,8(r2)
  814024:	e0bff917 	ldw	r2,-28(fp)
  814028:	1880042e 	bgeu	r3,r2,81403c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81402c:	e0fffb17 	ldw	r3,-20(fp)
  814030:	00800044 	movi	r2,1
  814034:	18800405 	stb	r2,16(r3)
  814038:	00000206 	br	814044 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81403c:	e0bffb17 	ldw	r2,-20(fp)
  814040:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  814044:	e0fffb17 	ldw	r3,-20(fp)
  814048:	00802074 	movhi	r2,129
  81404c:	109c4904 	addi	r2,r2,28964
  814050:	e0bff615 	stw	r2,-40(fp)
  814054:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814058:	e0fff717 	ldw	r3,-36(fp)
  81405c:	e0bff617 	ldw	r2,-40(fp)
  814060:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814064:	e0bff617 	ldw	r2,-40(fp)
  814068:	10c00017 	ldw	r3,0(r2)
  81406c:	e0bff717 	ldw	r2,-36(fp)
  814070:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814074:	e0bff617 	ldw	r2,-40(fp)
  814078:	10c00017 	ldw	r3,0(r2)
  81407c:	e0bff717 	ldw	r2,-36(fp)
  814080:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814084:	e0fff617 	ldw	r3,-40(fp)
  814088:	e0bff717 	ldw	r2,-36(fp)
  81408c:	18800015 	stw	r2,0(r3)
  814090:	e0bffa17 	ldw	r2,-24(fp)
  814094:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814098:	e0bff517 	ldw	r2,-44(fp)
  81409c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8140a0:	e03fff15 	stw	zero,-4(fp)
  8140a4:	00000506 	br	8140bc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8140a8:	00bffa84 	movi	r2,-22
  8140ac:	e0bfff15 	stw	r2,-4(fp)
  8140b0:	00000206 	br	8140bc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8140b4:	00bfde84 	movi	r2,-134
  8140b8:	e0bfff15 	stw	r2,-4(fp)
  8140bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8140c0:	e037883a 	mov	sp,fp
  8140c4:	df000017 	ldw	fp,0(sp)
  8140c8:	dec00104 	addi	sp,sp,4
  8140cc:	f800283a 	ret

008140d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8140d0:	defffe04 	addi	sp,sp,-8
  8140d4:	df000115 	stw	fp,4(sp)
  8140d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8140dc:	e03fff15 	stw	zero,-4(fp)
  8140e0:	00000506 	br	8140f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8140e4:	e0bfff17 	ldw	r2,-4(fp)
  8140e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8140ec:	e0bfff17 	ldw	r2,-4(fp)
  8140f0:	10800804 	addi	r2,r2,32
  8140f4:	e0bfff15 	stw	r2,-4(fp)
  8140f8:	e0bfff17 	ldw	r2,-4(fp)
  8140fc:	10820030 	cmpltui	r2,r2,2048
  814100:	103ff81e 	bne	r2,zero,8140e4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  814104:	e037883a 	mov	sp,fp
  814108:	df000017 	ldw	fp,0(sp)
  81410c:	dec00104 	addi	sp,sp,4
  814110:	f800283a 	ret

00814114 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  814114:	defff904 	addi	sp,sp,-28
  814118:	dfc00615 	stw	ra,24(sp)
  81411c:	df000515 	stw	fp,20(sp)
  814120:	df000504 	addi	fp,sp,20
  814124:	e13ffd15 	stw	r4,-12(fp)
  814128:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81412c:	e0bffd17 	ldw	r2,-12(fp)
  814130:	1005003a 	cmpeq	r2,r2,zero
  814134:	1000041e 	bne	r2,zero,814148 <alt_dev_llist_insert+0x34>
  814138:	e0bffd17 	ldw	r2,-12(fp)
  81413c:	10800217 	ldw	r2,8(r2)
  814140:	1004c03a 	cmpne	r2,r2,zero
  814144:	1000071e 	bne	r2,zero,814164 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  814148:	08141c80 	call	8141c8 <alt_get_errno>
  81414c:	1007883a 	mov	r3,r2
  814150:	00800584 	movi	r2,22
  814154:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  814158:	00bffa84 	movi	r2,-22
  81415c:	e0bfff15 	stw	r2,-4(fp)
  814160:	00001306 	br	8141b0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  814164:	e0fffd17 	ldw	r3,-12(fp)
  814168:	e0bffe17 	ldw	r2,-8(fp)
  81416c:	e0bffb15 	stw	r2,-20(fp)
  814170:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814174:	e0fffc17 	ldw	r3,-16(fp)
  814178:	e0bffb17 	ldw	r2,-20(fp)
  81417c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814180:	e0bffb17 	ldw	r2,-20(fp)
  814184:	10c00017 	ldw	r3,0(r2)
  814188:	e0bffc17 	ldw	r2,-16(fp)
  81418c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814190:	e0bffb17 	ldw	r2,-20(fp)
  814194:	10c00017 	ldw	r3,0(r2)
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8141a0:	e0fffb17 	ldw	r3,-20(fp)
  8141a4:	e0bffc17 	ldw	r2,-16(fp)
  8141a8:	18800015 	stw	r2,0(r3)

  return 0;  
  8141ac:	e03fff15 	stw	zero,-4(fp)
  8141b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8141b4:	e037883a 	mov	sp,fp
  8141b8:	dfc00117 	ldw	ra,4(sp)
  8141bc:	df000017 	ldw	fp,0(sp)
  8141c0:	dec00204 	addi	sp,sp,8
  8141c4:	f800283a 	ret

008141c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8141c8:	defffd04 	addi	sp,sp,-12
  8141cc:	dfc00215 	stw	ra,8(sp)
  8141d0:	df000115 	stw	fp,4(sp)
  8141d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8141d8:	00802074 	movhi	r2,129
  8141dc:	109c3404 	addi	r2,r2,28880
  8141e0:	10800017 	ldw	r2,0(r2)
  8141e4:	1005003a 	cmpeq	r2,r2,zero
  8141e8:	1000061e 	bne	r2,zero,814204 <alt_get_errno+0x3c>
  8141ec:	00802074 	movhi	r2,129
  8141f0:	109c3404 	addi	r2,r2,28880
  8141f4:	10800017 	ldw	r2,0(r2)
  8141f8:	103ee83a 	callr	r2
  8141fc:	e0bfff15 	stw	r2,-4(fp)
  814200:	00000306 	br	814210 <alt_get_errno+0x48>
  814204:	008020b4 	movhi	r2,130
  814208:	10a31204 	addi	r2,r2,-29624
  81420c:	e0bfff15 	stw	r2,-4(fp)
  814210:	e0bfff17 	ldw	r2,-4(fp)
}
  814214:	e037883a 	mov	sp,fp
  814218:	dfc00117 	ldw	ra,4(sp)
  81421c:	df000017 	ldw	fp,0(sp)
  814220:	dec00204 	addi	sp,sp,8
  814224:	f800283a 	ret

00814228 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  814228:	defff904 	addi	sp,sp,-28
  81422c:	dfc00615 	stw	ra,24(sp)
  814230:	df000515 	stw	fp,20(sp)
  814234:	df000504 	addi	fp,sp,20
  814238:	e13ffd15 	stw	r4,-12(fp)
  81423c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814240:	e0bffe17 	ldw	r2,-8(fp)
  814244:	10800017 	ldw	r2,0(r2)
  814248:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81424c:	e13ffd17 	ldw	r4,-12(fp)
  814250:	080586c0 	call	80586c <strlen>
  814254:	10800044 	addi	r2,r2,1
  814258:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81425c:	00000d06 	br	814294 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  814260:	e0bffc17 	ldw	r2,-16(fp)
  814264:	11000217 	ldw	r4,8(r2)
  814268:	e1bffb17 	ldw	r6,-20(fp)
  81426c:	e17ffd17 	ldw	r5,-12(fp)
  814270:	0814bdc0 	call	814bdc <memcmp>
  814274:	1004c03a 	cmpne	r2,r2,zero
  814278:	1000031e 	bne	r2,zero,814288 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81427c:	e0bffc17 	ldw	r2,-16(fp)
  814280:	e0bfff15 	stw	r2,-4(fp)
  814284:	00000706 	br	8142a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  814288:	e0bffc17 	ldw	r2,-16(fp)
  81428c:	10800017 	ldw	r2,0(r2)
  814290:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814294:	e0fffe17 	ldw	r3,-8(fp)
  814298:	e0bffc17 	ldw	r2,-16(fp)
  81429c:	10fff01e 	bne	r2,r3,814260 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8142a0:	e03fff15 	stw	zero,-4(fp)
  8142a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8142a8:	e037883a 	mov	sp,fp
  8142ac:	dfc00117 	ldw	ra,4(sp)
  8142b0:	df000017 	ldw	fp,0(sp)
  8142b4:	dec00204 	addi	sp,sp,8
  8142b8:	f800283a 	ret

008142bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8142bc:	defffa04 	addi	sp,sp,-24
  8142c0:	dfc00515 	stw	ra,20(sp)
  8142c4:	df000415 	stw	fp,16(sp)
  8142c8:	df000404 	addi	fp,sp,16
  8142cc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8142d0:	00802074 	movhi	r2,129
  8142d4:	109c2f04 	addi	r2,r2,28860
  8142d8:	10800017 	ldw	r2,0(r2)
  8142dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8142e0:	00003306 	br	8143b0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8142e4:	e0bffd17 	ldw	r2,-12(fp)
  8142e8:	11000217 	ldw	r4,8(r2)
  8142ec:	080586c0 	call	80586c <strlen>
  8142f0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8142f4:	e0bffd17 	ldw	r2,-12(fp)
  8142f8:	10c00217 	ldw	r3,8(r2)
  8142fc:	e0bffc17 	ldw	r2,-16(fp)
  814300:	1885883a 	add	r2,r3,r2
  814304:	10bfffc4 	addi	r2,r2,-1
  814308:	10800003 	ldbu	r2,0(r2)
  81430c:	10803fcc 	andi	r2,r2,255
  814310:	1080201c 	xori	r2,r2,128
  814314:	10bfe004 	addi	r2,r2,-128
  814318:	10800bd8 	cmpnei	r2,r2,47
  81431c:	1000031e 	bne	r2,zero,81432c <alt_find_file+0x70>
    {
      len -= 1;
  814320:	e0bffc17 	ldw	r2,-16(fp)
  814324:	10bfffc4 	addi	r2,r2,-1
  814328:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81432c:	e0bffc17 	ldw	r2,-16(fp)
  814330:	1007883a 	mov	r3,r2
  814334:	e0bffe17 	ldw	r2,-8(fp)
  814338:	1885883a 	add	r2,r3,r2
  81433c:	10800003 	ldbu	r2,0(r2)
  814340:	10803fcc 	andi	r2,r2,255
  814344:	1080201c 	xori	r2,r2,128
  814348:	10bfe004 	addi	r2,r2,-128
  81434c:	10800be0 	cmpeqi	r2,r2,47
  814350:	10000a1e 	bne	r2,zero,81437c <alt_find_file+0xc0>
  814354:	e0bffc17 	ldw	r2,-16(fp)
  814358:	1007883a 	mov	r3,r2
  81435c:	e0bffe17 	ldw	r2,-8(fp)
  814360:	1885883a 	add	r2,r3,r2
  814364:	10800003 	ldbu	r2,0(r2)
  814368:	10803fcc 	andi	r2,r2,255
  81436c:	1080201c 	xori	r2,r2,128
  814370:	10bfe004 	addi	r2,r2,-128
  814374:	1004c03a 	cmpne	r2,r2,zero
  814378:	10000a1e 	bne	r2,zero,8143a4 <alt_find_file+0xe8>
  81437c:	e0bffd17 	ldw	r2,-12(fp)
  814380:	11000217 	ldw	r4,8(r2)
  814384:	e1bffc17 	ldw	r6,-16(fp)
  814388:	e17ffe17 	ldw	r5,-8(fp)
  81438c:	0814bdc0 	call	814bdc <memcmp>
  814390:	1004c03a 	cmpne	r2,r2,zero
  814394:	1000031e 	bne	r2,zero,8143a4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814398:	e0bffd17 	ldw	r2,-12(fp)
  81439c:	e0bfff15 	stw	r2,-4(fp)
  8143a0:	00000806 	br	8143c4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8143a4:	e0bffd17 	ldw	r2,-12(fp)
  8143a8:	10800017 	ldw	r2,0(r2)
  8143ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8143b0:	00c02074 	movhi	r3,129
  8143b4:	18dc2f04 	addi	r3,r3,28860
  8143b8:	e0bffd17 	ldw	r2,-12(fp)
  8143bc:	10ffc91e 	bne	r2,r3,8142e4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8143c0:	e03fff15 	stw	zero,-4(fp)
  8143c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8143c8:	e037883a 	mov	sp,fp
  8143cc:	dfc00117 	ldw	ra,4(sp)
  8143d0:	df000017 	ldw	fp,0(sp)
  8143d4:	dec00204 	addi	sp,sp,8
  8143d8:	f800283a 	ret

008143dc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  8143dc:	defffb04 	addi	sp,sp,-20
  8143e0:	df000415 	stw	fp,16(sp)
  8143e4:	df000404 	addi	fp,sp,16
  8143e8:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  8143ec:	e0bffe17 	ldw	r2,-8(fp)
  8143f0:	10800217 	ldw	r2,8(r2)
  8143f4:	1004c03a 	cmpne	r2,r2,zero
  8143f8:	1000031e 	bne	r2,zero,814408 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  8143fc:	00bffb44 	movi	r2,-19
  814400:	e0bfff15 	stw	r2,-4(fp)
  814404:	00001406 	br	814458 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  814408:	e0fffe17 	ldw	r3,-8(fp)
  81440c:	00802074 	movhi	r2,129
  814410:	109c2f04 	addi	r2,r2,28860
  814414:	e0bffc15 	stw	r2,-16(fp)
  814418:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81441c:	e0fffd17 	ldw	r3,-12(fp)
  814420:	e0bffc17 	ldw	r2,-16(fp)
  814424:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814428:	e0bffc17 	ldw	r2,-16(fp)
  81442c:	10c00017 	ldw	r3,0(r2)
  814430:	e0bffd17 	ldw	r2,-12(fp)
  814434:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814438:	e0bffc17 	ldw	r2,-16(fp)
  81443c:	10c00017 	ldw	r3,0(r2)
  814440:	e0bffd17 	ldw	r2,-12(fp)
  814444:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814448:	e0fffc17 	ldw	r3,-16(fp)
  81444c:	e0bffd17 	ldw	r2,-12(fp)
  814450:	18800015 	stw	r2,0(r3)

  return 0;
  814454:	e03fff15 	stw	zero,-4(fp)
  814458:	e0bfff17 	ldw	r2,-4(fp)
} 
  81445c:	e037883a 	mov	sp,fp
  814460:	df000017 	ldw	fp,0(sp)
  814464:	dec00104 	addi	sp,sp,4
  814468:	f800283a 	ret

0081446c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81446c:	defffa04 	addi	sp,sp,-24
  814470:	dfc00515 	stw	ra,20(sp)
  814474:	df000415 	stw	fp,16(sp)
  814478:	dc000315 	stw	r16,12(sp)
  81447c:	df000304 	addi	fp,sp,12
  814480:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814484:	00bffa04 	movi	r2,-24
  814488:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81448c:	e03ffe15 	stw	zero,-8(fp)
  814490:	00002006 	br	814514 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  814494:	e13ffe17 	ldw	r4,-8(fp)
  814498:	04002074 	movhi	r16,129
  81449c:	8417a604 	addi	r16,r16,24216
  8144a0:	01400304 	movi	r5,12
  8144a4:	08027a80 	call	8027a8 <__mulsi3>
  8144a8:	1405883a 	add	r2,r2,r16
  8144ac:	10800017 	ldw	r2,0(r2)
  8144b0:	1004c03a 	cmpne	r2,r2,zero
  8144b4:	1000141e 	bne	r2,zero,814508 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  8144b8:	e13ffe17 	ldw	r4,-8(fp)
  8144bc:	04002074 	movhi	r16,129
  8144c0:	8417a604 	addi	r16,r16,24216
  8144c4:	01400304 	movi	r5,12
  8144c8:	08027a80 	call	8027a8 <__mulsi3>
  8144cc:	1407883a 	add	r3,r2,r16
  8144d0:	e0bfff17 	ldw	r2,-4(fp)
  8144d4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8144d8:	00802074 	movhi	r2,129
  8144dc:	109c3304 	addi	r2,r2,28876
  8144e0:	10c00017 	ldw	r3,0(r2)
  8144e4:	e0bffe17 	ldw	r2,-8(fp)
  8144e8:	1880040e 	bge	r3,r2,8144fc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  8144ec:	00c02074 	movhi	r3,129
  8144f0:	18dc3304 	addi	r3,r3,28876
  8144f4:	e0bffe17 	ldw	r2,-8(fp)
  8144f8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8144fc:	e0bffe17 	ldw	r2,-8(fp)
  814500:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  814504:	00000606 	br	814520 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814508:	e0bffe17 	ldw	r2,-8(fp)
  81450c:	10800044 	addi	r2,r2,1
  814510:	e0bffe15 	stw	r2,-8(fp)
  814514:	e0bffe17 	ldw	r2,-8(fp)
  814518:	10800810 	cmplti	r2,r2,32
  81451c:	103fdd1e 	bne	r2,zero,814494 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814520:	e0bffd17 	ldw	r2,-12(fp)
}
  814524:	e037883a 	mov	sp,fp
  814528:	dfc00217 	ldw	ra,8(sp)
  81452c:	df000117 	ldw	fp,4(sp)
  814530:	dc000017 	ldw	r16,0(sp)
  814534:	dec00304 	addi	sp,sp,12
  814538:	f800283a 	ret

0081453c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81453c:	defffe04 	addi	sp,sp,-8
  814540:	dfc00115 	stw	ra,4(sp)
  814544:	df000015 	stw	fp,0(sp)
  814548:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81454c:	0009883a 	mov	r4,zero
  814550:	01420004 	movi	r5,2048
  814554:	0814b4c0 	call	814b4c <alt_icache_flush>
#endif
}
  814558:	e037883a 	mov	sp,fp
  81455c:	dfc00117 	ldw	ra,4(sp)
  814560:	df000017 	ldw	fp,0(sp)
  814564:	dec00204 	addi	sp,sp,8
  814568:	f800283a 	ret

0081456c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81456c:	defff904 	addi	sp,sp,-28
  814570:	dfc00615 	stw	ra,24(sp)
  814574:	df000515 	stw	fp,20(sp)
  814578:	df000504 	addi	fp,sp,20
  81457c:	e13ffc15 	stw	r4,-16(fp)
  814580:	e17ffd15 	stw	r5,-12(fp)
  814584:	e1bffe15 	stw	r6,-8(fp)
  814588:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81458c:	e0800217 	ldw	r2,8(fp)
  814590:	d8800015 	stw	r2,0(sp)
  814594:	e13ffc17 	ldw	r4,-16(fp)
  814598:	e17ffd17 	ldw	r5,-12(fp)
  81459c:	e1bffe17 	ldw	r6,-8(fp)
  8145a0:	e1ffff17 	ldw	r7,-4(fp)
  8145a4:	08147400 	call	814740 <alt_iic_isr_register>
}  
  8145a8:	e037883a 	mov	sp,fp
  8145ac:	dfc00117 	ldw	ra,4(sp)
  8145b0:	df000017 	ldw	fp,0(sp)
  8145b4:	dec00204 	addi	sp,sp,8
  8145b8:	f800283a 	ret

008145bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8145bc:	defff904 	addi	sp,sp,-28
  8145c0:	df000615 	stw	fp,24(sp)
  8145c4:	df000604 	addi	fp,sp,24
  8145c8:	e13ffe15 	stw	r4,-8(fp)
  8145cc:	e17fff15 	stw	r5,-4(fp)
  8145d0:	e0bfff17 	ldw	r2,-4(fp)
  8145d4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8145d8:	0005303a 	rdctl	r2,status
  8145dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8145e0:	e0fffb17 	ldw	r3,-20(fp)
  8145e4:	00bfff84 	movi	r2,-2
  8145e8:	1884703a 	and	r2,r3,r2
  8145ec:	1001703a 	wrctl	status,r2
  
  return context;
  8145f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8145f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8145f8:	e0fffc17 	ldw	r3,-16(fp)
  8145fc:	00800044 	movi	r2,1
  814600:	10c4983a 	sll	r2,r2,r3
  814604:	1007883a 	mov	r3,r2
  814608:	008020b4 	movhi	r2,130
  81460c:	10a31e04 	addi	r2,r2,-29576
  814610:	10800017 	ldw	r2,0(r2)
  814614:	1886b03a 	or	r3,r3,r2
  814618:	008020b4 	movhi	r2,130
  81461c:	10a31e04 	addi	r2,r2,-29576
  814620:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814624:	008020b4 	movhi	r2,130
  814628:	10a31e04 	addi	r2,r2,-29576
  81462c:	10800017 	ldw	r2,0(r2)
  814630:	100170fa 	wrctl	ienable,r2
  814634:	e0bffd17 	ldw	r2,-12(fp)
  814638:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81463c:	e0bffa17 	ldw	r2,-24(fp)
  814640:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814644:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814648:	e037883a 	mov	sp,fp
  81464c:	df000017 	ldw	fp,0(sp)
  814650:	dec00104 	addi	sp,sp,4
  814654:	f800283a 	ret

00814658 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814658:	defff904 	addi	sp,sp,-28
  81465c:	df000615 	stw	fp,24(sp)
  814660:	df000604 	addi	fp,sp,24
  814664:	e13ffe15 	stw	r4,-8(fp)
  814668:	e17fff15 	stw	r5,-4(fp)
  81466c:	e0bfff17 	ldw	r2,-4(fp)
  814670:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814674:	0005303a 	rdctl	r2,status
  814678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81467c:	e0fffb17 	ldw	r3,-20(fp)
  814680:	00bfff84 	movi	r2,-2
  814684:	1884703a 	and	r2,r3,r2
  814688:	1001703a 	wrctl	status,r2
  
  return context;
  81468c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814690:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814694:	e0fffc17 	ldw	r3,-16(fp)
  814698:	00800044 	movi	r2,1
  81469c:	10c4983a 	sll	r2,r2,r3
  8146a0:	0084303a 	nor	r2,zero,r2
  8146a4:	1007883a 	mov	r3,r2
  8146a8:	008020b4 	movhi	r2,130
  8146ac:	10a31e04 	addi	r2,r2,-29576
  8146b0:	10800017 	ldw	r2,0(r2)
  8146b4:	1886703a 	and	r3,r3,r2
  8146b8:	008020b4 	movhi	r2,130
  8146bc:	10a31e04 	addi	r2,r2,-29576
  8146c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8146c4:	008020b4 	movhi	r2,130
  8146c8:	10a31e04 	addi	r2,r2,-29576
  8146cc:	10800017 	ldw	r2,0(r2)
  8146d0:	100170fa 	wrctl	ienable,r2
  8146d4:	e0bffd17 	ldw	r2,-12(fp)
  8146d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146dc:	e0bffa17 	ldw	r2,-24(fp)
  8146e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8146e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8146e8:	e037883a 	mov	sp,fp
  8146ec:	df000017 	ldw	fp,0(sp)
  8146f0:	dec00104 	addi	sp,sp,4
  8146f4:	f800283a 	ret

008146f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8146f8:	defffc04 	addi	sp,sp,-16
  8146fc:	df000315 	stw	fp,12(sp)
  814700:	df000304 	addi	fp,sp,12
  814704:	e13ffe15 	stw	r4,-8(fp)
  814708:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81470c:	000530fa 	rdctl	r2,ienable
  814710:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814714:	e0ffff17 	ldw	r3,-4(fp)
  814718:	00800044 	movi	r2,1
  81471c:	10c4983a 	sll	r2,r2,r3
  814720:	1007883a 	mov	r3,r2
  814724:	e0bffd17 	ldw	r2,-12(fp)
  814728:	1884703a 	and	r2,r3,r2
  81472c:	1004c03a 	cmpne	r2,r2,zero
}
  814730:	e037883a 	mov	sp,fp
  814734:	df000017 	ldw	fp,0(sp)
  814738:	dec00104 	addi	sp,sp,4
  81473c:	f800283a 	ret

00814740 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814740:	defff404 	addi	sp,sp,-48
  814744:	dfc00b15 	stw	ra,44(sp)
  814748:	df000a15 	stw	fp,40(sp)
  81474c:	df000a04 	addi	fp,sp,40
  814750:	e13ffb15 	stw	r4,-20(fp)
  814754:	e17ffc15 	stw	r5,-16(fp)
  814758:	e1bffd15 	stw	r6,-12(fp)
  81475c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814760:	00bffa84 	movi	r2,-22
  814764:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814768:	e0bffc17 	ldw	r2,-16(fp)
  81476c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814770:	e0bff917 	ldw	r2,-28(fp)
  814774:	10800808 	cmpgei	r2,r2,32
  814778:	1000291e 	bne	r2,zero,814820 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81477c:	0005303a 	rdctl	r2,status
  814780:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814784:	e0fff717 	ldw	r3,-36(fp)
  814788:	00bfff84 	movi	r2,-2
  81478c:	1884703a 	and	r2,r3,r2
  814790:	1001703a 	wrctl	status,r2
  
  return context;
  814794:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814798:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81479c:	e0bff917 	ldw	r2,-28(fp)
  8147a0:	00c020b4 	movhi	r3,130
  8147a4:	18e36b04 	addi	r3,r3,-29268
  8147a8:	100490fa 	slli	r2,r2,3
  8147ac:	10c7883a 	add	r3,r2,r3
  8147b0:	e0bffd17 	ldw	r2,-12(fp)
  8147b4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8147b8:	e0bff917 	ldw	r2,-28(fp)
  8147bc:	00c020b4 	movhi	r3,130
  8147c0:	18e36b04 	addi	r3,r3,-29268
  8147c4:	100490fa 	slli	r2,r2,3
  8147c8:	10c5883a 	add	r2,r2,r3
  8147cc:	10c00104 	addi	r3,r2,4
  8147d0:	e0bffe17 	ldw	r2,-8(fp)
  8147d4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8147d8:	e0bffd17 	ldw	r2,-12(fp)
  8147dc:	1005003a 	cmpeq	r2,r2,zero
  8147e0:	1000051e 	bne	r2,zero,8147f8 <alt_iic_isr_register+0xb8>
  8147e4:	e17ff917 	ldw	r5,-28(fp)
  8147e8:	e13ffb17 	ldw	r4,-20(fp)
  8147ec:	08145bc0 	call	8145bc <alt_ic_irq_enable>
  8147f0:	e0bfff15 	stw	r2,-4(fp)
  8147f4:	00000406 	br	814808 <alt_iic_isr_register+0xc8>
  8147f8:	e17ff917 	ldw	r5,-28(fp)
  8147fc:	e13ffb17 	ldw	r4,-20(fp)
  814800:	08146580 	call	814658 <alt_ic_irq_disable>
  814804:	e0bfff15 	stw	r2,-4(fp)
  814808:	e0bfff17 	ldw	r2,-4(fp)
  81480c:	e0bffa15 	stw	r2,-24(fp)
  814810:	e0bff817 	ldw	r2,-32(fp)
  814814:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814818:	e0bff617 	ldw	r2,-40(fp)
  81481c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814820:	e0bffa17 	ldw	r2,-24(fp)
}
  814824:	e037883a 	mov	sp,fp
  814828:	dfc00117 	ldw	ra,4(sp)
  81482c:	df000017 	ldw	fp,0(sp)
  814830:	dec00204 	addi	sp,sp,8
  814834:	f800283a 	ret

00814838 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814838:	defff804 	addi	sp,sp,-32
  81483c:	dfc00715 	stw	ra,28(sp)
  814840:	df000615 	stw	fp,24(sp)
  814844:	dc000515 	stw	r16,20(sp)
  814848:	df000504 	addi	fp,sp,20
  81484c:	e13ffc15 	stw	r4,-16(fp)
  814850:	e17ffd15 	stw	r5,-12(fp)
  814854:	e1bffe15 	stw	r6,-8(fp)
  814858:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81485c:	e13ffd17 	ldw	r4,-12(fp)
  814860:	e17ffe17 	ldw	r5,-8(fp)
  814864:	e1bfff17 	ldw	r6,-4(fp)
  814868:	08126180 	call	812618 <open>
  81486c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814870:	e0bffb17 	ldw	r2,-20(fp)
  814874:	1004803a 	cmplt	r2,r2,zero
  814878:	10001f1e 	bne	r2,zero,8148f8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81487c:	e13ffb17 	ldw	r4,-20(fp)
  814880:	04002074 	movhi	r16,129
  814884:	8417a604 	addi	r16,r16,24216
  814888:	01400304 	movi	r5,12
  81488c:	08027a80 	call	8027a8 <__mulsi3>
  814890:	1405883a 	add	r2,r2,r16
  814894:	10c00017 	ldw	r3,0(r2)
  814898:	e0bffc17 	ldw	r2,-16(fp)
  81489c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8148a0:	e13ffb17 	ldw	r4,-20(fp)
  8148a4:	04002074 	movhi	r16,129
  8148a8:	8417a604 	addi	r16,r16,24216
  8148ac:	01400304 	movi	r5,12
  8148b0:	08027a80 	call	8027a8 <__mulsi3>
  8148b4:	1405883a 	add	r2,r2,r16
  8148b8:	10800104 	addi	r2,r2,4
  8148bc:	10c00017 	ldw	r3,0(r2)
  8148c0:	e0bffc17 	ldw	r2,-16(fp)
  8148c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8148c8:	e13ffb17 	ldw	r4,-20(fp)
  8148cc:	04002074 	movhi	r16,129
  8148d0:	8417a604 	addi	r16,r16,24216
  8148d4:	01400304 	movi	r5,12
  8148d8:	08027a80 	call	8027a8 <__mulsi3>
  8148dc:	1405883a 	add	r2,r2,r16
  8148e0:	10800204 	addi	r2,r2,8
  8148e4:	10c00017 	ldw	r3,0(r2)
  8148e8:	e0bffc17 	ldw	r2,-16(fp)
  8148ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8148f0:	e13ffb17 	ldw	r4,-20(fp)
  8148f4:	08129880 	call	812988 <alt_release_fd>
  }
} 
  8148f8:	e037883a 	mov	sp,fp
  8148fc:	dfc00217 	ldw	ra,8(sp)
  814900:	df000117 	ldw	fp,4(sp)
  814904:	dc000017 	ldw	r16,0(sp)
  814908:	dec00304 	addi	sp,sp,12
  81490c:	f800283a 	ret

00814910 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  814910:	defffb04 	addi	sp,sp,-20
  814914:	dfc00415 	stw	ra,16(sp)
  814918:	df000315 	stw	fp,12(sp)
  81491c:	df000304 	addi	fp,sp,12
  814920:	e13ffd15 	stw	r4,-12(fp)
  814924:	e17ffe15 	stw	r5,-8(fp)
  814928:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81492c:	01002074 	movhi	r4,129
  814930:	2117a904 	addi	r4,r4,24228
  814934:	e17ffd17 	ldw	r5,-12(fp)
  814938:	01800044 	movi	r6,1
  81493c:	01c07fc4 	movi	r7,511
  814940:	08148380 	call	814838 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814944:	01002074 	movhi	r4,129
  814948:	2117a604 	addi	r4,r4,24216
  81494c:	e17ffe17 	ldw	r5,-8(fp)
  814950:	000d883a 	mov	r6,zero
  814954:	01c07fc4 	movi	r7,511
  814958:	08148380 	call	814838 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81495c:	01002074 	movhi	r4,129
  814960:	2117ac04 	addi	r4,r4,24240
  814964:	e17fff17 	ldw	r5,-4(fp)
  814968:	01800044 	movi	r6,1
  81496c:	01c07fc4 	movi	r7,511
  814970:	08148380 	call	814838 <alt_open_fd>
}  
  814974:	e037883a 	mov	sp,fp
  814978:	dfc00117 	ldw	ra,4(sp)
  81497c:	df000017 	ldw	fp,0(sp)
  814980:	dec00204 	addi	sp,sp,8
  814984:	f800283a 	ret

00814988 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814988:	defffa04 	addi	sp,sp,-24
  81498c:	df000515 	stw	fp,20(sp)
  814990:	df000504 	addi	fp,sp,20
  814994:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814998:	0005303a 	rdctl	r2,status
  81499c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8149a0:	e0fffd17 	ldw	r3,-12(fp)
  8149a4:	00bfff84 	movi	r2,-2
  8149a8:	1884703a 	and	r2,r3,r2
  8149ac:	1001703a 	wrctl	status,r2
  
  return context;
  8149b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8149b4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8149b8:	e0bfff17 	ldw	r2,-4(fp)
  8149bc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8149c0:	e0bffc17 	ldw	r2,-16(fp)
  8149c4:	10c00017 	ldw	r3,0(r2)
  8149c8:	e0bffc17 	ldw	r2,-16(fp)
  8149cc:	10800117 	ldw	r2,4(r2)
  8149d0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8149d4:	e0bffc17 	ldw	r2,-16(fp)
  8149d8:	10c00117 	ldw	r3,4(r2)
  8149dc:	e0bffc17 	ldw	r2,-16(fp)
  8149e0:	10800017 	ldw	r2,0(r2)
  8149e4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8149e8:	e0fffc17 	ldw	r3,-16(fp)
  8149ec:	e0bffc17 	ldw	r2,-16(fp)
  8149f0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8149f4:	e0fffc17 	ldw	r3,-16(fp)
  8149f8:	e0bffc17 	ldw	r2,-16(fp)
  8149fc:	18800015 	stw	r2,0(r3)
  814a00:	e0bffe17 	ldw	r2,-8(fp)
  814a04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a08:	e0bffb17 	ldw	r2,-20(fp)
  814a0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  814a10:	e037883a 	mov	sp,fp
  814a14:	df000017 	ldw	fp,0(sp)
  814a18:	dec00104 	addi	sp,sp,4
  814a1c:	f800283a 	ret

00814a20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  814a20:	defffb04 	addi	sp,sp,-20
  814a24:	dfc00415 	stw	ra,16(sp)
  814a28:	df000315 	stw	fp,12(sp)
  814a2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814a30:	d0a02117 	ldw	r2,-32636(gp)
  814a34:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814a38:	d0a6f817 	ldw	r2,-25632(gp)
  814a3c:	10800044 	addi	r2,r2,1
  814a40:	d0a6f815 	stw	r2,-25632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814a44:	00003106 	br	814b0c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814a48:	e0bffe17 	ldw	r2,-8(fp)
  814a4c:	10800017 	ldw	r2,0(r2)
  814a50:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814a54:	e0bffe17 	ldw	r2,-8(fp)
  814a58:	10800403 	ldbu	r2,16(r2)
  814a5c:	10803fcc 	andi	r2,r2,255
  814a60:	1005003a 	cmpeq	r2,r2,zero
  814a64:	1000051e 	bne	r2,zero,814a7c <alt_tick+0x5c>
  814a68:	d0a6f817 	ldw	r2,-25632(gp)
  814a6c:	1004c03a 	cmpne	r2,r2,zero
  814a70:	1000021e 	bne	r2,zero,814a7c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  814a74:	e0bffe17 	ldw	r2,-8(fp)
  814a78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  814a7c:	e0bffe17 	ldw	r2,-8(fp)
  814a80:	10c00217 	ldw	r3,8(r2)
  814a84:	d0a6f817 	ldw	r2,-25632(gp)
  814a88:	10c01e36 	bltu	r2,r3,814b04 <alt_tick+0xe4>
  814a8c:	e0bffe17 	ldw	r2,-8(fp)
  814a90:	10800403 	ldbu	r2,16(r2)
  814a94:	10803fcc 	andi	r2,r2,255
  814a98:	1004c03a 	cmpne	r2,r2,zero
  814a9c:	1000191e 	bne	r2,zero,814b04 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  814aa0:	e0bffe17 	ldw	r2,-8(fp)
  814aa4:	10c00317 	ldw	r3,12(r2)
  814aa8:	e0bffe17 	ldw	r2,-8(fp)
  814aac:	11000517 	ldw	r4,20(r2)
  814ab0:	183ee83a 	callr	r3
  814ab4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814ab8:	e0bffd17 	ldw	r2,-12(fp)
  814abc:	1004c03a 	cmpne	r2,r2,zero
  814ac0:	1000031e 	bne	r2,zero,814ad0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  814ac4:	e13ffe17 	ldw	r4,-8(fp)
  814ac8:	08149880 	call	814988 <alt_alarm_stop>
  814acc:	00000d06 	br	814b04 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  814ad0:	e0bffe17 	ldw	r2,-8(fp)
  814ad4:	10c00217 	ldw	r3,8(r2)
  814ad8:	e0bffd17 	ldw	r2,-12(fp)
  814adc:	1887883a 	add	r3,r3,r2
  814ae0:	e0bffe17 	ldw	r2,-8(fp)
  814ae4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814ae8:	e0bffe17 	ldw	r2,-8(fp)
  814aec:	10c00217 	ldw	r3,8(r2)
  814af0:	d0a6f817 	ldw	r2,-25632(gp)
  814af4:	1880032e 	bgeu	r3,r2,814b04 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  814af8:	e0fffe17 	ldw	r3,-8(fp)
  814afc:	00800044 	movi	r2,1
  814b00:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  814b04:	e0bfff17 	ldw	r2,-4(fp)
  814b08:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814b0c:	d0e02104 	addi	r3,gp,-32636
  814b10:	e0bffe17 	ldw	r2,-8(fp)
  814b14:	10ffcc1e 	bne	r2,r3,814a48 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  814b18:	e037883a 	mov	sp,fp
  814b1c:	dfc00117 	ldw	ra,4(sp)
  814b20:	df000017 	ldw	fp,0(sp)
  814b24:	dec00204 	addi	sp,sp,8
  814b28:	f800283a 	ret

00814b2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814b2c:	deffff04 	addi	sp,sp,-4
  814b30:	df000015 	stw	fp,0(sp)
  814b34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814b38:	000170fa 	wrctl	ienable,zero
}
  814b3c:	e037883a 	mov	sp,fp
  814b40:	df000017 	ldw	fp,0(sp)
  814b44:	dec00104 	addi	sp,sp,4
  814b48:	f800283a 	ret

00814b4c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814b4c:	defffb04 	addi	sp,sp,-20
  814b50:	df000415 	stw	fp,16(sp)
  814b54:	df000404 	addi	fp,sp,16
  814b58:	e13ffe15 	stw	r4,-8(fp)
  814b5c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814b60:	e0bfff17 	ldw	r2,-4(fp)
  814b64:	10820070 	cmpltui	r2,r2,2049
  814b68:	1000021e 	bne	r2,zero,814b74 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814b6c:	00820004 	movi	r2,2048
  814b70:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814b74:	e0fffe17 	ldw	r3,-8(fp)
  814b78:	e0bfff17 	ldw	r2,-4(fp)
  814b7c:	1885883a 	add	r2,r3,r2
  814b80:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814b84:	e0bffe17 	ldw	r2,-8(fp)
  814b88:	e0bffd15 	stw	r2,-12(fp)
  814b8c:	00000506 	br	814ba4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814b90:	e0bffd17 	ldw	r2,-12(fp)
  814b94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814b98:	e0bffd17 	ldw	r2,-12(fp)
  814b9c:	10800804 	addi	r2,r2,32
  814ba0:	e0bffd15 	stw	r2,-12(fp)
  814ba4:	e0fffd17 	ldw	r3,-12(fp)
  814ba8:	e0bffc17 	ldw	r2,-16(fp)
  814bac:	18bff836 	bltu	r3,r2,814b90 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814bb0:	e0bffe17 	ldw	r2,-8(fp)
  814bb4:	108007cc 	andi	r2,r2,31
  814bb8:	1005003a 	cmpeq	r2,r2,zero
  814bbc:	1000021e 	bne	r2,zero,814bc8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814bc0:	e0bffd17 	ldw	r2,-12(fp)
  814bc4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814bc8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814bcc:	e037883a 	mov	sp,fp
  814bd0:	df000017 	ldw	fp,0(sp)
  814bd4:	dec00104 	addi	sp,sp,4
  814bd8:	f800283a 	ret

00814bdc <memcmp>:
  814bdc:	00c000c4 	movi	r3,3
  814be0:	1980032e 	bgeu	r3,r6,814bf0 <memcmp+0x14>
  814be4:	2144b03a 	or	r2,r4,r5
  814be8:	10c4703a 	and	r2,r2,r3
  814bec:	10000f26 	beq	r2,zero,814c2c <memcmp+0x50>
  814bf0:	31ffffc4 	addi	r7,r6,-1
  814bf4:	3000061e 	bne	r6,zero,814c10 <memcmp+0x34>
  814bf8:	00000a06 	br	814c24 <memcmp+0x48>
  814bfc:	39ffffc4 	addi	r7,r7,-1
  814c00:	00bfffc4 	movi	r2,-1
  814c04:	21000044 	addi	r4,r4,1
  814c08:	29400044 	addi	r5,r5,1
  814c0c:	38800526 	beq	r7,r2,814c24 <memcmp+0x48>
  814c10:	20c00003 	ldbu	r3,0(r4)
  814c14:	28800003 	ldbu	r2,0(r5)
  814c18:	18bff826 	beq	r3,r2,814bfc <memcmp+0x20>
  814c1c:	1885c83a 	sub	r2,r3,r2
  814c20:	f800283a 	ret
  814c24:	0005883a 	mov	r2,zero
  814c28:	f800283a 	ret
  814c2c:	180f883a 	mov	r7,r3
  814c30:	20c00017 	ldw	r3,0(r4)
  814c34:	28800017 	ldw	r2,0(r5)
  814c38:	18bfed1e 	bne	r3,r2,814bf0 <memcmp+0x14>
  814c3c:	31bfff04 	addi	r6,r6,-4
  814c40:	21000104 	addi	r4,r4,4
  814c44:	29400104 	addi	r5,r5,4
  814c48:	39bff936 	bltu	r7,r6,814c30 <memcmp+0x54>
  814c4c:	003fe806 	br	814bf0 <memcmp+0x14>
  814c50:	008094e8 	cmpgeui	r2,zero,595


gaussian_filter_base.elf:     file format elf32-littlenios2
gaussian_filter_base.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x0001530c memsz 0x0001530c flags r-x
    LOAD off    0x000174a0 vaddr 0x008154a0 paddr 0x00816fbc align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x00019ad8 vaddr 0x00818ad8 paddr 0x00818ad8 align 2**12
         filesz 0x00000000 memsz 0x00000264 flags rw-
    LOAD off    0x00019000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01080020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014990  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000097c  00814b24  00814b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  008154a0  00816fbc  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000264  00818ad8  00818ad8  00019ad8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b2e  00000000  00000000  0001a240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00038a76  00000000  00000000  0001bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc54  00000000  00000000  000547e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001e242  00000000  00000000  00060438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023f4  00000000  00000000  0007e67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030f7  00000000  00000000  00080a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012a3e  00000000  00000000  00083b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000965a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000965c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009aeb8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009aebb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009aebe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009aebf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009aec0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009aec4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009aec8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009aecc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009aed5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009aede  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0009aee7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0009aef9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005577  00000000  00000000  0009af25  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004599d  00000000  00000000  000a049c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
00814b24 l    d  .rodata	00000000 .rodata
008154a0 l    d  .rwdata	00000000 .rwdata
00818ad8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pgm.c
00000000 l    df *ABS*	00000000 dp-bit.c
00801db0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 ctype_.c
0081506d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
008032fc l     F .text	00000058 std
00803408 l     F .text	00000008 __fp_lock
00803410 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
008154c4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00805418 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00805504 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00805b64 l     F .text	00000058 __sprint_r
00815266 l     O .rodata	00000010 blanks.3452
00815256 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0081527e l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008093e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00809604 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816f48 l     O .rwdata	00000004 charset
008152c0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00815408 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080d0b0 l     F .text	00000048 match
00815cec l     O .rwdata	00000014 fpi.1950
00815424 l     O .rodata	00000028 tinytens
00815cd8 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080f2e4 l     F .text	00000024 htinit
0080f370 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080fc1c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008117e4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00811df4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811e54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811e80 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00811fb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008120dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008121bc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081231c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00812418 l     F .text	000000f8 alt_file_locked
0081269c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00812820 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816f64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00812a48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00812bcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815ea8 l     O .rwdata	00001060 jtag_uart
00816f08 l     O .rwdata	00000028 altera_hostfs
00812cf0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00812f30 l     F .text	00000228 altera_avalon_jtag_uart_irq
00813158 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008137d4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
00816f68 l     O .rwdata	00000004 hcinfo.2234
00816f74 l     O .rwdata	00000004 hcinfo.2276
00816f80 l     O .rwdata	00000004 hcinfo.2289
00816f8c l     O .rwdata	00000004 hcinfo.2311
00816f98 l     O .rwdata	00000004 hcinfo.2333
00816fa4 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00814098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814708 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
0080bafc g     F .text	00000094 _mprec_log10
0080bbe8 g     F .text	00000088 __any_on
0080b338 g     F .text	00000070 _isatty_r
008153e0 g     O .rodata	00000028 __mprec_tinytens
0081237c g     F .text	0000005c alt_main
008051a0 g     F .text	000000a0 _puts_r
00818c3c g     O .bss	00000100 alt_irq
0080b498 g     F .text	00000078 _lseek_r
00816fbc g       *ABS*	00000000 __flash_rwdata_start
0080adfc g     F .text	000000a0 __sflags
00811270 g     F .text	00000088 __eqdf2
00818d3c g       *ABS*	00000000 __alt_heap_start
00805128 g     F .text	00000044 printf
00800e10 g     F .text	00000334 pgmwrite
00805620 g     F .text	00000068 __sseek
00803364 g     F .text	000000a4 __sinit
0080b3f8 g     F .text	00000084 _setlocale_r
00803464 g     F .text	0000009c __sfmoreglue
00805b48 g     F .text	0000001c ungetc
008123f8 g     F .text	00000020 __malloc_unlock
008138d4 g     F .text	00000154 alt_hostfs_open
0080d0f8 g     F .text	000015cc _strtod_r
00818b04 g     O .bss	00000004 altera_avalon_timer_ts_freq
0080b610 g     F .text	000000e0 memmove
00803454 g     F .text	00000010 _cleanup
0080bc70 g     F .text	000000bc _Balloc
00811380 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01080000 g     F .entry	0000001c __reset
008129b4 g     F .text	00000094 times
00800000 g       *ABS*	00000000 __flash_exceptions_start
008042b8 g     F .text	00000074 _fstat_r
00818ad8 g     O .bss	00000004 errno
00805480 g     F .text	00000014 __srget
0080912c g     F .text	00000024 __svfscanf
00811aa0 g     F .text	0000002c __make_fp
00818af8 g     O .bss	00000004 alt_argv
0081ef30 g       *ABS*	00000000 _gp
00803e14 g     F .text	00000044 fscanf
008032d8 g     F .text	00000024 fgets
00815d28 g     O .rwdata	00000180 alt_fd_list
00813bbc g     F .text	000000a0 alt_hostfs_seek
008140f8 g     F .text	00000094 alt_find_dev
00804f78 g     F .text	000000a0 memcpy
008058c8 g     F .text	00000008 _times_r
0080fc68 g     F .text	00000248 __hexnan
00803448 g     F .text	0000000c _cleanup_r
008115a0 g     F .text	000000f8 __floatsidf
008142ac g     F .text	00000090 alt_fs_reg
008147e0 g     F .text	00000078 alt_io_redirect
00811490 g     F .text	00000088 __ltdf2
00805240 g     F .text	00000014 puts
0080b590 g     F .text	00000040 mbrtowc
00809150 g     F .text	00000068 _vfscanf_r
0080ba4c g     F .text	000000b0 __ratio
00813370 g     F .text	00000224 altera_avalon_jtag_uart_read
00804740 g     F .text	00000014 malloc
0080516c g     F .text	00000034 _printf_r
00811920 g     F .text	00000008 __udivsi3
00812018 g     F .text	000000c4 isatty
0080b3a8 g     F .text	0000002c iswspace
008152f0 g     O .rodata	000000c8 __mprec_tens
0080b3d4 g     F .text	00000008 __locale_charset
0080ffd4 g     F .text	000000a4 __fixunsdfsi
008008ac g     F .text	0000009c eatWhitespaces
00814a1c g     F .text	00000090 alt_icache_flush
00818adc g     O .bss	00000004 __malloc_top_pad
0080efd0 g     F .text	00000024 strtoul
00816f44 g     O .rwdata	00000004 __mb_cur_max
0080b3dc g     F .text	0000000c _localeconv_r
0080eff4 g     F .text	000002f0 _strtoull_r
0080c3d4 g     F .text	0000003c __i2b
0080ae9c g     F .text	0000049c __sfvwrite_r
00805494 g     F .text	00000070 _sbrk_r
00813a7c g     F .text	000000a0 alt_hostfs_read
0080c77c g     F .text	00000078 _read_r
00815ccc g     O .rwdata	0000000c __lc_ctype
00816f5c g     O .rwdata	00000004 alt_max_fd
00802a6c g     F .text	00000138 __unpack_d
00802d14 g     F .text	00000110 _fclose_r
00803034 g     F .text	00000034 fflush
00818ae0 g     O .bss	00000004 __malloc_max_sbrked_mem
00803100 g     F .text	00000090 _fgetc_r
00802240 g     F .text	00000074 __adddf3
00810d44 g     F .text	00000078 __nesf2
0080b92c g     F .text	00000120 __b2d
008106e4 g     F .text	00000660 __umoddi3
00812228 g     F .text	000000f4 lseek
00816f38 g     O .rwdata	00000004 _global_impure_ptr
0080c7f4 g     F .text	000005f4 _realloc_r
00818d3c g       *ABS*	00000000 __bss_end
00814610 g     F .text	000000f8 alt_iic_isr_register
008148f0 g     F .text	0000010c alt_tick
00818b3c g     O .bss	00000100 __hexdig
00810078 g     F .text	0000066c __udivdi3
008153b8 g     O .rodata	00000028 __mprec_bigtens
0080c65c g     F .text	00000120 __s2b
0080250c g     F .text	00000194 __floatunsidf
0080b84c g     F .text	00000060 __mcmp
00816f30 g     O .rwdata	00000004 __ctype_ptr
00803430 g     F .text	00000018 __fp_lock_all
008145c8 g     F .text	00000048 alt_ic_irq_enabled
00814858 g     F .text	00000098 alt_alarm_stop
0080ea54 g     F .text	00000024 strtol
00800804 g     F .text	000000a8 eatCommsWhitespaces
00818b08 g     O .bss	00000004 alt_irq_active
00813a28 g     F .text	00000054 alt_hostfs_close
01108000 g       *ABS*	00000000 __alt_mem_onchip_mem
010800ec g     F .exceptions	000000c8 alt_irq_handler
00815d00 g     O .rwdata	00000028 alt_dev_null
00811930 g     F .text	000000c8 __unpack_f
00813fc8 g     F .text	0000001c alt_dcache_flush_all
0080b718 g     F .text	00000070 __hi0bits
00811698 g     F .text	000000d8 __fixdfsi
00802ba4 g     F .text	0000001c calloc
0080e7e8 g     F .text	0000001c strtod
00816fbc g       *ABS*	00000000 __ram_rwdata_end
00816f54 g     O .rwdata	00000008 alt_dev_list
00812aa8 g     F .text	00000124 write
00810dbc g     F .text	00000078 __gtsf2
008154a0 g       *ABS*	00000000 __ram_rodata_end
00811ee0 g     F .text	000000d8 fstat
00803700 g     F .text	0000002c fprintf
00811518 g     F .text	00000088 __ledf2
0080c53c g     F .text	00000120 __pow5mult
00818ae8 g     O .bss	00000004 __nlocale_changed
00811928 g     F .text	00000008 __umodsi3
00818d3c g       *ABS*	00000000 end
00811b94 g     F .text	00000160 __pack_f
00804294 g     F .text	00000024 fseek
00812e70 g     F .text	000000c0 altera_avalon_jtag_uart_init
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813844 g     F .text	00000090 alt_avalon_timer_sc_init
008026d8 g     F .text	00000080 __clzsi2
00813594 g     F .text	00000240 altera_avalon_jtag_uart_write
00803354 g     F .text	00000004 __sfp_lock_acquire
00804e94 g     F .text	000000e4 memchr
00805bbc g     F .text	00001ec4 ___vfprintf_internal_r
0080cf94 g     F .text	00000060 _sprintf_r
00803ad8 g     F .text	00000314 _free_r
00805434 g     F .text	0000004c __srget_r
008093e4 g     F .text	000001b0 __call_exitprocs
00818aec g     O .bss	00000004 __mlocale_changed
00816f40 g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000003c _start
00818b0c g     O .bss	00000004 _alt_tick_rate
0080ea78 g     F .text	00000318 _strtoll_r
0080c034 g     F .text	0000014c __lshift
00818b10 g     O .bss	00000004 _alt_nticks
008126fc g     F .text	00000124 read
00812c60 g     F .text	00000090 alt_sys_init
008050b0 g     F .text	00000078 _open_r
008057d8 g     F .text	000000f0 strncmp
0080c180 g     F .text	00000254 __multiply
00813208 g     F .text	00000074 altera_avalon_jtag_uart_close
008026a0 g     F .text	00000038 __mulsi3
008154a0 g       *ABS*	00000000 __ram_rwdata_start
00814b24 g       *ABS*	00000000 __ram_rodata_start
00818b14 g     O .bss	00000028 __malloc_current_mallinfo
0080bd2c g     F .text	0000017c __d2b
00812d28 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080ed90 g     F .text	00000240 _strtoul_r
0081433c g     F .text	000000d0 alt_get_fd
00811acc g     F .text	000000c8 __fpcmp_parts_d
00809594 g     F .text	00000070 _close_r
00814aac g     F .text	00000074 memcmp
00812dd8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818d3c g       *ABS*	00000000 __alt_stack_base
00812e20 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008044ac g     F .text	000000ac _fwrite_r
00805594 g     F .text	00000084 sscanf
008092a4 g     F .text	0000013c __swsetup_r
00800740 g     F .text	000000c4 readToWhitespace
008022b4 g     F .text	00000258 __divdf3
00803500 g     F .text	000000f0 __sfp
0080bb90 g     F .text	00000058 __copybits
008158c4 g     O .rwdata	00000408 __malloc_av_
00803360 g     F .text	00000004 __sinit_lock_release
00810eac g     F .text	000003c4 __muldf3
00805704 g     F .text	00000060 __sread
0080396c g     F .text	00000040 fread
0081418c g     F .text	00000120 alt_find_file
00813fe4 g     F .text	000000b4 alt_dev_llist_insert
008123d8 g     F .text	00000020 __malloc_lock
0080372c g     F .text	00000034 _fprintf_r
008128f8 g     F .text	000000bc sbrk
00802e38 g     F .text	000001fc _fflush_r
00802bc0 g     F .text	000000c8 _calloc_r
008036e4 g     F .text	0000001c fopen
00818ad8 g       *ABS*	00000000 __bss_start
00803dec g     F .text	00000028 _fscanf_r
00805018 g     F .text	00000098 memset
00800564 g     F .text	000001dc main
00818afc g     O .bss	00000004 alt_envp
00818ae4 g     O .bss	00000004 __malloc_max_total_mem
00812d80 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00810e34 g     F .text	00000078 __ltsf2
00803760 g     F .text	0000020c _fread_r
008009cc g     F .text	00000444 pgmread
00805618 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802e24 g     F .text	00000014 fclose
0080e804 g     F .text	00000250 _strtol_r
00811770 g     F .text	00000074 __truncdfsf2
00809848 g     F .text	000015b4 _dtoa_r
00804754 g     F .text	00000740 _malloc_r
00816f60 g     O .rwdata	00000004 alt_errno
008058d0 g     F .text	000000dc __submore
008043f4 g     F .text	000000b8 _fwalk
00803190 g     F .text	00000148 _fgets_r
0080b5d0 g     F .text	00000040 _mbtowc_r
00811860 g     F .text	00000060 __divsi3
00814e58 g     O .rodata	00000014 __thenan_df
008039ac g     F .text	0000012c _malloc_trim_r
0080cff4 g     F .text	000000bc strcmp
00814b24 g       *ABS*	00000000 __flash_rodata_start
008112f8 g     F .text	00000088 __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00812c2c g     F .text	00000034 alt_irq_init
00812880 g     F .text	00000078 alt_release_fd
00803068 g     F .text	00000098 fgetc
0080cf20 g     F .text	00000074 sprintf
00814e6c g     O .rodata	00000100 __clz_tab
00818af0 g     O .bss	00000004 _PathLocale
008154a0 g     O .rwdata	00000024 kernel
0080e6c4 g     F .text	00000124 strtof
0080922c g     F .text	00000078 _write_r
0080b47c g     F .text	0000001c setlocale
0080cf18 g     F .text	00000008 nanf
00816f34 g     O .rwdata	00000004 _impure_ptr
00818af4 g     O .bss	00000004 alt_argc
0080b510 g     F .text	00000080 _mbrtowc_r
00818b00 g     O .bss	00000004 altera_avalon_timer_ts_base
00803e58 g     F .text	0000043c _fseek_r
00805254 g     F .text	000001c4 __srefill_r
01080020 g       .exceptions	00000000 alt_irq_entry
0080b8ac g     F .text	00000080 __ulp
0080cde8 g     F .text	00000040 __isinfd
00803418 g     F .text	00000018 __fp_unlock_all
00816f4c g     O .rwdata	00000008 alt_fs_list
00813b1c g     F .text	000000a0 alt_hostfs_write
01080020 g       *ABS*	00000000 __ram_exceptions_start
0080b3e8 g     F .text	00000010 localeconv
0081443c g     F .text	00000050 alt_ic_isr_register
00804558 g     F .text	00000040 fwrite
0080f308 g     F .text	00000068 __hexdig_init
0080550c g     F .text	00000088 _sscanf_r
0080192c g     F .text	00000484 ppmwrite2
00816fbc g       *ABS*	00000000 _edata
00818d3c g       *ABS*	00000000 _end
010801b4 g       *ABS*	00000000 __ram_exceptions_end
008091b8 g     F .text	00000074 vfscanf
0081327c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00814528 g     F .text	000000a0 alt_ic_irq_disable
008015d8 g     F .text	00000354 pgmwrite2
00805688 g     F .text	0000007c __swrite
00816f3c g     O .rwdata	00000004 __malloc_trim_threshold
008149fc g     F .text	00000020 altera_nios2_qsys_irq_init
00802cdc g     F .text	00000038 exit
0080432c g     F .text	000000c8 _fwalk_reent
0080bea8 g     F .text	0000018c __mdiff
008118c0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
00803358 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080ce58 g     F .text	000000c0 __sccl
00814f6c g     O .rodata	00000101 _ctype_
008119f8 g     F .text	000000a8 __fpcmp_parts_f
008035f0 g     F .text	000000f4 _fopen_r
0080ce28 g     F .text	00000030 __isnand
00811ec0 g     F .text	00000020 _exit
00813e74 g     F .text	00000154 alt_alarm_start
0080feb0 g     F .text	00000124 __muldi3
00804598 g     F .text	00000194 __smakebuf_r
00805764 g     F .text	00000074 strlen
00812510 g     F .text	0000018c open
00811408 g     F .text	00000088 __gedf2
008001d0 g     F .text	00000394 gaussian_filter
0080f420 g     F .text	000007fc __gethex
00802c88 g     F .text	00000054 clock
0081440c g     F .text	00000030 alt_icache_flush_all
00800948 g     F .text	00000084 eatComments
00816fb0 g     O .rwdata	00000004 alt_priority_mask
0081448c g     F .text	0000009c alt_ic_irq_enable
00807a80 g     F .text	00000024 __vfprintf_internal
008021c0 g     F .text	00000080 __subdf3
00801144 g     F .text	00000494 pgmread2
0080b788 g     F .text	000000c4 __lo0bits
00807aa4 g     F .text	00001688 __svfscanf_r
00816fb4 g     O .rwdata	00000008 alt_alarm_list
008059ac g     F .text	0000019c _ungetc_r
00811cf4 g     F .text	00000100 close
0081213c g     F .text	00000080 alt_load
00802758 g     F .text	00000314 __pack_d
0080472c g     F .text	00000014 free
0080335c g     F .text	00000004 __sinit_lock_acquire
0080c410 g     F .text	0000012c __multadd
0080b6f0 g     F .text	00000028 _Bfree
00813c5c g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1080014:	08406514 	ori	at,at,404
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

01080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1080044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800ec0 	call	10800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000306 	br	1080098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800e8:	ef80083a 	eret

010800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800ec:	defff904 	addi	sp,sp,-28
 10800f0:	dfc00615 	stw	ra,24(sp)
 10800f4:	df000515 	stw	fp,20(sp)
 10800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10800fc:	0005313a 	rdctl	r2,ipending
 1080100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1080104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1080108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 108010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080110:	00800044 	movi	r2,1
 1080114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1080118:	e0ffff17 	ldw	r3,-4(fp)
 108011c:	e0bffe17 	ldw	r2,-8(fp)
 1080120:	1884703a 	and	r2,r3,r2
 1080124:	1005003a 	cmpeq	r2,r2,zero
 1080128:	1000161e 	bne	r2,zero,1080184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 108012c:	e0bffd17 	ldw	r2,-12(fp)
 1080130:	00c020b4 	movhi	r3,130
 1080134:	18e30f04 	addi	r3,r3,-29636
 1080138:	100490fa 	slli	r2,r2,3
 108013c:	10c5883a 	add	r2,r2,r3
 1080140:	11400017 	ldw	r5,0(r2)
 1080144:	e0bffd17 	ldw	r2,-12(fp)
 1080148:	00c020b4 	movhi	r3,130
 108014c:	18e30f04 	addi	r3,r3,-29636
 1080150:	100490fa 	slli	r2,r2,3
 1080154:	10c5883a 	add	r2,r2,r3
 1080158:	10800104 	addi	r2,r2,4
 108015c:	11000017 	ldw	r4,0(r2)
 1080160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080164:	0005313a 	rdctl	r2,ipending
 1080168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 108016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1080170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1080174:	e0bfff17 	ldw	r2,-4(fp)
 1080178:	1004c03a 	cmpne	r2,r2,zero
 108017c:	103fe31e 	bne	r2,zero,108010c <alt_irq_handler+0x20>
 1080180:	00000706 	br	10801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1080184:	e0bffe17 	ldw	r2,-8(fp)
 1080188:	1085883a 	add	r2,r2,r2
 108018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1080190:	e0bffd17 	ldw	r2,-12(fp)
 1080194:	10800044 	addi	r2,r2,1
 1080198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 108019c:	003fde06 	br	1080118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10801a0:	e037883a 	mov	sp,fp
 10801a4:	dfc00117 	ldw	ra,4(sp)
 10801a8:	df000017 	ldw	fp,0(sp)
 10801ac:	dec00204 	addi	sp,sp,8
 10801b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800194:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80019c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001a0:	d6bbcc14 	ori	gp,gp,61232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001a4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001a8:	10a2b614 	ori	r2,r2,35544

    movhi r3, %hi(__bss_end)
  8001ac:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001b0:	18e34f14 	ori	r3,r3,36156

    beq r2, r3, 1f
  8001b4:	10c00326 	beq	r2,r3,8001c4 <_start+0x30>

0:
    stw zero, (r2)
  8001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c0:	10fffd36 	bltu	r2,r3,8001b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001c4:	081213c0 	call	81213c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001c8:	081237c0 	call	81237c <alt_main>

008001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001cc:	003fff06 	br	8001cc <alt_after_alt_main>

008001d0 <gaussian_filter>:

int kernel[3][3] = {{1, 2, 1},
                    {2, 4, 2},
                    {1, 2, 1}};

void gaussian_filter(char* input_image, char* output_image) {
  8001d0:	deffe804 	addi	sp,sp,-96
  8001d4:	dfc01715 	stw	ra,92(sp)
  8001d8:	df001615 	stw	fp,88(sp)
  8001dc:	dc001515 	stw	r16,84(sp)
  8001e0:	df001504 	addi	fp,sp,84
  8001e4:	e13ffc15 	stw	r4,-16(fp)
  8001e8:	e17ffd15 	stw	r5,-12(fp)
  int row, col;
  unsigned char** data = pgmread2(input_image, &row, &col);
  8001ec:	e17ffa04 	addi	r5,fp,-24
  8001f0:	e1bffb04 	addi	r6,fp,-20
  8001f4:	e13ffc17 	ldw	r4,-16(fp)
  8001f8:	08011440 	call	801144 <pgmread2>
  8001fc:	e0bff915 	stw	r2,-28(fp)
  if (!data) {
  800200:	e0bff917 	ldw	r2,-28(fp)
  800204:	1004c03a 	cmpne	r2,r2,zero
  800208:	1000041e 	bne	r2,zero,80021c <gaussian_filter+0x4c>
    printf("Error abriendo imagen\n");
  80020c:	01002074 	movhi	r4,129
  800210:	2112c904 	addi	r4,r4,19236
  800214:	08052400 	call	805240 <puts>
    return;
  800218:	0000cc06 	br	80054c <gaussian_filter+0x37c>
  }

  clock_t start_filtro = clock();
  80021c:	0802c880 	call	802c88 <clock>
  800220:	e0bff815 	stw	r2,-32(fp)
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  800224:	e0bffa17 	ldw	r2,-24(fp)
  800228:	1085883a 	add	r2,r2,r2
  80022c:	1085883a 	add	r2,r2,r2
  800230:	10bffe04 	addi	r2,r2,-8
  800234:	1009883a 	mov	r4,r2
  800238:	08047400 	call	804740 <malloc>
  80023c:	e0bff715 	stw	r2,-36(fp)
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  800240:	e03ff615 	stw	zero,-40(fp)
  800244:	00000e06 	br	800280 <gaussian_filter+0xb0>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  800248:	e0bff617 	ldw	r2,-40(fp)
  80024c:	1085883a 	add	r2,r2,r2
  800250:	1085883a 	add	r2,r2,r2
  800254:	1007883a 	mov	r3,r2
  800258:	e0bff717 	ldw	r2,-36(fp)
  80025c:	18a1883a 	add	r16,r3,r2
  800260:	e0bffb17 	ldw	r2,-20(fp)
  800264:	10bfff84 	addi	r2,r2,-2
  800268:	1009883a 	mov	r4,r2
  80026c:	08047400 	call	804740 <malloc>
  800270:	80800015 	stw	r2,0(r16)
  }

  clock_t start_filtro = clock();
  unsigned char** output = (unsigned char**)malloc((row - 2) * sizeof(unsigned char*));
  int i, j, k, l;
  for (i = 0; i < row - 2; i++) {
  800274:	e0bff617 	ldw	r2,-40(fp)
  800278:	10800044 	addi	r2,r2,1
  80027c:	e0bff615 	stw	r2,-40(fp)
  800280:	e0bffa17 	ldw	r2,-24(fp)
  800284:	10ffff84 	addi	r3,r2,-2
  800288:	e0bff617 	ldw	r2,-40(fp)
  80028c:	10ffee16 	blt	r2,r3,800248 <gaussian_filter+0x78>
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
  800290:	00800044 	movi	r2,1
  800294:	e0bff615 	stw	r2,-40(fp)
  800298:	00005906 	br	800400 <gaussian_filter+0x230>
    for (j = 1; j < col - 1; j++) {
  80029c:	00800044 	movi	r2,1
  8002a0:	e0bff515 	stw	r2,-44(fp)
  8002a4:	00004f06 	br	8003e4 <gaussian_filter+0x214>
      int sum = 0;
  8002a8:	e03fed15 	stw	zero,-76(fp)
      for (k = 0; k < 3; k++) {
  8002ac:	e03ff415 	stw	zero,-48(fp)
  8002b0:	00002e06 	br	80036c <gaussian_filter+0x19c>
        for (l = 0; l < 3; l++) {
  8002b4:	e03ff315 	stw	zero,-52(fp)
  8002b8:	00002606 	br	800354 <gaussian_filter+0x184>
          sum += data[i - 1 + k][j - 1 + l] * kernel[k][l];
  8002bc:	e0fff617 	ldw	r3,-40(fp)
  8002c0:	e0bff417 	ldw	r2,-48(fp)
  8002c4:	1885883a 	add	r2,r3,r2
  8002c8:	1085883a 	add	r2,r2,r2
  8002cc:	1085883a 	add	r2,r2,r2
  8002d0:	1007883a 	mov	r3,r2
  8002d4:	e0bff917 	ldw	r2,-28(fp)
  8002d8:	1885883a 	add	r2,r3,r2
  8002dc:	10bfff04 	addi	r2,r2,-4
  8002e0:	11000017 	ldw	r4,0(r2)
  8002e4:	e0fff517 	ldw	r3,-44(fp)
  8002e8:	e0bff317 	ldw	r2,-52(fp)
  8002ec:	1885883a 	add	r2,r3,r2
  8002f0:	2085883a 	add	r2,r4,r2
  8002f4:	10bfffc4 	addi	r2,r2,-1
  8002f8:	10800003 	ldbu	r2,0(r2)
  8002fc:	11803fcc 	andi	r6,r2,255
  800300:	e0fff417 	ldw	r3,-48(fp)
  800304:	e13ff317 	ldw	r4,-52(fp)
  800308:	01402074 	movhi	r5,129
  80030c:	29552804 	addi	r5,r5,21664
  800310:	1805883a 	mov	r2,r3
  800314:	1085883a 	add	r2,r2,r2
  800318:	10c5883a 	add	r2,r2,r3
  80031c:	1105883a 	add	r2,r2,r4
  800320:	1085883a 	add	r2,r2,r2
  800324:	1085883a 	add	r2,r2,r2
  800328:	1145883a 	add	r2,r2,r5
  80032c:	11400017 	ldw	r5,0(r2)
  800330:	3009883a 	mov	r4,r6
  800334:	08026a00 	call	8026a0 <__mulsi3>
  800338:	1007883a 	mov	r3,r2
  80033c:	e0bfed17 	ldw	r2,-76(fp)
  800340:	10c5883a 	add	r2,r2,r3
  800344:	e0bfed15 	stw	r2,-76(fp)
  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
      int sum = 0;
      for (k = 0; k < 3; k++) {
        for (l = 0; l < 3; l++) {
  800348:	e0bff317 	ldw	r2,-52(fp)
  80034c:	10800044 	addi	r2,r2,1
  800350:	e0bff315 	stw	r2,-52(fp)
  800354:	e0bff317 	ldw	r2,-52(fp)
  800358:	108000d0 	cmplti	r2,r2,3
  80035c:	103fd71e 	bne	r2,zero,8002bc <gaussian_filter+0xec>

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
      int sum = 0;
      for (k = 0; k < 3; k++) {
  800360:	e0bff417 	ldw	r2,-48(fp)
  800364:	10800044 	addi	r2,r2,1
  800368:	e0bff415 	stw	r2,-48(fp)
  80036c:	e0bff417 	ldw	r2,-48(fp)
  800370:	108000d0 	cmplti	r2,r2,3
  800374:	103fcf1e 	bne	r2,zero,8002b4 <gaussian_filter+0xe4>
        for (l = 0; l < 3; l++) {
          sum += data[i - 1 + k][j - 1 + l] * kernel[k][l];
        }
      }
      output[i - 1][j - 1] = sum / 16;  // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
  800378:	e0bff617 	ldw	r2,-40(fp)
  80037c:	1085883a 	add	r2,r2,r2
  800380:	1085883a 	add	r2,r2,r2
  800384:	1007883a 	mov	r3,r2
  800388:	e0bff717 	ldw	r2,-36(fp)
  80038c:	1885883a 	add	r2,r3,r2
  800390:	10bfff04 	addi	r2,r2,-4
  800394:	10c00017 	ldw	r3,0(r2)
  800398:	e0bff517 	ldw	r2,-44(fp)
  80039c:	1885883a 	add	r2,r3,r2
  8003a0:	10bfffc4 	addi	r2,r2,-1
  8003a4:	e0bffe15 	stw	r2,-8(fp)
  8003a8:	e0bfed17 	ldw	r2,-76(fp)
  8003ac:	e0bfff15 	stw	r2,-4(fp)
  8003b0:	e0ffff17 	ldw	r3,-4(fp)
  8003b4:	1804403a 	cmpge	r2,r3,zero
  8003b8:	1000031e 	bne	r2,zero,8003c8 <gaussian_filter+0x1f8>
  8003bc:	e0bfff17 	ldw	r2,-4(fp)
  8003c0:	108003c4 	addi	r2,r2,15
  8003c4:	e0bfff15 	stw	r2,-4(fp)
  8003c8:	e0ffff17 	ldw	r3,-4(fp)
  8003cc:	1805d13a 	srai	r2,r3,4
  8003d0:	e0fffe17 	ldw	r3,-8(fp)
  8003d4:	18800005 	stb	r2,0(r3)
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
    for (j = 1; j < col - 1; j++) {
  8003d8:	e0bff517 	ldw	r2,-44(fp)
  8003dc:	10800044 	addi	r2,r2,1
  8003e0:	e0bff515 	stw	r2,-44(fp)
  8003e4:	e0bffb17 	ldw	r2,-20(fp)
  8003e8:	10ffffc4 	addi	r3,r2,-1
  8003ec:	e0bff517 	ldw	r2,-44(fp)
  8003f0:	10ffad16 	blt	r2,r3,8002a8 <gaussian_filter+0xd8>
  for (i = 0; i < row - 2; i++) {
    output[i] = (unsigned char*)malloc((col - 2) * sizeof(unsigned char));
  }

  // Bucle para recorrer la imagen y aplicar el filtro Gaussiano y no sobrepasar los bordes de la imagen
  for (i = 1; i < row - 1; i++) {
  8003f4:	e0bff617 	ldw	r2,-40(fp)
  8003f8:	10800044 	addi	r2,r2,1
  8003fc:	e0bff615 	stw	r2,-40(fp)
  800400:	e0bffa17 	ldw	r2,-24(fp)
  800404:	10ffffc4 	addi	r3,r2,-1
  800408:	e0bff617 	ldw	r2,-40(fp)
  80040c:	10ffa316 	blt	r2,r3,80029c <gaussian_filter+0xcc>
        }
      }
      output[i - 1][j - 1] = sum / 16;  // Asigna el valor del pixel en la imagen de salida dividiendo la suma por la suma de los valores del kernel (16)
    }
  }
  clock_t end_filtro = clock();
  800410:	0802c880 	call	802c88 <clock>
  800414:	e0bff215 	stw	r2,-56(fp)

  double tiempo_filtro = (double)(end_filtro - start_filtro) / CLOCKS_PER_SEC;
  800418:	e0fff217 	ldw	r3,-56(fp)
  80041c:	e0bff817 	ldw	r2,-32(fp)
  800420:	1889c83a 	sub	r4,r3,r2
  800424:	080250c0 	call	80250c <__floatunsidf>
  800428:	100b883a 	mov	r5,r2
  80042c:	180d883a 	mov	r6,r3
  800430:	2809883a 	mov	r4,r5
  800434:	300b883a 	mov	r5,r6
  800438:	000d883a 	mov	r6,zero
  80043c:	01d023f4 	movhi	r7,16527
  800440:	39d00004 	addi	r7,r7,16384
  800444:	08022b40 	call	8022b4 <__divdf3>
  800448:	1009883a 	mov	r4,r2
  80044c:	180b883a 	mov	r5,r3
  800450:	e13ff015 	stw	r4,-64(fp)
  800454:	e17ff115 	stw	r5,-60(fp)
  double minutos_filtro = tiempo_filtro / 60;
  800458:	e13ff017 	ldw	r4,-64(fp)
  80045c:	e17ff117 	ldw	r5,-60(fp)
  800460:	000d883a 	mov	r6,zero
  800464:	01d013b4 	movhi	r7,16462
  800468:	08022b40 	call	8022b4 <__divdf3>
  80046c:	1009883a 	mov	r4,r2
  800470:	180b883a 	mov	r5,r3
  800474:	e13fee15 	stw	r4,-72(fp)
  800478:	e17fef15 	stw	r5,-68(fp)
  printf("Tiempo ejecucion de solo el filtro: %.2f - segundos (%.2f minutos\n", tiempo_filtro, minutos_filtro);
  80047c:	e0bfef17 	ldw	r2,-68(fp)
  800480:	d8800015 	stw	r2,0(sp)
  800484:	e1ffee17 	ldw	r7,-72(fp)
  800488:	01002074 	movhi	r4,129
  80048c:	2112cf04 	addi	r4,r4,19260
  800490:	e17ff017 	ldw	r5,-64(fp)
  800494:	e1bff117 	ldw	r6,-60(fp)
  800498:	08051280 	call	805128 <printf>
  printf("Guardando imagen...\n");
  80049c:	01002074 	movhi	r4,129
  8004a0:	2112e004 	addi	r4,r4,19328
  8004a4:	08052400 	call	805240 <puts>
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  8004a8:	e0bffa17 	ldw	r2,-24(fp)
  8004ac:	117fff84 	addi	r5,r2,-2
  8004b0:	e0bffb17 	ldw	r2,-20(fp)
  8004b4:	11bfff84 	addi	r6,r2,-2
  8004b8:	00802074 	movhi	r2,129
  8004bc:	1092e504 	addi	r2,r2,19348
  8004c0:	d8800015 	stw	r2,0(sp)
  8004c4:	00800044 	movi	r2,1
  8004c8:	d8800115 	stw	r2,4(sp)
  8004cc:	e13ffd17 	ldw	r4,-12(fp)
  8004d0:	e1fff717 	ldw	r7,-36(fp)
  8004d4:	08015d80 	call	8015d8 <pgmwrite2>
  for (i = 0; i < row - 2; i++) {
  8004d8:	e03ff615 	stw	zero,-40(fp)
  8004dc:	00001306 	br	80052c <gaussian_filter+0x35c>
    free(data[i]);
  8004e0:	e0bff617 	ldw	r2,-40(fp)
  8004e4:	1085883a 	add	r2,r2,r2
  8004e8:	1085883a 	add	r2,r2,r2
  8004ec:	1007883a 	mov	r3,r2
  8004f0:	e0bff917 	ldw	r2,-28(fp)
  8004f4:	1885883a 	add	r2,r3,r2
  8004f8:	11000017 	ldw	r4,0(r2)
  8004fc:	080472c0 	call	80472c <free>
    free(output[i]);
  800500:	e0bff617 	ldw	r2,-40(fp)
  800504:	1085883a 	add	r2,r2,r2
  800508:	1085883a 	add	r2,r2,r2
  80050c:	1007883a 	mov	r3,r2
  800510:	e0bff717 	ldw	r2,-36(fp)
  800514:	1885883a 	add	r2,r3,r2
  800518:	11000017 	ldw	r4,0(r2)
  80051c:	080472c0 	call	80472c <free>
  double tiempo_filtro = (double)(end_filtro - start_filtro) / CLOCKS_PER_SEC;
  double minutos_filtro = tiempo_filtro / 60;
  printf("Tiempo ejecucion de solo el filtro: %.2f - segundos (%.2f minutos\n", tiempo_filtro, minutos_filtro);
  printf("Guardando imagen...\n");
  pgmwrite2(output_image, row - 2, col - 2, output, "Filtro Gaussiano aplicado", 1);
  for (i = 0; i < row - 2; i++) {
  800520:	e0bff617 	ldw	r2,-40(fp)
  800524:	10800044 	addi	r2,r2,1
  800528:	e0bff615 	stw	r2,-40(fp)
  80052c:	e0bffa17 	ldw	r2,-24(fp)
  800530:	10ffff84 	addi	r3,r2,-2
  800534:	e0bff617 	ldw	r2,-40(fp)
  800538:	10ffe916 	blt	r2,r3,8004e0 <gaussian_filter+0x310>
    free(data[i]);
    free(output[i]);
  }
  free(data);
  80053c:	e13ff917 	ldw	r4,-28(fp)
  800540:	080472c0 	call	80472c <free>
  free(output);
  800544:	e13ff717 	ldw	r4,-36(fp)
  800548:	080472c0 	call	80472c <free>
}
  80054c:	e037883a 	mov	sp,fp
  800550:	dfc00217 	ldw	ra,8(sp)
  800554:	df000117 	ldw	fp,4(sp)
  800558:	dc000017 	ldw	r16,0(sp)
  80055c:	dec00304 	addi	sp,sp,12
  800560:	f800283a 	ret

00800564 <main>:

int main() {
  800564:	defff304 	addi	sp,sp,-52
  800568:	dfc00c15 	stw	ra,48(sp)
  80056c:	df000b15 	stw	fp,44(sp)
  800570:	dc000a15 	stw	r16,40(sp)
  800574:	df000a04 	addi	fp,sp,40
  // vector para guardar los tiempos de ejecución
  double tiempos[REPETICIONES];

  int i;

  for (i = 0; i < REPETICIONES; i++) {
  800578:	e03ffd15 	stw	zero,-12(fp)
  80057c:	00003b06 	br	80066c <main+0x108>
	printf("Aplicando filtro Gaussiano en la repetición %d...\n", i + 1);
  800580:	e0bffd17 	ldw	r2,-12(fp)
  800584:	11400044 	addi	r5,r2,1
  800588:	01002074 	movhi	r4,129
  80058c:	2112ec04 	addi	r4,r4,19376
  800590:	08051280 	call	805128 <printf>
	clock_t start = clock();
  800594:	0802c880 	call	802c88 <clock>
  800598:	e0bff815 	stw	r2,-32(fp)
	gaussian_filter(INPUT_FILE, OUTPUT_FILE);
  80059c:	01002074 	movhi	r4,129
  8005a0:	2112f904 	addi	r4,r4,19428
  8005a4:	01402074 	movhi	r5,129
  8005a8:	2952ff04 	addi	r5,r5,19452
  8005ac:	08001d00 	call	8001d0 <gaussian_filter>
	clock_t end = clock();
  8005b0:	0802c880 	call	802c88 <clock>
  8005b4:	e0bff715 	stw	r2,-36(fp)
	tiempos[i] = (double)(end - start) / CLOCKS_PER_SEC;
  8005b8:	e43ffd17 	ldw	r16,-12(fp)
  8005bc:	e0fff717 	ldw	r3,-36(fp)
  8005c0:	e0bff817 	ldw	r2,-32(fp)
  8005c4:	1889c83a 	sub	r4,r3,r2
  8005c8:	080250c0 	call	80250c <__floatunsidf>
  8005cc:	100b883a 	mov	r5,r2
  8005d0:	180d883a 	mov	r6,r3
  8005d4:	2809883a 	mov	r4,r5
  8005d8:	300b883a 	mov	r5,r6
  8005dc:	000d883a 	mov	r6,zero
  8005e0:	01d023f4 	movhi	r7,16527
  8005e4:	39d00004 	addi	r7,r7,16384
  8005e8:	08022b40 	call	8022b4 <__divdf3>
  8005ec:	1009883a 	mov	r4,r2
  8005f0:	180b883a 	mov	r5,r3
  8005f4:	2005883a 	mov	r2,r4
  8005f8:	2807883a 	mov	r3,r5
  8005fc:	800890fa 	slli	r4,r16,3
  800600:	e17ff704 	addi	r5,fp,-36
  800604:	2149883a 	add	r4,r4,r5
  800608:	21000704 	addi	r4,r4,28
  80060c:	20800015 	stw	r2,0(r4)
  800610:	20c00115 	stw	r3,4(r4)
	printf("Tiempo en la repeticion %d: %.2f", i + 1, tiempos[i]);
  800614:	e0bffd17 	ldw	r2,-12(fp)
  800618:	11400044 	addi	r5,r2,1
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	100490fa 	slli	r2,r2,3
  800624:	e0fff704 	addi	r3,fp,-36
  800628:	10c5883a 	add	r2,r2,r3
  80062c:	11000704 	addi	r4,r2,28
  800630:	20800017 	ldw	r2,0(r4)
  800634:	20c00117 	ldw	r3,4(r4)
  800638:	01002074 	movhi	r4,129
  80063c:	21130704 	addi	r4,r4,19484
  800640:	100d883a 	mov	r6,r2
  800644:	180f883a 	mov	r7,r3
  800648:	08051280 	call	805128 <printf>
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  80064c:	e0bffd17 	ldw	r2,-12(fp)
  800650:	11400044 	addi	r5,r2,1
  800654:	01002074 	movhi	r4,129
  800658:	21131004 	addi	r4,r4,19520
  80065c:	08051280 	call	805128 <printf>
  // vector para guardar los tiempos de ejecución
  double tiempos[REPETICIONES];

  int i;

  for (i = 0; i < REPETICIONES; i++) {
  800660:	e0bffd17 	ldw	r2,-12(fp)
  800664:	10800044 	addi	r2,r2,1
  800668:	e0bffd15 	stw	r2,-12(fp)
  80066c:	e0bffd17 	ldw	r2,-12(fp)
  800670:	10800050 	cmplti	r2,r2,1
  800674:	103fc21e 	bne	r2,zero,800580 <main+0x1c>
	printf("Tiempo en la repeticion %d: %.2f", i + 1, tiempos[i]);
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  }

  // Calcular el tiempo promedio
  double tiempo_promedio = 0;
  800678:	e03ffb15 	stw	zero,-20(fp)
  80067c:	e03ffc15 	stw	zero,-16(fp)
  for (i = 0; i < REPETICIONES; i++) {
  800680:	e03ffd15 	stw	zero,-12(fp)
  800684:	00001306 	br	8006d4 <main+0x170>
	tiempo_promedio += tiempos[i];
  800688:	e0bffd17 	ldw	r2,-12(fp)
  80068c:	100490fa 	slli	r2,r2,3
  800690:	e17ff704 	addi	r5,fp,-36
  800694:	1145883a 	add	r2,r2,r5
  800698:	11000704 	addi	r4,r2,28
  80069c:	20800017 	ldw	r2,0(r4)
  8006a0:	20c00117 	ldw	r3,4(r4)
  8006a4:	e13ffb17 	ldw	r4,-20(fp)
  8006a8:	e17ffc17 	ldw	r5,-16(fp)
  8006ac:	100d883a 	mov	r6,r2
  8006b0:	180f883a 	mov	r7,r3
  8006b4:	08022400 	call	802240 <__adddf3>
  8006b8:	1009883a 	mov	r4,r2
  8006bc:	180b883a 	mov	r5,r3
  8006c0:	e13ffb15 	stw	r4,-20(fp)
  8006c4:	e17ffc15 	stw	r5,-16(fp)
	printf("\nTerminado en la repetición %d...\n\n", i + 1);
  }

  // Calcular el tiempo promedio
  double tiempo_promedio = 0;
  for (i = 0; i < REPETICIONES; i++) {
  8006c8:	e0bffd17 	ldw	r2,-12(fp)
  8006cc:	10800044 	addi	r2,r2,1
  8006d0:	e0bffd15 	stw	r2,-12(fp)
  8006d4:	e0bffd17 	ldw	r2,-12(fp)
  8006d8:	10800050 	cmplti	r2,r2,1
  8006dc:	103fea1e 	bne	r2,zero,800688 <main+0x124>
	tiempo_promedio += tiempos[i];
  }
  tiempo_promedio /= REPETICIONES;
  double minutos_promedio = tiempo_promedio / 60;
  8006e0:	e13ffb17 	ldw	r4,-20(fp)
  8006e4:	e17ffc17 	ldw	r5,-16(fp)
  8006e8:	000d883a 	mov	r6,zero
  8006ec:	01d013b4 	movhi	r7,16462
  8006f0:	08022b40 	call	8022b4 <__divdf3>
  8006f4:	1009883a 	mov	r4,r2
  8006f8:	180b883a 	mov	r5,r3
  8006fc:	e13ff915 	stw	r4,-28(fp)
  800700:	e17ffa15 	stw	r5,-24(fp)
  printf("Tiempo promedio de ejecución del programa: %.2f segundos (%.2f minutos)\n", tiempo_promedio, minutos_promedio);
  800704:	e0bffa17 	ldw	r2,-24(fp)
  800708:	d8800015 	stw	r2,0(sp)
  80070c:	e1fff917 	ldw	r7,-28(fp)
  800710:	01002074 	movhi	r4,129
  800714:	21131a04 	addi	r4,r4,19560
  800718:	e17ffb17 	ldw	r5,-20(fp)
  80071c:	e1bffc17 	ldw	r6,-16(fp)
  800720:	08051280 	call	805128 <printf>

  return 0;
  800724:	0005883a 	mov	r2,zero
}
  800728:	e037883a 	mov	sp,fp
  80072c:	dfc00217 	ldw	ra,8(sp)
  800730:	df000117 	ldw	fp,4(sp)
  800734:	dc000017 	ldw	r16,0(sp)
  800738:	dec00304 	addi	sp,sp,12
  80073c:	f800283a 	ret

00800740 <readToWhitespace>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in column dominant format
 */
int readToWhitespace(FILE* file, char* cadena, int maxchars) {
  800740:	defff804 	addi	sp,sp,-32
  800744:	dfc00715 	stw	ra,28(sp)
  800748:	df000615 	stw	fp,24(sp)
  80074c:	df000604 	addi	fp,sp,24
  800750:	e13ffd15 	stw	r4,-12(fp)
  800754:	e17ffe15 	stw	r5,-8(fp)
  800758:	e1bfff15 	stw	r6,-4(fp)
  int c;
  int numread = 0;
  80075c:	e03ffb15 	stw	zero,-20(fp)
  char* ptchar = cadena;
  800760:	e0bffe17 	ldw	r2,-8(fp)
  800764:	e0bffa15 	stw	r2,-24(fp)
  do {
    c = fgetc(file);
  800768:	e13ffd17 	ldw	r4,-12(fp)
  80076c:	08030680 	call	803068 <fgetc>
  800770:	e0bffc15 	stw	r2,-16(fp)
    // printf("L:%c\n", c);
    if (c == EOF) break;
  800774:	e0bffc17 	ldw	r2,-16(fp)
  800778:	10bfffe0 	cmpeqi	r2,r2,-1
  80077c:	10001b1e 	bne	r2,zero,8007ec <readToWhitespace+0xac>
    if (isspace(c)) {  // Devuelve el espacio leido al stream y sale
  800780:	00802074 	movhi	r2,129
  800784:	109bcc04 	addi	r2,r2,28464
  800788:	10c00017 	ldw	r3,0(r2)
  80078c:	e0bffc17 	ldw	r2,-16(fp)
  800790:	1885883a 	add	r2,r3,r2
  800794:	10800003 	ldbu	r2,0(r2)
  800798:	10803fcc 	andi	r2,r2,255
  80079c:	1080020c 	andi	r2,r2,8
  8007a0:	1005003a 	cmpeq	r2,r2,zero
  8007a4:	1000041e 	bne	r2,zero,8007b8 <readToWhitespace+0x78>
      ungetc(c, file);
  8007a8:	e13ffc17 	ldw	r4,-16(fp)
  8007ac:	e17ffd17 	ldw	r5,-12(fp)
  8007b0:	0805b480 	call	805b48 <ungetc>
      break;
  8007b4:	00000d06 	br	8007ec <readToWhitespace+0xac>
    }
    /* un caracter valido */
    *ptchar++ = (unsigned char)c;
  8007b8:	e0bffc17 	ldw	r2,-16(fp)
  8007bc:	1007883a 	mov	r3,r2
  8007c0:	e0bffa17 	ldw	r2,-24(fp)
  8007c4:	10c00005 	stb	r3,0(r2)
  8007c8:	e0bffa17 	ldw	r2,-24(fp)
  8007cc:	10800044 	addi	r2,r2,1
  8007d0:	e0bffa15 	stw	r2,-24(fp)
    numread++;
  8007d4:	e0bffb17 	ldw	r2,-20(fp)
  8007d8:	10800044 	addi	r2,r2,1
  8007dc:	e0bffb15 	stw	r2,-20(fp)
  } while (numread <= maxchars);
  8007e0:	e0fffb17 	ldw	r3,-20(fp)
  8007e4:	e0bfff17 	ldw	r2,-4(fp)
  8007e8:	10ffdf0e 	bge	r2,r3,800768 <readToWhitespace+0x28>
  return numread;
  8007ec:	e0bffb17 	ldw	r2,-20(fp)
}
  8007f0:	e037883a 	mov	sp,fp
  8007f4:	dfc00117 	ldw	ra,4(sp)
  8007f8:	df000017 	ldw	fp,0(sp)
  8007fc:	dec00204 	addi	sp,sp,8
  800800:	f800283a 	ret

00800804 <eatCommsWhitespaces>:

void eatCommsWhitespaces(FILE* file) {
  800804:	defffb04 	addi	sp,sp,-20
  800808:	dfc00415 	stw	ra,16(sp)
  80080c:	df000315 	stw	fp,12(sp)
  800810:	df000304 	addi	fp,sp,12
  800814:	e13fff15 	stw	r4,-4(fp)
  int c, cc;
  do {
    c = fgetc(file);
  800818:	e13fff17 	ldw	r4,-4(fp)
  80081c:	08030680 	call	803068 <fgetc>
  800820:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  800824:	e0bffe17 	ldw	r2,-8(fp)
  800828:	10bfffe0 	cmpeqi	r2,r2,-1
  80082c:	10001a1e 	bne	r2,zero,800898 <eatCommsWhitespaces+0x94>
    if (c == '#') {  // Procesar comentario
  800830:	e0bffe17 	ldw	r2,-8(fp)
  800834:	108008d8 	cmpnei	r2,r2,35
  800838:	10000a1e 	bne	r2,zero,800864 <eatCommsWhitespaces+0x60>
      do {
        cc = fgetc(file);
  80083c:	e13fff17 	ldw	r4,-4(fp)
  800840:	08030680 	call	803068 <fgetc>
  800844:	e0bffd15 	stw	r2,-12(fp)
        if (cc == EOF) return;
  800848:	e0bffd17 	ldw	r2,-12(fp)
  80084c:	10bfffe0 	cmpeqi	r2,r2,-1
  800850:	1000111e 	bne	r2,zero,800898 <eatCommsWhitespaces+0x94>
      } while (cc != '\n');  // Se asume que no se abre en modo binario (Windows
  800854:	e0bffd17 	ldw	r2,-12(fp)
  800858:	10800298 	cmpnei	r2,r2,10
  80085c:	103ff71e 	bne	r2,zero,80083c <eatCommsWhitespaces+0x38>
                             // compatible)
      break;
  800860:	00000d06 	br	800898 <eatCommsWhitespaces+0x94>
    }
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  800864:	00802074 	movhi	r2,129
  800868:	109bcc04 	addi	r2,r2,28464
  80086c:	10c00017 	ldw	r3,0(r2)
  800870:	e0bffe17 	ldw	r2,-8(fp)
  800874:	1885883a 	add	r2,r3,r2
  800878:	10800003 	ldbu	r2,0(r2)
  80087c:	10803fcc 	andi	r2,r2,255
  800880:	1080020c 	andi	r2,r2,8
  800884:	1004c03a 	cmpne	r2,r2,zero
  800888:	103fe31e 	bne	r2,zero,800818 <eatCommsWhitespaces+0x14>
      ungetc(c, file);
  80088c:	e13ffe17 	ldw	r4,-8(fp)
  800890:	e17fff17 	ldw	r5,-4(fp)
  800894:	0805b480 	call	805b48 <ungetc>
      return;
    }
  } while (1);
}
  800898:	e037883a 	mov	sp,fp
  80089c:	dfc00117 	ldw	ra,4(sp)
  8008a0:	df000017 	ldw	fp,0(sp)
  8008a4:	dec00204 	addi	sp,sp,8
  8008a8:	f800283a 	ret

008008ac <eatWhitespaces>:

int eatWhitespaces(FILE* file, int maxchars) {
  8008ac:	defffa04 	addi	sp,sp,-24
  8008b0:	dfc00515 	stw	ra,20(sp)
  8008b4:	df000415 	stw	fp,16(sp)
  8008b8:	df000404 	addi	fp,sp,16
  8008bc:	e13ffe15 	stw	r4,-8(fp)
  8008c0:	e17fff15 	stw	r5,-4(fp)
  int c;
  int numread = 0;
  8008c4:	e03ffc15 	stw	zero,-16(fp)
  do {
    c = fgetc(file);
  8008c8:	e13ffe17 	ldw	r4,-8(fp)
  8008cc:	08030680 	call	803068 <fgetc>
  8008d0:	e0bffd15 	stw	r2,-12(fp)
    if (c == EOF) break;
  8008d4:	e0bffd17 	ldw	r2,-12(fp)
  8008d8:	10bfffe0 	cmpeqi	r2,r2,-1
  8008dc:	1000141e 	bne	r2,zero,800930 <eatWhitespaces+0x84>
    if (!isspace(c)) {  // Devuelve el caracter leido al stream y sale
  8008e0:	00802074 	movhi	r2,129
  8008e4:	109bcc04 	addi	r2,r2,28464
  8008e8:	10c00017 	ldw	r3,0(r2)
  8008ec:	e0bffd17 	ldw	r2,-12(fp)
  8008f0:	1885883a 	add	r2,r3,r2
  8008f4:	10800003 	ldbu	r2,0(r2)
  8008f8:	10803fcc 	andi	r2,r2,255
  8008fc:	1080020c 	andi	r2,r2,8
  800900:	1004c03a 	cmpne	r2,r2,zero
  800904:	1000041e 	bne	r2,zero,800918 <eatWhitespaces+0x6c>
      ungetc(c, file);
  800908:	e13ffd17 	ldw	r4,-12(fp)
  80090c:	e17ffe17 	ldw	r5,-8(fp)
  800910:	0805b480 	call	805b48 <ungetc>
      break;
  800914:	00000606 	br	800930 <eatWhitespaces+0x84>
    }
    numread++;
  800918:	e0bffc17 	ldw	r2,-16(fp)
  80091c:	10800044 	addi	r2,r2,1
  800920:	e0bffc15 	stw	r2,-16(fp)
  } while (numread <= maxchars);
  800924:	e0fffc17 	ldw	r3,-16(fp)
  800928:	e0bfff17 	ldw	r2,-4(fp)
  80092c:	10ffe60e 	bge	r2,r3,8008c8 <eatWhitespaces+0x1c>
  return numread;
  800930:	e0bffc17 	ldw	r2,-16(fp)
}
  800934:	e037883a 	mov	sp,fp
  800938:	dfc00117 	ldw	ra,4(sp)
  80093c:	df000017 	ldw	fp,0(sp)
  800940:	dec00204 	addi	sp,sp,8
  800944:	f800283a 	ret

00800948 <eatComments>:

void eatComments(FILE* file) {
  800948:	defffc04 	addi	sp,sp,-16
  80094c:	dfc00315 	stw	ra,12(sp)
  800950:	df000215 	stw	fp,8(sp)
  800954:	df000204 	addi	fp,sp,8
  800958:	e13fff15 	stw	r4,-4(fp)
  int c;
  do {  // Procesa cada comentario
    c = fgetc(file);
  80095c:	e13fff17 	ldw	r4,-4(fp)
  800960:	08030680 	call	803068 <fgetc>
  800964:	e0bffe15 	stw	r2,-8(fp)
    if (c == EOF) return;
  800968:	e0bffe17 	ldw	r2,-8(fp)
  80096c:	10bfffe0 	cmpeqi	r2,r2,-1
  800970:	1000111e 	bne	r2,zero,8009b8 <eatComments+0x70>
    if (c != '#') {
  800974:	e0bffe17 	ldw	r2,-8(fp)
  800978:	108008e0 	cmpeqi	r2,r2,35
  80097c:	1000041e 	bne	r2,zero,800990 <eatComments+0x48>
      ungetc(c, file);
  800980:	e13ffe17 	ldw	r4,-8(fp)
  800984:	e17fff17 	ldw	r5,-4(fp)
  800988:	0805b480 	call	805b48 <ungetc>
      return;
  80098c:	00000a06 	br	8009b8 <eatComments+0x70>
    }  // Procesa el resto del comentario hasta fin de linea
    do {
      c = fgetc(file);
  800990:	e13fff17 	ldw	r4,-4(fp)
  800994:	08030680 	call	803068 <fgetc>
  800998:	e0bffe15 	stw	r2,-8(fp)
      if (c == EOF) return;
  80099c:	e0bffe17 	ldw	r2,-8(fp)
  8009a0:	10bfffe0 	cmpeqi	r2,r2,-1
  8009a4:	1000041e 	bne	r2,zero,8009b8 <eatComments+0x70>
    } while (
        c !=
        '\n');  // Se asume que no se abre en modo binario (Windows compatible)
  8009a8:	e0bffe17 	ldw	r2,-8(fp)
  8009ac:	10800298 	cmpnei	r2,r2,10
  8009b0:	103ff71e 	bne	r2,zero,800990 <eatComments+0x48>
  } while (1);
  8009b4:	003fe906 	br	80095c <eatComments+0x14>
  return;
}
  8009b8:	e037883a 	mov	sp,fp
  8009bc:	dfc00117 	ldw	ra,4(sp)
  8009c0:	df000017 	ldw	fp,0(sp)
  8009c4:	dec00204 	addi	sp,sp,8
  8009c8:	f800283a 	ret

008009cc <pgmread>:

unsigned char** pgmread(char* filename, int* w, int* h) {
  8009cc:	deffb004 	addi	sp,sp,-320
  8009d0:	dfc04f15 	stw	ra,316(sp)
  8009d4:	df004e15 	stw	fp,312(sp)
  8009d8:	dc004d15 	stw	r16,308(sp)
  8009dc:	df004d04 	addi	fp,sp,308
  8009e0:	e13ffc15 	stw	r4,-16(fp)
  8009e4:	e17ffd15 	stw	r5,-12(fp)
  8009e8:	e1bffe15 	stw	r6,-8(fp)
  int nread;
  int i, j, int_tmp;

  unsigned char** data;
  unsigned char* bindata;
  printf("Debug: Opening image:\n");
  8009ec:	01002074 	movhi	r4,129
  8009f0:	21132d04 	addi	r4,r4,19636
  8009f4:	08052400 	call	805240 <puts>
  if ((file = fopen(filename, "r")) == NULL) {
  8009f8:	e13ffc17 	ldw	r4,-16(fp)
  8009fc:	01402074 	movhi	r5,129
  800a00:	29533304 	addi	r5,r5,19660
  800a04:	08036e40 	call	8036e4 <fopen>
  800a08:	e0bfb915 	stw	r2,-284(fp)
  800a0c:	e0bfb917 	ldw	r2,-284(fp)
  800a10:	1004c03a 	cmpne	r2,r2,zero
  800a14:	10000b1e 	bne	r2,zero,800a44 <pgmread+0x78>
    printf("ERROR: file open failed\n");
  800a18:	01002074 	movhi	r4,129
  800a1c:	21133404 	addi	r4,r4,19664
  800a20:	08052400 	call	805240 <puts>
    *h = *w = 0;
  800a24:	e0bffd17 	ldw	r2,-12(fp)
  800a28:	10000015 	stw	zero,0(r2)
  800a2c:	e0bffd17 	ldw	r2,-12(fp)
  800a30:	10c00017 	ldw	r3,0(r2)
  800a34:	e0bffe17 	ldw	r2,-8(fp)
  800a38:	10c00015 	stw	r3,0(r2)
    return (NULL);
  800a3c:	e03fff15 	stw	zero,-4(fp)
  800a40:	0000ec06 	br	800df4 <pgmread+0x428>
  } else {
    printf("Debug: Image opened successfully!\n");
  800a44:	01002074 	movhi	r4,129
  800a48:	21133a04 	addi	r4,r4,19688
  800a4c:	08052400 	call	805240 <puts>
  }
  fgets(line, 256, file);
  800a50:	e13fba04 	addi	r4,fp,-280
  800a54:	01404004 	movi	r5,256
  800a58:	e1bfb917 	ldw	r6,-284(fp)
  800a5c:	08032d80 	call	8032d8 <fgets>
  if (strncmp(line, "P5", 2)) {
  800a60:	e13fba04 	addi	r4,fp,-280
  800a64:	01402074 	movhi	r5,129
  800a68:	29534304 	addi	r5,r5,19724
  800a6c:	01800084 	movi	r6,2
  800a70:	08057d80 	call	8057d8 <strncmp>
  800a74:	1005003a 	cmpeq	r2,r2,zero
  800a78:	1000141e 	bne	r2,zero,800acc <pgmread+0x100>
    if (strncmp(line, "P2", 2)) {
  800a7c:	e13fba04 	addi	r4,fp,-280
  800a80:	01402074 	movhi	r5,129
  800a84:	29534404 	addi	r5,r5,19728
  800a88:	01800084 	movi	r6,2
  800a8c:	08057d80 	call	8057d8 <strncmp>
  800a90:	1005003a 	cmpeq	r2,r2,zero
  800a94:	10000b1e 	bne	r2,zero,800ac4 <pgmread+0xf8>
      printf("pgm read: not a pgm file\n");
  800a98:	01002074 	movhi	r4,129
  800a9c:	21134504 	addi	r4,r4,19732
  800aa0:	08052400 	call	805240 <puts>
      *h = *w = 0;
  800aa4:	e0bffd17 	ldw	r2,-12(fp)
  800aa8:	10000015 	stw	zero,0(r2)
  800aac:	e0bffd17 	ldw	r2,-12(fp)
  800ab0:	10c00017 	ldw	r3,0(r2)
  800ab4:	e0bffe17 	ldw	r2,-8(fp)
  800ab8:	10c00015 	stw	r3,0(r2)
      return (NULL);
  800abc:	e03fff15 	stw	zero,-4(fp)
  800ac0:	0000cc06 	br	800df4 <pgmread+0x428>
    } else
      binary = 0;
  800ac4:	e03fb815 	stw	zero,-288(fp)
  800ac8:	00000206 	br	800ad4 <pgmread+0x108>
  } else
    binary = 1;
  800acc:	00800044 	movi	r2,1
  800ad0:	e0bfb815 	stw	r2,-288(fp)

  fgets(line, 256, file);
  800ad4:	e13fba04 	addi	r4,fp,-280
  800ad8:	01404004 	movi	r5,256
  800adc:	e1bfb917 	ldw	r6,-284(fp)
  800ae0:	08032d80 	call	8032d8 <fgets>
  while (line[0] == '#') fgets(line, 256, file);
  800ae4:	00000406 	br	800af8 <pgmread+0x12c>
  800ae8:	e13fba04 	addi	r4,fp,-280
  800aec:	01404004 	movi	r5,256
  800af0:	e1bfb917 	ldw	r6,-284(fp)
  800af4:	08032d80 	call	8032d8 <fgets>
  800af8:	e0bfba03 	ldbu	r2,-280(fp)
  800afc:	10803fcc 	andi	r2,r2,255
  800b00:	1080201c 	xori	r2,r2,128
  800b04:	10bfe004 	addi	r2,r2,-128
  800b08:	108008e0 	cmpeqi	r2,r2,35
  800b0c:	103ff61e 	bne	r2,zero,800ae8 <pgmread+0x11c>

  sscanf(line, "%d", w);
  800b10:	e13fba04 	addi	r4,fp,-280
  800b14:	01402074 	movhi	r5,129
  800b18:	29534c04 	addi	r5,r5,19760
  800b1c:	e1bffd17 	ldw	r6,-12(fp)
  800b20:	08055940 	call	805594 <sscanf>
  fgets(line, 256, file);
  800b24:	e13fba04 	addi	r4,fp,-280
  800b28:	01404004 	movi	r5,256
  800b2c:	e1bfb917 	ldw	r6,-284(fp)
  800b30:	08032d80 	call	8032d8 <fgets>
  sscanf(line, "%d", h);
  800b34:	e13fba04 	addi	r4,fp,-280
  800b38:	01402074 	movhi	r5,129
  800b3c:	29534c04 	addi	r5,r5,19760
  800b40:	e1bffe17 	ldw	r6,-8(fp)
  800b44:	08055940 	call	805594 <sscanf>
  fgets(line, 256, file);
  800b48:	e13fba04 	addi	r4,fp,-280
  800b4c:	01404004 	movi	r5,256
  800b50:	e1bfb917 	ldw	r6,-284(fp)
  800b54:	08032d80 	call	8032d8 <fgets>
  sscanf(line, "%d", &maxval);
  800b58:	e13fba04 	addi	r4,fp,-280
  800b5c:	e1bffa04 	addi	r6,fp,-24
  800b60:	01402074 	movhi	r5,129
  800b64:	29534c04 	addi	r5,r5,19760
  800b68:	08055940 	call	805594 <sscanf>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
  800b6c:	e0bffd17 	ldw	r2,-12(fp)
  800b70:	10800017 	ldw	r2,0(r2)
  800b74:	1009883a 	mov	r4,r2
  800b78:	01400104 	movi	r5,4
  800b7c:	0802ba40 	call	802ba4 <calloc>
  800b80:	e0bfb415 	stw	r2,-304(fp)
  800b84:	e0bfb417 	ldw	r2,-304(fp)
  800b88:	1004c03a 	cmpne	r2,r2,zero
  800b8c:	1000051e 	bne	r2,zero,800ba4 <pgmread+0x1d8>
    printf("Memory allocation error. Exit program\n");
  800b90:	01002074 	movhi	r4,129
  800b94:	21134d04 	addi	r4,r4,19764
  800b98:	08052400 	call	805240 <puts>
    exit(1);
  800b9c:	01000044 	movi	r4,1
  800ba0:	0802cdc0 	call	802cdc <exit>
  }
  for (j = 0; j < (*w); j++)
  800ba4:	e03fb515 	stw	zero,-300(fp)
  800ba8:	00001706 	br	800c08 <pgmread+0x23c>
    if ((data[j] = (unsigned char*)calloc((*h), sizeof(unsigned char))) ==
  800bac:	e0bfb517 	ldw	r2,-300(fp)
  800bb0:	1085883a 	add	r2,r2,r2
  800bb4:	1085883a 	add	r2,r2,r2
  800bb8:	1007883a 	mov	r3,r2
  800bbc:	e0bfb417 	ldw	r2,-304(fp)
  800bc0:	18a1883a 	add	r16,r3,r2
  800bc4:	e0bffe17 	ldw	r2,-8(fp)
  800bc8:	10800017 	ldw	r2,0(r2)
  800bcc:	1009883a 	mov	r4,r2
  800bd0:	01400044 	movi	r5,1
  800bd4:	0802ba40 	call	802ba4 <calloc>
  800bd8:	80800015 	stw	r2,0(r16)
  800bdc:	80800017 	ldw	r2,0(r16)
  800be0:	1004c03a 	cmpne	r2,r2,zero
  800be4:	1000051e 	bne	r2,zero,800bfc <pgmread+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  800be8:	01002074 	movhi	r4,129
  800bec:	21134d04 	addi	r4,r4,19764
  800bf0:	08052400 	call	805240 <puts>
      exit(1);
  800bf4:	01000044 	movi	r4,1
  800bf8:	0802cdc0 	call	802cdc <exit>

  if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*w); j++)
  800bfc:	e0bfb517 	ldw	r2,-300(fp)
  800c00:	10800044 	addi	r2,r2,1
  800c04:	e0bfb515 	stw	r2,-300(fp)
  800c08:	e0bffd17 	ldw	r2,-12(fp)
  800c0c:	10c00017 	ldw	r3,0(r2)
  800c10:	e0bfb517 	ldw	r2,-300(fp)
  800c14:	10ffe516 	blt	r2,r3,800bac <pgmread+0x1e0>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }

  if (binary) {
  800c18:	e0bfb817 	ldw	r2,-288(fp)
  800c1c:	1005003a 	cmpeq	r2,r2,zero
  800c20:	10004a1e 	bne	r2,zero,800d4c <pgmread+0x380>
    if ((bindata = (unsigned char*)calloc((*w) * (*h), sizeof(unsigned char))) == NULL) {
  800c24:	e0bffd17 	ldw	r2,-12(fp)
  800c28:	11000017 	ldw	r4,0(r2)
  800c2c:	e0bffe17 	ldw	r2,-8(fp)
  800c30:	11400017 	ldw	r5,0(r2)
  800c34:	08026a00 	call	8026a0 <__mulsi3>
  800c38:	1009883a 	mov	r4,r2
  800c3c:	01400044 	movi	r5,1
  800c40:	0802ba40 	call	802ba4 <calloc>
  800c44:	e0bfb315 	stw	r2,-308(fp)
  800c48:	e0bfb317 	ldw	r2,-308(fp)
  800c4c:	1004c03a 	cmpne	r2,r2,zero
  800c50:	1000051e 	bne	r2,zero,800c68 <pgmread+0x29c>
      printf("Memory allocation error on bindata. Exit program\n");
  800c54:	01002074 	movhi	r4,129
  800c58:	21135704 	addi	r4,r4,19804
  800c5c:	08052400 	call	805240 <puts>
      exit(1);
  800c60:	01000044 	movi	r4,1
  800c64:	0802cdc0 	call	802cdc <exit>
    }

    printf("Reading %s as binary.\n", filename);
  800c68:	01002074 	movhi	r4,129
  800c6c:	21136404 	addi	r4,r4,19856
  800c70:	e17ffc17 	ldw	r5,-16(fp)
  800c74:	08051280 	call	805128 <printf>

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);
  800c78:	e0bffd17 	ldw	r2,-12(fp)
  800c7c:	11000017 	ldw	r4,0(r2)
  800c80:	e0bffe17 	ldw	r2,-8(fp)
  800c84:	11400017 	ldw	r5,0(r2)
  800c88:	08026a00 	call	8026a0 <__mulsi3>
  800c8c:	100d883a 	mov	r6,r2
  800c90:	e13fb317 	ldw	r4,-308(fp)
  800c94:	01400044 	movi	r5,1
  800c98:	e1ffb917 	ldw	r7,-284(fp)
  800c9c:	080396c0 	call	80396c <fread>
  800ca0:	e0bfb715 	stw	r2,-292(fp)

    for (i = 0; i < (*w); i++)
  800ca4:	e03fb615 	stw	zero,-296(fp)
  800ca8:	00002106 	br	800d30 <pgmread+0x364>
      for (j = 0; j < (*h); j++)
  800cac:	e03fb515 	stw	zero,-300(fp)
  800cb0:	00001806 	br	800d14 <pgmread+0x348>
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];
  800cb4:	e0bfb617 	ldw	r2,-296(fp)
  800cb8:	1085883a 	add	r2,r2,r2
  800cbc:	1085883a 	add	r2,r2,r2
  800cc0:	1007883a 	mov	r3,r2
  800cc4:	e0bfb417 	ldw	r2,-304(fp)
  800cc8:	1885883a 	add	r2,r3,r2
  800ccc:	10c00017 	ldw	r3,0(r2)
  800cd0:	e0bfb517 	ldw	r2,-300(fp)
  800cd4:	18a1883a 	add	r16,r3,r2
  800cd8:	e0bffd17 	ldw	r2,-12(fp)
  800cdc:	11000017 	ldw	r4,0(r2)
  800ce0:	e17fb517 	ldw	r5,-300(fp)
  800ce4:	08026a00 	call	8026a0 <__mulsi3>
  800ce8:	1007883a 	mov	r3,r2
  800cec:	e0bfb617 	ldw	r2,-296(fp)
  800cf0:	1885883a 	add	r2,r3,r2
  800cf4:	1007883a 	mov	r3,r2
  800cf8:	e0bfb317 	ldw	r2,-308(fp)
  800cfc:	1885883a 	add	r2,r3,r2
  800d00:	10800003 	ldbu	r2,0(r2)
  800d04:	80800005 	stb	r2,0(r16)
    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
      for (j = 0; j < (*h); j++)
  800d08:	e0bfb517 	ldw	r2,-300(fp)
  800d0c:	10800044 	addi	r2,r2,1
  800d10:	e0bfb515 	stw	r2,-300(fp)
  800d14:	e0bffe17 	ldw	r2,-8(fp)
  800d18:	10c00017 	ldw	r3,0(r2)
  800d1c:	e0bfb517 	ldw	r2,-300(fp)
  800d20:	10ffe416 	blt	r2,r3,800cb4 <pgmread+0x2e8>

    printf("Reading %s as binary.\n", filename);

    nread = fread((void*)bindata, sizeof(unsigned char), (*w) * (*h), file);

    for (i = 0; i < (*w); i++)
  800d24:	e0bfb617 	ldw	r2,-296(fp)
  800d28:	10800044 	addi	r2,r2,1
  800d2c:	e0bfb615 	stw	r2,-296(fp)
  800d30:	e0bffd17 	ldw	r2,-12(fp)
  800d34:	10c00017 	ldw	r3,0(r2)
  800d38:	e0bfb617 	ldw	r2,-296(fp)
  800d3c:	10ffdb16 	blt	r2,r3,800cac <pgmread+0x2e0>
      for (j = 0; j < (*h); j++)
        data[i][j] = (unsigned char)bindata[(j * (*w)) + i];

    free(bindata);
  800d40:	e13fb317 	ldw	r4,-308(fp)
  800d44:	080472c0 	call	80472c <free>
  800d48:	00002606 	br	800de4 <pgmread+0x418>
  } else {
    printf("Reading %s as ascii.\n", filename);
  800d4c:	01002074 	movhi	r4,129
  800d50:	21136a04 	addi	r4,r4,19880
  800d54:	e17ffc17 	ldw	r5,-16(fp)
  800d58:	08051280 	call	805128 <printf>

    for (i = 0; i < (*h); i++) {
  800d5c:	e03fb615 	stw	zero,-296(fp)
  800d60:	00001c06 	br	800dd4 <pgmread+0x408>
      for (j = 0; j < (*w); j++) {
  800d64:	e03fb515 	stw	zero,-300(fp)
  800d68:	00001306 	br	800db8 <pgmread+0x3ec>
        fscanf(file, "%d", &int_tmp);
  800d6c:	e1bffb04 	addi	r6,fp,-20
  800d70:	e13fb917 	ldw	r4,-284(fp)
  800d74:	01402074 	movhi	r5,129
  800d78:	29534c04 	addi	r5,r5,19760
  800d7c:	0803e140 	call	803e14 <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  800d80:	e0bfb517 	ldw	r2,-300(fp)
  800d84:	1085883a 	add	r2,r2,r2
  800d88:	1085883a 	add	r2,r2,r2
  800d8c:	1007883a 	mov	r3,r2
  800d90:	e0bfb417 	ldw	r2,-304(fp)
  800d94:	1885883a 	add	r2,r3,r2
  800d98:	10c00017 	ldw	r3,0(r2)
  800d9c:	e0bfb617 	ldw	r2,-296(fp)
  800da0:	1887883a 	add	r3,r3,r2
  800da4:	e0bffb17 	ldw	r2,-20(fp)
  800da8:	18800005 	stb	r2,0(r3)
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
      for (j = 0; j < (*w); j++) {
  800dac:	e0bfb517 	ldw	r2,-300(fp)
  800db0:	10800044 	addi	r2,r2,1
  800db4:	e0bfb515 	stw	r2,-300(fp)
  800db8:	e0bffd17 	ldw	r2,-12(fp)
  800dbc:	10c00017 	ldw	r3,0(r2)
  800dc0:	e0bfb517 	ldw	r2,-300(fp)
  800dc4:	10ffe916 	blt	r2,r3,800d6c <pgmread+0x3a0>

    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);

    for (i = 0; i < (*h); i++) {
  800dc8:	e0bfb617 	ldw	r2,-296(fp)
  800dcc:	10800044 	addi	r2,r2,1
  800dd0:	e0bfb615 	stw	r2,-296(fp)
  800dd4:	e0bffe17 	ldw	r2,-8(fp)
  800dd8:	10c00017 	ldw	r3,0(r2)
  800ddc:	e0bfb617 	ldw	r2,-296(fp)
  800de0:	10ffe016 	blt	r2,r3,800d64 <pgmread+0x398>
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }

  fclose(file);
  800de4:	e13fb917 	ldw	r4,-284(fp)
  800de8:	0802e240 	call	802e24 <fclose>
  return (data);
  800dec:	e0bfb417 	ldw	r2,-304(fp)
  800df0:	e0bfff15 	stw	r2,-4(fp)
  800df4:	e0bfff17 	ldw	r2,-4(fp)
}
  800df8:	e037883a 	mov	sp,fp
  800dfc:	dfc00217 	ldw	ra,8(sp)
  800e00:	df000117 	ldw	fp,4(sp)
  800e04:	dc000017 	ldw	r16,0(sp)
  800e08:	dec00304 	addi	sp,sp,12
  800e0c:	f800283a 	ret

00800e10 <pgmwrite>:
 *
 * NOTE: this function assumes input bufefr "data" is in column dominant format.
 */

int pgmwrite(char* filename, int w, int h, unsigned char** data,
             char* comment_string, int binsave) {
  800e10:	deffb104 	addi	sp,sp,-316
  800e14:	dfc04e15 	stw	ra,312(sp)
  800e18:	df004d15 	stw	fp,308(sp)
  800e1c:	df004d04 	addi	fp,sp,308
  800e20:	e13ffb15 	stw	r4,-20(fp)
  800e24:	e17ffc15 	stw	r5,-16(fp)
  800e28:	e1bffd15 	stw	r6,-12(fp)
  800e2c:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  800e30:	e13ffb17 	ldw	r4,-20(fp)
  800e34:	01402074 	movhi	r5,129
  800e38:	29537004 	addi	r5,r5,19904
  800e3c:	08036e40 	call	8036e4 <fopen>
  800e40:	e0bfba15 	stw	r2,-280(fp)
  800e44:	e0bfba17 	ldw	r2,-280(fp)
  800e48:	1004c03a 	cmpne	r2,r2,zero
  800e4c:	1000061e 	bne	r2,zero,800e68 <pgmwrite+0x58>
    printf("ERROR: file open failed\n");
  800e50:	01002074 	movhi	r4,129
  800e54:	21133404 	addi	r4,r4,19664
  800e58:	08052400 	call	805240 <puts>
    return (-1);
  800e5c:	00bfffc4 	movi	r2,-1
  800e60:	e0bfff15 	stw	r2,-4(fp)
  800e64:	0000b106 	br	80112c <pgmwrite+0x31c>
  }

  if (binsave == 1)
  800e68:	e0800317 	ldw	r2,12(fp)
  800e6c:	10800058 	cmpnei	r2,r2,1
  800e70:	1000071e 	bne	r2,zero,800e90 <pgmwrite+0x80>
    fprintf(file, "P5\n");
  800e74:	01002074 	movhi	r4,129
  800e78:	21137104 	addi	r4,r4,19908
  800e7c:	01400044 	movi	r5,1
  800e80:	018000c4 	movi	r6,3
  800e84:	e1ffba17 	ldw	r7,-280(fp)
  800e88:	08045580 	call	804558 <fwrite>
  800e8c:	00000606 	br	800ea8 <pgmwrite+0x98>
  else
    fprintf(file, "P2\n");
  800e90:	01002074 	movhi	r4,129
  800e94:	21137204 	addi	r4,r4,19912
  800e98:	01400044 	movi	r5,1
  800e9c:	018000c4 	movi	r6,3
  800ea0:	e1ffba17 	ldw	r7,-280(fp)
  800ea4:	08045580 	call	804558 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  800ea8:	e0800217 	ldw	r2,8(fp)
  800eac:	1005003a 	cmpeq	r2,r2,zero
  800eb0:	1000051e 	bne	r2,zero,800ec8 <pgmwrite+0xb8>
  800eb4:	e13fba17 	ldw	r4,-280(fp)
  800eb8:	01402074 	movhi	r5,129
  800ebc:	29537304 	addi	r5,r5,19916
  800ec0:	e1800217 	ldw	r6,8(fp)
  800ec4:	08037000 	call	803700 <fprintf>

  fprintf(file, "%d %d \n", w, h);
  800ec8:	e13fba17 	ldw	r4,-280(fp)
  800ecc:	01402074 	movhi	r5,129
  800ed0:	29537504 	addi	r5,r5,19924
  800ed4:	e1bffc17 	ldw	r6,-16(fp)
  800ed8:	e1fffd17 	ldw	r7,-12(fp)
  800edc:	08037000 	call	803700 <fprintf>

  maxval = 0;
  800ee0:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < w; i++)
  800ee4:	e03fb615 	stw	zero,-296(fp)
  800ee8:	00002406 	br	800f7c <pgmwrite+0x16c>
    for (j = 0; j < h; j++)
  800eec:	e03fb515 	stw	zero,-300(fp)
  800ef0:	00001c06 	br	800f64 <pgmwrite+0x154>
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];
  800ef4:	e0bfb617 	ldw	r2,-296(fp)
  800ef8:	1085883a 	add	r2,r2,r2
  800efc:	1085883a 	add	r2,r2,r2
  800f00:	1007883a 	mov	r3,r2
  800f04:	e0bffe17 	ldw	r2,-8(fp)
  800f08:	1885883a 	add	r2,r3,r2
  800f0c:	10c00017 	ldw	r3,0(r2)
  800f10:	e0bfb517 	ldw	r2,-300(fp)
  800f14:	1885883a 	add	r2,r3,r2
  800f18:	10800003 	ldbu	r2,0(r2)
  800f1c:	10c03fcc 	andi	r3,r2,255
  800f20:	e0bfb917 	ldw	r2,-284(fp)
  800f24:	10c00c0e 	bge	r2,r3,800f58 <pgmwrite+0x148>
  800f28:	e0bfb617 	ldw	r2,-296(fp)
  800f2c:	1085883a 	add	r2,r2,r2
  800f30:	1085883a 	add	r2,r2,r2
  800f34:	1007883a 	mov	r3,r2
  800f38:	e0bffe17 	ldw	r2,-8(fp)
  800f3c:	1885883a 	add	r2,r3,r2
  800f40:	10c00017 	ldw	r3,0(r2)
  800f44:	e0bfb517 	ldw	r2,-300(fp)
  800f48:	1885883a 	add	r2,r3,r2
  800f4c:	10800003 	ldbu	r2,0(r2)
  800f50:	10803fcc 	andi	r2,r2,255
  800f54:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
    for (j = 0; j < h; j++)
  800f58:	e0bfb517 	ldw	r2,-300(fp)
  800f5c:	10800044 	addi	r2,r2,1
  800f60:	e0bfb515 	stw	r2,-300(fp)
  800f64:	e0ffb517 	ldw	r3,-300(fp)
  800f68:	e0bffd17 	ldw	r2,-12(fp)
  800f6c:	18bfe116 	blt	r3,r2,800ef4 <pgmwrite+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", w, h);

  maxval = 0;
  for (i = 0; i < w; i++)
  800f70:	e0bfb617 	ldw	r2,-296(fp)
  800f74:	10800044 	addi	r2,r2,1
  800f78:	e0bfb615 	stw	r2,-296(fp)
  800f7c:	e0ffb617 	ldw	r3,-296(fp)
  800f80:	e0bffc17 	ldw	r2,-16(fp)
  800f84:	18bfd916 	blt	r3,r2,800eec <pgmwrite+0xdc>
    for (j = 0; j < h; j++)
      if ((int)data[i][j] > maxval) maxval = (int)data[i][j];

  fprintf(file, "%d \n", maxval);
  800f88:	e13fba17 	ldw	r4,-280(fp)
  800f8c:	01402074 	movhi	r5,129
  800f90:	29537704 	addi	r5,r5,19932
  800f94:	e1bfb917 	ldw	r6,-284(fp)
  800f98:	08037000 	call	803700 <fprintf>

  if (binsave == 1) {
  800f9c:	e0800317 	ldw	r2,12(fp)
  800fa0:	10800058 	cmpnei	r2,r2,1
  800fa4:	10003b1e 	bne	r2,zero,801094 <pgmwrite+0x284>
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));
  800fa8:	e13ffc17 	ldw	r4,-16(fp)
  800fac:	e17ffd17 	ldw	r5,-12(fp)
  800fb0:	08026a00 	call	8026a0 <__mulsi3>
  800fb4:	1009883a 	mov	r4,r2
  800fb8:	01400044 	movi	r5,1
  800fbc:	0802ba40 	call	802ba4 <calloc>
  800fc0:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < w; i++)
  800fc4:	e03fb615 	stw	zero,-296(fp)
  800fc8:	00001f06 	br	801048 <pgmwrite+0x238>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];
  800fcc:	e03fb515 	stw	zero,-300(fp)
  800fd0:	00001706 	br	801030 <pgmwrite+0x220>
  800fd4:	e13fb517 	ldw	r4,-300(fp)
  800fd8:	e17ffc17 	ldw	r5,-16(fp)
  800fdc:	08026a00 	call	8026a0 <__mulsi3>
  800fe0:	1007883a 	mov	r3,r2
  800fe4:	e0bfb617 	ldw	r2,-296(fp)
  800fe8:	1885883a 	add	r2,r3,r2
  800fec:	1007883a 	mov	r3,r2
  800ff0:	e0bfb317 	ldw	r2,-308(fp)
  800ff4:	1889883a 	add	r4,r3,r2
  800ff8:	e0bfb617 	ldw	r2,-296(fp)
  800ffc:	1085883a 	add	r2,r2,r2
  801000:	1085883a 	add	r2,r2,r2
  801004:	1007883a 	mov	r3,r2
  801008:	e0bffe17 	ldw	r2,-8(fp)
  80100c:	1885883a 	add	r2,r3,r2
  801010:	10c00017 	ldw	r3,0(r2)
  801014:	e0bfb517 	ldw	r2,-300(fp)
  801018:	1885883a 	add	r2,r3,r2
  80101c:	10800003 	ldbu	r2,0(r2)
  801020:	20800005 	stb	r2,0(r4)
  801024:	e0bfb517 	ldw	r2,-300(fp)
  801028:	10800044 	addi	r2,r2,1
  80102c:	e0bfb515 	stw	r2,-300(fp)
  801030:	e0ffb517 	ldw	r3,-300(fp)
  801034:	e0bffd17 	ldw	r2,-12(fp)
  801038:	18bfe616 	blt	r3,r2,800fd4 <pgmwrite+0x1c4>
  fprintf(file, "%d \n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(w * h, sizeof(unsigned char));

    for (i = 0; i < w; i++)
  80103c:	e0bfb617 	ldw	r2,-296(fp)
  801040:	10800044 	addi	r2,r2,1
  801044:	e0bfb615 	stw	r2,-296(fp)
  801048:	e0ffb617 	ldw	r3,-296(fp)
  80104c:	e0bffc17 	ldw	r2,-16(fp)
  801050:	18bfde16 	blt	r3,r2,800fcc <pgmwrite+0x1bc>
      for (j = 0; j < h; j++) temp[(j * w) + i] = (unsigned char)data[i][j];

    nread = fwrite((void*)temp, sizeof(unsigned char), (w) * (h), file);
  801054:	e13ffc17 	ldw	r4,-16(fp)
  801058:	e17ffd17 	ldw	r5,-12(fp)
  80105c:	08026a00 	call	8026a0 <__mulsi3>
  801060:	100d883a 	mov	r6,r2
  801064:	e13fb317 	ldw	r4,-308(fp)
  801068:	01400044 	movi	r5,1
  80106c:	e1ffba17 	ldw	r7,-280(fp)
  801070:	08045580 	call	804558 <fwrite>
  801074:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801078:	01002074 	movhi	r4,129
  80107c:	21137904 	addi	r4,r4,19940
  801080:	e17ffb17 	ldw	r5,-20(fp)
  801084:	08051280 	call	805128 <printf>
    free(temp);
  801088:	e13fb317 	ldw	r4,-308(fp)
  80108c:	080472c0 	call	80472c <free>
  801090:	00002306 	br	801120 <pgmwrite+0x310>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  801094:	01002074 	movhi	r4,129
  801098:	21138004 	addi	r4,r4,19968
  80109c:	e17ffb17 	ldw	r5,-20(fp)
  8010a0:	08051280 	call	805128 <printf>

    for (i = 0; i < h; i++)
  8010a4:	e03fb615 	stw	zero,-296(fp)
  8010a8:	00001a06 	br	801114 <pgmwrite+0x304>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  8010ac:	e03fb515 	stw	zero,-300(fp)
  8010b0:	00001206 	br	8010fc <pgmwrite+0x2ec>
  8010b4:	e0bfb517 	ldw	r2,-300(fp)
  8010b8:	1085883a 	add	r2,r2,r2
  8010bc:	1085883a 	add	r2,r2,r2
  8010c0:	1007883a 	mov	r3,r2
  8010c4:	e0bffe17 	ldw	r2,-8(fp)
  8010c8:	1885883a 	add	r2,r3,r2
  8010cc:	10c00017 	ldw	r3,0(r2)
  8010d0:	e0bfb617 	ldw	r2,-296(fp)
  8010d4:	1885883a 	add	r2,r3,r2
  8010d8:	10800003 	ldbu	r2,0(r2)
  8010dc:	11803fcc 	andi	r6,r2,255
  8010e0:	e13fba17 	ldw	r4,-280(fp)
  8010e4:	01402074 	movhi	r5,129
  8010e8:	29538704 	addi	r5,r5,19996
  8010ec:	08037000 	call	803700 <fprintf>
  8010f0:	e0bfb517 	ldw	r2,-300(fp)
  8010f4:	10800044 	addi	r2,r2,1
  8010f8:	e0bfb515 	stw	r2,-300(fp)
  8010fc:	e0ffb517 	ldw	r3,-300(fp)
  801100:	e0bffc17 	ldw	r2,-16(fp)
  801104:	18bfeb16 	blt	r3,r2,8010b4 <pgmwrite+0x2a4>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (i = 0; i < h; i++)
  801108:	e0bfb617 	ldw	r2,-296(fp)
  80110c:	10800044 	addi	r2,r2,1
  801110:	e0bfb615 	stw	r2,-296(fp)
  801114:	e0ffb617 	ldw	r3,-296(fp)
  801118:	e0bffd17 	ldw	r2,-12(fp)
  80111c:	18bfe316 	blt	r3,r2,8010ac <pgmwrite+0x29c>
      for (j = 0; j < w; j++) fprintf(file, "%d ", (int)data[j][i]);
  }

  fclose(file);
  801120:	e13fba17 	ldw	r4,-280(fp)
  801124:	0802e240 	call	802e24 <fclose>
  return (0);
  801128:	e03fff15 	stw	zero,-4(fp)
  80112c:	e0bfff17 	ldw	r2,-4(fp)
}
  801130:	e037883a 	mov	sp,fp
  801134:	dfc00117 	ldw	ra,4(sp)
  801138:	df000017 	ldw	fp,0(sp)
  80113c:	dec00204 	addi	sp,sp,8
  801140:	f800283a 	ret

00801144 <pgmread2>:
 * the returned value.  A NULL is returned in the case of failure to
 * correctly read the file.
 *
 * NOTE: the image buffer returned is in row dominant format
 */
unsigned char** pgmread2(char* filename, int* row, int* col) {
  801144:	deffae04 	addi	sp,sp,-328
  801148:	dfc05115 	stw	ra,324(sp)
  80114c:	df005015 	stw	fp,320(sp)
  801150:	dc004f15 	stw	r16,316(sp)
  801154:	df004f04 	addi	fp,sp,316
  801158:	e13ffc15 	stw	r4,-16(fp)
  80115c:	e17ffd15 	stw	r5,-12(fp)
  801160:	e1bffe15 	stw	r6,-8(fp)
  char firstchar;
  int count;
  unsigned char** data;
  unsigned char* bindata;

  if ((file = fopen(filename, "r")) == NULL) {
  801164:	e13ffc17 	ldw	r4,-16(fp)
  801168:	01402074 	movhi	r5,129
  80116c:	29533304 	addi	r5,r5,19660
  801170:	08036e40 	call	8036e4 <fopen>
  801174:	e0bfb915 	stw	r2,-284(fp)
  801178:	e0bfb917 	ldw	r2,-284(fp)
  80117c:	1004c03a 	cmpne	r2,r2,zero
  801180:	10000b1e 	bne	r2,zero,8011b0 <pgmread2+0x6c>
    printf("ERROR: file open failed\n");
  801184:	01002074 	movhi	r4,129
  801188:	21133404 	addi	r4,r4,19664
  80118c:	08052400 	call	805240 <puts>
    *row = *col = 0;
  801190:	e0bffe17 	ldw	r2,-8(fp)
  801194:	10000015 	stw	zero,0(r2)
  801198:	e0bffe17 	ldw	r2,-8(fp)
  80119c:	10c00017 	ldw	r3,0(r2)
  8011a0:	e0bffd17 	ldw	r2,-12(fp)
  8011a4:	10c00015 	stw	r3,0(r2)
    return (NULL);
  8011a8:	e03fff15 	stw	zero,-4(fp)
  8011ac:	00010306 	br	8015bc <pgmread2+0x478>
  }
  count = readToWhitespace(file, line, 2);
  8011b0:	e17fba04 	addi	r5,fp,-280
  8011b4:	e13fb917 	ldw	r4,-284(fp)
  8011b8:	01800084 	movi	r6,2
  8011bc:	08007400 	call	800740 <readToWhitespace>
  8011c0:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';  // Solo por precauci�n
  8011c4:	e0ffb317 	ldw	r3,-308(fp)
  8011c8:	e0bfba04 	addi	r2,fp,-280
  8011cc:	10c5883a 	add	r2,r2,r3
  8011d0:	10000005 	stb	zero,0(r2)

  if (strncmp(line, "P5", 2)) {
  8011d4:	e13fba04 	addi	r4,fp,-280
  8011d8:	01402074 	movhi	r5,129
  8011dc:	29534304 	addi	r5,r5,19724
  8011e0:	01800084 	movi	r6,2
  8011e4:	08057d80 	call	8057d8 <strncmp>
  8011e8:	1005003a 	cmpeq	r2,r2,zero
  8011ec:	1000141e 	bne	r2,zero,801240 <pgmread2+0xfc>
    if (strncmp(line, "P2", 2)) {
  8011f0:	e13fba04 	addi	r4,fp,-280
  8011f4:	01402074 	movhi	r5,129
  8011f8:	29534404 	addi	r5,r5,19728
  8011fc:	01800084 	movi	r6,2
  801200:	08057d80 	call	8057d8 <strncmp>
  801204:	1005003a 	cmpeq	r2,r2,zero
  801208:	10000b1e 	bne	r2,zero,801238 <pgmread2+0xf4>
      printf("pgm read: not a pgm file\n");
  80120c:	01002074 	movhi	r4,129
  801210:	21134504 	addi	r4,r4,19732
  801214:	08052400 	call	805240 <puts>
      *row = *col = 0;
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10000015 	stw	zero,0(r2)
  801220:	e0bffe17 	ldw	r2,-8(fp)
  801224:	10c00017 	ldw	r3,0(r2)
  801228:	e0bffd17 	ldw	r2,-12(fp)
  80122c:	10c00015 	stw	r3,0(r2)
      return (NULL);
  801230:	e03fff15 	stw	zero,-4(fp)
  801234:	0000e106 	br	8015bc <pgmread2+0x478>
    } else {
      binary = 0;  // fichero formato texto
  801238:	e03fb815 	stw	zero,-288(fp)
  80123c:	00000206 	br	801248 <pgmread2+0x104>
    }
  } else {
    binary = 1;  // fichero con contenidos en binario
  801240:	00800044 	movi	r2,1
  801244:	e0bfb815 	stw	r2,-288(fp)
  }

  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801248:	e13fb917 	ldw	r4,-284(fp)
  80124c:	08008040 	call	800804 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  801250:	e17fba04 	addi	r5,fp,-280
  801254:	e13fb917 	ldw	r4,-284(fp)
  801258:	01803fc4 	movi	r6,255
  80125c:	08007400 	call	800740 <readToWhitespace>
  801260:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  801264:	e0ffb317 	ldw	r3,-308(fp)
  801268:	e0bfba04 	addi	r2,fp,-280
  80126c:	10c5883a 	add	r2,r2,r3
  801270:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", col);
  801274:	e13fba04 	addi	r4,fp,-280
  801278:	01402074 	movhi	r5,129
  80127c:	29534c04 	addi	r5,r5,19760
  801280:	e1bffe17 	ldw	r6,-8(fp)
  801284:	08055940 	call	805594 <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  801288:	e13fb917 	ldw	r4,-284(fp)
  80128c:	08008040 	call	800804 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  801290:	e17fba04 	addi	r5,fp,-280
  801294:	e13fb917 	ldw	r4,-284(fp)
  801298:	01803fc4 	movi	r6,255
  80129c:	08007400 	call	800740 <readToWhitespace>
  8012a0:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8012a4:	e0ffb317 	ldw	r3,-308(fp)
  8012a8:	e0bfba04 	addi	r2,fp,-280
  8012ac:	10c5883a 	add	r2,r2,r3
  8012b0:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", row);
  8012b4:	e13fba04 	addi	r4,fp,-280
  8012b8:	01402074 	movhi	r5,129
  8012bc:	29534c04 	addi	r5,r5,19760
  8012c0:	e1bffd17 	ldw	r6,-12(fp)
  8012c4:	08055940 	call	805594 <sscanf>
  eatCommsWhitespaces(file);  // Elim. comentarios y whitespace
  8012c8:	e13fb917 	ldw	r4,-284(fp)
  8012cc:	08008040 	call	800804 <eatCommsWhitespaces>
  count = readToWhitespace(file, line, 255);
  8012d0:	e17fba04 	addi	r5,fp,-280
  8012d4:	e13fb917 	ldw	r4,-284(fp)
  8012d8:	01803fc4 	movi	r6,255
  8012dc:	08007400 	call	800740 <readToWhitespace>
  8012e0:	e0bfb315 	stw	r2,-308(fp)
  line[count] = '\0';
  8012e4:	e0ffb317 	ldw	r3,-308(fp)
  8012e8:	e0bfba04 	addi	r2,fp,-280
  8012ec:	10c5883a 	add	r2,r2,r3
  8012f0:	10000005 	stb	zero,0(r2)
  sscanf(line, "%d", &maxval);
  8012f4:	e13fba04 	addi	r4,fp,-280
  8012f8:	e1bffa04 	addi	r6,fp,-24
  8012fc:	01402074 	movhi	r5,129
  801300:	29534c04 	addi	r5,r5,19760
  801304:	08055940 	call	805594 <sscanf>
  printf("row = %d\tcol = %d\tmaxval = %d\n", *row, *col, maxval);
  801308:	e0bffd17 	ldw	r2,-12(fp)
  80130c:	11400017 	ldw	r5,0(r2)
  801310:	e0bffe17 	ldw	r2,-8(fp)
  801314:	11800017 	ldw	r6,0(r2)
  801318:	e1fffa17 	ldw	r7,-24(fp)
  80131c:	01002074 	movhi	r4,129
  801320:	21138804 	addi	r4,r4,20000
  801324:	08051280 	call	805128 <printf>
  eatWhitespaces(file, 1);  // Eliminamos exactamente un caracter whitespace
  801328:	e13fb917 	ldw	r4,-284(fp)
  80132c:	01400044 	movi	r5,1
  801330:	08008ac0 	call	8008ac <eatWhitespaces>

  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
  801334:	e0bffd17 	ldw	r2,-12(fp)
  801338:	10800017 	ldw	r2,0(r2)
  80133c:	1009883a 	mov	r4,r2
  801340:	01400104 	movi	r5,4
  801344:	0802ba40 	call	802ba4 <calloc>
  801348:	e0bfb215 	stw	r2,-312(fp)
  80134c:	e0bfb217 	ldw	r2,-312(fp)
  801350:	1004c03a 	cmpne	r2,r2,zero
  801354:	1000051e 	bne	r2,zero,80136c <pgmread2+0x228>
      NULL) {
    printf("Memory allocation error. Exit program\n");
  801358:	01002074 	movhi	r4,129
  80135c:	21134d04 	addi	r4,r4,19764
  801360:	08052400 	call	805240 <puts>
    exit(1);
  801364:	01000044 	movi	r4,1
  801368:	0802cdc0 	call	802cdc <exit>
  }
  for (j = 0; j < (*row); j++) {
  80136c:	e03fb515 	stw	zero,-300(fp)
  801370:	00001706 	br	8013d0 <pgmread2+0x28c>
    if ((data[j] = (unsigned char*)calloc((*col), sizeof(unsigned char))) ==
  801374:	e0bfb517 	ldw	r2,-300(fp)
  801378:	1085883a 	add	r2,r2,r2
  80137c:	1085883a 	add	r2,r2,r2
  801380:	1007883a 	mov	r3,r2
  801384:	e0bfb217 	ldw	r2,-312(fp)
  801388:	18a1883a 	add	r16,r3,r2
  80138c:	e0bffe17 	ldw	r2,-8(fp)
  801390:	10800017 	ldw	r2,0(r2)
  801394:	1009883a 	mov	r4,r2
  801398:	01400044 	movi	r5,1
  80139c:	0802ba40 	call	802ba4 <calloc>
  8013a0:	80800015 	stw	r2,0(r16)
  8013a4:	80800017 	ldw	r2,0(r16)
  8013a8:	1004c03a 	cmpne	r2,r2,zero
  8013ac:	1000051e 	bne	r2,zero,8013c4 <pgmread2+0x280>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  8013b0:	01002074 	movhi	r4,129
  8013b4:	21134d04 	addi	r4,r4,19764
  8013b8:	08052400 	call	805240 <puts>
      exit(1);
  8013bc:	01000044 	movi	r4,1
  8013c0:	0802cdc0 	call	802cdc <exit>
  if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) ==
      NULL) {
    printf("Memory allocation error. Exit program\n");
    exit(1);
  }
  for (j = 0; j < (*row); j++) {
  8013c4:	e0bfb517 	ldw	r2,-300(fp)
  8013c8:	10800044 	addi	r2,r2,1
  8013cc:	e0bfb515 	stw	r2,-300(fp)
  8013d0:	e0bffd17 	ldw	r2,-12(fp)
  8013d4:	10c00017 	ldw	r3,0(r2)
  8013d8:	e0bfb517 	ldw	r2,-300(fp)
  8013dc:	10ffe516 	blt	r2,r3,801374 <pgmread2+0x230>
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(1);
    }
  }
  if (binary) {
  8013e0:	e0bfb817 	ldw	r2,-288(fp)
  8013e4:	1005003a 	cmpeq	r2,r2,zero
  8013e8:	10004a1e 	bne	r2,zero,801514 <pgmread2+0x3d0>
    if ((bindata = (unsigned char*)calloc((*row) * (*col),
  8013ec:	e0bffd17 	ldw	r2,-12(fp)
  8013f0:	11000017 	ldw	r4,0(r2)
  8013f4:	e0bffe17 	ldw	r2,-8(fp)
  8013f8:	11400017 	ldw	r5,0(r2)
  8013fc:	08026a00 	call	8026a0 <__mulsi3>
  801400:	1009883a 	mov	r4,r2
  801404:	01400044 	movi	r5,1
  801408:	0802ba40 	call	802ba4 <calloc>
  80140c:	e0bfb115 	stw	r2,-316(fp)
  801410:	e0bfb117 	ldw	r2,-316(fp)
  801414:	1004c03a 	cmpne	r2,r2,zero
  801418:	1000051e 	bne	r2,zero,801430 <pgmread2+0x2ec>
                                          sizeof(unsigned char))) == NULL) {
      printf("Memory allocation error on bindata. Exit program\n");
  80141c:	01002074 	movhi	r4,129
  801420:	21135704 	addi	r4,r4,19804
  801424:	08052400 	call	805240 <puts>
      exit(1);
  801428:	01000044 	movi	r4,1
  80142c:	0802cdc0 	call	802cdc <exit>
    }
    printf("Reading %s as binary.\n", filename);
  801430:	01002074 	movhi	r4,129
  801434:	21136404 	addi	r4,r4,19856
  801438:	e17ffc17 	ldw	r5,-16(fp)
  80143c:	08051280 	call	805128 <printf>
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
  801440:	e0bffd17 	ldw	r2,-12(fp)
  801444:	11000017 	ldw	r4,0(r2)
  801448:	e0bffe17 	ldw	r2,-8(fp)
  80144c:	11400017 	ldw	r5,0(r2)
  801450:	08026a00 	call	8026a0 <__mulsi3>
  801454:	100d883a 	mov	r6,r2
  801458:	e13fb117 	ldw	r4,-316(fp)
  80145c:	01400044 	movi	r5,1
  801460:	e1ffb917 	ldw	r7,-284(fp)
  801464:	080396c0 	call	80396c <fread>
  801468:	e0bfb715 	stw	r2,-292(fp)
    for (i = 0; i < (*row); i++) {
  80146c:	e03fb615 	stw	zero,-296(fp)
  801470:	00002106 	br	8014f8 <pgmread2+0x3b4>
      for (j = 0; j < (*col); j++) {
  801474:	e03fb515 	stw	zero,-300(fp)
  801478:	00001806 	br	8014dc <pgmread2+0x398>
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
  80147c:	e0bfb617 	ldw	r2,-296(fp)
  801480:	1085883a 	add	r2,r2,r2
  801484:	1085883a 	add	r2,r2,r2
  801488:	1007883a 	mov	r3,r2
  80148c:	e0bfb217 	ldw	r2,-312(fp)
  801490:	1885883a 	add	r2,r3,r2
  801494:	10c00017 	ldw	r3,0(r2)
  801498:	e0bfb517 	ldw	r2,-300(fp)
  80149c:	18a1883a 	add	r16,r3,r2
  8014a0:	e0bffe17 	ldw	r2,-8(fp)
  8014a4:	11000017 	ldw	r4,0(r2)
  8014a8:	e17fb617 	ldw	r5,-296(fp)
  8014ac:	08026a00 	call	8026a0 <__mulsi3>
  8014b0:	1007883a 	mov	r3,r2
  8014b4:	e0bfb517 	ldw	r2,-300(fp)
  8014b8:	1885883a 	add	r2,r3,r2
  8014bc:	1007883a 	mov	r3,r2
  8014c0:	e0bfb117 	ldw	r2,-316(fp)
  8014c4:	1885883a 	add	r2,r3,r2
  8014c8:	10800003 	ldbu	r2,0(r2)
  8014cc:	80800005 	stb	r2,0(r16)
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
      for (j = 0; j < (*col); j++) {
  8014d0:	e0bfb517 	ldw	r2,-300(fp)
  8014d4:	10800044 	addi	r2,r2,1
  8014d8:	e0bfb515 	stw	r2,-300(fp)
  8014dc:	e0bffe17 	ldw	r2,-8(fp)
  8014e0:	10c00017 	ldw	r3,0(r2)
  8014e4:	e0bfb517 	ldw	r2,-300(fp)
  8014e8:	10ffe416 	blt	r2,r3,80147c <pgmread2+0x338>
      printf("Memory allocation error on bindata. Exit program\n");
      exit(1);
    }
    printf("Reading %s as binary.\n", filename);
    nread = fread((void*)bindata, sizeof(unsigned char), (*row) * (*col), file);
    for (i = 0; i < (*row); i++) {
  8014ec:	e0bfb617 	ldw	r2,-296(fp)
  8014f0:	10800044 	addi	r2,r2,1
  8014f4:	e0bfb615 	stw	r2,-296(fp)
  8014f8:	e0bffd17 	ldw	r2,-12(fp)
  8014fc:	10c00017 	ldw	r3,0(r2)
  801500:	e0bfb617 	ldw	r2,-296(fp)
  801504:	10ffdb16 	blt	r2,r3,801474 <pgmread2+0x330>
      for (j = 0; j < (*col); j++) {
        data[i][j] = (unsigned char)bindata[(i * (*col)) + j];
      }
    }
    free(bindata);
  801508:	e13fb117 	ldw	r4,-316(fp)
  80150c:	080472c0 	call	80472c <free>
  801510:	00002606 	br	8015ac <pgmread2+0x468>
  } else {
    printf("Reading %s as ascii.\n", filename);
  801514:	01002074 	movhi	r4,129
  801518:	21136a04 	addi	r4,r4,19880
  80151c:	e17ffc17 	ldw	r5,-16(fp)
  801520:	08051280 	call	805128 <printf>
    for (j = 0; j < (*row); j++) {
  801524:	e03fb515 	stw	zero,-300(fp)
  801528:	00001c06 	br	80159c <pgmread2+0x458>
      for (i = 0; i < (*col); i++) {
  80152c:	e03fb615 	stw	zero,-296(fp)
  801530:	00001306 	br	801580 <pgmread2+0x43c>
        fscanf(file, "%d", &int_tmp);
  801534:	e1bffb04 	addi	r6,fp,-20
  801538:	e13fb917 	ldw	r4,-284(fp)
  80153c:	01402074 	movhi	r5,129
  801540:	29534c04 	addi	r5,r5,19760
  801544:	0803e140 	call	803e14 <fscanf>
        data[j][i] = (unsigned char)int_tmp;
  801548:	e0bfb517 	ldw	r2,-300(fp)
  80154c:	1085883a 	add	r2,r2,r2
  801550:	1085883a 	add	r2,r2,r2
  801554:	1007883a 	mov	r3,r2
  801558:	e0bfb217 	ldw	r2,-312(fp)
  80155c:	1885883a 	add	r2,r3,r2
  801560:	10c00017 	ldw	r3,0(r2)
  801564:	e0bfb617 	ldw	r2,-296(fp)
  801568:	1887883a 	add	r3,r3,r2
  80156c:	e0bffb17 	ldw	r2,-20(fp)
  801570:	18800005 	stb	r2,0(r3)
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
      for (i = 0; i < (*col); i++) {
  801574:	e0bfb617 	ldw	r2,-296(fp)
  801578:	10800044 	addi	r2,r2,1
  80157c:	e0bfb615 	stw	r2,-296(fp)
  801580:	e0bffe17 	ldw	r2,-8(fp)
  801584:	10c00017 	ldw	r3,0(r2)
  801588:	e0bfb617 	ldw	r2,-296(fp)
  80158c:	10ffe916 	blt	r2,r3,801534 <pgmread2+0x3f0>
      }
    }
    free(bindata);
  } else {
    printf("Reading %s as ascii.\n", filename);
    for (j = 0; j < (*row); j++) {
  801590:	e0bfb517 	ldw	r2,-300(fp)
  801594:	10800044 	addi	r2,r2,1
  801598:	e0bfb515 	stw	r2,-300(fp)
  80159c:	e0bffd17 	ldw	r2,-12(fp)
  8015a0:	10c00017 	ldw	r3,0(r2)
  8015a4:	e0bfb517 	ldw	r2,-300(fp)
  8015a8:	10ffe016 	blt	r2,r3,80152c <pgmread2+0x3e8>
        fscanf(file, "%d", &int_tmp);
        data[j][i] = (unsigned char)int_tmp;
      }
    }
  }
  fclose(file);
  8015ac:	e13fb917 	ldw	r4,-284(fp)
  8015b0:	0802e240 	call	802e24 <fclose>
  return (data);
  8015b4:	e0bfb217 	ldw	r2,-312(fp)
  8015b8:	e0bfff15 	stw	r2,-4(fp)
  8015bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8015c0:	e037883a 	mov	sp,fp
  8015c4:	dfc00217 	ldw	ra,8(sp)
  8015c8:	df000117 	ldw	fp,4(sp)
  8015cc:	dc000017 	ldw	r16,0(sp)
  8015d0:	dec00304 	addi	sp,sp,12
  8015d4:	f800283a 	ret

008015d8 <pgmwrite2>:
 *
 * NOTE: this function assumes input bufefr "data" is in row dominant format.
 */

int pgmwrite2(char* filename, int row, int col, unsigned char** data,
              char* comment_string, int binsave) {
  8015d8:	deffb104 	addi	sp,sp,-316
  8015dc:	dfc04e15 	stw	ra,312(sp)
  8015e0:	df004d15 	stw	fp,308(sp)
  8015e4:	df004d04 	addi	fp,sp,308
  8015e8:	e13ffb15 	stw	r4,-20(fp)
  8015ec:	e17ffc15 	stw	r5,-16(fp)
  8015f0:	e1bffd15 	stw	r6,-12(fp)
  8015f4:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  8015f8:	e13ffb17 	ldw	r4,-20(fp)
  8015fc:	01402074 	movhi	r5,129
  801600:	29537004 	addi	r5,r5,19904
  801604:	08036e40 	call	8036e4 <fopen>
  801608:	e0bfba15 	stw	r2,-280(fp)
  80160c:	e0bfba17 	ldw	r2,-280(fp)
  801610:	1004c03a 	cmpne	r2,r2,zero
  801614:	1000061e 	bne	r2,zero,801630 <pgmwrite2+0x58>
    printf("ERROR: file open failed\n");
  801618:	01002074 	movhi	r4,129
  80161c:	21133404 	addi	r4,r4,19664
  801620:	08052400 	call	805240 <puts>
    return (-1);
  801624:	00bfffc4 	movi	r2,-1
  801628:	e0bfff15 	stw	r2,-4(fp)
  80162c:	0000b906 	br	801914 <pgmwrite2+0x33c>
  }
  if (binsave == 1) {
  801630:	e0800317 	ldw	r2,12(fp)
  801634:	10800058 	cmpnei	r2,r2,1
  801638:	1000071e 	bne	r2,zero,801658 <pgmwrite2+0x80>
    fprintf(file, "P5\n");
  80163c:	01002074 	movhi	r4,129
  801640:	21137104 	addi	r4,r4,19908
  801644:	01400044 	movi	r5,1
  801648:	018000c4 	movi	r6,3
  80164c:	e1ffba17 	ldw	r7,-280(fp)
  801650:	08045580 	call	804558 <fwrite>
  801654:	00000606 	br	801670 <pgmwrite2+0x98>
  } else {
    fprintf(file, "P2\n");
  801658:	01002074 	movhi	r4,129
  80165c:	21137204 	addi	r4,r4,19912
  801660:	01400044 	movi	r5,1
  801664:	018000c4 	movi	r6,3
  801668:	e1ffba17 	ldw	r7,-280(fp)
  80166c:	08045580 	call	804558 <fwrite>
  }

  if (comment_string != NULL) {
  801670:	e0800217 	ldw	r2,8(fp)
  801674:	1005003a 	cmpeq	r2,r2,zero
  801678:	1000051e 	bne	r2,zero,801690 <pgmwrite2+0xb8>
    fprintf(file, "# %s \n", comment_string);
  80167c:	e13fba17 	ldw	r4,-280(fp)
  801680:	01402074 	movhi	r5,129
  801684:	29537304 	addi	r5,r5,19916
  801688:	e1800217 	ldw	r6,8(fp)
  80168c:	08037000 	call	803700 <fprintf>
  }
  fprintf(file, "%d %d \n", col, row);
  801690:	e13fba17 	ldw	r4,-280(fp)
  801694:	01402074 	movhi	r5,129
  801698:	29537504 	addi	r5,r5,19924
  80169c:	e1bffd17 	ldw	r6,-12(fp)
  8016a0:	e1fffc17 	ldw	r7,-16(fp)
  8016a4:	08037000 	call	803700 <fprintf>
  maxval = 0;
  8016a8:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++) {
  8016ac:	e03fb615 	stw	zero,-296(fp)
  8016b0:	00002406 	br	801744 <pgmwrite2+0x16c>
    for (j = 0; j < col; j++) {
  8016b4:	e03fb515 	stw	zero,-300(fp)
  8016b8:	00001c06 	br	80172c <pgmwrite2+0x154>
      if ((int)data[i][j] > maxval) {
  8016bc:	e0bfb617 	ldw	r2,-296(fp)
  8016c0:	1085883a 	add	r2,r2,r2
  8016c4:	1085883a 	add	r2,r2,r2
  8016c8:	1007883a 	mov	r3,r2
  8016cc:	e0bffe17 	ldw	r2,-8(fp)
  8016d0:	1885883a 	add	r2,r3,r2
  8016d4:	10c00017 	ldw	r3,0(r2)
  8016d8:	e0bfb517 	ldw	r2,-300(fp)
  8016dc:	1885883a 	add	r2,r3,r2
  8016e0:	10800003 	ldbu	r2,0(r2)
  8016e4:	10c03fcc 	andi	r3,r2,255
  8016e8:	e0bfb917 	ldw	r2,-284(fp)
  8016ec:	10c00c0e 	bge	r2,r3,801720 <pgmwrite2+0x148>
        maxval = (int)data[i][j];
  8016f0:	e0bfb617 	ldw	r2,-296(fp)
  8016f4:	1085883a 	add	r2,r2,r2
  8016f8:	1085883a 	add	r2,r2,r2
  8016fc:	1007883a 	mov	r3,r2
  801700:	e0bffe17 	ldw	r2,-8(fp)
  801704:	1885883a 	add	r2,r3,r2
  801708:	10c00017 	ldw	r3,0(r2)
  80170c:	e0bfb517 	ldw	r2,-300(fp)
  801710:	1885883a 	add	r2,r3,r2
  801714:	10800003 	ldbu	r2,0(r2)
  801718:	10803fcc 	andi	r2,r2,255
  80171c:	e0bfb915 	stw	r2,-284(fp)
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
  801720:	e0bfb517 	ldw	r2,-300(fp)
  801724:	10800044 	addi	r2,r2,1
  801728:	e0bfb515 	stw	r2,-300(fp)
  80172c:	e0ffb517 	ldw	r3,-300(fp)
  801730:	e0bffd17 	ldw	r2,-12(fp)
  801734:	18bfe116 	blt	r3,r2,8016bc <pgmwrite2+0xe4>
  if (comment_string != NULL) {
    fprintf(file, "# %s \n", comment_string);
  }
  fprintf(file, "%d %d \n", col, row);
  maxval = 0;
  for (i = 0; i < row; i++) {
  801738:	e0bfb617 	ldw	r2,-296(fp)
  80173c:	10800044 	addi	r2,r2,1
  801740:	e0bfb615 	stw	r2,-296(fp)
  801744:	e0ffb617 	ldw	r3,-296(fp)
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	18bfd916 	blt	r3,r2,8016b4 <pgmwrite2+0xdc>
      if ((int)data[i][j] > maxval) {
        maxval = (int)data[i][j];
      }
    }
  }
  fprintf(file, "%d\n", maxval);
  801750:	e13fba17 	ldw	r4,-280(fp)
  801754:	01402074 	movhi	r5,129
  801758:	29539004 	addi	r5,r5,20032
  80175c:	e1bfb917 	ldw	r6,-284(fp)
  801760:	08037000 	call	803700 <fprintf>
  if (binsave == 1) {
  801764:	e0800317 	ldw	r2,12(fp)
  801768:	10800058 	cmpnei	r2,r2,1
  80176c:	1000431e 	bne	r2,zero,80187c <pgmwrite2+0x2a4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
  801770:	e13ffc17 	ldw	r4,-16(fp)
  801774:	e17ffd17 	ldw	r5,-12(fp)
  801778:	08026a00 	call	8026a0 <__mulsi3>
  80177c:	1009883a 	mov	r4,r2
  801780:	01400044 	movi	r5,1
  801784:	0802ba40 	call	802ba4 <calloc>
  801788:	e0bfb315 	stw	r2,-308(fp)
  80178c:	e0bfb317 	ldw	r2,-308(fp)
  801790:	1004c03a 	cmpne	r2,r2,zero
  801794:	1000051e 	bne	r2,zero,8017ac <pgmwrite2+0x1d4>
        NULL) {
      printf("Memory allocation error. Exit program\n");
  801798:	01002074 	movhi	r4,129
  80179c:	21134d04 	addi	r4,r4,19764
  8017a0:	08052400 	call	805240 <puts>
      exit(-1);
  8017a4:	013fffc4 	movi	r4,-1
  8017a8:	0802cdc0 	call	802cdc <exit>
    }
    for (i = 0; i < row; i++) {
  8017ac:	e03fb615 	stw	zero,-296(fp)
  8017b0:	00001f06 	br	801830 <pgmwrite2+0x258>
      for (j = 0; j < col; j++) {
  8017b4:	e03fb515 	stw	zero,-300(fp)
  8017b8:	00001706 	br	801818 <pgmwrite2+0x240>
        temp[(i * col) + j] = (unsigned char)data[i][j];
  8017bc:	e13fb617 	ldw	r4,-296(fp)
  8017c0:	e17ffd17 	ldw	r5,-12(fp)
  8017c4:	08026a00 	call	8026a0 <__mulsi3>
  8017c8:	1007883a 	mov	r3,r2
  8017cc:	e0bfb517 	ldw	r2,-300(fp)
  8017d0:	1885883a 	add	r2,r3,r2
  8017d4:	1007883a 	mov	r3,r2
  8017d8:	e0bfb317 	ldw	r2,-308(fp)
  8017dc:	1889883a 	add	r4,r3,r2
  8017e0:	e0bfb617 	ldw	r2,-296(fp)
  8017e4:	1085883a 	add	r2,r2,r2
  8017e8:	1085883a 	add	r2,r2,r2
  8017ec:	1007883a 	mov	r3,r2
  8017f0:	e0bffe17 	ldw	r2,-8(fp)
  8017f4:	1885883a 	add	r2,r3,r2
  8017f8:	10c00017 	ldw	r3,0(r2)
  8017fc:	e0bfb517 	ldw	r2,-300(fp)
  801800:	1885883a 	add	r2,r3,r2
  801804:	10800003 	ldbu	r2,0(r2)
  801808:	20800005 	stb	r2,0(r4)
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
  80180c:	e0bfb517 	ldw	r2,-300(fp)
  801810:	10800044 	addi	r2,r2,1
  801814:	e0bfb515 	stw	r2,-300(fp)
  801818:	e0ffb517 	ldw	r3,-300(fp)
  80181c:	e0bffd17 	ldw	r2,-12(fp)
  801820:	18bfe616 	blt	r3,r2,8017bc <pgmwrite2+0x1e4>
    if ((temp = (unsigned char*)calloc(row * col, sizeof(unsigned char))) ==
        NULL) {
      printf("Memory allocation error. Exit program\n");
      exit(-1);
    }
    for (i = 0; i < row; i++) {
  801824:	e0bfb617 	ldw	r2,-296(fp)
  801828:	10800044 	addi	r2,r2,1
  80182c:	e0bfb615 	stw	r2,-296(fp)
  801830:	e0ffb617 	ldw	r3,-296(fp)
  801834:	e0bffc17 	ldw	r2,-16(fp)
  801838:	18bfde16 	blt	r3,r2,8017b4 <pgmwrite2+0x1dc>
      for (j = 0; j < col; j++) {
        temp[(i * col) + j] = (unsigned char)data[i][j];
      }
    }
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
  80183c:	e13ffc17 	ldw	r4,-16(fp)
  801840:	e17ffd17 	ldw	r5,-12(fp)
  801844:	08026a00 	call	8026a0 <__mulsi3>
  801848:	100d883a 	mov	r6,r2
  80184c:	e13fb317 	ldw	r4,-308(fp)
  801850:	01400044 	movi	r5,1
  801854:	e1ffba17 	ldw	r7,-280(fp)
  801858:	08045580 	call	804558 <fwrite>
  80185c:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801860:	01002074 	movhi	r4,129
  801864:	21137904 	addi	r4,r4,19940
  801868:	e17ffb17 	ldw	r5,-20(fp)
  80186c:	08051280 	call	805128 <printf>
    free(temp);
  801870:	e13fb317 	ldw	r4,-308(fp)
  801874:	080472c0 	call	80472c <free>
  801878:	00002306 	br	801908 <pgmwrite2+0x330>
  } else {
    printf("Writing to %s as ascii.\n", filename);
  80187c:	01002074 	movhi	r4,129
  801880:	21138004 	addi	r4,r4,19968
  801884:	e17ffb17 	ldw	r5,-20(fp)
  801888:	08051280 	call	805128 <printf>
    for (j = 0; j < row; j++) {
  80188c:	e03fb515 	stw	zero,-300(fp)
  801890:	00001a06 	br	8018fc <pgmwrite2+0x324>
      for (i = 0; i < col; i++) {
  801894:	e03fb615 	stw	zero,-296(fp)
  801898:	00001206 	br	8018e4 <pgmwrite2+0x30c>
        fprintf(file, "%d ", (int)data[j][i]);
  80189c:	e0bfb517 	ldw	r2,-300(fp)
  8018a0:	1085883a 	add	r2,r2,r2
  8018a4:	1085883a 	add	r2,r2,r2
  8018a8:	1007883a 	mov	r3,r2
  8018ac:	e0bffe17 	ldw	r2,-8(fp)
  8018b0:	1885883a 	add	r2,r3,r2
  8018b4:	10c00017 	ldw	r3,0(r2)
  8018b8:	e0bfb617 	ldw	r2,-296(fp)
  8018bc:	1885883a 	add	r2,r3,r2
  8018c0:	10800003 	ldbu	r2,0(r2)
  8018c4:	11803fcc 	andi	r6,r2,255
  8018c8:	e13fba17 	ldw	r4,-280(fp)
  8018cc:	01402074 	movhi	r5,129
  8018d0:	29538704 	addi	r5,r5,19996
  8018d4:	08037000 	call	803700 <fprintf>
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
      for (i = 0; i < col; i++) {
  8018d8:	e0bfb617 	ldw	r2,-296(fp)
  8018dc:	10800044 	addi	r2,r2,1
  8018e0:	e0bfb615 	stw	r2,-296(fp)
  8018e4:	e0ffb617 	ldw	r3,-296(fp)
  8018e8:	e0bffd17 	ldw	r2,-12(fp)
  8018ec:	18bfeb16 	blt	r3,r2,80189c <pgmwrite2+0x2c4>
    nread = fwrite((void*)temp, sizeof(unsigned char), (row * col), file);
    printf("Writing to %s as binary.\n", filename);
    free(temp);
  } else {
    printf("Writing to %s as ascii.\n", filename);
    for (j = 0; j < row; j++) {
  8018f0:	e0bfb517 	ldw	r2,-300(fp)
  8018f4:	10800044 	addi	r2,r2,1
  8018f8:	e0bfb515 	stw	r2,-300(fp)
  8018fc:	e0ffb517 	ldw	r3,-300(fp)
  801900:	e0bffc17 	ldw	r2,-16(fp)
  801904:	18bfe316 	blt	r3,r2,801894 <pgmwrite2+0x2bc>
      for (i = 0; i < col; i++) {
        fprintf(file, "%d ", (int)data[j][i]);
      }
    }
  }
  fclose(file);
  801908:	e13fba17 	ldw	r4,-280(fp)
  80190c:	0802e240 	call	802e24 <fclose>
  return (0);
  801910:	e03fff15 	stw	zero,-4(fp)
  801914:	e0bfff17 	ldw	r2,-4(fp)
}
  801918:	e037883a 	mov	sp,fp
  80191c:	dfc00117 	ldw	ra,4(sp)
  801920:	df000017 	ldw	fp,0(sp)
  801924:	dec00204 	addi	sp,sp,8
  801928:	f800283a 	ret

0080192c <ppmwrite2>:

int ppmwrite2(char* filename, int row, int col, unsigned char** datar,
              unsigned char** datag, unsigned char** datab,
              char* comment_string, int binsave) {
  80192c:	deffb004 	addi	sp,sp,-320
  801930:	dfc04f15 	stw	ra,316(sp)
  801934:	df004e15 	stw	fp,312(sp)
  801938:	df004e04 	addi	fp,sp,312
  80193c:	e13ffb15 	stw	r4,-20(fp)
  801940:	e17ffc15 	stw	r5,-16(fp)
  801944:	e1bffd15 	stw	r6,-12(fp)
  801948:	e1fffe15 	stw	r7,-8(fp)
  int binary;
  int nread;
  int i, j, int_tmp;
  unsigned char* temp;

  if ((file = fopen(filename, "w")) == NULL) {
  80194c:	e13ffb17 	ldw	r4,-20(fp)
  801950:	01402074 	movhi	r5,129
  801954:	29537004 	addi	r5,r5,19904
  801958:	08036e40 	call	8036e4 <fopen>
  80195c:	e0bfba15 	stw	r2,-280(fp)
  801960:	e0bfba17 	ldw	r2,-280(fp)
  801964:	1004c03a 	cmpne	r2,r2,zero
  801968:	1000061e 	bne	r2,zero,801984 <ppmwrite2+0x58>
    printf("ERROR: file open failed\n");
  80196c:	01002074 	movhi	r4,129
  801970:	21133404 	addi	r4,r4,19664
  801974:	08052400 	call	805240 <puts>
    return (-1);
  801978:	00bfffc4 	movi	r2,-1
  80197c:	e0bfff15 	stw	r2,-4(fp)
  801980:	00010506 	br	801d98 <ppmwrite2+0x46c>
  }

  if (binsave == 1)
  801984:	e0800517 	ldw	r2,20(fp)
  801988:	10800058 	cmpnei	r2,r2,1
  80198c:	1000071e 	bne	r2,zero,8019ac <ppmwrite2+0x80>
    fprintf(file, "P6\n");
  801990:	01002074 	movhi	r4,129
  801994:	21139104 	addi	r4,r4,20036
  801998:	01400044 	movi	r5,1
  80199c:	018000c4 	movi	r6,3
  8019a0:	e1ffba17 	ldw	r7,-280(fp)
  8019a4:	08045580 	call	804558 <fwrite>
  8019a8:	00000606 	br	8019c4 <ppmwrite2+0x98>
  else
    fprintf(file, "P3\n");
  8019ac:	01002074 	movhi	r4,129
  8019b0:	21139204 	addi	r4,r4,20040
  8019b4:	01400044 	movi	r5,1
  8019b8:	018000c4 	movi	r6,3
  8019bc:	e1ffba17 	ldw	r7,-280(fp)
  8019c0:	08045580 	call	804558 <fwrite>

  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);
  8019c4:	e0800417 	ldw	r2,16(fp)
  8019c8:	1005003a 	cmpeq	r2,r2,zero
  8019cc:	1000051e 	bne	r2,zero,8019e4 <ppmwrite2+0xb8>
  8019d0:	e13fba17 	ldw	r4,-280(fp)
  8019d4:	01402074 	movhi	r5,129
  8019d8:	29537304 	addi	r5,r5,19916
  8019dc:	e1800417 	ldw	r6,16(fp)
  8019e0:	08037000 	call	803700 <fprintf>

  fprintf(file, "%d %d \n", col, row);
  8019e4:	e13fba17 	ldw	r4,-280(fp)
  8019e8:	01402074 	movhi	r5,129
  8019ec:	29537504 	addi	r5,r5,19924
  8019f0:	e1bffd17 	ldw	r6,-12(fp)
  8019f4:	e1fffc17 	ldw	r7,-16(fp)
  8019f8:	08037000 	call	803700 <fprintf>

  maxval = 0;
  8019fc:	e03fb915 	stw	zero,-284(fp)
  for (i = 0; i < row; i++)
  801a00:	e03fb615 	stw	zero,-296(fp)
  801a04:	00002406 	br	801a98 <ppmwrite2+0x16c>
    for (j = 0; j < col; j++)
  801a08:	e03fb515 	stw	zero,-300(fp)
  801a0c:	00001c06 	br	801a80 <ppmwrite2+0x154>
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];
  801a10:	e0bfb617 	ldw	r2,-296(fp)
  801a14:	1085883a 	add	r2,r2,r2
  801a18:	1085883a 	add	r2,r2,r2
  801a1c:	1007883a 	mov	r3,r2
  801a20:	e0bffe17 	ldw	r2,-8(fp)
  801a24:	1885883a 	add	r2,r3,r2
  801a28:	10c00017 	ldw	r3,0(r2)
  801a2c:	e0bfb517 	ldw	r2,-300(fp)
  801a30:	1885883a 	add	r2,r3,r2
  801a34:	10800003 	ldbu	r2,0(r2)
  801a38:	10c03fcc 	andi	r3,r2,255
  801a3c:	e0bfb917 	ldw	r2,-284(fp)
  801a40:	10c00c0e 	bge	r2,r3,801a74 <ppmwrite2+0x148>
  801a44:	e0bfb617 	ldw	r2,-296(fp)
  801a48:	1085883a 	add	r2,r2,r2
  801a4c:	1085883a 	add	r2,r2,r2
  801a50:	1007883a 	mov	r3,r2
  801a54:	e0bffe17 	ldw	r2,-8(fp)
  801a58:	1885883a 	add	r2,r3,r2
  801a5c:	10c00017 	ldw	r3,0(r2)
  801a60:	e0bfb517 	ldw	r2,-300(fp)
  801a64:	1885883a 	add	r2,r3,r2
  801a68:	10800003 	ldbu	r2,0(r2)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	e0bfb915 	stw	r2,-284(fp)

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
    for (j = 0; j < col; j++)
  801a74:	e0bfb517 	ldw	r2,-300(fp)
  801a78:	10800044 	addi	r2,r2,1
  801a7c:	e0bfb515 	stw	r2,-300(fp)
  801a80:	e0ffb517 	ldw	r3,-300(fp)
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	18bfe116 	blt	r3,r2,801a10 <ppmwrite2+0xe4>
  if (comment_string != NULL) fprintf(file, "# %s \n", comment_string);

  fprintf(file, "%d %d \n", col, row);

  maxval = 0;
  for (i = 0; i < row; i++)
  801a8c:	e0bfb617 	ldw	r2,-296(fp)
  801a90:	10800044 	addi	r2,r2,1
  801a94:	e0bfb615 	stw	r2,-296(fp)
  801a98:	e0ffb617 	ldw	r3,-296(fp)
  801a9c:	e0bffc17 	ldw	r2,-16(fp)
  801aa0:	18bfd916 	blt	r3,r2,801a08 <ppmwrite2+0xdc>
    for (j = 0; j < col; j++)
      if ((int)datar[i][j] > maxval) maxval = (int)datar[i][j];

  maxval = 255;
  801aa4:	00803fc4 	movi	r2,255
  801aa8:	e0bfb915 	stw	r2,-284(fp)
  fprintf(file, "%d\n", maxval);
  801aac:	e13fba17 	ldw	r4,-280(fp)
  801ab0:	01402074 	movhi	r5,129
  801ab4:	29539004 	addi	r5,r5,20032
  801ab8:	e1bfb917 	ldw	r6,-284(fp)
  801abc:	08037000 	call	803700 <fprintf>

  if (binsave == 1) {
  801ac0:	e0800517 	ldw	r2,20(fp)
  801ac4:	10800058 	cmpnei	r2,r2,1
  801ac8:	1000761e 	bne	r2,zero,801ca4 <ppmwrite2+0x378>
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));
  801acc:	e13ffc17 	ldw	r4,-16(fp)
  801ad0:	e17ffd17 	ldw	r5,-12(fp)
  801ad4:	08026a00 	call	8026a0 <__mulsi3>
  801ad8:	1007883a 	mov	r3,r2
  801adc:	1805883a 	mov	r2,r3
  801ae0:	1085883a 	add	r2,r2,r2
  801ae4:	10c5883a 	add	r2,r2,r3
  801ae8:	1009883a 	mov	r4,r2
  801aec:	01400044 	movi	r5,1
  801af0:	0802ba40 	call	802ba4 <calloc>
  801af4:	e0bfb315 	stw	r2,-308(fp)

    for (i = 0; i < row; i++)
  801af8:	e03fb615 	stw	zero,-296(fp)
  801afc:	00005206 	br	801c48 <ppmwrite2+0x31c>
      for (j = 0; j < col; j++) {
  801b00:	e03fb515 	stw	zero,-300(fp)
  801b04:	00004a06 	br	801c30 <ppmwrite2+0x304>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
  801b08:	e13fb617 	ldw	r4,-296(fp)
  801b0c:	e17ffd17 	ldw	r5,-12(fp)
  801b10:	08026a00 	call	8026a0 <__mulsi3>
  801b14:	1007883a 	mov	r3,r2
  801b18:	e0bfb517 	ldw	r2,-300(fp)
  801b1c:	1887883a 	add	r3,r3,r2
  801b20:	1805883a 	mov	r2,r3
  801b24:	1085883a 	add	r2,r2,r2
  801b28:	10c5883a 	add	r2,r2,r3
  801b2c:	1007883a 	mov	r3,r2
  801b30:	e0bfb317 	ldw	r2,-308(fp)
  801b34:	1889883a 	add	r4,r3,r2
  801b38:	e0bfb617 	ldw	r2,-296(fp)
  801b3c:	1085883a 	add	r2,r2,r2
  801b40:	1085883a 	add	r2,r2,r2
  801b44:	1007883a 	mov	r3,r2
  801b48:	e0bffe17 	ldw	r2,-8(fp)
  801b4c:	1885883a 	add	r2,r3,r2
  801b50:	10c00017 	ldw	r3,0(r2)
  801b54:	e0bfb517 	ldw	r2,-300(fp)
  801b58:	1885883a 	add	r2,r3,r2
  801b5c:	10800003 	ldbu	r2,0(r2)
  801b60:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
  801b64:	e13fb617 	ldw	r4,-296(fp)
  801b68:	e17ffd17 	ldw	r5,-12(fp)
  801b6c:	08026a00 	call	8026a0 <__mulsi3>
  801b70:	1007883a 	mov	r3,r2
  801b74:	e0bfb517 	ldw	r2,-300(fp)
  801b78:	1887883a 	add	r3,r3,r2
  801b7c:	1805883a 	mov	r2,r3
  801b80:	1085883a 	add	r2,r2,r2
  801b84:	10c5883a 	add	r2,r2,r3
  801b88:	1007883a 	mov	r3,r2
  801b8c:	e0bfb317 	ldw	r2,-308(fp)
  801b90:	1885883a 	add	r2,r3,r2
  801b94:	11000044 	addi	r4,r2,1
  801b98:	e0bfb617 	ldw	r2,-296(fp)
  801b9c:	1085883a 	add	r2,r2,r2
  801ba0:	1085883a 	add	r2,r2,r2
  801ba4:	1007883a 	mov	r3,r2
  801ba8:	e0800217 	ldw	r2,8(fp)
  801bac:	1885883a 	add	r2,r3,r2
  801bb0:	10c00017 	ldw	r3,0(r2)
  801bb4:	e0bfb517 	ldw	r2,-300(fp)
  801bb8:	1885883a 	add	r2,r3,r2
  801bbc:	10800003 	ldbu	r2,0(r2)
  801bc0:	20800005 	stb	r2,0(r4)
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
  801bc4:	e13fb617 	ldw	r4,-296(fp)
  801bc8:	e17ffd17 	ldw	r5,-12(fp)
  801bcc:	08026a00 	call	8026a0 <__mulsi3>
  801bd0:	1007883a 	mov	r3,r2
  801bd4:	e0bfb517 	ldw	r2,-300(fp)
  801bd8:	1887883a 	add	r3,r3,r2
  801bdc:	1805883a 	mov	r2,r3
  801be0:	1085883a 	add	r2,r2,r2
  801be4:	10c5883a 	add	r2,r2,r3
  801be8:	1007883a 	mov	r3,r2
  801bec:	e0bfb317 	ldw	r2,-308(fp)
  801bf0:	1885883a 	add	r2,r3,r2
  801bf4:	11000084 	addi	r4,r2,2
  801bf8:	e0bfb617 	ldw	r2,-296(fp)
  801bfc:	1085883a 	add	r2,r2,r2
  801c00:	1085883a 	add	r2,r2,r2
  801c04:	1007883a 	mov	r3,r2
  801c08:	e0800317 	ldw	r2,12(fp)
  801c0c:	1885883a 	add	r2,r3,r2
  801c10:	10c00017 	ldw	r3,0(r2)
  801c14:	e0bfb517 	ldw	r2,-300(fp)
  801c18:	1885883a 	add	r2,r3,r2
  801c1c:	10800003 	ldbu	r2,0(r2)
  801c20:	20800005 	stb	r2,0(r4)

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
      for (j = 0; j < col; j++) {
  801c24:	e0bfb517 	ldw	r2,-300(fp)
  801c28:	10800044 	addi	r2,r2,1
  801c2c:	e0bfb515 	stw	r2,-300(fp)
  801c30:	e0ffb517 	ldw	r3,-300(fp)
  801c34:	e0bffd17 	ldw	r2,-12(fp)
  801c38:	18bfb316 	blt	r3,r2,801b08 <ppmwrite2+0x1dc>
  fprintf(file, "%d\n", maxval);

  if (binsave == 1) {
    temp = (unsigned char*)calloc(3 * row * col, sizeof(unsigned char));

    for (i = 0; i < row; i++)
  801c3c:	e0bfb617 	ldw	r2,-296(fp)
  801c40:	10800044 	addi	r2,r2,1
  801c44:	e0bfb615 	stw	r2,-296(fp)
  801c48:	e0ffb617 	ldw	r3,-296(fp)
  801c4c:	e0bffc17 	ldw	r2,-16(fp)
  801c50:	18bfab16 	blt	r3,r2,801b00 <ppmwrite2+0x1d4>
        temp[3 * ((i * col) + j)] = (unsigned char)datar[i][j];
        temp[3 * ((i * col) + j) + 1] = (unsigned char)datag[i][j];
        temp[3 * ((i * col) + j) + 2] = (unsigned char)datab[i][j];
      }

    nread = fwrite((void*)temp, sizeof(unsigned char), (3 * row * col), file);
  801c54:	e13ffc17 	ldw	r4,-16(fp)
  801c58:	e17ffd17 	ldw	r5,-12(fp)
  801c5c:	08026a00 	call	8026a0 <__mulsi3>
  801c60:	1007883a 	mov	r3,r2
  801c64:	1805883a 	mov	r2,r3
  801c68:	1085883a 	add	r2,r2,r2
  801c6c:	10c5883a 	add	r2,r2,r3
  801c70:	100d883a 	mov	r6,r2
  801c74:	e13fb317 	ldw	r4,-308(fp)
  801c78:	01400044 	movi	r5,1
  801c7c:	e1ffba17 	ldw	r7,-280(fp)
  801c80:	08045580 	call	804558 <fwrite>
  801c84:	e0bfb715 	stw	r2,-292(fp)
    printf("Writing to %s as binary.\n", filename);
  801c88:	01002074 	movhi	r4,129
  801c8c:	21137904 	addi	r4,r4,19940
  801c90:	e17ffb17 	ldw	r5,-20(fp)
  801c94:	08051280 	call	805128 <printf>
    free(temp);
  801c98:	e13fb317 	ldw	r4,-308(fp)
  801c9c:	080472c0 	call	80472c <free>
  801ca0:	00003a06 	br	801d8c <ppmwrite2+0x460>

  } else {
    printf("Writing to %s as ascii.\n", filename);
  801ca4:	01002074 	movhi	r4,129
  801ca8:	21138004 	addi	r4,r4,19968
  801cac:	e17ffb17 	ldw	r5,-20(fp)
  801cb0:	08051280 	call	805128 <printf>

    for (j = 0; j < row; j++)
  801cb4:	e03fb515 	stw	zero,-300(fp)
  801cb8:	00003106 	br	801d80 <ppmwrite2+0x454>
      for (i = 0; i < col; i++)
  801cbc:	e03fb615 	stw	zero,-296(fp)
  801cc0:	00002906 	br	801d68 <ppmwrite2+0x43c>
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
  801cc4:	e0bfb517 	ldw	r2,-300(fp)
  801cc8:	1085883a 	add	r2,r2,r2
  801ccc:	1085883a 	add	r2,r2,r2
  801cd0:	1007883a 	mov	r3,r2
  801cd4:	e0bffe17 	ldw	r2,-8(fp)
  801cd8:	1885883a 	add	r2,r3,r2
  801cdc:	10c00017 	ldw	r3,0(r2)
  801ce0:	e0bfb617 	ldw	r2,-296(fp)
  801ce4:	1885883a 	add	r2,r3,r2
  801ce8:	10800003 	ldbu	r2,0(r2)
  801cec:	11803fcc 	andi	r6,r2,255
  801cf0:	e0bfb517 	ldw	r2,-300(fp)
  801cf4:	1085883a 	add	r2,r2,r2
  801cf8:	1085883a 	add	r2,r2,r2
  801cfc:	1007883a 	mov	r3,r2
  801d00:	e0800217 	ldw	r2,8(fp)
  801d04:	1885883a 	add	r2,r3,r2
  801d08:	10c00017 	ldw	r3,0(r2)
  801d0c:	e0bfb617 	ldw	r2,-296(fp)
  801d10:	1885883a 	add	r2,r3,r2
  801d14:	10800003 	ldbu	r2,0(r2)
  801d18:	11c03fcc 	andi	r7,r2,255
  801d1c:	e0bfb517 	ldw	r2,-300(fp)
  801d20:	1085883a 	add	r2,r2,r2
  801d24:	1085883a 	add	r2,r2,r2
  801d28:	1007883a 	mov	r3,r2
  801d2c:	e0800317 	ldw	r2,12(fp)
  801d30:	1885883a 	add	r2,r3,r2
  801d34:	10c00017 	ldw	r3,0(r2)
  801d38:	e0bfb617 	ldw	r2,-296(fp)
  801d3c:	1885883a 	add	r2,r3,r2
  801d40:	10800003 	ldbu	r2,0(r2)
  801d44:	10803fcc 	andi	r2,r2,255
  801d48:	d8800015 	stw	r2,0(sp)
  801d4c:	e13fba17 	ldw	r4,-280(fp)
  801d50:	01402074 	movhi	r5,129
  801d54:	29539304 	addi	r5,r5,20044
  801d58:	08037000 	call	803700 <fprintf>

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
      for (i = 0; i < col; i++)
  801d5c:	e0bfb617 	ldw	r2,-296(fp)
  801d60:	10800044 	addi	r2,r2,1
  801d64:	e0bfb615 	stw	r2,-296(fp)
  801d68:	e0ffb617 	ldw	r3,-296(fp)
  801d6c:	e0bffd17 	ldw	r2,-12(fp)
  801d70:	18bfd416 	blt	r3,r2,801cc4 <ppmwrite2+0x398>
    free(temp);

  } else {
    printf("Writing to %s as ascii.\n", filename);

    for (j = 0; j < row; j++)
  801d74:	e0bfb517 	ldw	r2,-300(fp)
  801d78:	10800044 	addi	r2,r2,1
  801d7c:	e0bfb515 	stw	r2,-300(fp)
  801d80:	e0ffb517 	ldw	r3,-300(fp)
  801d84:	e0bffc17 	ldw	r2,-16(fp)
  801d88:	18bfcc16 	blt	r3,r2,801cbc <ppmwrite2+0x390>
      for (i = 0; i < col; i++)
        fprintf(file, "%d %d %d ", (int)datar[j][i], (int)datag[j][i],
                (int)datab[j][i]);
  }

  fclose(file);
  801d8c:	e13fba17 	ldw	r4,-280(fp)
  801d90:	0802e240 	call	802e24 <fclose>
  return (0);
  801d94:	e03fff15 	stw	zero,-4(fp)
  801d98:	e0bfff17 	ldw	r2,-4(fp)
}
  801d9c:	e037883a 	mov	sp,fp
  801da0:	dfc00117 	ldw	ra,4(sp)
  801da4:	df000017 	ldw	fp,0(sp)
  801da8:	dec00204 	addi	sp,sp,8
  801dac:	f800283a 	ret

00801db0 <_fpadd_parts>:
  801db0:	defff804 	addi	sp,sp,-32
  801db4:	dcc00315 	stw	r19,12(sp)
  801db8:	2027883a 	mov	r19,r4
  801dbc:	21000017 	ldw	r4,0(r4)
  801dc0:	00c00044 	movi	r3,1
  801dc4:	dd400515 	stw	r21,20(sp)
  801dc8:	dd000415 	stw	r20,16(sp)
  801dcc:	ddc00715 	stw	r23,28(sp)
  801dd0:	dd800615 	stw	r22,24(sp)
  801dd4:	dc800215 	stw	r18,8(sp)
  801dd8:	dc400115 	stw	r17,4(sp)
  801ddc:	dc000015 	stw	r16,0(sp)
  801de0:	282b883a 	mov	r21,r5
  801de4:	3029883a 	mov	r20,r6
  801de8:	1900632e 	bgeu	r3,r4,801f78 <_fpadd_parts+0x1c8>
  801dec:	28800017 	ldw	r2,0(r5)
  801df0:	1880812e 	bgeu	r3,r2,801ff8 <_fpadd_parts+0x248>
  801df4:	00c00104 	movi	r3,4
  801df8:	20c0dc26 	beq	r4,r3,80216c <_fpadd_parts+0x3bc>
  801dfc:	10c07e26 	beq	r2,r3,801ff8 <_fpadd_parts+0x248>
  801e00:	00c00084 	movi	r3,2
  801e04:	10c06726 	beq	r2,r3,801fa4 <_fpadd_parts+0x1f4>
  801e08:	20c07b26 	beq	r4,r3,801ff8 <_fpadd_parts+0x248>
  801e0c:	9dc00217 	ldw	r23,8(r19)
  801e10:	28c00217 	ldw	r3,8(r5)
  801e14:	9c400317 	ldw	r17,12(r19)
  801e18:	2bc00317 	ldw	r15,12(r5)
  801e1c:	b8cdc83a 	sub	r6,r23,r3
  801e20:	9c800417 	ldw	r18,16(r19)
  801e24:	2c000417 	ldw	r16,16(r5)
  801e28:	3009883a 	mov	r4,r6
  801e2c:	30009716 	blt	r6,zero,80208c <_fpadd_parts+0x2dc>
  801e30:	00800fc4 	movi	r2,63
  801e34:	11806b16 	blt	r2,r6,801fe4 <_fpadd_parts+0x234>
  801e38:	0100a40e 	bge	zero,r4,8020cc <_fpadd_parts+0x31c>
  801e3c:	35bff804 	addi	r22,r6,-32
  801e40:	b000bc16 	blt	r22,zero,802134 <_fpadd_parts+0x384>
  801e44:	8596d83a 	srl	r11,r16,r22
  801e48:	0019883a 	mov	r12,zero
  801e4c:	0013883a 	mov	r9,zero
  801e50:	01000044 	movi	r4,1
  801e54:	0015883a 	mov	r10,zero
  801e58:	b000be16 	blt	r22,zero,802154 <_fpadd_parts+0x3a4>
  801e5c:	2590983a 	sll	r8,r4,r22
  801e60:	000f883a 	mov	r7,zero
  801e64:	00bfffc4 	movi	r2,-1
  801e68:	3889883a 	add	r4,r7,r2
  801e6c:	408b883a 	add	r5,r8,r2
  801e70:	21cd803a 	cmpltu	r6,r4,r7
  801e74:	314b883a 	add	r5,r6,r5
  801e78:	7904703a 	and	r2,r15,r4
  801e7c:	8146703a 	and	r3,r16,r5
  801e80:	10c4b03a 	or	r2,r2,r3
  801e84:	10000226 	beq	r2,zero,801e90 <_fpadd_parts+0xe0>
  801e88:	02400044 	movi	r9,1
  801e8c:	0015883a 	mov	r10,zero
  801e90:	5a5eb03a 	or	r15,r11,r9
  801e94:	62a0b03a 	or	r16,r12,r10
  801e98:	99400117 	ldw	r5,4(r19)
  801e9c:	a8800117 	ldw	r2,4(r21)
  801ea0:	28806e26 	beq	r5,r2,80205c <_fpadd_parts+0x2ac>
  801ea4:	28006626 	beq	r5,zero,802040 <_fpadd_parts+0x290>
  801ea8:	7c45c83a 	sub	r2,r15,r17
  801eac:	7889803a 	cmpltu	r4,r15,r2
  801eb0:	8487c83a 	sub	r3,r16,r18
  801eb4:	1909c83a 	sub	r4,r3,r4
  801eb8:	100d883a 	mov	r6,r2
  801ebc:	200f883a 	mov	r7,r4
  801ec0:	38007716 	blt	r7,zero,8020a0 <_fpadd_parts+0x2f0>
  801ec4:	a5c00215 	stw	r23,8(r20)
  801ec8:	a1c00415 	stw	r7,16(r20)
  801ecc:	a0000115 	stw	zero,4(r20)
  801ed0:	a1800315 	stw	r6,12(r20)
  801ed4:	a2000317 	ldw	r8,12(r20)
  801ed8:	a2400417 	ldw	r9,16(r20)
  801edc:	00bfffc4 	movi	r2,-1
  801ee0:	408b883a 	add	r5,r8,r2
  801ee4:	2a09803a 	cmpltu	r4,r5,r8
  801ee8:	488d883a 	add	r6,r9,r2
  801eec:	01c40034 	movhi	r7,4096
  801ef0:	39ffffc4 	addi	r7,r7,-1
  801ef4:	218d883a 	add	r6,r4,r6
  801ef8:	39801736 	bltu	r7,r6,801f58 <_fpadd_parts+0x1a8>
  801efc:	31c06526 	beq	r6,r7,802094 <_fpadd_parts+0x2e4>
  801f00:	a3000217 	ldw	r12,8(r20)
  801f04:	4209883a 	add	r4,r8,r8
  801f08:	00bfffc4 	movi	r2,-1
  801f0c:	220f803a 	cmpltu	r7,r4,r8
  801f10:	4a4b883a 	add	r5,r9,r9
  801f14:	394f883a 	add	r7,r7,r5
  801f18:	2095883a 	add	r10,r4,r2
  801f1c:	3897883a 	add	r11,r7,r2
  801f20:	510d803a 	cmpltu	r6,r10,r4
  801f24:	6099883a 	add	r12,r12,r2
  801f28:	32d7883a 	add	r11,r6,r11
  801f2c:	00840034 	movhi	r2,4096
  801f30:	10bfffc4 	addi	r2,r2,-1
  801f34:	2011883a 	mov	r8,r4
  801f38:	3813883a 	mov	r9,r7
  801f3c:	a1000315 	stw	r4,12(r20)
  801f40:	a1c00415 	stw	r7,16(r20)
  801f44:	a3000215 	stw	r12,8(r20)
  801f48:	12c00336 	bltu	r2,r11,801f58 <_fpadd_parts+0x1a8>
  801f4c:	58bfed1e 	bne	r11,r2,801f04 <_fpadd_parts+0x154>
  801f50:	00bfff84 	movi	r2,-2
  801f54:	12bfeb2e 	bgeu	r2,r10,801f04 <_fpadd_parts+0x154>
  801f58:	a2800417 	ldw	r10,16(r20)
  801f5c:	008000c4 	movi	r2,3
  801f60:	00c80034 	movhi	r3,8192
  801f64:	18ffffc4 	addi	r3,r3,-1
  801f68:	a2400317 	ldw	r9,12(r20)
  801f6c:	a0800015 	stw	r2,0(r20)
  801f70:	1a802336 	bltu	r3,r10,802000 <_fpadd_parts+0x250>
  801f74:	a027883a 	mov	r19,r20
  801f78:	9805883a 	mov	r2,r19
  801f7c:	ddc00717 	ldw	r23,28(sp)
  801f80:	dd800617 	ldw	r22,24(sp)
  801f84:	dd400517 	ldw	r21,20(sp)
  801f88:	dd000417 	ldw	r20,16(sp)
  801f8c:	dcc00317 	ldw	r19,12(sp)
  801f90:	dc800217 	ldw	r18,8(sp)
  801f94:	dc400117 	ldw	r17,4(sp)
  801f98:	dc000017 	ldw	r16,0(sp)
  801f9c:	dec00804 	addi	sp,sp,32
  801fa0:	f800283a 	ret
  801fa4:	20fff41e 	bne	r4,r3,801f78 <_fpadd_parts+0x1c8>
  801fa8:	31000015 	stw	r4,0(r6)
  801fac:	98800117 	ldw	r2,4(r19)
  801fb0:	30800115 	stw	r2,4(r6)
  801fb4:	98c00217 	ldw	r3,8(r19)
  801fb8:	30c00215 	stw	r3,8(r6)
  801fbc:	98800317 	ldw	r2,12(r19)
  801fc0:	30800315 	stw	r2,12(r6)
  801fc4:	98c00417 	ldw	r3,16(r19)
  801fc8:	30c00415 	stw	r3,16(r6)
  801fcc:	98800117 	ldw	r2,4(r19)
  801fd0:	28c00117 	ldw	r3,4(r5)
  801fd4:	3027883a 	mov	r19,r6
  801fd8:	10c4703a 	and	r2,r2,r3
  801fdc:	30800115 	stw	r2,4(r6)
  801fe0:	003fe506 	br	801f78 <_fpadd_parts+0x1c8>
  801fe4:	1dc02616 	blt	r3,r23,802080 <_fpadd_parts+0x2d0>
  801fe8:	0023883a 	mov	r17,zero
  801fec:	182f883a 	mov	r23,r3
  801ff0:	0025883a 	mov	r18,zero
  801ff4:	003fa806 	br	801e98 <_fpadd_parts+0xe8>
  801ff8:	a827883a 	mov	r19,r21
  801ffc:	003fde06 	br	801f78 <_fpadd_parts+0x1c8>
  802000:	01800044 	movi	r6,1
  802004:	500497fa 	slli	r2,r10,31
  802008:	4808d07a 	srli	r4,r9,1
  80200c:	518ad83a 	srl	r5,r10,r6
  802010:	a2000217 	ldw	r8,8(r20)
  802014:	1108b03a 	or	r4,r2,r4
  802018:	0007883a 	mov	r3,zero
  80201c:	4984703a 	and	r2,r9,r6
  802020:	208cb03a 	or	r6,r4,r2
  802024:	28ceb03a 	or	r7,r5,r3
  802028:	42000044 	addi	r8,r8,1
  80202c:	a027883a 	mov	r19,r20
  802030:	a1c00415 	stw	r7,16(r20)
  802034:	a2000215 	stw	r8,8(r20)
  802038:	a1800315 	stw	r6,12(r20)
  80203c:	003fce06 	br	801f78 <_fpadd_parts+0x1c8>
  802040:	8bc5c83a 	sub	r2,r17,r15
  802044:	8889803a 	cmpltu	r4,r17,r2
  802048:	9407c83a 	sub	r3,r18,r16
  80204c:	1909c83a 	sub	r4,r3,r4
  802050:	100d883a 	mov	r6,r2
  802054:	200f883a 	mov	r7,r4
  802058:	003f9906 	br	801ec0 <_fpadd_parts+0x110>
  80205c:	7c45883a 	add	r2,r15,r17
  802060:	13c9803a 	cmpltu	r4,r2,r15
  802064:	8487883a 	add	r3,r16,r18
  802068:	20c9883a 	add	r4,r4,r3
  80206c:	a1400115 	stw	r5,4(r20)
  802070:	a5c00215 	stw	r23,8(r20)
  802074:	a0800315 	stw	r2,12(r20)
  802078:	a1000415 	stw	r4,16(r20)
  80207c:	003fb606 	br	801f58 <_fpadd_parts+0x1a8>
  802080:	001f883a 	mov	r15,zero
  802084:	0021883a 	mov	r16,zero
  802088:	003f8306 	br	801e98 <_fpadd_parts+0xe8>
  80208c:	018dc83a 	sub	r6,zero,r6
  802090:	003f6706 	br	801e30 <_fpadd_parts+0x80>
  802094:	00bfff84 	movi	r2,-2
  802098:	117faf36 	bltu	r2,r5,801f58 <_fpadd_parts+0x1a8>
  80209c:	003f9806 	br	801f00 <_fpadd_parts+0x150>
  8020a0:	0005883a 	mov	r2,zero
  8020a4:	1189c83a 	sub	r4,r2,r6
  8020a8:	1105803a 	cmpltu	r2,r2,r4
  8020ac:	01cbc83a 	sub	r5,zero,r7
  8020b0:	2885c83a 	sub	r2,r5,r2
  8020b4:	01800044 	movi	r6,1
  8020b8:	a1800115 	stw	r6,4(r20)
  8020bc:	a5c00215 	stw	r23,8(r20)
  8020c0:	a1000315 	stw	r4,12(r20)
  8020c4:	a0800415 	stw	r2,16(r20)
  8020c8:	003f8206 	br	801ed4 <_fpadd_parts+0x124>
  8020cc:	203f7226 	beq	r4,zero,801e98 <_fpadd_parts+0xe8>
  8020d0:	35bff804 	addi	r22,r6,-32
  8020d4:	b9af883a 	add	r23,r23,r6
  8020d8:	b0003116 	blt	r22,zero,8021a0 <_fpadd_parts+0x3f0>
  8020dc:	959ad83a 	srl	r13,r18,r22
  8020e0:	001d883a 	mov	r14,zero
  8020e4:	000f883a 	mov	r7,zero
  8020e8:	01000044 	movi	r4,1
  8020ec:	0011883a 	mov	r8,zero
  8020f0:	b0002516 	blt	r22,zero,802188 <_fpadd_parts+0x3d8>
  8020f4:	2594983a 	sll	r10,r4,r22
  8020f8:	0013883a 	mov	r9,zero
  8020fc:	00bfffc4 	movi	r2,-1
  802100:	4889883a 	add	r4,r9,r2
  802104:	508b883a 	add	r5,r10,r2
  802108:	224d803a 	cmpltu	r6,r4,r9
  80210c:	314b883a 	add	r5,r6,r5
  802110:	8904703a 	and	r2,r17,r4
  802114:	9146703a 	and	r3,r18,r5
  802118:	10c4b03a 	or	r2,r2,r3
  80211c:	10000226 	beq	r2,zero,802128 <_fpadd_parts+0x378>
  802120:	01c00044 	movi	r7,1
  802124:	0011883a 	mov	r8,zero
  802128:	69e2b03a 	or	r17,r13,r7
  80212c:	7224b03a 	or	r18,r14,r8
  802130:	003f5906 	br	801e98 <_fpadd_parts+0xe8>
  802134:	8407883a 	add	r3,r16,r16
  802138:	008007c4 	movi	r2,31
  80213c:	1185c83a 	sub	r2,r2,r6
  802140:	1886983a 	sll	r3,r3,r2
  802144:	7996d83a 	srl	r11,r15,r6
  802148:	8198d83a 	srl	r12,r16,r6
  80214c:	1ad6b03a 	or	r11,r3,r11
  802150:	003f3e06 	br	801e4c <_fpadd_parts+0x9c>
  802154:	2006d07a 	srli	r3,r4,1
  802158:	008007c4 	movi	r2,31
  80215c:	1185c83a 	sub	r2,r2,r6
  802160:	1890d83a 	srl	r8,r3,r2
  802164:	218e983a 	sll	r7,r4,r6
  802168:	003f3e06 	br	801e64 <_fpadd_parts+0xb4>
  80216c:	113f821e 	bne	r2,r4,801f78 <_fpadd_parts+0x1c8>
  802170:	28c00117 	ldw	r3,4(r5)
  802174:	98800117 	ldw	r2,4(r19)
  802178:	10ff7f26 	beq	r2,r3,801f78 <_fpadd_parts+0x1c8>
  80217c:	04c02074 	movhi	r19,129
  802180:	9cd39604 	addi	r19,r19,20056
  802184:	003f7c06 	br	801f78 <_fpadd_parts+0x1c8>
  802188:	2006d07a 	srli	r3,r4,1
  80218c:	008007c4 	movi	r2,31
  802190:	1185c83a 	sub	r2,r2,r6
  802194:	1894d83a 	srl	r10,r3,r2
  802198:	2192983a 	sll	r9,r4,r6
  80219c:	003fd706 	br	8020fc <_fpadd_parts+0x34c>
  8021a0:	9487883a 	add	r3,r18,r18
  8021a4:	008007c4 	movi	r2,31
  8021a8:	1185c83a 	sub	r2,r2,r6
  8021ac:	1886983a 	sll	r3,r3,r2
  8021b0:	899ad83a 	srl	r13,r17,r6
  8021b4:	919cd83a 	srl	r14,r18,r6
  8021b8:	1b5ab03a 	or	r13,r3,r13
  8021bc:	003fc906 	br	8020e4 <_fpadd_parts+0x334>

008021c0 <__subdf3>:
  8021c0:	deffea04 	addi	sp,sp,-88
  8021c4:	dcc01415 	stw	r19,80(sp)
  8021c8:	dcc00404 	addi	r19,sp,16
  8021cc:	2011883a 	mov	r8,r4
  8021d0:	2813883a 	mov	r9,r5
  8021d4:	dc401315 	stw	r17,76(sp)
  8021d8:	d809883a 	mov	r4,sp
  8021dc:	980b883a 	mov	r5,r19
  8021e0:	dc400904 	addi	r17,sp,36
  8021e4:	dfc01515 	stw	ra,84(sp)
  8021e8:	da400115 	stw	r9,4(sp)
  8021ec:	d9c00315 	stw	r7,12(sp)
  8021f0:	da000015 	stw	r8,0(sp)
  8021f4:	d9800215 	stw	r6,8(sp)
  8021f8:	0802a6c0 	call	802a6c <__unpack_d>
  8021fc:	d9000204 	addi	r4,sp,8
  802200:	880b883a 	mov	r5,r17
  802204:	0802a6c0 	call	802a6c <__unpack_d>
  802208:	d8800a17 	ldw	r2,40(sp)
  80220c:	880b883a 	mov	r5,r17
  802210:	9809883a 	mov	r4,r19
  802214:	d9800e04 	addi	r6,sp,56
  802218:	1080005c 	xori	r2,r2,1
  80221c:	d8800a15 	stw	r2,40(sp)
  802220:	0801db00 	call	801db0 <_fpadd_parts>
  802224:	1009883a 	mov	r4,r2
  802228:	08027580 	call	802758 <__pack_d>
  80222c:	dfc01517 	ldw	ra,84(sp)
  802230:	dcc01417 	ldw	r19,80(sp)
  802234:	dc401317 	ldw	r17,76(sp)
  802238:	dec01604 	addi	sp,sp,88
  80223c:	f800283a 	ret

00802240 <__adddf3>:
  802240:	deffea04 	addi	sp,sp,-88
  802244:	dcc01415 	stw	r19,80(sp)
  802248:	dcc00404 	addi	r19,sp,16
  80224c:	2011883a 	mov	r8,r4
  802250:	2813883a 	mov	r9,r5
  802254:	dc401315 	stw	r17,76(sp)
  802258:	d809883a 	mov	r4,sp
  80225c:	980b883a 	mov	r5,r19
  802260:	dc400904 	addi	r17,sp,36
  802264:	dfc01515 	stw	ra,84(sp)
  802268:	da400115 	stw	r9,4(sp)
  80226c:	d9c00315 	stw	r7,12(sp)
  802270:	da000015 	stw	r8,0(sp)
  802274:	d9800215 	stw	r6,8(sp)
  802278:	0802a6c0 	call	802a6c <__unpack_d>
  80227c:	d9000204 	addi	r4,sp,8
  802280:	880b883a 	mov	r5,r17
  802284:	0802a6c0 	call	802a6c <__unpack_d>
  802288:	d9800e04 	addi	r6,sp,56
  80228c:	9809883a 	mov	r4,r19
  802290:	880b883a 	mov	r5,r17
  802294:	0801db00 	call	801db0 <_fpadd_parts>
  802298:	1009883a 	mov	r4,r2
  80229c:	08027580 	call	802758 <__pack_d>
  8022a0:	dfc01517 	ldw	ra,84(sp)
  8022a4:	dcc01417 	ldw	r19,80(sp)
  8022a8:	dc401317 	ldw	r17,76(sp)
  8022ac:	dec01604 	addi	sp,sp,88
  8022b0:	f800283a 	ret

008022b4 <__divdf3>:
  8022b4:	deffed04 	addi	sp,sp,-76
  8022b8:	dcc01115 	stw	r19,68(sp)
  8022bc:	dcc00404 	addi	r19,sp,16
  8022c0:	2011883a 	mov	r8,r4
  8022c4:	2813883a 	mov	r9,r5
  8022c8:	dc000e15 	stw	r16,56(sp)
  8022cc:	d809883a 	mov	r4,sp
  8022d0:	980b883a 	mov	r5,r19
  8022d4:	dc000904 	addi	r16,sp,36
  8022d8:	dfc01215 	stw	ra,72(sp)
  8022dc:	da400115 	stw	r9,4(sp)
  8022e0:	d9c00315 	stw	r7,12(sp)
  8022e4:	da000015 	stw	r8,0(sp)
  8022e8:	d9800215 	stw	r6,8(sp)
  8022ec:	dc801015 	stw	r18,64(sp)
  8022f0:	dc400f15 	stw	r17,60(sp)
  8022f4:	0802a6c0 	call	802a6c <__unpack_d>
  8022f8:	d9000204 	addi	r4,sp,8
  8022fc:	800b883a 	mov	r5,r16
  802300:	0802a6c0 	call	802a6c <__unpack_d>
  802304:	d9000417 	ldw	r4,16(sp)
  802308:	00800044 	movi	r2,1
  80230c:	11000b2e 	bgeu	r2,r4,80233c <__divdf3+0x88>
  802310:	d9400917 	ldw	r5,36(sp)
  802314:	1140762e 	bgeu	r2,r5,8024f0 <__divdf3+0x23c>
  802318:	d8800517 	ldw	r2,20(sp)
  80231c:	d8c00a17 	ldw	r3,40(sp)
  802320:	01800104 	movi	r6,4
  802324:	10c4f03a 	xor	r2,r2,r3
  802328:	d8800515 	stw	r2,20(sp)
  80232c:	21800226 	beq	r4,r6,802338 <__divdf3+0x84>
  802330:	00800084 	movi	r2,2
  802334:	2080141e 	bne	r4,r2,802388 <__divdf3+0xd4>
  802338:	29000926 	beq	r5,r4,802360 <__divdf3+0xac>
  80233c:	9809883a 	mov	r4,r19
  802340:	08027580 	call	802758 <__pack_d>
  802344:	dfc01217 	ldw	ra,72(sp)
  802348:	dcc01117 	ldw	r19,68(sp)
  80234c:	dc801017 	ldw	r18,64(sp)
  802350:	dc400f17 	ldw	r17,60(sp)
  802354:	dc000e17 	ldw	r16,56(sp)
  802358:	dec01304 	addi	sp,sp,76
  80235c:	f800283a 	ret
  802360:	01002074 	movhi	r4,129
  802364:	21139604 	addi	r4,r4,20056
  802368:	08027580 	call	802758 <__pack_d>
  80236c:	dfc01217 	ldw	ra,72(sp)
  802370:	dcc01117 	ldw	r19,68(sp)
  802374:	dc801017 	ldw	r18,64(sp)
  802378:	dc400f17 	ldw	r17,60(sp)
  80237c:	dc000e17 	ldw	r16,56(sp)
  802380:	dec01304 	addi	sp,sp,76
  802384:	f800283a 	ret
  802388:	29805b26 	beq	r5,r6,8024f8 <__divdf3+0x244>
  80238c:	28802d26 	beq	r5,r2,802444 <__divdf3+0x190>
  802390:	d8c00617 	ldw	r3,24(sp)
  802394:	d8800b17 	ldw	r2,44(sp)
  802398:	d9c00817 	ldw	r7,32(sp)
  80239c:	dc400d17 	ldw	r17,52(sp)
  8023a0:	188bc83a 	sub	r5,r3,r2
  8023a4:	d9800717 	ldw	r6,28(sp)
  8023a8:	dc000c17 	ldw	r16,48(sp)
  8023ac:	d9400615 	stw	r5,24(sp)
  8023b0:	3c403836 	bltu	r7,r17,802494 <__divdf3+0x1e0>
  8023b4:	89c03626 	beq	r17,r7,802490 <__divdf3+0x1dc>
  8023b8:	0015883a 	mov	r10,zero
  8023bc:	001d883a 	mov	r14,zero
  8023c0:	02c40034 	movhi	r11,4096
  8023c4:	001f883a 	mov	r15,zero
  8023c8:	003f883a 	mov	ra,zero
  8023cc:	04800f44 	movi	r18,61
  8023d0:	00000f06 	br	802410 <__divdf3+0x15c>
  8023d4:	601d883a 	mov	r14,r12
  8023d8:	681f883a 	mov	r15,r13
  8023dc:	400d883a 	mov	r6,r8
  8023e0:	100f883a 	mov	r7,r2
  8023e4:	3191883a 	add	r8,r6,r6
  8023e8:	5808d07a 	srli	r4,r11,1
  8023ec:	4185803a 	cmpltu	r2,r8,r6
  8023f0:	39d3883a 	add	r9,r7,r7
  8023f4:	28c6b03a 	or	r3,r5,r3
  8023f8:	1245883a 	add	r2,r2,r9
  8023fc:	1815883a 	mov	r10,r3
  802400:	2017883a 	mov	r11,r4
  802404:	400d883a 	mov	r6,r8
  802408:	100f883a 	mov	r7,r2
  80240c:	fc801726 	beq	ra,r18,80246c <__divdf3+0x1b8>
  802410:	580a97fa 	slli	r5,r11,31
  802414:	5006d07a 	srli	r3,r10,1
  802418:	ffc00044 	addi	ra,ra,1
  80241c:	3c7ff136 	bltu	r7,r17,8023e4 <__divdf3+0x130>
  802420:	3411c83a 	sub	r8,r6,r16
  802424:	3205803a 	cmpltu	r2,r6,r8
  802428:	3c53c83a 	sub	r9,r7,r17
  80242c:	7298b03a 	or	r12,r14,r10
  802430:	7adab03a 	or	r13,r15,r11
  802434:	4885c83a 	sub	r2,r9,r2
  802438:	89ffe61e 	bne	r17,r7,8023d4 <__divdf3+0x120>
  80243c:	343fe936 	bltu	r6,r16,8023e4 <__divdf3+0x130>
  802440:	003fe406 	br	8023d4 <__divdf3+0x120>
  802444:	9809883a 	mov	r4,r19
  802448:	d9800415 	stw	r6,16(sp)
  80244c:	08027580 	call	802758 <__pack_d>
  802450:	dfc01217 	ldw	ra,72(sp)
  802454:	dcc01117 	ldw	r19,68(sp)
  802458:	dc801017 	ldw	r18,64(sp)
  80245c:	dc400f17 	ldw	r17,60(sp)
  802460:	dc000e17 	ldw	r16,56(sp)
  802464:	dec01304 	addi	sp,sp,76
  802468:	f800283a 	ret
  80246c:	00803fc4 	movi	r2,255
  802470:	7090703a 	and	r8,r14,r2
  802474:	00802004 	movi	r2,128
  802478:	0007883a 	mov	r3,zero
  80247c:	0013883a 	mov	r9,zero
  802480:	40800d26 	beq	r8,r2,8024b8 <__divdf3+0x204>
  802484:	dbc00815 	stw	r15,32(sp)
  802488:	db800715 	stw	r14,28(sp)
  80248c:	003fab06 	br	80233c <__divdf3+0x88>
  802490:	343fc92e 	bgeu	r6,r16,8023b8 <__divdf3+0x104>
  802494:	3185883a 	add	r2,r6,r6
  802498:	1189803a 	cmpltu	r4,r2,r6
  80249c:	39c7883a 	add	r3,r7,r7
  8024a0:	20c9883a 	add	r4,r4,r3
  8024a4:	297fffc4 	addi	r5,r5,-1
  8024a8:	100d883a 	mov	r6,r2
  8024ac:	200f883a 	mov	r7,r4
  8024b0:	d9400615 	stw	r5,24(sp)
  8024b4:	003fc006 	br	8023b8 <__divdf3+0x104>
  8024b8:	483ff21e 	bne	r9,zero,802484 <__divdf3+0x1d0>
  8024bc:	01004004 	movi	r4,256
  8024c0:	7104703a 	and	r2,r14,r4
  8024c4:	10c4b03a 	or	r2,r2,r3
  8024c8:	103fee1e 	bne	r2,zero,802484 <__divdf3+0x1d0>
  8024cc:	31c4b03a 	or	r2,r6,r7
  8024d0:	103fec26 	beq	r2,zero,802484 <__divdf3+0x1d0>
  8024d4:	7205883a 	add	r2,r14,r8
  8024d8:	1391803a 	cmpltu	r8,r2,r14
  8024dc:	43d1883a 	add	r8,r8,r15
  8024e0:	013fc004 	movi	r4,-256
  8024e4:	111c703a 	and	r14,r2,r4
  8024e8:	401f883a 	mov	r15,r8
  8024ec:	003fe506 	br	802484 <__divdf3+0x1d0>
  8024f0:	8009883a 	mov	r4,r16
  8024f4:	003f9206 	br	802340 <__divdf3+0x8c>
  8024f8:	9809883a 	mov	r4,r19
  8024fc:	d8000715 	stw	zero,28(sp)
  802500:	d8000815 	stw	zero,32(sp)
  802504:	d8000615 	stw	zero,24(sp)
  802508:	003f8d06 	br	802340 <__divdf3+0x8c>

0080250c <__floatunsidf>:
  80250c:	defff204 	addi	sp,sp,-56
  802510:	dfc00d15 	stw	ra,52(sp)
  802514:	ddc00c15 	stw	r23,48(sp)
  802518:	dd800b15 	stw	r22,44(sp)
  80251c:	dd400a15 	stw	r21,40(sp)
  802520:	dd000915 	stw	r20,36(sp)
  802524:	dcc00815 	stw	r19,32(sp)
  802528:	dc800715 	stw	r18,28(sp)
  80252c:	dc400615 	stw	r17,24(sp)
  802530:	dc000515 	stw	r16,20(sp)
  802534:	d8000115 	stw	zero,4(sp)
  802538:	20000f1e 	bne	r4,zero,802578 <__floatunsidf+0x6c>
  80253c:	00800084 	movi	r2,2
  802540:	d8800015 	stw	r2,0(sp)
  802544:	d809883a 	mov	r4,sp
  802548:	08027580 	call	802758 <__pack_d>
  80254c:	dfc00d17 	ldw	ra,52(sp)
  802550:	ddc00c17 	ldw	r23,48(sp)
  802554:	dd800b17 	ldw	r22,44(sp)
  802558:	dd400a17 	ldw	r21,40(sp)
  80255c:	dd000917 	ldw	r20,36(sp)
  802560:	dcc00817 	ldw	r19,32(sp)
  802564:	dc800717 	ldw	r18,28(sp)
  802568:	dc400617 	ldw	r17,24(sp)
  80256c:	dc000517 	ldw	r16,20(sp)
  802570:	dec00e04 	addi	sp,sp,56
  802574:	f800283a 	ret
  802578:	008000c4 	movi	r2,3
  80257c:	00c00f04 	movi	r3,60
  802580:	002f883a 	mov	r23,zero
  802584:	202d883a 	mov	r22,r4
  802588:	d8800015 	stw	r2,0(sp)
  80258c:	d8c00215 	stw	r3,8(sp)
  802590:	d9000315 	stw	r4,12(sp)
  802594:	ddc00415 	stw	r23,16(sp)
  802598:	08026d80 	call	8026d8 <__clzsi2>
  80259c:	12400744 	addi	r9,r2,29
  8025a0:	48000b16 	blt	r9,zero,8025d0 <__floatunsidf+0xc4>
  8025a4:	483fe726 	beq	r9,zero,802544 <__floatunsidf+0x38>
  8025a8:	10bfff44 	addi	r2,r2,-3
  8025ac:	10002e16 	blt	r2,zero,802668 <__floatunsidf+0x15c>
  8025b0:	b0a2983a 	sll	r17,r22,r2
  8025b4:	0021883a 	mov	r16,zero
  8025b8:	d8800217 	ldw	r2,8(sp)
  8025bc:	dc400415 	stw	r17,16(sp)
  8025c0:	dc000315 	stw	r16,12(sp)
  8025c4:	1245c83a 	sub	r2,r2,r9
  8025c8:	d8800215 	stw	r2,8(sp)
  8025cc:	003fdd06 	br	802544 <__floatunsidf+0x38>
  8025d0:	0255c83a 	sub	r10,zero,r9
  8025d4:	51bff804 	addi	r6,r10,-32
  8025d8:	30001b16 	blt	r6,zero,802648 <__floatunsidf+0x13c>
  8025dc:	b9a8d83a 	srl	r20,r23,r6
  8025e0:	002b883a 	mov	r21,zero
  8025e4:	000f883a 	mov	r7,zero
  8025e8:	01000044 	movi	r4,1
  8025ec:	0011883a 	mov	r8,zero
  8025f0:	30002516 	blt	r6,zero,802688 <__floatunsidf+0x17c>
  8025f4:	21a6983a 	sll	r19,r4,r6
  8025f8:	0025883a 	mov	r18,zero
  8025fc:	00bfffc4 	movi	r2,-1
  802600:	9089883a 	add	r4,r18,r2
  802604:	988b883a 	add	r5,r19,r2
  802608:	248d803a 	cmpltu	r6,r4,r18
  80260c:	314b883a 	add	r5,r6,r5
  802610:	b104703a 	and	r2,r22,r4
  802614:	b946703a 	and	r3,r23,r5
  802618:	10c4b03a 	or	r2,r2,r3
  80261c:	10000226 	beq	r2,zero,802628 <__floatunsidf+0x11c>
  802620:	01c00044 	movi	r7,1
  802624:	0011883a 	mov	r8,zero
  802628:	d9000217 	ldw	r4,8(sp)
  80262c:	a1c4b03a 	or	r2,r20,r7
  802630:	aa06b03a 	or	r3,r21,r8
  802634:	2249c83a 	sub	r4,r4,r9
  802638:	d8c00415 	stw	r3,16(sp)
  80263c:	d9000215 	stw	r4,8(sp)
  802640:	d8800315 	stw	r2,12(sp)
  802644:	003fbf06 	br	802544 <__floatunsidf+0x38>
  802648:	bdc7883a 	add	r3,r23,r23
  80264c:	008007c4 	movi	r2,31
  802650:	1285c83a 	sub	r2,r2,r10
  802654:	1886983a 	sll	r3,r3,r2
  802658:	b2a8d83a 	srl	r20,r22,r10
  80265c:	baaad83a 	srl	r21,r23,r10
  802660:	1d28b03a 	or	r20,r3,r20
  802664:	003fdf06 	br	8025e4 <__floatunsidf+0xd8>
  802668:	b006d07a 	srli	r3,r22,1
  80266c:	008007c4 	movi	r2,31
  802670:	1245c83a 	sub	r2,r2,r9
  802674:	1886d83a 	srl	r3,r3,r2
  802678:	ba62983a 	sll	r17,r23,r9
  80267c:	b260983a 	sll	r16,r22,r9
  802680:	1c62b03a 	or	r17,r3,r17
  802684:	003fcc06 	br	8025b8 <__floatunsidf+0xac>
  802688:	2006d07a 	srli	r3,r4,1
  80268c:	008007c4 	movi	r2,31
  802690:	1285c83a 	sub	r2,r2,r10
  802694:	18a6d83a 	srl	r19,r3,r2
  802698:	22a4983a 	sll	r18,r4,r10
  80269c:	003fd706 	br	8025fc <__floatunsidf+0xf0>

008026a0 <__mulsi3>:
  8026a0:	20000a26 	beq	r4,zero,8026cc <__mulsi3+0x2c>
  8026a4:	0007883a 	mov	r3,zero
  8026a8:	2080004c 	andi	r2,r4,1
  8026ac:	1005003a 	cmpeq	r2,r2,zero
  8026b0:	2008d07a 	srli	r4,r4,1
  8026b4:	1000011e 	bne	r2,zero,8026bc <__mulsi3+0x1c>
  8026b8:	1947883a 	add	r3,r3,r5
  8026bc:	294b883a 	add	r5,r5,r5
  8026c0:	203ff91e 	bne	r4,zero,8026a8 <__mulsi3+0x8>
  8026c4:	1805883a 	mov	r2,r3
  8026c8:	f800283a 	ret
  8026cc:	0007883a 	mov	r3,zero
  8026d0:	1805883a 	mov	r2,r3
  8026d4:	f800283a 	ret

008026d8 <__clzsi2>:
  8026d8:	00bfffd4 	movui	r2,65535
  8026dc:	11000e36 	bltu	r2,r4,802718 <__clzsi2+0x40>
  8026e0:	00803fc4 	movi	r2,255
  8026e4:	01400204 	movi	r5,8
  8026e8:	0007883a 	mov	r3,zero
  8026ec:	11001036 	bltu	r2,r4,802730 <__clzsi2+0x58>
  8026f0:	000b883a 	mov	r5,zero
  8026f4:	20c6d83a 	srl	r3,r4,r3
  8026f8:	00802074 	movhi	r2,129
  8026fc:	10939b04 	addi	r2,r2,20076
  802700:	1887883a 	add	r3,r3,r2
  802704:	18800003 	ldbu	r2,0(r3)
  802708:	00c00804 	movi	r3,32
  80270c:	2885883a 	add	r2,r5,r2
  802710:	1885c83a 	sub	r2,r3,r2
  802714:	f800283a 	ret
  802718:	01400404 	movi	r5,16
  80271c:	00804034 	movhi	r2,256
  802720:	10bfffc4 	addi	r2,r2,-1
  802724:	2807883a 	mov	r3,r5
  802728:	113ff22e 	bgeu	r2,r4,8026f4 <__clzsi2+0x1c>
  80272c:	01400604 	movi	r5,24
  802730:	2807883a 	mov	r3,r5
  802734:	20c6d83a 	srl	r3,r4,r3
  802738:	00802074 	movhi	r2,129
  80273c:	10939b04 	addi	r2,r2,20076
  802740:	1887883a 	add	r3,r3,r2
  802744:	18800003 	ldbu	r2,0(r3)
  802748:	00c00804 	movi	r3,32
  80274c:	2885883a 	add	r2,r5,r2
  802750:	1885c83a 	sub	r2,r3,r2
  802754:	f800283a 	ret

00802758 <__pack_d>:
  802758:	20c00017 	ldw	r3,0(r4)
  80275c:	defffd04 	addi	sp,sp,-12
  802760:	dc000015 	stw	r16,0(sp)
  802764:	dc800215 	stw	r18,8(sp)
  802768:	dc400115 	stw	r17,4(sp)
  80276c:	00800044 	movi	r2,1
  802770:	22000317 	ldw	r8,12(r4)
  802774:	001f883a 	mov	r15,zero
  802778:	22400417 	ldw	r9,16(r4)
  80277c:	24000117 	ldw	r16,4(r4)
  802780:	10c0552e 	bgeu	r2,r3,8028d8 <__pack_d+0x180>
  802784:	00800104 	movi	r2,4
  802788:	18804f26 	beq	r3,r2,8028c8 <__pack_d+0x170>
  80278c:	00800084 	movi	r2,2
  802790:	18800226 	beq	r3,r2,80279c <__pack_d+0x44>
  802794:	4244b03a 	or	r2,r8,r9
  802798:	10001a1e 	bne	r2,zero,802804 <__pack_d+0xac>
  80279c:	000d883a 	mov	r6,zero
  8027a0:	000f883a 	mov	r7,zero
  8027a4:	0011883a 	mov	r8,zero
  8027a8:	00800434 	movhi	r2,16
  8027ac:	10bfffc4 	addi	r2,r2,-1
  8027b0:	301d883a 	mov	r14,r6
  8027b4:	3884703a 	and	r2,r7,r2
  8027b8:	400a953a 	slli	r5,r8,20
  8027bc:	79bffc2c 	andhi	r6,r15,65520
  8027c0:	308cb03a 	or	r6,r6,r2
  8027c4:	00e00434 	movhi	r3,32784
  8027c8:	18ffffc4 	addi	r3,r3,-1
  8027cc:	800497fa 	slli	r2,r16,31
  8027d0:	30c6703a 	and	r3,r6,r3
  8027d4:	1946b03a 	or	r3,r3,r5
  8027d8:	01600034 	movhi	r5,32768
  8027dc:	297fffc4 	addi	r5,r5,-1
  8027e0:	194a703a 	and	r5,r3,r5
  8027e4:	288ab03a 	or	r5,r5,r2
  8027e8:	2807883a 	mov	r3,r5
  8027ec:	7005883a 	mov	r2,r14
  8027f0:	dc800217 	ldw	r18,8(sp)
  8027f4:	dc400117 	ldw	r17,4(sp)
  8027f8:	dc000017 	ldw	r16,0(sp)
  8027fc:	dec00304 	addi	sp,sp,12
  802800:	f800283a 	ret
  802804:	21000217 	ldw	r4,8(r4)
  802808:	00bf0084 	movi	r2,-1022
  80280c:	20803f16 	blt	r4,r2,80290c <__pack_d+0x1b4>
  802810:	0080ffc4 	movi	r2,1023
  802814:	11002c16 	blt	r2,r4,8028c8 <__pack_d+0x170>
  802818:	00803fc4 	movi	r2,255
  80281c:	408c703a 	and	r6,r8,r2
  802820:	00802004 	movi	r2,128
  802824:	0007883a 	mov	r3,zero
  802828:	000f883a 	mov	r7,zero
  80282c:	2280ffc4 	addi	r10,r4,1023
  802830:	30801e26 	beq	r6,r2,8028ac <__pack_d+0x154>
  802834:	00801fc4 	movi	r2,127
  802838:	4089883a 	add	r4,r8,r2
  80283c:	220d803a 	cmpltu	r6,r4,r8
  802840:	324d883a 	add	r6,r6,r9
  802844:	2011883a 	mov	r8,r4
  802848:	3013883a 	mov	r9,r6
  80284c:	00880034 	movhi	r2,8192
  802850:	10bfffc4 	addi	r2,r2,-1
  802854:	12400d36 	bltu	r2,r9,80288c <__pack_d+0x134>
  802858:	4804963a 	slli	r2,r9,24
  80285c:	400cd23a 	srli	r6,r8,8
  802860:	480ed23a 	srli	r7,r9,8
  802864:	013fffc4 	movi	r4,-1
  802868:	118cb03a 	or	r6,r2,r6
  80286c:	01400434 	movhi	r5,16
  802870:	297fffc4 	addi	r5,r5,-1
  802874:	3104703a 	and	r2,r6,r4
  802878:	3946703a 	and	r3,r7,r5
  80287c:	5201ffcc 	andi	r8,r10,2047
  802880:	100d883a 	mov	r6,r2
  802884:	180f883a 	mov	r7,r3
  802888:	003fc706 	br	8027a8 <__pack_d+0x50>
  80288c:	480897fa 	slli	r4,r9,31
  802890:	4004d07a 	srli	r2,r8,1
  802894:	4806d07a 	srli	r3,r9,1
  802898:	52800044 	addi	r10,r10,1
  80289c:	2084b03a 	or	r2,r4,r2
  8028a0:	1011883a 	mov	r8,r2
  8028a4:	1813883a 	mov	r9,r3
  8028a8:	003feb06 	br	802858 <__pack_d+0x100>
  8028ac:	383fe11e 	bne	r7,zero,802834 <__pack_d+0xdc>
  8028b0:	01004004 	movi	r4,256
  8028b4:	4104703a 	and	r2,r8,r4
  8028b8:	10c4b03a 	or	r2,r2,r3
  8028bc:	103fe326 	beq	r2,zero,80284c <__pack_d+0xf4>
  8028c0:	3005883a 	mov	r2,r6
  8028c4:	003fdc06 	br	802838 <__pack_d+0xe0>
  8028c8:	000d883a 	mov	r6,zero
  8028cc:	000f883a 	mov	r7,zero
  8028d0:	0201ffc4 	movi	r8,2047
  8028d4:	003fb406 	br	8027a8 <__pack_d+0x50>
  8028d8:	0005883a 	mov	r2,zero
  8028dc:	00c00234 	movhi	r3,8
  8028e0:	408cb03a 	or	r6,r8,r2
  8028e4:	48ceb03a 	or	r7,r9,r3
  8028e8:	013fffc4 	movi	r4,-1
  8028ec:	01400434 	movhi	r5,16
  8028f0:	297fffc4 	addi	r5,r5,-1
  8028f4:	3104703a 	and	r2,r6,r4
  8028f8:	3946703a 	and	r3,r7,r5
  8028fc:	100d883a 	mov	r6,r2
  802900:	180f883a 	mov	r7,r3
  802904:	0201ffc4 	movi	r8,2047
  802908:	003fa706 	br	8027a8 <__pack_d+0x50>
  80290c:	1109c83a 	sub	r4,r2,r4
  802910:	00800e04 	movi	r2,56
  802914:	11004316 	blt	r2,r4,802a24 <__pack_d+0x2cc>
  802918:	21fff804 	addi	r7,r4,-32
  80291c:	38004516 	blt	r7,zero,802a34 <__pack_d+0x2dc>
  802920:	49d8d83a 	srl	r12,r9,r7
  802924:	001b883a 	mov	r13,zero
  802928:	0023883a 	mov	r17,zero
  80292c:	01400044 	movi	r5,1
  802930:	0025883a 	mov	r18,zero
  802934:	38004716 	blt	r7,zero,802a54 <__pack_d+0x2fc>
  802938:	29d6983a 	sll	r11,r5,r7
  80293c:	0015883a 	mov	r10,zero
  802940:	00bfffc4 	movi	r2,-1
  802944:	5089883a 	add	r4,r10,r2
  802948:	588b883a 	add	r5,r11,r2
  80294c:	228d803a 	cmpltu	r6,r4,r10
  802950:	314b883a 	add	r5,r6,r5
  802954:	4104703a 	and	r2,r8,r4
  802958:	4946703a 	and	r3,r9,r5
  80295c:	10c4b03a 	or	r2,r2,r3
  802960:	10000226 	beq	r2,zero,80296c <__pack_d+0x214>
  802964:	04400044 	movi	r17,1
  802968:	0025883a 	mov	r18,zero
  80296c:	00803fc4 	movi	r2,255
  802970:	644eb03a 	or	r7,r12,r17
  802974:	3892703a 	and	r9,r7,r2
  802978:	00802004 	movi	r2,128
  80297c:	6c90b03a 	or	r8,r13,r18
  802980:	0015883a 	mov	r10,zero
  802984:	48801626 	beq	r9,r2,8029e0 <__pack_d+0x288>
  802988:	01001fc4 	movi	r4,127
  80298c:	3905883a 	add	r2,r7,r4
  802990:	11cd803a 	cmpltu	r6,r2,r7
  802994:	320d883a 	add	r6,r6,r8
  802998:	100f883a 	mov	r7,r2
  80299c:	00840034 	movhi	r2,4096
  8029a0:	10bfffc4 	addi	r2,r2,-1
  8029a4:	3011883a 	mov	r8,r6
  8029a8:	0007883a 	mov	r3,zero
  8029ac:	11801b36 	bltu	r2,r6,802a1c <__pack_d+0x2c4>
  8029b0:	4004963a 	slli	r2,r8,24
  8029b4:	3808d23a 	srli	r4,r7,8
  8029b8:	400ad23a 	srli	r5,r8,8
  8029bc:	1813883a 	mov	r9,r3
  8029c0:	1108b03a 	or	r4,r2,r4
  8029c4:	00bfffc4 	movi	r2,-1
  8029c8:	00c00434 	movhi	r3,16
  8029cc:	18ffffc4 	addi	r3,r3,-1
  8029d0:	208c703a 	and	r6,r4,r2
  8029d4:	28ce703a 	and	r7,r5,r3
  8029d8:	4a01ffcc 	andi	r8,r9,2047
  8029dc:	003f7206 	br	8027a8 <__pack_d+0x50>
  8029e0:	503fe91e 	bne	r10,zero,802988 <__pack_d+0x230>
  8029e4:	01004004 	movi	r4,256
  8029e8:	3904703a 	and	r2,r7,r4
  8029ec:	0007883a 	mov	r3,zero
  8029f0:	10c4b03a 	or	r2,r2,r3
  8029f4:	10000626 	beq	r2,zero,802a10 <__pack_d+0x2b8>
  8029f8:	3a45883a 	add	r2,r7,r9
  8029fc:	11cd803a 	cmpltu	r6,r2,r7
  802a00:	320d883a 	add	r6,r6,r8
  802a04:	100f883a 	mov	r7,r2
  802a08:	3011883a 	mov	r8,r6
  802a0c:	0007883a 	mov	r3,zero
  802a10:	00840034 	movhi	r2,4096
  802a14:	10bfffc4 	addi	r2,r2,-1
  802a18:	123fe52e 	bgeu	r2,r8,8029b0 <__pack_d+0x258>
  802a1c:	00c00044 	movi	r3,1
  802a20:	003fe306 	br	8029b0 <__pack_d+0x258>
  802a24:	0009883a 	mov	r4,zero
  802a28:	0013883a 	mov	r9,zero
  802a2c:	000b883a 	mov	r5,zero
  802a30:	003fe406 	br	8029c4 <__pack_d+0x26c>
  802a34:	4a47883a 	add	r3,r9,r9
  802a38:	008007c4 	movi	r2,31
  802a3c:	1105c83a 	sub	r2,r2,r4
  802a40:	1886983a 	sll	r3,r3,r2
  802a44:	4118d83a 	srl	r12,r8,r4
  802a48:	491ad83a 	srl	r13,r9,r4
  802a4c:	1b18b03a 	or	r12,r3,r12
  802a50:	003fb506 	br	802928 <__pack_d+0x1d0>
  802a54:	2806d07a 	srli	r3,r5,1
  802a58:	008007c4 	movi	r2,31
  802a5c:	1105c83a 	sub	r2,r2,r4
  802a60:	1896d83a 	srl	r11,r3,r2
  802a64:	2914983a 	sll	r10,r5,r4
  802a68:	003fb506 	br	802940 <__pack_d+0x1e8>

00802a6c <__unpack_d>:
  802a6c:	20c00117 	ldw	r3,4(r4)
  802a70:	22400017 	ldw	r9,0(r4)
  802a74:	00800434 	movhi	r2,16
  802a78:	10bfffc4 	addi	r2,r2,-1
  802a7c:	1808d53a 	srli	r4,r3,20
  802a80:	180cd7fa 	srli	r6,r3,31
  802a84:	1894703a 	and	r10,r3,r2
  802a88:	2201ffcc 	andi	r8,r4,2047
  802a8c:	281b883a 	mov	r13,r5
  802a90:	4817883a 	mov	r11,r9
  802a94:	29800115 	stw	r6,4(r5)
  802a98:	5019883a 	mov	r12,r10
  802a9c:	40001e1e 	bne	r8,zero,802b18 <__unpack_d+0xac>
  802aa0:	4a84b03a 	or	r2,r9,r10
  802aa4:	10001926 	beq	r2,zero,802b0c <__unpack_d+0xa0>
  802aa8:	4804d63a 	srli	r2,r9,24
  802aac:	500c923a 	slli	r6,r10,8
  802ab0:	013f0084 	movi	r4,-1022
  802ab4:	00c40034 	movhi	r3,4096
  802ab8:	18ffffc4 	addi	r3,r3,-1
  802abc:	118cb03a 	or	r6,r2,r6
  802ac0:	008000c4 	movi	r2,3
  802ac4:	480a923a 	slli	r5,r9,8
  802ac8:	68800015 	stw	r2,0(r13)
  802acc:	69000215 	stw	r4,8(r13)
  802ad0:	19800b36 	bltu	r3,r6,802b00 <__unpack_d+0x94>
  802ad4:	200f883a 	mov	r7,r4
  802ad8:	1811883a 	mov	r8,r3
  802adc:	2945883a 	add	r2,r5,r5
  802ae0:	1149803a 	cmpltu	r4,r2,r5
  802ae4:	3187883a 	add	r3,r6,r6
  802ae8:	20c9883a 	add	r4,r4,r3
  802aec:	100b883a 	mov	r5,r2
  802af0:	200d883a 	mov	r6,r4
  802af4:	39ffffc4 	addi	r7,r7,-1
  802af8:	413ff82e 	bgeu	r8,r4,802adc <__unpack_d+0x70>
  802afc:	69c00215 	stw	r7,8(r13)
  802b00:	69800415 	stw	r6,16(r13)
  802b04:	69400315 	stw	r5,12(r13)
  802b08:	f800283a 	ret
  802b0c:	00800084 	movi	r2,2
  802b10:	28800015 	stw	r2,0(r5)
  802b14:	f800283a 	ret
  802b18:	0081ffc4 	movi	r2,2047
  802b1c:	40800f26 	beq	r8,r2,802b5c <__unpack_d+0xf0>
  802b20:	480cd63a 	srli	r6,r9,24
  802b24:	5006923a 	slli	r3,r10,8
  802b28:	4804923a 	slli	r2,r9,8
  802b2c:	0009883a 	mov	r4,zero
  802b30:	30c6b03a 	or	r3,r6,r3
  802b34:	01440034 	movhi	r5,4096
  802b38:	110cb03a 	or	r6,r2,r4
  802b3c:	423f0044 	addi	r8,r8,-1023
  802b40:	194eb03a 	or	r7,r3,r5
  802b44:	008000c4 	movi	r2,3
  802b48:	69c00415 	stw	r7,16(r13)
  802b4c:	6a000215 	stw	r8,8(r13)
  802b50:	68800015 	stw	r2,0(r13)
  802b54:	69800315 	stw	r6,12(r13)
  802b58:	f800283a 	ret
  802b5c:	4a84b03a 	or	r2,r9,r10
  802b60:	1000031e 	bne	r2,zero,802b70 <__unpack_d+0x104>
  802b64:	00800104 	movi	r2,4
  802b68:	28800015 	stw	r2,0(r5)
  802b6c:	f800283a 	ret
  802b70:	0009883a 	mov	r4,zero
  802b74:	01400234 	movhi	r5,8
  802b78:	4904703a 	and	r2,r9,r4
  802b7c:	5146703a 	and	r3,r10,r5
  802b80:	10c4b03a 	or	r2,r2,r3
  802b84:	10000526 	beq	r2,zero,802b9c <__unpack_d+0x130>
  802b88:	00800044 	movi	r2,1
  802b8c:	68800015 	stw	r2,0(r13)
  802b90:	6b000415 	stw	r12,16(r13)
  802b94:	6ac00315 	stw	r11,12(r13)
  802b98:	f800283a 	ret
  802b9c:	68000015 	stw	zero,0(r13)
  802ba0:	003ffb06 	br	802b90 <__unpack_d+0x124>

00802ba4 <calloc>:
  802ba4:	01802074 	movhi	r6,129
  802ba8:	319bcd04 	addi	r6,r6,28468
  802bac:	2007883a 	mov	r3,r4
  802bb0:	31000017 	ldw	r4,0(r6)
  802bb4:	280d883a 	mov	r6,r5
  802bb8:	180b883a 	mov	r5,r3
  802bbc:	0802bc01 	jmpi	802bc0 <_calloc_r>

00802bc0 <_calloc_r>:
  802bc0:	defffe04 	addi	sp,sp,-8
  802bc4:	dc400015 	stw	r17,0(sp)
  802bc8:	2023883a 	mov	r17,r4
  802bcc:	2809883a 	mov	r4,r5
  802bd0:	300b883a 	mov	r5,r6
  802bd4:	dfc00115 	stw	ra,4(sp)
  802bd8:	08026a00 	call	8026a0 <__mulsi3>
  802bdc:	100b883a 	mov	r5,r2
  802be0:	8809883a 	mov	r4,r17
  802be4:	08047540 	call	804754 <_malloc_r>
  802be8:	1023883a 	mov	r17,r2
  802bec:	01c00904 	movi	r7,36
  802bf0:	10000d26 	beq	r2,zero,802c28 <_calloc_r+0x68>
  802bf4:	10ffff17 	ldw	r3,-4(r2)
  802bf8:	1009883a 	mov	r4,r2
  802bfc:	00bfff04 	movi	r2,-4
  802c00:	1886703a 	and	r3,r3,r2
  802c04:	1887883a 	add	r3,r3,r2
  802c08:	180d883a 	mov	r6,r3
  802c0c:	000b883a 	mov	r5,zero
  802c10:	38c01736 	bltu	r7,r3,802c70 <_calloc_r+0xb0>
  802c14:	008004c4 	movi	r2,19
  802c18:	10c00836 	bltu	r2,r3,802c3c <_calloc_r+0x7c>
  802c1c:	20000215 	stw	zero,8(r4)
  802c20:	20000015 	stw	zero,0(r4)
  802c24:	20000115 	stw	zero,4(r4)
  802c28:	8805883a 	mov	r2,r17
  802c2c:	dfc00117 	ldw	ra,4(sp)
  802c30:	dc400017 	ldw	r17,0(sp)
  802c34:	dec00204 	addi	sp,sp,8
  802c38:	f800283a 	ret
  802c3c:	008006c4 	movi	r2,27
  802c40:	88000015 	stw	zero,0(r17)
  802c44:	88000115 	stw	zero,4(r17)
  802c48:	89000204 	addi	r4,r17,8
  802c4c:	10fff32e 	bgeu	r2,r3,802c1c <_calloc_r+0x5c>
  802c50:	88000215 	stw	zero,8(r17)
  802c54:	88000315 	stw	zero,12(r17)
  802c58:	89000404 	addi	r4,r17,16
  802c5c:	19ffef1e 	bne	r3,r7,802c1c <_calloc_r+0x5c>
  802c60:	89000604 	addi	r4,r17,24
  802c64:	88000415 	stw	zero,16(r17)
  802c68:	88000515 	stw	zero,20(r17)
  802c6c:	003feb06 	br	802c1c <_calloc_r+0x5c>
  802c70:	08050180 	call	805018 <memset>
  802c74:	8805883a 	mov	r2,r17
  802c78:	dfc00117 	ldw	ra,4(sp)
  802c7c:	dc400017 	ldw	r17,0(sp)
  802c80:	dec00204 	addi	sp,sp,8
  802c84:	f800283a 	ret

00802c88 <clock>:
  802c88:	00802074 	movhi	r2,129
  802c8c:	109bcd04 	addi	r2,r2,28468
  802c90:	11000017 	ldw	r4,0(r2)
  802c94:	defffb04 	addi	sp,sp,-20
  802c98:	d80b883a 	mov	r5,sp
  802c9c:	dfc00415 	stw	ra,16(sp)
  802ca0:	08058c80 	call	8058c8 <_times_r>
  802ca4:	1007883a 	mov	r3,r2
  802ca8:	00bfffc4 	movi	r2,-1
  802cac:	18800726 	beq	r3,r2,802ccc <clock+0x44>
  802cb0:	d8c00117 	ldw	r3,4(sp)
  802cb4:	d9000017 	ldw	r4,0(sp)
  802cb8:	d8800217 	ldw	r2,8(sp)
  802cbc:	20c9883a 	add	r4,r4,r3
  802cc0:	d8c00317 	ldw	r3,12(sp)
  802cc4:	10c5883a 	add	r2,r2,r3
  802cc8:	2087883a 	add	r3,r4,r2
  802ccc:	1805883a 	mov	r2,r3
  802cd0:	dfc00417 	ldw	ra,16(sp)
  802cd4:	dec00504 	addi	sp,sp,20
  802cd8:	f800283a 	ret

00802cdc <exit>:
  802cdc:	defffe04 	addi	sp,sp,-8
  802ce0:	000b883a 	mov	r5,zero
  802ce4:	dc000015 	stw	r16,0(sp)
  802ce8:	dfc00115 	stw	ra,4(sp)
  802cec:	2021883a 	mov	r16,r4
  802cf0:	08093e40 	call	8093e4 <__call_exitprocs>
  802cf4:	00802074 	movhi	r2,129
  802cf8:	109bce04 	addi	r2,r2,28472
  802cfc:	11000017 	ldw	r4,0(r2)
  802d00:	20800f17 	ldw	r2,60(r4)
  802d04:	10000126 	beq	r2,zero,802d0c <exit+0x30>
  802d08:	103ee83a 	callr	r2
  802d0c:	8009883a 	mov	r4,r16
  802d10:	0811ec00 	call	811ec0 <_exit>

00802d14 <_fclose_r>:
  802d14:	defffc04 	addi	sp,sp,-16
  802d18:	dc400115 	stw	r17,4(sp)
  802d1c:	dc000015 	stw	r16,0(sp)
  802d20:	dfc00315 	stw	ra,12(sp)
  802d24:	dc800215 	stw	r18,8(sp)
  802d28:	2821883a 	mov	r16,r5
  802d2c:	2023883a 	mov	r17,r4
  802d30:	28002926 	beq	r5,zero,802dd8 <_fclose_r+0xc4>
  802d34:	08033540 	call	803354 <__sfp_lock_acquire>
  802d38:	88000226 	beq	r17,zero,802d44 <_fclose_r+0x30>
  802d3c:	88800e17 	ldw	r2,56(r17)
  802d40:	10002d26 	beq	r2,zero,802df8 <_fclose_r+0xe4>
  802d44:	8080030f 	ldh	r2,12(r16)
  802d48:	10002226 	beq	r2,zero,802dd4 <_fclose_r+0xc0>
  802d4c:	8809883a 	mov	r4,r17
  802d50:	800b883a 	mov	r5,r16
  802d54:	0802e380 	call	802e38 <_fflush_r>
  802d58:	1025883a 	mov	r18,r2
  802d5c:	80800b17 	ldw	r2,44(r16)
  802d60:	10000426 	beq	r2,zero,802d74 <_fclose_r+0x60>
  802d64:	81400717 	ldw	r5,28(r16)
  802d68:	8809883a 	mov	r4,r17
  802d6c:	103ee83a 	callr	r2
  802d70:	10002a16 	blt	r2,zero,802e1c <_fclose_r+0x108>
  802d74:	8080030b 	ldhu	r2,12(r16)
  802d78:	1080200c 	andi	r2,r2,128
  802d7c:	1000231e 	bne	r2,zero,802e0c <_fclose_r+0xf8>
  802d80:	81400c17 	ldw	r5,48(r16)
  802d84:	28000526 	beq	r5,zero,802d9c <_fclose_r+0x88>
  802d88:	80801004 	addi	r2,r16,64
  802d8c:	28800226 	beq	r5,r2,802d98 <_fclose_r+0x84>
  802d90:	8809883a 	mov	r4,r17
  802d94:	0803ad80 	call	803ad8 <_free_r>
  802d98:	80000c15 	stw	zero,48(r16)
  802d9c:	81401117 	ldw	r5,68(r16)
  802da0:	28000326 	beq	r5,zero,802db0 <_fclose_r+0x9c>
  802da4:	8809883a 	mov	r4,r17
  802da8:	0803ad80 	call	803ad8 <_free_r>
  802dac:	80001115 	stw	zero,68(r16)
  802db0:	8000030d 	sth	zero,12(r16)
  802db4:	08033580 	call	803358 <__sfp_lock_release>
  802db8:	9005883a 	mov	r2,r18
  802dbc:	dfc00317 	ldw	ra,12(sp)
  802dc0:	dc800217 	ldw	r18,8(sp)
  802dc4:	dc400117 	ldw	r17,4(sp)
  802dc8:	dc000017 	ldw	r16,0(sp)
  802dcc:	dec00404 	addi	sp,sp,16
  802dd0:	f800283a 	ret
  802dd4:	08033580 	call	803358 <__sfp_lock_release>
  802dd8:	0025883a 	mov	r18,zero
  802ddc:	9005883a 	mov	r2,r18
  802de0:	dfc00317 	ldw	ra,12(sp)
  802de4:	dc800217 	ldw	r18,8(sp)
  802de8:	dc400117 	ldw	r17,4(sp)
  802dec:	dc000017 	ldw	r16,0(sp)
  802df0:	dec00404 	addi	sp,sp,16
  802df4:	f800283a 	ret
  802df8:	8809883a 	mov	r4,r17
  802dfc:	08033640 	call	803364 <__sinit>
  802e00:	8080030f 	ldh	r2,12(r16)
  802e04:	103fd11e 	bne	r2,zero,802d4c <_fclose_r+0x38>
  802e08:	003ff206 	br	802dd4 <_fclose_r+0xc0>
  802e0c:	81400417 	ldw	r5,16(r16)
  802e10:	8809883a 	mov	r4,r17
  802e14:	0803ad80 	call	803ad8 <_free_r>
  802e18:	003fd906 	br	802d80 <_fclose_r+0x6c>
  802e1c:	04bfffc4 	movi	r18,-1
  802e20:	003fd406 	br	802d74 <_fclose_r+0x60>

00802e24 <fclose>:
  802e24:	00802074 	movhi	r2,129
  802e28:	109bcd04 	addi	r2,r2,28468
  802e2c:	200b883a 	mov	r5,r4
  802e30:	11000017 	ldw	r4,0(r2)
  802e34:	0802d141 	jmpi	802d14 <_fclose_r>

00802e38 <_fflush_r>:
  802e38:	defffb04 	addi	sp,sp,-20
  802e3c:	dcc00315 	stw	r19,12(sp)
  802e40:	dc800215 	stw	r18,8(sp)
  802e44:	dfc00415 	stw	ra,16(sp)
  802e48:	dc400115 	stw	r17,4(sp)
  802e4c:	dc000015 	stw	r16,0(sp)
  802e50:	2027883a 	mov	r19,r4
  802e54:	2825883a 	mov	r18,r5
  802e58:	20000226 	beq	r4,zero,802e64 <_fflush_r+0x2c>
  802e5c:	20800e17 	ldw	r2,56(r4)
  802e60:	10005626 	beq	r2,zero,802fbc <_fflush_r+0x184>
  802e64:	9100030b 	ldhu	r4,12(r18)
  802e68:	20ffffcc 	andi	r3,r4,65535
  802e6c:	18e0001c 	xori	r3,r3,32768
  802e70:	18e00004 	addi	r3,r3,-32768
  802e74:	1880020c 	andi	r2,r3,8
  802e78:	1000261e 	bne	r2,zero,802f14 <_fflush_r+0xdc>
  802e7c:	90c00117 	ldw	r3,4(r18)
  802e80:	20820014 	ori	r2,r4,2048
  802e84:	9080030d 	sth	r2,12(r18)
  802e88:	1009883a 	mov	r4,r2
  802e8c:	00c0400e 	bge	zero,r3,802f90 <_fflush_r+0x158>
  802e90:	92000a17 	ldw	r8,40(r18)
  802e94:	40004026 	beq	r8,zero,802f98 <_fflush_r+0x160>
  802e98:	2084000c 	andi	r2,r4,4096
  802e9c:	10005326 	beq	r2,zero,802fec <_fflush_r+0x1b4>
  802ea0:	94001417 	ldw	r16,80(r18)
  802ea4:	9080030b 	ldhu	r2,12(r18)
  802ea8:	1080010c 	andi	r2,r2,4
  802eac:	1000481e 	bne	r2,zero,802fd0 <_fflush_r+0x198>
  802eb0:	91400717 	ldw	r5,28(r18)
  802eb4:	9809883a 	mov	r4,r19
  802eb8:	800d883a 	mov	r6,r16
  802ebc:	000f883a 	mov	r7,zero
  802ec0:	403ee83a 	callr	r8
  802ec4:	8080261e 	bne	r16,r2,802f60 <_fflush_r+0x128>
  802ec8:	9080030b 	ldhu	r2,12(r18)
  802ecc:	91000417 	ldw	r4,16(r18)
  802ed0:	90000115 	stw	zero,4(r18)
  802ed4:	10bdffcc 	andi	r2,r2,63487
  802ed8:	10ffffcc 	andi	r3,r2,65535
  802edc:	18c4000c 	andi	r3,r3,4096
  802ee0:	9080030d 	sth	r2,12(r18)
  802ee4:	91000015 	stw	r4,0(r18)
  802ee8:	18002b26 	beq	r3,zero,802f98 <_fflush_r+0x160>
  802eec:	0007883a 	mov	r3,zero
  802ef0:	1805883a 	mov	r2,r3
  802ef4:	94001415 	stw	r16,80(r18)
  802ef8:	dfc00417 	ldw	ra,16(sp)
  802efc:	dcc00317 	ldw	r19,12(sp)
  802f00:	dc800217 	ldw	r18,8(sp)
  802f04:	dc400117 	ldw	r17,4(sp)
  802f08:	dc000017 	ldw	r16,0(sp)
  802f0c:	dec00504 	addi	sp,sp,20
  802f10:	f800283a 	ret
  802f14:	94400417 	ldw	r17,16(r18)
  802f18:	88001f26 	beq	r17,zero,802f98 <_fflush_r+0x160>
  802f1c:	90800017 	ldw	r2,0(r18)
  802f20:	18c000cc 	andi	r3,r3,3
  802f24:	94400015 	stw	r17,0(r18)
  802f28:	1461c83a 	sub	r16,r2,r17
  802f2c:	18002526 	beq	r3,zero,802fc4 <_fflush_r+0x18c>
  802f30:	0005883a 	mov	r2,zero
  802f34:	90800215 	stw	r2,8(r18)
  802f38:	0400170e 	bge	zero,r16,802f98 <_fflush_r+0x160>
  802f3c:	90c00917 	ldw	r3,36(r18)
  802f40:	91400717 	ldw	r5,28(r18)
  802f44:	880d883a 	mov	r6,r17
  802f48:	800f883a 	mov	r7,r16
  802f4c:	9809883a 	mov	r4,r19
  802f50:	183ee83a 	callr	r3
  802f54:	88a3883a 	add	r17,r17,r2
  802f58:	80a1c83a 	sub	r16,r16,r2
  802f5c:	00bff616 	blt	zero,r2,802f38 <_fflush_r+0x100>
  802f60:	9080030b 	ldhu	r2,12(r18)
  802f64:	00ffffc4 	movi	r3,-1
  802f68:	10801014 	ori	r2,r2,64
  802f6c:	9080030d 	sth	r2,12(r18)
  802f70:	1805883a 	mov	r2,r3
  802f74:	dfc00417 	ldw	ra,16(sp)
  802f78:	dcc00317 	ldw	r19,12(sp)
  802f7c:	dc800217 	ldw	r18,8(sp)
  802f80:	dc400117 	ldw	r17,4(sp)
  802f84:	dc000017 	ldw	r16,0(sp)
  802f88:	dec00504 	addi	sp,sp,20
  802f8c:	f800283a 	ret
  802f90:	90800f17 	ldw	r2,60(r18)
  802f94:	00bfbe16 	blt	zero,r2,802e90 <_fflush_r+0x58>
  802f98:	0007883a 	mov	r3,zero
  802f9c:	1805883a 	mov	r2,r3
  802fa0:	dfc00417 	ldw	ra,16(sp)
  802fa4:	dcc00317 	ldw	r19,12(sp)
  802fa8:	dc800217 	ldw	r18,8(sp)
  802fac:	dc400117 	ldw	r17,4(sp)
  802fb0:	dc000017 	ldw	r16,0(sp)
  802fb4:	dec00504 	addi	sp,sp,20
  802fb8:	f800283a 	ret
  802fbc:	08033640 	call	803364 <__sinit>
  802fc0:	003fa806 	br	802e64 <_fflush_r+0x2c>
  802fc4:	90800517 	ldw	r2,20(r18)
  802fc8:	90800215 	stw	r2,8(r18)
  802fcc:	003fda06 	br	802f38 <_fflush_r+0x100>
  802fd0:	90800117 	ldw	r2,4(r18)
  802fd4:	90c00c17 	ldw	r3,48(r18)
  802fd8:	80a1c83a 	sub	r16,r16,r2
  802fdc:	183fb426 	beq	r3,zero,802eb0 <_fflush_r+0x78>
  802fe0:	90800f17 	ldw	r2,60(r18)
  802fe4:	80a1c83a 	sub	r16,r16,r2
  802fe8:	003fb106 	br	802eb0 <_fflush_r+0x78>
  802fec:	91400717 	ldw	r5,28(r18)
  802ff0:	9809883a 	mov	r4,r19
  802ff4:	000d883a 	mov	r6,zero
  802ff8:	01c00044 	movi	r7,1
  802ffc:	403ee83a 	callr	r8
  803000:	1021883a 	mov	r16,r2
  803004:	00bfffc4 	movi	r2,-1
  803008:	80800226 	beq	r16,r2,803014 <_fflush_r+0x1dc>
  80300c:	92000a17 	ldw	r8,40(r18)
  803010:	003fa406 	br	802ea4 <_fflush_r+0x6c>
  803014:	98c00017 	ldw	r3,0(r19)
  803018:	00800744 	movi	r2,29
  80301c:	18bfde26 	beq	r3,r2,802f98 <_fflush_r+0x160>
  803020:	9080030b 	ldhu	r2,12(r18)
  803024:	8007883a 	mov	r3,r16
  803028:	10801014 	ori	r2,r2,64
  80302c:	9080030d 	sth	r2,12(r18)
  803030:	003fcf06 	br	802f70 <_fflush_r+0x138>

00803034 <fflush>:
  803034:	01402034 	movhi	r5,128
  803038:	294b8e04 	addi	r5,r5,11832
  80303c:	2007883a 	mov	r3,r4
  803040:	20000526 	beq	r4,zero,803058 <fflush+0x24>
  803044:	00802074 	movhi	r2,129
  803048:	109bcd04 	addi	r2,r2,28468
  80304c:	11000017 	ldw	r4,0(r2)
  803050:	180b883a 	mov	r5,r3
  803054:	0802e381 	jmpi	802e38 <_fflush_r>
  803058:	00802074 	movhi	r2,129
  80305c:	109bce04 	addi	r2,r2,28472
  803060:	11000017 	ldw	r4,0(r2)
  803064:	080432c1 	jmpi	80432c <_fwalk_reent>

00803068 <fgetc>:
  803068:	defffd04 	addi	sp,sp,-12
  80306c:	dc400115 	stw	r17,4(sp)
  803070:	04402074 	movhi	r17,129
  803074:	8c5bcd04 	addi	r17,r17,28468
  803078:	88c00017 	ldw	r3,0(r17)
  80307c:	dc000015 	stw	r16,0(sp)
  803080:	dfc00215 	stw	ra,8(sp)
  803084:	2021883a 	mov	r16,r4
  803088:	18000326 	beq	r3,zero,803098 <fgetc+0x30>
  80308c:	18800e17 	ldw	r2,56(r3)
  803090:	1809883a 	mov	r4,r3
  803094:	10000e26 	beq	r2,zero,8030d0 <fgetc+0x68>
  803098:	80800117 	ldw	r2,4(r16)
  80309c:	800b883a 	mov	r5,r16
  8030a0:	10bfffc4 	addi	r2,r2,-1
  8030a4:	80800115 	stw	r2,4(r16)
  8030a8:	10000f16 	blt	r2,zero,8030e8 <fgetc+0x80>
  8030ac:	80c00017 	ldw	r3,0(r16)
  8030b0:	18800003 	ldbu	r2,0(r3)
  8030b4:	18c00044 	addi	r3,r3,1
  8030b8:	80c00015 	stw	r3,0(r16)
  8030bc:	dfc00217 	ldw	ra,8(sp)
  8030c0:	dc400117 	ldw	r17,4(sp)
  8030c4:	dc000017 	ldw	r16,0(sp)
  8030c8:	dec00304 	addi	sp,sp,12
  8030cc:	f800283a 	ret
  8030d0:	08033640 	call	803364 <__sinit>
  8030d4:	80800117 	ldw	r2,4(r16)
  8030d8:	800b883a 	mov	r5,r16
  8030dc:	10bfffc4 	addi	r2,r2,-1
  8030e0:	80800115 	stw	r2,4(r16)
  8030e4:	103ff10e 	bge	r2,zero,8030ac <fgetc+0x44>
  8030e8:	89000017 	ldw	r4,0(r17)
  8030ec:	dfc00217 	ldw	ra,8(sp)
  8030f0:	dc400117 	ldw	r17,4(sp)
  8030f4:	dc000017 	ldw	r16,0(sp)
  8030f8:	dec00304 	addi	sp,sp,12
  8030fc:	08054341 	jmpi	805434 <__srget_r>

00803100 <_fgetc_r>:
  803100:	defffd04 	addi	sp,sp,-12
  803104:	dc400115 	stw	r17,4(sp)
  803108:	dc000015 	stw	r16,0(sp)
  80310c:	dfc00215 	stw	ra,8(sp)
  803110:	2021883a 	mov	r16,r4
  803114:	2823883a 	mov	r17,r5
  803118:	20000226 	beq	r4,zero,803124 <_fgetc_r+0x24>
  80311c:	20800e17 	ldw	r2,56(r4)
  803120:	10000f26 	beq	r2,zero,803160 <_fgetc_r+0x60>
  803124:	88800117 	ldw	r2,4(r17)
  803128:	8009883a 	mov	r4,r16
  80312c:	880b883a 	mov	r5,r17
  803130:	10bfffc4 	addi	r2,r2,-1
  803134:	88800115 	stw	r2,4(r17)
  803138:	10001016 	blt	r2,zero,80317c <_fgetc_r+0x7c>
  80313c:	88c00017 	ldw	r3,0(r17)
  803140:	18800003 	ldbu	r2,0(r3)
  803144:	18c00044 	addi	r3,r3,1
  803148:	88c00015 	stw	r3,0(r17)
  80314c:	dfc00217 	ldw	ra,8(sp)
  803150:	dc400117 	ldw	r17,4(sp)
  803154:	dc000017 	ldw	r16,0(sp)
  803158:	dec00304 	addi	sp,sp,12
  80315c:	f800283a 	ret
  803160:	08033640 	call	803364 <__sinit>
  803164:	88800117 	ldw	r2,4(r17)
  803168:	8009883a 	mov	r4,r16
  80316c:	880b883a 	mov	r5,r17
  803170:	10bfffc4 	addi	r2,r2,-1
  803174:	88800115 	stw	r2,4(r17)
  803178:	103ff00e 	bge	r2,zero,80313c <_fgetc_r+0x3c>
  80317c:	dfc00217 	ldw	ra,8(sp)
  803180:	dc400117 	ldw	r17,4(sp)
  803184:	dc000017 	ldw	r16,0(sp)
  803188:	dec00304 	addi	sp,sp,12
  80318c:	08054341 	jmpi	805434 <__srget_r>

00803190 <_fgets_r>:
  803190:	defff804 	addi	sp,sp,-32
  803194:	00800044 	movi	r2,1
  803198:	dd800615 	stw	r22,24(sp)
  80319c:	dd400515 	stw	r21,20(sp)
  8031a0:	dc400115 	stw	r17,4(sp)
  8031a4:	dc000015 	stw	r16,0(sp)
  8031a8:	dfc00715 	stw	ra,28(sp)
  8031ac:	dd000415 	stw	r20,16(sp)
  8031b0:	dcc00315 	stw	r19,12(sp)
  8031b4:	dc800215 	stw	r18,8(sp)
  8031b8:	3021883a 	mov	r16,r6
  8031bc:	282d883a 	mov	r22,r5
  8031c0:	3823883a 	mov	r17,r7
  8031c4:	202b883a 	mov	r21,r4
  8031c8:	1180410e 	bge	r2,r6,8032d0 <_fgets_r+0x140>
  8031cc:	20000226 	beq	r4,zero,8031d8 <_fgets_r+0x48>
  8031d0:	20800e17 	ldw	r2,56(r4)
  8031d4:	10002e26 	beq	r2,zero,803290 <_fgets_r+0x100>
  8031d8:	853fffc4 	addi	r20,r16,-1
  8031dc:	b027883a 	mov	r19,r22
  8031e0:	88800117 	ldw	r2,4(r17)
  8031e4:	a809883a 	mov	r4,r21
  8031e8:	880b883a 	mov	r5,r17
  8031ec:	100d883a 	mov	r6,r2
  8031f0:	1000031e 	bne	r2,zero,803200 <_fgets_r+0x70>
  8031f4:	08052540 	call	805254 <__srefill_r>
  8031f8:	1000341e 	bne	r2,zero,8032cc <_fgets_r+0x13c>
  8031fc:	89800117 	ldw	r6,4(r17)
  803200:	01400284 	movi	r5,10
  803204:	3021883a 	mov	r16,r6
  803208:	8c800017 	ldw	r18,0(r17)
  80320c:	a180012e 	bgeu	r20,r6,803214 <_fgets_r+0x84>
  803210:	a021883a 	mov	r16,r20
  803214:	9009883a 	mov	r4,r18
  803218:	800d883a 	mov	r6,r16
  80321c:	0804e940 	call	804e94 <memchr>
  803220:	1007883a 	mov	r3,r2
  803224:	900b883a 	mov	r5,r18
  803228:	9809883a 	mov	r4,r19
  80322c:	800d883a 	mov	r6,r16
  803230:	1000191e 	bne	r2,zero,803298 <_fgets_r+0x108>
  803234:	88800117 	ldw	r2,4(r17)
  803238:	88c00017 	ldw	r3,0(r17)
  80323c:	9c27883a 	add	r19,r19,r16
  803240:	1405c83a 	sub	r2,r2,r16
  803244:	1c07883a 	add	r3,r3,r16
  803248:	88c00015 	stw	r3,0(r17)
  80324c:	88800115 	stw	r2,4(r17)
  803250:	0804f780 	call	804f78 <memcpy>
  803254:	a407c83a 	sub	r3,r20,r16
  803258:	1829883a 	mov	r20,r3
  80325c:	183fe01e 	bne	r3,zero,8031e0 <_fgets_r+0x50>
  803260:	98000005 	stb	zero,0(r19)
  803264:	b005883a 	mov	r2,r22
  803268:	dfc00717 	ldw	ra,28(sp)
  80326c:	dd800617 	ldw	r22,24(sp)
  803270:	dd400517 	ldw	r21,20(sp)
  803274:	dd000417 	ldw	r20,16(sp)
  803278:	dcc00317 	ldw	r19,12(sp)
  80327c:	dc800217 	ldw	r18,8(sp)
  803280:	dc400117 	ldw	r17,4(sp)
  803284:	dc000017 	ldw	r16,0(sp)
  803288:	dec00804 	addi	sp,sp,32
  80328c:	f800283a 	ret
  803290:	08033640 	call	803364 <__sinit>
  803294:	003fd006 	br	8031d8 <_fgets_r+0x48>
  803298:	88800117 	ldw	r2,4(r17)
  80329c:	18c00044 	addi	r3,r3,1
  8032a0:	1ca1c83a 	sub	r16,r3,r18
  8032a4:	1405c83a 	sub	r2,r2,r16
  8032a8:	800d883a 	mov	r6,r16
  8032ac:	88c00015 	stw	r3,0(r17)
  8032b0:	88800115 	stw	r2,4(r17)
  8032b4:	900b883a 	mov	r5,r18
  8032b8:	9809883a 	mov	r4,r19
  8032bc:	0804f780 	call	804f78 <memcpy>
  8032c0:	9c21883a 	add	r16,r19,r16
  8032c4:	80000005 	stb	zero,0(r16)
  8032c8:	003fe606 	br	803264 <_fgets_r+0xd4>
  8032cc:	9dbfe41e 	bne	r19,r22,803260 <_fgets_r+0xd0>
  8032d0:	002d883a 	mov	r22,zero
  8032d4:	003fe306 	br	803264 <_fgets_r+0xd4>

008032d8 <fgets>:
  8032d8:	00802074 	movhi	r2,129
  8032dc:	109bcd04 	addi	r2,r2,28468
  8032e0:	2013883a 	mov	r9,r4
  8032e4:	11000017 	ldw	r4,0(r2)
  8032e8:	2805883a 	mov	r2,r5
  8032ec:	300f883a 	mov	r7,r6
  8032f0:	480b883a 	mov	r5,r9
  8032f4:	100d883a 	mov	r6,r2
  8032f8:	08031901 	jmpi	803190 <_fgets_r>

008032fc <std>:
  8032fc:	00802034 	movhi	r2,128
  803300:	10958604 	addi	r2,r2,22040
  803304:	20800b15 	stw	r2,44(r4)
  803308:	00802034 	movhi	r2,128
  80330c:	1095c104 	addi	r2,r2,22276
  803310:	20800815 	stw	r2,32(r4)
  803314:	00c02034 	movhi	r3,128
  803318:	18d5a204 	addi	r3,r3,22152
  80331c:	00802034 	movhi	r2,128
  803320:	10958804 	addi	r2,r2,22048
  803324:	2140030d 	sth	r5,12(r4)
  803328:	2180038d 	sth	r6,14(r4)
  80332c:	20c00915 	stw	r3,36(r4)
  803330:	20800a15 	stw	r2,40(r4)
  803334:	20000015 	stw	zero,0(r4)
  803338:	20000115 	stw	zero,4(r4)
  80333c:	20000215 	stw	zero,8(r4)
  803340:	20000415 	stw	zero,16(r4)
  803344:	20000515 	stw	zero,20(r4)
  803348:	20000615 	stw	zero,24(r4)
  80334c:	21000715 	stw	r4,28(r4)
  803350:	f800283a 	ret

00803354 <__sfp_lock_acquire>:
  803354:	f800283a 	ret

00803358 <__sfp_lock_release>:
  803358:	f800283a 	ret

0080335c <__sinit_lock_acquire>:
  80335c:	f800283a 	ret

00803360 <__sinit_lock_release>:
  803360:	f800283a 	ret

00803364 <__sinit>:
  803364:	20800e17 	ldw	r2,56(r4)
  803368:	defffd04 	addi	sp,sp,-12
  80336c:	dc400115 	stw	r17,4(sp)
  803370:	dc000015 	stw	r16,0(sp)
  803374:	dfc00215 	stw	ra,8(sp)
  803378:	04400044 	movi	r17,1
  80337c:	01400104 	movi	r5,4
  803380:	000d883a 	mov	r6,zero
  803384:	2021883a 	mov	r16,r4
  803388:	2200bb04 	addi	r8,r4,748
  80338c:	200f883a 	mov	r7,r4
  803390:	10000526 	beq	r2,zero,8033a8 <__sinit+0x44>
  803394:	dfc00217 	ldw	ra,8(sp)
  803398:	dc400117 	ldw	r17,4(sp)
  80339c:	dc000017 	ldw	r16,0(sp)
  8033a0:	dec00304 	addi	sp,sp,12
  8033a4:	f800283a 	ret
  8033a8:	21000117 	ldw	r4,4(r4)
  8033ac:	00802034 	movhi	r2,128
  8033b0:	108d1204 	addi	r2,r2,13384
  8033b4:	00c000c4 	movi	r3,3
  8033b8:	80800f15 	stw	r2,60(r16)
  8033bc:	80c0b915 	stw	r3,740(r16)
  8033c0:	8200ba15 	stw	r8,744(r16)
  8033c4:	84400e15 	stw	r17,56(r16)
  8033c8:	8000b815 	stw	zero,736(r16)
  8033cc:	08032fc0 	call	8032fc <std>
  8033d0:	81000217 	ldw	r4,8(r16)
  8033d4:	880d883a 	mov	r6,r17
  8033d8:	800f883a 	mov	r7,r16
  8033dc:	01400284 	movi	r5,10
  8033e0:	08032fc0 	call	8032fc <std>
  8033e4:	81000317 	ldw	r4,12(r16)
  8033e8:	800f883a 	mov	r7,r16
  8033ec:	01400484 	movi	r5,18
  8033f0:	01800084 	movi	r6,2
  8033f4:	dfc00217 	ldw	ra,8(sp)
  8033f8:	dc400117 	ldw	r17,4(sp)
  8033fc:	dc000017 	ldw	r16,0(sp)
  803400:	dec00304 	addi	sp,sp,12
  803404:	08032fc1 	jmpi	8032fc <std>

00803408 <__fp_lock>:
  803408:	0005883a 	mov	r2,zero
  80340c:	f800283a 	ret

00803410 <__fp_unlock>:
  803410:	0005883a 	mov	r2,zero
  803414:	f800283a 	ret

00803418 <__fp_unlock_all>:
  803418:	00802074 	movhi	r2,129
  80341c:	109bcd04 	addi	r2,r2,28468
  803420:	11000017 	ldw	r4,0(r2)
  803424:	01402034 	movhi	r5,128
  803428:	294d0404 	addi	r5,r5,13328
  80342c:	08043f41 	jmpi	8043f4 <_fwalk>

00803430 <__fp_lock_all>:
  803430:	00802074 	movhi	r2,129
  803434:	109bcd04 	addi	r2,r2,28468
  803438:	11000017 	ldw	r4,0(r2)
  80343c:	01402034 	movhi	r5,128
  803440:	294d0204 	addi	r5,r5,13320
  803444:	08043f41 	jmpi	8043f4 <_fwalk>

00803448 <_cleanup_r>:
  803448:	01402034 	movhi	r5,128
  80344c:	294b8904 	addi	r5,r5,11812
  803450:	08043f41 	jmpi	8043f4 <_fwalk>

00803454 <_cleanup>:
  803454:	00802074 	movhi	r2,129
  803458:	109bce04 	addi	r2,r2,28472
  80345c:	11000017 	ldw	r4,0(r2)
  803460:	08034481 	jmpi	803448 <_cleanup_r>

00803464 <__sfmoreglue>:
  803464:	defffc04 	addi	sp,sp,-16
  803468:	dc000015 	stw	r16,0(sp)
  80346c:	2821883a 	mov	r16,r5
  803470:	dc400115 	stw	r17,4(sp)
  803474:	01401704 	movi	r5,92
  803478:	2023883a 	mov	r17,r4
  80347c:	8009883a 	mov	r4,r16
  803480:	dfc00315 	stw	ra,12(sp)
  803484:	dcc00215 	stw	r19,8(sp)
  803488:	08026a00 	call	8026a0 <__mulsi3>
  80348c:	11400304 	addi	r5,r2,12
  803490:	8809883a 	mov	r4,r17
  803494:	1027883a 	mov	r19,r2
  803498:	08047540 	call	804754 <_malloc_r>
  80349c:	10c00304 	addi	r3,r2,12
  8034a0:	1023883a 	mov	r17,r2
  8034a4:	1809883a 	mov	r4,r3
  8034a8:	980d883a 	mov	r6,r19
  8034ac:	000b883a 	mov	r5,zero
  8034b0:	10000b26 	beq	r2,zero,8034e0 <__sfmoreglue+0x7c>
  8034b4:	14000115 	stw	r16,4(r2)
  8034b8:	10c00215 	stw	r3,8(r2)
  8034bc:	10000015 	stw	zero,0(r2)
  8034c0:	08050180 	call	805018 <memset>
  8034c4:	8805883a 	mov	r2,r17
  8034c8:	dfc00317 	ldw	ra,12(sp)
  8034cc:	dcc00217 	ldw	r19,8(sp)
  8034d0:	dc400117 	ldw	r17,4(sp)
  8034d4:	dc000017 	ldw	r16,0(sp)
  8034d8:	dec00404 	addi	sp,sp,16
  8034dc:	f800283a 	ret
  8034e0:	0023883a 	mov	r17,zero
  8034e4:	8805883a 	mov	r2,r17
  8034e8:	dfc00317 	ldw	ra,12(sp)
  8034ec:	dcc00217 	ldw	r19,8(sp)
  8034f0:	dc400117 	ldw	r17,4(sp)
  8034f4:	dc000017 	ldw	r16,0(sp)
  8034f8:	dec00404 	addi	sp,sp,16
  8034fc:	f800283a 	ret

00803500 <__sfp>:
  803500:	defffd04 	addi	sp,sp,-12
  803504:	00802074 	movhi	r2,129
  803508:	109bce04 	addi	r2,r2,28472
  80350c:	dc000015 	stw	r16,0(sp)
  803510:	14000017 	ldw	r16,0(r2)
  803514:	dc400115 	stw	r17,4(sp)
  803518:	dfc00215 	stw	ra,8(sp)
  80351c:	80800e17 	ldw	r2,56(r16)
  803520:	2023883a 	mov	r17,r4
  803524:	10002626 	beq	r2,zero,8035c0 <__sfp+0xc0>
  803528:	8400b804 	addi	r16,r16,736
  80352c:	80800117 	ldw	r2,4(r16)
  803530:	81000217 	ldw	r4,8(r16)
  803534:	10ffffc4 	addi	r3,r2,-1
  803538:	18000916 	blt	r3,zero,803560 <__sfp+0x60>
  80353c:	2080030f 	ldh	r2,12(r4)
  803540:	10000b26 	beq	r2,zero,803570 <__sfp+0x70>
  803544:	017fffc4 	movi	r5,-1
  803548:	00000206 	br	803554 <__sfp+0x54>
  80354c:	2080030f 	ldh	r2,12(r4)
  803550:	10000726 	beq	r2,zero,803570 <__sfp+0x70>
  803554:	18ffffc4 	addi	r3,r3,-1
  803558:	21001704 	addi	r4,r4,92
  80355c:	197ffb1e 	bne	r3,r5,80354c <__sfp+0x4c>
  803560:	80800017 	ldw	r2,0(r16)
  803564:	10001926 	beq	r2,zero,8035cc <__sfp+0xcc>
  803568:	1021883a 	mov	r16,r2
  80356c:	003fef06 	br	80352c <__sfp+0x2c>
  803570:	00bfffc4 	movi	r2,-1
  803574:	00c00044 	movi	r3,1
  803578:	2080038d 	sth	r2,14(r4)
  80357c:	20c0030d 	sth	r3,12(r4)
  803580:	20000015 	stw	zero,0(r4)
  803584:	20000215 	stw	zero,8(r4)
  803588:	20000115 	stw	zero,4(r4)
  80358c:	20000415 	stw	zero,16(r4)
  803590:	20000515 	stw	zero,20(r4)
  803594:	20000615 	stw	zero,24(r4)
  803598:	20000c15 	stw	zero,48(r4)
  80359c:	20000d15 	stw	zero,52(r4)
  8035a0:	20001115 	stw	zero,68(r4)
  8035a4:	20001215 	stw	zero,72(r4)
  8035a8:	2005883a 	mov	r2,r4
  8035ac:	dfc00217 	ldw	ra,8(sp)
  8035b0:	dc400117 	ldw	r17,4(sp)
  8035b4:	dc000017 	ldw	r16,0(sp)
  8035b8:	dec00304 	addi	sp,sp,12
  8035bc:	f800283a 	ret
  8035c0:	8009883a 	mov	r4,r16
  8035c4:	08033640 	call	803364 <__sinit>
  8035c8:	003fd706 	br	803528 <__sfp+0x28>
  8035cc:	8809883a 	mov	r4,r17
  8035d0:	01400104 	movi	r5,4
  8035d4:	08034640 	call	803464 <__sfmoreglue>
  8035d8:	80800015 	stw	r2,0(r16)
  8035dc:	103fe21e 	bne	r2,zero,803568 <__sfp+0x68>
  8035e0:	00800304 	movi	r2,12
  8035e4:	0009883a 	mov	r4,zero
  8035e8:	88800015 	stw	r2,0(r17)
  8035ec:	003fee06 	br	8035a8 <__sfp+0xa8>

008035f0 <_fopen_r>:
  8035f0:	defffa04 	addi	sp,sp,-24
  8035f4:	dcc00415 	stw	r19,16(sp)
  8035f8:	2827883a 	mov	r19,r5
  8035fc:	300b883a 	mov	r5,r6
  803600:	d80d883a 	mov	r6,sp
  803604:	dc800315 	stw	r18,12(sp)
  803608:	dc400215 	stw	r17,8(sp)
  80360c:	dc000115 	stw	r16,4(sp)
  803610:	dfc00515 	stw	ra,20(sp)
  803614:	2021883a 	mov	r16,r4
  803618:	080adfc0 	call	80adfc <__sflags>
  80361c:	1025883a 	mov	r18,r2
  803620:	8009883a 	mov	r4,r16
  803624:	0023883a 	mov	r17,zero
  803628:	1000081e 	bne	r2,zero,80364c <_fopen_r+0x5c>
  80362c:	8805883a 	mov	r2,r17
  803630:	dfc00517 	ldw	ra,20(sp)
  803634:	dcc00417 	ldw	r19,16(sp)
  803638:	dc800317 	ldw	r18,12(sp)
  80363c:	dc400217 	ldw	r17,8(sp)
  803640:	dc000117 	ldw	r16,4(sp)
  803644:	dec00604 	addi	sp,sp,24
  803648:	f800283a 	ret
  80364c:	08035000 	call	803500 <__sfp>
  803650:	1023883a 	mov	r17,r2
  803654:	980b883a 	mov	r5,r19
  803658:	8009883a 	mov	r4,r16
  80365c:	01c06d84 	movi	r7,438
  803660:	103ff226 	beq	r2,zero,80362c <_fopen_r+0x3c>
  803664:	d9800017 	ldw	r6,0(sp)
  803668:	08050b00 	call	8050b0 <_open_r>
  80366c:	10001816 	blt	r2,zero,8036d0 <_fopen_r+0xe0>
  803670:	00c02034 	movhi	r3,128
  803674:	18d5a204 	addi	r3,r3,22152
  803678:	923fffcc 	andi	r8,r18,65535
  80367c:	8880038d 	sth	r2,14(r17)
  803680:	00802034 	movhi	r2,128
  803684:	1095c104 	addi	r2,r2,22276
  803688:	88800815 	stw	r2,32(r17)
  80368c:	88c00915 	stw	r3,36(r17)
  803690:	00802034 	movhi	r2,128
  803694:	10958804 	addi	r2,r2,22048
  803698:	00c02034 	movhi	r3,128
  80369c:	18d58604 	addi	r3,r3,22040
  8036a0:	4200400c 	andi	r8,r8,256
  8036a4:	8c80030d 	sth	r18,12(r17)
  8036a8:	8009883a 	mov	r4,r16
  8036ac:	880b883a 	mov	r5,r17
  8036b0:	000d883a 	mov	r6,zero
  8036b4:	01c00084 	movi	r7,2
  8036b8:	88800a15 	stw	r2,40(r17)
  8036bc:	88c00b15 	stw	r3,44(r17)
  8036c0:	8c400715 	stw	r17,28(r17)
  8036c4:	403fd926 	beq	r8,zero,80362c <_fopen_r+0x3c>
  8036c8:	0803e580 	call	803e58 <_fseek_r>
  8036cc:	003fd706 	br	80362c <_fopen_r+0x3c>
  8036d0:	08033540 	call	803354 <__sfp_lock_acquire>
  8036d4:	8800030d 	sth	zero,12(r17)
  8036d8:	08033580 	call	803358 <__sfp_lock_release>
  8036dc:	0023883a 	mov	r17,zero
  8036e0:	003fd206 	br	80362c <_fopen_r+0x3c>

008036e4 <fopen>:
  8036e4:	01802074 	movhi	r6,129
  8036e8:	319bcd04 	addi	r6,r6,28468
  8036ec:	2007883a 	mov	r3,r4
  8036f0:	31000017 	ldw	r4,0(r6)
  8036f4:	280d883a 	mov	r6,r5
  8036f8:	180b883a 	mov	r5,r3
  8036fc:	08035f01 	jmpi	8035f0 <_fopen_r>

00803700 <fprintf>:
  803700:	defffc04 	addi	sp,sp,-16
  803704:	dfc00115 	stw	ra,4(sp)
  803708:	d9800215 	stw	r6,8(sp)
  80370c:	d9c00315 	stw	r7,12(sp)
  803710:	d8800204 	addi	r2,sp,8
  803714:	100d883a 	mov	r6,r2
  803718:	d8800015 	stw	r2,0(sp)
  80371c:	0807a800 	call	807a80 <__vfprintf_internal>
  803720:	dfc00117 	ldw	ra,4(sp)
  803724:	dec00404 	addi	sp,sp,16
  803728:	f800283a 	ret

0080372c <_fprintf_r>:
  80372c:	defffd04 	addi	sp,sp,-12
  803730:	2807883a 	mov	r3,r5
  803734:	dfc00115 	stw	ra,4(sp)
  803738:	d9c00215 	stw	r7,8(sp)
  80373c:	d8800204 	addi	r2,sp,8
  803740:	300b883a 	mov	r5,r6
  803744:	1809883a 	mov	r4,r3
  803748:	100d883a 	mov	r6,r2
  80374c:	d8800015 	stw	r2,0(sp)
  803750:	0807a800 	call	807a80 <__vfprintf_internal>
  803754:	dfc00117 	ldw	ra,4(sp)
  803758:	dec00304 	addi	sp,sp,12
  80375c:	f800283a 	ret

00803760 <_fread_r>:
  803760:	defff504 	addi	sp,sp,-44
  803764:	dd800715 	stw	r22,28(sp)
  803768:	dc000115 	stw	r16,4(sp)
  80376c:	202d883a 	mov	r22,r4
  803770:	2821883a 	mov	r16,r5
  803774:	3809883a 	mov	r4,r7
  803778:	300b883a 	mov	r5,r6
  80377c:	df000915 	stw	fp,36(sp)
  803780:	ddc00815 	stw	r23,32(sp)
  803784:	dcc00415 	stw	r19,16(sp)
  803788:	dfc00a15 	stw	ra,40(sp)
  80378c:	dd400615 	stw	r21,24(sp)
  803790:	dd000515 	stw	r20,20(sp)
  803794:	dc800315 	stw	r18,12(sp)
  803798:	dc400215 	stw	r17,8(sp)
  80379c:	d9800015 	stw	r6,0(sp)
  8037a0:	3839883a 	mov	fp,r7
  8037a4:	08026a00 	call	8026a0 <__mulsi3>
  8037a8:	102f883a 	mov	r23,r2
  8037ac:	dcc00b17 	ldw	r19,44(sp)
  8037b0:	10005926 	beq	r2,zero,803918 <_fread_r+0x1b8>
  8037b4:	b0000226 	beq	r22,zero,8037c0 <_fread_r+0x60>
  8037b8:	b0800e17 	ldw	r2,56(r22)
  8037bc:	10005826 	beq	r2,zero,803920 <_fread_r+0x1c0>
  8037c0:	9c400117 	ldw	r17,4(r19)
  8037c4:	88005a16 	blt	r17,zero,803930 <_fread_r+0x1d0>
  8037c8:	9880030b 	ldhu	r2,12(r19)
  8037cc:	8029883a 	mov	r20,r16
  8037d0:	1080008c 	andi	r2,r2,2
  8037d4:	1000221e 	bne	r2,zero,803860 <_fread_r+0x100>
  8037d8:	b825883a 	mov	r18,r23
  8037dc:	00000106 	br	8037e4 <_fread_r+0x84>
  8037e0:	9c400117 	ldw	r17,4(r19)
  8037e4:	a009883a 	mov	r4,r20
  8037e8:	880d883a 	mov	r6,r17
  8037ec:	8c80552e 	bgeu	r17,r18,803944 <_fread_r+0x1e4>
  8037f0:	99400017 	ldw	r5,0(r19)
  8037f4:	a469883a 	add	r20,r20,r17
  8037f8:	9465c83a 	sub	r18,r18,r17
  8037fc:	0804f780 	call	804f78 <memcpy>
  803800:	98800017 	ldw	r2,0(r19)
  803804:	b009883a 	mov	r4,r22
  803808:	980b883a 	mov	r5,r19
  80380c:	1461883a 	add	r16,r2,r17
  803810:	9c000015 	stw	r16,0(r19)
  803814:	08052540 	call	805254 <__srefill_r>
  803818:	103ff126 	beq	r2,zero,8037e0 <_fread_r+0x80>
  80381c:	d9400017 	ldw	r5,0(sp)
  803820:	bc89c83a 	sub	r4,r23,r18
  803824:	08119200 	call	811920 <__udivsi3>
  803828:	1039883a 	mov	fp,r2
  80382c:	e005883a 	mov	r2,fp
  803830:	dfc00a17 	ldw	ra,40(sp)
  803834:	df000917 	ldw	fp,36(sp)
  803838:	ddc00817 	ldw	r23,32(sp)
  80383c:	dd800717 	ldw	r22,28(sp)
  803840:	dd400617 	ldw	r21,24(sp)
  803844:	dd000517 	ldw	r20,20(sp)
  803848:	dcc00417 	ldw	r19,16(sp)
  80384c:	dc800317 	ldw	r18,12(sp)
  803850:	dc400217 	ldw	r17,8(sp)
  803854:	dc000117 	ldw	r16,4(sp)
  803858:	dec00b04 	addi	sp,sp,44
  80385c:	f800283a 	ret
  803860:	b825883a 	mov	r18,r23
  803864:	8dc03536 	bltu	r17,r23,80393c <_fread_r+0x1dc>
  803868:	99400017 	ldw	r5,0(r19)
  80386c:	a009883a 	mov	r4,r20
  803870:	900d883a 	mov	r6,r18
  803874:	0804f780 	call	804f78 <memcpy>
  803878:	9c000017 	ldw	r16,0(r19)
  80387c:	98800117 	ldw	r2,4(r19)
  803880:	99400c17 	ldw	r5,48(r19)
  803884:	84a1883a 	add	r16,r16,r18
  803888:	14a3c83a 	sub	r17,r2,r18
  80388c:	a4ab883a 	add	r21,r20,r18
  803890:	9c400115 	stw	r17,4(r19)
  803894:	9c000015 	stw	r16,0(r19)
  803898:	bca9c83a 	sub	r20,r23,r18
  80389c:	28000826 	beq	r5,zero,8038c0 <_fread_r+0x160>
  8038a0:	a03fe226 	beq	r20,zero,80382c <_fread_r+0xcc>
  8038a4:	98801004 	addi	r2,r19,64
  8038a8:	28800326 	beq	r5,r2,8038b8 <_fread_r+0x158>
  8038ac:	b009883a 	mov	r4,r22
  8038b0:	0803ad80 	call	803ad8 <_free_r>
  8038b4:	9c000017 	ldw	r16,0(r19)
  8038b8:	98000c15 	stw	zero,48(r19)
  8038bc:	00000106 	br	8038c4 <_fread_r+0x164>
  8038c0:	a03fda26 	beq	r20,zero,80382c <_fread_r+0xcc>
  8038c4:	9c800417 	ldw	r18,16(r19)
  8038c8:	9c400517 	ldw	r17,20(r19)
  8038cc:	9d400015 	stw	r21,0(r19)
  8038d0:	9d400415 	stw	r21,16(r19)
  8038d4:	9d000515 	stw	r20,20(r19)
  8038d8:	b009883a 	mov	r4,r22
  8038dc:	980b883a 	mov	r5,r19
  8038e0:	08052540 	call	805254 <__srefill_r>
  8038e4:	98c00117 	ldw	r3,4(r19)
  8038e8:	9c800415 	stw	r18,16(r19)
  8038ec:	9c400515 	stw	r17,20(r19)
  8038f0:	a8eb883a 	add	r21,r21,r3
  8038f4:	9c000015 	stw	r16,0(r19)
  8038f8:	a0e9c83a 	sub	r20,r20,r3
  8038fc:	98000115 	stw	zero,4(r19)
  803900:	103fef26 	beq	r2,zero,8038c0 <_fread_r+0x160>
  803904:	d9400017 	ldw	r5,0(sp)
  803908:	bd09c83a 	sub	r4,r23,r20
  80390c:	08119200 	call	811920 <__udivsi3>
  803910:	1039883a 	mov	fp,r2
  803914:	003fc506 	br	80382c <_fread_r+0xcc>
  803918:	0039883a 	mov	fp,zero
  80391c:	003fc306 	br	80382c <_fread_r+0xcc>
  803920:	b009883a 	mov	r4,r22
  803924:	08033640 	call	803364 <__sinit>
  803928:	9c400117 	ldw	r17,4(r19)
  80392c:	883fa60e 	bge	r17,zero,8037c8 <_fread_r+0x68>
  803930:	0023883a 	mov	r17,zero
  803934:	98000115 	stw	zero,4(r19)
  803938:	003fa306 	br	8037c8 <_fread_r+0x68>
  80393c:	8825883a 	mov	r18,r17
  803940:	003fc906 	br	803868 <_fread_r+0x108>
  803944:	99400017 	ldw	r5,0(r19)
  803948:	900d883a 	mov	r6,r18
  80394c:	0804f780 	call	804f78 <memcpy>
  803950:	98c00117 	ldw	r3,4(r19)
  803954:	98800017 	ldw	r2,0(r19)
  803958:	1c87c83a 	sub	r3,r3,r18
  80395c:	1485883a 	add	r2,r2,r18
  803960:	98800015 	stw	r2,0(r19)
  803964:	98c00115 	stw	r3,4(r19)
  803968:	003fb006 	br	80382c <_fread_r+0xcc>

0080396c <fread>:
  80396c:	00802074 	movhi	r2,129
  803970:	109bcd04 	addi	r2,r2,28468
  803974:	2017883a 	mov	r11,r4
  803978:	11000017 	ldw	r4,0(r2)
  80397c:	defffe04 	addi	sp,sp,-8
  803980:	3013883a 	mov	r9,r6
  803984:	2805883a 	mov	r2,r5
  803988:	d9c00015 	stw	r7,0(sp)
  80398c:	580b883a 	mov	r5,r11
  803990:	100d883a 	mov	r6,r2
  803994:	480f883a 	mov	r7,r9
  803998:	dfc00115 	stw	ra,4(sp)
  80399c:	08037600 	call	803760 <_fread_r>
  8039a0:	dfc00117 	ldw	ra,4(sp)
  8039a4:	dec00204 	addi	sp,sp,8
  8039a8:	f800283a 	ret

008039ac <_malloc_trim_r>:
  8039ac:	defffb04 	addi	sp,sp,-20
  8039b0:	dcc00315 	stw	r19,12(sp)
  8039b4:	04c02074 	movhi	r19,129
  8039b8:	9cd63104 	addi	r19,r19,22724
  8039bc:	dc800215 	stw	r18,8(sp)
  8039c0:	dc400115 	stw	r17,4(sp)
  8039c4:	dc000015 	stw	r16,0(sp)
  8039c8:	2823883a 	mov	r17,r5
  8039cc:	2025883a 	mov	r18,r4
  8039d0:	dfc00415 	stw	ra,16(sp)
  8039d4:	08123d80 	call	8123d8 <__malloc_lock>
  8039d8:	98800217 	ldw	r2,8(r19)
  8039dc:	9009883a 	mov	r4,r18
  8039e0:	000b883a 	mov	r5,zero
  8039e4:	10c00117 	ldw	r3,4(r2)
  8039e8:	00bfff04 	movi	r2,-4
  8039ec:	18a0703a 	and	r16,r3,r2
  8039f0:	8463c83a 	sub	r17,r16,r17
  8039f4:	8c43fbc4 	addi	r17,r17,4079
  8039f8:	8822d33a 	srli	r17,r17,12
  8039fc:	0083ffc4 	movi	r2,4095
  803a00:	8c7fffc4 	addi	r17,r17,-1
  803a04:	8822933a 	slli	r17,r17,12
  803a08:	1440060e 	bge	r2,r17,803a24 <_malloc_trim_r+0x78>
  803a0c:	08054940 	call	805494 <_sbrk_r>
  803a10:	98c00217 	ldw	r3,8(r19)
  803a14:	9009883a 	mov	r4,r18
  803a18:	044bc83a 	sub	r5,zero,r17
  803a1c:	80c7883a 	add	r3,r16,r3
  803a20:	10c00926 	beq	r2,r3,803a48 <_malloc_trim_r+0x9c>
  803a24:	08123f80 	call	8123f8 <__malloc_unlock>
  803a28:	0005883a 	mov	r2,zero
  803a2c:	dfc00417 	ldw	ra,16(sp)
  803a30:	dcc00317 	ldw	r19,12(sp)
  803a34:	dc800217 	ldw	r18,8(sp)
  803a38:	dc400117 	ldw	r17,4(sp)
  803a3c:	dc000017 	ldw	r16,0(sp)
  803a40:	dec00504 	addi	sp,sp,20
  803a44:	f800283a 	ret
  803a48:	9009883a 	mov	r4,r18
  803a4c:	08054940 	call	805494 <_sbrk_r>
  803a50:	844dc83a 	sub	r6,r16,r17
  803a54:	00ffffc4 	movi	r3,-1
  803a58:	9009883a 	mov	r4,r18
  803a5c:	000b883a 	mov	r5,zero
  803a60:	01c020b4 	movhi	r7,130
  803a64:	39e2c504 	addi	r7,r7,-29932
  803a68:	31800054 	ori	r6,r6,1
  803a6c:	10c00926 	beq	r2,r3,803a94 <_malloc_trim_r+0xe8>
  803a70:	38800017 	ldw	r2,0(r7)
  803a74:	98c00217 	ldw	r3,8(r19)
  803a78:	9009883a 	mov	r4,r18
  803a7c:	1445c83a 	sub	r2,r2,r17
  803a80:	38800015 	stw	r2,0(r7)
  803a84:	19800115 	stw	r6,4(r3)
  803a88:	08123f80 	call	8123f8 <__malloc_unlock>
  803a8c:	00800044 	movi	r2,1
  803a90:	003fe606 	br	803a2c <_malloc_trim_r+0x80>
  803a94:	08054940 	call	805494 <_sbrk_r>
  803a98:	99800217 	ldw	r6,8(r19)
  803a9c:	100f883a 	mov	r7,r2
  803aa0:	9009883a 	mov	r4,r18
  803aa4:	1187c83a 	sub	r3,r2,r6
  803aa8:	008003c4 	movi	r2,15
  803aac:	19400054 	ori	r5,r3,1
  803ab0:	10ffdc0e 	bge	r2,r3,803a24 <_malloc_trim_r+0x78>
  803ab4:	00802074 	movhi	r2,129
  803ab8:	109bd004 	addi	r2,r2,28480
  803abc:	10c00017 	ldw	r3,0(r2)
  803ac0:	008020b4 	movhi	r2,130
  803ac4:	10a2c504 	addi	r2,r2,-29932
  803ac8:	31400115 	stw	r5,4(r6)
  803acc:	38c7c83a 	sub	r3,r7,r3
  803ad0:	10c00015 	stw	r3,0(r2)
  803ad4:	003fd306 	br	803a24 <_malloc_trim_r+0x78>

00803ad8 <_free_r>:
  803ad8:	defffd04 	addi	sp,sp,-12
  803adc:	dc400115 	stw	r17,4(sp)
  803ae0:	dc000015 	stw	r16,0(sp)
  803ae4:	dfc00215 	stw	ra,8(sp)
  803ae8:	2821883a 	mov	r16,r5
  803aec:	2023883a 	mov	r17,r4
  803af0:	28005a26 	beq	r5,zero,803c5c <_free_r+0x184>
  803af4:	08123d80 	call	8123d8 <__malloc_lock>
  803af8:	823ffe04 	addi	r8,r16,-8
  803afc:	41400117 	ldw	r5,4(r8)
  803b00:	00bfff84 	movi	r2,-2
  803b04:	02802074 	movhi	r10,129
  803b08:	52963104 	addi	r10,r10,22724
  803b0c:	288e703a 	and	r7,r5,r2
  803b10:	41cd883a 	add	r6,r8,r7
  803b14:	30c00117 	ldw	r3,4(r6)
  803b18:	51000217 	ldw	r4,8(r10)
  803b1c:	00bfff04 	movi	r2,-4
  803b20:	1892703a 	and	r9,r3,r2
  803b24:	5017883a 	mov	r11,r10
  803b28:	31006726 	beq	r6,r4,803cc8 <_free_r+0x1f0>
  803b2c:	2880004c 	andi	r2,r5,1
  803b30:	1005003a 	cmpeq	r2,r2,zero
  803b34:	32400115 	stw	r9,4(r6)
  803b38:	10001a1e 	bne	r2,zero,803ba4 <_free_r+0xcc>
  803b3c:	000b883a 	mov	r5,zero
  803b40:	3247883a 	add	r3,r6,r9
  803b44:	18800117 	ldw	r2,4(r3)
  803b48:	1080004c 	andi	r2,r2,1
  803b4c:	1000231e 	bne	r2,zero,803bdc <_free_r+0x104>
  803b50:	280ac03a 	cmpne	r5,r5,zero
  803b54:	3a4f883a 	add	r7,r7,r9
  803b58:	2800451e 	bne	r5,zero,803c70 <_free_r+0x198>
  803b5c:	31000217 	ldw	r4,8(r6)
  803b60:	00802074 	movhi	r2,129
  803b64:	10963304 	addi	r2,r2,22732
  803b68:	20807b26 	beq	r4,r2,803d58 <_free_r+0x280>
  803b6c:	30800317 	ldw	r2,12(r6)
  803b70:	3a07883a 	add	r3,r7,r8
  803b74:	19c00015 	stw	r7,0(r3)
  803b78:	11000215 	stw	r4,8(r2)
  803b7c:	20800315 	stw	r2,12(r4)
  803b80:	38800054 	ori	r2,r7,1
  803b84:	40800115 	stw	r2,4(r8)
  803b88:	28001a26 	beq	r5,zero,803bf4 <_free_r+0x11c>
  803b8c:	8809883a 	mov	r4,r17
  803b90:	dfc00217 	ldw	ra,8(sp)
  803b94:	dc400117 	ldw	r17,4(sp)
  803b98:	dc000017 	ldw	r16,0(sp)
  803b9c:	dec00304 	addi	sp,sp,12
  803ba0:	08123f81 	jmpi	8123f8 <__malloc_unlock>
  803ba4:	80bffe17 	ldw	r2,-8(r16)
  803ba8:	50c00204 	addi	r3,r10,8
  803bac:	4091c83a 	sub	r8,r8,r2
  803bb0:	41000217 	ldw	r4,8(r8)
  803bb4:	388f883a 	add	r7,r7,r2
  803bb8:	20c06126 	beq	r4,r3,803d40 <_free_r+0x268>
  803bbc:	40800317 	ldw	r2,12(r8)
  803bc0:	3247883a 	add	r3,r6,r9
  803bc4:	000b883a 	mov	r5,zero
  803bc8:	11000215 	stw	r4,8(r2)
  803bcc:	20800315 	stw	r2,12(r4)
  803bd0:	18800117 	ldw	r2,4(r3)
  803bd4:	1080004c 	andi	r2,r2,1
  803bd8:	103fdd26 	beq	r2,zero,803b50 <_free_r+0x78>
  803bdc:	38800054 	ori	r2,r7,1
  803be0:	3a07883a 	add	r3,r7,r8
  803be4:	280ac03a 	cmpne	r5,r5,zero
  803be8:	40800115 	stw	r2,4(r8)
  803bec:	19c00015 	stw	r7,0(r3)
  803bf0:	283fe61e 	bne	r5,zero,803b8c <_free_r+0xb4>
  803bf4:	00807fc4 	movi	r2,511
  803bf8:	11c01f2e 	bgeu	r2,r7,803c78 <_free_r+0x1a0>
  803bfc:	3806d27a 	srli	r3,r7,9
  803c00:	1800481e 	bne	r3,zero,803d24 <_free_r+0x24c>
  803c04:	3804d0fa 	srli	r2,r7,3
  803c08:	100690fa 	slli	r3,r2,3
  803c0c:	1acd883a 	add	r6,r3,r11
  803c10:	31400217 	ldw	r5,8(r6)
  803c14:	31405926 	beq	r6,r5,803d7c <_free_r+0x2a4>
  803c18:	28800117 	ldw	r2,4(r5)
  803c1c:	00ffff04 	movi	r3,-4
  803c20:	10c4703a 	and	r2,r2,r3
  803c24:	3880022e 	bgeu	r7,r2,803c30 <_free_r+0x158>
  803c28:	29400217 	ldw	r5,8(r5)
  803c2c:	317ffa1e 	bne	r6,r5,803c18 <_free_r+0x140>
  803c30:	29800317 	ldw	r6,12(r5)
  803c34:	41800315 	stw	r6,12(r8)
  803c38:	41400215 	stw	r5,8(r8)
  803c3c:	8809883a 	mov	r4,r17
  803c40:	2a000315 	stw	r8,12(r5)
  803c44:	32000215 	stw	r8,8(r6)
  803c48:	dfc00217 	ldw	ra,8(sp)
  803c4c:	dc400117 	ldw	r17,4(sp)
  803c50:	dc000017 	ldw	r16,0(sp)
  803c54:	dec00304 	addi	sp,sp,12
  803c58:	08123f81 	jmpi	8123f8 <__malloc_unlock>
  803c5c:	dfc00217 	ldw	ra,8(sp)
  803c60:	dc400117 	ldw	r17,4(sp)
  803c64:	dc000017 	ldw	r16,0(sp)
  803c68:	dec00304 	addi	sp,sp,12
  803c6c:	f800283a 	ret
  803c70:	31000217 	ldw	r4,8(r6)
  803c74:	003fbd06 	br	803b6c <_free_r+0x94>
  803c78:	3806d0fa 	srli	r3,r7,3
  803c7c:	00800044 	movi	r2,1
  803c80:	51400117 	ldw	r5,4(r10)
  803c84:	180890fa 	slli	r4,r3,3
  803c88:	1807d0ba 	srai	r3,r3,2
  803c8c:	22c9883a 	add	r4,r4,r11
  803c90:	21800217 	ldw	r6,8(r4)
  803c94:	10c4983a 	sll	r2,r2,r3
  803c98:	41000315 	stw	r4,12(r8)
  803c9c:	41800215 	stw	r6,8(r8)
  803ca0:	288ab03a 	or	r5,r5,r2
  803ca4:	22000215 	stw	r8,8(r4)
  803ca8:	8809883a 	mov	r4,r17
  803cac:	51400115 	stw	r5,4(r10)
  803cb0:	32000315 	stw	r8,12(r6)
  803cb4:	dfc00217 	ldw	ra,8(sp)
  803cb8:	dc400117 	ldw	r17,4(sp)
  803cbc:	dc000017 	ldw	r16,0(sp)
  803cc0:	dec00304 	addi	sp,sp,12
  803cc4:	08123f81 	jmpi	8123f8 <__malloc_unlock>
  803cc8:	2880004c 	andi	r2,r5,1
  803ccc:	3a4d883a 	add	r6,r7,r9
  803cd0:	1000071e 	bne	r2,zero,803cf0 <_free_r+0x218>
  803cd4:	80bffe17 	ldw	r2,-8(r16)
  803cd8:	4091c83a 	sub	r8,r8,r2
  803cdc:	41000317 	ldw	r4,12(r8)
  803ce0:	40c00217 	ldw	r3,8(r8)
  803ce4:	308d883a 	add	r6,r6,r2
  803ce8:	20c00215 	stw	r3,8(r4)
  803cec:	19000315 	stw	r4,12(r3)
  803cf0:	00802074 	movhi	r2,129
  803cf4:	109bcf04 	addi	r2,r2,28476
  803cf8:	11000017 	ldw	r4,0(r2)
  803cfc:	30c00054 	ori	r3,r6,1
  803d00:	52000215 	stw	r8,8(r10)
  803d04:	40c00115 	stw	r3,4(r8)
  803d08:	313fa036 	bltu	r6,r4,803b8c <_free_r+0xb4>
  803d0c:	008020b4 	movhi	r2,130
  803d10:	10a2b704 	addi	r2,r2,-29988
  803d14:	11400017 	ldw	r5,0(r2)
  803d18:	8809883a 	mov	r4,r17
  803d1c:	08039ac0 	call	8039ac <_malloc_trim_r>
  803d20:	003f9a06 	br	803b8c <_free_r+0xb4>
  803d24:	00800104 	movi	r2,4
  803d28:	10c0072e 	bgeu	r2,r3,803d48 <_free_r+0x270>
  803d2c:	00800504 	movi	r2,20
  803d30:	10c01936 	bltu	r2,r3,803d98 <_free_r+0x2c0>
  803d34:	188016c4 	addi	r2,r3,91
  803d38:	100690fa 	slli	r3,r2,3
  803d3c:	003fb306 	br	803c0c <_free_r+0x134>
  803d40:	01400044 	movi	r5,1
  803d44:	003f7e06 	br	803b40 <_free_r+0x68>
  803d48:	3804d1ba 	srli	r2,r7,6
  803d4c:	10800e04 	addi	r2,r2,56
  803d50:	100690fa 	slli	r3,r2,3
  803d54:	003fad06 	br	803c0c <_free_r+0x134>
  803d58:	22000315 	stw	r8,12(r4)
  803d5c:	22000215 	stw	r8,8(r4)
  803d60:	3a05883a 	add	r2,r7,r8
  803d64:	38c00054 	ori	r3,r7,1
  803d68:	11c00015 	stw	r7,0(r2)
  803d6c:	41000215 	stw	r4,8(r8)
  803d70:	40c00115 	stw	r3,4(r8)
  803d74:	41000315 	stw	r4,12(r8)
  803d78:	003f8406 	br	803b8c <_free_r+0xb4>
  803d7c:	1005d0ba 	srai	r2,r2,2
  803d80:	00c00044 	movi	r3,1
  803d84:	51000117 	ldw	r4,4(r10)
  803d88:	1886983a 	sll	r3,r3,r2
  803d8c:	20c8b03a 	or	r4,r4,r3
  803d90:	51000115 	stw	r4,4(r10)
  803d94:	003fa706 	br	803c34 <_free_r+0x15c>
  803d98:	00801504 	movi	r2,84
  803d9c:	10c00436 	bltu	r2,r3,803db0 <_free_r+0x2d8>
  803da0:	3804d33a 	srli	r2,r7,12
  803da4:	10801b84 	addi	r2,r2,110
  803da8:	100690fa 	slli	r3,r2,3
  803dac:	003f9706 	br	803c0c <_free_r+0x134>
  803db0:	00805504 	movi	r2,340
  803db4:	10c00436 	bltu	r2,r3,803dc8 <_free_r+0x2f0>
  803db8:	3804d3fa 	srli	r2,r7,15
  803dbc:	10801dc4 	addi	r2,r2,119
  803dc0:	100690fa 	slli	r3,r2,3
  803dc4:	003f9106 	br	803c0c <_free_r+0x134>
  803dc8:	00815504 	movi	r2,1364
  803dcc:	10c0032e 	bgeu	r2,r3,803ddc <_free_r+0x304>
  803dd0:	00801f84 	movi	r2,126
  803dd4:	00c0fc04 	movi	r3,1008
  803dd8:	003f8c06 	br	803c0c <_free_r+0x134>
  803ddc:	3804d4ba 	srli	r2,r7,18
  803de0:	10801f04 	addi	r2,r2,124
  803de4:	100690fa 	slli	r3,r2,3
  803de8:	003f8806 	br	803c0c <_free_r+0x134>

00803dec <_fscanf_r>:
  803dec:	defffd04 	addi	sp,sp,-12
  803df0:	dfc00115 	stw	ra,4(sp)
  803df4:	d9c00215 	stw	r7,8(sp)
  803df8:	d8800204 	addi	r2,sp,8
  803dfc:	100f883a 	mov	r7,r2
  803e00:	d8800015 	stw	r2,0(sp)
  803e04:	0807aa40 	call	807aa4 <__svfscanf_r>
  803e08:	dfc00117 	ldw	ra,4(sp)
  803e0c:	dec00304 	addi	sp,sp,12
  803e10:	f800283a 	ret

00803e14 <fscanf>:
  803e14:	defffc04 	addi	sp,sp,-16
  803e18:	2007883a 	mov	r3,r4
  803e1c:	dfc00115 	stw	ra,4(sp)
  803e20:	d9800215 	stw	r6,8(sp)
  803e24:	d9c00315 	stw	r7,12(sp)
  803e28:	01802074 	movhi	r6,129
  803e2c:	319bcd04 	addi	r6,r6,28468
  803e30:	31000017 	ldw	r4,0(r6)
  803e34:	d8800204 	addi	r2,sp,8
  803e38:	280d883a 	mov	r6,r5
  803e3c:	100f883a 	mov	r7,r2
  803e40:	180b883a 	mov	r5,r3
  803e44:	d8800015 	stw	r2,0(sp)
  803e48:	0807aa40 	call	807aa4 <__svfscanf_r>
  803e4c:	dfc00117 	ldw	ra,4(sp)
  803e50:	dec00404 	addi	sp,sp,16
  803e54:	f800283a 	ret

00803e58 <_fseek_r>:
  803e58:	deffe804 	addi	sp,sp,-96
  803e5c:	dd801515 	stw	r22,84(sp)
  803e60:	dcc01215 	stw	r19,72(sp)
  803e64:	dc801115 	stw	r18,68(sp)
  803e68:	dc000f15 	stw	r16,60(sp)
  803e6c:	dfc01715 	stw	ra,92(sp)
  803e70:	ddc01615 	stw	r23,88(sp)
  803e74:	dd401415 	stw	r21,80(sp)
  803e78:	dd001315 	stw	r20,76(sp)
  803e7c:	dc401015 	stw	r17,64(sp)
  803e80:	2025883a 	mov	r18,r4
  803e84:	2821883a 	mov	r16,r5
  803e88:	302d883a 	mov	r22,r6
  803e8c:	3827883a 	mov	r19,r7
  803e90:	20000226 	beq	r4,zero,803e9c <_fseek_r+0x44>
  803e94:	20800e17 	ldw	r2,56(r4)
  803e98:	10007826 	beq	r2,zero,80407c <_fseek_r+0x224>
  803e9c:	8080030b 	ldhu	r2,12(r16)
  803ea0:	00c04204 	movi	r3,264
  803ea4:	1080420c 	andi	r2,r2,264
  803ea8:	10c07926 	beq	r2,r3,804090 <_fseek_r+0x238>
  803eac:	85400a17 	ldw	r21,40(r16)
  803eb0:	a800ea26 	beq	r21,zero,80425c <_fseek_r+0x404>
  803eb4:	00800044 	movi	r2,1
  803eb8:	98805f26 	beq	r19,r2,804038 <_fseek_r+0x1e0>
  803ebc:	00800084 	movi	r2,2
  803ec0:	98801026 	beq	r19,r2,803f04 <_fseek_r+0xac>
  803ec4:	98000f26 	beq	r19,zero,803f04 <_fseek_r+0xac>
  803ec8:	00800584 	movi	r2,22
  803ecc:	013fffc4 	movi	r4,-1
  803ed0:	90800015 	stw	r2,0(r18)
  803ed4:	2005883a 	mov	r2,r4
  803ed8:	dfc01717 	ldw	ra,92(sp)
  803edc:	ddc01617 	ldw	r23,88(sp)
  803ee0:	dd801517 	ldw	r22,84(sp)
  803ee4:	dd401417 	ldw	r21,80(sp)
  803ee8:	dd001317 	ldw	r20,76(sp)
  803eec:	dcc01217 	ldw	r19,72(sp)
  803ef0:	dc801117 	ldw	r18,68(sp)
  803ef4:	dc401017 	ldw	r17,64(sp)
  803ef8:	dc000f17 	ldw	r16,60(sp)
  803efc:	dec01804 	addi	sp,sp,96
  803f00:	f800283a 	ret
  803f04:	81800417 	ldw	r6,16(r16)
  803f08:	0023883a 	mov	r17,zero
  803f0c:	002f883a 	mov	r23,zero
  803f10:	3000a626 	beq	r6,zero,8041ac <_fseek_r+0x354>
  803f14:	8100030b 	ldhu	r4,12(r16)
  803f18:	2082068c 	andi	r2,r4,2074
  803f1c:	1000081e 	bne	r2,zero,803f40 <_fseek_r+0xe8>
  803f20:	2081000c 	andi	r2,r4,1024
  803f24:	10001b1e 	bne	r2,zero,803f94 <_fseek_r+0x13c>
  803f28:	00802034 	movhi	r2,128
  803f2c:	10958804 	addi	r2,r2,22048
  803f30:	a8800926 	beq	r21,r2,803f58 <_fseek_r+0x100>
  803f34:	8080030b 	ldhu	r2,12(r16)
  803f38:	10820014 	ori	r2,r2,2048
  803f3c:	8080030d 	sth	r2,12(r16)
  803f40:	9009883a 	mov	r4,r18
  803f44:	800b883a 	mov	r5,r16
  803f48:	0802e380 	call	802e38 <_fflush_r>
  803f4c:	1000a326 	beq	r2,zero,8041dc <_fseek_r+0x384>
  803f50:	013fffc4 	movi	r4,-1
  803f54:	003fdf06 	br	803ed4 <_fseek_r+0x7c>
  803f58:	8140038f 	ldh	r5,14(r16)
  803f5c:	283ff516 	blt	r5,zero,803f34 <_fseek_r+0xdc>
  803f60:	9009883a 	mov	r4,r18
  803f64:	d80d883a 	mov	r6,sp
  803f68:	08042b80 	call	8042b8 <_fstat_r>
  803f6c:	103ff11e 	bne	r2,zero,803f34 <_fseek_r+0xdc>
  803f70:	d8800117 	ldw	r2,4(sp)
  803f74:	00e00014 	movui	r3,32768
  803f78:	10bc000c 	andi	r2,r2,61440
  803f7c:	10ffed1e 	bne	r2,r3,803f34 <_fseek_r+0xdc>
  803f80:	80c0030b 	ldhu	r3,12(r16)
  803f84:	00810004 	movi	r2,1024
  803f88:	80801315 	stw	r2,76(r16)
  803f8c:	1886b03a 	or	r3,r3,r2
  803f90:	80c0030d 	sth	r3,12(r16)
  803f94:	9800701e 	bne	r19,zero,804158 <_fseek_r+0x300>
  803f98:	b029883a 	mov	r20,r22
  803f9c:	b804c03a 	cmpne	r2,r23,zero
  803fa0:	10003f1e 	bne	r2,zero,8040a0 <_fseek_r+0x248>
  803fa4:	8100030b 	ldhu	r4,12(r16)
  803fa8:	2084000c 	andi	r2,r4,4096
  803fac:	1000a126 	beq	r2,zero,804234 <_fseek_r+0x3dc>
  803fb0:	81801417 	ldw	r6,80(r16)
  803fb4:	80c00117 	ldw	r3,4(r16)
  803fb8:	81400c17 	ldw	r5,48(r16)
  803fbc:	30e3c83a 	sub	r17,r6,r3
  803fc0:	28008026 	beq	r5,zero,8041c4 <_fseek_r+0x36c>
  803fc4:	81c00f17 	ldw	r7,60(r16)
  803fc8:	89e3c83a 	sub	r17,r17,r7
  803fcc:	80800e17 	ldw	r2,56(r16)
  803fd0:	81800417 	ldw	r6,16(r16)
  803fd4:	88c7883a 	add	r3,r17,r3
  803fd8:	1185c83a 	sub	r2,r2,r6
  803fdc:	11cf883a 	add	r7,r2,r7
  803fe0:	1887c83a 	sub	r3,r3,r2
  803fe4:	2088000c 	andi	r2,r4,8192
  803fe8:	10003e1e 	bne	r2,zero,8040e4 <_fseek_r+0x28c>
  803fec:	a0c03d16 	blt	r20,r3,8040e4 <_fseek_r+0x28c>
  803ff0:	38c5883a 	add	r2,r7,r3
  803ff4:	a0803b2e 	bgeu	r20,r2,8040e4 <_fseek_r+0x28c>
  803ff8:	a0c5c83a 	sub	r2,r20,r3
  803ffc:	3887c83a 	sub	r3,r7,r2
  804000:	3085883a 	add	r2,r6,r2
  804004:	80800015 	stw	r2,0(r16)
  804008:	80c00115 	stw	r3,4(r16)
  80400c:	28000526 	beq	r5,zero,804024 <_fseek_r+0x1cc>
  804010:	80801004 	addi	r2,r16,64
  804014:	28800226 	beq	r5,r2,804020 <_fseek_r+0x1c8>
  804018:	9009883a 	mov	r4,r18
  80401c:	0803ad80 	call	803ad8 <_free_r>
  804020:	80000c15 	stw	zero,48(r16)
  804024:	8080030b 	ldhu	r2,12(r16)
  804028:	0009883a 	mov	r4,zero
  80402c:	10bff7cc 	andi	r2,r2,65503
  804030:	8080030d 	sth	r2,12(r16)
  804034:	003fa706 	br	803ed4 <_fseek_r+0x7c>
  804038:	9009883a 	mov	r4,r18
  80403c:	800b883a 	mov	r5,r16
  804040:	0802e380 	call	802e38 <_fflush_r>
  804044:	8100030b 	ldhu	r4,12(r16)
  804048:	2084000c 	andi	r2,r4,4096
  80404c:	10008726 	beq	r2,zero,80426c <_fseek_r+0x414>
  804050:	84401417 	ldw	r17,80(r16)
  804054:	2080010c 	andi	r2,r4,4
  804058:	1000171e 	bne	r2,zero,8040b8 <_fseek_r+0x260>
  80405c:	2080020c 	andi	r2,r4,8
  804060:	10003b26 	beq	r2,zero,804150 <_fseek_r+0x2f8>
  804064:	80800017 	ldw	r2,0(r16)
  804068:	10003926 	beq	r2,zero,804150 <_fseek_r+0x2f8>
  80406c:	81800417 	ldw	r6,16(r16)
  804070:	1185c83a 	sub	r2,r2,r6
  804074:	88a3883a 	add	r17,r17,r2
  804078:	00001606 	br	8040d4 <_fseek_r+0x27c>
  80407c:	08033640 	call	803364 <__sinit>
  804080:	8080030b 	ldhu	r2,12(r16)
  804084:	00c04204 	movi	r3,264
  804088:	1080420c 	andi	r2,r2,264
  80408c:	10ff871e 	bne	r2,r3,803eac <_fseek_r+0x54>
  804090:	9009883a 	mov	r4,r18
  804094:	800b883a 	mov	r5,r16
  804098:	0802e380 	call	802e38 <_fflush_r>
  80409c:	003f8306 	br	803eac <_fseek_r+0x54>
  8040a0:	81400c17 	ldw	r5,48(r16)
  8040a4:	28004526 	beq	r5,zero,8041bc <_fseek_r+0x364>
  8040a8:	8100030b 	ldhu	r4,12(r16)
  8040ac:	80c00117 	ldw	r3,4(r16)
  8040b0:	81c00f17 	ldw	r7,60(r16)
  8040b4:	003fc506 	br	803fcc <_fseek_r+0x174>
  8040b8:	80c00117 	ldw	r3,4(r16)
  8040bc:	80800c17 	ldw	r2,48(r16)
  8040c0:	88e3c83a 	sub	r17,r17,r3
  8040c4:	10002226 	beq	r2,zero,804150 <_fseek_r+0x2f8>
  8040c8:	81c00f17 	ldw	r7,60(r16)
  8040cc:	81800417 	ldw	r6,16(r16)
  8040d0:	89e3c83a 	sub	r17,r17,r7
  8040d4:	b46d883a 	add	r22,r22,r17
  8040d8:	0027883a 	mov	r19,zero
  8040dc:	05c00044 	movi	r23,1
  8040e0:	003f8b06 	br	803f10 <_fseek_r+0xb8>
  8040e4:	80801317 	ldw	r2,76(r16)
  8040e8:	81400717 	ldw	r5,28(r16)
  8040ec:	9009883a 	mov	r4,r18
  8040f0:	0085c83a 	sub	r2,zero,r2
  8040f4:	a0a2703a 	and	r17,r20,r2
  8040f8:	880d883a 	mov	r6,r17
  8040fc:	000f883a 	mov	r7,zero
  804100:	a83ee83a 	callr	r21
  804104:	00ffffc4 	movi	r3,-1
  804108:	10ff8d26 	beq	r2,r3,803f40 <_fseek_r+0xe8>
  80410c:	80800417 	ldw	r2,16(r16)
  804110:	81400c17 	ldw	r5,48(r16)
  804114:	80000115 	stw	zero,4(r16)
  804118:	80800015 	stw	r2,0(r16)
  80411c:	28000526 	beq	r5,zero,804134 <_fseek_r+0x2dc>
  804120:	80801004 	addi	r2,r16,64
  804124:	28800226 	beq	r5,r2,804130 <_fseek_r+0x2d8>
  804128:	9009883a 	mov	r4,r18
  80412c:	0803ad80 	call	803ad8 <_free_r>
  804130:	80000c15 	stw	zero,48(r16)
  804134:	8080030b 	ldhu	r2,12(r16)
  804138:	a463c83a 	sub	r17,r20,r17
  80413c:	10bff7cc 	andi	r2,r2,65503
  804140:	8080030d 	sth	r2,12(r16)
  804144:	88000c1e 	bne	r17,zero,804178 <_fseek_r+0x320>
  804148:	0009883a 	mov	r4,zero
  80414c:	003f6106 	br	803ed4 <_fseek_r+0x7c>
  804150:	81800417 	ldw	r6,16(r16)
  804154:	003fdf06 	br	8040d4 <_fseek_r+0x27c>
  804158:	8140038f 	ldh	r5,14(r16)
  80415c:	9009883a 	mov	r4,r18
  804160:	d80d883a 	mov	r6,sp
  804164:	08042b80 	call	8042b8 <_fstat_r>
  804168:	103f751e 	bne	r2,zero,803f40 <_fseek_r+0xe8>
  80416c:	d8800417 	ldw	r2,16(sp)
  804170:	b0a9883a 	add	r20,r22,r2
  804174:	003f8906 	br	803f9c <_fseek_r+0x144>
  804178:	9009883a 	mov	r4,r18
  80417c:	800b883a 	mov	r5,r16
  804180:	08052540 	call	805254 <__srefill_r>
  804184:	103f6e1e 	bne	r2,zero,803f40 <_fseek_r+0xe8>
  804188:	80c00117 	ldw	r3,4(r16)
  80418c:	1c7f6c36 	bltu	r3,r17,803f40 <_fseek_r+0xe8>
  804190:	80800017 	ldw	r2,0(r16)
  804194:	1c47c83a 	sub	r3,r3,r17
  804198:	0009883a 	mov	r4,zero
  80419c:	1445883a 	add	r2,r2,r17
  8041a0:	80c00115 	stw	r3,4(r16)
  8041a4:	80800015 	stw	r2,0(r16)
  8041a8:	003f4a06 	br	803ed4 <_fseek_r+0x7c>
  8041ac:	9009883a 	mov	r4,r18
  8041b0:	800b883a 	mov	r5,r16
  8041b4:	08045980 	call	804598 <__smakebuf_r>
  8041b8:	003f5606 	br	803f14 <_fseek_r+0xbc>
  8041bc:	8100030b 	ldhu	r4,12(r16)
  8041c0:	80c00117 	ldw	r3,4(r16)
  8041c4:	80800017 	ldw	r2,0(r16)
  8041c8:	81800417 	ldw	r6,16(r16)
  8041cc:	1185c83a 	sub	r2,r2,r6
  8041d0:	10cf883a 	add	r7,r2,r3
  8041d4:	8887c83a 	sub	r3,r17,r2
  8041d8:	003f8206 	br	803fe4 <_fseek_r+0x18c>
  8041dc:	81400717 	ldw	r5,28(r16)
  8041e0:	b00d883a 	mov	r6,r22
  8041e4:	980f883a 	mov	r7,r19
  8041e8:	9009883a 	mov	r4,r18
  8041ec:	a83ee83a 	callr	r21
  8041f0:	00ffffc4 	movi	r3,-1
  8041f4:	10ff5626 	beq	r2,r3,803f50 <_fseek_r+0xf8>
  8041f8:	81400c17 	ldw	r5,48(r16)
  8041fc:	28000526 	beq	r5,zero,804214 <_fseek_r+0x3bc>
  804200:	80801004 	addi	r2,r16,64
  804204:	28800226 	beq	r5,r2,804210 <_fseek_r+0x3b8>
  804208:	9009883a 	mov	r4,r18
  80420c:	0803ad80 	call	803ad8 <_free_r>
  804210:	80000c15 	stw	zero,48(r16)
  804214:	8080030b 	ldhu	r2,12(r16)
  804218:	80c00417 	ldw	r3,16(r16)
  80421c:	0009883a 	mov	r4,zero
  804220:	10bdf7cc 	andi	r2,r2,63455
  804224:	8080030d 	sth	r2,12(r16)
  804228:	80c00015 	stw	r3,0(r16)
  80422c:	80000115 	stw	zero,4(r16)
  804230:	003f2806 	br	803ed4 <_fseek_r+0x7c>
  804234:	81400717 	ldw	r5,28(r16)
  804238:	000d883a 	mov	r6,zero
  80423c:	9009883a 	mov	r4,r18
  804240:	01c00044 	movi	r7,1
  804244:	a83ee83a 	callr	r21
  804248:	100d883a 	mov	r6,r2
  80424c:	00bfffc4 	movi	r2,-1
  804250:	30bf3b26 	beq	r6,r2,803f40 <_fseek_r+0xe8>
  804254:	8100030b 	ldhu	r4,12(r16)
  804258:	003f5606 	br	803fb4 <_fseek_r+0x15c>
  80425c:	00800744 	movi	r2,29
  804260:	013fffc4 	movi	r4,-1
  804264:	90800015 	stw	r2,0(r18)
  804268:	003f1a06 	br	803ed4 <_fseek_r+0x7c>
  80426c:	81400717 	ldw	r5,28(r16)
  804270:	980f883a 	mov	r7,r19
  804274:	9009883a 	mov	r4,r18
  804278:	000d883a 	mov	r6,zero
  80427c:	a83ee83a 	callr	r21
  804280:	1023883a 	mov	r17,r2
  804284:	00bfffc4 	movi	r2,-1
  804288:	88bf3126 	beq	r17,r2,803f50 <_fseek_r+0xf8>
  80428c:	8100030b 	ldhu	r4,12(r16)
  804290:	003f7006 	br	804054 <_fseek_r+0x1fc>

00804294 <fseek>:
  804294:	00802074 	movhi	r2,129
  804298:	109bcd04 	addi	r2,r2,28468
  80429c:	2013883a 	mov	r9,r4
  8042a0:	11000017 	ldw	r4,0(r2)
  8042a4:	2805883a 	mov	r2,r5
  8042a8:	300f883a 	mov	r7,r6
  8042ac:	480b883a 	mov	r5,r9
  8042b0:	100d883a 	mov	r6,r2
  8042b4:	0803e581 	jmpi	803e58 <_fseek_r>

008042b8 <_fstat_r>:
  8042b8:	defffd04 	addi	sp,sp,-12
  8042bc:	dc000015 	stw	r16,0(sp)
  8042c0:	040020b4 	movhi	r16,130
  8042c4:	8422b604 	addi	r16,r16,-29992
  8042c8:	dc400115 	stw	r17,4(sp)
  8042cc:	80000015 	stw	zero,0(r16)
  8042d0:	2023883a 	mov	r17,r4
  8042d4:	2809883a 	mov	r4,r5
  8042d8:	300b883a 	mov	r5,r6
  8042dc:	dfc00215 	stw	ra,8(sp)
  8042e0:	0811ee00 	call	811ee0 <fstat>
  8042e4:	1007883a 	mov	r3,r2
  8042e8:	00bfffc4 	movi	r2,-1
  8042ec:	18800626 	beq	r3,r2,804308 <_fstat_r+0x50>
  8042f0:	1805883a 	mov	r2,r3
  8042f4:	dfc00217 	ldw	ra,8(sp)
  8042f8:	dc400117 	ldw	r17,4(sp)
  8042fc:	dc000017 	ldw	r16,0(sp)
  804300:	dec00304 	addi	sp,sp,12
  804304:	f800283a 	ret
  804308:	80800017 	ldw	r2,0(r16)
  80430c:	103ff826 	beq	r2,zero,8042f0 <_fstat_r+0x38>
  804310:	88800015 	stw	r2,0(r17)
  804314:	1805883a 	mov	r2,r3
  804318:	dfc00217 	ldw	ra,8(sp)
  80431c:	dc400117 	ldw	r17,4(sp)
  804320:	dc000017 	ldw	r16,0(sp)
  804324:	dec00304 	addi	sp,sp,12
  804328:	f800283a 	ret

0080432c <_fwalk_reent>:
  80432c:	defff704 	addi	sp,sp,-36
  804330:	dcc00315 	stw	r19,12(sp)
  804334:	24c0b804 	addi	r19,r4,736
  804338:	dd800615 	stw	r22,24(sp)
  80433c:	dd400515 	stw	r21,20(sp)
  804340:	dfc00815 	stw	ra,32(sp)
  804344:	ddc00715 	stw	r23,28(sp)
  804348:	dd000415 	stw	r20,16(sp)
  80434c:	dc800215 	stw	r18,8(sp)
  804350:	dc400115 	stw	r17,4(sp)
  804354:	dc000015 	stw	r16,0(sp)
  804358:	202b883a 	mov	r21,r4
  80435c:	282d883a 	mov	r22,r5
  804360:	08033540 	call	803354 <__sfp_lock_acquire>
  804364:	98002126 	beq	r19,zero,8043ec <_fwalk_reent+0xc0>
  804368:	002f883a 	mov	r23,zero
  80436c:	9c800117 	ldw	r18,4(r19)
  804370:	9c000217 	ldw	r16,8(r19)
  804374:	90bfffc4 	addi	r2,r18,-1
  804378:	10000d16 	blt	r2,zero,8043b0 <_fwalk_reent+0x84>
  80437c:	0023883a 	mov	r17,zero
  804380:	053fffc4 	movi	r20,-1
  804384:	8080030f 	ldh	r2,12(r16)
  804388:	8c400044 	addi	r17,r17,1
  80438c:	10000626 	beq	r2,zero,8043a8 <_fwalk_reent+0x7c>
  804390:	8080038f 	ldh	r2,14(r16)
  804394:	800b883a 	mov	r5,r16
  804398:	a809883a 	mov	r4,r21
  80439c:	15000226 	beq	r2,r20,8043a8 <_fwalk_reent+0x7c>
  8043a0:	b03ee83a 	callr	r22
  8043a4:	b8aeb03a 	or	r23,r23,r2
  8043a8:	84001704 	addi	r16,r16,92
  8043ac:	947ff51e 	bne	r18,r17,804384 <_fwalk_reent+0x58>
  8043b0:	9cc00017 	ldw	r19,0(r19)
  8043b4:	983fed1e 	bne	r19,zero,80436c <_fwalk_reent+0x40>
  8043b8:	08033580 	call	803358 <__sfp_lock_release>
  8043bc:	b805883a 	mov	r2,r23
  8043c0:	dfc00817 	ldw	ra,32(sp)
  8043c4:	ddc00717 	ldw	r23,28(sp)
  8043c8:	dd800617 	ldw	r22,24(sp)
  8043cc:	dd400517 	ldw	r21,20(sp)
  8043d0:	dd000417 	ldw	r20,16(sp)
  8043d4:	dcc00317 	ldw	r19,12(sp)
  8043d8:	dc800217 	ldw	r18,8(sp)
  8043dc:	dc400117 	ldw	r17,4(sp)
  8043e0:	dc000017 	ldw	r16,0(sp)
  8043e4:	dec00904 	addi	sp,sp,36
  8043e8:	f800283a 	ret
  8043ec:	002f883a 	mov	r23,zero
  8043f0:	003ff106 	br	8043b8 <_fwalk_reent+0x8c>

008043f4 <_fwalk>:
  8043f4:	defff804 	addi	sp,sp,-32
  8043f8:	dcc00315 	stw	r19,12(sp)
  8043fc:	24c0b804 	addi	r19,r4,736
  804400:	dd400515 	stw	r21,20(sp)
  804404:	dfc00715 	stw	ra,28(sp)
  804408:	dd800615 	stw	r22,24(sp)
  80440c:	dd000415 	stw	r20,16(sp)
  804410:	dc800215 	stw	r18,8(sp)
  804414:	dc400115 	stw	r17,4(sp)
  804418:	dc000015 	stw	r16,0(sp)
  80441c:	282b883a 	mov	r21,r5
  804420:	08033540 	call	803354 <__sfp_lock_acquire>
  804424:	98001f26 	beq	r19,zero,8044a4 <_fwalk+0xb0>
  804428:	002d883a 	mov	r22,zero
  80442c:	9c800117 	ldw	r18,4(r19)
  804430:	9c000217 	ldw	r16,8(r19)
  804434:	90bfffc4 	addi	r2,r18,-1
  804438:	10000c16 	blt	r2,zero,80446c <_fwalk+0x78>
  80443c:	0023883a 	mov	r17,zero
  804440:	053fffc4 	movi	r20,-1
  804444:	8080030f 	ldh	r2,12(r16)
  804448:	8c400044 	addi	r17,r17,1
  80444c:	10000526 	beq	r2,zero,804464 <_fwalk+0x70>
  804450:	8080038f 	ldh	r2,14(r16)
  804454:	8009883a 	mov	r4,r16
  804458:	15000226 	beq	r2,r20,804464 <_fwalk+0x70>
  80445c:	a83ee83a 	callr	r21
  804460:	b0acb03a 	or	r22,r22,r2
  804464:	84001704 	addi	r16,r16,92
  804468:	947ff61e 	bne	r18,r17,804444 <_fwalk+0x50>
  80446c:	9cc00017 	ldw	r19,0(r19)
  804470:	983fee1e 	bne	r19,zero,80442c <_fwalk+0x38>
  804474:	08033580 	call	803358 <__sfp_lock_release>
  804478:	b005883a 	mov	r2,r22
  80447c:	dfc00717 	ldw	ra,28(sp)
  804480:	dd800617 	ldw	r22,24(sp)
  804484:	dd400517 	ldw	r21,20(sp)
  804488:	dd000417 	ldw	r20,16(sp)
  80448c:	dcc00317 	ldw	r19,12(sp)
  804490:	dc800217 	ldw	r18,8(sp)
  804494:	dc400117 	ldw	r17,4(sp)
  804498:	dc000017 	ldw	r16,0(sp)
  80449c:	dec00804 	addi	sp,sp,32
  8044a0:	f800283a 	ret
  8044a4:	002d883a 	mov	r22,zero
  8044a8:	003ff206 	br	804474 <_fwalk+0x80>

008044ac <_fwrite_r>:
  8044ac:	defff604 	addi	sp,sp,-40
  8044b0:	dc000515 	stw	r16,20(sp)
  8044b4:	d9400015 	stw	r5,0(sp)
  8044b8:	2021883a 	mov	r16,r4
  8044bc:	300b883a 	mov	r5,r6
  8044c0:	3809883a 	mov	r4,r7
  8044c4:	dcc00815 	stw	r19,32(sp)
  8044c8:	dc800715 	stw	r18,28(sp)
  8044cc:	dc400615 	stw	r17,24(sp)
  8044d0:	dfc00915 	stw	ra,36(sp)
  8044d4:	3825883a 	mov	r18,r7
  8044d8:	3027883a 	mov	r19,r6
  8044dc:	08026a00 	call	8026a0 <__mulsi3>
  8044e0:	1023883a 	mov	r17,r2
  8044e4:	00800044 	movi	r2,1
  8044e8:	d8800315 	stw	r2,12(sp)
  8044ec:	dc400115 	stw	r17,4(sp)
  8044f0:	dc400415 	stw	r17,16(sp)
  8044f4:	dec00215 	stw	sp,8(sp)
  8044f8:	80000326 	beq	r16,zero,804508 <_fwrite_r+0x5c>
  8044fc:	80800e17 	ldw	r2,56(r16)
  804500:	8009883a 	mov	r4,r16
  804504:	10001226 	beq	r2,zero,804550 <_fwrite_r+0xa4>
  804508:	d9400a17 	ldw	r5,40(sp)
  80450c:	8009883a 	mov	r4,r16
  804510:	d9800204 	addi	r6,sp,8
  804514:	080ae9c0 	call	80ae9c <__sfvwrite_r>
  804518:	980b883a 	mov	r5,r19
  80451c:	10000426 	beq	r2,zero,804530 <_fwrite_r+0x84>
  804520:	d9000417 	ldw	r4,16(sp)
  804524:	8909c83a 	sub	r4,r17,r4
  804528:	08119200 	call	811920 <__udivsi3>
  80452c:	1025883a 	mov	r18,r2
  804530:	9005883a 	mov	r2,r18
  804534:	dfc00917 	ldw	ra,36(sp)
  804538:	dcc00817 	ldw	r19,32(sp)
  80453c:	dc800717 	ldw	r18,28(sp)
  804540:	dc400617 	ldw	r17,24(sp)
  804544:	dc000517 	ldw	r16,20(sp)
  804548:	dec00a04 	addi	sp,sp,40
  80454c:	f800283a 	ret
  804550:	08033640 	call	803364 <__sinit>
  804554:	003fec06 	br	804508 <_fwrite_r+0x5c>

00804558 <fwrite>:
  804558:	00802074 	movhi	r2,129
  80455c:	109bcd04 	addi	r2,r2,28468
  804560:	2017883a 	mov	r11,r4
  804564:	11000017 	ldw	r4,0(r2)
  804568:	defffe04 	addi	sp,sp,-8
  80456c:	3013883a 	mov	r9,r6
  804570:	2805883a 	mov	r2,r5
  804574:	d9c00015 	stw	r7,0(sp)
  804578:	580b883a 	mov	r5,r11
  80457c:	100d883a 	mov	r6,r2
  804580:	480f883a 	mov	r7,r9
  804584:	dfc00115 	stw	ra,4(sp)
  804588:	08044ac0 	call	8044ac <_fwrite_r>
  80458c:	dfc00117 	ldw	ra,4(sp)
  804590:	dec00204 	addi	sp,sp,8
  804594:	f800283a 	ret

00804598 <__smakebuf_r>:
  804598:	2880030b 	ldhu	r2,12(r5)
  80459c:	deffed04 	addi	sp,sp,-76
  8045a0:	dc401015 	stw	r17,64(sp)
  8045a4:	1080008c 	andi	r2,r2,2
  8045a8:	dc000f15 	stw	r16,60(sp)
  8045ac:	dfc01215 	stw	ra,72(sp)
  8045b0:	dc801115 	stw	r18,68(sp)
  8045b4:	2821883a 	mov	r16,r5
  8045b8:	2023883a 	mov	r17,r4
  8045bc:	10000b26 	beq	r2,zero,8045ec <__smakebuf_r+0x54>
  8045c0:	28c010c4 	addi	r3,r5,67
  8045c4:	00800044 	movi	r2,1
  8045c8:	28800515 	stw	r2,20(r5)
  8045cc:	28c00415 	stw	r3,16(r5)
  8045d0:	28c00015 	stw	r3,0(r5)
  8045d4:	dfc01217 	ldw	ra,72(sp)
  8045d8:	dc801117 	ldw	r18,68(sp)
  8045dc:	dc401017 	ldw	r17,64(sp)
  8045e0:	dc000f17 	ldw	r16,60(sp)
  8045e4:	dec01304 	addi	sp,sp,76
  8045e8:	f800283a 	ret
  8045ec:	2940038f 	ldh	r5,14(r5)
  8045f0:	28002116 	blt	r5,zero,804678 <__smakebuf_r+0xe0>
  8045f4:	d80d883a 	mov	r6,sp
  8045f8:	08042b80 	call	8042b8 <_fstat_r>
  8045fc:	10001e16 	blt	r2,zero,804678 <__smakebuf_r+0xe0>
  804600:	d8800117 	ldw	r2,4(sp)
  804604:	00e00014 	movui	r3,32768
  804608:	113c000c 	andi	r4,r2,61440
  80460c:	20c03126 	beq	r4,r3,8046d4 <__smakebuf_r+0x13c>
  804610:	8080030b 	ldhu	r2,12(r16)
  804614:	00c80004 	movi	r3,8192
  804618:	10820014 	ori	r2,r2,2048
  80461c:	8080030d 	sth	r2,12(r16)
  804620:	20c01e26 	beq	r4,r3,80469c <__smakebuf_r+0x104>
  804624:	04810004 	movi	r18,1024
  804628:	8809883a 	mov	r4,r17
  80462c:	900b883a 	mov	r5,r18
  804630:	08047540 	call	804754 <_malloc_r>
  804634:	1009883a 	mov	r4,r2
  804638:	10003126 	beq	r2,zero,804700 <__smakebuf_r+0x168>
  80463c:	80c0030b 	ldhu	r3,12(r16)
  804640:	00802034 	movhi	r2,128
  804644:	108d1204 	addi	r2,r2,13384
  804648:	88800f15 	stw	r2,60(r17)
  80464c:	18c02014 	ori	r3,r3,128
  804650:	84800515 	stw	r18,20(r16)
  804654:	80c0030d 	sth	r3,12(r16)
  804658:	81000415 	stw	r4,16(r16)
  80465c:	81000015 	stw	r4,0(r16)
  804660:	dfc01217 	ldw	ra,72(sp)
  804664:	dc801117 	ldw	r18,68(sp)
  804668:	dc401017 	ldw	r17,64(sp)
  80466c:	dc000f17 	ldw	r16,60(sp)
  804670:	dec01304 	addi	sp,sp,76
  804674:	f800283a 	ret
  804678:	80c0030b 	ldhu	r3,12(r16)
  80467c:	1880200c 	andi	r2,r3,128
  804680:	10000426 	beq	r2,zero,804694 <__smakebuf_r+0xfc>
  804684:	04801004 	movi	r18,64
  804688:	18820014 	ori	r2,r3,2048
  80468c:	8080030d 	sth	r2,12(r16)
  804690:	003fe506 	br	804628 <__smakebuf_r+0x90>
  804694:	04810004 	movi	r18,1024
  804698:	003ffb06 	br	804688 <__smakebuf_r+0xf0>
  80469c:	8140038f 	ldh	r5,14(r16)
  8046a0:	8809883a 	mov	r4,r17
  8046a4:	080b3380 	call	80b338 <_isatty_r>
  8046a8:	103fde26 	beq	r2,zero,804624 <__smakebuf_r+0x8c>
  8046ac:	8080030b 	ldhu	r2,12(r16)
  8046b0:	80c010c4 	addi	r3,r16,67
  8046b4:	04810004 	movi	r18,1024
  8046b8:	10800054 	ori	r2,r2,1
  8046bc:	8080030d 	sth	r2,12(r16)
  8046c0:	00800044 	movi	r2,1
  8046c4:	80c00415 	stw	r3,16(r16)
  8046c8:	80800515 	stw	r2,20(r16)
  8046cc:	80c00015 	stw	r3,0(r16)
  8046d0:	003fd506 	br	804628 <__smakebuf_r+0x90>
  8046d4:	80c00a17 	ldw	r3,40(r16)
  8046d8:	00802034 	movhi	r2,128
  8046dc:	10958804 	addi	r2,r2,22048
  8046e0:	18bfcb1e 	bne	r3,r2,804610 <__smakebuf_r+0x78>
  8046e4:	8080030b 	ldhu	r2,12(r16)
  8046e8:	00c10004 	movi	r3,1024
  8046ec:	1825883a 	mov	r18,r3
  8046f0:	10c4b03a 	or	r2,r2,r3
  8046f4:	8080030d 	sth	r2,12(r16)
  8046f8:	80c01315 	stw	r3,76(r16)
  8046fc:	003fca06 	br	804628 <__smakebuf_r+0x90>
  804700:	8100030b 	ldhu	r4,12(r16)
  804704:	2080800c 	andi	r2,r4,512
  804708:	103fb21e 	bne	r2,zero,8045d4 <__smakebuf_r+0x3c>
  80470c:	80c010c4 	addi	r3,r16,67
  804710:	21000094 	ori	r4,r4,2
  804714:	00800044 	movi	r2,1
  804718:	80800515 	stw	r2,20(r16)
  80471c:	8100030d 	sth	r4,12(r16)
  804720:	80c00415 	stw	r3,16(r16)
  804724:	80c00015 	stw	r3,0(r16)
  804728:	003faa06 	br	8045d4 <__smakebuf_r+0x3c>

0080472c <free>:
  80472c:	00802074 	movhi	r2,129
  804730:	109bcd04 	addi	r2,r2,28468
  804734:	200b883a 	mov	r5,r4
  804738:	11000017 	ldw	r4,0(r2)
  80473c:	0803ad81 	jmpi	803ad8 <_free_r>

00804740 <malloc>:
  804740:	00802074 	movhi	r2,129
  804744:	109bcd04 	addi	r2,r2,28468
  804748:	200b883a 	mov	r5,r4
  80474c:	11000017 	ldw	r4,0(r2)
  804750:	08047541 	jmpi	804754 <_malloc_r>

00804754 <_malloc_r>:
  804754:	defff604 	addi	sp,sp,-40
  804758:	28c002c4 	addi	r3,r5,11
  80475c:	00800584 	movi	r2,22
  804760:	dc800215 	stw	r18,8(sp)
  804764:	dfc00915 	stw	ra,36(sp)
  804768:	df000815 	stw	fp,32(sp)
  80476c:	ddc00715 	stw	r23,28(sp)
  804770:	dd800615 	stw	r22,24(sp)
  804774:	dd400515 	stw	r21,20(sp)
  804778:	dd000415 	stw	r20,16(sp)
  80477c:	dcc00315 	stw	r19,12(sp)
  804780:	dc400115 	stw	r17,4(sp)
  804784:	dc000015 	stw	r16,0(sp)
  804788:	2025883a 	mov	r18,r4
  80478c:	10c01236 	bltu	r2,r3,8047d8 <_malloc_r+0x84>
  804790:	04400404 	movi	r17,16
  804794:	8940142e 	bgeu	r17,r5,8047e8 <_malloc_r+0x94>
  804798:	00800304 	movi	r2,12
  80479c:	0007883a 	mov	r3,zero
  8047a0:	90800015 	stw	r2,0(r18)
  8047a4:	1805883a 	mov	r2,r3
  8047a8:	dfc00917 	ldw	ra,36(sp)
  8047ac:	df000817 	ldw	fp,32(sp)
  8047b0:	ddc00717 	ldw	r23,28(sp)
  8047b4:	dd800617 	ldw	r22,24(sp)
  8047b8:	dd400517 	ldw	r21,20(sp)
  8047bc:	dd000417 	ldw	r20,16(sp)
  8047c0:	dcc00317 	ldw	r19,12(sp)
  8047c4:	dc800217 	ldw	r18,8(sp)
  8047c8:	dc400117 	ldw	r17,4(sp)
  8047cc:	dc000017 	ldw	r16,0(sp)
  8047d0:	dec00a04 	addi	sp,sp,40
  8047d4:	f800283a 	ret
  8047d8:	00bffe04 	movi	r2,-8
  8047dc:	18a2703a 	and	r17,r3,r2
  8047e0:	883fed16 	blt	r17,zero,804798 <_malloc_r+0x44>
  8047e4:	897fec36 	bltu	r17,r5,804798 <_malloc_r+0x44>
  8047e8:	9009883a 	mov	r4,r18
  8047ec:	08123d80 	call	8123d8 <__malloc_lock>
  8047f0:	00807dc4 	movi	r2,503
  8047f4:	14402b2e 	bgeu	r2,r17,8048a4 <_malloc_r+0x150>
  8047f8:	8806d27a 	srli	r3,r17,9
  8047fc:	18003f1e 	bne	r3,zero,8048fc <_malloc_r+0x1a8>
  804800:	880cd0fa 	srli	r6,r17,3
  804804:	300490fa 	slli	r2,r6,3
  804808:	02c02074 	movhi	r11,129
  80480c:	5ad63104 	addi	r11,r11,22724
  804810:	12cb883a 	add	r5,r2,r11
  804814:	2c000317 	ldw	r16,12(r5)
  804818:	580f883a 	mov	r7,r11
  80481c:	2c00041e 	bne	r5,r16,804830 <_malloc_r+0xdc>
  804820:	00000a06 	br	80484c <_malloc_r+0xf8>
  804824:	1800860e 	bge	r3,zero,804a40 <_malloc_r+0x2ec>
  804828:	84000317 	ldw	r16,12(r16)
  80482c:	2c000726 	beq	r5,r16,80484c <_malloc_r+0xf8>
  804830:	80800117 	ldw	r2,4(r16)
  804834:	00ffff04 	movi	r3,-4
  804838:	10c8703a 	and	r4,r2,r3
  80483c:	2447c83a 	sub	r3,r4,r17
  804840:	008003c4 	movi	r2,15
  804844:	10fff70e 	bge	r2,r3,804824 <_malloc_r+0xd0>
  804848:	31bfffc4 	addi	r6,r6,-1
  80484c:	32400044 	addi	r9,r6,1
  804850:	02802074 	movhi	r10,129
  804854:	52963304 	addi	r10,r10,22732
  804858:	54000217 	ldw	r16,8(r10)
  80485c:	8280a026 	beq	r16,r10,804ae0 <_malloc_r+0x38c>
  804860:	80800117 	ldw	r2,4(r16)
  804864:	00ffff04 	movi	r3,-4
  804868:	10ca703a 	and	r5,r2,r3
  80486c:	2c4dc83a 	sub	r6,r5,r17
  804870:	008003c4 	movi	r2,15
  804874:	11808316 	blt	r2,r6,804a84 <_malloc_r+0x330>
  804878:	52800315 	stw	r10,12(r10)
  80487c:	52800215 	stw	r10,8(r10)
  804880:	30002916 	blt	r6,zero,804928 <_malloc_r+0x1d4>
  804884:	8147883a 	add	r3,r16,r5
  804888:	18800117 	ldw	r2,4(r3)
  80488c:	9009883a 	mov	r4,r18
  804890:	10800054 	ori	r2,r2,1
  804894:	18800115 	stw	r2,4(r3)
  804898:	08123f80 	call	8123f8 <__malloc_unlock>
  80489c:	80c00204 	addi	r3,r16,8
  8048a0:	003fc006 	br	8047a4 <_malloc_r+0x50>
  8048a4:	02c02074 	movhi	r11,129
  8048a8:	5ad63104 	addi	r11,r11,22724
  8048ac:	8ac5883a 	add	r2,r17,r11
  8048b0:	14000317 	ldw	r16,12(r2)
  8048b4:	580f883a 	mov	r7,r11
  8048b8:	8806d0fa 	srli	r3,r17,3
  8048bc:	14006c26 	beq	r2,r16,804a70 <_malloc_r+0x31c>
  8048c0:	80c00117 	ldw	r3,4(r16)
  8048c4:	00bfff04 	movi	r2,-4
  8048c8:	81800317 	ldw	r6,12(r16)
  8048cc:	1886703a 	and	r3,r3,r2
  8048d0:	80c7883a 	add	r3,r16,r3
  8048d4:	18800117 	ldw	r2,4(r3)
  8048d8:	81400217 	ldw	r5,8(r16)
  8048dc:	9009883a 	mov	r4,r18
  8048e0:	10800054 	ori	r2,r2,1
  8048e4:	18800115 	stw	r2,4(r3)
  8048e8:	31400215 	stw	r5,8(r6)
  8048ec:	29800315 	stw	r6,12(r5)
  8048f0:	08123f80 	call	8123f8 <__malloc_unlock>
  8048f4:	80c00204 	addi	r3,r16,8
  8048f8:	003faa06 	br	8047a4 <_malloc_r+0x50>
  8048fc:	00800104 	movi	r2,4
  804900:	10c0052e 	bgeu	r2,r3,804918 <_malloc_r+0x1c4>
  804904:	00800504 	movi	r2,20
  804908:	10c07836 	bltu	r2,r3,804aec <_malloc_r+0x398>
  80490c:	198016c4 	addi	r6,r3,91
  804910:	300490fa 	slli	r2,r6,3
  804914:	003fbc06 	br	804808 <_malloc_r+0xb4>
  804918:	8804d1ba 	srli	r2,r17,6
  80491c:	11800e04 	addi	r6,r2,56
  804920:	300490fa 	slli	r2,r6,3
  804924:	003fb806 	br	804808 <_malloc_r+0xb4>
  804928:	00807fc4 	movi	r2,511
  80492c:	1140bb36 	bltu	r2,r5,804c1c <_malloc_r+0x4c8>
  804930:	2806d0fa 	srli	r3,r5,3
  804934:	573ffe04 	addi	fp,r10,-8
  804938:	00800044 	movi	r2,1
  80493c:	180890fa 	slli	r4,r3,3
  804940:	1807d0ba 	srai	r3,r3,2
  804944:	e1c00117 	ldw	r7,4(fp)
  804948:	5909883a 	add	r4,r11,r4
  80494c:	21400217 	ldw	r5,8(r4)
  804950:	10c4983a 	sll	r2,r2,r3
  804954:	81000315 	stw	r4,12(r16)
  804958:	81400215 	stw	r5,8(r16)
  80495c:	388eb03a 	or	r7,r7,r2
  804960:	2c000315 	stw	r16,12(r5)
  804964:	24000215 	stw	r16,8(r4)
  804968:	e1c00115 	stw	r7,4(fp)
  80496c:	4807883a 	mov	r3,r9
  804970:	4800cd16 	blt	r9,zero,804ca8 <_malloc_r+0x554>
  804974:	1807d0ba 	srai	r3,r3,2
  804978:	00800044 	movi	r2,1
  80497c:	10c8983a 	sll	r4,r2,r3
  804980:	39004436 	bltu	r7,r4,804a94 <_malloc_r+0x340>
  804984:	21c4703a 	and	r2,r4,r7
  804988:	10000a1e 	bne	r2,zero,8049b4 <_malloc_r+0x260>
  80498c:	2109883a 	add	r4,r4,r4
  804990:	00bfff04 	movi	r2,-4
  804994:	4884703a 	and	r2,r9,r2
  804998:	3906703a 	and	r3,r7,r4
  80499c:	12400104 	addi	r9,r2,4
  8049a0:	1800041e 	bne	r3,zero,8049b4 <_malloc_r+0x260>
  8049a4:	2109883a 	add	r4,r4,r4
  8049a8:	3904703a 	and	r2,r7,r4
  8049ac:	4a400104 	addi	r9,r9,4
  8049b0:	103ffc26 	beq	r2,zero,8049a4 <_malloc_r+0x250>
  8049b4:	480490fa 	slli	r2,r9,3
  8049b8:	4819883a 	mov	r12,r9
  8049bc:	023fff04 	movi	r8,-4
  8049c0:	589b883a 	add	r13,r11,r2
  8049c4:	6807883a 	mov	r3,r13
  8049c8:	014003c4 	movi	r5,15
  8049cc:	1c000317 	ldw	r16,12(r3)
  8049d0:	1c00041e 	bne	r3,r16,8049e4 <_malloc_r+0x290>
  8049d4:	0000a706 	br	804c74 <_malloc_r+0x520>
  8049d8:	3000ab0e 	bge	r6,zero,804c88 <_malloc_r+0x534>
  8049dc:	84000317 	ldw	r16,12(r16)
  8049e0:	1c00a426 	beq	r3,r16,804c74 <_malloc_r+0x520>
  8049e4:	80800117 	ldw	r2,4(r16)
  8049e8:	1204703a 	and	r2,r2,r8
  8049ec:	144dc83a 	sub	r6,r2,r17
  8049f0:	29bff90e 	bge	r5,r6,8049d8 <_malloc_r+0x284>
  8049f4:	81000317 	ldw	r4,12(r16)
  8049f8:	80c00217 	ldw	r3,8(r16)
  8049fc:	89400054 	ori	r5,r17,1
  804a00:	8445883a 	add	r2,r16,r17
  804a04:	20c00215 	stw	r3,8(r4)
  804a08:	19000315 	stw	r4,12(r3)
  804a0c:	81400115 	stw	r5,4(r16)
  804a10:	1187883a 	add	r3,r2,r6
  804a14:	31000054 	ori	r4,r6,1
  804a18:	50800315 	stw	r2,12(r10)
  804a1c:	50800215 	stw	r2,8(r10)
  804a20:	19800015 	stw	r6,0(r3)
  804a24:	11000115 	stw	r4,4(r2)
  804a28:	12800215 	stw	r10,8(r2)
  804a2c:	12800315 	stw	r10,12(r2)
  804a30:	9009883a 	mov	r4,r18
  804a34:	08123f80 	call	8123f8 <__malloc_unlock>
  804a38:	80c00204 	addi	r3,r16,8
  804a3c:	003f5906 	br	8047a4 <_malloc_r+0x50>
  804a40:	8109883a 	add	r4,r16,r4
  804a44:	20800117 	ldw	r2,4(r4)
  804a48:	80c00217 	ldw	r3,8(r16)
  804a4c:	81400317 	ldw	r5,12(r16)
  804a50:	10800054 	ori	r2,r2,1
  804a54:	20800115 	stw	r2,4(r4)
  804a58:	28c00215 	stw	r3,8(r5)
  804a5c:	19400315 	stw	r5,12(r3)
  804a60:	9009883a 	mov	r4,r18
  804a64:	08123f80 	call	8123f8 <__malloc_unlock>
  804a68:	80c00204 	addi	r3,r16,8
  804a6c:	003f4d06 	br	8047a4 <_malloc_r+0x50>
  804a70:	80800204 	addi	r2,r16,8
  804a74:	14000317 	ldw	r16,12(r2)
  804a78:	143f911e 	bne	r2,r16,8048c0 <_malloc_r+0x16c>
  804a7c:	1a400084 	addi	r9,r3,2
  804a80:	003f7306 	br	804850 <_malloc_r+0xfc>
  804a84:	88c00054 	ori	r3,r17,1
  804a88:	8445883a 	add	r2,r16,r17
  804a8c:	80c00115 	stw	r3,4(r16)
  804a90:	003fdf06 	br	804a10 <_malloc_r+0x2bc>
  804a94:	e4000217 	ldw	r16,8(fp)
  804a98:	00bfff04 	movi	r2,-4
  804a9c:	80c00117 	ldw	r3,4(r16)
  804aa0:	802d883a 	mov	r22,r16
  804aa4:	18aa703a 	and	r21,r3,r2
  804aa8:	ac401636 	bltu	r21,r17,804b04 <_malloc_r+0x3b0>
  804aac:	ac49c83a 	sub	r4,r21,r17
  804ab0:	008003c4 	movi	r2,15
  804ab4:	1100130e 	bge	r2,r4,804b04 <_malloc_r+0x3b0>
  804ab8:	88800054 	ori	r2,r17,1
  804abc:	8447883a 	add	r3,r16,r17
  804ac0:	80800115 	stw	r2,4(r16)
  804ac4:	20800054 	ori	r2,r4,1
  804ac8:	18800115 	stw	r2,4(r3)
  804acc:	e0c00215 	stw	r3,8(fp)
  804ad0:	9009883a 	mov	r4,r18
  804ad4:	08123f80 	call	8123f8 <__malloc_unlock>
  804ad8:	80c00204 	addi	r3,r16,8
  804adc:	003f3106 	br	8047a4 <_malloc_r+0x50>
  804ae0:	39c00117 	ldw	r7,4(r7)
  804ae4:	573ffe04 	addi	fp,r10,-8
  804ae8:	003fa006 	br	80496c <_malloc_r+0x218>
  804aec:	00801504 	movi	r2,84
  804af0:	10c06736 	bltu	r2,r3,804c90 <_malloc_r+0x53c>
  804af4:	8804d33a 	srli	r2,r17,12
  804af8:	11801b84 	addi	r6,r2,110
  804afc:	300490fa 	slli	r2,r6,3
  804b00:	003f4106 	br	804808 <_malloc_r+0xb4>
  804b04:	d0a6eb17 	ldw	r2,-25684(gp)
  804b08:	d0e00417 	ldw	r3,-32752(gp)
  804b0c:	053fffc4 	movi	r20,-1
  804b10:	10800404 	addi	r2,r2,16
  804b14:	88a7883a 	add	r19,r17,r2
  804b18:	1d000326 	beq	r3,r20,804b28 <_malloc_r+0x3d4>
  804b1c:	98c3ffc4 	addi	r3,r19,4095
  804b20:	00bc0004 	movi	r2,-4096
  804b24:	18a6703a 	and	r19,r3,r2
  804b28:	9009883a 	mov	r4,r18
  804b2c:	980b883a 	mov	r5,r19
  804b30:	08054940 	call	805494 <_sbrk_r>
  804b34:	1009883a 	mov	r4,r2
  804b38:	15000426 	beq	r2,r20,804b4c <_malloc_r+0x3f8>
  804b3c:	854b883a 	add	r5,r16,r21
  804b40:	1029883a 	mov	r20,r2
  804b44:	11405a2e 	bgeu	r2,r5,804cb0 <_malloc_r+0x55c>
  804b48:	87000c26 	beq	r16,fp,804b7c <_malloc_r+0x428>
  804b4c:	e4000217 	ldw	r16,8(fp)
  804b50:	80c00117 	ldw	r3,4(r16)
  804b54:	00bfff04 	movi	r2,-4
  804b58:	1884703a 	and	r2,r3,r2
  804b5c:	14400336 	bltu	r2,r17,804b6c <_malloc_r+0x418>
  804b60:	1449c83a 	sub	r4,r2,r17
  804b64:	008003c4 	movi	r2,15
  804b68:	113fd316 	blt	r2,r4,804ab8 <_malloc_r+0x364>
  804b6c:	9009883a 	mov	r4,r18
  804b70:	08123f80 	call	8123f8 <__malloc_unlock>
  804b74:	0007883a 	mov	r3,zero
  804b78:	003f0a06 	br	8047a4 <_malloc_r+0x50>
  804b7c:	05c020b4 	movhi	r23,130
  804b80:	bde2c504 	addi	r23,r23,-29932
  804b84:	b8800017 	ldw	r2,0(r23)
  804b88:	988d883a 	add	r6,r19,r2
  804b8c:	b9800015 	stw	r6,0(r23)
  804b90:	d0e00417 	ldw	r3,-32752(gp)
  804b94:	00bfffc4 	movi	r2,-1
  804b98:	18808e26 	beq	r3,r2,804dd4 <_malloc_r+0x680>
  804b9c:	2145c83a 	sub	r2,r4,r5
  804ba0:	3085883a 	add	r2,r6,r2
  804ba4:	b8800015 	stw	r2,0(r23)
  804ba8:	20c001cc 	andi	r3,r4,7
  804bac:	18005f1e 	bne	r3,zero,804d2c <_malloc_r+0x5d8>
  804bb0:	000b883a 	mov	r5,zero
  804bb4:	a4c5883a 	add	r2,r20,r19
  804bb8:	1083ffcc 	andi	r2,r2,4095
  804bbc:	00c40004 	movi	r3,4096
  804bc0:	1887c83a 	sub	r3,r3,r2
  804bc4:	28e7883a 	add	r19,r5,r3
  804bc8:	9009883a 	mov	r4,r18
  804bcc:	980b883a 	mov	r5,r19
  804bd0:	08054940 	call	805494 <_sbrk_r>
  804bd4:	1007883a 	mov	r3,r2
  804bd8:	00bfffc4 	movi	r2,-1
  804bdc:	18807a26 	beq	r3,r2,804dc8 <_malloc_r+0x674>
  804be0:	1d05c83a 	sub	r2,r3,r20
  804be4:	9885883a 	add	r2,r19,r2
  804be8:	10c00054 	ori	r3,r2,1
  804bec:	b8800017 	ldw	r2,0(r23)
  804bf0:	a021883a 	mov	r16,r20
  804bf4:	a0c00115 	stw	r3,4(r20)
  804bf8:	9885883a 	add	r2,r19,r2
  804bfc:	b8800015 	stw	r2,0(r23)
  804c00:	e5000215 	stw	r20,8(fp)
  804c04:	b7003626 	beq	r22,fp,804ce0 <_malloc_r+0x58c>
  804c08:	018003c4 	movi	r6,15
  804c0c:	35404b36 	bltu	r6,r21,804d3c <_malloc_r+0x5e8>
  804c10:	00800044 	movi	r2,1
  804c14:	a0800115 	stw	r2,4(r20)
  804c18:	003fcd06 	br	804b50 <_malloc_r+0x3fc>
  804c1c:	2808d27a 	srli	r4,r5,9
  804c20:	2000371e 	bne	r4,zero,804d00 <_malloc_r+0x5ac>
  804c24:	2808d0fa 	srli	r4,r5,3
  804c28:	200690fa 	slli	r3,r4,3
  804c2c:	1ad1883a 	add	r8,r3,r11
  804c30:	41800217 	ldw	r6,8(r8)
  804c34:	41805b26 	beq	r8,r6,804da4 <_malloc_r+0x650>
  804c38:	30800117 	ldw	r2,4(r6)
  804c3c:	00ffff04 	movi	r3,-4
  804c40:	10c4703a 	and	r2,r2,r3
  804c44:	2880022e 	bgeu	r5,r2,804c50 <_malloc_r+0x4fc>
  804c48:	31800217 	ldw	r6,8(r6)
  804c4c:	41bffa1e 	bne	r8,r6,804c38 <_malloc_r+0x4e4>
  804c50:	32000317 	ldw	r8,12(r6)
  804c54:	39c00117 	ldw	r7,4(r7)
  804c58:	82000315 	stw	r8,12(r16)
  804c5c:	81800215 	stw	r6,8(r16)
  804c60:	07002074 	movhi	fp,129
  804c64:	e7163104 	addi	fp,fp,22724
  804c68:	34000315 	stw	r16,12(r6)
  804c6c:	44000215 	stw	r16,8(r8)
  804c70:	003f3e06 	br	80496c <_malloc_r+0x218>
  804c74:	63000044 	addi	r12,r12,1
  804c78:	608000cc 	andi	r2,r12,3
  804c7c:	10005d26 	beq	r2,zero,804df4 <_malloc_r+0x6a0>
  804c80:	18c00204 	addi	r3,r3,8
  804c84:	003f5106 	br	8049cc <_malloc_r+0x278>
  804c88:	8089883a 	add	r4,r16,r2
  804c8c:	003f6d06 	br	804a44 <_malloc_r+0x2f0>
  804c90:	00805504 	movi	r2,340
  804c94:	10c02036 	bltu	r2,r3,804d18 <_malloc_r+0x5c4>
  804c98:	8804d3fa 	srli	r2,r17,15
  804c9c:	11801dc4 	addi	r6,r2,119
  804ca0:	300490fa 	slli	r2,r6,3
  804ca4:	003ed806 	br	804808 <_malloc_r+0xb4>
  804ca8:	48c000c4 	addi	r3,r9,3
  804cac:	003f3106 	br	804974 <_malloc_r+0x220>
  804cb0:	05c020b4 	movhi	r23,130
  804cb4:	bde2c504 	addi	r23,r23,-29932
  804cb8:	b8800017 	ldw	r2,0(r23)
  804cbc:	988d883a 	add	r6,r19,r2
  804cc0:	b9800015 	stw	r6,0(r23)
  804cc4:	293fb21e 	bne	r5,r4,804b90 <_malloc_r+0x43c>
  804cc8:	2083ffcc 	andi	r2,r4,4095
  804ccc:	103fb01e 	bne	r2,zero,804b90 <_malloc_r+0x43c>
  804cd0:	e4000217 	ldw	r16,8(fp)
  804cd4:	9d45883a 	add	r2,r19,r21
  804cd8:	10800054 	ori	r2,r2,1
  804cdc:	80800115 	stw	r2,4(r16)
  804ce0:	b8c00017 	ldw	r3,0(r23)
  804ce4:	d0a6ec17 	ldw	r2,-25680(gp)
  804ce8:	10c0012e 	bgeu	r2,r3,804cf0 <_malloc_r+0x59c>
  804cec:	d0e6ec15 	stw	r3,-25680(gp)
  804cf0:	d0a6ed17 	ldw	r2,-25676(gp)
  804cf4:	10ff962e 	bgeu	r2,r3,804b50 <_malloc_r+0x3fc>
  804cf8:	d0e6ed15 	stw	r3,-25676(gp)
  804cfc:	003f9406 	br	804b50 <_malloc_r+0x3fc>
  804d00:	00800104 	movi	r2,4
  804d04:	11001e36 	bltu	r2,r4,804d80 <_malloc_r+0x62c>
  804d08:	2804d1ba 	srli	r2,r5,6
  804d0c:	11000e04 	addi	r4,r2,56
  804d10:	200690fa 	slli	r3,r4,3
  804d14:	003fc506 	br	804c2c <_malloc_r+0x4d8>
  804d18:	00815504 	movi	r2,1364
  804d1c:	10c01d2e 	bgeu	r2,r3,804d94 <_malloc_r+0x640>
  804d20:	01801f84 	movi	r6,126
  804d24:	0080fc04 	movi	r2,1008
  804d28:	003eb706 	br	804808 <_malloc_r+0xb4>
  804d2c:	00800204 	movi	r2,8
  804d30:	10cbc83a 	sub	r5,r2,r3
  804d34:	2169883a 	add	r20,r4,r5
  804d38:	003f9e06 	br	804bb4 <_malloc_r+0x460>
  804d3c:	00bffe04 	movi	r2,-8
  804d40:	a93ffd04 	addi	r4,r21,-12
  804d44:	2088703a 	and	r4,r4,r2
  804d48:	b10b883a 	add	r5,r22,r4
  804d4c:	00c00144 	movi	r3,5
  804d50:	28c00215 	stw	r3,8(r5)
  804d54:	28c00115 	stw	r3,4(r5)
  804d58:	b0800117 	ldw	r2,4(r22)
  804d5c:	1080004c 	andi	r2,r2,1
  804d60:	2084b03a 	or	r2,r4,r2
  804d64:	b0800115 	stw	r2,4(r22)
  804d68:	313fdd2e 	bgeu	r6,r4,804ce0 <_malloc_r+0x58c>
  804d6c:	b1400204 	addi	r5,r22,8
  804d70:	9009883a 	mov	r4,r18
  804d74:	0803ad80 	call	803ad8 <_free_r>
  804d78:	e4000217 	ldw	r16,8(fp)
  804d7c:	003fd806 	br	804ce0 <_malloc_r+0x58c>
  804d80:	00800504 	movi	r2,20
  804d84:	11001536 	bltu	r2,r4,804ddc <_malloc_r+0x688>
  804d88:	210016c4 	addi	r4,r4,91
  804d8c:	200690fa 	slli	r3,r4,3
  804d90:	003fa606 	br	804c2c <_malloc_r+0x4d8>
  804d94:	8804d4ba 	srli	r2,r17,18
  804d98:	11801f04 	addi	r6,r2,124
  804d9c:	300490fa 	slli	r2,r6,3
  804da0:	003e9906 	br	804808 <_malloc_r+0xb4>
  804da4:	2009d0ba 	srai	r4,r4,2
  804da8:	01402074 	movhi	r5,129
  804dac:	29563104 	addi	r5,r5,22724
  804db0:	00c00044 	movi	r3,1
  804db4:	28800117 	ldw	r2,4(r5)
  804db8:	1906983a 	sll	r3,r3,r4
  804dbc:	10c4b03a 	or	r2,r2,r3
  804dc0:	28800115 	stw	r2,4(r5)
  804dc4:	003fa306 	br	804c54 <_malloc_r+0x500>
  804dc8:	0027883a 	mov	r19,zero
  804dcc:	00c00044 	movi	r3,1
  804dd0:	003f8606 	br	804bec <_malloc_r+0x498>
  804dd4:	d1200415 	stw	r4,-32752(gp)
  804dd8:	003f7306 	br	804ba8 <_malloc_r+0x454>
  804ddc:	00801504 	movi	r2,84
  804de0:	11001936 	bltu	r2,r4,804e48 <_malloc_r+0x6f4>
  804de4:	2804d33a 	srli	r2,r5,12
  804de8:	11001b84 	addi	r4,r2,110
  804dec:	200690fa 	slli	r3,r4,3
  804df0:	003f8e06 	br	804c2c <_malloc_r+0x4d8>
  804df4:	480b883a 	mov	r5,r9
  804df8:	6807883a 	mov	r3,r13
  804dfc:	288000cc 	andi	r2,r5,3
  804e00:	18fffe04 	addi	r3,r3,-8
  804e04:	297fffc4 	addi	r5,r5,-1
  804e08:	10001526 	beq	r2,zero,804e60 <_malloc_r+0x70c>
  804e0c:	18800217 	ldw	r2,8(r3)
  804e10:	10fffa26 	beq	r2,r3,804dfc <_malloc_r+0x6a8>
  804e14:	2109883a 	add	r4,r4,r4
  804e18:	393f1e36 	bltu	r7,r4,804a94 <_malloc_r+0x340>
  804e1c:	203f1d26 	beq	r4,zero,804a94 <_malloc_r+0x340>
  804e20:	21c4703a 	and	r2,r4,r7
  804e24:	10000226 	beq	r2,zero,804e30 <_malloc_r+0x6dc>
  804e28:	6013883a 	mov	r9,r12
  804e2c:	003ee106 	br	8049b4 <_malloc_r+0x260>
  804e30:	2109883a 	add	r4,r4,r4
  804e34:	3904703a 	and	r2,r7,r4
  804e38:	63000104 	addi	r12,r12,4
  804e3c:	103ffc26 	beq	r2,zero,804e30 <_malloc_r+0x6dc>
  804e40:	6013883a 	mov	r9,r12
  804e44:	003edb06 	br	8049b4 <_malloc_r+0x260>
  804e48:	00805504 	movi	r2,340
  804e4c:	11000836 	bltu	r2,r4,804e70 <_malloc_r+0x71c>
  804e50:	2804d3fa 	srli	r2,r5,15
  804e54:	11001dc4 	addi	r4,r2,119
  804e58:	200690fa 	slli	r3,r4,3
  804e5c:	003f7306 	br	804c2c <_malloc_r+0x4d8>
  804e60:	0104303a 	nor	r2,zero,r4
  804e64:	388e703a 	and	r7,r7,r2
  804e68:	e1c00115 	stw	r7,4(fp)
  804e6c:	003fe906 	br	804e14 <_malloc_r+0x6c0>
  804e70:	00815504 	movi	r2,1364
  804e74:	1100032e 	bgeu	r2,r4,804e84 <_malloc_r+0x730>
  804e78:	01001f84 	movi	r4,126
  804e7c:	00c0fc04 	movi	r3,1008
  804e80:	003f6a06 	br	804c2c <_malloc_r+0x4d8>
  804e84:	2804d4ba 	srli	r2,r5,18
  804e88:	11001f04 	addi	r4,r2,124
  804e8c:	200690fa 	slli	r3,r4,3
  804e90:	003f6606 	br	804c2c <_malloc_r+0x4d8>

00804e94 <memchr>:
  804e94:	008000c4 	movi	r2,3
  804e98:	29403fcc 	andi	r5,r5,255
  804e9c:	2007883a 	mov	r3,r4
  804ea0:	1180022e 	bgeu	r2,r6,804eac <memchr+0x18>
  804ea4:	2084703a 	and	r2,r4,r2
  804ea8:	10000b26 	beq	r2,zero,804ed8 <memchr+0x44>
  804eac:	313fffc4 	addi	r4,r6,-1
  804eb0:	3000051e 	bne	r6,zero,804ec8 <memchr+0x34>
  804eb4:	00002c06 	br	804f68 <memchr+0xd4>
  804eb8:	213fffc4 	addi	r4,r4,-1
  804ebc:	00bfffc4 	movi	r2,-1
  804ec0:	18c00044 	addi	r3,r3,1
  804ec4:	20802826 	beq	r4,r2,804f68 <memchr+0xd4>
  804ec8:	18800003 	ldbu	r2,0(r3)
  804ecc:	28bffa1e 	bne	r5,r2,804eb8 <memchr+0x24>
  804ed0:	1805883a 	mov	r2,r3
  804ed4:	f800283a 	ret
  804ed8:	0011883a 	mov	r8,zero
  804edc:	0007883a 	mov	r3,zero
  804ee0:	01c00104 	movi	r7,4
  804ee4:	4004923a 	slli	r2,r8,8
  804ee8:	18c00044 	addi	r3,r3,1
  804eec:	1151883a 	add	r8,r2,r5
  804ef0:	19fffc1e 	bne	r3,r7,804ee4 <memchr+0x50>
  804ef4:	02bfbff4 	movhi	r10,65279
  804ef8:	52bfbfc4 	addi	r10,r10,-257
  804efc:	02602074 	movhi	r9,32897
  804f00:	4a602004 	addi	r9,r9,-32640
  804f04:	02c000c4 	movi	r11,3
  804f08:	20800017 	ldw	r2,0(r4)
  804f0c:	31bfff04 	addi	r6,r6,-4
  804f10:	200f883a 	mov	r7,r4
  804f14:	1204f03a 	xor	r2,r2,r8
  804f18:	1287883a 	add	r3,r2,r10
  804f1c:	1a46703a 	and	r3,r3,r9
  804f20:	0084303a 	nor	r2,zero,r2
  804f24:	10c4703a 	and	r2,r2,r3
  804f28:	10000b26 	beq	r2,zero,804f58 <memchr+0xc4>
  804f2c:	20800003 	ldbu	r2,0(r4)
  804f30:	28800f26 	beq	r5,r2,804f70 <memchr+0xdc>
  804f34:	20800043 	ldbu	r2,1(r4)
  804f38:	21c00044 	addi	r7,r4,1
  804f3c:	28800c26 	beq	r5,r2,804f70 <memchr+0xdc>
  804f40:	20800083 	ldbu	r2,2(r4)
  804f44:	21c00084 	addi	r7,r4,2
  804f48:	28800926 	beq	r5,r2,804f70 <memchr+0xdc>
  804f4c:	208000c3 	ldbu	r2,3(r4)
  804f50:	21c000c4 	addi	r7,r4,3
  804f54:	28800626 	beq	r5,r2,804f70 <memchr+0xdc>
  804f58:	21000104 	addi	r4,r4,4
  804f5c:	59bfea36 	bltu	r11,r6,804f08 <memchr+0x74>
  804f60:	2007883a 	mov	r3,r4
  804f64:	003fd106 	br	804eac <memchr+0x18>
  804f68:	0005883a 	mov	r2,zero
  804f6c:	f800283a 	ret
  804f70:	3805883a 	mov	r2,r7
  804f74:	f800283a 	ret

00804f78 <memcpy>:
  804f78:	01c003c4 	movi	r7,15
  804f7c:	2007883a 	mov	r3,r4
  804f80:	3980032e 	bgeu	r7,r6,804f90 <memcpy+0x18>
  804f84:	2904b03a 	or	r2,r5,r4
  804f88:	108000cc 	andi	r2,r2,3
  804f8c:	10000926 	beq	r2,zero,804fb4 <memcpy+0x3c>
  804f90:	30000626 	beq	r6,zero,804fac <memcpy+0x34>
  804f94:	30cd883a 	add	r6,r6,r3
  804f98:	28800003 	ldbu	r2,0(r5)
  804f9c:	29400044 	addi	r5,r5,1
  804fa0:	18800005 	stb	r2,0(r3)
  804fa4:	18c00044 	addi	r3,r3,1
  804fa8:	30fffb1e 	bne	r6,r3,804f98 <memcpy+0x20>
  804fac:	2005883a 	mov	r2,r4
  804fb0:	f800283a 	ret
  804fb4:	3811883a 	mov	r8,r7
  804fb8:	200f883a 	mov	r7,r4
  804fbc:	28c00017 	ldw	r3,0(r5)
  804fc0:	31bffc04 	addi	r6,r6,-16
  804fc4:	38c00015 	stw	r3,0(r7)
  804fc8:	28800117 	ldw	r2,4(r5)
  804fcc:	38800115 	stw	r2,4(r7)
  804fd0:	28c00217 	ldw	r3,8(r5)
  804fd4:	38c00215 	stw	r3,8(r7)
  804fd8:	28800317 	ldw	r2,12(r5)
  804fdc:	29400404 	addi	r5,r5,16
  804fe0:	38800315 	stw	r2,12(r7)
  804fe4:	39c00404 	addi	r7,r7,16
  804fe8:	41bff436 	bltu	r8,r6,804fbc <memcpy+0x44>
  804fec:	008000c4 	movi	r2,3
  804ff0:	1180072e 	bgeu	r2,r6,805010 <memcpy+0x98>
  804ff4:	1007883a 	mov	r3,r2
  804ff8:	28800017 	ldw	r2,0(r5)
  804ffc:	31bfff04 	addi	r6,r6,-4
  805000:	29400104 	addi	r5,r5,4
  805004:	38800015 	stw	r2,0(r7)
  805008:	39c00104 	addi	r7,r7,4
  80500c:	19bffa36 	bltu	r3,r6,804ff8 <memcpy+0x80>
  805010:	3807883a 	mov	r3,r7
  805014:	003fde06 	br	804f90 <memcpy+0x18>

00805018 <memset>:
  805018:	008000c4 	movi	r2,3
  80501c:	29403fcc 	andi	r5,r5,255
  805020:	2007883a 	mov	r3,r4
  805024:	1180022e 	bgeu	r2,r6,805030 <memset+0x18>
  805028:	2084703a 	and	r2,r4,r2
  80502c:	10000826 	beq	r2,zero,805050 <memset+0x38>
  805030:	30000526 	beq	r6,zero,805048 <memset+0x30>
  805034:	2805883a 	mov	r2,r5
  805038:	30cd883a 	add	r6,r6,r3
  80503c:	18800005 	stb	r2,0(r3)
  805040:	18c00044 	addi	r3,r3,1
  805044:	19bffd1e 	bne	r3,r6,80503c <memset+0x24>
  805048:	2005883a 	mov	r2,r4
  80504c:	f800283a 	ret
  805050:	2804923a 	slli	r2,r5,8
  805054:	020003c4 	movi	r8,15
  805058:	200f883a 	mov	r7,r4
  80505c:	2884b03a 	or	r2,r5,r2
  805060:	1006943a 	slli	r3,r2,16
  805064:	10c6b03a 	or	r3,r2,r3
  805068:	41800a2e 	bgeu	r8,r6,805094 <memset+0x7c>
  80506c:	4005883a 	mov	r2,r8
  805070:	31bffc04 	addi	r6,r6,-16
  805074:	38c00015 	stw	r3,0(r7)
  805078:	38c00115 	stw	r3,4(r7)
  80507c:	38c00215 	stw	r3,8(r7)
  805080:	38c00315 	stw	r3,12(r7)
  805084:	39c00404 	addi	r7,r7,16
  805088:	11bff936 	bltu	r2,r6,805070 <memset+0x58>
  80508c:	008000c4 	movi	r2,3
  805090:	1180052e 	bgeu	r2,r6,8050a8 <memset+0x90>
  805094:	31bfff04 	addi	r6,r6,-4
  805098:	008000c4 	movi	r2,3
  80509c:	38c00015 	stw	r3,0(r7)
  8050a0:	39c00104 	addi	r7,r7,4
  8050a4:	11bffb36 	bltu	r2,r6,805094 <memset+0x7c>
  8050a8:	3807883a 	mov	r3,r7
  8050ac:	003fe006 	br	805030 <memset+0x18>

008050b0 <_open_r>:
  8050b0:	defffd04 	addi	sp,sp,-12
  8050b4:	dc000015 	stw	r16,0(sp)
  8050b8:	040020b4 	movhi	r16,130
  8050bc:	8422b604 	addi	r16,r16,-29992
  8050c0:	dc400115 	stw	r17,4(sp)
  8050c4:	80000015 	stw	zero,0(r16)
  8050c8:	2023883a 	mov	r17,r4
  8050cc:	2809883a 	mov	r4,r5
  8050d0:	300b883a 	mov	r5,r6
  8050d4:	380d883a 	mov	r6,r7
  8050d8:	dfc00215 	stw	ra,8(sp)
  8050dc:	08125100 	call	812510 <open>
  8050e0:	1007883a 	mov	r3,r2
  8050e4:	00bfffc4 	movi	r2,-1
  8050e8:	18800626 	beq	r3,r2,805104 <_open_r+0x54>
  8050ec:	1805883a 	mov	r2,r3
  8050f0:	dfc00217 	ldw	ra,8(sp)
  8050f4:	dc400117 	ldw	r17,4(sp)
  8050f8:	dc000017 	ldw	r16,0(sp)
  8050fc:	dec00304 	addi	sp,sp,12
  805100:	f800283a 	ret
  805104:	80800017 	ldw	r2,0(r16)
  805108:	103ff826 	beq	r2,zero,8050ec <_open_r+0x3c>
  80510c:	88800015 	stw	r2,0(r17)
  805110:	1805883a 	mov	r2,r3
  805114:	dfc00217 	ldw	ra,8(sp)
  805118:	dc400117 	ldw	r17,4(sp)
  80511c:	dc000017 	ldw	r16,0(sp)
  805120:	dec00304 	addi	sp,sp,12
  805124:	f800283a 	ret

00805128 <printf>:
  805128:	defffb04 	addi	sp,sp,-20
  80512c:	dfc00115 	stw	ra,4(sp)
  805130:	d9400215 	stw	r5,8(sp)
  805134:	d9800315 	stw	r6,12(sp)
  805138:	d9c00415 	stw	r7,16(sp)
  80513c:	00802074 	movhi	r2,129
  805140:	109bcd04 	addi	r2,r2,28468
  805144:	10c00017 	ldw	r3,0(r2)
  805148:	200b883a 	mov	r5,r4
  80514c:	d8800204 	addi	r2,sp,8
  805150:	19000217 	ldw	r4,8(r3)
  805154:	100d883a 	mov	r6,r2
  805158:	d8800015 	stw	r2,0(sp)
  80515c:	0807a800 	call	807a80 <__vfprintf_internal>
  805160:	dfc00117 	ldw	ra,4(sp)
  805164:	dec00504 	addi	sp,sp,20
  805168:	f800283a 	ret

0080516c <_printf_r>:
  80516c:	defffc04 	addi	sp,sp,-16
  805170:	dfc00115 	stw	ra,4(sp)
  805174:	d9800215 	stw	r6,8(sp)
  805178:	d9c00315 	stw	r7,12(sp)
  80517c:	280d883a 	mov	r6,r5
  805180:	21400217 	ldw	r5,8(r4)
  805184:	d8c00204 	addi	r3,sp,8
  805188:	180f883a 	mov	r7,r3
  80518c:	d8c00015 	stw	r3,0(sp)
  805190:	0805bbc0 	call	805bbc <___vfprintf_internal_r>
  805194:	dfc00117 	ldw	ra,4(sp)
  805198:	dec00404 	addi	sp,sp,16
  80519c:	f800283a 	ret

008051a0 <_puts_r>:
  8051a0:	defff604 	addi	sp,sp,-40
  8051a4:	dc400715 	stw	r17,28(sp)
  8051a8:	2023883a 	mov	r17,r4
  8051ac:	2809883a 	mov	r4,r5
  8051b0:	dfc00915 	stw	ra,36(sp)
  8051b4:	dcc00815 	stw	r19,32(sp)
  8051b8:	2827883a 	mov	r19,r5
  8051bc:	08057640 	call	805764 <strlen>
  8051c0:	89400217 	ldw	r5,8(r17)
  8051c4:	00c02074 	movhi	r3,129
  8051c8:	18d47d04 	addi	r3,r3,20980
  8051cc:	01c00044 	movi	r7,1
  8051d0:	12000044 	addi	r8,r2,1
  8051d4:	d8c00515 	stw	r3,20(sp)
  8051d8:	d9c00615 	stw	r7,24(sp)
  8051dc:	d8c00304 	addi	r3,sp,12
  8051e0:	01c00084 	movi	r7,2
  8051e4:	8809883a 	mov	r4,r17
  8051e8:	d80d883a 	mov	r6,sp
  8051ec:	d8c00015 	stw	r3,0(sp)
  8051f0:	dcc00315 	stw	r19,12(sp)
  8051f4:	da000215 	stw	r8,8(sp)
  8051f8:	d9c00115 	stw	r7,4(sp)
  8051fc:	d8800415 	stw	r2,16(sp)
  805200:	080ae9c0 	call	80ae9c <__sfvwrite_r>
  805204:	00ffffc4 	movi	r3,-1
  805208:	10000626 	beq	r2,zero,805224 <_puts_r+0x84>
  80520c:	1805883a 	mov	r2,r3
  805210:	dfc00917 	ldw	ra,36(sp)
  805214:	dcc00817 	ldw	r19,32(sp)
  805218:	dc400717 	ldw	r17,28(sp)
  80521c:	dec00a04 	addi	sp,sp,40
  805220:	f800283a 	ret
  805224:	00c00284 	movi	r3,10
  805228:	1805883a 	mov	r2,r3
  80522c:	dfc00917 	ldw	ra,36(sp)
  805230:	dcc00817 	ldw	r19,32(sp)
  805234:	dc400717 	ldw	r17,28(sp)
  805238:	dec00a04 	addi	sp,sp,40
  80523c:	f800283a 	ret

00805240 <puts>:
  805240:	00802074 	movhi	r2,129
  805244:	109bcd04 	addi	r2,r2,28468
  805248:	200b883a 	mov	r5,r4
  80524c:	11000017 	ldw	r4,0(r2)
  805250:	08051a01 	jmpi	8051a0 <_puts_r>

00805254 <__srefill_r>:
  805254:	defffd04 	addi	sp,sp,-12
  805258:	dc400115 	stw	r17,4(sp)
  80525c:	dc000015 	stw	r16,0(sp)
  805260:	dfc00215 	stw	ra,8(sp)
  805264:	2023883a 	mov	r17,r4
  805268:	2821883a 	mov	r16,r5
  80526c:	20000226 	beq	r4,zero,805278 <__srefill_r+0x24>
  805270:	20800e17 	ldw	r2,56(r4)
  805274:	10004126 	beq	r2,zero,80537c <__srefill_r+0x128>
  805278:	80c0030b 	ldhu	r3,12(r16)
  80527c:	80000115 	stw	zero,4(r16)
  805280:	1880080c 	andi	r2,r3,32
  805284:	1000361e 	bne	r2,zero,805360 <__srefill_r+0x10c>
  805288:	1880010c 	andi	r2,r3,4
  80528c:	1000211e 	bne	r2,zero,805314 <__srefill_r+0xc0>
  805290:	1880040c 	andi	r2,r3,16
  805294:	10005026 	beq	r2,zero,8053d8 <__srefill_r+0x184>
  805298:	1880020c 	andi	r2,r3,8
  80529c:	1000541e 	bne	r2,zero,8053f0 <__srefill_r+0x19c>
  8052a0:	8080030b 	ldhu	r2,12(r16)
  8052a4:	10800114 	ori	r2,r2,4
  8052a8:	8080030d 	sth	r2,12(r16)
  8052ac:	80800417 	ldw	r2,16(r16)
  8052b0:	10004526 	beq	r2,zero,8053c8 <__srefill_r+0x174>
  8052b4:	8080030b 	ldhu	r2,12(r16)
  8052b8:	108000cc 	andi	r2,r2,3
  8052bc:	1000361e 	bne	r2,zero,805398 <__srefill_r+0x144>
  8052c0:	81800417 	ldw	r6,16(r16)
  8052c4:	80c00817 	ldw	r3,32(r16)
  8052c8:	81400717 	ldw	r5,28(r16)
  8052cc:	81c00517 	ldw	r7,20(r16)
  8052d0:	8809883a 	mov	r4,r17
  8052d4:	81800015 	stw	r6,0(r16)
  8052d8:	183ee83a 	callr	r3
  8052dc:	80c0030b 	ldhu	r3,12(r16)
  8052e0:	1009883a 	mov	r4,r2
  8052e4:	80800115 	stw	r2,4(r16)
  8052e8:	00b7ffc4 	movi	r2,-8193
  8052ec:	1884703a 	and	r2,r3,r2
  8052f0:	8080030d 	sth	r2,12(r16)
  8052f4:	0100230e 	bge	zero,r4,805384 <__srefill_r+0x130>
  8052f8:	0009883a 	mov	r4,zero
  8052fc:	2005883a 	mov	r2,r4
  805300:	dfc00217 	ldw	ra,8(sp)
  805304:	dc400117 	ldw	r17,4(sp)
  805308:	dc000017 	ldw	r16,0(sp)
  80530c:	dec00304 	addi	sp,sp,12
  805310:	f800283a 	ret
  805314:	81400c17 	ldw	r5,48(r16)
  805318:	283fe426 	beq	r5,zero,8052ac <__srefill_r+0x58>
  80531c:	80801004 	addi	r2,r16,64
  805320:	28800226 	beq	r5,r2,80532c <__srefill_r+0xd8>
  805324:	8809883a 	mov	r4,r17
  805328:	0803ad80 	call	803ad8 <_free_r>
  80532c:	80800f17 	ldw	r2,60(r16)
  805330:	80000c15 	stw	zero,48(r16)
  805334:	80800115 	stw	r2,4(r16)
  805338:	103fdc26 	beq	r2,zero,8052ac <__srefill_r+0x58>
  80533c:	80800e17 	ldw	r2,56(r16)
  805340:	0009883a 	mov	r4,zero
  805344:	80800015 	stw	r2,0(r16)
  805348:	2005883a 	mov	r2,r4
  80534c:	dfc00217 	ldw	ra,8(sp)
  805350:	dc400117 	ldw	r17,4(sp)
  805354:	dc000017 	ldw	r16,0(sp)
  805358:	dec00304 	addi	sp,sp,12
  80535c:	f800283a 	ret
  805360:	013fffc4 	movi	r4,-1
  805364:	2005883a 	mov	r2,r4
  805368:	dfc00217 	ldw	ra,8(sp)
  80536c:	dc400117 	ldw	r17,4(sp)
  805370:	dc000017 	ldw	r16,0(sp)
  805374:	dec00304 	addi	sp,sp,12
  805378:	f800283a 	ret
  80537c:	08033640 	call	803364 <__sinit>
  805380:	003fbd06 	br	805278 <__srefill_r+0x24>
  805384:	20000b1e 	bne	r4,zero,8053b4 <__srefill_r+0x160>
  805388:	10800814 	ori	r2,r2,32
  80538c:	013fffc4 	movi	r4,-1
  805390:	8080030d 	sth	r2,12(r16)
  805394:	003fd906 	br	8052fc <__srefill_r+0xa8>
  805398:	00802074 	movhi	r2,129
  80539c:	109bce04 	addi	r2,r2,28472
  8053a0:	11000017 	ldw	r4,0(r2)
  8053a4:	01402034 	movhi	r5,128
  8053a8:	29550604 	addi	r5,r5,21528
  8053ac:	08043f40 	call	8043f4 <_fwalk>
  8053b0:	003fc306 	br	8052c0 <__srefill_r+0x6c>
  8053b4:	10801014 	ori	r2,r2,64
  8053b8:	013fffc4 	movi	r4,-1
  8053bc:	8080030d 	sth	r2,12(r16)
  8053c0:	80000115 	stw	zero,4(r16)
  8053c4:	003fcd06 	br	8052fc <__srefill_r+0xa8>
  8053c8:	8809883a 	mov	r4,r17
  8053cc:	800b883a 	mov	r5,r16
  8053d0:	08045980 	call	804598 <__smakebuf_r>
  8053d4:	003fb706 	br	8052b4 <__srefill_r+0x60>
  8053d8:	18c01014 	ori	r3,r3,64
  8053dc:	00800244 	movi	r2,9
  8053e0:	013fffc4 	movi	r4,-1
  8053e4:	88800015 	stw	r2,0(r17)
  8053e8:	80c0030d 	sth	r3,12(r16)
  8053ec:	003fc306 	br	8052fc <__srefill_r+0xa8>
  8053f0:	8809883a 	mov	r4,r17
  8053f4:	800b883a 	mov	r5,r16
  8053f8:	0802e380 	call	802e38 <_fflush_r>
  8053fc:	103fd81e 	bne	r2,zero,805360 <__srefill_r+0x10c>
  805400:	8080030b 	ldhu	r2,12(r16)
  805404:	80000215 	stw	zero,8(r16)
  805408:	80000615 	stw	zero,24(r16)
  80540c:	10bffdcc 	andi	r2,r2,65527
  805410:	8080030d 	sth	r2,12(r16)
  805414:	003fa206 	br	8052a0 <__srefill_r+0x4c>

00805418 <lflush>:
  805418:	20c0030b 	ldhu	r3,12(r4)
  80541c:	01400244 	movi	r5,9
  805420:	0005883a 	mov	r2,zero
  805424:	18c0024c 	andi	r3,r3,9
  805428:	19400126 	beq	r3,r5,805430 <lflush+0x18>
  80542c:	f800283a 	ret
  805430:	08030341 	jmpi	803034 <fflush>

00805434 <__srget_r>:
  805434:	defffe04 	addi	sp,sp,-8
  805438:	dc000015 	stw	r16,0(sp)
  80543c:	dfc00115 	stw	ra,4(sp)
  805440:	2821883a 	mov	r16,r5
  805444:	08052540 	call	805254 <__srefill_r>
  805448:	013fffc4 	movi	r4,-1
  80544c:	1000071e 	bne	r2,zero,80546c <__srget_r+0x38>
  805450:	80800117 	ldw	r2,4(r16)
  805454:	81000017 	ldw	r4,0(r16)
  805458:	10bfffc4 	addi	r2,r2,-1
  80545c:	20c00044 	addi	r3,r4,1
  805460:	80800115 	stw	r2,4(r16)
  805464:	21000003 	ldbu	r4,0(r4)
  805468:	80c00015 	stw	r3,0(r16)
  80546c:	2005883a 	mov	r2,r4
  805470:	dfc00117 	ldw	ra,4(sp)
  805474:	dc000017 	ldw	r16,0(sp)
  805478:	dec00204 	addi	sp,sp,8
  80547c:	f800283a 	ret

00805480 <__srget>:
  805480:	00802074 	movhi	r2,129
  805484:	109bcd04 	addi	r2,r2,28468
  805488:	200b883a 	mov	r5,r4
  80548c:	11000017 	ldw	r4,0(r2)
  805490:	08054341 	jmpi	805434 <__srget_r>

00805494 <_sbrk_r>:
  805494:	defffd04 	addi	sp,sp,-12
  805498:	dc000015 	stw	r16,0(sp)
  80549c:	040020b4 	movhi	r16,130
  8054a0:	8422b604 	addi	r16,r16,-29992
  8054a4:	dc400115 	stw	r17,4(sp)
  8054a8:	80000015 	stw	zero,0(r16)
  8054ac:	2023883a 	mov	r17,r4
  8054b0:	2809883a 	mov	r4,r5
  8054b4:	dfc00215 	stw	ra,8(sp)
  8054b8:	08128f80 	call	8128f8 <sbrk>
  8054bc:	1007883a 	mov	r3,r2
  8054c0:	00bfffc4 	movi	r2,-1
  8054c4:	18800626 	beq	r3,r2,8054e0 <_sbrk_r+0x4c>
  8054c8:	1805883a 	mov	r2,r3
  8054cc:	dfc00217 	ldw	ra,8(sp)
  8054d0:	dc400117 	ldw	r17,4(sp)
  8054d4:	dc000017 	ldw	r16,0(sp)
  8054d8:	dec00304 	addi	sp,sp,12
  8054dc:	f800283a 	ret
  8054e0:	80800017 	ldw	r2,0(r16)
  8054e4:	103ff826 	beq	r2,zero,8054c8 <_sbrk_r+0x34>
  8054e8:	88800015 	stw	r2,0(r17)
  8054ec:	1805883a 	mov	r2,r3
  8054f0:	dfc00217 	ldw	ra,8(sp)
  8054f4:	dc400117 	ldw	r17,4(sp)
  8054f8:	dc000017 	ldw	r16,0(sp)
  8054fc:	dec00304 	addi	sp,sp,12
  805500:	f800283a 	ret

00805504 <eofread>:
  805504:	0005883a 	mov	r2,zero
  805508:	f800283a 	ret

0080550c <_sscanf_r>:
  80550c:	deffe404 	addi	sp,sp,-112
  805510:	dcc01915 	stw	r19,100(sp)
  805514:	2027883a 	mov	r19,r4
  805518:	dfc01a15 	stw	ra,104(sp)
  80551c:	dc401815 	stw	r17,96(sp)
  805520:	d9c01b15 	stw	r7,108(sp)
  805524:	00808104 	movi	r2,516
  805528:	2809883a 	mov	r4,r5
  80552c:	3023883a 	mov	r17,r6
  805530:	d9400115 	stw	r5,4(sp)
  805534:	d9400515 	stw	r5,20(sp)
  805538:	d880040d 	sth	r2,16(sp)
  80553c:	08057640 	call	805764 <strlen>
  805540:	d8c01b04 	addi	r3,sp,108
  805544:	d8c00015 	stw	r3,0(sp)
  805548:	180f883a 	mov	r7,r3
  80554c:	023fffc4 	movi	r8,-1
  805550:	00c02034 	movhi	r3,128
  805554:	18d54104 	addi	r3,r3,21764
  805558:	9809883a 	mov	r4,r19
  80555c:	880d883a 	mov	r6,r17
  805560:	d9400104 	addi	r5,sp,4
  805564:	d8800615 	stw	r2,24(sp)
  805568:	d8c00915 	stw	r3,36(sp)
  80556c:	da00048d 	sth	r8,18(sp)
  805570:	d8800215 	stw	r2,8(sp)
  805574:	d8000d15 	stw	zero,52(sp)
  805578:	d8001215 	stw	zero,72(sp)
  80557c:	0807aa40 	call	807aa4 <__svfscanf_r>
  805580:	dfc01a17 	ldw	ra,104(sp)
  805584:	dcc01917 	ldw	r19,100(sp)
  805588:	dc401817 	ldw	r17,96(sp)
  80558c:	dec01c04 	addi	sp,sp,112
  805590:	f800283a 	ret

00805594 <sscanf>:
  805594:	deffe404 	addi	sp,sp,-112
  805598:	dfc01915 	stw	ra,100(sp)
  80559c:	dc401815 	stw	r17,96(sp)
  8055a0:	d9801a15 	stw	r6,104(sp)
  8055a4:	d9c01b15 	stw	r7,108(sp)
  8055a8:	00808104 	movi	r2,516
  8055ac:	2823883a 	mov	r17,r5
  8055b0:	d9000515 	stw	r4,20(sp)
  8055b4:	d9000115 	stw	r4,4(sp)
  8055b8:	d880040d 	sth	r2,16(sp)
  8055bc:	08057640 	call	805764 <strlen>
  8055c0:	d8c01a04 	addi	r3,sp,104
  8055c4:	d8c00015 	stw	r3,0(sp)
  8055c8:	00c02074 	movhi	r3,129
  8055cc:	18dbcd04 	addi	r3,r3,28468
  8055d0:	19000017 	ldw	r4,0(r3)
  8055d4:	d9c00017 	ldw	r7,0(sp)
  8055d8:	00c02034 	movhi	r3,128
  8055dc:	18d54104 	addi	r3,r3,21764
  8055e0:	023fffc4 	movi	r8,-1
  8055e4:	880d883a 	mov	r6,r17
  8055e8:	d9400104 	addi	r5,sp,4
  8055ec:	d8800615 	stw	r2,24(sp)
  8055f0:	d8c00915 	stw	r3,36(sp)
  8055f4:	da00048d 	sth	r8,18(sp)
  8055f8:	d8800215 	stw	r2,8(sp)
  8055fc:	d8000d15 	stw	zero,52(sp)
  805600:	d8001215 	stw	zero,72(sp)
  805604:	0807aa40 	call	807aa4 <__svfscanf_r>
  805608:	dfc01917 	ldw	ra,100(sp)
  80560c:	dc401817 	ldw	r17,96(sp)
  805610:	dec01c04 	addi	sp,sp,112
  805614:	f800283a 	ret

00805618 <__sclose>:
  805618:	2940038f 	ldh	r5,14(r5)
  80561c:	08095941 	jmpi	809594 <_close_r>

00805620 <__sseek>:
  805620:	defffe04 	addi	sp,sp,-8
  805624:	dc000015 	stw	r16,0(sp)
  805628:	2821883a 	mov	r16,r5
  80562c:	2940038f 	ldh	r5,14(r5)
  805630:	dfc00115 	stw	ra,4(sp)
  805634:	080b4980 	call	80b498 <_lseek_r>
  805638:	1007883a 	mov	r3,r2
  80563c:	00bfffc4 	movi	r2,-1
  805640:	18800926 	beq	r3,r2,805668 <__sseek+0x48>
  805644:	8080030b 	ldhu	r2,12(r16)
  805648:	80c01415 	stw	r3,80(r16)
  80564c:	10840014 	ori	r2,r2,4096
  805650:	8080030d 	sth	r2,12(r16)
  805654:	1805883a 	mov	r2,r3
  805658:	dfc00117 	ldw	ra,4(sp)
  80565c:	dc000017 	ldw	r16,0(sp)
  805660:	dec00204 	addi	sp,sp,8
  805664:	f800283a 	ret
  805668:	8080030b 	ldhu	r2,12(r16)
  80566c:	10bbffcc 	andi	r2,r2,61439
  805670:	8080030d 	sth	r2,12(r16)
  805674:	1805883a 	mov	r2,r3
  805678:	dfc00117 	ldw	ra,4(sp)
  80567c:	dc000017 	ldw	r16,0(sp)
  805680:	dec00204 	addi	sp,sp,8
  805684:	f800283a 	ret

00805688 <__swrite>:
  805688:	2880030b 	ldhu	r2,12(r5)
  80568c:	defffb04 	addi	sp,sp,-20
  805690:	dcc00315 	stw	r19,12(sp)
  805694:	1080400c 	andi	r2,r2,256
  805698:	dc800215 	stw	r18,8(sp)
  80569c:	dc400115 	stw	r17,4(sp)
  8056a0:	dc000015 	stw	r16,0(sp)
  8056a4:	3027883a 	mov	r19,r6
  8056a8:	3825883a 	mov	r18,r7
  8056ac:	dfc00415 	stw	ra,16(sp)
  8056b0:	2821883a 	mov	r16,r5
  8056b4:	000d883a 	mov	r6,zero
  8056b8:	01c00084 	movi	r7,2
  8056bc:	2023883a 	mov	r17,r4
  8056c0:	10000226 	beq	r2,zero,8056cc <__swrite+0x44>
  8056c4:	2940038f 	ldh	r5,14(r5)
  8056c8:	080b4980 	call	80b498 <_lseek_r>
  8056cc:	8080030b 	ldhu	r2,12(r16)
  8056d0:	8140038f 	ldh	r5,14(r16)
  8056d4:	8809883a 	mov	r4,r17
  8056d8:	10bbffcc 	andi	r2,r2,61439
  8056dc:	980d883a 	mov	r6,r19
  8056e0:	900f883a 	mov	r7,r18
  8056e4:	8080030d 	sth	r2,12(r16)
  8056e8:	dfc00417 	ldw	ra,16(sp)
  8056ec:	dcc00317 	ldw	r19,12(sp)
  8056f0:	dc800217 	ldw	r18,8(sp)
  8056f4:	dc400117 	ldw	r17,4(sp)
  8056f8:	dc000017 	ldw	r16,0(sp)
  8056fc:	dec00504 	addi	sp,sp,20
  805700:	080922c1 	jmpi	80922c <_write_r>

00805704 <__sread>:
  805704:	defffe04 	addi	sp,sp,-8
  805708:	dc000015 	stw	r16,0(sp)
  80570c:	2821883a 	mov	r16,r5
  805710:	2940038f 	ldh	r5,14(r5)
  805714:	dfc00115 	stw	ra,4(sp)
  805718:	080c77c0 	call	80c77c <_read_r>
  80571c:	1007883a 	mov	r3,r2
  805720:	10000816 	blt	r2,zero,805744 <__sread+0x40>
  805724:	80801417 	ldw	r2,80(r16)
  805728:	10c5883a 	add	r2,r2,r3
  80572c:	80801415 	stw	r2,80(r16)
  805730:	1805883a 	mov	r2,r3
  805734:	dfc00117 	ldw	ra,4(sp)
  805738:	dc000017 	ldw	r16,0(sp)
  80573c:	dec00204 	addi	sp,sp,8
  805740:	f800283a 	ret
  805744:	8080030b 	ldhu	r2,12(r16)
  805748:	10bbffcc 	andi	r2,r2,61439
  80574c:	8080030d 	sth	r2,12(r16)
  805750:	1805883a 	mov	r2,r3
  805754:	dfc00117 	ldw	ra,4(sp)
  805758:	dc000017 	ldw	r16,0(sp)
  80575c:	dec00204 	addi	sp,sp,8
  805760:	f800283a 	ret

00805764 <strlen>:
  805764:	208000cc 	andi	r2,r4,3
  805768:	2011883a 	mov	r8,r4
  80576c:	1000161e 	bne	r2,zero,8057c8 <strlen+0x64>
  805770:	20c00017 	ldw	r3,0(r4)
  805774:	017fbff4 	movhi	r5,65279
  805778:	297fbfc4 	addi	r5,r5,-257
  80577c:	01e02074 	movhi	r7,32897
  805780:	39e02004 	addi	r7,r7,-32640
  805784:	1945883a 	add	r2,r3,r5
  805788:	11c4703a 	and	r2,r2,r7
  80578c:	00c6303a 	nor	r3,zero,r3
  805790:	1886703a 	and	r3,r3,r2
  805794:	18000c1e 	bne	r3,zero,8057c8 <strlen+0x64>
  805798:	280d883a 	mov	r6,r5
  80579c:	380b883a 	mov	r5,r7
  8057a0:	21000104 	addi	r4,r4,4
  8057a4:	20800017 	ldw	r2,0(r4)
  8057a8:	1187883a 	add	r3,r2,r6
  8057ac:	1946703a 	and	r3,r3,r5
  8057b0:	0084303a 	nor	r2,zero,r2
  8057b4:	10c4703a 	and	r2,r2,r3
  8057b8:	103ff926 	beq	r2,zero,8057a0 <strlen+0x3c>
  8057bc:	20800007 	ldb	r2,0(r4)
  8057c0:	10000326 	beq	r2,zero,8057d0 <strlen+0x6c>
  8057c4:	21000044 	addi	r4,r4,1
  8057c8:	20800007 	ldb	r2,0(r4)
  8057cc:	103ffd1e 	bne	r2,zero,8057c4 <strlen+0x60>
  8057d0:	2205c83a 	sub	r2,r4,r8
  8057d4:	f800283a 	ret

008057d8 <strncmp>:
  8057d8:	30003926 	beq	r6,zero,8058c0 <strncmp+0xe8>
  8057dc:	2144b03a 	or	r2,r4,r5
  8057e0:	108000cc 	andi	r2,r2,3
  8057e4:	028000c4 	movi	r10,3
  8057e8:	1000241e 	bne	r2,zero,80587c <strncmp+0xa4>
  8057ec:	2011883a 	mov	r8,r4
  8057f0:	280f883a 	mov	r7,r5
  8057f4:	51801f2e 	bgeu	r10,r6,805874 <strncmp+0x9c>
  8057f8:	21000017 	ldw	r4,0(r4)
  8057fc:	28800017 	ldw	r2,0(r5)
  805800:	20801c1e 	bne	r4,r2,805874 <strncmp+0x9c>
  805804:	31bfff04 	addi	r6,r6,-4
  805808:	30002d26 	beq	r6,zero,8058c0 <strncmp+0xe8>
  80580c:	027fbff4 	movhi	r9,65279
  805810:	4a7fbfc4 	addi	r9,r9,-257
  805814:	2247883a 	add	r3,r4,r9
  805818:	01602074 	movhi	r5,32897
  80581c:	29602004 	addi	r5,r5,-32640
  805820:	1946703a 	and	r3,r3,r5
  805824:	0104303a 	nor	r2,zero,r4
  805828:	10c4703a 	and	r2,r2,r3
  80582c:	1000241e 	bne	r2,zero,8058c0 <strncmp+0xe8>
  805830:	5017883a 	mov	r11,r10
  805834:	4815883a 	mov	r10,r9
  805838:	2813883a 	mov	r9,r5
  80583c:	00000a06 	br	805868 <strncmp+0x90>
  805840:	41000017 	ldw	r4,0(r8)
  805844:	39400017 	ldw	r5,0(r7)
  805848:	2285883a 	add	r2,r4,r10
  80584c:	1244703a 	and	r2,r2,r9
  805850:	0106303a 	nor	r3,zero,r4
  805854:	1886703a 	and	r3,r3,r2
  805858:	2140061e 	bne	r4,r5,805874 <strncmp+0x9c>
  80585c:	31bfff04 	addi	r6,r6,-4
  805860:	30001726 	beq	r6,zero,8058c0 <strncmp+0xe8>
  805864:	1800161e 	bne	r3,zero,8058c0 <strncmp+0xe8>
  805868:	42000104 	addi	r8,r8,4
  80586c:	39c00104 	addi	r7,r7,4
  805870:	59bff336 	bltu	r11,r6,805840 <strncmp+0x68>
  805874:	4009883a 	mov	r4,r8
  805878:	380b883a 	mov	r5,r7
  80587c:	31bfffc4 	addi	r6,r6,-1
  805880:	01ffffc4 	movi	r7,-1
  805884:	31c00a1e 	bne	r6,r7,8058b0 <strncmp+0xd8>
  805888:	20c00003 	ldbu	r3,0(r4)
  80588c:	28800003 	ldbu	r2,0(r5)
  805890:	1885c83a 	sub	r2,r3,r2
  805894:	f800283a 	ret
  805898:	30000926 	beq	r6,zero,8058c0 <strncmp+0xe8>
  80589c:	18000826 	beq	r3,zero,8058c0 <strncmp+0xe8>
  8058a0:	31bfffc4 	addi	r6,r6,-1
  8058a4:	21000044 	addi	r4,r4,1
  8058a8:	29400044 	addi	r5,r5,1
  8058ac:	31fff626 	beq	r6,r7,805888 <strncmp+0xb0>
  8058b0:	20c00007 	ldb	r3,0(r4)
  8058b4:	28800007 	ldb	r2,0(r5)
  8058b8:	18bff726 	beq	r3,r2,805898 <strncmp+0xc0>
  8058bc:	003ff206 	br	805888 <strncmp+0xb0>
  8058c0:	0005883a 	mov	r2,zero
  8058c4:	f800283a 	ret

008058c8 <_times_r>:
  8058c8:	2809883a 	mov	r4,r5
  8058cc:	08129b41 	jmpi	8129b4 <times>

008058d0 <__submore>:
  8058d0:	defffa04 	addi	sp,sp,-24
  8058d4:	28c00c17 	ldw	r3,48(r5)
  8058d8:	dc800215 	stw	r18,8(sp)
  8058dc:	2825883a 	mov	r18,r5
  8058e0:	dc000015 	stw	r16,0(sp)
  8058e4:	90801004 	addi	r2,r18,64
  8058e8:	04010004 	movi	r16,1024
  8058ec:	dfc00515 	stw	ra,20(sp)
  8058f0:	dd000415 	stw	r20,16(sp)
  8058f4:	dcc00315 	stw	r19,12(sp)
  8058f8:	dc400115 	stw	r17,4(sp)
  8058fc:	800b883a 	mov	r5,r16
  805900:	18801b26 	beq	r3,r2,805970 <__submore+0xa0>
  805904:	94400d17 	ldw	r17,52(r18)
  805908:	180b883a 	mov	r5,r3
  80590c:	8c69883a 	add	r20,r17,r17
  805910:	a00d883a 	mov	r6,r20
  805914:	080c7f40 	call	80c7f4 <_realloc_r>
  805918:	1467883a 	add	r19,r2,r17
  80591c:	1021883a 	mov	r16,r2
  805920:	880d883a 	mov	r6,r17
  805924:	9809883a 	mov	r4,r19
  805928:	100b883a 	mov	r5,r2
  80592c:	10000e26 	beq	r2,zero,805968 <__submore+0x98>
  805930:	0804f780 	call	804f78 <memcpy>
  805934:	000d883a 	mov	r6,zero
  805938:	95000d15 	stw	r20,52(r18)
  80593c:	94c00015 	stw	r19,0(r18)
  805940:	94000c15 	stw	r16,48(r18)
  805944:	3005883a 	mov	r2,r6
  805948:	dfc00517 	ldw	ra,20(sp)
  80594c:	dd000417 	ldw	r20,16(sp)
  805950:	dcc00317 	ldw	r19,12(sp)
  805954:	dc800217 	ldw	r18,8(sp)
  805958:	dc400117 	ldw	r17,4(sp)
  80595c:	dc000017 	ldw	r16,0(sp)
  805960:	dec00604 	addi	sp,sp,24
  805964:	f800283a 	ret
  805968:	01bfffc4 	movi	r6,-1
  80596c:	003ff506 	br	805944 <__submore+0x74>
  805970:	08047540 	call	804754 <_malloc_r>
  805974:	1009883a 	mov	r4,r2
  805978:	1140ff44 	addi	r5,r2,1021
  80597c:	000d883a 	mov	r6,zero
  805980:	103ff926 	beq	r2,zero,805968 <__submore+0x98>
  805984:	90801083 	ldbu	r2,66(r18)
  805988:	94000d15 	stw	r16,52(r18)
  80598c:	91000c15 	stw	r4,48(r18)
  805990:	28800085 	stb	r2,2(r5)
  805994:	90c01043 	ldbu	r3,65(r18)
  805998:	28c00045 	stb	r3,1(r5)
  80599c:	90801003 	ldbu	r2,64(r18)
  8059a0:	2080ff45 	stb	r2,1021(r4)
  8059a4:	91400015 	stw	r5,0(r18)
  8059a8:	003fe606 	br	805944 <__submore+0x74>

008059ac <_ungetc_r>:
  8059ac:	defffc04 	addi	sp,sp,-16
  8059b0:	00bfffc4 	movi	r2,-1
  8059b4:	dc400215 	stw	r17,8(sp)
  8059b8:	dc000115 	stw	r16,4(sp)
  8059bc:	dfc00315 	stw	ra,12(sp)
  8059c0:	2821883a 	mov	r16,r5
  8059c4:	2023883a 	mov	r17,r4
  8059c8:	28801826 	beq	r5,r2,805a2c <_ungetc_r+0x80>
  8059cc:	20000226 	beq	r4,zero,8059d8 <_ungetc_r+0x2c>
  8059d0:	20800e17 	ldw	r2,56(r4)
  8059d4:	10001b26 	beq	r2,zero,805a44 <_ungetc_r+0x98>
  8059d8:	3100030b 	ldhu	r4,12(r6)
  8059dc:	00bff7c4 	movi	r2,-33
  8059e0:	2084703a 	and	r2,r4,r2
  8059e4:	117fffcc 	andi	r5,r2,65535
  8059e8:	28c0010c 	andi	r3,r5,4
  8059ec:	1009883a 	mov	r4,r2
  8059f0:	3080030d 	sth	r2,12(r6)
  8059f4:	18003526 	beq	r3,zero,805acc <_ungetc_r+0x120>
  8059f8:	30800c17 	ldw	r2,48(r6)
  8059fc:	84003fcc 	andi	r16,r16,255
  805a00:	10001426 	beq	r2,zero,805a54 <_ungetc_r+0xa8>
  805a04:	30c00117 	ldw	r3,4(r6)
  805a08:	30800d17 	ldw	r2,52(r6)
  805a0c:	1880380e 	bge	r3,r2,805af0 <_ungetc_r+0x144>
  805a10:	30c00017 	ldw	r3,0(r6)
  805a14:	19ffffc4 	addi	r7,r3,-1
  805a18:	31c00015 	stw	r7,0(r6)
  805a1c:	1c3fffc5 	stb	r16,-1(r3)
  805a20:	30800117 	ldw	r2,4(r6)
  805a24:	10800044 	addi	r2,r2,1
  805a28:	30800115 	stw	r2,4(r6)
  805a2c:	8005883a 	mov	r2,r16
  805a30:	dfc00317 	ldw	ra,12(sp)
  805a34:	dc400217 	ldw	r17,8(sp)
  805a38:	dc000117 	ldw	r16,4(sp)
  805a3c:	dec00404 	addi	sp,sp,16
  805a40:	f800283a 	ret
  805a44:	d9800015 	stw	r6,0(sp)
  805a48:	08033640 	call	803364 <__sinit>
  805a4c:	d9800017 	ldw	r6,0(sp)
  805a50:	003fe106 	br	8059d8 <_ungetc_r+0x2c>
  805a54:	30800417 	ldw	r2,16(r6)
  805a58:	10002326 	beq	r2,zero,805ae8 <_ungetc_r+0x13c>
  805a5c:	31c00017 	ldw	r7,0(r6)
  805a60:	11c0022e 	bgeu	r2,r7,805a6c <_ungetc_r+0xc0>
  805a64:	38bfffc3 	ldbu	r2,-1(r7)
  805a68:	80801226 	beq	r16,r2,805ab4 <_ungetc_r+0x108>
  805a6c:	30c00117 	ldw	r3,4(r6)
  805a70:	00800044 	movi	r2,1
  805a74:	30800115 	stw	r2,4(r6)
  805a78:	008000c4 	movi	r2,3
  805a7c:	31001004 	addi	r4,r6,64
  805a80:	31401084 	addi	r5,r6,66
  805a84:	30800d15 	stw	r2,52(r6)
  805a88:	8005883a 	mov	r2,r16
  805a8c:	30c00f15 	stw	r3,60(r6)
  805a90:	31c00e15 	stw	r7,56(r6)
  805a94:	31000c15 	stw	r4,48(r6)
  805a98:	31400015 	stw	r5,0(r6)
  805a9c:	34001085 	stb	r16,66(r6)
  805aa0:	dfc00317 	ldw	ra,12(sp)
  805aa4:	dc400217 	ldw	r17,8(sp)
  805aa8:	dc000117 	ldw	r16,4(sp)
  805aac:	dec00404 	addi	sp,sp,16
  805ab0:	f800283a 	ret
  805ab4:	30800117 	ldw	r2,4(r6)
  805ab8:	39ffffc4 	addi	r7,r7,-1
  805abc:	31c00015 	stw	r7,0(r6)
  805ac0:	10800044 	addi	r2,r2,1
  805ac4:	30800115 	stw	r2,4(r6)
  805ac8:	003fd806 	br	805a2c <_ungetc_r+0x80>
  805acc:	2880040c 	andi	r2,r5,16
  805ad0:	10000d26 	beq	r2,zero,805b08 <_ungetc_r+0x15c>
  805ad4:	2880020c 	andi	r2,r5,8
  805ad8:	10000d1e 	bne	r2,zero,805b10 <_ungetc_r+0x164>
  805adc:	20800114 	ori	r2,r4,4
  805ae0:	3080030d 	sth	r2,12(r6)
  805ae4:	003fc406 	br	8059f8 <_ungetc_r+0x4c>
  805ae8:	31c00017 	ldw	r7,0(r6)
  805aec:	003fdf06 	br	805a6c <_ungetc_r+0xc0>
  805af0:	300b883a 	mov	r5,r6
  805af4:	8809883a 	mov	r4,r17
  805af8:	d9800015 	stw	r6,0(sp)
  805afc:	08058d00 	call	8058d0 <__submore>
  805b00:	d9800017 	ldw	r6,0(sp)
  805b04:	103fc226 	beq	r2,zero,805a10 <_ungetc_r+0x64>
  805b08:	043fffc4 	movi	r16,-1
  805b0c:	003fc706 	br	805a2c <_ungetc_r+0x80>
  805b10:	300b883a 	mov	r5,r6
  805b14:	8809883a 	mov	r4,r17
  805b18:	d9800015 	stw	r6,0(sp)
  805b1c:	0802e380 	call	802e38 <_fflush_r>
  805b20:	d9800017 	ldw	r6,0(sp)
  805b24:	103ff81e 	bne	r2,zero,805b08 <_ungetc_r+0x15c>
  805b28:	3100030b 	ldhu	r4,12(r6)
  805b2c:	00bffdc4 	movi	r2,-9
  805b30:	30000215 	stw	zero,8(r6)
  805b34:	2084703a 	and	r2,r4,r2
  805b38:	1009883a 	mov	r4,r2
  805b3c:	3080030d 	sth	r2,12(r6)
  805b40:	30000615 	stw	zero,24(r6)
  805b44:	003fe506 	br	805adc <_ungetc_r+0x130>

00805b48 <ungetc>:
  805b48:	01802074 	movhi	r6,129
  805b4c:	319bcd04 	addi	r6,r6,28468
  805b50:	2007883a 	mov	r3,r4
  805b54:	31000017 	ldw	r4,0(r6)
  805b58:	280d883a 	mov	r6,r5
  805b5c:	180b883a 	mov	r5,r3
  805b60:	08059ac1 	jmpi	8059ac <_ungetc_r>

00805b64 <__sprint_r>:
  805b64:	30800217 	ldw	r2,8(r6)
  805b68:	defffe04 	addi	sp,sp,-8
  805b6c:	dc000015 	stw	r16,0(sp)
  805b70:	dfc00115 	stw	ra,4(sp)
  805b74:	3021883a 	mov	r16,r6
  805b78:	0007883a 	mov	r3,zero
  805b7c:	1000061e 	bne	r2,zero,805b98 <__sprint_r+0x34>
  805b80:	1805883a 	mov	r2,r3
  805b84:	30000115 	stw	zero,4(r6)
  805b88:	dfc00117 	ldw	ra,4(sp)
  805b8c:	dc000017 	ldw	r16,0(sp)
  805b90:	dec00204 	addi	sp,sp,8
  805b94:	f800283a 	ret
  805b98:	080ae9c0 	call	80ae9c <__sfvwrite_r>
  805b9c:	1007883a 	mov	r3,r2
  805ba0:	1805883a 	mov	r2,r3
  805ba4:	80000115 	stw	zero,4(r16)
  805ba8:	80000215 	stw	zero,8(r16)
  805bac:	dfc00117 	ldw	ra,4(sp)
  805bb0:	dc000017 	ldw	r16,0(sp)
  805bb4:	dec00204 	addi	sp,sp,8
  805bb8:	f800283a 	ret

00805bbc <___vfprintf_internal_r>:
  805bbc:	defea404 	addi	sp,sp,-1392
  805bc0:	dd815815 	stw	r22,1376(sp)
  805bc4:	dc015215 	stw	r16,1352(sp)
  805bc8:	d9c15115 	stw	r7,1348(sp)
  805bcc:	dfc15b15 	stw	ra,1388(sp)
  805bd0:	df015a15 	stw	fp,1384(sp)
  805bd4:	ddc15915 	stw	r23,1380(sp)
  805bd8:	dd415715 	stw	r21,1372(sp)
  805bdc:	dd015615 	stw	r20,1368(sp)
  805be0:	dcc15515 	stw	r19,1364(sp)
  805be4:	dc815415 	stw	r18,1360(sp)
  805be8:	dc415315 	stw	r17,1356(sp)
  805bec:	282d883a 	mov	r22,r5
  805bf0:	3021883a 	mov	r16,r6
  805bf4:	d9014f15 	stw	r4,1340(sp)
  805bf8:	080b3dc0 	call	80b3dc <_localeconv_r>
  805bfc:	10800017 	ldw	r2,0(r2)
  805c00:	d9c15117 	ldw	r7,1348(sp)
  805c04:	d8814915 	stw	r2,1316(sp)
  805c08:	d8814f17 	ldw	r2,1340(sp)
  805c0c:	10000226 	beq	r2,zero,805c18 <___vfprintf_internal_r+0x5c>
  805c10:	10800e17 	ldw	r2,56(r2)
  805c14:	10020d26 	beq	r2,zero,80644c <___vfprintf_internal_r+0x890>
  805c18:	b080030b 	ldhu	r2,12(r22)
  805c1c:	1080020c 	andi	r2,r2,8
  805c20:	10020e26 	beq	r2,zero,80645c <___vfprintf_internal_r+0x8a0>
  805c24:	b0800417 	ldw	r2,16(r22)
  805c28:	10020c26 	beq	r2,zero,80645c <___vfprintf_internal_r+0x8a0>
  805c2c:	b200030b 	ldhu	r8,12(r22)
  805c30:	00800284 	movi	r2,10
  805c34:	40c0068c 	andi	r3,r8,26
  805c38:	18802f1e 	bne	r3,r2,805cf8 <___vfprintf_internal_r+0x13c>
  805c3c:	b080038f 	ldh	r2,14(r22)
  805c40:	10002d16 	blt	r2,zero,805cf8 <___vfprintf_internal_r+0x13c>
  805c44:	b240038b 	ldhu	r9,14(r22)
  805c48:	b2800717 	ldw	r10,28(r22)
  805c4c:	b2c00917 	ldw	r11,36(r22)
  805c50:	d9014f17 	ldw	r4,1340(sp)
  805c54:	dc402904 	addi	r17,sp,164
  805c58:	d8804004 	addi	r2,sp,256
  805c5c:	00c10004 	movi	r3,1024
  805c60:	423fff4c 	andi	r8,r8,65533
  805c64:	800d883a 	mov	r6,r16
  805c68:	880b883a 	mov	r5,r17
  805c6c:	da002c0d 	sth	r8,176(sp)
  805c70:	da402c8d 	sth	r9,178(sp)
  805c74:	da803015 	stw	r10,192(sp)
  805c78:	dac03215 	stw	r11,200(sp)
  805c7c:	d8802d15 	stw	r2,180(sp)
  805c80:	d8c02e15 	stw	r3,184(sp)
  805c84:	d8802915 	stw	r2,164(sp)
  805c88:	d8c02b15 	stw	r3,172(sp)
  805c8c:	d8002f15 	stw	zero,188(sp)
  805c90:	0805bbc0 	call	805bbc <___vfprintf_internal_r>
  805c94:	d8814b15 	stw	r2,1324(sp)
  805c98:	10000416 	blt	r2,zero,805cac <___vfprintf_internal_r+0xf0>
  805c9c:	d9014f17 	ldw	r4,1340(sp)
  805ca0:	880b883a 	mov	r5,r17
  805ca4:	0802e380 	call	802e38 <_fflush_r>
  805ca8:	1002321e 	bne	r2,zero,806574 <___vfprintf_internal_r+0x9b8>
  805cac:	d8802c0b 	ldhu	r2,176(sp)
  805cb0:	1080100c 	andi	r2,r2,64
  805cb4:	10000326 	beq	r2,zero,805cc4 <___vfprintf_internal_r+0x108>
  805cb8:	b080030b 	ldhu	r2,12(r22)
  805cbc:	10801014 	ori	r2,r2,64
  805cc0:	b080030d 	sth	r2,12(r22)
  805cc4:	d8814b17 	ldw	r2,1324(sp)
  805cc8:	dfc15b17 	ldw	ra,1388(sp)
  805ccc:	df015a17 	ldw	fp,1384(sp)
  805cd0:	ddc15917 	ldw	r23,1380(sp)
  805cd4:	dd815817 	ldw	r22,1376(sp)
  805cd8:	dd415717 	ldw	r21,1372(sp)
  805cdc:	dd015617 	ldw	r20,1368(sp)
  805ce0:	dcc15517 	ldw	r19,1364(sp)
  805ce4:	dc815417 	ldw	r18,1360(sp)
  805ce8:	dc415317 	ldw	r17,1356(sp)
  805cec:	dc015217 	ldw	r16,1352(sp)
  805cf0:	dec15c04 	addi	sp,sp,1392
  805cf4:	f800283a 	ret
  805cf8:	0005883a 	mov	r2,zero
  805cfc:	0007883a 	mov	r3,zero
  805d00:	dd401904 	addi	r21,sp,100
  805d04:	d8814215 	stw	r2,1288(sp)
  805d08:	802f883a 	mov	r23,r16
  805d0c:	d8c14315 	stw	r3,1292(sp)
  805d10:	d8014b15 	stw	zero,1324(sp)
  805d14:	d8014815 	stw	zero,1312(sp)
  805d18:	d8014415 	stw	zero,1296(sp)
  805d1c:	d8014715 	stw	zero,1308(sp)
  805d20:	dd400c15 	stw	r21,48(sp)
  805d24:	d8000e15 	stw	zero,56(sp)
  805d28:	d8000d15 	stw	zero,52(sp)
  805d2c:	b8800007 	ldb	r2,0(r23)
  805d30:	10001926 	beq	r2,zero,805d98 <___vfprintf_internal_r+0x1dc>
  805d34:	00c00944 	movi	r3,37
  805d38:	10c01726 	beq	r2,r3,805d98 <___vfprintf_internal_r+0x1dc>
  805d3c:	b821883a 	mov	r16,r23
  805d40:	00000106 	br	805d48 <___vfprintf_internal_r+0x18c>
  805d44:	10c00326 	beq	r2,r3,805d54 <___vfprintf_internal_r+0x198>
  805d48:	84000044 	addi	r16,r16,1
  805d4c:	80800007 	ldb	r2,0(r16)
  805d50:	103ffc1e 	bne	r2,zero,805d44 <___vfprintf_internal_r+0x188>
  805d54:	85e7c83a 	sub	r19,r16,r23
  805d58:	98000e26 	beq	r19,zero,805d94 <___vfprintf_internal_r+0x1d8>
  805d5c:	dc800e17 	ldw	r18,56(sp)
  805d60:	dc400d17 	ldw	r17,52(sp)
  805d64:	008001c4 	movi	r2,7
  805d68:	94e5883a 	add	r18,r18,r19
  805d6c:	8c400044 	addi	r17,r17,1
  805d70:	adc00015 	stw	r23,0(r21)
  805d74:	dc800e15 	stw	r18,56(sp)
  805d78:	acc00115 	stw	r19,4(r21)
  805d7c:	dc400d15 	stw	r17,52(sp)
  805d80:	14428b16 	blt	r2,r17,8067b0 <___vfprintf_internal_r+0xbf4>
  805d84:	ad400204 	addi	r21,r21,8
  805d88:	d9014b17 	ldw	r4,1324(sp)
  805d8c:	24c9883a 	add	r4,r4,r19
  805d90:	d9014b15 	stw	r4,1324(sp)
  805d94:	802f883a 	mov	r23,r16
  805d98:	b8800007 	ldb	r2,0(r23)
  805d9c:	10013c26 	beq	r2,zero,806290 <___vfprintf_internal_r+0x6d4>
  805da0:	bdc00044 	addi	r23,r23,1
  805da4:	d8000405 	stb	zero,16(sp)
  805da8:	b8c00007 	ldb	r3,0(r23)
  805dac:	04ffffc4 	movi	r19,-1
  805db0:	d8014c15 	stw	zero,1328(sp)
  805db4:	d8014a15 	stw	zero,1320(sp)
  805db8:	d8c14d15 	stw	r3,1332(sp)
  805dbc:	bdc00044 	addi	r23,r23,1
  805dc0:	d9414d17 	ldw	r5,1332(sp)
  805dc4:	00801604 	movi	r2,88
  805dc8:	28fff804 	addi	r3,r5,-32
  805dcc:	10c06036 	bltu	r2,r3,805f50 <___vfprintf_internal_r+0x394>
  805dd0:	18c5883a 	add	r2,r3,r3
  805dd4:	1085883a 	add	r2,r2,r2
  805dd8:	00c02034 	movhi	r3,128
  805ddc:	18d77b04 	addi	r3,r3,24044
  805de0:	10c5883a 	add	r2,r2,r3
  805de4:	11000017 	ldw	r4,0(r2)
  805de8:	2000683a 	jmp	r4
  805dec:	00806d60 	cmpeqi	r2,zero,437
  805df0:	00805f50 	cmplti	r2,zero,381
  805df4:	00805f50 	cmplti	r2,zero,381
  805df8:	00806d4c 	andi	r2,zero,437
  805dfc:	00805f50 	cmplti	r2,zero,381
  805e00:	00805f50 	cmplti	r2,zero,381
  805e04:	00805f50 	cmplti	r2,zero,381
  805e08:	00805f50 	cmplti	r2,zero,381
  805e0c:	00805f50 	cmplti	r2,zero,381
  805e10:	00805f50 	cmplti	r2,zero,381
  805e14:	00806b2c 	andhi	r2,zero,428
  805e18:	00806d3c 	xorhi	r2,zero,436
  805e1c:	00805f50 	cmplti	r2,zero,381
  805e20:	00806b44 	movi	r2,429
  805e24:	00806de4 	muli	r2,zero,439
  805e28:	00805f50 	cmplti	r2,zero,381
  805e2c:	00806dd0 	cmplti	r2,zero,439
  805e30:	00806d8c 	andi	r2,zero,438
  805e34:	00806d8c 	andi	r2,zero,438
  805e38:	00806d8c 	andi	r2,zero,438
  805e3c:	00806d8c 	andi	r2,zero,438
  805e40:	00806d8c 	andi	r2,zero,438
  805e44:	00806d8c 	andi	r2,zero,438
  805e48:	00806d8c 	andi	r2,zero,438
  805e4c:	00806d8c 	andi	r2,zero,438
  805e50:	00806d8c 	andi	r2,zero,438
  805e54:	00805f50 	cmplti	r2,zero,381
  805e58:	00805f50 	cmplti	r2,zero,381
  805e5c:	00805f50 	cmplti	r2,zero,381
  805e60:	00805f50 	cmplti	r2,zero,381
  805e64:	00805f50 	cmplti	r2,zero,381
  805e68:	00805f50 	cmplti	r2,zero,381
  805e6c:	00805f50 	cmplti	r2,zero,381
  805e70:	00805f50 	cmplti	r2,zero,381
  805e74:	00805f50 	cmplti	r2,zero,381
  805e78:	00805f50 	cmplti	r2,zero,381
  805e7c:	008065a8 	cmpgeui	r2,zero,406
  805e80:	00806c14 	movui	r2,432
  805e84:	00805f50 	cmplti	r2,zero,381
  805e88:	00806c14 	movui	r2,432
  805e8c:	00805f50 	cmplti	r2,zero,381
  805e90:	00805f50 	cmplti	r2,zero,381
  805e94:	00805f50 	cmplti	r2,zero,381
  805e98:	00805f50 	cmplti	r2,zero,381
  805e9c:	00806d78 	rdprs	r2,zero,437
  805ea0:	00805f50 	cmplti	r2,zero,381
  805ea4:	00805f50 	cmplti	r2,zero,381
  805ea8:	0080665c 	xori	r2,zero,409
  805eac:	00805f50 	cmplti	r2,zero,381
  805eb0:	00805f50 	cmplti	r2,zero,381
  805eb4:	00805f50 	cmplti	r2,zero,381
  805eb8:	00805f50 	cmplti	r2,zero,381
  805ebc:	00805f50 	cmplti	r2,zero,381
  805ec0:	008066a8 	cmpgeui	r2,zero,410
  805ec4:	00805f50 	cmplti	r2,zero,381
  805ec8:	00805f50 	cmplti	r2,zero,381
  805ecc:	00806cc8 	cmpgei	r2,zero,435
  805ed0:	00805f50 	cmplti	r2,zero,381
  805ed4:	00805f50 	cmplti	r2,zero,381
  805ed8:	00805f50 	cmplti	r2,zero,381
  805edc:	00805f50 	cmplti	r2,zero,381
  805ee0:	00805f50 	cmplti	r2,zero,381
  805ee4:	00805f50 	cmplti	r2,zero,381
  805ee8:	00805f50 	cmplti	r2,zero,381
  805eec:	00805f50 	cmplti	r2,zero,381
  805ef0:	00805f50 	cmplti	r2,zero,381
  805ef4:	00805f50 	cmplti	r2,zero,381
  805ef8:	00806c9c 	xori	r2,zero,434
  805efc:	008065b4 	movhi	r2,406
  805f00:	00806c14 	movui	r2,432
  805f04:	00806c14 	movui	r2,432
  805f08:	00806c14 	movui	r2,432
  805f0c:	00806c00 	call	806c0 <__alt_mem_sdram-0x77f940>
  805f10:	008065b4 	movhi	r2,406
  805f14:	00805f50 	cmplti	r2,zero,381
  805f18:	00805f50 	cmplti	r2,zero,381
  805f1c:	00806b88 	cmpgei	r2,zero,430
  805f20:	00805f50 	cmplti	r2,zero,381
  805f24:	00806b58 	cmpnei	r2,zero,429
  805f28:	00806668 	cmpgeui	r2,zero,409
  805f2c:	00806bb8 	rdprs	r2,zero,430
  805f30:	00806ba4 	muli	r2,zero,430
  805f34:	00805f50 	cmplti	r2,zero,381
  805f38:	00806e4c 	andi	r2,zero,441
  805f3c:	00805f50 	cmplti	r2,zero,381
  805f40:	008066b4 	movhi	r2,410
  805f44:	00805f50 	cmplti	r2,zero,381
  805f48:	00805f50 	cmplti	r2,zero,381
  805f4c:	00806d2c 	andhi	r2,zero,436
  805f50:	d9014d17 	ldw	r4,1332(sp)
  805f54:	2000ce26 	beq	r4,zero,806290 <___vfprintf_internal_r+0x6d4>
  805f58:	01400044 	movi	r5,1
  805f5c:	d9800f04 	addi	r6,sp,60
  805f60:	d9c14015 	stw	r7,1280(sp)
  805f64:	d9414515 	stw	r5,1300(sp)
  805f68:	d9814115 	stw	r6,1284(sp)
  805f6c:	280f883a 	mov	r7,r5
  805f70:	d9000f05 	stb	r4,60(sp)
  805f74:	d8000405 	stb	zero,16(sp)
  805f78:	d8014615 	stw	zero,1304(sp)
  805f7c:	d8c14c17 	ldw	r3,1328(sp)
  805f80:	1880008c 	andi	r2,r3,2
  805f84:	1005003a 	cmpeq	r2,r2,zero
  805f88:	d8815015 	stw	r2,1344(sp)
  805f8c:	1000031e 	bne	r2,zero,805f9c <___vfprintf_internal_r+0x3e0>
  805f90:	d9014517 	ldw	r4,1300(sp)
  805f94:	21000084 	addi	r4,r4,2
  805f98:	d9014515 	stw	r4,1300(sp)
  805f9c:	d9414c17 	ldw	r5,1328(sp)
  805fa0:	2940210c 	andi	r5,r5,132
  805fa4:	d9414e15 	stw	r5,1336(sp)
  805fa8:	28002d1e 	bne	r5,zero,806060 <___vfprintf_internal_r+0x4a4>
  805fac:	d9814a17 	ldw	r6,1320(sp)
  805fb0:	d8814517 	ldw	r2,1300(sp)
  805fb4:	30a1c83a 	sub	r16,r6,r2
  805fb8:	0400290e 	bge	zero,r16,806060 <___vfprintf_internal_r+0x4a4>
  805fbc:	00800404 	movi	r2,16
  805fc0:	14045e0e 	bge	r2,r16,80713c <___vfprintf_internal_r+0x1580>
  805fc4:	dc800e17 	ldw	r18,56(sp)
  805fc8:	dc400d17 	ldw	r17,52(sp)
  805fcc:	1027883a 	mov	r19,r2
  805fd0:	07002074 	movhi	fp,129
  805fd4:	e7149984 	addi	fp,fp,21094
  805fd8:	050001c4 	movi	r20,7
  805fdc:	00000306 	br	805fec <___vfprintf_internal_r+0x430>
  805fe0:	843ffc04 	addi	r16,r16,-16
  805fe4:	ad400204 	addi	r21,r21,8
  805fe8:	9c00130e 	bge	r19,r16,806038 <___vfprintf_internal_r+0x47c>
  805fec:	94800404 	addi	r18,r18,16
  805ff0:	8c400044 	addi	r17,r17,1
  805ff4:	af000015 	stw	fp,0(r21)
  805ff8:	acc00115 	stw	r19,4(r21)
  805ffc:	dc800e15 	stw	r18,56(sp)
  806000:	dc400d15 	stw	r17,52(sp)
  806004:	a47ff60e 	bge	r20,r17,805fe0 <___vfprintf_internal_r+0x424>
  806008:	d9014f17 	ldw	r4,1340(sp)
  80600c:	b00b883a 	mov	r5,r22
  806010:	d9800c04 	addi	r6,sp,48
  806014:	d9c15115 	stw	r7,1348(sp)
  806018:	0805b640 	call	805b64 <__sprint_r>
  80601c:	d9c15117 	ldw	r7,1348(sp)
  806020:	10009e1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806024:	843ffc04 	addi	r16,r16,-16
  806028:	dc800e17 	ldw	r18,56(sp)
  80602c:	dc400d17 	ldw	r17,52(sp)
  806030:	dd401904 	addi	r21,sp,100
  806034:	9c3fed16 	blt	r19,r16,805fec <___vfprintf_internal_r+0x430>
  806038:	9425883a 	add	r18,r18,r16
  80603c:	8c400044 	addi	r17,r17,1
  806040:	008001c4 	movi	r2,7
  806044:	af000015 	stw	fp,0(r21)
  806048:	ac000115 	stw	r16,4(r21)
  80604c:	dc800e15 	stw	r18,56(sp)
  806050:	dc400d15 	stw	r17,52(sp)
  806054:	1441f516 	blt	r2,r17,80682c <___vfprintf_internal_r+0xc70>
  806058:	ad400204 	addi	r21,r21,8
  80605c:	00000206 	br	806068 <___vfprintf_internal_r+0x4ac>
  806060:	dc800e17 	ldw	r18,56(sp)
  806064:	dc400d17 	ldw	r17,52(sp)
  806068:	d8800407 	ldb	r2,16(sp)
  80606c:	10000b26 	beq	r2,zero,80609c <___vfprintf_internal_r+0x4e0>
  806070:	00800044 	movi	r2,1
  806074:	94800044 	addi	r18,r18,1
  806078:	8c400044 	addi	r17,r17,1
  80607c:	a8800115 	stw	r2,4(r21)
  806080:	d8c00404 	addi	r3,sp,16
  806084:	008001c4 	movi	r2,7
  806088:	a8c00015 	stw	r3,0(r21)
  80608c:	dc800e15 	stw	r18,56(sp)
  806090:	dc400d15 	stw	r17,52(sp)
  806094:	1441da16 	blt	r2,r17,806800 <___vfprintf_internal_r+0xc44>
  806098:	ad400204 	addi	r21,r21,8
  80609c:	d9015017 	ldw	r4,1344(sp)
  8060a0:	20000b1e 	bne	r4,zero,8060d0 <___vfprintf_internal_r+0x514>
  8060a4:	d8800444 	addi	r2,sp,17
  8060a8:	94800084 	addi	r18,r18,2
  8060ac:	8c400044 	addi	r17,r17,1
  8060b0:	a8800015 	stw	r2,0(r21)
  8060b4:	00c00084 	movi	r3,2
  8060b8:	008001c4 	movi	r2,7
  8060bc:	a8c00115 	stw	r3,4(r21)
  8060c0:	dc800e15 	stw	r18,56(sp)
  8060c4:	dc400d15 	stw	r17,52(sp)
  8060c8:	1441c216 	blt	r2,r17,8067d4 <___vfprintf_internal_r+0xc18>
  8060cc:	ad400204 	addi	r21,r21,8
  8060d0:	d9414e17 	ldw	r5,1336(sp)
  8060d4:	00802004 	movi	r2,128
  8060d8:	2880b126 	beq	r5,r2,8063a0 <___vfprintf_internal_r+0x7e4>
  8060dc:	d8c14617 	ldw	r3,1304(sp)
  8060e0:	19e1c83a 	sub	r16,r3,r7
  8060e4:	0400260e 	bge	zero,r16,806180 <___vfprintf_internal_r+0x5c4>
  8060e8:	00800404 	movi	r2,16
  8060ec:	1403cf0e 	bge	r2,r16,80702c <___vfprintf_internal_r+0x1470>
  8060f0:	1027883a 	mov	r19,r2
  8060f4:	07002074 	movhi	fp,129
  8060f8:	e7149584 	addi	fp,fp,21078
  8060fc:	050001c4 	movi	r20,7
  806100:	00000306 	br	806110 <___vfprintf_internal_r+0x554>
  806104:	843ffc04 	addi	r16,r16,-16
  806108:	ad400204 	addi	r21,r21,8
  80610c:	9c00130e 	bge	r19,r16,80615c <___vfprintf_internal_r+0x5a0>
  806110:	94800404 	addi	r18,r18,16
  806114:	8c400044 	addi	r17,r17,1
  806118:	af000015 	stw	fp,0(r21)
  80611c:	acc00115 	stw	r19,4(r21)
  806120:	dc800e15 	stw	r18,56(sp)
  806124:	dc400d15 	stw	r17,52(sp)
  806128:	a47ff60e 	bge	r20,r17,806104 <___vfprintf_internal_r+0x548>
  80612c:	d9014f17 	ldw	r4,1340(sp)
  806130:	b00b883a 	mov	r5,r22
  806134:	d9800c04 	addi	r6,sp,48
  806138:	d9c15115 	stw	r7,1348(sp)
  80613c:	0805b640 	call	805b64 <__sprint_r>
  806140:	d9c15117 	ldw	r7,1348(sp)
  806144:	1000551e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806148:	843ffc04 	addi	r16,r16,-16
  80614c:	dc800e17 	ldw	r18,56(sp)
  806150:	dc400d17 	ldw	r17,52(sp)
  806154:	dd401904 	addi	r21,sp,100
  806158:	9c3fed16 	blt	r19,r16,806110 <___vfprintf_internal_r+0x554>
  80615c:	9425883a 	add	r18,r18,r16
  806160:	8c400044 	addi	r17,r17,1
  806164:	008001c4 	movi	r2,7
  806168:	af000015 	stw	fp,0(r21)
  80616c:	ac000115 	stw	r16,4(r21)
  806170:	dc800e15 	stw	r18,56(sp)
  806174:	dc400d15 	stw	r17,52(sp)
  806178:	14418216 	blt	r2,r17,806784 <___vfprintf_internal_r+0xbc8>
  80617c:	ad400204 	addi	r21,r21,8
  806180:	d9014c17 	ldw	r4,1328(sp)
  806184:	2080400c 	andi	r2,r4,256
  806188:	10004a1e 	bne	r2,zero,8062b4 <___vfprintf_internal_r+0x6f8>
  80618c:	d9414117 	ldw	r5,1284(sp)
  806190:	91e5883a 	add	r18,r18,r7
  806194:	8c400044 	addi	r17,r17,1
  806198:	008001c4 	movi	r2,7
  80619c:	a9400015 	stw	r5,0(r21)
  8061a0:	a9c00115 	stw	r7,4(r21)
  8061a4:	dc800e15 	stw	r18,56(sp)
  8061a8:	dc400d15 	stw	r17,52(sp)
  8061ac:	14416716 	blt	r2,r17,80674c <___vfprintf_internal_r+0xb90>
  8061b0:	a8c00204 	addi	r3,r21,8
  8061b4:	d9814c17 	ldw	r6,1328(sp)
  8061b8:	3080010c 	andi	r2,r6,4
  8061bc:	10002826 	beq	r2,zero,806260 <___vfprintf_internal_r+0x6a4>
  8061c0:	d8814a17 	ldw	r2,1320(sp)
  8061c4:	d9014517 	ldw	r4,1300(sp)
  8061c8:	1121c83a 	sub	r16,r2,r4
  8061cc:	0400240e 	bge	zero,r16,806260 <___vfprintf_internal_r+0x6a4>
  8061d0:	00800404 	movi	r2,16
  8061d4:	1404550e 	bge	r2,r16,80732c <___vfprintf_internal_r+0x1770>
  8061d8:	dc400d17 	ldw	r17,52(sp)
  8061dc:	1027883a 	mov	r19,r2
  8061e0:	07002074 	movhi	fp,129
  8061e4:	e7149984 	addi	fp,fp,21094
  8061e8:	050001c4 	movi	r20,7
  8061ec:	00000306 	br	8061fc <___vfprintf_internal_r+0x640>
  8061f0:	843ffc04 	addi	r16,r16,-16
  8061f4:	18c00204 	addi	r3,r3,8
  8061f8:	9c00110e 	bge	r19,r16,806240 <___vfprintf_internal_r+0x684>
  8061fc:	94800404 	addi	r18,r18,16
  806200:	8c400044 	addi	r17,r17,1
  806204:	1f000015 	stw	fp,0(r3)
  806208:	1cc00115 	stw	r19,4(r3)
  80620c:	dc800e15 	stw	r18,56(sp)
  806210:	dc400d15 	stw	r17,52(sp)
  806214:	a47ff60e 	bge	r20,r17,8061f0 <___vfprintf_internal_r+0x634>
  806218:	d9014f17 	ldw	r4,1340(sp)
  80621c:	b00b883a 	mov	r5,r22
  806220:	d9800c04 	addi	r6,sp,48
  806224:	0805b640 	call	805b64 <__sprint_r>
  806228:	10001c1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  80622c:	843ffc04 	addi	r16,r16,-16
  806230:	dc800e17 	ldw	r18,56(sp)
  806234:	dc400d17 	ldw	r17,52(sp)
  806238:	d8c01904 	addi	r3,sp,100
  80623c:	9c3fef16 	blt	r19,r16,8061fc <___vfprintf_internal_r+0x640>
  806240:	9425883a 	add	r18,r18,r16
  806244:	8c400044 	addi	r17,r17,1
  806248:	008001c4 	movi	r2,7
  80624c:	1f000015 	stw	fp,0(r3)
  806250:	1c000115 	stw	r16,4(r3)
  806254:	dc800e15 	stw	r18,56(sp)
  806258:	dc400d15 	stw	r17,52(sp)
  80625c:	1440cb16 	blt	r2,r17,80658c <___vfprintf_internal_r+0x9d0>
  806260:	d8814a17 	ldw	r2,1320(sp)
  806264:	d9414517 	ldw	r5,1300(sp)
  806268:	1140010e 	bge	r2,r5,806270 <___vfprintf_internal_r+0x6b4>
  80626c:	2805883a 	mov	r2,r5
  806270:	d9814b17 	ldw	r6,1324(sp)
  806274:	308d883a 	add	r6,r6,r2
  806278:	d9814b15 	stw	r6,1324(sp)
  80627c:	90013b1e 	bne	r18,zero,80676c <___vfprintf_internal_r+0xbb0>
  806280:	d9c14017 	ldw	r7,1280(sp)
  806284:	dd401904 	addi	r21,sp,100
  806288:	d8000d15 	stw	zero,52(sp)
  80628c:	003ea706 	br	805d2c <___vfprintf_internal_r+0x170>
  806290:	d8800e17 	ldw	r2,56(sp)
  806294:	1005451e 	bne	r2,zero,8077ac <___vfprintf_internal_r+0x1bf0>
  806298:	d8000d15 	stw	zero,52(sp)
  80629c:	b080030b 	ldhu	r2,12(r22)
  8062a0:	1080100c 	andi	r2,r2,64
  8062a4:	103e8726 	beq	r2,zero,805cc4 <___vfprintf_internal_r+0x108>
  8062a8:	00bfffc4 	movi	r2,-1
  8062ac:	d8814b15 	stw	r2,1324(sp)
  8062b0:	003e8406 	br	805cc4 <___vfprintf_internal_r+0x108>
  8062b4:	d9814d17 	ldw	r6,1332(sp)
  8062b8:	00801944 	movi	r2,101
  8062bc:	11806e16 	blt	r2,r6,806478 <___vfprintf_internal_r+0x8bc>
  8062c0:	d9414717 	ldw	r5,1308(sp)
  8062c4:	00c00044 	movi	r3,1
  8062c8:	1943490e 	bge	r3,r5,806ff0 <___vfprintf_internal_r+0x1434>
  8062cc:	d8814117 	ldw	r2,1284(sp)
  8062d0:	94800044 	addi	r18,r18,1
  8062d4:	8c400044 	addi	r17,r17,1
  8062d8:	a8800015 	stw	r2,0(r21)
  8062dc:	008001c4 	movi	r2,7
  8062e0:	a8c00115 	stw	r3,4(r21)
  8062e4:	dc800e15 	stw	r18,56(sp)
  8062e8:	dc400d15 	stw	r17,52(sp)
  8062ec:	1441ca16 	blt	r2,r17,806a18 <___vfprintf_internal_r+0xe5c>
  8062f0:	a8c00204 	addi	r3,r21,8
  8062f4:	d9014917 	ldw	r4,1316(sp)
  8062f8:	00800044 	movi	r2,1
  8062fc:	94800044 	addi	r18,r18,1
  806300:	8c400044 	addi	r17,r17,1
  806304:	18800115 	stw	r2,4(r3)
  806308:	008001c4 	movi	r2,7
  80630c:	19000015 	stw	r4,0(r3)
  806310:	dc800e15 	stw	r18,56(sp)
  806314:	dc400d15 	stw	r17,52(sp)
  806318:	1441b616 	blt	r2,r17,8069f4 <___vfprintf_internal_r+0xe38>
  80631c:	1cc00204 	addi	r19,r3,8
  806320:	d9014217 	ldw	r4,1288(sp)
  806324:	d9414317 	ldw	r5,1292(sp)
  806328:	000d883a 	mov	r6,zero
  80632c:	000f883a 	mov	r7,zero
  806330:	08112f80 	call	8112f8 <__nedf2>
  806334:	10017426 	beq	r2,zero,806908 <___vfprintf_internal_r+0xd4c>
  806338:	d9414717 	ldw	r5,1308(sp)
  80633c:	d9814117 	ldw	r6,1284(sp)
  806340:	8c400044 	addi	r17,r17,1
  806344:	2c85883a 	add	r2,r5,r18
  806348:	14bfffc4 	addi	r18,r2,-1
  80634c:	28bfffc4 	addi	r2,r5,-1
  806350:	30c00044 	addi	r3,r6,1
  806354:	98800115 	stw	r2,4(r19)
  806358:	008001c4 	movi	r2,7
  80635c:	98c00015 	stw	r3,0(r19)
  806360:	dc800e15 	stw	r18,56(sp)
  806364:	dc400d15 	stw	r17,52(sp)
  806368:	14418e16 	blt	r2,r17,8069a4 <___vfprintf_internal_r+0xde8>
  80636c:	9cc00204 	addi	r19,r19,8
  806370:	d9414817 	ldw	r5,1312(sp)
  806374:	d8800804 	addi	r2,sp,32
  806378:	8c400044 	addi	r17,r17,1
  80637c:	9165883a 	add	r18,r18,r5
  806380:	98800015 	stw	r2,0(r19)
  806384:	008001c4 	movi	r2,7
  806388:	99400115 	stw	r5,4(r19)
  80638c:	dc800e15 	stw	r18,56(sp)
  806390:	dc400d15 	stw	r17,52(sp)
  806394:	1440ed16 	blt	r2,r17,80674c <___vfprintf_internal_r+0xb90>
  806398:	98c00204 	addi	r3,r19,8
  80639c:	003f8506 	br	8061b4 <___vfprintf_internal_r+0x5f8>
  8063a0:	d9814a17 	ldw	r6,1320(sp)
  8063a4:	d8814517 	ldw	r2,1300(sp)
  8063a8:	30a1c83a 	sub	r16,r6,r2
  8063ac:	043f4b0e 	bge	zero,r16,8060dc <___vfprintf_internal_r+0x520>
  8063b0:	00800404 	movi	r2,16
  8063b4:	14043a0e 	bge	r2,r16,8074a0 <___vfprintf_internal_r+0x18e4>
  8063b8:	1027883a 	mov	r19,r2
  8063bc:	07002074 	movhi	fp,129
  8063c0:	e7149584 	addi	fp,fp,21078
  8063c4:	050001c4 	movi	r20,7
  8063c8:	00000306 	br	8063d8 <___vfprintf_internal_r+0x81c>
  8063cc:	843ffc04 	addi	r16,r16,-16
  8063d0:	ad400204 	addi	r21,r21,8
  8063d4:	9c00130e 	bge	r19,r16,806424 <___vfprintf_internal_r+0x868>
  8063d8:	94800404 	addi	r18,r18,16
  8063dc:	8c400044 	addi	r17,r17,1
  8063e0:	af000015 	stw	fp,0(r21)
  8063e4:	acc00115 	stw	r19,4(r21)
  8063e8:	dc800e15 	stw	r18,56(sp)
  8063ec:	dc400d15 	stw	r17,52(sp)
  8063f0:	a47ff60e 	bge	r20,r17,8063cc <___vfprintf_internal_r+0x810>
  8063f4:	d9014f17 	ldw	r4,1340(sp)
  8063f8:	b00b883a 	mov	r5,r22
  8063fc:	d9800c04 	addi	r6,sp,48
  806400:	d9c15115 	stw	r7,1348(sp)
  806404:	0805b640 	call	805b64 <__sprint_r>
  806408:	d9c15117 	ldw	r7,1348(sp)
  80640c:	103fa31e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806410:	843ffc04 	addi	r16,r16,-16
  806414:	dc800e17 	ldw	r18,56(sp)
  806418:	dc400d17 	ldw	r17,52(sp)
  80641c:	dd401904 	addi	r21,sp,100
  806420:	9c3fed16 	blt	r19,r16,8063d8 <___vfprintf_internal_r+0x81c>
  806424:	9425883a 	add	r18,r18,r16
  806428:	8c400044 	addi	r17,r17,1
  80642c:	008001c4 	movi	r2,7
  806430:	af000015 	stw	fp,0(r21)
  806434:	ac000115 	stw	r16,4(r21)
  806438:	dc800e15 	stw	r18,56(sp)
  80643c:	dc400d15 	stw	r17,52(sp)
  806440:	14416116 	blt	r2,r17,8069c8 <___vfprintf_internal_r+0xe0c>
  806444:	ad400204 	addi	r21,r21,8
  806448:	003f2406 	br	8060dc <___vfprintf_internal_r+0x520>
  80644c:	d9014f17 	ldw	r4,1340(sp)
  806450:	08033640 	call	803364 <__sinit>
  806454:	d9c15117 	ldw	r7,1348(sp)
  806458:	003def06 	br	805c18 <___vfprintf_internal_r+0x5c>
  80645c:	d9014f17 	ldw	r4,1340(sp)
  806460:	b00b883a 	mov	r5,r22
  806464:	d9c15115 	stw	r7,1348(sp)
  806468:	08092a40 	call	8092a4 <__swsetup_r>
  80646c:	d9c15117 	ldw	r7,1348(sp)
  806470:	103dee26 	beq	r2,zero,805c2c <___vfprintf_internal_r+0x70>
  806474:	003f8c06 	br	8062a8 <___vfprintf_internal_r+0x6ec>
  806478:	d9014217 	ldw	r4,1288(sp)
  80647c:	d9414317 	ldw	r5,1292(sp)
  806480:	000d883a 	mov	r6,zero
  806484:	000f883a 	mov	r7,zero
  806488:	08112700 	call	811270 <__eqdf2>
  80648c:	1000f21e 	bne	r2,zero,806858 <___vfprintf_internal_r+0xc9c>
  806490:	00802074 	movhi	r2,129
  806494:	10949504 	addi	r2,r2,21076
  806498:	94800044 	addi	r18,r18,1
  80649c:	8c400044 	addi	r17,r17,1
  8064a0:	a8800015 	stw	r2,0(r21)
  8064a4:	00c00044 	movi	r3,1
  8064a8:	008001c4 	movi	r2,7
  8064ac:	a8c00115 	stw	r3,4(r21)
  8064b0:	dc800e15 	stw	r18,56(sp)
  8064b4:	dc400d15 	stw	r17,52(sp)
  8064b8:	14430016 	blt	r2,r17,8070bc <___vfprintf_internal_r+0x1500>
  8064bc:	a8c00204 	addi	r3,r21,8
  8064c0:	d8800517 	ldw	r2,20(sp)
  8064c4:	d9014717 	ldw	r4,1308(sp)
  8064c8:	11015c0e 	bge	r2,r4,806a3c <___vfprintf_internal_r+0xe80>
  8064cc:	dc400d17 	ldw	r17,52(sp)
  8064d0:	d9814917 	ldw	r6,1316(sp)
  8064d4:	00800044 	movi	r2,1
  8064d8:	94800044 	addi	r18,r18,1
  8064dc:	8c400044 	addi	r17,r17,1
  8064e0:	18800115 	stw	r2,4(r3)
  8064e4:	008001c4 	movi	r2,7
  8064e8:	19800015 	stw	r6,0(r3)
  8064ec:	dc800e15 	stw	r18,56(sp)
  8064f0:	dc400d15 	stw	r17,52(sp)
  8064f4:	14431616 	blt	r2,r17,807150 <___vfprintf_internal_r+0x1594>
  8064f8:	18c00204 	addi	r3,r3,8
  8064fc:	d8814717 	ldw	r2,1308(sp)
  806500:	143fffc4 	addi	r16,r2,-1
  806504:	043f2b0e 	bge	zero,r16,8061b4 <___vfprintf_internal_r+0x5f8>
  806508:	00800404 	movi	r2,16
  80650c:	1402a80e 	bge	r2,r16,806fb0 <___vfprintf_internal_r+0x13f4>
  806510:	dc400d17 	ldw	r17,52(sp)
  806514:	1027883a 	mov	r19,r2
  806518:	07002074 	movhi	fp,129
  80651c:	e7149584 	addi	fp,fp,21078
  806520:	050001c4 	movi	r20,7
  806524:	00000306 	br	806534 <___vfprintf_internal_r+0x978>
  806528:	18c00204 	addi	r3,r3,8
  80652c:	843ffc04 	addi	r16,r16,-16
  806530:	9c02a20e 	bge	r19,r16,806fbc <___vfprintf_internal_r+0x1400>
  806534:	94800404 	addi	r18,r18,16
  806538:	8c400044 	addi	r17,r17,1
  80653c:	1f000015 	stw	fp,0(r3)
  806540:	1cc00115 	stw	r19,4(r3)
  806544:	dc800e15 	stw	r18,56(sp)
  806548:	dc400d15 	stw	r17,52(sp)
  80654c:	a47ff60e 	bge	r20,r17,806528 <___vfprintf_internal_r+0x96c>
  806550:	d9014f17 	ldw	r4,1340(sp)
  806554:	b00b883a 	mov	r5,r22
  806558:	d9800c04 	addi	r6,sp,48
  80655c:	0805b640 	call	805b64 <__sprint_r>
  806560:	103f4e1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806564:	dc800e17 	ldw	r18,56(sp)
  806568:	dc400d17 	ldw	r17,52(sp)
  80656c:	d8c01904 	addi	r3,sp,100
  806570:	003fee06 	br	80652c <___vfprintf_internal_r+0x970>
  806574:	d8802c0b 	ldhu	r2,176(sp)
  806578:	00ffffc4 	movi	r3,-1
  80657c:	d8c14b15 	stw	r3,1324(sp)
  806580:	1080100c 	andi	r2,r2,64
  806584:	103dcc1e 	bne	r2,zero,805cb8 <___vfprintf_internal_r+0xfc>
  806588:	003dce06 	br	805cc4 <___vfprintf_internal_r+0x108>
  80658c:	d9014f17 	ldw	r4,1340(sp)
  806590:	b00b883a 	mov	r5,r22
  806594:	d9800c04 	addi	r6,sp,48
  806598:	0805b640 	call	805b64 <__sprint_r>
  80659c:	103f3f1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8065a0:	dc800e17 	ldw	r18,56(sp)
  8065a4:	003f2e06 	br	806260 <___vfprintf_internal_r+0x6a4>
  8065a8:	d9414c17 	ldw	r5,1328(sp)
  8065ac:	29400414 	ori	r5,r5,16
  8065b0:	d9414c15 	stw	r5,1328(sp)
  8065b4:	d9814c17 	ldw	r6,1328(sp)
  8065b8:	3080080c 	andi	r2,r6,32
  8065bc:	10014f1e 	bne	r2,zero,806afc <___vfprintf_internal_r+0xf40>
  8065c0:	d8c14c17 	ldw	r3,1328(sp)
  8065c4:	1880040c 	andi	r2,r3,16
  8065c8:	1002f01e 	bne	r2,zero,80718c <___vfprintf_internal_r+0x15d0>
  8065cc:	d9014c17 	ldw	r4,1328(sp)
  8065d0:	2080100c 	andi	r2,r4,64
  8065d4:	1002ed26 	beq	r2,zero,80718c <___vfprintf_internal_r+0x15d0>
  8065d8:	3880000f 	ldh	r2,0(r7)
  8065dc:	39c00104 	addi	r7,r7,4
  8065e0:	d9c14015 	stw	r7,1280(sp)
  8065e4:	1023d7fa 	srai	r17,r2,31
  8065e8:	1021883a 	mov	r16,r2
  8065ec:	88037816 	blt	r17,zero,8073d0 <___vfprintf_internal_r+0x1814>
  8065f0:	01000044 	movi	r4,1
  8065f4:	98000416 	blt	r19,zero,806608 <___vfprintf_internal_r+0xa4c>
  8065f8:	d8c14c17 	ldw	r3,1328(sp)
  8065fc:	00bfdfc4 	movi	r2,-129
  806600:	1886703a 	and	r3,r3,r2
  806604:	d8c14c15 	stw	r3,1328(sp)
  806608:	8444b03a 	or	r2,r16,r17
  80660c:	10022c1e 	bne	r2,zero,806ec0 <___vfprintf_internal_r+0x1304>
  806610:	98022b1e 	bne	r19,zero,806ec0 <___vfprintf_internal_r+0x1304>
  806614:	20803fcc 	andi	r2,r4,255
  806618:	1002a126 	beq	r2,zero,8070a0 <___vfprintf_internal_r+0x14e4>
  80661c:	d8c01904 	addi	r3,sp,100
  806620:	dd000f04 	addi	r20,sp,60
  806624:	d8c14115 	stw	r3,1284(sp)
  806628:	d8c14117 	ldw	r3,1284(sp)
  80662c:	dcc14515 	stw	r19,1300(sp)
  806630:	a0c5c83a 	sub	r2,r20,r3
  806634:	11c00a04 	addi	r7,r2,40
  806638:	99c0010e 	bge	r19,r7,806640 <___vfprintf_internal_r+0xa84>
  80663c:	d9c14515 	stw	r7,1300(sp)
  806640:	dcc14615 	stw	r19,1304(sp)
  806644:	d8800407 	ldb	r2,16(sp)
  806648:	103e4c26 	beq	r2,zero,805f7c <___vfprintf_internal_r+0x3c0>
  80664c:	d8814517 	ldw	r2,1300(sp)
  806650:	10800044 	addi	r2,r2,1
  806654:	d8814515 	stw	r2,1300(sp)
  806658:	003e4806 	br	805f7c <___vfprintf_internal_r+0x3c0>
  80665c:	d9814c17 	ldw	r6,1328(sp)
  806660:	31800414 	ori	r6,r6,16
  806664:	d9814c15 	stw	r6,1328(sp)
  806668:	d8c14c17 	ldw	r3,1328(sp)
  80666c:	1880080c 	andi	r2,r3,32
  806670:	1001271e 	bne	r2,zero,806b10 <___vfprintf_internal_r+0xf54>
  806674:	d9414c17 	ldw	r5,1328(sp)
  806678:	2880040c 	andi	r2,r5,16
  80667c:	1002bc1e 	bne	r2,zero,807170 <___vfprintf_internal_r+0x15b4>
  806680:	d9814c17 	ldw	r6,1328(sp)
  806684:	3080100c 	andi	r2,r6,64
  806688:	1002b926 	beq	r2,zero,807170 <___vfprintf_internal_r+0x15b4>
  80668c:	3c00000b 	ldhu	r16,0(r7)
  806690:	0009883a 	mov	r4,zero
  806694:	39c00104 	addi	r7,r7,4
  806698:	0023883a 	mov	r17,zero
  80669c:	d9c14015 	stw	r7,1280(sp)
  8066a0:	d8000405 	stb	zero,16(sp)
  8066a4:	003fd306 	br	8065f4 <___vfprintf_internal_r+0xa38>
  8066a8:	d9014c17 	ldw	r4,1328(sp)
  8066ac:	21000414 	ori	r4,r4,16
  8066b0:	d9014c15 	stw	r4,1328(sp)
  8066b4:	d9414c17 	ldw	r5,1328(sp)
  8066b8:	2880080c 	andi	r2,r5,32
  8066bc:	1001081e 	bne	r2,zero,806ae0 <___vfprintf_internal_r+0xf24>
  8066c0:	d8c14c17 	ldw	r3,1328(sp)
  8066c4:	1880040c 	andi	r2,r3,16
  8066c8:	1002b61e 	bne	r2,zero,8071a4 <___vfprintf_internal_r+0x15e8>
  8066cc:	d9014c17 	ldw	r4,1328(sp)
  8066d0:	2080100c 	andi	r2,r4,64
  8066d4:	1002b326 	beq	r2,zero,8071a4 <___vfprintf_internal_r+0x15e8>
  8066d8:	3c00000b 	ldhu	r16,0(r7)
  8066dc:	01000044 	movi	r4,1
  8066e0:	39c00104 	addi	r7,r7,4
  8066e4:	0023883a 	mov	r17,zero
  8066e8:	d9c14015 	stw	r7,1280(sp)
  8066ec:	d8000405 	stb	zero,16(sp)
  8066f0:	003fc006 	br	8065f4 <___vfprintf_internal_r+0xa38>
  8066f4:	d9014f17 	ldw	r4,1340(sp)
  8066f8:	b00b883a 	mov	r5,r22
  8066fc:	d9800c04 	addi	r6,sp,48
  806700:	0805b640 	call	805b64 <__sprint_r>
  806704:	103ee51e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806708:	dc800e17 	ldw	r18,56(sp)
  80670c:	d8c01904 	addi	r3,sp,100
  806710:	d9814c17 	ldw	r6,1328(sp)
  806714:	3080004c 	andi	r2,r6,1
  806718:	1005003a 	cmpeq	r2,r2,zero
  80671c:	103ea51e 	bne	r2,zero,8061b4 <___vfprintf_internal_r+0x5f8>
  806720:	00800044 	movi	r2,1
  806724:	dc400d17 	ldw	r17,52(sp)
  806728:	18800115 	stw	r2,4(r3)
  80672c:	d8814917 	ldw	r2,1316(sp)
  806730:	94800044 	addi	r18,r18,1
  806734:	8c400044 	addi	r17,r17,1
  806738:	18800015 	stw	r2,0(r3)
  80673c:	008001c4 	movi	r2,7
  806740:	dc800e15 	stw	r18,56(sp)
  806744:	dc400d15 	stw	r17,52(sp)
  806748:	1442240e 	bge	r2,r17,806fdc <___vfprintf_internal_r+0x1420>
  80674c:	d9014f17 	ldw	r4,1340(sp)
  806750:	b00b883a 	mov	r5,r22
  806754:	d9800c04 	addi	r6,sp,48
  806758:	0805b640 	call	805b64 <__sprint_r>
  80675c:	103ecf1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806760:	dc800e17 	ldw	r18,56(sp)
  806764:	d8c01904 	addi	r3,sp,100
  806768:	003e9206 	br	8061b4 <___vfprintf_internal_r+0x5f8>
  80676c:	d9014f17 	ldw	r4,1340(sp)
  806770:	b00b883a 	mov	r5,r22
  806774:	d9800c04 	addi	r6,sp,48
  806778:	0805b640 	call	805b64 <__sprint_r>
  80677c:	103ec026 	beq	r2,zero,806280 <___vfprintf_internal_r+0x6c4>
  806780:	003ec606 	br	80629c <___vfprintf_internal_r+0x6e0>
  806784:	d9014f17 	ldw	r4,1340(sp)
  806788:	b00b883a 	mov	r5,r22
  80678c:	d9800c04 	addi	r6,sp,48
  806790:	d9c15115 	stw	r7,1348(sp)
  806794:	0805b640 	call	805b64 <__sprint_r>
  806798:	d9c15117 	ldw	r7,1348(sp)
  80679c:	103ebf1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8067a0:	dc800e17 	ldw	r18,56(sp)
  8067a4:	dc400d17 	ldw	r17,52(sp)
  8067a8:	dd401904 	addi	r21,sp,100
  8067ac:	003e7406 	br	806180 <___vfprintf_internal_r+0x5c4>
  8067b0:	d9014f17 	ldw	r4,1340(sp)
  8067b4:	b00b883a 	mov	r5,r22
  8067b8:	d9800c04 	addi	r6,sp,48
  8067bc:	d9c15115 	stw	r7,1348(sp)
  8067c0:	0805b640 	call	805b64 <__sprint_r>
  8067c4:	d9c15117 	ldw	r7,1348(sp)
  8067c8:	103eb41e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8067cc:	dd401904 	addi	r21,sp,100
  8067d0:	003d6d06 	br	805d88 <___vfprintf_internal_r+0x1cc>
  8067d4:	d9014f17 	ldw	r4,1340(sp)
  8067d8:	b00b883a 	mov	r5,r22
  8067dc:	d9800c04 	addi	r6,sp,48
  8067e0:	d9c15115 	stw	r7,1348(sp)
  8067e4:	0805b640 	call	805b64 <__sprint_r>
  8067e8:	d9c15117 	ldw	r7,1348(sp)
  8067ec:	103eab1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8067f0:	dc800e17 	ldw	r18,56(sp)
  8067f4:	dc400d17 	ldw	r17,52(sp)
  8067f8:	dd401904 	addi	r21,sp,100
  8067fc:	003e3406 	br	8060d0 <___vfprintf_internal_r+0x514>
  806800:	d9014f17 	ldw	r4,1340(sp)
  806804:	b00b883a 	mov	r5,r22
  806808:	d9800c04 	addi	r6,sp,48
  80680c:	d9c15115 	stw	r7,1348(sp)
  806810:	0805b640 	call	805b64 <__sprint_r>
  806814:	d9c15117 	ldw	r7,1348(sp)
  806818:	103ea01e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  80681c:	dc800e17 	ldw	r18,56(sp)
  806820:	dc400d17 	ldw	r17,52(sp)
  806824:	dd401904 	addi	r21,sp,100
  806828:	003e1c06 	br	80609c <___vfprintf_internal_r+0x4e0>
  80682c:	d9014f17 	ldw	r4,1340(sp)
  806830:	b00b883a 	mov	r5,r22
  806834:	d9800c04 	addi	r6,sp,48
  806838:	d9c15115 	stw	r7,1348(sp)
  80683c:	0805b640 	call	805b64 <__sprint_r>
  806840:	d9c15117 	ldw	r7,1348(sp)
  806844:	103e951e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806848:	dc800e17 	ldw	r18,56(sp)
  80684c:	dc400d17 	ldw	r17,52(sp)
  806850:	dd401904 	addi	r21,sp,100
  806854:	003e0406 	br	806068 <___vfprintf_internal_r+0x4ac>
  806858:	d9000517 	ldw	r4,20(sp)
  80685c:	0102580e 	bge	zero,r4,8071c0 <___vfprintf_internal_r+0x1604>
  806860:	d9814717 	ldw	r6,1308(sp)
  806864:	21807a16 	blt	r4,r6,806a50 <___vfprintf_internal_r+0xe94>
  806868:	d8814117 	ldw	r2,1284(sp)
  80686c:	91a5883a 	add	r18,r18,r6
  806870:	8c400044 	addi	r17,r17,1
  806874:	a8800015 	stw	r2,0(r21)
  806878:	008001c4 	movi	r2,7
  80687c:	a9800115 	stw	r6,4(r21)
  806880:	dc800e15 	stw	r18,56(sp)
  806884:	dc400d15 	stw	r17,52(sp)
  806888:	1442fc16 	blt	r2,r17,80747c <___vfprintf_internal_r+0x18c0>
  80688c:	a8c00204 	addi	r3,r21,8
  806890:	d9414717 	ldw	r5,1308(sp)
  806894:	2161c83a 	sub	r16,r4,r5
  806898:	043f9d0e 	bge	zero,r16,806710 <___vfprintf_internal_r+0xb54>
  80689c:	00800404 	movi	r2,16
  8068a0:	1402190e 	bge	r2,r16,807108 <___vfprintf_internal_r+0x154c>
  8068a4:	dc400d17 	ldw	r17,52(sp)
  8068a8:	1027883a 	mov	r19,r2
  8068ac:	07002074 	movhi	fp,129
  8068b0:	e7149584 	addi	fp,fp,21078
  8068b4:	050001c4 	movi	r20,7
  8068b8:	00000306 	br	8068c8 <___vfprintf_internal_r+0xd0c>
  8068bc:	18c00204 	addi	r3,r3,8
  8068c0:	843ffc04 	addi	r16,r16,-16
  8068c4:	9c02130e 	bge	r19,r16,807114 <___vfprintf_internal_r+0x1558>
  8068c8:	94800404 	addi	r18,r18,16
  8068cc:	8c400044 	addi	r17,r17,1
  8068d0:	1f000015 	stw	fp,0(r3)
  8068d4:	1cc00115 	stw	r19,4(r3)
  8068d8:	dc800e15 	stw	r18,56(sp)
  8068dc:	dc400d15 	stw	r17,52(sp)
  8068e0:	a47ff60e 	bge	r20,r17,8068bc <___vfprintf_internal_r+0xd00>
  8068e4:	d9014f17 	ldw	r4,1340(sp)
  8068e8:	b00b883a 	mov	r5,r22
  8068ec:	d9800c04 	addi	r6,sp,48
  8068f0:	0805b640 	call	805b64 <__sprint_r>
  8068f4:	103e691e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8068f8:	dc800e17 	ldw	r18,56(sp)
  8068fc:	dc400d17 	ldw	r17,52(sp)
  806900:	d8c01904 	addi	r3,sp,100
  806904:	003fee06 	br	8068c0 <___vfprintf_internal_r+0xd04>
  806908:	d8814717 	ldw	r2,1308(sp)
  80690c:	143fffc4 	addi	r16,r2,-1
  806910:	043e970e 	bge	zero,r16,806370 <___vfprintf_internal_r+0x7b4>
  806914:	00800404 	movi	r2,16
  806918:	1400180e 	bge	r2,r16,80697c <___vfprintf_internal_r+0xdc0>
  80691c:	1029883a 	mov	r20,r2
  806920:	07002074 	movhi	fp,129
  806924:	e7149584 	addi	fp,fp,21078
  806928:	054001c4 	movi	r21,7
  80692c:	00000306 	br	80693c <___vfprintf_internal_r+0xd80>
  806930:	9cc00204 	addi	r19,r19,8
  806934:	843ffc04 	addi	r16,r16,-16
  806938:	a400120e 	bge	r20,r16,806984 <___vfprintf_internal_r+0xdc8>
  80693c:	94800404 	addi	r18,r18,16
  806940:	8c400044 	addi	r17,r17,1
  806944:	9f000015 	stw	fp,0(r19)
  806948:	9d000115 	stw	r20,4(r19)
  80694c:	dc800e15 	stw	r18,56(sp)
  806950:	dc400d15 	stw	r17,52(sp)
  806954:	ac7ff60e 	bge	r21,r17,806930 <___vfprintf_internal_r+0xd74>
  806958:	d9014f17 	ldw	r4,1340(sp)
  80695c:	b00b883a 	mov	r5,r22
  806960:	d9800c04 	addi	r6,sp,48
  806964:	0805b640 	call	805b64 <__sprint_r>
  806968:	103e4c1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  80696c:	dc800e17 	ldw	r18,56(sp)
  806970:	dc400d17 	ldw	r17,52(sp)
  806974:	dcc01904 	addi	r19,sp,100
  806978:	003fee06 	br	806934 <___vfprintf_internal_r+0xd78>
  80697c:	07002074 	movhi	fp,129
  806980:	e7149584 	addi	fp,fp,21078
  806984:	9425883a 	add	r18,r18,r16
  806988:	8c400044 	addi	r17,r17,1
  80698c:	008001c4 	movi	r2,7
  806990:	9f000015 	stw	fp,0(r19)
  806994:	9c000115 	stw	r16,4(r19)
  806998:	dc800e15 	stw	r18,56(sp)
  80699c:	dc400d15 	stw	r17,52(sp)
  8069a0:	147e720e 	bge	r2,r17,80636c <___vfprintf_internal_r+0x7b0>
  8069a4:	d9014f17 	ldw	r4,1340(sp)
  8069a8:	b00b883a 	mov	r5,r22
  8069ac:	d9800c04 	addi	r6,sp,48
  8069b0:	0805b640 	call	805b64 <__sprint_r>
  8069b4:	103e391e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8069b8:	dc800e17 	ldw	r18,56(sp)
  8069bc:	dc400d17 	ldw	r17,52(sp)
  8069c0:	dcc01904 	addi	r19,sp,100
  8069c4:	003e6a06 	br	806370 <___vfprintf_internal_r+0x7b4>
  8069c8:	d9014f17 	ldw	r4,1340(sp)
  8069cc:	b00b883a 	mov	r5,r22
  8069d0:	d9800c04 	addi	r6,sp,48
  8069d4:	d9c15115 	stw	r7,1348(sp)
  8069d8:	0805b640 	call	805b64 <__sprint_r>
  8069dc:	d9c15117 	ldw	r7,1348(sp)
  8069e0:	103e2e1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8069e4:	dc800e17 	ldw	r18,56(sp)
  8069e8:	dc400d17 	ldw	r17,52(sp)
  8069ec:	dd401904 	addi	r21,sp,100
  8069f0:	003dba06 	br	8060dc <___vfprintf_internal_r+0x520>
  8069f4:	d9014f17 	ldw	r4,1340(sp)
  8069f8:	b00b883a 	mov	r5,r22
  8069fc:	d9800c04 	addi	r6,sp,48
  806a00:	0805b640 	call	805b64 <__sprint_r>
  806a04:	103e251e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806a08:	dc800e17 	ldw	r18,56(sp)
  806a0c:	dc400d17 	ldw	r17,52(sp)
  806a10:	dcc01904 	addi	r19,sp,100
  806a14:	003e4206 	br	806320 <___vfprintf_internal_r+0x764>
  806a18:	d9014f17 	ldw	r4,1340(sp)
  806a1c:	b00b883a 	mov	r5,r22
  806a20:	d9800c04 	addi	r6,sp,48
  806a24:	0805b640 	call	805b64 <__sprint_r>
  806a28:	103e1c1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  806a2c:	dc800e17 	ldw	r18,56(sp)
  806a30:	dc400d17 	ldw	r17,52(sp)
  806a34:	d8c01904 	addi	r3,sp,100
  806a38:	003e2e06 	br	8062f4 <___vfprintf_internal_r+0x738>
  806a3c:	d9414c17 	ldw	r5,1328(sp)
  806a40:	2880004c 	andi	r2,r5,1
  806a44:	1005003a 	cmpeq	r2,r2,zero
  806a48:	103dda1e 	bne	r2,zero,8061b4 <___vfprintf_internal_r+0x5f8>
  806a4c:	003e9f06 	br	8064cc <___vfprintf_internal_r+0x910>
  806a50:	d8c14117 	ldw	r3,1284(sp)
  806a54:	9125883a 	add	r18,r18,r4
  806a58:	8c400044 	addi	r17,r17,1
  806a5c:	008001c4 	movi	r2,7
  806a60:	a8c00015 	stw	r3,0(r21)
  806a64:	a9000115 	stw	r4,4(r21)
  806a68:	dc800e15 	stw	r18,56(sp)
  806a6c:	dc400d15 	stw	r17,52(sp)
  806a70:	14426c16 	blt	r2,r17,807424 <___vfprintf_internal_r+0x1868>
  806a74:	a8c00204 	addi	r3,r21,8
  806a78:	d9414917 	ldw	r5,1316(sp)
  806a7c:	00800044 	movi	r2,1
  806a80:	94800044 	addi	r18,r18,1
  806a84:	8c400044 	addi	r17,r17,1
  806a88:	18800115 	stw	r2,4(r3)
  806a8c:	008001c4 	movi	r2,7
  806a90:	19400015 	stw	r5,0(r3)
  806a94:	dc800e15 	stw	r18,56(sp)
  806a98:	dc400d15 	stw	r17,52(sp)
  806a9c:	2021883a 	mov	r16,r4
  806aa0:	14425616 	blt	r2,r17,8073fc <___vfprintf_internal_r+0x1840>
  806aa4:	19400204 	addi	r5,r3,8
  806aa8:	d9814717 	ldw	r6,1308(sp)
  806aac:	8c400044 	addi	r17,r17,1
  806ab0:	dc400d15 	stw	r17,52(sp)
  806ab4:	3107c83a 	sub	r3,r6,r4
  806ab8:	d9014117 	ldw	r4,1284(sp)
  806abc:	90e5883a 	add	r18,r18,r3
  806ac0:	28c00115 	stw	r3,4(r5)
  806ac4:	8105883a 	add	r2,r16,r4
  806ac8:	28800015 	stw	r2,0(r5)
  806acc:	008001c4 	movi	r2,7
  806ad0:	dc800e15 	stw	r18,56(sp)
  806ad4:	147f1d16 	blt	r2,r17,80674c <___vfprintf_internal_r+0xb90>
  806ad8:	28c00204 	addi	r3,r5,8
  806adc:	003db506 	br	8061b4 <___vfprintf_internal_r+0x5f8>
  806ae0:	3c000017 	ldw	r16,0(r7)
  806ae4:	3c400117 	ldw	r17,4(r7)
  806ae8:	39800204 	addi	r6,r7,8
  806aec:	01000044 	movi	r4,1
  806af0:	d9814015 	stw	r6,1280(sp)
  806af4:	d8000405 	stb	zero,16(sp)
  806af8:	003ebe06 	br	8065f4 <___vfprintf_internal_r+0xa38>
  806afc:	3c000017 	ldw	r16,0(r7)
  806b00:	3c400117 	ldw	r17,4(r7)
  806b04:	38800204 	addi	r2,r7,8
  806b08:	d8814015 	stw	r2,1280(sp)
  806b0c:	003eb706 	br	8065ec <___vfprintf_internal_r+0xa30>
  806b10:	3c000017 	ldw	r16,0(r7)
  806b14:	3c400117 	ldw	r17,4(r7)
  806b18:	39000204 	addi	r4,r7,8
  806b1c:	d9014015 	stw	r4,1280(sp)
  806b20:	0009883a 	mov	r4,zero
  806b24:	d8000405 	stb	zero,16(sp)
  806b28:	003eb206 	br	8065f4 <___vfprintf_internal_r+0xa38>
  806b2c:	38c00017 	ldw	r3,0(r7)
  806b30:	39c00104 	addi	r7,r7,4
  806b34:	d8c14a15 	stw	r3,1320(sp)
  806b38:	1800d70e 	bge	r3,zero,806e98 <___vfprintf_internal_r+0x12dc>
  806b3c:	00c7c83a 	sub	r3,zero,r3
  806b40:	d8c14a15 	stw	r3,1320(sp)
  806b44:	d9014c17 	ldw	r4,1328(sp)
  806b48:	b8c00007 	ldb	r3,0(r23)
  806b4c:	21000114 	ori	r4,r4,4
  806b50:	d9014c15 	stw	r4,1328(sp)
  806b54:	003c9806 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806b58:	d9814c17 	ldw	r6,1328(sp)
  806b5c:	3080080c 	andi	r2,r6,32
  806b60:	1001f626 	beq	r2,zero,80733c <___vfprintf_internal_r+0x1780>
  806b64:	d9014b17 	ldw	r4,1324(sp)
  806b68:	38800017 	ldw	r2,0(r7)
  806b6c:	39c00104 	addi	r7,r7,4
  806b70:	d9c14015 	stw	r7,1280(sp)
  806b74:	2007d7fa 	srai	r3,r4,31
  806b78:	d9c14017 	ldw	r7,1280(sp)
  806b7c:	11000015 	stw	r4,0(r2)
  806b80:	10c00115 	stw	r3,4(r2)
  806b84:	003c6906 	br	805d2c <___vfprintf_internal_r+0x170>
  806b88:	b8c00007 	ldb	r3,0(r23)
  806b8c:	00801b04 	movi	r2,108
  806b90:	18825526 	beq	r3,r2,8074e8 <___vfprintf_internal_r+0x192c>
  806b94:	d9414c17 	ldw	r5,1328(sp)
  806b98:	29400414 	ori	r5,r5,16
  806b9c:	d9414c15 	stw	r5,1328(sp)
  806ba0:	003c8506 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806ba4:	d9814c17 	ldw	r6,1328(sp)
  806ba8:	b8c00007 	ldb	r3,0(r23)
  806bac:	31800814 	ori	r6,r6,32
  806bb0:	d9814c15 	stw	r6,1328(sp)
  806bb4:	003c8006 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806bb8:	d8814c17 	ldw	r2,1328(sp)
  806bbc:	3c000017 	ldw	r16,0(r7)
  806bc0:	00c01e04 	movi	r3,120
  806bc4:	10800094 	ori	r2,r2,2
  806bc8:	d8814c15 	stw	r2,1328(sp)
  806bcc:	39c00104 	addi	r7,r7,4
  806bd0:	01402074 	movhi	r5,129
  806bd4:	29547e04 	addi	r5,r5,20984
  806bd8:	00800c04 	movi	r2,48
  806bdc:	0023883a 	mov	r17,zero
  806be0:	01000084 	movi	r4,2
  806be4:	d9c14015 	stw	r7,1280(sp)
  806be8:	d8c14d15 	stw	r3,1332(sp)
  806bec:	d9414415 	stw	r5,1296(sp)
  806bf0:	d8800445 	stb	r2,17(sp)
  806bf4:	d8c00485 	stb	r3,18(sp)
  806bf8:	d8000405 	stb	zero,16(sp)
  806bfc:	003e7d06 	br	8065f4 <___vfprintf_internal_r+0xa38>
  806c00:	d8814c17 	ldw	r2,1328(sp)
  806c04:	b8c00007 	ldb	r3,0(r23)
  806c08:	10801014 	ori	r2,r2,64
  806c0c:	d8814c15 	stw	r2,1328(sp)
  806c10:	003c6906 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806c14:	d9414c17 	ldw	r5,1328(sp)
  806c18:	2880020c 	andi	r2,r5,8
  806c1c:	1001e526 	beq	r2,zero,8073b4 <___vfprintf_internal_r+0x17f8>
  806c20:	39800017 	ldw	r6,0(r7)
  806c24:	38800204 	addi	r2,r7,8
  806c28:	d8814015 	stw	r2,1280(sp)
  806c2c:	d9814215 	stw	r6,1288(sp)
  806c30:	39c00117 	ldw	r7,4(r7)
  806c34:	d9c14315 	stw	r7,1292(sp)
  806c38:	d9014217 	ldw	r4,1288(sp)
  806c3c:	d9414317 	ldw	r5,1292(sp)
  806c40:	080cde80 	call	80cde8 <__isinfd>
  806c44:	10021d26 	beq	r2,zero,8074bc <___vfprintf_internal_r+0x1900>
  806c48:	d9014217 	ldw	r4,1288(sp)
  806c4c:	d9414317 	ldw	r5,1292(sp)
  806c50:	000d883a 	mov	r6,zero
  806c54:	000f883a 	mov	r7,zero
  806c58:	08114900 	call	811490 <__ltdf2>
  806c5c:	1002d016 	blt	r2,zero,8077a0 <___vfprintf_internal_r+0x1be4>
  806c60:	d9414d17 	ldw	r5,1332(sp)
  806c64:	008011c4 	movi	r2,71
  806c68:	11421016 	blt	r2,r5,8074ac <___vfprintf_internal_r+0x18f0>
  806c6c:	01802074 	movhi	r6,129
  806c70:	31948304 	addi	r6,r6,21004
  806c74:	d9814115 	stw	r6,1284(sp)
  806c78:	d9014c17 	ldw	r4,1328(sp)
  806c7c:	00c000c4 	movi	r3,3
  806c80:	00bfdfc4 	movi	r2,-129
  806c84:	2088703a 	and	r4,r4,r2
  806c88:	180f883a 	mov	r7,r3
  806c8c:	d8c14515 	stw	r3,1300(sp)
  806c90:	d9014c15 	stw	r4,1328(sp)
  806c94:	d8014615 	stw	zero,1304(sp)
  806c98:	003e6a06 	br	806644 <___vfprintf_internal_r+0xa88>
  806c9c:	38800017 	ldw	r2,0(r7)
  806ca0:	00c00044 	movi	r3,1
  806ca4:	39c00104 	addi	r7,r7,4
  806ca8:	d9c14015 	stw	r7,1280(sp)
  806cac:	d9000f04 	addi	r4,sp,60
  806cb0:	180f883a 	mov	r7,r3
  806cb4:	d8c14515 	stw	r3,1300(sp)
  806cb8:	d9014115 	stw	r4,1284(sp)
  806cbc:	d8800f05 	stb	r2,60(sp)
  806cc0:	d8000405 	stb	zero,16(sp)
  806cc4:	003cac06 	br	805f78 <___vfprintf_internal_r+0x3bc>
  806cc8:	01402074 	movhi	r5,129
  806ccc:	29548904 	addi	r5,r5,21028
  806cd0:	d9414415 	stw	r5,1296(sp)
  806cd4:	d9814c17 	ldw	r6,1328(sp)
  806cd8:	3080080c 	andi	r2,r6,32
  806cdc:	1000ff26 	beq	r2,zero,8070dc <___vfprintf_internal_r+0x1520>
  806ce0:	3c000017 	ldw	r16,0(r7)
  806ce4:	3c400117 	ldw	r17,4(r7)
  806ce8:	38800204 	addi	r2,r7,8
  806cec:	d8814015 	stw	r2,1280(sp)
  806cf0:	d9414c17 	ldw	r5,1328(sp)
  806cf4:	2880004c 	andi	r2,r5,1
  806cf8:	1005003a 	cmpeq	r2,r2,zero
  806cfc:	1000b91e 	bne	r2,zero,806fe4 <___vfprintf_internal_r+0x1428>
  806d00:	8444b03a 	or	r2,r16,r17
  806d04:	1000b726 	beq	r2,zero,806fe4 <___vfprintf_internal_r+0x1428>
  806d08:	d9814d17 	ldw	r6,1332(sp)
  806d0c:	29400094 	ori	r5,r5,2
  806d10:	00800c04 	movi	r2,48
  806d14:	01000084 	movi	r4,2
  806d18:	d9414c15 	stw	r5,1328(sp)
  806d1c:	d8800445 	stb	r2,17(sp)
  806d20:	d9800485 	stb	r6,18(sp)
  806d24:	d8000405 	stb	zero,16(sp)
  806d28:	003e3206 	br	8065f4 <___vfprintf_internal_r+0xa38>
  806d2c:	01802074 	movhi	r6,129
  806d30:	31947e04 	addi	r6,r6,20984
  806d34:	d9814415 	stw	r6,1296(sp)
  806d38:	003fe606 	br	806cd4 <___vfprintf_internal_r+0x1118>
  806d3c:	00800ac4 	movi	r2,43
  806d40:	d8800405 	stb	r2,16(sp)
  806d44:	b8c00007 	ldb	r3,0(r23)
  806d48:	003c1b06 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806d4c:	d8814c17 	ldw	r2,1328(sp)
  806d50:	b8c00007 	ldb	r3,0(r23)
  806d54:	10800054 	ori	r2,r2,1
  806d58:	d8814c15 	stw	r2,1328(sp)
  806d5c:	003c1606 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806d60:	d8800407 	ldb	r2,16(sp)
  806d64:	10004c1e 	bne	r2,zero,806e98 <___vfprintf_internal_r+0x12dc>
  806d68:	00800804 	movi	r2,32
  806d6c:	d8800405 	stb	r2,16(sp)
  806d70:	b8c00007 	ldb	r3,0(r23)
  806d74:	003c1006 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806d78:	d9814c17 	ldw	r6,1328(sp)
  806d7c:	b8c00007 	ldb	r3,0(r23)
  806d80:	31800214 	ori	r6,r6,8
  806d84:	d9814c15 	stw	r6,1328(sp)
  806d88:	003c0b06 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806d8c:	0009883a 	mov	r4,zero
  806d90:	04000244 	movi	r16,9
  806d94:	01400284 	movi	r5,10
  806d98:	d9c15115 	stw	r7,1348(sp)
  806d9c:	08026a00 	call	8026a0 <__mulsi3>
  806da0:	b9000007 	ldb	r4,0(r23)
  806da4:	d8c14d17 	ldw	r3,1332(sp)
  806da8:	bdc00044 	addi	r23,r23,1
  806dac:	d9014d15 	stw	r4,1332(sp)
  806db0:	d9414d17 	ldw	r5,1332(sp)
  806db4:	1885883a 	add	r2,r3,r2
  806db8:	113ff404 	addi	r4,r2,-48
  806dbc:	28bff404 	addi	r2,r5,-48
  806dc0:	d9c15117 	ldw	r7,1348(sp)
  806dc4:	80bff32e 	bgeu	r16,r2,806d94 <___vfprintf_internal_r+0x11d8>
  806dc8:	d9014a15 	stw	r4,1320(sp)
  806dcc:	003bfc06 	br	805dc0 <___vfprintf_internal_r+0x204>
  806dd0:	d8814c17 	ldw	r2,1328(sp)
  806dd4:	b8c00007 	ldb	r3,0(r23)
  806dd8:	10802014 	ori	r2,r2,128
  806ddc:	d8814c15 	stw	r2,1328(sp)
  806de0:	003bf506 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806de4:	b8c00007 	ldb	r3,0(r23)
  806de8:	00800a84 	movi	r2,42
  806dec:	bdc00044 	addi	r23,r23,1
  806df0:	18831826 	beq	r3,r2,807a54 <___vfprintf_internal_r+0x1e98>
  806df4:	d8c14d15 	stw	r3,1332(sp)
  806df8:	18bff404 	addi	r2,r3,-48
  806dfc:	00c00244 	movi	r3,9
  806e00:	18827b36 	bltu	r3,r2,8077f0 <___vfprintf_internal_r+0x1c34>
  806e04:	1821883a 	mov	r16,r3
  806e08:	0009883a 	mov	r4,zero
  806e0c:	01400284 	movi	r5,10
  806e10:	d9c15115 	stw	r7,1348(sp)
  806e14:	08026a00 	call	8026a0 <__mulsi3>
  806e18:	d9414d17 	ldw	r5,1332(sp)
  806e1c:	b9800007 	ldb	r6,0(r23)
  806e20:	d9c15117 	ldw	r7,1348(sp)
  806e24:	1145883a 	add	r2,r2,r5
  806e28:	113ff404 	addi	r4,r2,-48
  806e2c:	30bff404 	addi	r2,r6,-48
  806e30:	d9814d15 	stw	r6,1332(sp)
  806e34:	bdc00044 	addi	r23,r23,1
  806e38:	80bff42e 	bgeu	r16,r2,806e0c <___vfprintf_internal_r+0x1250>
  806e3c:	2027883a 	mov	r19,r4
  806e40:	203bdf0e 	bge	r4,zero,805dc0 <___vfprintf_internal_r+0x204>
  806e44:	04ffffc4 	movi	r19,-1
  806e48:	003bdd06 	br	805dc0 <___vfprintf_internal_r+0x204>
  806e4c:	d8000405 	stb	zero,16(sp)
  806e50:	39800017 	ldw	r6,0(r7)
  806e54:	39c00104 	addi	r7,r7,4
  806e58:	d9c14015 	stw	r7,1280(sp)
  806e5c:	d9814115 	stw	r6,1284(sp)
  806e60:	3001c926 	beq	r6,zero,807588 <___vfprintf_internal_r+0x19cc>
  806e64:	98000e16 	blt	r19,zero,806ea0 <___vfprintf_internal_r+0x12e4>
  806e68:	d9014117 	ldw	r4,1284(sp)
  806e6c:	000b883a 	mov	r5,zero
  806e70:	980d883a 	mov	r6,r19
  806e74:	0804e940 	call	804e94 <memchr>
  806e78:	10025926 	beq	r2,zero,8077e0 <___vfprintf_internal_r+0x1c24>
  806e7c:	d8c14117 	ldw	r3,1284(sp)
  806e80:	10cfc83a 	sub	r7,r2,r3
  806e84:	99c19e16 	blt	r19,r7,807500 <___vfprintf_internal_r+0x1944>
  806e88:	d9c14515 	stw	r7,1300(sp)
  806e8c:	38000916 	blt	r7,zero,806eb4 <___vfprintf_internal_r+0x12f8>
  806e90:	d8014615 	stw	zero,1304(sp)
  806e94:	003deb06 	br	806644 <___vfprintf_internal_r+0xa88>
  806e98:	b8c00007 	ldb	r3,0(r23)
  806e9c:	003bc606 	br	805db8 <___vfprintf_internal_r+0x1fc>
  806ea0:	d9014117 	ldw	r4,1284(sp)
  806ea4:	08057640 	call	805764 <strlen>
  806ea8:	d8814515 	stw	r2,1300(sp)
  806eac:	100f883a 	mov	r7,r2
  806eb0:	103ff70e 	bge	r2,zero,806e90 <___vfprintf_internal_r+0x12d4>
  806eb4:	d8014515 	stw	zero,1300(sp)
  806eb8:	d8014615 	stw	zero,1304(sp)
  806ebc:	003de106 	br	806644 <___vfprintf_internal_r+0xa88>
  806ec0:	20c03fcc 	andi	r3,r4,255
  806ec4:	00800044 	movi	r2,1
  806ec8:	18802d26 	beq	r3,r2,806f80 <___vfprintf_internal_r+0x13c4>
  806ecc:	18800e36 	bltu	r3,r2,806f08 <___vfprintf_internal_r+0x134c>
  806ed0:	00800084 	movi	r2,2
  806ed4:	1880fa26 	beq	r3,r2,8072c0 <___vfprintf_internal_r+0x1704>
  806ed8:	01002074 	movhi	r4,129
  806edc:	21148e04 	addi	r4,r4,21048
  806ee0:	08057640 	call	805764 <strlen>
  806ee4:	100f883a 	mov	r7,r2
  806ee8:	dcc14515 	stw	r19,1300(sp)
  806eec:	9880010e 	bge	r19,r2,806ef4 <___vfprintf_internal_r+0x1338>
  806ef0:	d8814515 	stw	r2,1300(sp)
  806ef4:	00802074 	movhi	r2,129
  806ef8:	10948e04 	addi	r2,r2,21048
  806efc:	dcc14615 	stw	r19,1304(sp)
  806f00:	d8814115 	stw	r2,1284(sp)
  806f04:	003dcf06 	br	806644 <___vfprintf_internal_r+0xa88>
  806f08:	d9401904 	addi	r5,sp,100
  806f0c:	dd000f04 	addi	r20,sp,60
  806f10:	d9414115 	stw	r5,1284(sp)
  806f14:	880a977a 	slli	r5,r17,29
  806f18:	d9814117 	ldw	r6,1284(sp)
  806f1c:	8004d0fa 	srli	r2,r16,3
  806f20:	8806d0fa 	srli	r3,r17,3
  806f24:	810001cc 	andi	r4,r16,7
  806f28:	2884b03a 	or	r2,r5,r2
  806f2c:	31bfffc4 	addi	r6,r6,-1
  806f30:	21000c04 	addi	r4,r4,48
  806f34:	d9814115 	stw	r6,1284(sp)
  806f38:	10cab03a 	or	r5,r2,r3
  806f3c:	31000005 	stb	r4,0(r6)
  806f40:	1021883a 	mov	r16,r2
  806f44:	1823883a 	mov	r17,r3
  806f48:	283ff21e 	bne	r5,zero,806f14 <___vfprintf_internal_r+0x1358>
  806f4c:	d8c14c17 	ldw	r3,1328(sp)
  806f50:	1880004c 	andi	r2,r3,1
  806f54:	1005003a 	cmpeq	r2,r2,zero
  806f58:	103db31e 	bne	r2,zero,806628 <___vfprintf_internal_r+0xa6c>
  806f5c:	20803fcc 	andi	r2,r4,255
  806f60:	1080201c 	xori	r2,r2,128
  806f64:	10bfe004 	addi	r2,r2,-128
  806f68:	00c00c04 	movi	r3,48
  806f6c:	10fdae26 	beq	r2,r3,806628 <___vfprintf_internal_r+0xa6c>
  806f70:	31bfffc4 	addi	r6,r6,-1
  806f74:	d9814115 	stw	r6,1284(sp)
  806f78:	30c00005 	stb	r3,0(r6)
  806f7c:	003daa06 	br	806628 <___vfprintf_internal_r+0xa6c>
  806f80:	88800068 	cmpgeui	r2,r17,1
  806f84:	10002c1e 	bne	r2,zero,807038 <___vfprintf_internal_r+0x147c>
  806f88:	8800021e 	bne	r17,zero,806f94 <___vfprintf_internal_r+0x13d8>
  806f8c:	00800244 	movi	r2,9
  806f90:	14002936 	bltu	r2,r16,807038 <___vfprintf_internal_r+0x147c>
  806f94:	d90018c4 	addi	r4,sp,99
  806f98:	dd000f04 	addi	r20,sp,60
  806f9c:	d9014115 	stw	r4,1284(sp)
  806fa0:	d9014117 	ldw	r4,1284(sp)
  806fa4:	80800c04 	addi	r2,r16,48
  806fa8:	20800005 	stb	r2,0(r4)
  806fac:	003d9e06 	br	806628 <___vfprintf_internal_r+0xa6c>
  806fb0:	dc400d17 	ldw	r17,52(sp)
  806fb4:	07002074 	movhi	fp,129
  806fb8:	e7149584 	addi	fp,fp,21078
  806fbc:	9425883a 	add	r18,r18,r16
  806fc0:	8c400044 	addi	r17,r17,1
  806fc4:	008001c4 	movi	r2,7
  806fc8:	1f000015 	stw	fp,0(r3)
  806fcc:	1c000115 	stw	r16,4(r3)
  806fd0:	dc800e15 	stw	r18,56(sp)
  806fd4:	dc400d15 	stw	r17,52(sp)
  806fd8:	147ddc16 	blt	r2,r17,80674c <___vfprintf_internal_r+0xb90>
  806fdc:	18c00204 	addi	r3,r3,8
  806fe0:	003c7406 	br	8061b4 <___vfprintf_internal_r+0x5f8>
  806fe4:	01000084 	movi	r4,2
  806fe8:	d8000405 	stb	zero,16(sp)
  806fec:	003d8106 	br	8065f4 <___vfprintf_internal_r+0xa38>
  806ff0:	d9814c17 	ldw	r6,1328(sp)
  806ff4:	30c4703a 	and	r2,r6,r3
  806ff8:	1005003a 	cmpeq	r2,r2,zero
  806ffc:	103cb326 	beq	r2,zero,8062cc <___vfprintf_internal_r+0x710>
  807000:	d9014117 	ldw	r4,1284(sp)
  807004:	94800044 	addi	r18,r18,1
  807008:	8c400044 	addi	r17,r17,1
  80700c:	008001c4 	movi	r2,7
  807010:	a9000015 	stw	r4,0(r21)
  807014:	a8c00115 	stw	r3,4(r21)
  807018:	dc800e15 	stw	r18,56(sp)
  80701c:	dc400d15 	stw	r17,52(sp)
  807020:	147e6016 	blt	r2,r17,8069a4 <___vfprintf_internal_r+0xde8>
  807024:	acc00204 	addi	r19,r21,8
  807028:	003cd106 	br	806370 <___vfprintf_internal_r+0x7b4>
  80702c:	07002074 	movhi	fp,129
  807030:	e7149584 	addi	fp,fp,21078
  807034:	003c4906 	br	80615c <___vfprintf_internal_r+0x5a0>
  807038:	dd000f04 	addi	r20,sp,60
  80703c:	dc801904 	addi	r18,sp,100
  807040:	8009883a 	mov	r4,r16
  807044:	880b883a 	mov	r5,r17
  807048:	01800284 	movi	r6,10
  80704c:	000f883a 	mov	r7,zero
  807050:	08106e40 	call	8106e4 <__umoddi3>
  807054:	12000c04 	addi	r8,r2,48
  807058:	94bfffc4 	addi	r18,r18,-1
  80705c:	8009883a 	mov	r4,r16
  807060:	880b883a 	mov	r5,r17
  807064:	01800284 	movi	r6,10
  807068:	000f883a 	mov	r7,zero
  80706c:	92000005 	stb	r8,0(r18)
  807070:	08100780 	call	810078 <__udivdi3>
  807074:	1009883a 	mov	r4,r2
  807078:	1021883a 	mov	r16,r2
  80707c:	18800068 	cmpgeui	r2,r3,1
  807080:	1823883a 	mov	r17,r3
  807084:	103fee1e 	bne	r2,zero,807040 <___vfprintf_internal_r+0x1484>
  807088:	1800021e 	bne	r3,zero,807094 <___vfprintf_internal_r+0x14d8>
  80708c:	00800244 	movi	r2,9
  807090:	113feb36 	bltu	r2,r4,807040 <___vfprintf_internal_r+0x1484>
  807094:	94bfffc4 	addi	r18,r18,-1
  807098:	dc814115 	stw	r18,1284(sp)
  80709c:	003fc006 	br	806fa0 <___vfprintf_internal_r+0x13e4>
  8070a0:	d9014c17 	ldw	r4,1328(sp)
  8070a4:	2080004c 	andi	r2,r4,1
  8070a8:	10009a1e 	bne	r2,zero,807314 <___vfprintf_internal_r+0x1758>
  8070ac:	d9401904 	addi	r5,sp,100
  8070b0:	dd000f04 	addi	r20,sp,60
  8070b4:	d9414115 	stw	r5,1284(sp)
  8070b8:	003d5b06 	br	806628 <___vfprintf_internal_r+0xa6c>
  8070bc:	d9014f17 	ldw	r4,1340(sp)
  8070c0:	b00b883a 	mov	r5,r22
  8070c4:	d9800c04 	addi	r6,sp,48
  8070c8:	0805b640 	call	805b64 <__sprint_r>
  8070cc:	103c731e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8070d0:	dc800e17 	ldw	r18,56(sp)
  8070d4:	d8c01904 	addi	r3,sp,100
  8070d8:	003cf906 	br	8064c0 <___vfprintf_internal_r+0x904>
  8070dc:	d8c14c17 	ldw	r3,1328(sp)
  8070e0:	1880040c 	andi	r2,r3,16
  8070e4:	1000711e 	bne	r2,zero,8072ac <___vfprintf_internal_r+0x16f0>
  8070e8:	d9014c17 	ldw	r4,1328(sp)
  8070ec:	2080100c 	andi	r2,r4,64
  8070f0:	10006e26 	beq	r2,zero,8072ac <___vfprintf_internal_r+0x16f0>
  8070f4:	3c00000b 	ldhu	r16,0(r7)
  8070f8:	0023883a 	mov	r17,zero
  8070fc:	39c00104 	addi	r7,r7,4
  807100:	d9c14015 	stw	r7,1280(sp)
  807104:	003efa06 	br	806cf0 <___vfprintf_internal_r+0x1134>
  807108:	dc400d17 	ldw	r17,52(sp)
  80710c:	07002074 	movhi	fp,129
  807110:	e7149584 	addi	fp,fp,21078
  807114:	9425883a 	add	r18,r18,r16
  807118:	8c400044 	addi	r17,r17,1
  80711c:	008001c4 	movi	r2,7
  807120:	1f000015 	stw	fp,0(r3)
  807124:	1c000115 	stw	r16,4(r3)
  807128:	dc800e15 	stw	r18,56(sp)
  80712c:	dc400d15 	stw	r17,52(sp)
  807130:	147d7016 	blt	r2,r17,8066f4 <___vfprintf_internal_r+0xb38>
  807134:	18c00204 	addi	r3,r3,8
  807138:	003d7506 	br	806710 <___vfprintf_internal_r+0xb54>
  80713c:	dc800e17 	ldw	r18,56(sp)
  807140:	dc400d17 	ldw	r17,52(sp)
  807144:	07002074 	movhi	fp,129
  807148:	e7149984 	addi	fp,fp,21094
  80714c:	003bba06 	br	806038 <___vfprintf_internal_r+0x47c>
  807150:	d9014f17 	ldw	r4,1340(sp)
  807154:	b00b883a 	mov	r5,r22
  807158:	d9800c04 	addi	r6,sp,48
  80715c:	0805b640 	call	805b64 <__sprint_r>
  807160:	103c4e1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807164:	dc800e17 	ldw	r18,56(sp)
  807168:	d8c01904 	addi	r3,sp,100
  80716c:	003ce306 	br	8064fc <___vfprintf_internal_r+0x940>
  807170:	3c000017 	ldw	r16,0(r7)
  807174:	0009883a 	mov	r4,zero
  807178:	39c00104 	addi	r7,r7,4
  80717c:	0023883a 	mov	r17,zero
  807180:	d9c14015 	stw	r7,1280(sp)
  807184:	d8000405 	stb	zero,16(sp)
  807188:	003d1a06 	br	8065f4 <___vfprintf_internal_r+0xa38>
  80718c:	38800017 	ldw	r2,0(r7)
  807190:	39c00104 	addi	r7,r7,4
  807194:	d9c14015 	stw	r7,1280(sp)
  807198:	1023d7fa 	srai	r17,r2,31
  80719c:	1021883a 	mov	r16,r2
  8071a0:	003d1206 	br	8065ec <___vfprintf_internal_r+0xa30>
  8071a4:	3c000017 	ldw	r16,0(r7)
  8071a8:	01000044 	movi	r4,1
  8071ac:	39c00104 	addi	r7,r7,4
  8071b0:	0023883a 	mov	r17,zero
  8071b4:	d9c14015 	stw	r7,1280(sp)
  8071b8:	d8000405 	stb	zero,16(sp)
  8071bc:	003d0d06 	br	8065f4 <___vfprintf_internal_r+0xa38>
  8071c0:	00802074 	movhi	r2,129
  8071c4:	10949504 	addi	r2,r2,21076
  8071c8:	94800044 	addi	r18,r18,1
  8071cc:	8c400044 	addi	r17,r17,1
  8071d0:	a8800015 	stw	r2,0(r21)
  8071d4:	00c00044 	movi	r3,1
  8071d8:	008001c4 	movi	r2,7
  8071dc:	a8c00115 	stw	r3,4(r21)
  8071e0:	dc800e15 	stw	r18,56(sp)
  8071e4:	dc400d15 	stw	r17,52(sp)
  8071e8:	1440ca16 	blt	r2,r17,807514 <___vfprintf_internal_r+0x1958>
  8071ec:	a8c00204 	addi	r3,r21,8
  8071f0:	2000061e 	bne	r4,zero,80720c <___vfprintf_internal_r+0x1650>
  8071f4:	d9414717 	ldw	r5,1308(sp)
  8071f8:	2800041e 	bne	r5,zero,80720c <___vfprintf_internal_r+0x1650>
  8071fc:	d9814c17 	ldw	r6,1328(sp)
  807200:	3080004c 	andi	r2,r6,1
  807204:	1005003a 	cmpeq	r2,r2,zero
  807208:	103bea1e 	bne	r2,zero,8061b4 <___vfprintf_internal_r+0x5f8>
  80720c:	00800044 	movi	r2,1
  807210:	dc400d17 	ldw	r17,52(sp)
  807214:	18800115 	stw	r2,4(r3)
  807218:	d8814917 	ldw	r2,1316(sp)
  80721c:	94800044 	addi	r18,r18,1
  807220:	8c400044 	addi	r17,r17,1
  807224:	18800015 	stw	r2,0(r3)
  807228:	008001c4 	movi	r2,7
  80722c:	dc800e15 	stw	r18,56(sp)
  807230:	dc400d15 	stw	r17,52(sp)
  807234:	1440ca16 	blt	r2,r17,807560 <___vfprintf_internal_r+0x19a4>
  807238:	18c00204 	addi	r3,r3,8
  80723c:	0121c83a 	sub	r16,zero,r4
  807240:	0400500e 	bge	zero,r16,807384 <___vfprintf_internal_r+0x17c8>
  807244:	00800404 	movi	r2,16
  807248:	1400800e 	bge	r2,r16,80744c <___vfprintf_internal_r+0x1890>
  80724c:	1027883a 	mov	r19,r2
  807250:	07002074 	movhi	fp,129
  807254:	e7149584 	addi	fp,fp,21078
  807258:	050001c4 	movi	r20,7
  80725c:	00000306 	br	80726c <___vfprintf_internal_r+0x16b0>
  807260:	18c00204 	addi	r3,r3,8
  807264:	843ffc04 	addi	r16,r16,-16
  807268:	9c007a0e 	bge	r19,r16,807454 <___vfprintf_internal_r+0x1898>
  80726c:	94800404 	addi	r18,r18,16
  807270:	8c400044 	addi	r17,r17,1
  807274:	1f000015 	stw	fp,0(r3)
  807278:	1cc00115 	stw	r19,4(r3)
  80727c:	dc800e15 	stw	r18,56(sp)
  807280:	dc400d15 	stw	r17,52(sp)
  807284:	a47ff60e 	bge	r20,r17,807260 <___vfprintf_internal_r+0x16a4>
  807288:	d9014f17 	ldw	r4,1340(sp)
  80728c:	b00b883a 	mov	r5,r22
  807290:	d9800c04 	addi	r6,sp,48
  807294:	0805b640 	call	805b64 <__sprint_r>
  807298:	103c001e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  80729c:	dc800e17 	ldw	r18,56(sp)
  8072a0:	dc400d17 	ldw	r17,52(sp)
  8072a4:	d8c01904 	addi	r3,sp,100
  8072a8:	003fee06 	br	807264 <___vfprintf_internal_r+0x16a8>
  8072ac:	3c000017 	ldw	r16,0(r7)
  8072b0:	0023883a 	mov	r17,zero
  8072b4:	39c00104 	addi	r7,r7,4
  8072b8:	d9c14015 	stw	r7,1280(sp)
  8072bc:	003e8c06 	br	806cf0 <___vfprintf_internal_r+0x1134>
  8072c0:	d9401904 	addi	r5,sp,100
  8072c4:	dd000f04 	addi	r20,sp,60
  8072c8:	d9414115 	stw	r5,1284(sp)
  8072cc:	d9814417 	ldw	r6,1296(sp)
  8072d0:	880a973a 	slli	r5,r17,28
  8072d4:	8004d13a 	srli	r2,r16,4
  8072d8:	810003cc 	andi	r4,r16,15
  8072dc:	3109883a 	add	r4,r6,r4
  8072e0:	2884b03a 	or	r2,r5,r2
  8072e4:	21400003 	ldbu	r5,0(r4)
  8072e8:	d9014117 	ldw	r4,1284(sp)
  8072ec:	8806d13a 	srli	r3,r17,4
  8072f0:	1021883a 	mov	r16,r2
  8072f4:	213fffc4 	addi	r4,r4,-1
  8072f8:	d9014115 	stw	r4,1284(sp)
  8072fc:	d9814117 	ldw	r6,1284(sp)
  807300:	10c8b03a 	or	r4,r2,r3
  807304:	1823883a 	mov	r17,r3
  807308:	31400005 	stb	r5,0(r6)
  80730c:	203fef1e 	bne	r4,zero,8072cc <___vfprintf_internal_r+0x1710>
  807310:	003cc506 	br	806628 <___vfprintf_internal_r+0xa6c>
  807314:	00800c04 	movi	r2,48
  807318:	d98018c4 	addi	r6,sp,99
  80731c:	dd000f04 	addi	r20,sp,60
  807320:	d88018c5 	stb	r2,99(sp)
  807324:	d9814115 	stw	r6,1284(sp)
  807328:	003cbf06 	br	806628 <___vfprintf_internal_r+0xa6c>
  80732c:	dc400d17 	ldw	r17,52(sp)
  807330:	07002074 	movhi	fp,129
  807334:	e7149984 	addi	fp,fp,21094
  807338:	003bc106 	br	806240 <___vfprintf_internal_r+0x684>
  80733c:	d9414c17 	ldw	r5,1328(sp)
  807340:	2880040c 	andi	r2,r5,16
  807344:	10007c26 	beq	r2,zero,807538 <___vfprintf_internal_r+0x197c>
  807348:	38800017 	ldw	r2,0(r7)
  80734c:	39c00104 	addi	r7,r7,4
  807350:	d9c14015 	stw	r7,1280(sp)
  807354:	d9814b17 	ldw	r6,1324(sp)
  807358:	d9c14017 	ldw	r7,1280(sp)
  80735c:	11800015 	stw	r6,0(r2)
  807360:	003a7206 	br	805d2c <___vfprintf_internal_r+0x170>
  807364:	d9014f17 	ldw	r4,1340(sp)
  807368:	b00b883a 	mov	r5,r22
  80736c:	d9800c04 	addi	r6,sp,48
  807370:	0805b640 	call	805b64 <__sprint_r>
  807374:	103bc91e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807378:	dc800e17 	ldw	r18,56(sp)
  80737c:	dc400d17 	ldw	r17,52(sp)
  807380:	d8c01904 	addi	r3,sp,100
  807384:	d9014717 	ldw	r4,1308(sp)
  807388:	d9414117 	ldw	r5,1284(sp)
  80738c:	8c400044 	addi	r17,r17,1
  807390:	9125883a 	add	r18,r18,r4
  807394:	008001c4 	movi	r2,7
  807398:	19400015 	stw	r5,0(r3)
  80739c:	19000115 	stw	r4,4(r3)
  8073a0:	dc800e15 	stw	r18,56(sp)
  8073a4:	dc400d15 	stw	r17,52(sp)
  8073a8:	147ce816 	blt	r2,r17,80674c <___vfprintf_internal_r+0xb90>
  8073ac:	18c00204 	addi	r3,r3,8
  8073b0:	003b8006 	br	8061b4 <___vfprintf_internal_r+0x5f8>
  8073b4:	38c00017 	ldw	r3,0(r7)
  8073b8:	39000204 	addi	r4,r7,8
  8073bc:	d9014015 	stw	r4,1280(sp)
  8073c0:	d8c14215 	stw	r3,1288(sp)
  8073c4:	39c00117 	ldw	r7,4(r7)
  8073c8:	d9c14315 	stw	r7,1292(sp)
  8073cc:	003e1a06 	br	806c38 <___vfprintf_internal_r+0x107c>
  8073d0:	0005883a 	mov	r2,zero
  8073d4:	1409c83a 	sub	r4,r2,r16
  8073d8:	1105803a 	cmpltu	r2,r2,r4
  8073dc:	044bc83a 	sub	r5,zero,r17
  8073e0:	2885c83a 	sub	r2,r5,r2
  8073e4:	2021883a 	mov	r16,r4
  8073e8:	1023883a 	mov	r17,r2
  8073ec:	01000044 	movi	r4,1
  8073f0:	00800b44 	movi	r2,45
  8073f4:	d8800405 	stb	r2,16(sp)
  8073f8:	003c7e06 	br	8065f4 <___vfprintf_internal_r+0xa38>
  8073fc:	d9014f17 	ldw	r4,1340(sp)
  807400:	b00b883a 	mov	r5,r22
  807404:	d9800c04 	addi	r6,sp,48
  807408:	0805b640 	call	805b64 <__sprint_r>
  80740c:	103ba31e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807410:	dc800e17 	ldw	r18,56(sp)
  807414:	dc400d17 	ldw	r17,52(sp)
  807418:	d9000517 	ldw	r4,20(sp)
  80741c:	d9401904 	addi	r5,sp,100
  807420:	003da106 	br	806aa8 <___vfprintf_internal_r+0xeec>
  807424:	d9014f17 	ldw	r4,1340(sp)
  807428:	b00b883a 	mov	r5,r22
  80742c:	d9800c04 	addi	r6,sp,48
  807430:	0805b640 	call	805b64 <__sprint_r>
  807434:	103b991e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807438:	dc800e17 	ldw	r18,56(sp)
  80743c:	dc400d17 	ldw	r17,52(sp)
  807440:	d9000517 	ldw	r4,20(sp)
  807444:	d8c01904 	addi	r3,sp,100
  807448:	003d8b06 	br	806a78 <___vfprintf_internal_r+0xebc>
  80744c:	07002074 	movhi	fp,129
  807450:	e7149584 	addi	fp,fp,21078
  807454:	9425883a 	add	r18,r18,r16
  807458:	8c400044 	addi	r17,r17,1
  80745c:	008001c4 	movi	r2,7
  807460:	1f000015 	stw	fp,0(r3)
  807464:	1c000115 	stw	r16,4(r3)
  807468:	dc800e15 	stw	r18,56(sp)
  80746c:	dc400d15 	stw	r17,52(sp)
  807470:	147fbc16 	blt	r2,r17,807364 <___vfprintf_internal_r+0x17a8>
  807474:	18c00204 	addi	r3,r3,8
  807478:	003fc206 	br	807384 <___vfprintf_internal_r+0x17c8>
  80747c:	d9014f17 	ldw	r4,1340(sp)
  807480:	b00b883a 	mov	r5,r22
  807484:	d9800c04 	addi	r6,sp,48
  807488:	0805b640 	call	805b64 <__sprint_r>
  80748c:	103b831e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807490:	dc800e17 	ldw	r18,56(sp)
  807494:	d9000517 	ldw	r4,20(sp)
  807498:	d8c01904 	addi	r3,sp,100
  80749c:	003cfc06 	br	806890 <___vfprintf_internal_r+0xcd4>
  8074a0:	07002074 	movhi	fp,129
  8074a4:	e7149584 	addi	fp,fp,21078
  8074a8:	003bde06 	br	806424 <___vfprintf_internal_r+0x868>
  8074ac:	00802074 	movhi	r2,129
  8074b0:	10948404 	addi	r2,r2,21008
  8074b4:	d8814115 	stw	r2,1284(sp)
  8074b8:	003def06 	br	806c78 <___vfprintf_internal_r+0x10bc>
  8074bc:	d9014217 	ldw	r4,1288(sp)
  8074c0:	d9414317 	ldw	r5,1292(sp)
  8074c4:	080ce280 	call	80ce28 <__isnand>
  8074c8:	10003926 	beq	r2,zero,8075b0 <___vfprintf_internal_r+0x19f4>
  8074cc:	d9414d17 	ldw	r5,1332(sp)
  8074d0:	008011c4 	movi	r2,71
  8074d4:	1140ce16 	blt	r2,r5,807810 <___vfprintf_internal_r+0x1c54>
  8074d8:	01802074 	movhi	r6,129
  8074dc:	31948504 	addi	r6,r6,21012
  8074e0:	d9814115 	stw	r6,1284(sp)
  8074e4:	003de406 	br	806c78 <___vfprintf_internal_r+0x10bc>
  8074e8:	d9014c17 	ldw	r4,1328(sp)
  8074ec:	bdc00044 	addi	r23,r23,1
  8074f0:	b8c00007 	ldb	r3,0(r23)
  8074f4:	21000814 	ori	r4,r4,32
  8074f8:	d9014c15 	stw	r4,1328(sp)
  8074fc:	003a2e06 	br	805db8 <___vfprintf_internal_r+0x1fc>
  807500:	dcc14515 	stw	r19,1300(sp)
  807504:	98011016 	blt	r19,zero,807948 <___vfprintf_internal_r+0x1d8c>
  807508:	980f883a 	mov	r7,r19
  80750c:	d8014615 	stw	zero,1304(sp)
  807510:	003c4c06 	br	806644 <___vfprintf_internal_r+0xa88>
  807514:	d9014f17 	ldw	r4,1340(sp)
  807518:	b00b883a 	mov	r5,r22
  80751c:	d9800c04 	addi	r6,sp,48
  807520:	0805b640 	call	805b64 <__sprint_r>
  807524:	103b5d1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807528:	dc800e17 	ldw	r18,56(sp)
  80752c:	d9000517 	ldw	r4,20(sp)
  807530:	d8c01904 	addi	r3,sp,100
  807534:	003f2e06 	br	8071f0 <___vfprintf_internal_r+0x1634>
  807538:	d8c14c17 	ldw	r3,1328(sp)
  80753c:	1880100c 	andi	r2,r3,64
  807540:	1000a026 	beq	r2,zero,8077c4 <___vfprintf_internal_r+0x1c08>
  807544:	38800017 	ldw	r2,0(r7)
  807548:	39c00104 	addi	r7,r7,4
  80754c:	d9c14015 	stw	r7,1280(sp)
  807550:	d9014b17 	ldw	r4,1324(sp)
  807554:	d9c14017 	ldw	r7,1280(sp)
  807558:	1100000d 	sth	r4,0(r2)
  80755c:	0039f306 	br	805d2c <___vfprintf_internal_r+0x170>
  807560:	d9014f17 	ldw	r4,1340(sp)
  807564:	b00b883a 	mov	r5,r22
  807568:	d9800c04 	addi	r6,sp,48
  80756c:	0805b640 	call	805b64 <__sprint_r>
  807570:	103b4a1e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  807574:	dc800e17 	ldw	r18,56(sp)
  807578:	dc400d17 	ldw	r17,52(sp)
  80757c:	d9000517 	ldw	r4,20(sp)
  807580:	d8c01904 	addi	r3,sp,100
  807584:	003f2d06 	br	80723c <___vfprintf_internal_r+0x1680>
  807588:	00800184 	movi	r2,6
  80758c:	14c09a36 	bltu	r2,r19,8077f8 <___vfprintf_internal_r+0x1c3c>
  807590:	dcc14515 	stw	r19,1300(sp)
  807594:	9800010e 	bge	r19,zero,80759c <___vfprintf_internal_r+0x19e0>
  807598:	d8014515 	stw	zero,1300(sp)
  80759c:	00802074 	movhi	r2,129
  8075a0:	10948704 	addi	r2,r2,21020
  8075a4:	980f883a 	mov	r7,r19
  8075a8:	d8814115 	stw	r2,1284(sp)
  8075ac:	003a7206 	br	805f78 <___vfprintf_internal_r+0x3bc>
  8075b0:	00bfffc4 	movi	r2,-1
  8075b4:	9880e226 	beq	r19,r2,807940 <___vfprintf_internal_r+0x1d84>
  8075b8:	d9414d17 	ldw	r5,1332(sp)
  8075bc:	008019c4 	movi	r2,103
  8075c0:	2880dc26 	beq	r5,r2,807934 <___vfprintf_internal_r+0x1d78>
  8075c4:	008011c4 	movi	r2,71
  8075c8:	2880da26 	beq	r5,r2,807934 <___vfprintf_internal_r+0x1d78>
  8075cc:	d9414c17 	ldw	r5,1328(sp)
  8075d0:	d9014317 	ldw	r4,1292(sp)
  8075d4:	d9814217 	ldw	r6,1288(sp)
  8075d8:	29404014 	ori	r5,r5,256
  8075dc:	d9414c15 	stw	r5,1328(sp)
  8075e0:	2000cc16 	blt	r4,zero,807914 <___vfprintf_internal_r+0x1d58>
  8075e4:	3021883a 	mov	r16,r6
  8075e8:	2023883a 	mov	r17,r4
  8075ec:	0039883a 	mov	fp,zero
  8075f0:	d9414d17 	ldw	r5,1332(sp)
  8075f4:	00801984 	movi	r2,102
  8075f8:	2880b726 	beq	r5,r2,8078d8 <___vfprintf_internal_r+0x1d1c>
  8075fc:	00801184 	movi	r2,70
  807600:	2880b526 	beq	r5,r2,8078d8 <___vfprintf_internal_r+0x1d1c>
  807604:	00801944 	movi	r2,101
  807608:	2880c826 	beq	r5,r2,80792c <___vfprintf_internal_r+0x1d70>
  80760c:	00801144 	movi	r2,69
  807610:	2880c626 	beq	r5,r2,80792c <___vfprintf_internal_r+0x1d70>
  807614:	9829883a 	mov	r20,r19
  807618:	d9014f17 	ldw	r4,1340(sp)
  80761c:	d8800504 	addi	r2,sp,20
  807620:	880d883a 	mov	r6,r17
  807624:	d8800115 	stw	r2,4(sp)
  807628:	d8c00604 	addi	r3,sp,24
  80762c:	d8800704 	addi	r2,sp,28
  807630:	800b883a 	mov	r5,r16
  807634:	01c00084 	movi	r7,2
  807638:	d8c00215 	stw	r3,8(sp)
  80763c:	d8800315 	stw	r2,12(sp)
  807640:	dd000015 	stw	r20,0(sp)
  807644:	08098480 	call	809848 <_dtoa_r>
  807648:	d9814d17 	ldw	r6,1332(sp)
  80764c:	d8814115 	stw	r2,1284(sp)
  807650:	008019c4 	movi	r2,103
  807654:	30809526 	beq	r6,r2,8078ac <___vfprintf_internal_r+0x1cf0>
  807658:	d8c14d17 	ldw	r3,1332(sp)
  80765c:	008011c4 	movi	r2,71
  807660:	18809226 	beq	r3,r2,8078ac <___vfprintf_internal_r+0x1cf0>
  807664:	d9414117 	ldw	r5,1284(sp)
  807668:	d9814d17 	ldw	r6,1332(sp)
  80766c:	00801984 	movi	r2,102
  807670:	2d25883a 	add	r18,r5,r20
  807674:	30808626 	beq	r6,r2,807890 <___vfprintf_internal_r+0x1cd4>
  807678:	00801184 	movi	r2,70
  80767c:	30808426 	beq	r6,r2,807890 <___vfprintf_internal_r+0x1cd4>
  807680:	000d883a 	mov	r6,zero
  807684:	000f883a 	mov	r7,zero
  807688:	880b883a 	mov	r5,r17
  80768c:	8009883a 	mov	r4,r16
  807690:	08112700 	call	811270 <__eqdf2>
  807694:	1000751e 	bne	r2,zero,80786c <___vfprintf_internal_r+0x1cb0>
  807698:	9005883a 	mov	r2,r18
  80769c:	dc800715 	stw	r18,28(sp)
  8076a0:	d9014117 	ldw	r4,1284(sp)
  8076a4:	d9414d17 	ldw	r5,1332(sp)
  8076a8:	00c019c4 	movi	r3,103
  8076ac:	1125c83a 	sub	r18,r2,r4
  8076b0:	28c06826 	beq	r5,r3,807854 <___vfprintf_internal_r+0x1c98>
  8076b4:	008011c4 	movi	r2,71
  8076b8:	28806626 	beq	r5,r2,807854 <___vfprintf_internal_r+0x1c98>
  8076bc:	d9000517 	ldw	r4,20(sp)
  8076c0:	d8c14d17 	ldw	r3,1332(sp)
  8076c4:	00801944 	movi	r2,101
  8076c8:	10c05516 	blt	r2,r3,807820 <___vfprintf_internal_r+0x1c64>
  8076cc:	213fffc4 	addi	r4,r4,-1
  8076d0:	d9000515 	stw	r4,20(sp)
  8076d4:	d8c00805 	stb	r3,32(sp)
  8076d8:	2021883a 	mov	r16,r4
  8076dc:	2000c116 	blt	r4,zero,8079e4 <___vfprintf_internal_r+0x1e28>
  8076e0:	00800ac4 	movi	r2,43
  8076e4:	d8800845 	stb	r2,33(sp)
  8076e8:	00800244 	movi	r2,9
  8076ec:	1400af0e 	bge	r2,r16,8079ac <___vfprintf_internal_r+0x1df0>
  8076f0:	1027883a 	mov	r19,r2
  8076f4:	dc400b84 	addi	r17,sp,46
  8076f8:	8009883a 	mov	r4,r16
  8076fc:	01400284 	movi	r5,10
  807700:	08118c00 	call	8118c0 <__modsi3>
  807704:	10800c04 	addi	r2,r2,48
  807708:	8c7fffc4 	addi	r17,r17,-1
  80770c:	8009883a 	mov	r4,r16
  807710:	01400284 	movi	r5,10
  807714:	88800005 	stb	r2,0(r17)
  807718:	08118600 	call	811860 <__divsi3>
  80771c:	1021883a 	mov	r16,r2
  807720:	98bff516 	blt	r19,r2,8076f8 <___vfprintf_internal_r+0x1b3c>
  807724:	10c00c04 	addi	r3,r2,48
  807728:	d88009c4 	addi	r2,sp,39
  80772c:	108001c4 	addi	r2,r2,7
  807730:	897fffc4 	addi	r5,r17,-1
  807734:	88ffffc5 	stb	r3,-1(r17)
  807738:	2880a72e 	bgeu	r5,r2,8079d8 <___vfprintf_internal_r+0x1e1c>
  80773c:	1009883a 	mov	r4,r2
  807740:	d9800804 	addi	r6,sp,32
  807744:	d8c00884 	addi	r3,sp,34
  807748:	28800003 	ldbu	r2,0(r5)
  80774c:	29400044 	addi	r5,r5,1
  807750:	18800005 	stb	r2,0(r3)
  807754:	18c00044 	addi	r3,r3,1
  807758:	293ffb36 	bltu	r5,r4,807748 <___vfprintf_internal_r+0x1b8c>
  80775c:	1987c83a 	sub	r3,r3,r6
  807760:	00800044 	movi	r2,1
  807764:	d8c14815 	stw	r3,1312(sp)
  807768:	90cf883a 	add	r7,r18,r3
  80776c:	1480960e 	bge	r2,r18,8079c8 <___vfprintf_internal_r+0x1e0c>
  807770:	39c00044 	addi	r7,r7,1
  807774:	d9c14515 	stw	r7,1300(sp)
  807778:	38003416 	blt	r7,zero,80784c <___vfprintf_internal_r+0x1c90>
  80777c:	e0803fcc 	andi	r2,fp,255
  807780:	1080201c 	xori	r2,r2,128
  807784:	10bfe004 	addi	r2,r2,-128
  807788:	10004e26 	beq	r2,zero,8078c4 <___vfprintf_internal_r+0x1d08>
  80778c:	00800b44 	movi	r2,45
  807790:	dc814715 	stw	r18,1308(sp)
  807794:	d8014615 	stw	zero,1304(sp)
  807798:	d8800405 	stb	r2,16(sp)
  80779c:	003bab06 	br	80664c <___vfprintf_internal_r+0xa90>
  8077a0:	00800b44 	movi	r2,45
  8077a4:	d8800405 	stb	r2,16(sp)
  8077a8:	003d2d06 	br	806c60 <___vfprintf_internal_r+0x10a4>
  8077ac:	d9014f17 	ldw	r4,1340(sp)
  8077b0:	b00b883a 	mov	r5,r22
  8077b4:	d9800c04 	addi	r6,sp,48
  8077b8:	0805b640 	call	805b64 <__sprint_r>
  8077bc:	103ab71e 	bne	r2,zero,80629c <___vfprintf_internal_r+0x6e0>
  8077c0:	003ab506 	br	806298 <___vfprintf_internal_r+0x6dc>
  8077c4:	38800017 	ldw	r2,0(r7)
  8077c8:	39c00104 	addi	r7,r7,4
  8077cc:	d9c14015 	stw	r7,1280(sp)
  8077d0:	d9414b17 	ldw	r5,1324(sp)
  8077d4:	d9c14017 	ldw	r7,1280(sp)
  8077d8:	11400015 	stw	r5,0(r2)
  8077dc:	00395306 	br	805d2c <___vfprintf_internal_r+0x170>
  8077e0:	980f883a 	mov	r7,r19
  8077e4:	dcc14515 	stw	r19,1300(sp)
  8077e8:	d8014615 	stw	zero,1304(sp)
  8077ec:	003b9506 	br	806644 <___vfprintf_internal_r+0xa88>
  8077f0:	0027883a 	mov	r19,zero
  8077f4:	00397206 	br	805dc0 <___vfprintf_internal_r+0x204>
  8077f8:	00c02074 	movhi	r3,129
  8077fc:	18d48704 	addi	r3,r3,21020
  807800:	100f883a 	mov	r7,r2
  807804:	d8814515 	stw	r2,1300(sp)
  807808:	d8c14115 	stw	r3,1284(sp)
  80780c:	0039da06 	br	805f78 <___vfprintf_internal_r+0x3bc>
  807810:	00802074 	movhi	r2,129
  807814:	10948604 	addi	r2,r2,21016
  807818:	d8814115 	stw	r2,1284(sp)
  80781c:	003d1606 	br	806c78 <___vfprintf_internal_r+0x10bc>
  807820:	d9414d17 	ldw	r5,1332(sp)
  807824:	00801984 	movi	r2,102
  807828:	28804926 	beq	r5,r2,807950 <___vfprintf_internal_r+0x1d94>
  80782c:	200f883a 	mov	r7,r4
  807830:	24805716 	blt	r4,r18,807990 <___vfprintf_internal_r+0x1dd4>
  807834:	d9414c17 	ldw	r5,1328(sp)
  807838:	2880004c 	andi	r2,r5,1
  80783c:	10000126 	beq	r2,zero,807844 <___vfprintf_internal_r+0x1c88>
  807840:	21c00044 	addi	r7,r4,1
  807844:	d9c14515 	stw	r7,1300(sp)
  807848:	383fcc0e 	bge	r7,zero,80777c <___vfprintf_internal_r+0x1bc0>
  80784c:	d8014515 	stw	zero,1300(sp)
  807850:	003fca06 	br	80777c <___vfprintf_internal_r+0x1bc0>
  807854:	d9000517 	ldw	r4,20(sp)
  807858:	00bfff04 	movi	r2,-4
  80785c:	1100480e 	bge	r2,r4,807980 <___vfprintf_internal_r+0x1dc4>
  807860:	99004716 	blt	r19,r4,807980 <___vfprintf_internal_r+0x1dc4>
  807864:	d8c14d15 	stw	r3,1332(sp)
  807868:	003ff006 	br	80782c <___vfprintf_internal_r+0x1c70>
  80786c:	d8800717 	ldw	r2,28(sp)
  807870:	14bf8b2e 	bgeu	r2,r18,8076a0 <___vfprintf_internal_r+0x1ae4>
  807874:	9007883a 	mov	r3,r18
  807878:	01000c04 	movi	r4,48
  80787c:	11000005 	stb	r4,0(r2)
  807880:	10800044 	addi	r2,r2,1
  807884:	d8800715 	stw	r2,28(sp)
  807888:	18bffc1e 	bne	r3,r2,80787c <___vfprintf_internal_r+0x1cc0>
  80788c:	003f8406 	br	8076a0 <___vfprintf_internal_r+0x1ae4>
  807890:	d8814117 	ldw	r2,1284(sp)
  807894:	10c00007 	ldb	r3,0(r2)
  807898:	00800c04 	movi	r2,48
  80789c:	18805b26 	beq	r3,r2,807a0c <___vfprintf_internal_r+0x1e50>
  8078a0:	d9000517 	ldw	r4,20(sp)
  8078a4:	9125883a 	add	r18,r18,r4
  8078a8:	003f7506 	br	807680 <___vfprintf_internal_r+0x1ac4>
  8078ac:	d9014c17 	ldw	r4,1328(sp)
  8078b0:	2080004c 	andi	r2,r4,1
  8078b4:	1005003a 	cmpeq	r2,r2,zero
  8078b8:	103f6a26 	beq	r2,zero,807664 <___vfprintf_internal_r+0x1aa8>
  8078bc:	d8800717 	ldw	r2,28(sp)
  8078c0:	003f7706 	br	8076a0 <___vfprintf_internal_r+0x1ae4>
  8078c4:	d9c14515 	stw	r7,1300(sp)
  8078c8:	38004d16 	blt	r7,zero,807a00 <___vfprintf_internal_r+0x1e44>
  8078cc:	dc814715 	stw	r18,1308(sp)
  8078d0:	d8014615 	stw	zero,1304(sp)
  8078d4:	003b5b06 	br	806644 <___vfprintf_internal_r+0xa88>
  8078d8:	d9014f17 	ldw	r4,1340(sp)
  8078dc:	d8800504 	addi	r2,sp,20
  8078e0:	d8800115 	stw	r2,4(sp)
  8078e4:	d8c00604 	addi	r3,sp,24
  8078e8:	d8800704 	addi	r2,sp,28
  8078ec:	800b883a 	mov	r5,r16
  8078f0:	880d883a 	mov	r6,r17
  8078f4:	01c000c4 	movi	r7,3
  8078f8:	d8c00215 	stw	r3,8(sp)
  8078fc:	d8800315 	stw	r2,12(sp)
  807900:	dcc00015 	stw	r19,0(sp)
  807904:	9829883a 	mov	r20,r19
  807908:	08098480 	call	809848 <_dtoa_r>
  80790c:	d8814115 	stw	r2,1284(sp)
  807910:	003f5106 	br	807658 <___vfprintf_internal_r+0x1a9c>
  807914:	d8c14217 	ldw	r3,1288(sp)
  807918:	d9014317 	ldw	r4,1292(sp)
  80791c:	07000b44 	movi	fp,45
  807920:	1821883a 	mov	r16,r3
  807924:	2460003c 	xorhi	r17,r4,32768
  807928:	003f3106 	br	8075f0 <___vfprintf_internal_r+0x1a34>
  80792c:	9d000044 	addi	r20,r19,1
  807930:	003f3906 	br	807618 <___vfprintf_internal_r+0x1a5c>
  807934:	983f251e 	bne	r19,zero,8075cc <___vfprintf_internal_r+0x1a10>
  807938:	04c00044 	movi	r19,1
  80793c:	003f2306 	br	8075cc <___vfprintf_internal_r+0x1a10>
  807940:	04c00184 	movi	r19,6
  807944:	003f2106 	br	8075cc <___vfprintf_internal_r+0x1a10>
  807948:	d8014515 	stw	zero,1300(sp)
  80794c:	003eee06 	br	807508 <___vfprintf_internal_r+0x194c>
  807950:	200f883a 	mov	r7,r4
  807954:	0100370e 	bge	zero,r4,807a34 <___vfprintf_internal_r+0x1e78>
  807958:	9800031e 	bne	r19,zero,807968 <___vfprintf_internal_r+0x1dac>
  80795c:	d9814c17 	ldw	r6,1328(sp)
  807960:	3080004c 	andi	r2,r6,1
  807964:	103fb726 	beq	r2,zero,807844 <___vfprintf_internal_r+0x1c88>
  807968:	20800044 	addi	r2,r4,1
  80796c:	98a7883a 	add	r19,r19,r2
  807970:	dcc14515 	stw	r19,1300(sp)
  807974:	980f883a 	mov	r7,r19
  807978:	983f800e 	bge	r19,zero,80777c <___vfprintf_internal_r+0x1bc0>
  80797c:	003fb306 	br	80784c <___vfprintf_internal_r+0x1c90>
  807980:	d9814d17 	ldw	r6,1332(sp)
  807984:	31bfff84 	addi	r6,r6,-2
  807988:	d9814d15 	stw	r6,1332(sp)
  80798c:	003f4c06 	br	8076c0 <___vfprintf_internal_r+0x1b04>
  807990:	0100180e 	bge	zero,r4,8079f4 <___vfprintf_internal_r+0x1e38>
  807994:	00800044 	movi	r2,1
  807998:	1485883a 	add	r2,r2,r18
  80799c:	d8814515 	stw	r2,1300(sp)
  8079a0:	100f883a 	mov	r7,r2
  8079a4:	103f750e 	bge	r2,zero,80777c <___vfprintf_internal_r+0x1bc0>
  8079a8:	003fa806 	br	80784c <___vfprintf_internal_r+0x1c90>
  8079ac:	80c00c04 	addi	r3,r16,48
  8079b0:	00800c04 	movi	r2,48
  8079b4:	d8c008c5 	stb	r3,35(sp)
  8079b8:	d9800804 	addi	r6,sp,32
  8079bc:	d8c00904 	addi	r3,sp,36
  8079c0:	d8800885 	stb	r2,34(sp)
  8079c4:	003f6506 	br	80775c <___vfprintf_internal_r+0x1ba0>
  8079c8:	d9014c17 	ldw	r4,1328(sp)
  8079cc:	2084703a 	and	r2,r4,r2
  8079d0:	103f9c26 	beq	r2,zero,807844 <___vfprintf_internal_r+0x1c88>
  8079d4:	003f6606 	br	807770 <___vfprintf_internal_r+0x1bb4>
  8079d8:	d9800804 	addi	r6,sp,32
  8079dc:	d8c00884 	addi	r3,sp,34
  8079e0:	003f5e06 	br	80775c <___vfprintf_internal_r+0x1ba0>
  8079e4:	00800b44 	movi	r2,45
  8079e8:	0121c83a 	sub	r16,zero,r4
  8079ec:	d8800845 	stb	r2,33(sp)
  8079f0:	003f3d06 	br	8076e8 <___vfprintf_internal_r+0x1b2c>
  8079f4:	00800084 	movi	r2,2
  8079f8:	1105c83a 	sub	r2,r2,r4
  8079fc:	003fe606 	br	807998 <___vfprintf_internal_r+0x1ddc>
  807a00:	d8014515 	stw	zero,1300(sp)
  807a04:	dc814715 	stw	r18,1308(sp)
  807a08:	003fb106 	br	8078d0 <___vfprintf_internal_r+0x1d14>
  807a0c:	000d883a 	mov	r6,zero
  807a10:	000f883a 	mov	r7,zero
  807a14:	8009883a 	mov	r4,r16
  807a18:	880b883a 	mov	r5,r17
  807a1c:	08112f80 	call	8112f8 <__nedf2>
  807a20:	103f9f26 	beq	r2,zero,8078a0 <___vfprintf_internal_r+0x1ce4>
  807a24:	00800044 	movi	r2,1
  807a28:	1509c83a 	sub	r4,r2,r20
  807a2c:	d9000515 	stw	r4,20(sp)
  807a30:	003f9b06 	br	8078a0 <___vfprintf_internal_r+0x1ce4>
  807a34:	98000d1e 	bne	r19,zero,807a6c <___vfprintf_internal_r+0x1eb0>
  807a38:	d8c14c17 	ldw	r3,1328(sp)
  807a3c:	1880004c 	andi	r2,r3,1
  807a40:	10000a1e 	bne	r2,zero,807a6c <___vfprintf_internal_r+0x1eb0>
  807a44:	01000044 	movi	r4,1
  807a48:	200f883a 	mov	r7,r4
  807a4c:	d9014515 	stw	r4,1300(sp)
  807a50:	003f4a06 	br	80777c <___vfprintf_internal_r+0x1bc0>
  807a54:	3cc00017 	ldw	r19,0(r7)
  807a58:	39c00104 	addi	r7,r7,4
  807a5c:	983d0e0e 	bge	r19,zero,806e98 <___vfprintf_internal_r+0x12dc>
  807a60:	b8c00007 	ldb	r3,0(r23)
  807a64:	04ffffc4 	movi	r19,-1
  807a68:	0038d306 	br	805db8 <___vfprintf_internal_r+0x1fc>
  807a6c:	9cc00084 	addi	r19,r19,2
  807a70:	dcc14515 	stw	r19,1300(sp)
  807a74:	980f883a 	mov	r7,r19
  807a78:	983f400e 	bge	r19,zero,80777c <___vfprintf_internal_r+0x1bc0>
  807a7c:	003f7306 	br	80784c <___vfprintf_internal_r+0x1c90>

00807a80 <__vfprintf_internal>:
  807a80:	00802074 	movhi	r2,129
  807a84:	109bcd04 	addi	r2,r2,28468
  807a88:	2013883a 	mov	r9,r4
  807a8c:	11000017 	ldw	r4,0(r2)
  807a90:	2805883a 	mov	r2,r5
  807a94:	300f883a 	mov	r7,r6
  807a98:	480b883a 	mov	r5,r9
  807a9c:	100d883a 	mov	r6,r2
  807aa0:	0805bbc1 	jmpi	805bbc <___vfprintf_internal_r>

00807aa4 <__svfscanf_r>:
  807aa4:	deff4e04 	addi	sp,sp,-712
  807aa8:	dd80ae15 	stw	r22,696(sp)
  807aac:	dd00ac15 	stw	r20,688(sp)
  807ab0:	dc40a915 	stw	r17,676(sp)
  807ab4:	dc00a815 	stw	r16,672(sp)
  807ab8:	dfc0b115 	stw	ra,708(sp)
  807abc:	df00b015 	stw	fp,704(sp)
  807ac0:	ddc0af15 	stw	r23,700(sp)
  807ac4:	dd40ad15 	stw	r21,692(sp)
  807ac8:	dcc0ab15 	stw	r19,684(sp)
  807acc:	dc80aa15 	stw	r18,680(sp)
  807ad0:	202d883a 	mov	r22,r4
  807ad4:	2821883a 	mov	r16,r5
  807ad8:	d9c0a415 	stw	r7,656(sp)
  807adc:	3029883a 	mov	r20,r6
  807ae0:	d800a215 	stw	zero,648(sp)
  807ae4:	0023883a 	mov	r17,zero
  807ae8:	d800a115 	stw	zero,644(sp)
  807aec:	d800a015 	stw	zero,640(sp)
  807af0:	a1000007 	ldb	r4,0(r20)
  807af4:	d9000115 	stw	r4,4(sp)
  807af8:	20001f26 	beq	r4,zero,807b78 <__svfscanf_r+0xd4>
  807afc:	04c02074 	movhi	r19,129
  807b00:	9cdbcc04 	addi	r19,r19,28464
  807b04:	9c800017 	ldw	r18,0(r19)
  807b08:	a5000044 	addi	r20,r20,1
  807b0c:	9107883a 	add	r3,r18,r4
  807b10:	18800003 	ldbu	r2,0(r3)
  807b14:	1080020c 	andi	r2,r2,8
  807b18:	10002426 	beq	r2,zero,807bac <__svfscanf_r+0x108>
  807b1c:	80c00117 	ldw	r3,4(r16)
  807b20:	00c00e0e 	bge	zero,r3,807b5c <__svfscanf_r+0xb8>
  807b24:	81400017 	ldw	r5,0(r16)
  807b28:	98800017 	ldw	r2,0(r19)
  807b2c:	28c00003 	ldbu	r3,0(r5)
  807b30:	1887883a 	add	r3,r3,r2
  807b34:	19000003 	ldbu	r4,0(r3)
  807b38:	2100020c 	andi	r4,r4,8
  807b3c:	203fec26 	beq	r4,zero,807af0 <__svfscanf_r+0x4c>
  807b40:	80c00117 	ldw	r3,4(r16)
  807b44:	29800044 	addi	r6,r5,1
  807b48:	8c400044 	addi	r17,r17,1
  807b4c:	18ffffc4 	addi	r3,r3,-1
  807b50:	81800015 	stw	r6,0(r16)
  807b54:	80c00115 	stw	r3,4(r16)
  807b58:	00fff216 	blt	zero,r3,807b24 <__svfscanf_r+0x80>
  807b5c:	b009883a 	mov	r4,r22
  807b60:	800b883a 	mov	r5,r16
  807b64:	08052540 	call	805254 <__srefill_r>
  807b68:	103fee26 	beq	r2,zero,807b24 <__svfscanf_r+0x80>
  807b6c:	a1000007 	ldb	r4,0(r20)
  807b70:	d9000115 	stw	r4,4(sp)
  807b74:	203fe11e 	bne	r4,zero,807afc <__svfscanf_r+0x58>
  807b78:	d880a217 	ldw	r2,648(sp)
  807b7c:	dfc0b117 	ldw	ra,708(sp)
  807b80:	df00b017 	ldw	fp,704(sp)
  807b84:	ddc0af17 	ldw	r23,700(sp)
  807b88:	dd80ae17 	ldw	r22,696(sp)
  807b8c:	dd40ad17 	ldw	r21,692(sp)
  807b90:	dd00ac17 	ldw	r20,688(sp)
  807b94:	dcc0ab17 	ldw	r19,684(sp)
  807b98:	dc80aa17 	ldw	r18,680(sp)
  807b9c:	dc40a917 	ldw	r17,676(sp)
  807ba0:	dc00a817 	ldw	r16,672(sp)
  807ba4:	dec0b204 	addi	sp,sp,712
  807ba8:	f800283a 	ret
  807bac:	00800944 	movi	r2,37
  807bb0:	20801626 	beq	r4,r2,807c0c <__svfscanf_r+0x168>
  807bb4:	80800117 	ldw	r2,4(r16)
  807bb8:	00800b0e 	bge	zero,r2,807be8 <__svfscanf_r+0x144>
  807bbc:	81000017 	ldw	r4,0(r16)
  807bc0:	a0ffffc7 	ldb	r3,-1(r20)
  807bc4:	20800003 	ldbu	r2,0(r4)
  807bc8:	10ffeb1e 	bne	r2,r3,807b78 <__svfscanf_r+0xd4>
  807bcc:	80c00117 	ldw	r3,4(r16)
  807bd0:	21800044 	addi	r6,r4,1
  807bd4:	8c400044 	addi	r17,r17,1
  807bd8:	18ffffc4 	addi	r3,r3,-1
  807bdc:	80c00115 	stw	r3,4(r16)
  807be0:	81800015 	stw	r6,0(r16)
  807be4:	003fc206 	br	807af0 <__svfscanf_r+0x4c>
  807be8:	b009883a 	mov	r4,r22
  807bec:	800b883a 	mov	r5,r16
  807bf0:	08052540 	call	805254 <__srefill_r>
  807bf4:	103ff126 	beq	r2,zero,807bbc <__svfscanf_r+0x118>
  807bf8:	d900a217 	ldw	r4,648(sp)
  807bfc:	2004981e 	bne	r4,zero,808e60 <__svfscanf_r+0x13bc>
  807c00:	00bfffc4 	movi	r2,-1
  807c04:	d880a215 	stw	r2,648(sp)
  807c08:	003fdb06 	br	807b78 <__svfscanf_r+0xd4>
  807c0c:	d800a315 	stw	zero,652(sp)
  807c10:	002b883a 	mov	r21,zero
  807c14:	a0c00003 	ldbu	r3,0(r20)
  807c18:	00801e04 	movi	r2,120
  807c1c:	a5000044 	addi	r20,r20,1
  807c20:	1dc03fcc 	andi	r23,r3,255
  807c24:	bdc0201c 	xori	r23,r23,128
  807c28:	bdffe004 	addi	r23,r23,-128
  807c2c:	10c08036 	bltu	r2,r3,807e30 <__svfscanf_r+0x38c>
  807c30:	18c5883a 	add	r2,r3,r3
  807c34:	1085883a 	add	r2,r2,r2
  807c38:	00c02034 	movhi	r3,128
  807c3c:	18df1304 	addi	r3,r3,31820
  807c40:	10c5883a 	add	r2,r2,r3
  807c44:	11000017 	ldw	r4,0(r2)
  807c48:	2000683a 	jmp	r4
  807c4c:	00807c00 	call	807c0 <__alt_mem_sdram-0x77f840>
  807c50:	00807e30 	cmpltui	r2,zero,504
  807c54:	00807e30 	cmpltui	r2,zero,504
  807c58:	00807e30 	cmpltui	r2,zero,504
  807c5c:	00807e30 	cmpltui	r2,zero,504
  807c60:	00807e30 	cmpltui	r2,zero,504
  807c64:	00807e30 	cmpltui	r2,zero,504
  807c68:	00807e30 	cmpltui	r2,zero,504
  807c6c:	00807e30 	cmpltui	r2,zero,504
  807c70:	00807e30 	cmpltui	r2,zero,504
  807c74:	00807e30 	cmpltui	r2,zero,504
  807c78:	00807e30 	cmpltui	r2,zero,504
  807c7c:	00807e30 	cmpltui	r2,zero,504
  807c80:	00807e30 	cmpltui	r2,zero,504
  807c84:	00807e30 	cmpltui	r2,zero,504
  807c88:	00807e30 	cmpltui	r2,zero,504
  807c8c:	00807e30 	cmpltui	r2,zero,504
  807c90:	00807e30 	cmpltui	r2,zero,504
  807c94:	00807e30 	cmpltui	r2,zero,504
  807c98:	00807e30 	cmpltui	r2,zero,504
  807c9c:	00807e30 	cmpltui	r2,zero,504
  807ca0:	00807e30 	cmpltui	r2,zero,504
  807ca4:	00807e30 	cmpltui	r2,zero,504
  807ca8:	00807e30 	cmpltui	r2,zero,504
  807cac:	00807e30 	cmpltui	r2,zero,504
  807cb0:	00807e30 	cmpltui	r2,zero,504
  807cb4:	00807e30 	cmpltui	r2,zero,504
  807cb8:	00807e30 	cmpltui	r2,zero,504
  807cbc:	00807e30 	cmpltui	r2,zero,504
  807cc0:	00807e30 	cmpltui	r2,zero,504
  807cc4:	00807e30 	cmpltui	r2,zero,504
  807cc8:	00807e30 	cmpltui	r2,zero,504
  807ccc:	00807e30 	cmpltui	r2,zero,504
  807cd0:	00807e30 	cmpltui	r2,zero,504
  807cd4:	00807e30 	cmpltui	r2,zero,504
  807cd8:	00807e30 	cmpltui	r2,zero,504
  807cdc:	00807e30 	cmpltui	r2,zero,504
  807ce0:	00807bb4 	movhi	r2,494
  807ce4:	00807e30 	cmpltui	r2,zero,504
  807ce8:	00807e30 	cmpltui	r2,zero,504
  807cec:	00807e30 	cmpltui	r2,zero,504
  807cf0:	00807e30 	cmpltui	r2,zero,504
  807cf4:	00808cd0 	cmplti	r2,zero,563
  807cf8:	00807e30 	cmpltui	r2,zero,504
  807cfc:	00807e30 	cmpltui	r2,zero,504
  807d00:	00807e30 	cmpltui	r2,zero,504
  807d04:	00807e30 	cmpltui	r2,zero,504
  807d08:	00807e30 	cmpltui	r2,zero,504
  807d0c:	00808cb4 	movhi	r2,562
  807d10:	00808cb4 	movhi	r2,562
  807d14:	00808cb4 	movhi	r2,562
  807d18:	00808cb4 	movhi	r2,562
  807d1c:	00808cb4 	movhi	r2,562
  807d20:	00808cb4 	movhi	r2,562
  807d24:	00808cb4 	movhi	r2,562
  807d28:	00808cb4 	movhi	r2,562
  807d2c:	00808cb4 	movhi	r2,562
  807d30:	00808cb4 	movhi	r2,562
  807d34:	00807e30 	cmpltui	r2,zero,504
  807d38:	00807e30 	cmpltui	r2,zero,504
  807d3c:	00807e30 	cmpltui	r2,zero,504
  807d40:	00807e30 	cmpltui	r2,zero,504
  807d44:	00807e30 	cmpltui	r2,zero,504
  807d48:	00807e30 	cmpltui	r2,zero,504
  807d4c:	00807e30 	cmpltui	r2,zero,504
  807d50:	00807e30 	cmpltui	r2,zero,504
  807d54:	00807e30 	cmpltui	r2,zero,504
  807d58:	00807e30 	cmpltui	r2,zero,504
  807d5c:	00807e44 	movi	r2,505
  807d60:	00808db8 	rdprs	r2,zero,566
  807d64:	00807e30 	cmpltui	r2,zero,504
  807d68:	00808db8 	rdprs	r2,zero,566
  807d6c:	00807e30 	cmpltui	r2,zero,504
  807d70:	00807e30 	cmpltui	r2,zero,504
  807d74:	00807e30 	cmpltui	r2,zero,504
  807d78:	00807e30 	cmpltui	r2,zero,504
  807d7c:	00808cac 	andhi	r2,zero,562
  807d80:	00807e30 	cmpltui	r2,zero,504
  807d84:	00807e30 	cmpltui	r2,zero,504
  807d88:	00808c8c 	andi	r2,zero,562
  807d8c:	00807e30 	cmpltui	r2,zero,504
  807d90:	00807e30 	cmpltui	r2,zero,504
  807d94:	00807e30 	cmpltui	r2,zero,504
  807d98:	00807e30 	cmpltui	r2,zero,504
  807d9c:	00807e30 	cmpltui	r2,zero,504
  807da0:	00807e30 	cmpltui	r2,zero,504
  807da4:	00807e30 	cmpltui	r2,zero,504
  807da8:	00807e30 	cmpltui	r2,zero,504
  807dac:	00808cd8 	cmpnei	r2,zero,563
  807db0:	00807e30 	cmpltui	r2,zero,504
  807db4:	00807e30 	cmpltui	r2,zero,504
  807db8:	00808c70 	cmpltui	r2,zero,561
  807dbc:	00807e30 	cmpltui	r2,zero,504
  807dc0:	00807e30 	cmpltui	r2,zero,504
  807dc4:	00807e30 	cmpltui	r2,zero,504
  807dc8:	00807e30 	cmpltui	r2,zero,504
  807dcc:	00807e30 	cmpltui	r2,zero,504
  807dd0:	00807e30 	cmpltui	r2,zero,504
  807dd4:	00807e30 	cmpltui	r2,zero,504
  807dd8:	00808dc0 	call	808dc <__alt_mem_sdram-0x77f724>
  807ddc:	00807e48 	cmpgei	r2,zero,505
  807de0:	00808db8 	rdprs	r2,zero,566
  807de4:	00808db8 	rdprs	r2,zero,566
  807de8:	00808db8 	rdprs	r2,zero,566
  807dec:	00808dcc 	andi	r2,zero,567
  807df0:	00808d14 	movui	r2,564
  807df4:	00807e30 	cmpltui	r2,zero,504
  807df8:	00807e30 	cmpltui	r2,zero,504
  807dfc:	008083dc 	xori	r2,zero,527
  807e00:	00807e30 	cmpltui	r2,zero,504
  807e04:	00808ec8 	cmpgei	r2,zero,571
  807e08:	00808e84 	movi	r2,570
  807e0c:	00808ea8 	cmpgeui	r2,zero,570
  807e10:	00807e30 	cmpltui	r2,zero,504
  807e14:	00807e30 	cmpltui	r2,zero,504
  807e18:	00808ea0 	cmpeqi	r2,zero,570
  807e1c:	00807e30 	cmpltui	r2,zero,504
  807e20:	00808cf8 	rdprs	r2,zero,563
  807e24:	00807e30 	cmpltui	r2,zero,504
  807e28:	00807e30 	cmpltui	r2,zero,504
  807e2c:	00808cd8 	cmpnei	r2,zero,563
  807e30:	bc87883a 	add	r3,r23,r18
  807e34:	18800003 	ldbu	r2,0(r3)
  807e38:	1080004c 	andi	r2,r2,1
  807e3c:	1005003a 	cmpeq	r2,r2,zero
  807e40:	1000011e 	bne	r2,zero,807e48 <__svfscanf_r+0x3a4>
  807e44:	ad400054 	ori	r21,r21,1
  807e48:	01002074 	movhi	r4,129
  807e4c:	213a0104 	addi	r4,r4,-6140
  807e50:	00800284 	movi	r2,10
  807e54:	d900a015 	stw	r4,640(sp)
  807e58:	048000c4 	movi	r18,3
  807e5c:	d880a115 	stw	r2,644(sp)
  807e60:	80c00117 	ldw	r3,4(r16)
  807e64:	00c13f0e 	bge	zero,r3,808364 <__svfscanf_r+0x8c0>
  807e68:	a880100c 	andi	r2,r21,64
  807e6c:	10001326 	beq	r2,zero,807ebc <__svfscanf_r+0x418>
  807e70:	00800104 	movi	r2,4
  807e74:	14bf1e36 	bltu	r2,r18,807af0 <__svfscanf_r+0x4c>
  807e78:	9485883a 	add	r2,r18,r18
  807e7c:	1085883a 	add	r2,r2,r2
  807e80:	00c02034 	movhi	r3,128
  807e84:	18dfa504 	addi	r3,r3,32404
  807e88:	10c5883a 	add	r2,r2,r3
  807e8c:	11000017 	ldw	r4,0(r2)
  807e90:	2000683a 	jmp	r4
  807e94:	00807ef8 	rdprs	r2,zero,507
  807e98:	00807ff8 	rdprs	r2,zero,511
  807e9c:	00808208 	cmpgei	r2,zero,520
  807ea0:	0080806c 	andhi	r2,zero,513
  807ea4:	00808340 	call	80834 <__alt_mem_sdram-0x77f7cc>
  807ea8:	b009883a 	mov	r4,r22
  807eac:	800b883a 	mov	r5,r16
  807eb0:	08052540 	call	805254 <__srefill_r>
  807eb4:	103f501e 	bne	r2,zero,807bf8 <__svfscanf_r+0x154>
  807eb8:	8c400044 	addi	r17,r17,1
  807ebc:	81400017 	ldw	r5,0(r16)
  807ec0:	98800017 	ldw	r2,0(r19)
  807ec4:	28c00003 	ldbu	r3,0(r5)
  807ec8:	1887883a 	add	r3,r3,r2
  807ecc:	19000003 	ldbu	r4,0(r3)
  807ed0:	2100020c 	andi	r4,r4,8
  807ed4:	203fe626 	beq	r4,zero,807e70 <__svfscanf_r+0x3cc>
  807ed8:	80c00117 	ldw	r3,4(r16)
  807edc:	18ffffc4 	addi	r3,r3,-1
  807ee0:	80c00115 	stw	r3,4(r16)
  807ee4:	00fff00e 	bge	zero,r3,807ea8 <__svfscanf_r+0x404>
  807ee8:	29800044 	addi	r6,r5,1
  807eec:	8c400044 	addi	r17,r17,1
  807ef0:	81800015 	stw	r6,0(r16)
  807ef4:	003ff106 	br	807ebc <__svfscanf_r+0x418>
  807ef8:	d8c0a317 	ldw	r3,652(sp)
  807efc:	1800021e 	bne	r3,zero,807f08 <__svfscanf_r+0x464>
  807f00:	01000044 	movi	r4,1
  807f04:	d900a315 	stw	r4,652(sp)
  807f08:	a880004c 	andi	r2,r21,1
  807f0c:	1005003a 	cmpeq	r2,r2,zero
  807f10:	1002811e 	bne	r2,zero,808918 <__svfscanf_r+0xe74>
  807f14:	ad40040c 	andi	r21,r21,16
  807f18:	a805003a 	cmpeq	r2,r21,zero
  807f1c:	d880a615 	stw	r2,664(sp)
  807f20:	1003d31e 	bne	r2,zero,808e70 <__svfscanf_r+0x13cc>
  807f24:	0027883a 	mov	r19,zero
  807f28:	d900a317 	ldw	r4,652(sp)
  807f2c:	2003c726 	beq	r4,zero,808e4c <__svfscanf_r+0x13a8>
  807f30:	07002074 	movhi	fp,129
  807f34:	e71bd104 	addi	fp,fp,28484
  807f38:	e0800017 	ldw	r2,0(fp)
  807f3c:	103f2e26 	beq	r2,zero,807bf8 <__svfscanf_r+0x154>
  807f40:	d8804404 	addi	r2,sp,272
  807f44:	0025883a 	mov	r18,zero
  807f48:	d880a515 	stw	r2,660(sp)
  807f4c:	05ffffc4 	movi	r23,-1
  807f50:	80800017 	ldw	r2,0(r16)
  807f54:	80c00117 	ldw	r3,4(r16)
  807f58:	d900a517 	ldw	r4,660(sp)
  807f5c:	12000003 	ldbu	r8,0(r2)
  807f60:	18ffffc4 	addi	r3,r3,-1
  807f64:	11800044 	addi	r6,r2,1
  807f68:	248f883a 	add	r7,r4,r18
  807f6c:	80c00115 	stw	r3,4(r16)
  807f70:	81800015 	stw	r6,0(r16)
  807f74:	3a000005 	stb	r8,0(r7)
  807f78:	d9000204 	addi	r4,sp,8
  807f7c:	000b883a 	mov	r5,zero
  807f80:	01800204 	movi	r6,8
  807f84:	08050180 	call	805018 <memset>
  807f88:	d980a517 	ldw	r6,660(sp)
  807f8c:	94800044 	addi	r18,r18,1
  807f90:	d8800204 	addi	r2,sp,8
  807f94:	b009883a 	mov	r4,r22
  807f98:	980b883a 	mov	r5,r19
  807f9c:	900f883a 	mov	r7,r18
  807fa0:	d8800015 	stw	r2,0(sp)
  807fa4:	080b5100 	call	80b510 <_mbrtowc_r>
  807fa8:	1007883a 	mov	r3,r2
  807fac:	15ff1226 	beq	r2,r23,807bf8 <__svfscanf_r+0x154>
  807fb0:	10039e1e 	bne	r2,zero,808e2c <__svfscanf_r+0x1388>
  807fb4:	a800011e 	bne	r21,zero,807fbc <__svfscanf_r+0x518>
  807fb8:	98000015 	stw	zero,0(r19)
  807fbc:	d8c0a317 	ldw	r3,652(sp)
  807fc0:	d900a617 	ldw	r4,664(sp)
  807fc4:	8ca3883a 	add	r17,r17,r18
  807fc8:	18ffffc4 	addi	r3,r3,-1
  807fcc:	d8c0a315 	stw	r3,652(sp)
  807fd0:	20000126 	beq	r4,zero,807fd8 <__svfscanf_r+0x534>
  807fd4:	9cc00104 	addi	r19,r19,4
  807fd8:	0025883a 	mov	r18,zero
  807fdc:	80c00117 	ldw	r3,4(r16)
  807fe0:	00c3950e 	bge	zero,r3,808e38 <__svfscanf_r+0x1394>
  807fe4:	d880a317 	ldw	r2,652(sp)
  807fe8:	10039826 	beq	r2,zero,808e4c <__svfscanf_r+0x13a8>
  807fec:	e0800017 	ldw	r2,0(fp)
  807ff0:	90bfd71e 	bne	r18,r2,807f50 <__svfscanf_r+0x4ac>
  807ff4:	003f0006 	br	807bf8 <__svfscanf_r+0x154>
  807ff8:	d880a317 	ldw	r2,652(sp)
  807ffc:	1000021e 	bne	r2,zero,808008 <__svfscanf_r+0x564>
  808000:	00ffffc4 	movi	r3,-1
  808004:	d8c0a315 	stw	r3,652(sp)
  808008:	a880040c 	andi	r2,r21,16
  80800c:	1003b826 	beq	r2,zero,808ef0 <__svfscanf_r+0x144c>
  808010:	0027883a 	mov	r19,zero
  808014:	dd400404 	addi	r21,sp,16
  808018:	81000017 	ldw	r4,0(r16)
  80801c:	20800003 	ldbu	r2,0(r4)
  808020:	a885883a 	add	r2,r21,r2
  808024:	10c00007 	ldb	r3,0(r2)
  808028:	18037d26 	beq	r3,zero,808e20 <__svfscanf_r+0x137c>
  80802c:	80c00117 	ldw	r3,4(r16)
  808030:	21800044 	addi	r6,r4,1
  808034:	d900a317 	ldw	r4,652(sp)
  808038:	18ffffc4 	addi	r3,r3,-1
  80803c:	9cc00044 	addi	r19,r19,1
  808040:	81800015 	stw	r6,0(r16)
  808044:	80c00115 	stw	r3,4(r16)
  808048:	24c37526 	beq	r4,r19,808e20 <__svfscanf_r+0x137c>
  80804c:	00fff216 	blt	zero,r3,808018 <__svfscanf_r+0x574>
  808050:	b009883a 	mov	r4,r22
  808054:	800b883a 	mov	r5,r16
  808058:	08052540 	call	805254 <__srefill_r>
  80805c:	103fee26 	beq	r2,zero,808018 <__svfscanf_r+0x574>
  808060:	983ee526 	beq	r19,zero,807bf8 <__svfscanf_r+0x154>
  808064:	8ce3883a 	add	r17,r17,r19
  808068:	003ea106 	br	807af0 <__svfscanf_r+0x4c>
  80806c:	d900a317 	ldw	r4,652(sp)
  808070:	00805704 	movi	r2,348
  808074:	20ffffc4 	addi	r3,r4,-1
  808078:	10c0bf2e 	bgeu	r2,r3,808378 <__svfscanf_r+0x8d4>
  80807c:	00805744 	movi	r2,349
  808080:	24ffa8c4 	addi	r19,r4,-349
  808084:	ac836014 	ori	r18,r21,3456
  808088:	d880a315 	stw	r2,652(sp)
  80808c:	d8c04404 	addi	r3,sp,272
  808090:	d8c0a515 	stw	r3,660(sp)
  808094:	002f883a 	mov	r23,zero
  808098:	182b883a 	mov	r21,r3
  80809c:	81800017 	ldw	r6,0(r16)
  8080a0:	00c01344 	movi	r3,77
  8080a4:	31400003 	ldbu	r5,0(r6)
  8080a8:	28bff544 	addi	r2,r5,-43
  8080ac:	10803fcc 	andi	r2,r2,255
  8080b0:	1880b836 	bltu	r3,r2,808394 <__svfscanf_r+0x8f0>
  8080b4:	1085883a 	add	r2,r2,r2
  8080b8:	1085883a 	add	r2,r2,r2
  8080bc:	00c02074 	movhi	r3,129
  8080c0:	18e03404 	addi	r3,r3,-32560
  8080c4:	10c5883a 	add	r2,r2,r3
  8080c8:	11000017 	ldw	r4,0(r2)
  8080cc:	2000683a 	jmp	r4
  8080d0:	008084e4 	muli	r2,zero,531
  8080d4:	00808394 	movui	r2,526
  8080d8:	008084e4 	muli	r2,zero,531
  8080dc:	00808394 	movui	r2,526
  8080e0:	00808394 	movui	r2,526
  8080e4:	00808528 	cmpgeui	r2,zero,532
  8080e8:	00808d2c 	andhi	r2,zero,564
  8080ec:	00808d2c 	andhi	r2,zero,564
  8080f0:	00808d2c 	andhi	r2,zero,564
  8080f4:	00808d2c 	andhi	r2,zero,564
  8080f8:	00808d2c 	andhi	r2,zero,564
  8080fc:	00808d2c 	andhi	r2,zero,564
  808100:	00808d2c 	andhi	r2,zero,564
  808104:	00808d54 	movui	r2,565
  808108:	00808d54 	movui	r2,565
  80810c:	00808394 	movui	r2,526
  808110:	00808394 	movui	r2,526
  808114:	00808394 	movui	r2,526
  808118:	00808394 	movui	r2,526
  80811c:	00808394 	movui	r2,526
  808120:	00808394 	movui	r2,526
  808124:	00808394 	movui	r2,526
  808128:	00808d84 	movi	r2,566
  80812c:	00808d84 	movi	r2,566
  808130:	00808d84 	movi	r2,566
  808134:	00808d84 	movi	r2,566
  808138:	00808d84 	movi	r2,566
  80813c:	00808d84 	movi	r2,566
  808140:	00808394 	movui	r2,526
  808144:	00808394 	movui	r2,526
  808148:	00808394 	movui	r2,526
  80814c:	00808394 	movui	r2,526
  808150:	00808394 	movui	r2,526
  808154:	00808394 	movui	r2,526
  808158:	00808394 	movui	r2,526
  80815c:	00808394 	movui	r2,526
  808160:	00808394 	movui	r2,526
  808164:	00808394 	movui	r2,526
  808168:	00808394 	movui	r2,526
  80816c:	00808394 	movui	r2,526
  808170:	00808394 	movui	r2,526
  808174:	00808394 	movui	r2,526
  808178:	00808394 	movui	r2,526
  80817c:	00808394 	movui	r2,526
  808180:	00808394 	movui	r2,526
  808184:	00808d94 	movui	r2,566
  808188:	00808394 	movui	r2,526
  80818c:	00808394 	movui	r2,526
  808190:	00808394 	movui	r2,526
  808194:	00808394 	movui	r2,526
  808198:	00808394 	movui	r2,526
  80819c:	00808394 	movui	r2,526
  8081a0:	00808394 	movui	r2,526
  8081a4:	00808394 	movui	r2,526
  8081a8:	00808d84 	movi	r2,566
  8081ac:	00808d84 	movi	r2,566
  8081b0:	00808d84 	movi	r2,566
  8081b4:	00808d84 	movi	r2,566
  8081b8:	00808d84 	movi	r2,566
  8081bc:	00808d84 	movi	r2,566
  8081c0:	00808394 	movui	r2,526
  8081c4:	00808394 	movui	r2,526
  8081c8:	00808394 	movui	r2,526
  8081cc:	00808394 	movui	r2,526
  8081d0:	00808394 	movui	r2,526
  8081d4:	00808394 	movui	r2,526
  8081d8:	00808394 	movui	r2,526
  8081dc:	00808394 	movui	r2,526
  8081e0:	00808394 	movui	r2,526
  8081e4:	00808394 	movui	r2,526
  8081e8:	00808394 	movui	r2,526
  8081ec:	00808394 	movui	r2,526
  8081f0:	00808394 	movui	r2,526
  8081f4:	00808394 	movui	r2,526
  8081f8:	00808394 	movui	r2,526
  8081fc:	00808394 	movui	r2,526
  808200:	00808394 	movui	r2,526
  808204:	00808d94 	movui	r2,566
  808208:	d900a317 	ldw	r4,652(sp)
  80820c:	2000021e 	bne	r4,zero,808218 <__svfscanf_r+0x774>
  808210:	00bfffc4 	movi	r2,-1
  808214:	d880a315 	stw	r2,652(sp)
  808218:	a880004c 	andi	r2,r21,1
  80821c:	1005003a 	cmpeq	r2,r2,zero
  808220:	1003651e 	bne	r2,zero,808fb8 <__svfscanf_r+0x1514>
  808224:	adc0040c 	andi	r23,r21,16
  808228:	b807003a 	cmpeq	r3,r23,zero
  80822c:	d8c0a715 	stw	r3,668(sp)
  808230:	1802f61e 	bne	r3,zero,808e0c <__svfscanf_r+0x1368>
  808234:	dd400104 	addi	r21,sp,4
  808238:	0025883a 	mov	r18,zero
  80823c:	073fffc4 	movi	fp,-1
  808240:	81400017 	ldw	r5,0(r16)
  808244:	98800017 	ldw	r2,0(r19)
  808248:	29c00003 	ldbu	r7,0(r5)
  80824c:	38c03fcc 	andi	r3,r7,255
  808250:	1887883a 	add	r3,r3,r2
  808254:	19000003 	ldbu	r4,0(r3)
  808258:	2100020c 	andi	r4,r4,8
  80825c:	2000321e 	bne	r4,zero,808328 <__svfscanf_r+0x884>
  808260:	d8c0a317 	ldw	r3,652(sp)
  808264:	18003026 	beq	r3,zero,808328 <__svfscanf_r+0x884>
  808268:	00802074 	movhi	r2,129
  80826c:	109bd104 	addi	r2,r2,28484
  808270:	10c00017 	ldw	r3,0(r2)
  808274:	90fe6026 	beq	r18,r3,807bf8 <__svfscanf_r+0x154>
  808278:	d8c04404 	addi	r3,sp,272
  80827c:	80800117 	ldw	r2,4(r16)
  808280:	d8c0a515 	stw	r3,660(sp)
  808284:	d900a517 	ldw	r4,660(sp)
  808288:	10ffffc4 	addi	r3,r2,-1
  80828c:	29800044 	addi	r6,r5,1
  808290:	80c00115 	stw	r3,4(r16)
  808294:	2485883a 	add	r2,r4,r18
  808298:	81800015 	stw	r6,0(r16)
  80829c:	d9000204 	addi	r4,sp,8
  8082a0:	000b883a 	mov	r5,zero
  8082a4:	01800204 	movi	r6,8
  8082a8:	11c00005 	stb	r7,0(r2)
  8082ac:	08050180 	call	805018 <memset>
  8082b0:	d980a517 	ldw	r6,660(sp)
  8082b4:	94800044 	addi	r18,r18,1
  8082b8:	d8800204 	addi	r2,sp,8
  8082bc:	b009883a 	mov	r4,r22
  8082c0:	a80b883a 	mov	r5,r21
  8082c4:	900f883a 	mov	r7,r18
  8082c8:	d8800015 	stw	r2,0(sp)
  8082cc:	080b5100 	call	80b510 <_mbrtowc_r>
  8082d0:	1007883a 	mov	r3,r2
  8082d4:	173e4826 	beq	r2,fp,807bf8 <__svfscanf_r+0x154>
  8082d8:	1002c91e 	bne	r2,zero,808e00 <__svfscanf_r+0x135c>
  8082dc:	a8000015 	stw	zero,0(r21)
  8082e0:	a9000017 	ldw	r4,0(r21)
  8082e4:	080b3a80 	call	80b3a8 <iswspace>
  8082e8:	1002bc1e 	bne	r2,zero,808ddc <__svfscanf_r+0x1338>
  8082ec:	d900a317 	ldw	r4,652(sp)
  8082f0:	d880a717 	ldw	r2,668(sp)
  8082f4:	8ca3883a 	add	r17,r17,r18
  8082f8:	213fffc4 	addi	r4,r4,-1
  8082fc:	d900a315 	stw	r4,652(sp)
  808300:	10000126 	beq	r2,zero,808308 <__svfscanf_r+0x864>
  808304:	ad400104 	addi	r21,r21,4
  808308:	0025883a 	mov	r18,zero
  80830c:	80c00117 	ldw	r3,4(r16)
  808310:	00ffcb16 	blt	zero,r3,808240 <__svfscanf_r+0x79c>
  808314:	b009883a 	mov	r4,r22
  808318:	800b883a 	mov	r5,r16
  80831c:	08052540 	call	805254 <__srefill_r>
  808320:	103fc726 	beq	r2,zero,808240 <__svfscanf_r+0x79c>
  808324:	903e341e 	bne	r18,zero,807bf8 <__svfscanf_r+0x154>
  808328:	b83df11e 	bne	r23,zero,807af0 <__svfscanf_r+0x4c>
  80832c:	d900a217 	ldw	r4,648(sp)
  808330:	a8000015 	stw	zero,0(r21)
  808334:	21000044 	addi	r4,r4,1
  808338:	d900a215 	stw	r4,648(sp)
  80833c:	003dec06 	br	807af0 <__svfscanf_r+0x4c>
  808340:	d900a317 	ldw	r4,652(sp)
  808344:	00805704 	movi	r2,348
  808348:	20ffffc4 	addi	r3,r4,-1
  80834c:	10c0902e 	bgeu	r2,r3,808590 <__svfscanf_r+0xaec>
  808350:	00805744 	movi	r2,349
  808354:	24ffa8c4 	addi	r19,r4,-349
  808358:	ad41e014 	ori	r21,r21,1920
  80835c:	d880a315 	stw	r2,652(sp)
  808360:	00010806 	br	808784 <__svfscanf_r+0xce0>
  808364:	b009883a 	mov	r4,r22
  808368:	800b883a 	mov	r5,r16
  80836c:	08052540 	call	805254 <__srefill_r>
  808370:	103ebd26 	beq	r2,zero,807e68 <__svfscanf_r+0x3c4>
  808374:	003e2006 	br	807bf8 <__svfscanf_r+0x154>
  808378:	d900a317 	ldw	r4,652(sp)
  80837c:	ac836014 	ori	r18,r21,3456
  808380:	2002941e 	bne	r4,zero,808dd4 <__svfscanf_r+0x1330>
  808384:	d8804404 	addi	r2,sp,272
  808388:	d880a515 	stw	r2,660(sp)
  80838c:	002f883a 	mov	r23,zero
  808390:	102b883a 	mov	r21,r2
  808394:	9080400c 	andi	r2,r18,256
  808398:	10000926 	beq	r2,zero,8083c0 <__svfscanf_r+0x91c>
  80839c:	d8c0a517 	ldw	r3,660(sp)
  8083a0:	1d40052e 	bgeu	r3,r21,8083b8 <__svfscanf_r+0x914>
  8083a4:	ad7fffc4 	addi	r21,r21,-1
  8083a8:	a9400007 	ldb	r5,0(r21)
  8083ac:	b009883a 	mov	r4,r22
  8083b0:	800d883a 	mov	r6,r16
  8083b4:	08059ac0 	call	8059ac <_ungetc_r>
  8083b8:	d900a517 	ldw	r4,660(sp)
  8083bc:	257dee26 	beq	r4,r21,807b78 <__svfscanf_r+0xd4>
  8083c0:	9080040c 	andi	r2,r18,16
  8083c4:	10000a26 	beq	r2,zero,8083f0 <__svfscanf_r+0x94c>
  8083c8:	d8c0a517 	ldw	r3,660(sp)
  8083cc:	a8c5c83a 	sub	r2,r21,r3
  8083d0:	b885883a 	add	r2,r23,r2
  8083d4:	88a3883a 	add	r17,r17,r2
  8083d8:	003dc506 	br	807af0 <__svfscanf_r+0x4c>
  8083dc:	a0c00007 	ldb	r3,0(r20)
  8083e0:	00801b04 	movi	r2,108
  8083e4:	18801726 	beq	r3,r2,808444 <__svfscanf_r+0x9a0>
  8083e8:	ad400054 	ori	r21,r21,1
  8083ec:	003e0906 	br	807c14 <__svfscanf_r+0x170>
  8083f0:	a8000005 	stb	zero,0(r21)
  8083f4:	d8c0a017 	ldw	r3,640(sp)
  8083f8:	d940a517 	ldw	r5,660(sp)
  8083fc:	d9c0a117 	ldw	r7,644(sp)
  808400:	b009883a 	mov	r4,r22
  808404:	000d883a 	mov	r6,zero
  808408:	183ee83a 	callr	r3
  80840c:	1007883a 	mov	r3,r2
  808410:	9080080c 	andi	r2,r18,32
  808414:	1000251e 	bne	r2,zero,8084ac <__svfscanf_r+0xa08>
  808418:	9080010c 	andi	r2,r18,4
  80841c:	10000c26 	beq	r2,zero,808450 <__svfscanf_r+0x9ac>
  808420:	d900a417 	ldw	r4,656(sp)
  808424:	20800017 	ldw	r2,0(r4)
  808428:	21000104 	addi	r4,r4,4
  80842c:	d900a415 	stw	r4,656(sp)
  808430:	10c0000d 	sth	r3,0(r2)
  808434:	d880a217 	ldw	r2,648(sp)
  808438:	10800044 	addi	r2,r2,1
  80843c:	d880a215 	stw	r2,648(sp)
  808440:	003fe106 	br	8083c8 <__svfscanf_r+0x924>
  808444:	a5000044 	addi	r20,r20,1
  808448:	ad400094 	ori	r21,r21,2
  80844c:	003df106 	br	807c14 <__svfscanf_r+0x170>
  808450:	9080004c 	andi	r2,r18,1
  808454:	1005003a 	cmpeq	r2,r2,zero
  808458:	10001426 	beq	r2,zero,8084ac <__svfscanf_r+0xa08>
  80845c:	9080008c 	andi	r2,r18,2
  808460:	10001226 	beq	r2,zero,8084ac <__svfscanf_r+0xa08>
  808464:	d8c0a017 	ldw	r3,640(sp)
  808468:	00802074 	movhi	r2,129
  80846c:	10bb6404 	addi	r2,r2,-4720
  808470:	18801426 	beq	r3,r2,8084c4 <__svfscanf_r+0xa20>
  808474:	d9c0a117 	ldw	r7,644(sp)
  808478:	d940a517 	ldw	r5,660(sp)
  80847c:	000d883a 	mov	r6,zero
  808480:	b009883a 	mov	r4,r22
  808484:	080ea780 	call	80ea78 <_strtoll_r>
  808488:	100d883a 	mov	r6,r2
  80848c:	180f883a 	mov	r7,r3
  808490:	d900a417 	ldw	r4,656(sp)
  808494:	20800017 	ldw	r2,0(r4)
  808498:	21000104 	addi	r4,r4,4
  80849c:	d900a415 	stw	r4,656(sp)
  8084a0:	11c00115 	stw	r7,4(r2)
  8084a4:	11800015 	stw	r6,0(r2)
  8084a8:	003fe206 	br	808434 <__svfscanf_r+0x990>
  8084ac:	d900a417 	ldw	r4,656(sp)
  8084b0:	20800017 	ldw	r2,0(r4)
  8084b4:	21000104 	addi	r4,r4,4
  8084b8:	d900a415 	stw	r4,656(sp)
  8084bc:	10c00015 	stw	r3,0(r2)
  8084c0:	003fdc06 	br	808434 <__svfscanf_r+0x990>
  8084c4:	d9c0a117 	ldw	r7,644(sp)
  8084c8:	d940a517 	ldw	r5,660(sp)
  8084cc:	000d883a 	mov	r6,zero
  8084d0:	b009883a 	mov	r4,r22
  8084d4:	080eff40 	call	80eff4 <_strtoull_r>
  8084d8:	100d883a 	mov	r6,r2
  8084dc:	180f883a 	mov	r7,r3
  8084e0:	003feb06 	br	808490 <__svfscanf_r+0x9ec>
  8084e4:	9080200c 	andi	r2,r18,128
  8084e8:	103faa26 	beq	r2,zero,808394 <__svfscanf_r+0x8f0>
  8084ec:	00bfdfc4 	movi	r2,-129
  8084f0:	90a4703a 	and	r18,r18,r2
  8084f4:	a9400005 	stb	r5,0(r21)
  8084f8:	ad400044 	addi	r21,r21,1
  8084fc:	80c00117 	ldw	r3,4(r16)
  808500:	18ffffc4 	addi	r3,r3,-1
  808504:	80c00115 	stw	r3,4(r16)
  808508:	00c0130e 	bge	zero,r3,808558 <__svfscanf_r+0xab4>
  80850c:	31800044 	addi	r6,r6,1
  808510:	81800015 	stw	r6,0(r16)
  808514:	d880a317 	ldw	r2,652(sp)
  808518:	10bfffc4 	addi	r2,r2,-1
  80851c:	d880a315 	stw	r2,652(sp)
  808520:	103ede1e 	bne	r2,zero,80809c <__svfscanf_r+0x5f8>
  808524:	003f9b06 	br	808394 <__svfscanf_r+0x8f0>
  808528:	9082000c 	andi	r2,r18,2048
  80852c:	103ff126 	beq	r2,zero,8084f4 <__svfscanf_r+0xa50>
  808530:	d8c0a117 	ldw	r3,644(sp)
  808534:	1800031e 	bne	r3,zero,808544 <__svfscanf_r+0xaa0>
  808538:	01000204 	movi	r4,8
  80853c:	94808014 	ori	r18,r18,512
  808540:	d900a115 	stw	r4,644(sp)
  808544:	9081000c 	andi	r2,r18,1024
  808548:	10000826 	beq	r2,zero,80856c <__svfscanf_r+0xac8>
  80854c:	00be9fc4 	movi	r2,-1409
  808550:	90a4703a 	and	r18,r18,r2
  808554:	003fe706 	br	8084f4 <__svfscanf_r+0xa50>
  808558:	b009883a 	mov	r4,r22
  80855c:	800b883a 	mov	r5,r16
  808560:	08052540 	call	805254 <__srefill_r>
  808564:	103feb26 	beq	r2,zero,808514 <__svfscanf_r+0xa70>
  808568:	003f8a06 	br	808394 <__svfscanf_r+0x8f0>
  80856c:	98000426 	beq	r19,zero,808580 <__svfscanf_r+0xadc>
  808570:	d880a317 	ldw	r2,652(sp)
  808574:	9cffffc4 	addi	r19,r19,-1
  808578:	10800044 	addi	r2,r2,1
  80857c:	d880a315 	stw	r2,652(sp)
  808580:	00bf1fc4 	movi	r2,-897
  808584:	90a4703a 	and	r18,r18,r2
  808588:	bdc00044 	addi	r23,r23,1
  80858c:	003fdb06 	br	8084fc <__svfscanf_r+0xa58>
  808590:	d900a317 	ldw	r4,652(sp)
  808594:	ad41e014 	ori	r21,r21,1920
  808598:	2000791e 	bne	r4,zero,808780 <__svfscanf_r+0xcdc>
  80859c:	d8c04404 	addi	r3,sp,272
  8085a0:	d8c0a515 	stw	r3,660(sp)
  8085a4:	182f883a 	mov	r23,r3
  8085a8:	d8009c15 	stw	zero,624(sp)
  8085ac:	d8009d15 	stw	zero,628(sp)
  8085b0:	d8009f15 	stw	zero,636(sp)
  8085b4:	d8009e15 	stw	zero,632(sp)
  8085b8:	0039883a 	mov	fp,zero
  8085bc:	e1003fcc 	andi	r4,fp,255
  8085c0:	2100201c 	xori	r4,r4,128
  8085c4:	213fe004 	addi	r4,r4,-128
  8085c8:	20ffffc4 	addi	r3,r4,-1
  8085cc:	00800184 	movi	r2,6
  8085d0:	10c01736 	bltu	r2,r3,808630 <__svfscanf_r+0xb8c>
  8085d4:	00c00084 	movi	r3,2
  8085d8:	19026d0e 	bge	r3,r4,808f90 <__svfscanf_r+0x14ec>
  8085dc:	008000c4 	movi	r2,3
  8085e0:	1100130e 	bge	r2,r4,808630 <__svfscanf_r+0xb8c>
  8085e4:	e4ffffc4 	addi	r19,fp,-1
  8085e8:	b825883a 	mov	r18,r23
  8085ec:	94bfffc4 	addi	r18,r18,-1
  8085f0:	91400007 	ldb	r5,0(r18)
  8085f4:	b009883a 	mov	r4,r22
  8085f8:	800d883a 	mov	r6,r16
  8085fc:	08059ac0 	call	8059ac <_ungetc_r>
  808600:	9cffffc4 	addi	r19,r19,-1
  808604:	98c03fcc 	andi	r3,r19,255
  808608:	18c0201c 	xori	r3,r3,128
  80860c:	18ffe004 	addi	r3,r3,-128
  808610:	00800084 	movi	r2,2
  808614:	18bff51e 	bne	r3,r2,8085ec <__svfscanf_r+0xb48>
  808618:	e0bfff04 	addi	r2,fp,-4
  80861c:	10803fcc 	andi	r2,r2,255
  808620:	b887c83a 	sub	r3,r23,r2
  808624:	8885c83a 	sub	r2,r17,r2
  808628:	147fffc4 	addi	r17,r2,-1
  80862c:	1dffffc4 	addi	r23,r3,-1
  808630:	a880400c 	andi	r2,r21,256
  808634:	10001226 	beq	r2,zero,808680 <__svfscanf_r+0xbdc>
  808638:	a881000c 	andi	r2,r21,1024
  80863c:	10002b1e 	bne	r2,zero,8086ec <__svfscanf_r+0xc48>
  808640:	bdffffc4 	addi	r23,r23,-1
  808644:	b9400007 	ldb	r5,0(r23)
  808648:	00801944 	movi	r2,101
  80864c:	8c7fffc4 	addi	r17,r17,-1
  808650:	28800826 	beq	r5,r2,808674 <__svfscanf_r+0xbd0>
  808654:	00801144 	movi	r2,69
  808658:	28800626 	beq	r5,r2,808674 <__svfscanf_r+0xbd0>
  80865c:	bdffffc4 	addi	r23,r23,-1
  808660:	b009883a 	mov	r4,r22
  808664:	800d883a 	mov	r6,r16
  808668:	08059ac0 	call	8059ac <_ungetc_r>
  80866c:	b9400007 	ldb	r5,0(r23)
  808670:	8c7fffc4 	addi	r17,r17,-1
  808674:	b009883a 	mov	r4,r22
  808678:	800d883a 	mov	r6,r16
  80867c:	08059ac0 	call	8059ac <_ungetc_r>
  808680:	a880040c 	andi	r2,r21,16
  808684:	103d1a1e 	bne	r2,zero,807af0 <__svfscanf_r+0x4c>
  808688:	a8c1800c 	andi	r3,r21,1536
  80868c:	00810004 	movi	r2,1024
  808690:	b8000005 	stb	zero,0(r23)
  808694:	18813326 	beq	r3,r2,808b64 <__svfscanf_r+0x10c0>
  808698:	d8809d17 	ldw	r2,628(sp)
  80869c:	1000251e 	bne	r2,zero,808734 <__svfscanf_r+0xc90>
  8086a0:	d940a517 	ldw	r5,660(sp)
  8086a4:	b009883a 	mov	r4,r22
  8086a8:	000d883a 	mov	r6,zero
  8086ac:	080d0f80 	call	80d0f8 <_strtod_r>
  8086b0:	a900004c 	andi	r4,r21,1
  8086b4:	2009003a 	cmpeq	r4,r4,zero
  8086b8:	1025883a 	mov	r18,r2
  8086bc:	1827883a 	mov	r19,r3
  8086c0:	2000141e 	bne	r4,zero,808714 <__svfscanf_r+0xc70>
  8086c4:	d8c0a417 	ldw	r3,656(sp)
  8086c8:	18800017 	ldw	r2,0(r3)
  8086cc:	1d400104 	addi	r21,r3,4
  8086d0:	14c00115 	stw	r19,4(r2)
  8086d4:	14800015 	stw	r18,0(r2)
  8086d8:	d8c0a217 	ldw	r3,648(sp)
  8086dc:	dd40a415 	stw	r21,656(sp)
  8086e0:	18c00044 	addi	r3,r3,1
  8086e4:	d8c0a215 	stw	r3,648(sp)
  8086e8:	003d0106 	br	807af0 <__svfscanf_r+0x4c>
  8086ec:	d900a517 	ldw	r4,660(sp)
  8086f0:	25fd212e 	bgeu	r4,r23,807b78 <__svfscanf_r+0xd4>
  8086f4:	bdffffc4 	addi	r23,r23,-1
  8086f8:	b9400007 	ldb	r5,0(r23)
  8086fc:	b009883a 	mov	r4,r22
  808700:	800d883a 	mov	r6,r16
  808704:	08059ac0 	call	8059ac <_ungetc_r>
  808708:	d880a517 	ldw	r2,660(sp)
  80870c:	15fff936 	bltu	r2,r23,8086f4 <__svfscanf_r+0xc50>
  808710:	003d1906 	br	807b78 <__svfscanf_r+0xd4>
  808714:	a880008c 	andi	r2,r21,2
  808718:	10011926 	beq	r2,zero,808b80 <__svfscanf_r+0x10dc>
  80871c:	d900a417 	ldw	r4,656(sp)
  808720:	20800017 	ldw	r2,0(r4)
  808724:	25400104 	addi	r21,r4,4
  808728:	10c00115 	stw	r3,4(r2)
  80872c:	14800015 	stw	r18,0(r2)
  808730:	003fe906 	br	8086d8 <__svfscanf_r+0xc34>
  808734:	d8c09c17 	ldw	r3,624(sp)
  808738:	b009883a 	mov	r4,r22
  80873c:	000d883a 	mov	r6,zero
  808740:	19400044 	addi	r5,r3,1
  808744:	01c00284 	movi	r7,10
  808748:	080e8040 	call	80e804 <_strtol_r>
  80874c:	d9009d17 	ldw	r4,628(sp)
  808750:	110dc83a 	sub	r6,r2,r4
  808754:	d8c0a517 	ldw	r3,660(sp)
  808758:	d9009c17 	ldw	r4,624(sp)
  80875c:	188054c4 	addi	r2,r3,339
  808760:	20800236 	bltu	r4,r2,80876c <__svfscanf_r+0xcc8>
  808764:	18805484 	addi	r2,r3,338
  808768:	d8809c15 	stw	r2,624(sp)
  80876c:	d9009c17 	ldw	r4,624(sp)
  808770:	01402074 	movhi	r5,129
  808774:	29549e04 	addi	r5,r5,21112
  808778:	080cf200 	call	80cf20 <sprintf>
  80877c:	003fc806 	br	8086a0 <__svfscanf_r+0xbfc>
  808780:	0027883a 	mov	r19,zero
  808784:	d8c04404 	addi	r3,sp,272
  808788:	d8c0a515 	stw	r3,660(sp)
  80878c:	182f883a 	mov	r23,r3
  808790:	d8009f15 	stw	zero,636(sp)
  808794:	d8009e15 	stw	zero,632(sp)
  808798:	d8009d15 	stw	zero,628(sp)
  80879c:	d8009c15 	stw	zero,624(sp)
  8087a0:	0039883a 	mov	fp,zero
  8087a4:	0025883a 	mov	r18,zero
  8087a8:	80800017 	ldw	r2,0(r16)
  8087ac:	11400003 	ldbu	r5,0(r2)
  8087b0:	00801384 	movi	r2,78
  8087b4:	28fff544 	addi	r3,r5,-43
  8087b8:	18c03fcc 	andi	r3,r3,255
  8087bc:	10c08336 	bltu	r2,r3,8089cc <__svfscanf_r+0xf28>
  8087c0:	18c5883a 	add	r2,r3,r3
  8087c4:	1085883a 	add	r2,r2,r2
  8087c8:	00c02074 	movhi	r3,129
  8087cc:	18e1f704 	addi	r3,r3,-30756
  8087d0:	10c5883a 	add	r2,r2,r3
  8087d4:	11000017 	ldw	r4,0(r2)
  8087d8:	2000683a 	jmp	r4
  8087dc:	00808984 	movi	r2,550
  8087e0:	008089cc 	andi	r2,zero,551
  8087e4:	00808984 	movi	r2,550
  8087e8:	00808a10 	cmplti	r2,zero,552
  8087ec:	008089cc 	andi	r2,zero,551
  8087f0:	00808a7c 	xorhi	r2,zero,553
  8087f4:	00808ab0 	cmpltui	r2,zero,554
  8087f8:	00808ab0 	cmpltui	r2,zero,554
  8087fc:	00808ab0 	cmpltui	r2,zero,554
  808800:	00808ab0 	cmpltui	r2,zero,554
  808804:	00808ab0 	cmpltui	r2,zero,554
  808808:	00808ab0 	cmpltui	r2,zero,554
  80880c:	00808ab0 	cmpltui	r2,zero,554
  808810:	00808ab0 	cmpltui	r2,zero,554
  808814:	00808ab0 	cmpltui	r2,zero,554
  808818:	008089cc 	andi	r2,zero,551
  80881c:	008089cc 	andi	r2,zero,551
  808820:	008089cc 	andi	r2,zero,551
  808824:	008089cc 	andi	r2,zero,551
  808828:	008089cc 	andi	r2,zero,551
  80882c:	008089cc 	andi	r2,zero,551
  808830:	008089cc 	andi	r2,zero,551
  808834:	00808ad0 	cmplti	r2,zero,555
  808838:	008089cc 	andi	r2,zero,551
  80883c:	008089cc 	andi	r2,zero,551
  808840:	008089cc 	andi	r2,zero,551
  808844:	00808ae0 	cmpeqi	r2,zero,555
  808848:	00808b2c 	andhi	r2,zero,556
  80884c:	008089cc 	andi	r2,zero,551
  808850:	008089cc 	andi	r2,zero,551
  808854:	00808c04 	movi	r2,560
  808858:	008089cc 	andi	r2,zero,551
  80885c:	008089cc 	andi	r2,zero,551
  808860:	008089cc 	andi	r2,zero,551
  808864:	008089cc 	andi	r2,zero,551
  808868:	00808bb0 	cmpltui	r2,zero,558
  80886c:	008089cc 	andi	r2,zero,551
  808870:	008089cc 	andi	r2,zero,551
  808874:	008089cc 	andi	r2,zero,551
  808878:	008089cc 	andi	r2,zero,551
  80887c:	008089cc 	andi	r2,zero,551
  808880:	00808c44 	movi	r2,561
  808884:	008089cc 	andi	r2,zero,551
  808888:	008089cc 	andi	r2,zero,551
  80888c:	008089cc 	andi	r2,zero,551
  808890:	008089cc 	andi	r2,zero,551
  808894:	00808b48 	cmpgei	r2,zero,557
  808898:	008089cc 	andi	r2,zero,551
  80889c:	008089cc 	andi	r2,zero,551
  8088a0:	008089cc 	andi	r2,zero,551
  8088a4:	008089cc 	andi	r2,zero,551
  8088a8:	008089cc 	andi	r2,zero,551
  8088ac:	008089cc 	andi	r2,zero,551
  8088b0:	008089cc 	andi	r2,zero,551
  8088b4:	00808ad0 	cmplti	r2,zero,555
  8088b8:	008089cc 	andi	r2,zero,551
  8088bc:	008089cc 	andi	r2,zero,551
  8088c0:	008089cc 	andi	r2,zero,551
  8088c4:	00808ae0 	cmpeqi	r2,zero,555
  8088c8:	00808b2c 	andhi	r2,zero,556
  8088cc:	008089cc 	andi	r2,zero,551
  8088d0:	008089cc 	andi	r2,zero,551
  8088d4:	00808c04 	movi	r2,560
  8088d8:	008089cc 	andi	r2,zero,551
  8088dc:	008089cc 	andi	r2,zero,551
  8088e0:	008089cc 	andi	r2,zero,551
  8088e4:	008089cc 	andi	r2,zero,551
  8088e8:	00808bb0 	cmpltui	r2,zero,558
  8088ec:	008089cc 	andi	r2,zero,551
  8088f0:	008089cc 	andi	r2,zero,551
  8088f4:	008089cc 	andi	r2,zero,551
  8088f8:	008089cc 	andi	r2,zero,551
  8088fc:	008089cc 	andi	r2,zero,551
  808900:	00808c44 	movi	r2,561
  808904:	008089cc 	andi	r2,zero,551
  808908:	008089cc 	andi	r2,zero,551
  80890c:	008089cc 	andi	r2,zero,551
  808910:	008089cc 	andi	r2,zero,551
  808914:	00808b48 	cmpgei	r2,zero,557
  808918:	a880040c 	andi	r2,r21,16
  80891c:	10004826 	beq	r2,zero,808a40 <__svfscanf_r+0xf9c>
  808920:	0027883a 	mov	r19,zero
  808924:	00000b06 	br	808954 <__svfscanf_r+0xeb0>
  808928:	80800017 	ldw	r2,0(r16)
  80892c:	b009883a 	mov	r4,r22
  808930:	800b883a 	mov	r5,r16
  808934:	148d883a 	add	r6,r2,r18
  808938:	81800015 	stw	r6,0(r16)
  80893c:	9ca7883a 	add	r19,r19,r18
  808940:	08052540 	call	805254 <__srefill_r>
  808944:	103dc61e 	bne	r2,zero,808060 <__svfscanf_r+0x5bc>
  808948:	d880a317 	ldw	r2,652(sp)
  80894c:	1485c83a 	sub	r2,r2,r18
  808950:	d880a315 	stw	r2,652(sp)
  808954:	84800117 	ldw	r18,4(r16)
  808958:	d900a317 	ldw	r4,652(sp)
  80895c:	913ff216 	blt	r18,r4,808928 <__svfscanf_r+0xe84>
  808960:	d900a317 	ldw	r4,652(sp)
  808964:	80800017 	ldw	r2,0(r16)
  808968:	9927883a 	add	r19,r19,r4
  80896c:	9107c83a 	sub	r3,r18,r4
  808970:	110d883a 	add	r6,r2,r4
  808974:	8ce3883a 	add	r17,r17,r19
  808978:	80c00115 	stw	r3,4(r16)
  80897c:	81800015 	stw	r6,0(r16)
  808980:	003c5b06 	br	807af0 <__svfscanf_r+0x4c>
  808984:	a880200c 	andi	r2,r21,128
  808988:	10001026 	beq	r2,zero,8089cc <__svfscanf_r+0xf28>
  80898c:	00bfdfc4 	movi	r2,-129
  808990:	a8aa703a 	and	r21,r21,r2
  808994:	b9400005 	stb	r5,0(r23)
  808998:	bdc00044 	addi	r23,r23,1
  80899c:	80c00117 	ldw	r3,4(r16)
  8089a0:	8c400044 	addi	r17,r17,1
  8089a4:	18bfffc4 	addi	r2,r3,-1
  8089a8:	80800115 	stw	r2,4(r16)
  8089ac:	00801f0e 	bge	zero,r2,808a2c <__svfscanf_r+0xf88>
  8089b0:	80800017 	ldw	r2,0(r16)
  8089b4:	10800044 	addi	r2,r2,1
  8089b8:	80800015 	stw	r2,0(r16)
  8089bc:	d880a317 	ldw	r2,652(sp)
  8089c0:	10bfffc4 	addi	r2,r2,-1
  8089c4:	d880a315 	stw	r2,652(sp)
  8089c8:	103f771e 	bne	r2,zero,8087a8 <__svfscanf_r+0xd04>
  8089cc:	d8c09e17 	ldw	r3,632(sp)
  8089d0:	18000226 	beq	r3,zero,8089dc <__svfscanf_r+0xf38>
  8089d4:	00bfbfc4 	movi	r2,-257
  8089d8:	a8aa703a 	and	r21,r21,r2
  8089dc:	90ffffc4 	addi	r3,r18,-1
  8089e0:	00800044 	movi	r2,1
  8089e4:	10fef536 	bltu	r2,r3,8085bc <__svfscanf_r+0xb18>
  8089e8:	d900a517 	ldw	r4,660(sp)
  8089ec:	25fc622e 	bgeu	r4,r23,807b78 <__svfscanf_r+0xd4>
  8089f0:	bdffffc4 	addi	r23,r23,-1
  8089f4:	b9400007 	ldb	r5,0(r23)
  8089f8:	b009883a 	mov	r4,r22
  8089fc:	800d883a 	mov	r6,r16
  808a00:	08059ac0 	call	8059ac <_ungetc_r>
  808a04:	d880a517 	ldw	r2,660(sp)
  808a08:	15fff936 	bltu	r2,r23,8089f0 <__svfscanf_r+0xf4c>
  808a0c:	003c5a06 	br	807b78 <__svfscanf_r+0xd4>
  808a10:	a880800c 	andi	r2,r21,512
  808a14:	103fed26 	beq	r2,zero,8089cc <__svfscanf_r+0xf28>
  808a18:	d9009e17 	ldw	r4,632(sp)
  808a1c:	00bf5fc4 	movi	r2,-641
  808a20:	a8aa703a 	and	r21,r21,r2
  808a24:	d9009f15 	stw	r4,636(sp)
  808a28:	003fda06 	br	808994 <__svfscanf_r+0xef0>
  808a2c:	b009883a 	mov	r4,r22
  808a30:	800b883a 	mov	r5,r16
  808a34:	08052540 	call	805254 <__srefill_r>
  808a38:	103fe026 	beq	r2,zero,8089bc <__svfscanf_r+0xf18>
  808a3c:	003fe306 	br	8089cc <__svfscanf_r+0xf28>
  808a40:	d880a417 	ldw	r2,656(sp)
  808a44:	d980a317 	ldw	r6,652(sp)
  808a48:	01400044 	movi	r5,1
  808a4c:	11000017 	ldw	r4,0(r2)
  808a50:	800f883a 	mov	r7,r16
  808a54:	080396c0 	call	80396c <fread>
  808a58:	103c6726 	beq	r2,zero,807bf8 <__svfscanf_r+0x154>
  808a5c:	d8c0a417 	ldw	r3,656(sp)
  808a60:	d900a217 	ldw	r4,648(sp)
  808a64:	88a3883a 	add	r17,r17,r2
  808a68:	18c00104 	addi	r3,r3,4
  808a6c:	21000044 	addi	r4,r4,1
  808a70:	d8c0a415 	stw	r3,656(sp)
  808a74:	d900a215 	stw	r4,648(sp)
  808a78:	003c1d06 	br	807af0 <__svfscanf_r+0x4c>
  808a7c:	a880400c 	andi	r2,r21,256
  808a80:	10000b26 	beq	r2,zero,808ab0 <__svfscanf_r+0x100c>
  808a84:	00bfdfc4 	movi	r2,-129
  808a88:	a8aa703a 	and	r21,r21,r2
  808a8c:	d8809e17 	ldw	r2,632(sp)
  808a90:	10800044 	addi	r2,r2,1
  808a94:	d8809e15 	stw	r2,632(sp)
  808a98:	983fc026 	beq	r19,zero,80899c <__svfscanf_r+0xef8>
  808a9c:	d8c0a317 	ldw	r3,652(sp)
  808aa0:	9cffffc4 	addi	r19,r19,-1
  808aa4:	18c00044 	addi	r3,r3,1
  808aa8:	d8c0a315 	stw	r3,652(sp)
  808aac:	003fbb06 	br	80899c <__svfscanf_r+0xef8>
  808ab0:	e0803fcc 	andi	r2,fp,255
  808ab4:	1080201c 	xori	r2,r2,128
  808ab8:	10bfe004 	addi	r2,r2,-128
  808abc:	9085883a 	add	r2,r18,r2
  808ac0:	103fc21e 	bne	r2,zero,8089cc <__svfscanf_r+0xf28>
  808ac4:	00bf9fc4 	movi	r2,-385
  808ac8:	a8aa703a 	and	r21,r21,r2
  808acc:	003fb106 	br	808994 <__svfscanf_r+0xef0>
  808ad0:	00800044 	movi	r2,1
  808ad4:	90bfbd1e 	bne	r18,r2,8089cc <__svfscanf_r+0xf28>
  808ad8:	04800084 	movi	r18,2
  808adc:	003fad06 	br	808994 <__svfscanf_r+0xef0>
  808ae0:	a8c1400c 	andi	r3,r21,1280
  808ae4:	00810004 	movi	r2,1024
  808ae8:	18800426 	beq	r3,r2,808afc <__svfscanf_r+0x1058>
  808aec:	a884703a 	and	r2,r21,r2
  808af0:	103fb626 	beq	r2,zero,8089cc <__svfscanf_r+0xf28>
  808af4:	d8809e17 	ldw	r2,632(sp)
  808af8:	103fb826 	beq	r2,zero,8089dc <__svfscanf_r+0xf38>
  808afc:	a880800c 	andi	r2,r21,512
  808b00:	1000051e 	bne	r2,zero,808b18 <__svfscanf_r+0x1074>
  808b04:	d8c09e17 	ldw	r3,632(sp)
  808b08:	d9009f17 	ldw	r4,636(sp)
  808b0c:	ddc09c15 	stw	r23,624(sp)
  808b10:	1907c83a 	sub	r3,r3,r4
  808b14:	d8c09d15 	stw	r3,628(sp)
  808b18:	00be7fc4 	movi	r2,-1537
  808b1c:	a884703a 	and	r2,r21,r2
  808b20:	15406014 	ori	r21,r2,384
  808b24:	d8009e15 	stw	zero,632(sp)
  808b28:	003f9a06 	br	808994 <__svfscanf_r+0xef0>
  808b2c:	e0c03fcc 	andi	r3,fp,255
  808b30:	18c0201c 	xori	r3,r3,128
  808b34:	18ffe004 	addi	r3,r3,-128
  808b38:	00800084 	movi	r2,2
  808b3c:	18bfa31e 	bne	r3,r2,8089cc <__svfscanf_r+0xf28>
  808b40:	070000c4 	movi	fp,3
  808b44:	003f9306 	br	808994 <__svfscanf_r+0xef0>
  808b48:	e0c03fcc 	andi	r3,fp,255
  808b4c:	18c0201c 	xori	r3,r3,128
  808b50:	18ffe004 	addi	r3,r3,-128
  808b54:	008001c4 	movi	r2,7
  808b58:	18bf9c1e 	bne	r3,r2,8089cc <__svfscanf_r+0xf28>
  808b5c:	07000204 	movi	fp,8
  808b60:	003f8c06 	br	808994 <__svfscanf_r+0xef0>
  808b64:	d8c09e17 	ldw	r3,632(sp)
  808b68:	d9009f17 	ldw	r4,636(sp)
  808b6c:	1905c83a 	sub	r2,r3,r4
  808b70:	103ecb26 	beq	r2,zero,8086a0 <__svfscanf_r+0xbfc>
  808b74:	008dc83a 	sub	r6,zero,r2
  808b78:	ddc09c15 	stw	r23,624(sp)
  808b7c:	003ef506 	br	808754 <__svfscanf_r+0xcb0>
  808b80:	d880a417 	ldw	r2,656(sp)
  808b84:	9009883a 	mov	r4,r18
  808b88:	180b883a 	mov	r5,r3
  808b8c:	15c00017 	ldw	r23,0(r2)
  808b90:	15400104 	addi	r21,r2,4
  808b94:	080ce280 	call	80ce28 <__isnand>
  808b98:	1000311e 	bne	r2,zero,808c60 <__svfscanf_r+0x11bc>
  808b9c:	980b883a 	mov	r5,r19
  808ba0:	9009883a 	mov	r4,r18
  808ba4:	08117700 	call	811770 <__truncdfsf2>
  808ba8:	b8800015 	stw	r2,0(r23)
  808bac:	003eca06 	br	8086d8 <__svfscanf_r+0xc34>
  808bb0:	9000101e 	bne	r18,zero,808bf4 <__svfscanf_r+0x1150>
  808bb4:	a8c1c00c 	andi	r3,r21,1792
  808bb8:	0081c004 	movi	r2,1792
  808bbc:	18800926 	beq	r3,r2,808be4 <__svfscanf_r+0x1140>
  808bc0:	e0c03fcc 	andi	r3,fp,255
  808bc4:	18c0201c 	xori	r3,r3,128
  808bc8:	18ffe004 	addi	r3,r3,-128
  808bcc:	00800044 	movi	r2,1
  808bd0:	18800226 	beq	r3,r2,808bdc <__svfscanf_r+0x1138>
  808bd4:	00800104 	movi	r2,4
  808bd8:	18bf7c1e 	bne	r3,r2,8089cc <__svfscanf_r+0xf28>
  808bdc:	e7000044 	addi	fp,fp,1
  808be0:	003f6c06 	br	808994 <__svfscanf_r+0xef0>
  808be4:	00be1fc4 	movi	r2,-1921
  808be8:	a8aa703a 	and	r21,r21,r2
  808bec:	04800044 	movi	r18,1
  808bf0:	003f6806 	br	808994 <__svfscanf_r+0xef0>
  808bf4:	00800084 	movi	r2,2
  808bf8:	90bff11e 	bne	r18,r2,808bc0 <__svfscanf_r+0x111c>
  808bfc:	048000c4 	movi	r18,3
  808c00:	003f6406 	br	808994 <__svfscanf_r+0xef0>
  808c04:	e0c03fcc 	andi	r3,fp,255
  808c08:	18c0201c 	xori	r3,r3,128
  808c0c:	18ffe004 	addi	r3,r3,-128
  808c10:	1800071e 	bne	r3,zero,808c30 <__svfscanf_r+0x118c>
  808c14:	a8c1c00c 	andi	r3,r21,1792
  808c18:	0081c004 	movi	r2,1792
  808c1c:	18bf6b1e 	bne	r3,r2,8089cc <__svfscanf_r+0xf28>
  808c20:	00be1fc4 	movi	r2,-1921
  808c24:	a8aa703a 	and	r21,r21,r2
  808c28:	07000044 	movi	fp,1
  808c2c:	003f5906 	br	808994 <__svfscanf_r+0xef0>
  808c30:	008000c4 	movi	r2,3
  808c34:	18bfe926 	beq	r3,r2,808bdc <__svfscanf_r+0x1138>
  808c38:	00800144 	movi	r2,5
  808c3c:	18bfe726 	beq	r3,r2,808bdc <__svfscanf_r+0x1138>
  808c40:	003f6206 	br	8089cc <__svfscanf_r+0xf28>
  808c44:	e0c03fcc 	andi	r3,fp,255
  808c48:	18c0201c 	xori	r3,r3,128
  808c4c:	18ffe004 	addi	r3,r3,-128
  808c50:	00800184 	movi	r2,6
  808c54:	18bf5d1e 	bne	r3,r2,8089cc <__svfscanf_r+0xf28>
  808c58:	070001c4 	movi	fp,7
  808c5c:	003f4d06 	br	808994 <__svfscanf_r+0xef0>
  808c60:	0009883a 	mov	r4,zero
  808c64:	080cf180 	call	80cf18 <nanf>
  808c68:	b8800015 	stw	r2,0(r23)
  808c6c:	003e9a06 	br	8086d8 <__svfscanf_r+0xc34>
  808c70:	a00b883a 	mov	r5,r20
  808c74:	d9000404 	addi	r4,sp,16
  808c78:	080ce580 	call	80ce58 <__sccl>
  808c7c:	1029883a 	mov	r20,r2
  808c80:	ad401014 	ori	r21,r21,64
  808c84:	04800044 	movi	r18,1
  808c88:	003c7506 	br	807e60 <__svfscanf_r+0x3bc>
  808c8c:	01000204 	movi	r4,8
  808c90:	00802074 	movhi	r2,129
  808c94:	10bb6404 	addi	r2,r2,-4720
  808c98:	ad400054 	ori	r21,r21,1
  808c9c:	048000c4 	movi	r18,3
  808ca0:	d900a115 	stw	r4,644(sp)
  808ca4:	d880a015 	stw	r2,640(sp)
  808ca8:	003c6d06 	br	807e60 <__svfscanf_r+0x3bc>
  808cac:	ad400094 	ori	r21,r21,2
  808cb0:	003bd806 	br	807c14 <__svfscanf_r+0x170>
  808cb4:	d900a317 	ldw	r4,652(sp)
  808cb8:	01400284 	movi	r5,10
  808cbc:	08026a00 	call	8026a0 <__mulsi3>
  808cc0:	15c5883a 	add	r2,r2,r23
  808cc4:	10bff404 	addi	r2,r2,-48
  808cc8:	d880a315 	stw	r2,652(sp)
  808ccc:	003bd106 	br	807c14 <__svfscanf_r+0x170>
  808cd0:	ad400414 	ori	r21,r21,16
  808cd4:	003bcf06 	br	807c14 <__svfscanf_r+0x170>
  808cd8:	00800404 	movi	r2,16
  808cdc:	00c02074 	movhi	r3,129
  808ce0:	18fb6404 	addi	r3,r3,-4720
  808ce4:	ad408014 	ori	r21,r21,512
  808ce8:	048000c4 	movi	r18,3
  808cec:	d880a115 	stw	r2,644(sp)
  808cf0:	d8c0a015 	stw	r3,640(sp)
  808cf4:	003c5a06 	br	807e60 <__svfscanf_r+0x3bc>
  808cf8:	00c00284 	movi	r3,10
  808cfc:	01002074 	movhi	r4,129
  808d00:	213b6404 	addi	r4,r4,-4720
  808d04:	048000c4 	movi	r18,3
  808d08:	d8c0a115 	stw	r3,644(sp)
  808d0c:	d900a015 	stw	r4,640(sp)
  808d10:	003c5306 	br	807e60 <__svfscanf_r+0x3bc>
  808d14:	00c02074 	movhi	r3,129
  808d18:	18fa0104 	addi	r3,r3,-6140
  808d1c:	048000c4 	movi	r18,3
  808d20:	d8c0a015 	stw	r3,640(sp)
  808d24:	d800a115 	stw	zero,644(sp)
  808d28:	003c4d06 	br	807e60 <__svfscanf_r+0x3bc>
  808d2c:	d8c0a117 	ldw	r3,644(sp)
  808d30:	18c5883a 	add	r2,r3,r3
  808d34:	00c02074 	movhi	r3,129
  808d38:	18d49f84 	addi	r3,r3,21118
  808d3c:	10c5883a 	add	r2,r2,r3
  808d40:	1080000f 	ldh	r2,0(r2)
  808d44:	00fd1fc4 	movi	r3,-2945
  808d48:	90e4703a 	and	r18,r18,r3
  808d4c:	d880a115 	stw	r2,644(sp)
  808d50:	003de806 	br	8084f4 <__svfscanf_r+0xa50>
  808d54:	d900a117 	ldw	r4,644(sp)
  808d58:	00c02074 	movhi	r3,129
  808d5c:	18d49f84 	addi	r3,r3,21118
  808d60:	2105883a 	add	r2,r4,r4
  808d64:	10c5883a 	add	r2,r2,r3
  808d68:	1080000f 	ldh	r2,0(r2)
  808d6c:	00c00204 	movi	r3,8
  808d70:	d880a115 	stw	r2,644(sp)
  808d74:	18bd870e 	bge	r3,r2,808394 <__svfscanf_r+0x8f0>
  808d78:	00bd1fc4 	movi	r2,-2945
  808d7c:	90a4703a 	and	r18,r18,r2
  808d80:	003ddc06 	br	8084f4 <__svfscanf_r+0xa50>
  808d84:	d8c0a117 	ldw	r3,644(sp)
  808d88:	00800284 	movi	r2,10
  808d8c:	10fffa16 	blt	r2,r3,808d78 <__svfscanf_r+0x12d4>
  808d90:	003d8006 	br	808394 <__svfscanf_r+0x8f0>
  808d94:	90c1800c 	andi	r3,r18,1536
  808d98:	00808004 	movi	r2,512
  808d9c:	18bd7d1e 	bne	r3,r2,808394 <__svfscanf_r+0x8f0>
  808da0:	00bf7fc4 	movi	r2,-513
  808da4:	9084703a 	and	r2,r18,r2
  808da8:	01000404 	movi	r4,16
  808dac:	14814014 	ori	r18,r2,1280
  808db0:	d900a115 	stw	r4,644(sp)
  808db4:	003dcf06 	br	8084f4 <__svfscanf_r+0xa50>
  808db8:	04800104 	movi	r18,4
  808dbc:	003c2806 	br	807e60 <__svfscanf_r+0x3bc>
  808dc0:	ad401014 	ori	r21,r21,64
  808dc4:	0025883a 	mov	r18,zero
  808dc8:	003c2506 	br	807e60 <__svfscanf_r+0x3bc>
  808dcc:	ad400114 	ori	r21,r21,4
  808dd0:	003b9006 	br	807c14 <__svfscanf_r+0x170>
  808dd4:	0027883a 	mov	r19,zero
  808dd8:	003cac06 	br	80808c <__svfscanf_r+0x5e8>
  808ddc:	903d5226 	beq	r18,zero,808328 <__svfscanf_r+0x884>
  808de0:	94bfffc4 	addi	r18,r18,-1
  808de4:	d8c04404 	addi	r3,sp,272
  808de8:	1c85883a 	add	r2,r3,r18
  808dec:	11400003 	ldbu	r5,0(r2)
  808df0:	b009883a 	mov	r4,r22
  808df4:	800d883a 	mov	r6,r16
  808df8:	08059ac0 	call	8059ac <_ungetc_r>
  808dfc:	003ff706 	br	808ddc <__svfscanf_r+0x1338>
  808e00:	00bfff84 	movi	r2,-2
  808e04:	18bd361e 	bne	r3,r2,8082e0 <__svfscanf_r+0x83c>
  808e08:	003d4006 	br	80830c <__svfscanf_r+0x868>
  808e0c:	d900a417 	ldw	r4,656(sp)
  808e10:	25400017 	ldw	r21,0(r4)
  808e14:	21000104 	addi	r4,r4,4
  808e18:	d900a415 	stw	r4,656(sp)
  808e1c:	003d0606 	br	808238 <__svfscanf_r+0x794>
  808e20:	983b5526 	beq	r19,zero,807b78 <__svfscanf_r+0xd4>
  808e24:	8ce3883a 	add	r17,r17,r19
  808e28:	003b3106 	br	807af0 <__svfscanf_r+0x4c>
  808e2c:	00bfff84 	movi	r2,-2
  808e30:	18bc621e 	bne	r3,r2,807fbc <__svfscanf_r+0x518>
  808e34:	003c6906 	br	807fdc <__svfscanf_r+0x538>
  808e38:	b009883a 	mov	r4,r22
  808e3c:	800b883a 	mov	r5,r16
  808e40:	08052540 	call	805254 <__srefill_r>
  808e44:	103c6726 	beq	r2,zero,807fe4 <__svfscanf_r+0x540>
  808e48:	903b6b1e 	bne	r18,zero,807bf8 <__svfscanf_r+0x154>
  808e4c:	a83b281e 	bne	r21,zero,807af0 <__svfscanf_r+0x4c>
  808e50:	d8c0a217 	ldw	r3,648(sp)
  808e54:	18c00044 	addi	r3,r3,1
  808e58:	d8c0a215 	stw	r3,648(sp)
  808e5c:	003b2406 	br	807af0 <__svfscanf_r+0x4c>
  808e60:	8080030b 	ldhu	r2,12(r16)
  808e64:	1080100c 	andi	r2,r2,64
  808e68:	103b4326 	beq	r2,zero,807b78 <__svfscanf_r+0xd4>
  808e6c:	003b6406 	br	807c00 <__svfscanf_r+0x15c>
  808e70:	d8c0a417 	ldw	r3,656(sp)
  808e74:	1cc00017 	ldw	r19,0(r3)
  808e78:	18c00104 	addi	r3,r3,4
  808e7c:	d8c0a415 	stw	r3,656(sp)
  808e80:	003c2906 	br	807f28 <__svfscanf_r+0x484>
  808e84:	00800204 	movi	r2,8
  808e88:	00c02074 	movhi	r3,129
  808e8c:	18fb6404 	addi	r3,r3,-4720
  808e90:	048000c4 	movi	r18,3
  808e94:	d880a115 	stw	r2,644(sp)
  808e98:	d8c0a015 	stw	r3,640(sp)
  808e9c:	003bf006 	br	807e60 <__svfscanf_r+0x3bc>
  808ea0:	04800084 	movi	r18,2
  808ea4:	003bee06 	br	807e60 <__svfscanf_r+0x3bc>
  808ea8:	01000404 	movi	r4,16
  808eac:	00802074 	movhi	r2,129
  808eb0:	10bb6404 	addi	r2,r2,-4720
  808eb4:	ad408814 	ori	r21,r21,544
  808eb8:	048000c4 	movi	r18,3
  808ebc:	d900a115 	stw	r4,644(sp)
  808ec0:	d880a015 	stw	r2,640(sp)
  808ec4:	003be606 	br	807e60 <__svfscanf_r+0x3bc>
  808ec8:	a880040c 	andi	r2,r21,16
  808ecc:	103b081e 	bne	r2,zero,807af0 <__svfscanf_r+0x4c>
  808ed0:	a880010c 	andi	r2,r21,4
  808ed4:	10004e26 	beq	r2,zero,809010 <__svfscanf_r+0x156c>
  808ed8:	d8c0a417 	ldw	r3,656(sp)
  808edc:	18800017 	ldw	r2,0(r3)
  808ee0:	18c00104 	addi	r3,r3,4
  808ee4:	d8c0a415 	stw	r3,656(sp)
  808ee8:	1440000d 	sth	r17,0(r2)
  808eec:	003b0006 	br	807af0 <__svfscanf_r+0x4c>
  808ef0:	d880a417 	ldw	r2,656(sp)
  808ef4:	dd400404 	addi	r21,sp,16
  808ef8:	14800017 	ldw	r18,0(r2)
  808efc:	9027883a 	mov	r19,r18
  808f00:	81000017 	ldw	r4,0(r16)
  808f04:	20800003 	ldbu	r2,0(r4)
  808f08:	a885883a 	add	r2,r21,r2
  808f0c:	10c00007 	ldb	r3,0(r2)
  808f10:	18001426 	beq	r3,zero,808f64 <__svfscanf_r+0x14c0>
  808f14:	d8c0a317 	ldw	r3,652(sp)
  808f18:	80800117 	ldw	r2,4(r16)
  808f1c:	21800044 	addi	r6,r4,1
  808f20:	18ffffc4 	addi	r3,r3,-1
  808f24:	d8c0a315 	stw	r3,652(sp)
  808f28:	10ffffc4 	addi	r3,r2,-1
  808f2c:	80c00115 	stw	r3,4(r16)
  808f30:	20800003 	ldbu	r2,0(r4)
  808f34:	90800005 	stb	r2,0(r18)
  808f38:	d900a317 	ldw	r4,652(sp)
  808f3c:	81800015 	stw	r6,0(r16)
  808f40:	94800044 	addi	r18,r18,1
  808f44:	20000726 	beq	r4,zero,808f64 <__svfscanf_r+0x14c0>
  808f48:	80800117 	ldw	r2,4(r16)
  808f4c:	00bfec16 	blt	zero,r2,808f00 <__svfscanf_r+0x145c>
  808f50:	b009883a 	mov	r4,r22
  808f54:	800b883a 	mov	r5,r16
  808f58:	08052540 	call	805254 <__srefill_r>
  808f5c:	103fe826 	beq	r2,zero,808f00 <__svfscanf_r+0x145c>
  808f60:	9cbb2526 	beq	r19,r18,807bf8 <__svfscanf_r+0x154>
  808f64:	94e7c83a 	sub	r19,r18,r19
  808f68:	983b0326 	beq	r19,zero,807b78 <__svfscanf_r+0xd4>
  808f6c:	90000005 	stb	zero,0(r18)
  808f70:	d880a417 	ldw	r2,656(sp)
  808f74:	d8c0a217 	ldw	r3,648(sp)
  808f78:	8ce3883a 	add	r17,r17,r19
  808f7c:	10800104 	addi	r2,r2,4
  808f80:	18c00044 	addi	r3,r3,1
  808f84:	d880a415 	stw	r2,656(sp)
  808f88:	d8c0a215 	stw	r3,648(sp)
  808f8c:	003ad806 	br	807af0 <__svfscanf_r+0x4c>
  808f90:	d900a517 	ldw	r4,660(sp)
  808f94:	25faf82e 	bgeu	r4,r23,807b78 <__svfscanf_r+0xd4>
  808f98:	bdffffc4 	addi	r23,r23,-1
  808f9c:	b9400007 	ldb	r5,0(r23)
  808fa0:	b009883a 	mov	r4,r22
  808fa4:	800d883a 	mov	r6,r16
  808fa8:	08059ac0 	call	8059ac <_ungetc_r>
  808fac:	d8c0a517 	ldw	r3,660(sp)
  808fb0:	1dfff936 	bltu	r3,r23,808f98 <__svfscanf_r+0x14f4>
  808fb4:	003af006 	br	807b78 <__svfscanf_r+0xd4>
  808fb8:	a880040c 	andi	r2,r21,16
  808fbc:	10002d26 	beq	r2,zero,809074 <__svfscanf_r+0x15d0>
  808fc0:	0025883a 	mov	r18,zero
  808fc4:	00000906 	br	808fec <__svfscanf_r+0x1548>
  808fc8:	80c00117 	ldw	r3,4(r16)
  808fcc:	d880a317 	ldw	r2,652(sp)
  808fd0:	29800044 	addi	r6,r5,1
  808fd4:	18ffffc4 	addi	r3,r3,-1
  808fd8:	94800044 	addi	r18,r18,1
  808fdc:	81800015 	stw	r6,0(r16)
  808fe0:	80c00115 	stw	r3,4(r16)
  808fe4:	14800826 	beq	r2,r18,809008 <__svfscanf_r+0x1564>
  808fe8:	00c0120e 	bge	zero,r3,809034 <__svfscanf_r+0x1590>
  808fec:	81400017 	ldw	r5,0(r16)
  808ff0:	98800017 	ldw	r2,0(r19)
  808ff4:	28c00003 	ldbu	r3,0(r5)
  808ff8:	1887883a 	add	r3,r3,r2
  808ffc:	19000003 	ldbu	r4,0(r3)
  809000:	2100020c 	andi	r4,r4,8
  809004:	203ff026 	beq	r4,zero,808fc8 <__svfscanf_r+0x1524>
  809008:	8ca3883a 	add	r17,r17,r18
  80900c:	003ab806 	br	807af0 <__svfscanf_r+0x4c>
  809010:	a880004c 	andi	r2,r21,1
  809014:	1005003a 	cmpeq	r2,r2,zero
  809018:	10000b1e 	bne	r2,zero,809048 <__svfscanf_r+0x15a4>
  80901c:	d900a417 	ldw	r4,656(sp)
  809020:	20800017 	ldw	r2,0(r4)
  809024:	21000104 	addi	r4,r4,4
  809028:	d900a415 	stw	r4,656(sp)
  80902c:	14400015 	stw	r17,0(r2)
  809030:	003aaf06 	br	807af0 <__svfscanf_r+0x4c>
  809034:	b009883a 	mov	r4,r22
  809038:	800b883a 	mov	r5,r16
  80903c:	08052540 	call	805254 <__srefill_r>
  809040:	103fea26 	beq	r2,zero,808fec <__svfscanf_r+0x1548>
  809044:	003ff006 	br	809008 <__svfscanf_r+0x1564>
  809048:	a880008c 	andi	r2,r21,2
  80904c:	10002c26 	beq	r2,zero,809100 <__svfscanf_r+0x165c>
  809050:	d8c0a417 	ldw	r3,656(sp)
  809054:	d900a417 	ldw	r4,656(sp)
  809058:	18800017 	ldw	r2,0(r3)
  80905c:	8807d7fa 	srai	r3,r17,31
  809060:	21000104 	addi	r4,r4,4
  809064:	d900a415 	stw	r4,656(sp)
  809068:	14400015 	stw	r17,0(r2)
  80906c:	10c00115 	stw	r3,4(r2)
  809070:	003a9f06 	br	807af0 <__svfscanf_r+0x4c>
  809074:	d8c0a417 	ldw	r3,656(sp)
  809078:	1d400017 	ldw	r21,0(r3)
  80907c:	a825883a 	mov	r18,r21
  809080:	00000e06 	br	8090bc <__svfscanf_r+0x1618>
  809084:	80800117 	ldw	r2,4(r16)
  809088:	d900a317 	ldw	r4,652(sp)
  80908c:	29800044 	addi	r6,r5,1
  809090:	10ffffc4 	addi	r3,r2,-1
  809094:	213fffc4 	addi	r4,r4,-1
  809098:	d900a315 	stw	r4,652(sp)
  80909c:	80c00115 	stw	r3,4(r16)
  8090a0:	28800003 	ldbu	r2,0(r5)
  8090a4:	90800005 	stb	r2,0(r18)
  8090a8:	81800015 	stw	r6,0(r16)
  8090ac:	94800044 	addi	r18,r18,1
  8090b0:	20000926 	beq	r4,zero,8090d8 <__svfscanf_r+0x1634>
  8090b4:	80800117 	ldw	r2,4(r16)
  8090b8:	0080170e 	bge	zero,r2,809118 <__svfscanf_r+0x1674>
  8090bc:	81400017 	ldw	r5,0(r16)
  8090c0:	98800017 	ldw	r2,0(r19)
  8090c4:	28c00003 	ldbu	r3,0(r5)
  8090c8:	1887883a 	add	r3,r3,r2
  8090cc:	19000003 	ldbu	r4,0(r3)
  8090d0:	2100020c 	andi	r4,r4,8
  8090d4:	203feb26 	beq	r4,zero,809084 <__svfscanf_r+0x15e0>
  8090d8:	9545c83a 	sub	r2,r18,r21
  8090dc:	d8c0a217 	ldw	r3,648(sp)
  8090e0:	88a3883a 	add	r17,r17,r2
  8090e4:	d880a417 	ldw	r2,656(sp)
  8090e8:	18c00044 	addi	r3,r3,1
  8090ec:	d8c0a215 	stw	r3,648(sp)
  8090f0:	10800104 	addi	r2,r2,4
  8090f4:	d880a415 	stw	r2,656(sp)
  8090f8:	90000005 	stb	zero,0(r18)
  8090fc:	003a7c06 	br	807af0 <__svfscanf_r+0x4c>
  809100:	d8c0a417 	ldw	r3,656(sp)
  809104:	18800017 	ldw	r2,0(r3)
  809108:	18c00104 	addi	r3,r3,4
  80910c:	d8c0a415 	stw	r3,656(sp)
  809110:	14400015 	stw	r17,0(r2)
  809114:	003a7606 	br	807af0 <__svfscanf_r+0x4c>
  809118:	b009883a 	mov	r4,r22
  80911c:	800b883a 	mov	r5,r16
  809120:	08052540 	call	805254 <__srefill_r>
  809124:	103fe526 	beq	r2,zero,8090bc <__svfscanf_r+0x1618>
  809128:	003feb06 	br	8090d8 <__svfscanf_r+0x1634>

0080912c <__svfscanf>:
  80912c:	00802074 	movhi	r2,129
  809130:	109bcd04 	addi	r2,r2,28468
  809134:	2013883a 	mov	r9,r4
  809138:	11000017 	ldw	r4,0(r2)
  80913c:	2805883a 	mov	r2,r5
  809140:	300f883a 	mov	r7,r6
  809144:	480b883a 	mov	r5,r9
  809148:	100d883a 	mov	r6,r2
  80914c:	0807aa41 	jmpi	807aa4 <__svfscanf_r>

00809150 <_vfscanf_r>:
  809150:	defffb04 	addi	sp,sp,-20
  809154:	dcc00315 	stw	r19,12(sp)
  809158:	dc800215 	stw	r18,8(sp)
  80915c:	dc400115 	stw	r17,4(sp)
  809160:	dc000015 	stw	r16,0(sp)
  809164:	dfc00415 	stw	ra,16(sp)
  809168:	2021883a 	mov	r16,r4
  80916c:	2823883a 	mov	r17,r5
  809170:	3025883a 	mov	r18,r6
  809174:	3827883a 	mov	r19,r7
  809178:	20000226 	beq	r4,zero,809184 <_vfscanf_r+0x34>
  80917c:	20800e17 	ldw	r2,56(r4)
  809180:	10000b26 	beq	r2,zero,8091b0 <_vfscanf_r+0x60>
  809184:	8009883a 	mov	r4,r16
  809188:	880b883a 	mov	r5,r17
  80918c:	900d883a 	mov	r6,r18
  809190:	980f883a 	mov	r7,r19
  809194:	dfc00417 	ldw	ra,16(sp)
  809198:	dcc00317 	ldw	r19,12(sp)
  80919c:	dc800217 	ldw	r18,8(sp)
  8091a0:	dc400117 	ldw	r17,4(sp)
  8091a4:	dc000017 	ldw	r16,0(sp)
  8091a8:	dec00504 	addi	sp,sp,20
  8091ac:	0807aa41 	jmpi	807aa4 <__svfscanf_r>
  8091b0:	08033640 	call	803364 <__sinit>
  8091b4:	003ff306 	br	809184 <_vfscanf_r+0x34>

008091b8 <vfscanf>:
  8091b8:	defffb04 	addi	sp,sp,-20
  8091bc:	dcc00315 	stw	r19,12(sp)
  8091c0:	04c02074 	movhi	r19,129
  8091c4:	9cdbcd04 	addi	r19,r19,28468
  8091c8:	98c00017 	ldw	r3,0(r19)
  8091cc:	dc800215 	stw	r18,8(sp)
  8091d0:	dc400115 	stw	r17,4(sp)
  8091d4:	dc000015 	stw	r16,0(sp)
  8091d8:	dfc00415 	stw	ra,16(sp)
  8091dc:	2021883a 	mov	r16,r4
  8091e0:	2823883a 	mov	r17,r5
  8091e4:	3025883a 	mov	r18,r6
  8091e8:	18000326 	beq	r3,zero,8091f8 <vfscanf+0x40>
  8091ec:	18800e17 	ldw	r2,56(r3)
  8091f0:	1809883a 	mov	r4,r3
  8091f4:	10000b26 	beq	r2,zero,809224 <vfscanf+0x6c>
  8091f8:	99000017 	ldw	r4,0(r19)
  8091fc:	800b883a 	mov	r5,r16
  809200:	880d883a 	mov	r6,r17
  809204:	900f883a 	mov	r7,r18
  809208:	dfc00417 	ldw	ra,16(sp)
  80920c:	dcc00317 	ldw	r19,12(sp)
  809210:	dc800217 	ldw	r18,8(sp)
  809214:	dc400117 	ldw	r17,4(sp)
  809218:	dc000017 	ldw	r16,0(sp)
  80921c:	dec00504 	addi	sp,sp,20
  809220:	0807aa41 	jmpi	807aa4 <__svfscanf_r>
  809224:	08033640 	call	803364 <__sinit>
  809228:	003ff306 	br	8091f8 <vfscanf+0x40>

0080922c <_write_r>:
  80922c:	defffd04 	addi	sp,sp,-12
  809230:	dc000015 	stw	r16,0(sp)
  809234:	040020b4 	movhi	r16,130
  809238:	8422b604 	addi	r16,r16,-29992
  80923c:	dc400115 	stw	r17,4(sp)
  809240:	80000015 	stw	zero,0(r16)
  809244:	2023883a 	mov	r17,r4
  809248:	2809883a 	mov	r4,r5
  80924c:	300b883a 	mov	r5,r6
  809250:	380d883a 	mov	r6,r7
  809254:	dfc00215 	stw	ra,8(sp)
  809258:	0812aa80 	call	812aa8 <write>
  80925c:	1007883a 	mov	r3,r2
  809260:	00bfffc4 	movi	r2,-1
  809264:	18800626 	beq	r3,r2,809280 <_write_r+0x54>
  809268:	1805883a 	mov	r2,r3
  80926c:	dfc00217 	ldw	ra,8(sp)
  809270:	dc400117 	ldw	r17,4(sp)
  809274:	dc000017 	ldw	r16,0(sp)
  809278:	dec00304 	addi	sp,sp,12
  80927c:	f800283a 	ret
  809280:	80800017 	ldw	r2,0(r16)
  809284:	103ff826 	beq	r2,zero,809268 <_write_r+0x3c>
  809288:	88800015 	stw	r2,0(r17)
  80928c:	1805883a 	mov	r2,r3
  809290:	dfc00217 	ldw	ra,8(sp)
  809294:	dc400117 	ldw	r17,4(sp)
  809298:	dc000017 	ldw	r16,0(sp)
  80929c:	dec00304 	addi	sp,sp,12
  8092a0:	f800283a 	ret

008092a4 <__swsetup_r>:
  8092a4:	00802074 	movhi	r2,129
  8092a8:	109bcd04 	addi	r2,r2,28468
  8092ac:	10c00017 	ldw	r3,0(r2)
  8092b0:	defffd04 	addi	sp,sp,-12
  8092b4:	dc400115 	stw	r17,4(sp)
  8092b8:	dc000015 	stw	r16,0(sp)
  8092bc:	dfc00215 	stw	ra,8(sp)
  8092c0:	2023883a 	mov	r17,r4
  8092c4:	2821883a 	mov	r16,r5
  8092c8:	18000226 	beq	r3,zero,8092d4 <__swsetup_r+0x30>
  8092cc:	18800e17 	ldw	r2,56(r3)
  8092d0:	10001f26 	beq	r2,zero,809350 <__swsetup_r+0xac>
  8092d4:	8100030b 	ldhu	r4,12(r16)
  8092d8:	2080020c 	andi	r2,r4,8
  8092dc:	10002826 	beq	r2,zero,809380 <__swsetup_r+0xdc>
  8092e0:	81400417 	ldw	r5,16(r16)
  8092e4:	28001d26 	beq	r5,zero,80935c <__swsetup_r+0xb8>
  8092e8:	2080004c 	andi	r2,r4,1
  8092ec:	1005003a 	cmpeq	r2,r2,zero
  8092f0:	10000b26 	beq	r2,zero,809320 <__swsetup_r+0x7c>
  8092f4:	2080008c 	andi	r2,r4,2
  8092f8:	10001226 	beq	r2,zero,809344 <__swsetup_r+0xa0>
  8092fc:	0005883a 	mov	r2,zero
  809300:	80800215 	stw	r2,8(r16)
  809304:	28000b26 	beq	r5,zero,809334 <__swsetup_r+0x90>
  809308:	0005883a 	mov	r2,zero
  80930c:	dfc00217 	ldw	ra,8(sp)
  809310:	dc400117 	ldw	r17,4(sp)
  809314:	dc000017 	ldw	r16,0(sp)
  809318:	dec00304 	addi	sp,sp,12
  80931c:	f800283a 	ret
  809320:	80800517 	ldw	r2,20(r16)
  809324:	80000215 	stw	zero,8(r16)
  809328:	0085c83a 	sub	r2,zero,r2
  80932c:	80800615 	stw	r2,24(r16)
  809330:	283ff51e 	bne	r5,zero,809308 <__swsetup_r+0x64>
  809334:	2080200c 	andi	r2,r4,128
  809338:	103ff326 	beq	r2,zero,809308 <__swsetup_r+0x64>
  80933c:	00bfffc4 	movi	r2,-1
  809340:	003ff206 	br	80930c <__swsetup_r+0x68>
  809344:	80800517 	ldw	r2,20(r16)
  809348:	80800215 	stw	r2,8(r16)
  80934c:	003fed06 	br	809304 <__swsetup_r+0x60>
  809350:	1809883a 	mov	r4,r3
  809354:	08033640 	call	803364 <__sinit>
  809358:	003fde06 	br	8092d4 <__swsetup_r+0x30>
  80935c:	20c0a00c 	andi	r3,r4,640
  809360:	00808004 	movi	r2,512
  809364:	18bfe026 	beq	r3,r2,8092e8 <__swsetup_r+0x44>
  809368:	8809883a 	mov	r4,r17
  80936c:	800b883a 	mov	r5,r16
  809370:	08045980 	call	804598 <__smakebuf_r>
  809374:	8100030b 	ldhu	r4,12(r16)
  809378:	81400417 	ldw	r5,16(r16)
  80937c:	003fda06 	br	8092e8 <__swsetup_r+0x44>
  809380:	2080040c 	andi	r2,r4,16
  809384:	103fed26 	beq	r2,zero,80933c <__swsetup_r+0x98>
  809388:	2080010c 	andi	r2,r4,4
  80938c:	10001226 	beq	r2,zero,8093d8 <__swsetup_r+0x134>
  809390:	81400c17 	ldw	r5,48(r16)
  809394:	28000526 	beq	r5,zero,8093ac <__swsetup_r+0x108>
  809398:	80801004 	addi	r2,r16,64
  80939c:	28800226 	beq	r5,r2,8093a8 <__swsetup_r+0x104>
  8093a0:	8809883a 	mov	r4,r17
  8093a4:	0803ad80 	call	803ad8 <_free_r>
  8093a8:	80000c15 	stw	zero,48(r16)
  8093ac:	8080030b 	ldhu	r2,12(r16)
  8093b0:	81400417 	ldw	r5,16(r16)
  8093b4:	80000115 	stw	zero,4(r16)
  8093b8:	10bff6cc 	andi	r2,r2,65499
  8093bc:	8080030d 	sth	r2,12(r16)
  8093c0:	81400015 	stw	r5,0(r16)
  8093c4:	8080030b 	ldhu	r2,12(r16)
  8093c8:	10800214 	ori	r2,r2,8
  8093cc:	113fffcc 	andi	r4,r2,65535
  8093d0:	8080030d 	sth	r2,12(r16)
  8093d4:	003fc306 	br	8092e4 <__swsetup_r+0x40>
  8093d8:	81400417 	ldw	r5,16(r16)
  8093dc:	003ff906 	br	8093c4 <__swsetup_r+0x120>

008093e0 <register_fini>:
  8093e0:	f800283a 	ret

008093e4 <__call_exitprocs>:
  8093e4:	00802074 	movhi	r2,129
  8093e8:	109bce04 	addi	r2,r2,28472
  8093ec:	10800017 	ldw	r2,0(r2)
  8093f0:	defff304 	addi	sp,sp,-52
  8093f4:	df000b15 	stw	fp,44(sp)
  8093f8:	d8800115 	stw	r2,4(sp)
  8093fc:	00802034 	movhi	r2,128
  809400:	1091cb04 	addi	r2,r2,18220
  809404:	1005003a 	cmpeq	r2,r2,zero
  809408:	d8800215 	stw	r2,8(sp)
  80940c:	d8800117 	ldw	r2,4(sp)
  809410:	dd400815 	stw	r21,32(sp)
  809414:	dd000715 	stw	r20,28(sp)
  809418:	10805204 	addi	r2,r2,328
  80941c:	dfc00c15 	stw	ra,48(sp)
  809420:	ddc00a15 	stw	r23,40(sp)
  809424:	dd800915 	stw	r22,36(sp)
  809428:	dcc00615 	stw	r19,24(sp)
  80942c:	dc800515 	stw	r18,20(sp)
  809430:	dc400415 	stw	r17,16(sp)
  809434:	dc000315 	stw	r16,12(sp)
  809438:	282b883a 	mov	r21,r5
  80943c:	2039883a 	mov	fp,r4
  809440:	d8800015 	stw	r2,0(sp)
  809444:	2829003a 	cmpeq	r20,r5,zero
  809448:	d8800117 	ldw	r2,4(sp)
  80944c:	14405217 	ldw	r17,328(r2)
  809450:	88001026 	beq	r17,zero,809494 <__call_exitprocs+0xb0>
  809454:	ddc00017 	ldw	r23,0(sp)
  809458:	88800117 	ldw	r2,4(r17)
  80945c:	8c802204 	addi	r18,r17,136
  809460:	143fffc4 	addi	r16,r2,-1
  809464:	80000916 	blt	r16,zero,80948c <__call_exitprocs+0xa8>
  809468:	05bfffc4 	movi	r22,-1
  80946c:	a000151e 	bne	r20,zero,8094c4 <__call_exitprocs+0xe0>
  809470:	8409883a 	add	r4,r16,r16
  809474:	2105883a 	add	r2,r4,r4
  809478:	1485883a 	add	r2,r2,r18
  80947c:	10c02017 	ldw	r3,128(r2)
  809480:	a8c01126 	beq	r21,r3,8094c8 <__call_exitprocs+0xe4>
  809484:	843fffc4 	addi	r16,r16,-1
  809488:	85bff81e 	bne	r16,r22,80946c <__call_exitprocs+0x88>
  80948c:	d8800217 	ldw	r2,8(sp)
  809490:	10003126 	beq	r2,zero,809558 <__call_exitprocs+0x174>
  809494:	dfc00c17 	ldw	ra,48(sp)
  809498:	df000b17 	ldw	fp,44(sp)
  80949c:	ddc00a17 	ldw	r23,40(sp)
  8094a0:	dd800917 	ldw	r22,36(sp)
  8094a4:	dd400817 	ldw	r21,32(sp)
  8094a8:	dd000717 	ldw	r20,28(sp)
  8094ac:	dcc00617 	ldw	r19,24(sp)
  8094b0:	dc800517 	ldw	r18,20(sp)
  8094b4:	dc400417 	ldw	r17,16(sp)
  8094b8:	dc000317 	ldw	r16,12(sp)
  8094bc:	dec00d04 	addi	sp,sp,52
  8094c0:	f800283a 	ret
  8094c4:	8409883a 	add	r4,r16,r16
  8094c8:	88c00117 	ldw	r3,4(r17)
  8094cc:	2105883a 	add	r2,r4,r4
  8094d0:	1445883a 	add	r2,r2,r17
  8094d4:	18ffffc4 	addi	r3,r3,-1
  8094d8:	11800217 	ldw	r6,8(r2)
  8094dc:	1c001526 	beq	r3,r16,809534 <__call_exitprocs+0x150>
  8094e0:	10000215 	stw	zero,8(r2)
  8094e4:	303fe726 	beq	r6,zero,809484 <__call_exitprocs+0xa0>
  8094e8:	00c00044 	movi	r3,1
  8094ec:	1c06983a 	sll	r3,r3,r16
  8094f0:	90804017 	ldw	r2,256(r18)
  8094f4:	8cc00117 	ldw	r19,4(r17)
  8094f8:	1884703a 	and	r2,r3,r2
  8094fc:	10001426 	beq	r2,zero,809550 <__call_exitprocs+0x16c>
  809500:	90804117 	ldw	r2,260(r18)
  809504:	1884703a 	and	r2,r3,r2
  809508:	10000c1e 	bne	r2,zero,80953c <__call_exitprocs+0x158>
  80950c:	2105883a 	add	r2,r4,r4
  809510:	1485883a 	add	r2,r2,r18
  809514:	11400017 	ldw	r5,0(r2)
  809518:	e009883a 	mov	r4,fp
  80951c:	303ee83a 	callr	r6
  809520:	88800117 	ldw	r2,4(r17)
  809524:	98bfc81e 	bne	r19,r2,809448 <__call_exitprocs+0x64>
  809528:	b8800017 	ldw	r2,0(r23)
  80952c:	147fd526 	beq	r2,r17,809484 <__call_exitprocs+0xa0>
  809530:	003fc506 	br	809448 <__call_exitprocs+0x64>
  809534:	8c000115 	stw	r16,4(r17)
  809538:	003fea06 	br	8094e4 <__call_exitprocs+0x100>
  80953c:	2105883a 	add	r2,r4,r4
  809540:	1485883a 	add	r2,r2,r18
  809544:	11000017 	ldw	r4,0(r2)
  809548:	303ee83a 	callr	r6
  80954c:	003ff406 	br	809520 <__call_exitprocs+0x13c>
  809550:	303ee83a 	callr	r6
  809554:	003ff206 	br	809520 <__call_exitprocs+0x13c>
  809558:	88800117 	ldw	r2,4(r17)
  80955c:	1000081e 	bne	r2,zero,809580 <__call_exitprocs+0x19c>
  809560:	89000017 	ldw	r4,0(r17)
  809564:	20000726 	beq	r4,zero,809584 <__call_exitprocs+0x1a0>
  809568:	b9000015 	stw	r4,0(r23)
  80956c:	8809883a 	mov	r4,r17
  809570:	080472c0 	call	80472c <free>
  809574:	bc400017 	ldw	r17,0(r23)
  809578:	883fb71e 	bne	r17,zero,809458 <__call_exitprocs+0x74>
  80957c:	003fc506 	br	809494 <__call_exitprocs+0xb0>
  809580:	89000017 	ldw	r4,0(r17)
  809584:	882f883a 	mov	r23,r17
  809588:	2023883a 	mov	r17,r4
  80958c:	883fb21e 	bne	r17,zero,809458 <__call_exitprocs+0x74>
  809590:	003fc006 	br	809494 <__call_exitprocs+0xb0>

00809594 <_close_r>:
  809594:	defffd04 	addi	sp,sp,-12
  809598:	dc000015 	stw	r16,0(sp)
  80959c:	040020b4 	movhi	r16,130
  8095a0:	8422b604 	addi	r16,r16,-29992
  8095a4:	dc400115 	stw	r17,4(sp)
  8095a8:	80000015 	stw	zero,0(r16)
  8095ac:	2023883a 	mov	r17,r4
  8095b0:	2809883a 	mov	r4,r5
  8095b4:	dfc00215 	stw	ra,8(sp)
  8095b8:	0811cf40 	call	811cf4 <close>
  8095bc:	1007883a 	mov	r3,r2
  8095c0:	00bfffc4 	movi	r2,-1
  8095c4:	18800626 	beq	r3,r2,8095e0 <_close_r+0x4c>
  8095c8:	1805883a 	mov	r2,r3
  8095cc:	dfc00217 	ldw	ra,8(sp)
  8095d0:	dc400117 	ldw	r17,4(sp)
  8095d4:	dc000017 	ldw	r16,0(sp)
  8095d8:	dec00304 	addi	sp,sp,12
  8095dc:	f800283a 	ret
  8095e0:	80800017 	ldw	r2,0(r16)
  8095e4:	103ff826 	beq	r2,zero,8095c8 <_close_r+0x34>
  8095e8:	88800015 	stw	r2,0(r17)
  8095ec:	1805883a 	mov	r2,r3
  8095f0:	dfc00217 	ldw	ra,8(sp)
  8095f4:	dc400117 	ldw	r17,4(sp)
  8095f8:	dc000017 	ldw	r16,0(sp)
  8095fc:	dec00304 	addi	sp,sp,12
  809600:	f800283a 	ret

00809604 <quorem>:
  809604:	28c00417 	ldw	r3,16(r5)
  809608:	20800417 	ldw	r2,16(r4)
  80960c:	defff104 	addi	sp,sp,-60
  809610:	dfc00e15 	stw	ra,56(sp)
  809614:	df000d15 	stw	fp,52(sp)
  809618:	ddc00c15 	stw	r23,48(sp)
  80961c:	dd800b15 	stw	r22,44(sp)
  809620:	dd400a15 	stw	r21,40(sp)
  809624:	dd000915 	stw	r20,36(sp)
  809628:	dcc00815 	stw	r19,32(sp)
  80962c:	dc800715 	stw	r18,28(sp)
  809630:	dc400615 	stw	r17,24(sp)
  809634:	dc000515 	stw	r16,20(sp)
  809638:	d9000315 	stw	r4,12(sp)
  80963c:	d9400415 	stw	r5,16(sp)
  809640:	10c07f16 	blt	r2,r3,809840 <quorem+0x23c>
  809644:	1d3fffc4 	addi	r20,r3,-1
  809648:	d8c00417 	ldw	r3,16(sp)
  80964c:	d9000317 	ldw	r4,12(sp)
  809650:	a505883a 	add	r2,r20,r20
  809654:	1085883a 	add	r2,r2,r2
  809658:	1cc00504 	addi	r19,r3,20
  80965c:	25c00504 	addi	r23,r4,20
  809660:	98ad883a 	add	r22,r19,r2
  809664:	15c7883a 	add	r3,r2,r23
  809668:	b1400017 	ldw	r5,0(r22)
  80966c:	19000017 	ldw	r4,0(r3)
  809670:	d8c00015 	stw	r3,0(sp)
  809674:	29400044 	addi	r5,r5,1
  809678:	d9000215 	stw	r4,8(sp)
  80967c:	08119200 	call	811920 <__udivsi3>
  809680:	1039883a 	mov	fp,r2
  809684:	10003d1e 	bne	r2,zero,80977c <quorem+0x178>
  809688:	d9400417 	ldw	r5,16(sp)
  80968c:	d9000317 	ldw	r4,12(sp)
  809690:	080b84c0 	call	80b84c <__mcmp>
  809694:	10002c16 	blt	r2,zero,809748 <quorem+0x144>
  809698:	e7000044 	addi	fp,fp,1
  80969c:	b80f883a 	mov	r7,r23
  8096a0:	0011883a 	mov	r8,zero
  8096a4:	0009883a 	mov	r4,zero
  8096a8:	99400017 	ldw	r5,0(r19)
  8096ac:	38c00017 	ldw	r3,0(r7)
  8096b0:	9cc00104 	addi	r19,r19,4
  8096b4:	28bfffcc 	andi	r2,r5,65535
  8096b8:	2085883a 	add	r2,r4,r2
  8096bc:	11bfffcc 	andi	r6,r2,65535
  8096c0:	193fffcc 	andi	r4,r3,65535
  8096c4:	1004d43a 	srli	r2,r2,16
  8096c8:	280ad43a 	srli	r5,r5,16
  8096cc:	2189c83a 	sub	r4,r4,r6
  8096d0:	2209883a 	add	r4,r4,r8
  8096d4:	1806d43a 	srli	r3,r3,16
  8096d8:	288b883a 	add	r5,r5,r2
  8096dc:	200dd43a 	srai	r6,r4,16
  8096e0:	28bfffcc 	andi	r2,r5,65535
  8096e4:	1887c83a 	sub	r3,r3,r2
  8096e8:	1987883a 	add	r3,r3,r6
  8096ec:	3900000d 	sth	r4,0(r7)
  8096f0:	38c0008d 	sth	r3,2(r7)
  8096f4:	2808d43a 	srli	r4,r5,16
  8096f8:	39c00104 	addi	r7,r7,4
  8096fc:	1811d43a 	srai	r8,r3,16
  809700:	b4ffe92e 	bgeu	r22,r19,8096a8 <quorem+0xa4>
  809704:	a505883a 	add	r2,r20,r20
  809708:	1085883a 	add	r2,r2,r2
  80970c:	b885883a 	add	r2,r23,r2
  809710:	10c00017 	ldw	r3,0(r2)
  809714:	18000c1e 	bne	r3,zero,809748 <quorem+0x144>
  809718:	113fff04 	addi	r4,r2,-4
  80971c:	b900082e 	bgeu	r23,r4,809740 <quorem+0x13c>
  809720:	10bfff17 	ldw	r2,-4(r2)
  809724:	10000326 	beq	r2,zero,809734 <quorem+0x130>
  809728:	00000506 	br	809740 <quorem+0x13c>
  80972c:	20800017 	ldw	r2,0(r4)
  809730:	1000031e 	bne	r2,zero,809740 <quorem+0x13c>
  809734:	213fff04 	addi	r4,r4,-4
  809738:	a53fffc4 	addi	r20,r20,-1
  80973c:	b93ffb36 	bltu	r23,r4,80972c <quorem+0x128>
  809740:	d9000317 	ldw	r4,12(sp)
  809744:	25000415 	stw	r20,16(r4)
  809748:	e005883a 	mov	r2,fp
  80974c:	dfc00e17 	ldw	ra,56(sp)
  809750:	df000d17 	ldw	fp,52(sp)
  809754:	ddc00c17 	ldw	r23,48(sp)
  809758:	dd800b17 	ldw	r22,44(sp)
  80975c:	dd400a17 	ldw	r21,40(sp)
  809760:	dd000917 	ldw	r20,36(sp)
  809764:	dcc00817 	ldw	r19,32(sp)
  809768:	dc800717 	ldw	r18,28(sp)
  80976c:	dc400617 	ldw	r17,24(sp)
  809770:	dc000517 	ldw	r16,20(sp)
  809774:	dec00f04 	addi	sp,sp,60
  809778:	f800283a 	ret
  80977c:	b823883a 	mov	r17,r23
  809780:	9825883a 	mov	r18,r19
  809784:	d8000115 	stw	zero,4(sp)
  809788:	002b883a 	mov	r21,zero
  80978c:	94000017 	ldw	r16,0(r18)
  809790:	e009883a 	mov	r4,fp
  809794:	94800104 	addi	r18,r18,4
  809798:	817fffcc 	andi	r5,r16,65535
  80979c:	08026a00 	call	8026a0 <__mulsi3>
  8097a0:	800ad43a 	srli	r5,r16,16
  8097a4:	e009883a 	mov	r4,fp
  8097a8:	a8a1883a 	add	r16,r21,r2
  8097ac:	08026a00 	call	8026a0 <__mulsi3>
  8097b0:	89000017 	ldw	r4,0(r17)
  8097b4:	80ffffcc 	andi	r3,r16,65535
  8097b8:	8020d43a 	srli	r16,r16,16
  8097bc:	217fffcc 	andi	r5,r4,65535
  8097c0:	28cbc83a 	sub	r5,r5,r3
  8097c4:	d8c00117 	ldw	r3,4(sp)
  8097c8:	2008d43a 	srli	r4,r4,16
  8097cc:	1405883a 	add	r2,r2,r16
  8097d0:	28cb883a 	add	r5,r5,r3
  8097d4:	280dd43a 	srai	r6,r5,16
  8097d8:	10ffffcc 	andi	r3,r2,65535
  8097dc:	20c9c83a 	sub	r4,r4,r3
  8097e0:	2189883a 	add	r4,r4,r6
  8097e4:	8900008d 	sth	r4,2(r17)
  8097e8:	2009d43a 	srai	r4,r4,16
  8097ec:	8940000d 	sth	r5,0(r17)
  8097f0:	102ad43a 	srli	r21,r2,16
  8097f4:	8c400104 	addi	r17,r17,4
  8097f8:	d9000115 	stw	r4,4(sp)
  8097fc:	b4bfe32e 	bgeu	r22,r18,80978c <quorem+0x188>
  809800:	d9000217 	ldw	r4,8(sp)
  809804:	203fa01e 	bne	r4,zero,809688 <quorem+0x84>
  809808:	d8800017 	ldw	r2,0(sp)
  80980c:	10ffff04 	addi	r3,r2,-4
  809810:	b8c0082e 	bgeu	r23,r3,809834 <quorem+0x230>
  809814:	10bfff17 	ldw	r2,-4(r2)
  809818:	10000326 	beq	r2,zero,809828 <quorem+0x224>
  80981c:	00000506 	br	809834 <quorem+0x230>
  809820:	18800017 	ldw	r2,0(r3)
  809824:	1000031e 	bne	r2,zero,809834 <quorem+0x230>
  809828:	18ffff04 	addi	r3,r3,-4
  80982c:	a53fffc4 	addi	r20,r20,-1
  809830:	b8fffb36 	bltu	r23,r3,809820 <quorem+0x21c>
  809834:	d8c00317 	ldw	r3,12(sp)
  809838:	1d000415 	stw	r20,16(r3)
  80983c:	003f9206 	br	809688 <quorem+0x84>
  809840:	0005883a 	mov	r2,zero
  809844:	003fc106 	br	80974c <quorem+0x148>

00809848 <_dtoa_r>:
  809848:	22001017 	ldw	r8,64(r4)
  80984c:	deffda04 	addi	sp,sp,-152
  809850:	dd402115 	stw	r21,132(sp)
  809854:	dd002015 	stw	r20,128(sp)
  809858:	dc801e15 	stw	r18,120(sp)
  80985c:	dc401d15 	stw	r17,116(sp)
  809860:	dfc02515 	stw	ra,148(sp)
  809864:	df002415 	stw	fp,144(sp)
  809868:	ddc02315 	stw	r23,140(sp)
  80986c:	dd802215 	stw	r22,136(sp)
  809870:	dcc01f15 	stw	r19,124(sp)
  809874:	dc001c15 	stw	r16,112(sp)
  809878:	d9001615 	stw	r4,88(sp)
  80987c:	3023883a 	mov	r17,r6
  809880:	2829883a 	mov	r20,r5
  809884:	d9c01715 	stw	r7,92(sp)
  809888:	dc802817 	ldw	r18,160(sp)
  80988c:	302b883a 	mov	r21,r6
  809890:	40000a26 	beq	r8,zero,8098bc <_dtoa_r+0x74>
  809894:	20801117 	ldw	r2,68(r4)
  809898:	400b883a 	mov	r5,r8
  80989c:	40800115 	stw	r2,4(r8)
  8098a0:	20c01117 	ldw	r3,68(r4)
  8098a4:	00800044 	movi	r2,1
  8098a8:	10c4983a 	sll	r2,r2,r3
  8098ac:	40800215 	stw	r2,8(r8)
  8098b0:	080b6f00 	call	80b6f0 <_Bfree>
  8098b4:	d8c01617 	ldw	r3,88(sp)
  8098b8:	18001015 	stw	zero,64(r3)
  8098bc:	8800a316 	blt	r17,zero,809b4c <_dtoa_r+0x304>
  8098c0:	90000015 	stw	zero,0(r18)
  8098c4:	a8dffc2c 	andhi	r3,r21,32752
  8098c8:	009ffc34 	movhi	r2,32752
  8098cc:	18809126 	beq	r3,r2,809b14 <_dtoa_r+0x2cc>
  8098d0:	000d883a 	mov	r6,zero
  8098d4:	000f883a 	mov	r7,zero
  8098d8:	a009883a 	mov	r4,r20
  8098dc:	a80b883a 	mov	r5,r21
  8098e0:	dd001215 	stw	r20,72(sp)
  8098e4:	dd401315 	stw	r21,76(sp)
  8098e8:	08112f80 	call	8112f8 <__nedf2>
  8098ec:	1000171e 	bne	r2,zero,80994c <_dtoa_r+0x104>
  8098f0:	d9802717 	ldw	r6,156(sp)
  8098f4:	00800044 	movi	r2,1
  8098f8:	30800015 	stw	r2,0(r6)
  8098fc:	d8802917 	ldw	r2,164(sp)
  809900:	10029b26 	beq	r2,zero,80a370 <_dtoa_r+0xb28>
  809904:	d9002917 	ldw	r4,164(sp)
  809908:	00802074 	movhi	r2,129
  80990c:	10949544 	addi	r2,r2,21077
  809910:	10ffffc4 	addi	r3,r2,-1
  809914:	20800015 	stw	r2,0(r4)
  809918:	1805883a 	mov	r2,r3
  80991c:	dfc02517 	ldw	ra,148(sp)
  809920:	df002417 	ldw	fp,144(sp)
  809924:	ddc02317 	ldw	r23,140(sp)
  809928:	dd802217 	ldw	r22,136(sp)
  80992c:	dd402117 	ldw	r21,132(sp)
  809930:	dd002017 	ldw	r20,128(sp)
  809934:	dcc01f17 	ldw	r19,124(sp)
  809938:	dc801e17 	ldw	r18,120(sp)
  80993c:	dc401d17 	ldw	r17,116(sp)
  809940:	dc001c17 	ldw	r16,112(sp)
  809944:	dec02604 	addi	sp,sp,152
  809948:	f800283a 	ret
  80994c:	d9001617 	ldw	r4,88(sp)
  809950:	d9401217 	ldw	r5,72(sp)
  809954:	d8800104 	addi	r2,sp,4
  809958:	a80d883a 	mov	r6,r21
  80995c:	d9c00204 	addi	r7,sp,8
  809960:	d8800015 	stw	r2,0(sp)
  809964:	080bd2c0 	call	80bd2c <__d2b>
  809968:	d8800715 	stw	r2,28(sp)
  80996c:	a804d53a 	srli	r2,r21,20
  809970:	1101ffcc 	andi	r4,r2,2047
  809974:	20008626 	beq	r4,zero,809b90 <_dtoa_r+0x348>
  809978:	d8c01217 	ldw	r3,72(sp)
  80997c:	00800434 	movhi	r2,16
  809980:	10bfffc4 	addi	r2,r2,-1
  809984:	ddc00117 	ldw	r23,4(sp)
  809988:	a884703a 	and	r2,r21,r2
  80998c:	1811883a 	mov	r8,r3
  809990:	124ffc34 	orhi	r9,r2,16368
  809994:	25bf0044 	addi	r22,r4,-1023
  809998:	d8000815 	stw	zero,32(sp)
  80999c:	0005883a 	mov	r2,zero
  8099a0:	00cffe34 	movhi	r3,16376
  8099a4:	480b883a 	mov	r5,r9
  8099a8:	4009883a 	mov	r4,r8
  8099ac:	180f883a 	mov	r7,r3
  8099b0:	100d883a 	mov	r6,r2
  8099b4:	08021c00 	call	8021c0 <__subdf3>
  8099b8:	0218dbf4 	movhi	r8,25455
  8099bc:	4210d844 	addi	r8,r8,17249
  8099c0:	024ff4f4 	movhi	r9,16339
  8099c4:	4a61e9c4 	addi	r9,r9,-30809
  8099c8:	480f883a 	mov	r7,r9
  8099cc:	400d883a 	mov	r6,r8
  8099d0:	180b883a 	mov	r5,r3
  8099d4:	1009883a 	mov	r4,r2
  8099d8:	0810eac0 	call	810eac <__muldf3>
  8099dc:	0222d874 	movhi	r8,35681
  8099e0:	42322cc4 	addi	r8,r8,-14157
  8099e4:	024ff1f4 	movhi	r9,16327
  8099e8:	4a628a04 	addi	r9,r9,-30168
  8099ec:	480f883a 	mov	r7,r9
  8099f0:	400d883a 	mov	r6,r8
  8099f4:	180b883a 	mov	r5,r3
  8099f8:	1009883a 	mov	r4,r2
  8099fc:	08022400 	call	802240 <__adddf3>
  809a00:	b009883a 	mov	r4,r22
  809a04:	1021883a 	mov	r16,r2
  809a08:	1823883a 	mov	r17,r3
  809a0c:	08115a00 	call	8115a0 <__floatsidf>
  809a10:	021427f4 	movhi	r8,20639
  809a14:	421e7ec4 	addi	r8,r8,31227
  809a18:	024ff4f4 	movhi	r9,16339
  809a1c:	4a5104c4 	addi	r9,r9,17427
  809a20:	480f883a 	mov	r7,r9
  809a24:	400d883a 	mov	r6,r8
  809a28:	180b883a 	mov	r5,r3
  809a2c:	1009883a 	mov	r4,r2
  809a30:	0810eac0 	call	810eac <__muldf3>
  809a34:	180f883a 	mov	r7,r3
  809a38:	880b883a 	mov	r5,r17
  809a3c:	100d883a 	mov	r6,r2
  809a40:	8009883a 	mov	r4,r16
  809a44:	08022400 	call	802240 <__adddf3>
  809a48:	1009883a 	mov	r4,r2
  809a4c:	180b883a 	mov	r5,r3
  809a50:	1021883a 	mov	r16,r2
  809a54:	1823883a 	mov	r17,r3
  809a58:	08116980 	call	811698 <__fixdfsi>
  809a5c:	000d883a 	mov	r6,zero
  809a60:	000f883a 	mov	r7,zero
  809a64:	8009883a 	mov	r4,r16
  809a68:	880b883a 	mov	r5,r17
  809a6c:	d8800d15 	stw	r2,52(sp)
  809a70:	08114900 	call	811490 <__ltdf2>
  809a74:	10031716 	blt	r2,zero,80a6d4 <_dtoa_r+0xe8c>
  809a78:	d8c00d17 	ldw	r3,52(sp)
  809a7c:	00800584 	movi	r2,22
  809a80:	10c1482e 	bgeu	r2,r3,809fa4 <_dtoa_r+0x75c>
  809a84:	01000044 	movi	r4,1
  809a88:	d9000c15 	stw	r4,48(sp)
  809a8c:	bd85c83a 	sub	r2,r23,r22
  809a90:	11bfffc4 	addi	r6,r2,-1
  809a94:	30030b16 	blt	r6,zero,80a6c4 <_dtoa_r+0xe7c>
  809a98:	d9800a15 	stw	r6,40(sp)
  809a9c:	d8001115 	stw	zero,68(sp)
  809aa0:	d8c00d17 	ldw	r3,52(sp)
  809aa4:	1802ff16 	blt	r3,zero,80a6a4 <_dtoa_r+0xe5c>
  809aa8:	d9000a17 	ldw	r4,40(sp)
  809aac:	d8c00915 	stw	r3,36(sp)
  809ab0:	d8001015 	stw	zero,64(sp)
  809ab4:	20c9883a 	add	r4,r4,r3
  809ab8:	d9000a15 	stw	r4,40(sp)
  809abc:	d9001717 	ldw	r4,92(sp)
  809ac0:	00800244 	movi	r2,9
  809ac4:	11004636 	bltu	r2,r4,809be0 <_dtoa_r+0x398>
  809ac8:	00800144 	movi	r2,5
  809acc:	11020416 	blt	r2,r4,80a2e0 <_dtoa_r+0xa98>
  809ad0:	04400044 	movi	r17,1
  809ad4:	d8c01717 	ldw	r3,92(sp)
  809ad8:	00800144 	movi	r2,5
  809adc:	10c1ed36 	bltu	r2,r3,80a294 <_dtoa_r+0xa4c>
  809ae0:	18c5883a 	add	r2,r3,r3
  809ae4:	1085883a 	add	r2,r2,r2
  809ae8:	00c02074 	movhi	r3,129
  809aec:	18e6bf04 	addi	r3,r3,-25860
  809af0:	10c5883a 	add	r2,r2,r3
  809af4:	11000017 	ldw	r4,0(r2)
  809af8:	2000683a 	jmp	r4
  809afc:	00809be8 	cmpgeui	r2,zero,623
  809b00:	00809be8 	cmpgeui	r2,zero,623
  809b04:	0080a5e8 	cmpgeui	r2,zero,663
  809b08:	0080a5c0 	call	80a5c <__alt_mem_sdram-0x77f5a4>
  809b0c:	0080a604 	movi	r2,664
  809b10:	0080a610 	cmplti	r2,zero,664
  809b14:	d9002717 	ldw	r4,156(sp)
  809b18:	0089c3c4 	movi	r2,9999
  809b1c:	20800015 	stw	r2,0(r4)
  809b20:	a0001026 	beq	r20,zero,809b64 <_dtoa_r+0x31c>
  809b24:	00c02074 	movhi	r3,129
  809b28:	18d4ab04 	addi	r3,r3,21164
  809b2c:	d9802917 	ldw	r6,164(sp)
  809b30:	303f7926 	beq	r6,zero,809918 <_dtoa_r+0xd0>
  809b34:	188000c7 	ldb	r2,3(r3)
  809b38:	190000c4 	addi	r4,r3,3
  809b3c:	1000101e 	bne	r2,zero,809b80 <_dtoa_r+0x338>
  809b40:	d8802917 	ldw	r2,164(sp)
  809b44:	11000015 	stw	r4,0(r2)
  809b48:	003f7306 	br	809918 <_dtoa_r+0xd0>
  809b4c:	00a00034 	movhi	r2,32768
  809b50:	10bfffc4 	addi	r2,r2,-1
  809b54:	00c00044 	movi	r3,1
  809b58:	88aa703a 	and	r21,r17,r2
  809b5c:	90c00015 	stw	r3,0(r18)
  809b60:	003f5806 	br	8098c4 <_dtoa_r+0x7c>
  809b64:	00800434 	movhi	r2,16
  809b68:	10bfffc4 	addi	r2,r2,-1
  809b6c:	a884703a 	and	r2,r21,r2
  809b70:	103fec1e 	bne	r2,zero,809b24 <_dtoa_r+0x2dc>
  809b74:	00c02074 	movhi	r3,129
  809b78:	18d4a804 	addi	r3,r3,21152
  809b7c:	003feb06 	br	809b2c <_dtoa_r+0x2e4>
  809b80:	d8802917 	ldw	r2,164(sp)
  809b84:	19000204 	addi	r4,r3,8
  809b88:	11000015 	stw	r4,0(r2)
  809b8c:	003f6206 	br	809918 <_dtoa_r+0xd0>
  809b90:	ddc00117 	ldw	r23,4(sp)
  809b94:	d8800217 	ldw	r2,8(sp)
  809b98:	01000804 	movi	r4,32
  809b9c:	b8c10c84 	addi	r3,r23,1074
  809ba0:	18a3883a 	add	r17,r3,r2
  809ba4:	2441b80e 	bge	r4,r17,80a288 <_dtoa_r+0xa40>
  809ba8:	00c01004 	movi	r3,64
  809bac:	1c47c83a 	sub	r3,r3,r17
  809bb0:	88bff804 	addi	r2,r17,-32
  809bb4:	a8c6983a 	sll	r3,r21,r3
  809bb8:	a084d83a 	srl	r2,r20,r2
  809bbc:	1888b03a 	or	r4,r3,r2
  809bc0:	080250c0 	call	80250c <__floatunsidf>
  809bc4:	1011883a 	mov	r8,r2
  809bc8:	00bf8434 	movhi	r2,65040
  809bcc:	01000044 	movi	r4,1
  809bd0:	10d3883a 	add	r9,r2,r3
  809bd4:	8dbef344 	addi	r22,r17,-1075
  809bd8:	d9000815 	stw	r4,32(sp)
  809bdc:	003f6f06 	br	80999c <_dtoa_r+0x154>
  809be0:	d8001715 	stw	zero,92(sp)
  809be4:	04400044 	movi	r17,1
  809be8:	00bfffc4 	movi	r2,-1
  809bec:	00c00044 	movi	r3,1
  809bf0:	d8800e15 	stw	r2,56(sp)
  809bf4:	d8002615 	stw	zero,152(sp)
  809bf8:	d8800f15 	stw	r2,60(sp)
  809bfc:	d8c00b15 	stw	r3,44(sp)
  809c00:	1021883a 	mov	r16,r2
  809c04:	d8801617 	ldw	r2,88(sp)
  809c08:	10001115 	stw	zero,68(r2)
  809c0c:	d8801617 	ldw	r2,88(sp)
  809c10:	11401117 	ldw	r5,68(r2)
  809c14:	1009883a 	mov	r4,r2
  809c18:	080bc700 	call	80bc70 <_Balloc>
  809c1c:	d8c01617 	ldw	r3,88(sp)
  809c20:	d8800515 	stw	r2,20(sp)
  809c24:	18801015 	stw	r2,64(r3)
  809c28:	00800384 	movi	r2,14
  809c2c:	14006836 	bltu	r2,r16,809dd0 <_dtoa_r+0x588>
  809c30:	8805003a 	cmpeq	r2,r17,zero
  809c34:	1000661e 	bne	r2,zero,809dd0 <_dtoa_r+0x588>
  809c38:	d9000d17 	ldw	r4,52(sp)
  809c3c:	0102300e 	bge	zero,r4,80a500 <_dtoa_r+0xcb8>
  809c40:	208003cc 	andi	r2,r4,15
  809c44:	100490fa 	slli	r2,r2,3
  809c48:	2025d13a 	srai	r18,r4,4
  809c4c:	00c02074 	movhi	r3,129
  809c50:	18d4bc04 	addi	r3,r3,21232
  809c54:	10c5883a 	add	r2,r2,r3
  809c58:	90c0040c 	andi	r3,r18,16
  809c5c:	14000017 	ldw	r16,0(r2)
  809c60:	14400117 	ldw	r17,4(r2)
  809c64:	18036a1e 	bne	r3,zero,80aa10 <_dtoa_r+0x11c8>
  809c68:	05800084 	movi	r22,2
  809c6c:	90001026 	beq	r18,zero,809cb0 <_dtoa_r+0x468>
  809c70:	04c02074 	movhi	r19,129
  809c74:	9cd4ee04 	addi	r19,r19,21432
  809c78:	9080004c 	andi	r2,r18,1
  809c7c:	1005003a 	cmpeq	r2,r2,zero
  809c80:	1000081e 	bne	r2,zero,809ca4 <_dtoa_r+0x45c>
  809c84:	99800017 	ldw	r6,0(r19)
  809c88:	99c00117 	ldw	r7,4(r19)
  809c8c:	880b883a 	mov	r5,r17
  809c90:	8009883a 	mov	r4,r16
  809c94:	0810eac0 	call	810eac <__muldf3>
  809c98:	1021883a 	mov	r16,r2
  809c9c:	b5800044 	addi	r22,r22,1
  809ca0:	1823883a 	mov	r17,r3
  809ca4:	9025d07a 	srai	r18,r18,1
  809ca8:	9cc00204 	addi	r19,r19,8
  809cac:	903ff21e 	bne	r18,zero,809c78 <_dtoa_r+0x430>
  809cb0:	a80b883a 	mov	r5,r21
  809cb4:	a009883a 	mov	r4,r20
  809cb8:	880f883a 	mov	r7,r17
  809cbc:	800d883a 	mov	r6,r16
  809cc0:	08022b40 	call	8022b4 <__divdf3>
  809cc4:	1029883a 	mov	r20,r2
  809cc8:	182b883a 	mov	r21,r3
  809ccc:	d8c00c17 	ldw	r3,48(sp)
  809cd0:	1805003a 	cmpeq	r2,r3,zero
  809cd4:	1000081e 	bne	r2,zero,809cf8 <_dtoa_r+0x4b0>
  809cd8:	0005883a 	mov	r2,zero
  809cdc:	00cffc34 	movhi	r3,16368
  809ce0:	180f883a 	mov	r7,r3
  809ce4:	a009883a 	mov	r4,r20
  809ce8:	a80b883a 	mov	r5,r21
  809cec:	100d883a 	mov	r6,r2
  809cf0:	08114900 	call	811490 <__ltdf2>
  809cf4:	1003fe16 	blt	r2,zero,80acf0 <_dtoa_r+0x14a8>
  809cf8:	b009883a 	mov	r4,r22
  809cfc:	08115a00 	call	8115a0 <__floatsidf>
  809d00:	180b883a 	mov	r5,r3
  809d04:	1009883a 	mov	r4,r2
  809d08:	a00d883a 	mov	r6,r20
  809d0c:	a80f883a 	mov	r7,r21
  809d10:	0810eac0 	call	810eac <__muldf3>
  809d14:	0011883a 	mov	r8,zero
  809d18:	02500734 	movhi	r9,16412
  809d1c:	1009883a 	mov	r4,r2
  809d20:	180b883a 	mov	r5,r3
  809d24:	480f883a 	mov	r7,r9
  809d28:	400d883a 	mov	r6,r8
  809d2c:	08022400 	call	802240 <__adddf3>
  809d30:	d9000f17 	ldw	r4,60(sp)
  809d34:	102d883a 	mov	r22,r2
  809d38:	00bf3034 	movhi	r2,64704
  809d3c:	18b9883a 	add	fp,r3,r2
  809d40:	e02f883a 	mov	r23,fp
  809d44:	20028f1e 	bne	r4,zero,80a784 <_dtoa_r+0xf3c>
  809d48:	0005883a 	mov	r2,zero
  809d4c:	00d00534 	movhi	r3,16404
  809d50:	a009883a 	mov	r4,r20
  809d54:	a80b883a 	mov	r5,r21
  809d58:	180f883a 	mov	r7,r3
  809d5c:	100d883a 	mov	r6,r2
  809d60:	08021c00 	call	8021c0 <__subdf3>
  809d64:	1009883a 	mov	r4,r2
  809d68:	e00f883a 	mov	r7,fp
  809d6c:	180b883a 	mov	r5,r3
  809d70:	b00d883a 	mov	r6,r22
  809d74:	1025883a 	mov	r18,r2
  809d78:	1827883a 	mov	r19,r3
  809d7c:	08113800 	call	811380 <__gtdf2>
  809d80:	00834f16 	blt	zero,r2,80aac0 <_dtoa_r+0x1278>
  809d84:	e0e0003c 	xorhi	r3,fp,32768
  809d88:	9009883a 	mov	r4,r18
  809d8c:	980b883a 	mov	r5,r19
  809d90:	180f883a 	mov	r7,r3
  809d94:	b00d883a 	mov	r6,r22
  809d98:	08114900 	call	811490 <__ltdf2>
  809d9c:	1000080e 	bge	r2,zero,809dc0 <_dtoa_r+0x578>
  809da0:	0027883a 	mov	r19,zero
  809da4:	0025883a 	mov	r18,zero
  809da8:	d8802617 	ldw	r2,152(sp)
  809dac:	df000517 	ldw	fp,20(sp)
  809db0:	d8000615 	stw	zero,24(sp)
  809db4:	0084303a 	nor	r2,zero,r2
  809db8:	d8800d15 	stw	r2,52(sp)
  809dbc:	00019b06 	br	80a42c <_dtoa_r+0xbe4>
  809dc0:	d9801217 	ldw	r6,72(sp)
  809dc4:	d8801317 	ldw	r2,76(sp)
  809dc8:	3029883a 	mov	r20,r6
  809dcc:	102b883a 	mov	r21,r2
  809dd0:	d8c00217 	ldw	r3,8(sp)
  809dd4:	18008516 	blt	r3,zero,809fec <_dtoa_r+0x7a4>
  809dd8:	d9000d17 	ldw	r4,52(sp)
  809ddc:	00800384 	movi	r2,14
  809de0:	11008216 	blt	r2,r4,809fec <_dtoa_r+0x7a4>
  809de4:	200490fa 	slli	r2,r4,3
  809de8:	d9802617 	ldw	r6,152(sp)
  809dec:	00c02074 	movhi	r3,129
  809df0:	18d4bc04 	addi	r3,r3,21232
  809df4:	10c5883a 	add	r2,r2,r3
  809df8:	14800017 	ldw	r18,0(r2)
  809dfc:	14c00117 	ldw	r19,4(r2)
  809e00:	30031e16 	blt	r6,zero,80aa7c <_dtoa_r+0x1234>
  809e04:	d9000517 	ldw	r4,20(sp)
  809e08:	d8c00f17 	ldw	r3,60(sp)
  809e0c:	a823883a 	mov	r17,r21
  809e10:	a021883a 	mov	r16,r20
  809e14:	192b883a 	add	r21,r3,r4
  809e18:	2039883a 	mov	fp,r4
  809e1c:	00000f06 	br	809e5c <_dtoa_r+0x614>
  809e20:	0005883a 	mov	r2,zero
  809e24:	00d00934 	movhi	r3,16420
  809e28:	5009883a 	mov	r4,r10
  809e2c:	580b883a 	mov	r5,r11
  809e30:	180f883a 	mov	r7,r3
  809e34:	100d883a 	mov	r6,r2
  809e38:	0810eac0 	call	810eac <__muldf3>
  809e3c:	180b883a 	mov	r5,r3
  809e40:	000d883a 	mov	r6,zero
  809e44:	000f883a 	mov	r7,zero
  809e48:	1009883a 	mov	r4,r2
  809e4c:	1021883a 	mov	r16,r2
  809e50:	1823883a 	mov	r17,r3
  809e54:	08112f80 	call	8112f8 <__nedf2>
  809e58:	10004526 	beq	r2,zero,809f70 <_dtoa_r+0x728>
  809e5c:	900d883a 	mov	r6,r18
  809e60:	980f883a 	mov	r7,r19
  809e64:	8009883a 	mov	r4,r16
  809e68:	880b883a 	mov	r5,r17
  809e6c:	08022b40 	call	8022b4 <__divdf3>
  809e70:	180b883a 	mov	r5,r3
  809e74:	1009883a 	mov	r4,r2
  809e78:	08116980 	call	811698 <__fixdfsi>
  809e7c:	1009883a 	mov	r4,r2
  809e80:	1029883a 	mov	r20,r2
  809e84:	08115a00 	call	8115a0 <__floatsidf>
  809e88:	180f883a 	mov	r7,r3
  809e8c:	9009883a 	mov	r4,r18
  809e90:	980b883a 	mov	r5,r19
  809e94:	100d883a 	mov	r6,r2
  809e98:	0810eac0 	call	810eac <__muldf3>
  809e9c:	180f883a 	mov	r7,r3
  809ea0:	880b883a 	mov	r5,r17
  809ea4:	8009883a 	mov	r4,r16
  809ea8:	100d883a 	mov	r6,r2
  809eac:	08021c00 	call	8021c0 <__subdf3>
  809eb0:	1015883a 	mov	r10,r2
  809eb4:	a0800c04 	addi	r2,r20,48
  809eb8:	e0800005 	stb	r2,0(fp)
  809ebc:	e7000044 	addi	fp,fp,1
  809ec0:	1817883a 	mov	r11,r3
  809ec4:	e57fd61e 	bne	fp,r21,809e20 <_dtoa_r+0x5d8>
  809ec8:	500d883a 	mov	r6,r10
  809ecc:	180f883a 	mov	r7,r3
  809ed0:	5009883a 	mov	r4,r10
  809ed4:	180b883a 	mov	r5,r3
  809ed8:	08022400 	call	802240 <__adddf3>
  809edc:	100d883a 	mov	r6,r2
  809ee0:	9009883a 	mov	r4,r18
  809ee4:	980b883a 	mov	r5,r19
  809ee8:	180f883a 	mov	r7,r3
  809eec:	1021883a 	mov	r16,r2
  809ef0:	1823883a 	mov	r17,r3
  809ef4:	08114900 	call	811490 <__ltdf2>
  809ef8:	10000816 	blt	r2,zero,809f1c <_dtoa_r+0x6d4>
  809efc:	980b883a 	mov	r5,r19
  809f00:	800d883a 	mov	r6,r16
  809f04:	880f883a 	mov	r7,r17
  809f08:	9009883a 	mov	r4,r18
  809f0c:	08112700 	call	811270 <__eqdf2>
  809f10:	1000171e 	bne	r2,zero,809f70 <_dtoa_r+0x728>
  809f14:	a080004c 	andi	r2,r20,1
  809f18:	10001526 	beq	r2,zero,809f70 <_dtoa_r+0x728>
  809f1c:	d8800d17 	ldw	r2,52(sp)
  809f20:	d8800415 	stw	r2,16(sp)
  809f24:	e009883a 	mov	r4,fp
  809f28:	213fffc4 	addi	r4,r4,-1
  809f2c:	20c00007 	ldb	r3,0(r4)
  809f30:	00800e44 	movi	r2,57
  809f34:	1880081e 	bne	r3,r2,809f58 <_dtoa_r+0x710>
  809f38:	d8800517 	ldw	r2,20(sp)
  809f3c:	113ffa1e 	bne	r2,r4,809f28 <_dtoa_r+0x6e0>
  809f40:	d8c00417 	ldw	r3,16(sp)
  809f44:	d9800517 	ldw	r6,20(sp)
  809f48:	00800c04 	movi	r2,48
  809f4c:	18c00044 	addi	r3,r3,1
  809f50:	d8c00415 	stw	r3,16(sp)
  809f54:	30800005 	stb	r2,0(r6)
  809f58:	20800003 	ldbu	r2,0(r4)
  809f5c:	d8c00417 	ldw	r3,16(sp)
  809f60:	27000044 	addi	fp,r4,1
  809f64:	10800044 	addi	r2,r2,1
  809f68:	d8c00d15 	stw	r3,52(sp)
  809f6c:	20800005 	stb	r2,0(r4)
  809f70:	d9001617 	ldw	r4,88(sp)
  809f74:	d9400717 	ldw	r5,28(sp)
  809f78:	080b6f00 	call	80b6f0 <_Bfree>
  809f7c:	e0000005 	stb	zero,0(fp)
  809f80:	d9800d17 	ldw	r6,52(sp)
  809f84:	d8c02717 	ldw	r3,156(sp)
  809f88:	d9002917 	ldw	r4,164(sp)
  809f8c:	30800044 	addi	r2,r6,1
  809f90:	18800015 	stw	r2,0(r3)
  809f94:	20029c26 	beq	r4,zero,80aa08 <_dtoa_r+0x11c0>
  809f98:	d8c00517 	ldw	r3,20(sp)
  809f9c:	27000015 	stw	fp,0(r4)
  809fa0:	003e5d06 	br	809918 <_dtoa_r+0xd0>
  809fa4:	d9800d17 	ldw	r6,52(sp)
  809fa8:	00c02074 	movhi	r3,129
  809fac:	18d4bc04 	addi	r3,r3,21232
  809fb0:	d9001217 	ldw	r4,72(sp)
  809fb4:	300490fa 	slli	r2,r6,3
  809fb8:	d9401317 	ldw	r5,76(sp)
  809fbc:	10c5883a 	add	r2,r2,r3
  809fc0:	12000017 	ldw	r8,0(r2)
  809fc4:	12400117 	ldw	r9,4(r2)
  809fc8:	400d883a 	mov	r6,r8
  809fcc:	480f883a 	mov	r7,r9
  809fd0:	08114900 	call	811490 <__ltdf2>
  809fd4:	1000030e 	bge	r2,zero,809fe4 <_dtoa_r+0x79c>
  809fd8:	d8800d17 	ldw	r2,52(sp)
  809fdc:	10bfffc4 	addi	r2,r2,-1
  809fe0:	d8800d15 	stw	r2,52(sp)
  809fe4:	d8000c15 	stw	zero,48(sp)
  809fe8:	003ea806 	br	809a8c <_dtoa_r+0x244>
  809fec:	d9000b17 	ldw	r4,44(sp)
  809ff0:	202cc03a 	cmpne	r22,r4,zero
  809ff4:	b000c71e 	bne	r22,zero,80a314 <_dtoa_r+0xacc>
  809ff8:	dc001117 	ldw	r16,68(sp)
  809ffc:	dc801017 	ldw	r18,64(sp)
  80a000:	0027883a 	mov	r19,zero
  80a004:	04000b0e 	bge	zero,r16,80a034 <_dtoa_r+0x7ec>
  80a008:	d8c00a17 	ldw	r3,40(sp)
  80a00c:	00c0090e 	bge	zero,r3,80a034 <_dtoa_r+0x7ec>
  80a010:	8005883a 	mov	r2,r16
  80a014:	1c011316 	blt	r3,r16,80a464 <_dtoa_r+0xc1c>
  80a018:	d9000a17 	ldw	r4,40(sp)
  80a01c:	d9801117 	ldw	r6,68(sp)
  80a020:	80a1c83a 	sub	r16,r16,r2
  80a024:	2089c83a 	sub	r4,r4,r2
  80a028:	308dc83a 	sub	r6,r6,r2
  80a02c:	d9000a15 	stw	r4,40(sp)
  80a030:	d9801115 	stw	r6,68(sp)
  80a034:	d8801017 	ldw	r2,64(sp)
  80a038:	0080150e 	bge	zero,r2,80a090 <_dtoa_r+0x848>
  80a03c:	d8c00b17 	ldw	r3,44(sp)
  80a040:	1805003a 	cmpeq	r2,r3,zero
  80a044:	1001c91e 	bne	r2,zero,80a76c <_dtoa_r+0xf24>
  80a048:	04800e0e 	bge	zero,r18,80a084 <_dtoa_r+0x83c>
  80a04c:	d9001617 	ldw	r4,88(sp)
  80a050:	980b883a 	mov	r5,r19
  80a054:	900d883a 	mov	r6,r18
  80a058:	080c53c0 	call	80c53c <__pow5mult>
  80a05c:	d9001617 	ldw	r4,88(sp)
  80a060:	d9800717 	ldw	r6,28(sp)
  80a064:	100b883a 	mov	r5,r2
  80a068:	1027883a 	mov	r19,r2
  80a06c:	080c1800 	call	80c180 <__multiply>
  80a070:	d9001617 	ldw	r4,88(sp)
  80a074:	d9400717 	ldw	r5,28(sp)
  80a078:	1023883a 	mov	r17,r2
  80a07c:	080b6f00 	call	80b6f0 <_Bfree>
  80a080:	dc400715 	stw	r17,28(sp)
  80a084:	d9001017 	ldw	r4,64(sp)
  80a088:	248dc83a 	sub	r6,r4,r18
  80a08c:	30010e1e 	bne	r6,zero,80a4c8 <_dtoa_r+0xc80>
  80a090:	d9001617 	ldw	r4,88(sp)
  80a094:	04400044 	movi	r17,1
  80a098:	880b883a 	mov	r5,r17
  80a09c:	080c3d40 	call	80c3d4 <__i2b>
  80a0a0:	d9800917 	ldw	r6,36(sp)
  80a0a4:	1025883a 	mov	r18,r2
  80a0a8:	0180040e 	bge	zero,r6,80a0bc <_dtoa_r+0x874>
  80a0ac:	d9001617 	ldw	r4,88(sp)
  80a0b0:	100b883a 	mov	r5,r2
  80a0b4:	080c53c0 	call	80c53c <__pow5mult>
  80a0b8:	1025883a 	mov	r18,r2
  80a0bc:	d8801717 	ldw	r2,92(sp)
  80a0c0:	8880f30e 	bge	r17,r2,80a490 <_dtoa_r+0xc48>
  80a0c4:	0023883a 	mov	r17,zero
  80a0c8:	d9800917 	ldw	r6,36(sp)
  80a0cc:	30019e1e 	bne	r6,zero,80a748 <_dtoa_r+0xf00>
  80a0d0:	00c00044 	movi	r3,1
  80a0d4:	d9000a17 	ldw	r4,40(sp)
  80a0d8:	20c5883a 	add	r2,r4,r3
  80a0dc:	10c007cc 	andi	r3,r2,31
  80a0e0:	1800841e 	bne	r3,zero,80a2f4 <_dtoa_r+0xaac>
  80a0e4:	00800704 	movi	r2,28
  80a0e8:	d9000a17 	ldw	r4,40(sp)
  80a0ec:	d9801117 	ldw	r6,68(sp)
  80a0f0:	80a1883a 	add	r16,r16,r2
  80a0f4:	2089883a 	add	r4,r4,r2
  80a0f8:	308d883a 	add	r6,r6,r2
  80a0fc:	d9000a15 	stw	r4,40(sp)
  80a100:	d9801115 	stw	r6,68(sp)
  80a104:	d8801117 	ldw	r2,68(sp)
  80a108:	0080050e 	bge	zero,r2,80a120 <_dtoa_r+0x8d8>
  80a10c:	d9400717 	ldw	r5,28(sp)
  80a110:	d9001617 	ldw	r4,88(sp)
  80a114:	100d883a 	mov	r6,r2
  80a118:	080c0340 	call	80c034 <__lshift>
  80a11c:	d8800715 	stw	r2,28(sp)
  80a120:	d8c00a17 	ldw	r3,40(sp)
  80a124:	00c0050e 	bge	zero,r3,80a13c <_dtoa_r+0x8f4>
  80a128:	d9001617 	ldw	r4,88(sp)
  80a12c:	900b883a 	mov	r5,r18
  80a130:	180d883a 	mov	r6,r3
  80a134:	080c0340 	call	80c034 <__lshift>
  80a138:	1025883a 	mov	r18,r2
  80a13c:	d9000c17 	ldw	r4,48(sp)
  80a140:	2005003a 	cmpeq	r2,r4,zero
  80a144:	10016f26 	beq	r2,zero,80a704 <_dtoa_r+0xebc>
  80a148:	d9000f17 	ldw	r4,60(sp)
  80a14c:	0102170e 	bge	zero,r4,80a9ac <_dtoa_r+0x1164>
  80a150:	d9800b17 	ldw	r6,44(sp)
  80a154:	3005003a 	cmpeq	r2,r6,zero
  80a158:	1000881e 	bne	r2,zero,80a37c <_dtoa_r+0xb34>
  80a15c:	0400050e 	bge	zero,r16,80a174 <_dtoa_r+0x92c>
  80a160:	d9001617 	ldw	r4,88(sp)
  80a164:	980b883a 	mov	r5,r19
  80a168:	800d883a 	mov	r6,r16
  80a16c:	080c0340 	call	80c034 <__lshift>
  80a170:	1027883a 	mov	r19,r2
  80a174:	8804c03a 	cmpne	r2,r17,zero
  80a178:	1002541e 	bne	r2,zero,80aacc <_dtoa_r+0x1284>
  80a17c:	980b883a 	mov	r5,r19
  80a180:	dd800517 	ldw	r22,20(sp)
  80a184:	dcc00615 	stw	r19,24(sp)
  80a188:	a700004c 	andi	fp,r20,1
  80a18c:	2827883a 	mov	r19,r5
  80a190:	d9000717 	ldw	r4,28(sp)
  80a194:	900b883a 	mov	r5,r18
  80a198:	08096040 	call	809604 <quorem>
  80a19c:	d9000717 	ldw	r4,28(sp)
  80a1a0:	d9400617 	ldw	r5,24(sp)
  80a1a4:	1023883a 	mov	r17,r2
  80a1a8:	8dc00c04 	addi	r23,r17,48
  80a1ac:	080b84c0 	call	80b84c <__mcmp>
  80a1b0:	d9001617 	ldw	r4,88(sp)
  80a1b4:	900b883a 	mov	r5,r18
  80a1b8:	980d883a 	mov	r6,r19
  80a1bc:	1029883a 	mov	r20,r2
  80a1c0:	080bea80 	call	80bea8 <__mdiff>
  80a1c4:	102b883a 	mov	r21,r2
  80a1c8:	10800317 	ldw	r2,12(r2)
  80a1cc:	1001281e 	bne	r2,zero,80a670 <_dtoa_r+0xe28>
  80a1d0:	d9000717 	ldw	r4,28(sp)
  80a1d4:	a80b883a 	mov	r5,r21
  80a1d8:	080b84c0 	call	80b84c <__mcmp>
  80a1dc:	d9001617 	ldw	r4,88(sp)
  80a1e0:	1021883a 	mov	r16,r2
  80a1e4:	a80b883a 	mov	r5,r21
  80a1e8:	080b6f00 	call	80b6f0 <_Bfree>
  80a1ec:	8000041e 	bne	r16,zero,80a200 <_dtoa_r+0x9b8>
  80a1f0:	d8801717 	ldw	r2,92(sp)
  80a1f4:	1000021e 	bne	r2,zero,80a200 <_dtoa_r+0x9b8>
  80a1f8:	e004c03a 	cmpne	r2,fp,zero
  80a1fc:	10011726 	beq	r2,zero,80a65c <_dtoa_r+0xe14>
  80a200:	a0010616 	blt	r20,zero,80a61c <_dtoa_r+0xdd4>
  80a204:	a000041e 	bne	r20,zero,80a218 <_dtoa_r+0x9d0>
  80a208:	d8c01717 	ldw	r3,92(sp)
  80a20c:	1800021e 	bne	r3,zero,80a218 <_dtoa_r+0x9d0>
  80a210:	e004c03a 	cmpne	r2,fp,zero
  80a214:	10010126 	beq	r2,zero,80a61c <_dtoa_r+0xdd4>
  80a218:	04023d16 	blt	zero,r16,80ab10 <_dtoa_r+0x12c8>
  80a21c:	b5c00005 	stb	r23,0(r22)
  80a220:	d9800517 	ldw	r6,20(sp)
  80a224:	d9000f17 	ldw	r4,60(sp)
  80a228:	b5800044 	addi	r22,r22,1
  80a22c:	3105883a 	add	r2,r6,r4
  80a230:	b0806526 	beq	r22,r2,80a3c8 <_dtoa_r+0xb80>
  80a234:	d9400717 	ldw	r5,28(sp)
  80a238:	d9001617 	ldw	r4,88(sp)
  80a23c:	01800284 	movi	r6,10
  80a240:	000f883a 	mov	r7,zero
  80a244:	080c4100 	call	80c410 <__multadd>
  80a248:	d8800715 	stw	r2,28(sp)
  80a24c:	d8800617 	ldw	r2,24(sp)
  80a250:	14c10c26 	beq	r2,r19,80a684 <_dtoa_r+0xe3c>
  80a254:	d9400617 	ldw	r5,24(sp)
  80a258:	d9001617 	ldw	r4,88(sp)
  80a25c:	01800284 	movi	r6,10
  80a260:	000f883a 	mov	r7,zero
  80a264:	080c4100 	call	80c410 <__multadd>
  80a268:	d9001617 	ldw	r4,88(sp)
  80a26c:	980b883a 	mov	r5,r19
  80a270:	01800284 	movi	r6,10
  80a274:	000f883a 	mov	r7,zero
  80a278:	d8800615 	stw	r2,24(sp)
  80a27c:	080c4100 	call	80c410 <__multadd>
  80a280:	1027883a 	mov	r19,r2
  80a284:	003fc206 	br	80a190 <_dtoa_r+0x948>
  80a288:	2445c83a 	sub	r2,r4,r17
  80a28c:	a088983a 	sll	r4,r20,r2
  80a290:	003e4b06 	br	809bc0 <_dtoa_r+0x378>
  80a294:	01bfffc4 	movi	r6,-1
  80a298:	00800044 	movi	r2,1
  80a29c:	d9800e15 	stw	r6,56(sp)
  80a2a0:	d9800f15 	stw	r6,60(sp)
  80a2a4:	d8800b15 	stw	r2,44(sp)
  80a2a8:	d8c01617 	ldw	r3,88(sp)
  80a2ac:	008005c4 	movi	r2,23
  80a2b0:	18001115 	stw	zero,68(r3)
  80a2b4:	1580082e 	bgeu	r2,r22,80a2d8 <_dtoa_r+0xa90>
  80a2b8:	00c00104 	movi	r3,4
  80a2bc:	0009883a 	mov	r4,zero
  80a2c0:	18c7883a 	add	r3,r3,r3
  80a2c4:	18800504 	addi	r2,r3,20
  80a2c8:	21000044 	addi	r4,r4,1
  80a2cc:	b0bffc2e 	bgeu	r22,r2,80a2c0 <_dtoa_r+0xa78>
  80a2d0:	d9801617 	ldw	r6,88(sp)
  80a2d4:	31001115 	stw	r4,68(r6)
  80a2d8:	dc000f17 	ldw	r16,60(sp)
  80a2dc:	003e4b06 	br	809c0c <_dtoa_r+0x3c4>
  80a2e0:	d9801717 	ldw	r6,92(sp)
  80a2e4:	0023883a 	mov	r17,zero
  80a2e8:	31bfff04 	addi	r6,r6,-4
  80a2ec:	d9801715 	stw	r6,92(sp)
  80a2f0:	003df806 	br	809ad4 <_dtoa_r+0x28c>
  80a2f4:	00800804 	movi	r2,32
  80a2f8:	10c9c83a 	sub	r4,r2,r3
  80a2fc:	00c00104 	movi	r3,4
  80a300:	19005a16 	blt	r3,r4,80a46c <_dtoa_r+0xc24>
  80a304:	008000c4 	movi	r2,3
  80a308:	113f7e16 	blt	r2,r4,80a104 <_dtoa_r+0x8bc>
  80a30c:	20800704 	addi	r2,r4,28
  80a310:	003f7506 	br	80a0e8 <_dtoa_r+0x8a0>
  80a314:	d9801717 	ldw	r6,92(sp)
  80a318:	00800044 	movi	r2,1
  80a31c:	1180a10e 	bge	r2,r6,80a5a4 <_dtoa_r+0xd5c>
  80a320:	d9800f17 	ldw	r6,60(sp)
  80a324:	d8c01017 	ldw	r3,64(sp)
  80a328:	30bfffc4 	addi	r2,r6,-1
  80a32c:	1881c616 	blt	r3,r2,80aa48 <_dtoa_r+0x1200>
  80a330:	18a5c83a 	sub	r18,r3,r2
  80a334:	d8800f17 	ldw	r2,60(sp)
  80a338:	10026216 	blt	r2,zero,80acc4 <_dtoa_r+0x147c>
  80a33c:	dc001117 	ldw	r16,68(sp)
  80a340:	1007883a 	mov	r3,r2
  80a344:	d9800a17 	ldw	r6,40(sp)
  80a348:	d8801117 	ldw	r2,68(sp)
  80a34c:	d9001617 	ldw	r4,88(sp)
  80a350:	30cd883a 	add	r6,r6,r3
  80a354:	10c5883a 	add	r2,r2,r3
  80a358:	01400044 	movi	r5,1
  80a35c:	d9800a15 	stw	r6,40(sp)
  80a360:	d8801115 	stw	r2,68(sp)
  80a364:	080c3d40 	call	80c3d4 <__i2b>
  80a368:	1027883a 	mov	r19,r2
  80a36c:	003f2506 	br	80a004 <_dtoa_r+0x7bc>
  80a370:	00c02074 	movhi	r3,129
  80a374:	18d49504 	addi	r3,r3,21076
  80a378:	003d6706 	br	809918 <_dtoa_r+0xd0>
  80a37c:	dd800517 	ldw	r22,20(sp)
  80a380:	04000044 	movi	r16,1
  80a384:	00000706 	br	80a3a4 <_dtoa_r+0xb5c>
  80a388:	d9400717 	ldw	r5,28(sp)
  80a38c:	d9001617 	ldw	r4,88(sp)
  80a390:	01800284 	movi	r6,10
  80a394:	000f883a 	mov	r7,zero
  80a398:	080c4100 	call	80c410 <__multadd>
  80a39c:	d8800715 	stw	r2,28(sp)
  80a3a0:	84000044 	addi	r16,r16,1
  80a3a4:	d9000717 	ldw	r4,28(sp)
  80a3a8:	900b883a 	mov	r5,r18
  80a3ac:	08096040 	call	809604 <quorem>
  80a3b0:	15c00c04 	addi	r23,r2,48
  80a3b4:	b5c00005 	stb	r23,0(r22)
  80a3b8:	d8c00f17 	ldw	r3,60(sp)
  80a3bc:	b5800044 	addi	r22,r22,1
  80a3c0:	80fff116 	blt	r16,r3,80a388 <_dtoa_r+0xb40>
  80a3c4:	d8000615 	stw	zero,24(sp)
  80a3c8:	d9400717 	ldw	r5,28(sp)
  80a3cc:	d9001617 	ldw	r4,88(sp)
  80a3d0:	01800044 	movi	r6,1
  80a3d4:	080c0340 	call	80c034 <__lshift>
  80a3d8:	1009883a 	mov	r4,r2
  80a3dc:	900b883a 	mov	r5,r18
  80a3e0:	d8800715 	stw	r2,28(sp)
  80a3e4:	080b84c0 	call	80b84c <__mcmp>
  80a3e8:	00803c0e 	bge	zero,r2,80a4dc <_dtoa_r+0xc94>
  80a3ec:	b009883a 	mov	r4,r22
  80a3f0:	213fffc4 	addi	r4,r4,-1
  80a3f4:	21400003 	ldbu	r5,0(r4)
  80a3f8:	00800e44 	movi	r2,57
  80a3fc:	28c03fcc 	andi	r3,r5,255
  80a400:	18c0201c 	xori	r3,r3,128
  80a404:	18ffe004 	addi	r3,r3,-128
  80a408:	1881981e 	bne	r3,r2,80aa6c <_dtoa_r+0x1224>
  80a40c:	d9800517 	ldw	r6,20(sp)
  80a410:	21bff71e 	bne	r4,r6,80a3f0 <_dtoa_r+0xba8>
  80a414:	d8800d17 	ldw	r2,52(sp)
  80a418:	37000044 	addi	fp,r6,1
  80a41c:	10800044 	addi	r2,r2,1
  80a420:	d8800d15 	stw	r2,52(sp)
  80a424:	00800c44 	movi	r2,49
  80a428:	30800005 	stb	r2,0(r6)
  80a42c:	d9001617 	ldw	r4,88(sp)
  80a430:	900b883a 	mov	r5,r18
  80a434:	080b6f00 	call	80b6f0 <_Bfree>
  80a438:	983ecd26 	beq	r19,zero,809f70 <_dtoa_r+0x728>
  80a43c:	d8c00617 	ldw	r3,24(sp)
  80a440:	18000426 	beq	r3,zero,80a454 <_dtoa_r+0xc0c>
  80a444:	1cc00326 	beq	r3,r19,80a454 <_dtoa_r+0xc0c>
  80a448:	d9001617 	ldw	r4,88(sp)
  80a44c:	180b883a 	mov	r5,r3
  80a450:	080b6f00 	call	80b6f0 <_Bfree>
  80a454:	d9001617 	ldw	r4,88(sp)
  80a458:	980b883a 	mov	r5,r19
  80a45c:	080b6f00 	call	80b6f0 <_Bfree>
  80a460:	003ec306 	br	809f70 <_dtoa_r+0x728>
  80a464:	1805883a 	mov	r2,r3
  80a468:	003eeb06 	br	80a018 <_dtoa_r+0x7d0>
  80a46c:	d9800a17 	ldw	r6,40(sp)
  80a470:	d8c01117 	ldw	r3,68(sp)
  80a474:	20bfff04 	addi	r2,r4,-4
  80a478:	308d883a 	add	r6,r6,r2
  80a47c:	1887883a 	add	r3,r3,r2
  80a480:	80a1883a 	add	r16,r16,r2
  80a484:	d9800a15 	stw	r6,40(sp)
  80a488:	d8c01115 	stw	r3,68(sp)
  80a48c:	003f1d06 	br	80a104 <_dtoa_r+0x8bc>
  80a490:	a03f0c1e 	bne	r20,zero,80a0c4 <_dtoa_r+0x87c>
  80a494:	00800434 	movhi	r2,16
  80a498:	10bfffc4 	addi	r2,r2,-1
  80a49c:	a884703a 	and	r2,r21,r2
  80a4a0:	103f081e 	bne	r2,zero,80a0c4 <_dtoa_r+0x87c>
  80a4a4:	a89ffc2c 	andhi	r2,r21,32752
  80a4a8:	103f0626 	beq	r2,zero,80a0c4 <_dtoa_r+0x87c>
  80a4ac:	d8c01117 	ldw	r3,68(sp)
  80a4b0:	d9000a17 	ldw	r4,40(sp)
  80a4b4:	18c00044 	addi	r3,r3,1
  80a4b8:	21000044 	addi	r4,r4,1
  80a4bc:	d8c01115 	stw	r3,68(sp)
  80a4c0:	d9000a15 	stw	r4,40(sp)
  80a4c4:	003f0006 	br	80a0c8 <_dtoa_r+0x880>
  80a4c8:	d9400717 	ldw	r5,28(sp)
  80a4cc:	d9001617 	ldw	r4,88(sp)
  80a4d0:	080c53c0 	call	80c53c <__pow5mult>
  80a4d4:	d8800715 	stw	r2,28(sp)
  80a4d8:	003eed06 	br	80a090 <_dtoa_r+0x848>
  80a4dc:	1000021e 	bne	r2,zero,80a4e8 <_dtoa_r+0xca0>
  80a4e0:	b880004c 	andi	r2,r23,1
  80a4e4:	103fc11e 	bne	r2,zero,80a3ec <_dtoa_r+0xba4>
  80a4e8:	b5bfffc4 	addi	r22,r22,-1
  80a4ec:	b0c00007 	ldb	r3,0(r22)
  80a4f0:	00800c04 	movi	r2,48
  80a4f4:	18bffc26 	beq	r3,r2,80a4e8 <_dtoa_r+0xca0>
  80a4f8:	b7000044 	addi	fp,r22,1
  80a4fc:	003fcb06 	br	80a42c <_dtoa_r+0xbe4>
  80a500:	d9800d17 	ldw	r6,52(sp)
  80a504:	018fc83a 	sub	r7,zero,r6
  80a508:	3801f726 	beq	r7,zero,80ace8 <_dtoa_r+0x14a0>
  80a50c:	398003cc 	andi	r6,r7,15
  80a510:	300c90fa 	slli	r6,r6,3
  80a514:	01402074 	movhi	r5,129
  80a518:	2954bc04 	addi	r5,r5,21232
  80a51c:	d9001217 	ldw	r4,72(sp)
  80a520:	314d883a 	add	r6,r6,r5
  80a524:	30c00117 	ldw	r3,4(r6)
  80a528:	30800017 	ldw	r2,0(r6)
  80a52c:	d9401317 	ldw	r5,76(sp)
  80a530:	3821d13a 	srai	r16,r7,4
  80a534:	100d883a 	mov	r6,r2
  80a538:	180f883a 	mov	r7,r3
  80a53c:	0810eac0 	call	810eac <__muldf3>
  80a540:	1011883a 	mov	r8,r2
  80a544:	1813883a 	mov	r9,r3
  80a548:	1029883a 	mov	r20,r2
  80a54c:	182b883a 	mov	r21,r3
  80a550:	8001e526 	beq	r16,zero,80ace8 <_dtoa_r+0x14a0>
  80a554:	05800084 	movi	r22,2
  80a558:	04402074 	movhi	r17,129
  80a55c:	8c54ee04 	addi	r17,r17,21432
  80a560:	8080004c 	andi	r2,r16,1
  80a564:	1005003a 	cmpeq	r2,r2,zero
  80a568:	1000081e 	bne	r2,zero,80a58c <_dtoa_r+0xd44>
  80a56c:	89800017 	ldw	r6,0(r17)
  80a570:	89c00117 	ldw	r7,4(r17)
  80a574:	480b883a 	mov	r5,r9
  80a578:	4009883a 	mov	r4,r8
  80a57c:	0810eac0 	call	810eac <__muldf3>
  80a580:	1011883a 	mov	r8,r2
  80a584:	b5800044 	addi	r22,r22,1
  80a588:	1813883a 	mov	r9,r3
  80a58c:	8021d07a 	srai	r16,r16,1
  80a590:	8c400204 	addi	r17,r17,8
  80a594:	803ff21e 	bne	r16,zero,80a560 <_dtoa_r+0xd18>
  80a598:	4029883a 	mov	r20,r8
  80a59c:	482b883a 	mov	r21,r9
  80a5a0:	003dca06 	br	809ccc <_dtoa_r+0x484>
  80a5a4:	d9000817 	ldw	r4,32(sp)
  80a5a8:	2005003a 	cmpeq	r2,r4,zero
  80a5ac:	1001f61e 	bne	r2,zero,80ad88 <_dtoa_r+0x1540>
  80a5b0:	dc001117 	ldw	r16,68(sp)
  80a5b4:	dc801017 	ldw	r18,64(sp)
  80a5b8:	18c10cc4 	addi	r3,r3,1075
  80a5bc:	003f6106 	br	80a344 <_dtoa_r+0xafc>
  80a5c0:	d8000b15 	stw	zero,44(sp)
  80a5c4:	d9802617 	ldw	r6,152(sp)
  80a5c8:	d8c00d17 	ldw	r3,52(sp)
  80a5cc:	30800044 	addi	r2,r6,1
  80a5d0:	18ad883a 	add	r22,r3,r2
  80a5d4:	b13fffc4 	addi	r4,r22,-1
  80a5d8:	d9000e15 	stw	r4,56(sp)
  80a5dc:	0581f60e 	bge	zero,r22,80adb8 <_dtoa_r+0x1570>
  80a5e0:	dd800f15 	stw	r22,60(sp)
  80a5e4:	003f3006 	br	80a2a8 <_dtoa_r+0xa60>
  80a5e8:	d8000b15 	stw	zero,44(sp)
  80a5ec:	d9002617 	ldw	r4,152(sp)
  80a5f0:	0101eb0e 	bge	zero,r4,80ada0 <_dtoa_r+0x1558>
  80a5f4:	202d883a 	mov	r22,r4
  80a5f8:	d9000e15 	stw	r4,56(sp)
  80a5fc:	d9000f15 	stw	r4,60(sp)
  80a600:	003f2906 	br	80a2a8 <_dtoa_r+0xa60>
  80a604:	01800044 	movi	r6,1
  80a608:	d9800b15 	stw	r6,44(sp)
  80a60c:	003ff706 	br	80a5ec <_dtoa_r+0xda4>
  80a610:	01000044 	movi	r4,1
  80a614:	d9000b15 	stw	r4,44(sp)
  80a618:	003fea06 	br	80a5c4 <_dtoa_r+0xd7c>
  80a61c:	04000c0e 	bge	zero,r16,80a650 <_dtoa_r+0xe08>
  80a620:	d9400717 	ldw	r5,28(sp)
  80a624:	d9001617 	ldw	r4,88(sp)
  80a628:	01800044 	movi	r6,1
  80a62c:	080c0340 	call	80c034 <__lshift>
  80a630:	1009883a 	mov	r4,r2
  80a634:	900b883a 	mov	r5,r18
  80a638:	d8800715 	stw	r2,28(sp)
  80a63c:	080b84c0 	call	80b84c <__mcmp>
  80a640:	0081e00e 	bge	zero,r2,80adc4 <_dtoa_r+0x157c>
  80a644:	bdc00044 	addi	r23,r23,1
  80a648:	00800e84 	movi	r2,58
  80a64c:	b881a226 	beq	r23,r2,80acd8 <_dtoa_r+0x1490>
  80a650:	b7000044 	addi	fp,r22,1
  80a654:	b5c00005 	stb	r23,0(r22)
  80a658:	003f7406 	br	80a42c <_dtoa_r+0xbe4>
  80a65c:	00800e44 	movi	r2,57
  80a660:	b8819d26 	beq	r23,r2,80acd8 <_dtoa_r+0x1490>
  80a664:	053ffa0e 	bge	zero,r20,80a650 <_dtoa_r+0xe08>
  80a668:	8dc00c44 	addi	r23,r17,49
  80a66c:	003ff806 	br	80a650 <_dtoa_r+0xe08>
  80a670:	d9001617 	ldw	r4,88(sp)
  80a674:	a80b883a 	mov	r5,r21
  80a678:	04000044 	movi	r16,1
  80a67c:	080b6f00 	call	80b6f0 <_Bfree>
  80a680:	003edf06 	br	80a200 <_dtoa_r+0x9b8>
  80a684:	d9001617 	ldw	r4,88(sp)
  80a688:	980b883a 	mov	r5,r19
  80a68c:	01800284 	movi	r6,10
  80a690:	000f883a 	mov	r7,zero
  80a694:	080c4100 	call	80c410 <__multadd>
  80a698:	1027883a 	mov	r19,r2
  80a69c:	d8800615 	stw	r2,24(sp)
  80a6a0:	003ebb06 	br	80a190 <_dtoa_r+0x948>
  80a6a4:	d9801117 	ldw	r6,68(sp)
  80a6a8:	d8800d17 	ldw	r2,52(sp)
  80a6ac:	d8000915 	stw	zero,36(sp)
  80a6b0:	308dc83a 	sub	r6,r6,r2
  80a6b4:	0087c83a 	sub	r3,zero,r2
  80a6b8:	d9801115 	stw	r6,68(sp)
  80a6bc:	d8c01015 	stw	r3,64(sp)
  80a6c0:	003cfe06 	br	809abc <_dtoa_r+0x274>
  80a6c4:	018dc83a 	sub	r6,zero,r6
  80a6c8:	d9801115 	stw	r6,68(sp)
  80a6cc:	d8000a15 	stw	zero,40(sp)
  80a6d0:	003cf306 	br	809aa0 <_dtoa_r+0x258>
  80a6d4:	d9000d17 	ldw	r4,52(sp)
  80a6d8:	08115a00 	call	8115a0 <__floatsidf>
  80a6dc:	880b883a 	mov	r5,r17
  80a6e0:	8009883a 	mov	r4,r16
  80a6e4:	180f883a 	mov	r7,r3
  80a6e8:	100d883a 	mov	r6,r2
  80a6ec:	08112f80 	call	8112f8 <__nedf2>
  80a6f0:	103ce126 	beq	r2,zero,809a78 <_dtoa_r+0x230>
  80a6f4:	d9800d17 	ldw	r6,52(sp)
  80a6f8:	31bfffc4 	addi	r6,r6,-1
  80a6fc:	d9800d15 	stw	r6,52(sp)
  80a700:	003cdd06 	br	809a78 <_dtoa_r+0x230>
  80a704:	d9000717 	ldw	r4,28(sp)
  80a708:	900b883a 	mov	r5,r18
  80a70c:	080b84c0 	call	80b84c <__mcmp>
  80a710:	103e8d0e 	bge	r2,zero,80a148 <_dtoa_r+0x900>
  80a714:	d9400717 	ldw	r5,28(sp)
  80a718:	d9001617 	ldw	r4,88(sp)
  80a71c:	01800284 	movi	r6,10
  80a720:	000f883a 	mov	r7,zero
  80a724:	080c4100 	call	80c410 <__multadd>
  80a728:	d9800d17 	ldw	r6,52(sp)
  80a72c:	d8800715 	stw	r2,28(sp)
  80a730:	31bfffc4 	addi	r6,r6,-1
  80a734:	d9800d15 	stw	r6,52(sp)
  80a738:	b001a71e 	bne	r22,zero,80add8 <_dtoa_r+0x1590>
  80a73c:	d8800e17 	ldw	r2,56(sp)
  80a740:	d8800f15 	stw	r2,60(sp)
  80a744:	003e8006 	br	80a148 <_dtoa_r+0x900>
  80a748:	90800417 	ldw	r2,16(r18)
  80a74c:	1085883a 	add	r2,r2,r2
  80a750:	1085883a 	add	r2,r2,r2
  80a754:	1485883a 	add	r2,r2,r18
  80a758:	11000417 	ldw	r4,16(r2)
  80a75c:	080b7180 	call	80b718 <__hi0bits>
  80a760:	00c00804 	movi	r3,32
  80a764:	1887c83a 	sub	r3,r3,r2
  80a768:	003e5a06 	br	80a0d4 <_dtoa_r+0x88c>
  80a76c:	d9400717 	ldw	r5,28(sp)
  80a770:	d9801017 	ldw	r6,64(sp)
  80a774:	d9001617 	ldw	r4,88(sp)
  80a778:	080c53c0 	call	80c53c <__pow5mult>
  80a77c:	d8800715 	stw	r2,28(sp)
  80a780:	003e4306 	br	80a090 <_dtoa_r+0x848>
  80a784:	d9800f17 	ldw	r6,60(sp)
  80a788:	d8800d17 	ldw	r2,52(sp)
  80a78c:	d9800315 	stw	r6,12(sp)
  80a790:	d8800415 	stw	r2,16(sp)
  80a794:	d8c00b17 	ldw	r3,44(sp)
  80a798:	1805003a 	cmpeq	r2,r3,zero
  80a79c:	1000e21e 	bne	r2,zero,80ab28 <_dtoa_r+0x12e0>
  80a7a0:	d9000317 	ldw	r4,12(sp)
  80a7a4:	0005883a 	mov	r2,zero
  80a7a8:	00cff834 	movhi	r3,16352
  80a7ac:	200c90fa 	slli	r6,r4,3
  80a7b0:	01002074 	movhi	r4,129
  80a7b4:	2114bc04 	addi	r4,r4,21232
  80a7b8:	180b883a 	mov	r5,r3
  80a7bc:	310d883a 	add	r6,r6,r4
  80a7c0:	327fff17 	ldw	r9,-4(r6)
  80a7c4:	323ffe17 	ldw	r8,-8(r6)
  80a7c8:	1009883a 	mov	r4,r2
  80a7cc:	480f883a 	mov	r7,r9
  80a7d0:	400d883a 	mov	r6,r8
  80a7d4:	08022b40 	call	8022b4 <__divdf3>
  80a7d8:	180b883a 	mov	r5,r3
  80a7dc:	b00d883a 	mov	r6,r22
  80a7e0:	b80f883a 	mov	r7,r23
  80a7e4:	1009883a 	mov	r4,r2
  80a7e8:	08021c00 	call	8021c0 <__subdf3>
  80a7ec:	a80b883a 	mov	r5,r21
  80a7f0:	a009883a 	mov	r4,r20
  80a7f4:	d8c01915 	stw	r3,100(sp)
  80a7f8:	d8801815 	stw	r2,96(sp)
  80a7fc:	08116980 	call	811698 <__fixdfsi>
  80a800:	1009883a 	mov	r4,r2
  80a804:	1027883a 	mov	r19,r2
  80a808:	08115a00 	call	8115a0 <__floatsidf>
  80a80c:	a80b883a 	mov	r5,r21
  80a810:	a009883a 	mov	r4,r20
  80a814:	180f883a 	mov	r7,r3
  80a818:	100d883a 	mov	r6,r2
  80a81c:	08021c00 	call	8021c0 <__subdf3>
  80a820:	d9801817 	ldw	r6,96(sp)
  80a824:	1823883a 	mov	r17,r3
  80a828:	d8801415 	stw	r2,80(sp)
  80a82c:	302d883a 	mov	r22,r6
  80a830:	d9800517 	ldw	r6,20(sp)
  80a834:	9cc00c04 	addi	r19,r19,48
  80a838:	dc401515 	stw	r17,84(sp)
  80a83c:	d8c01917 	ldw	r3,100(sp)
  80a840:	34c00005 	stb	r19,0(r6)
  80a844:	d8800517 	ldw	r2,20(sp)
  80a848:	d9401917 	ldw	r5,100(sp)
  80a84c:	d9801417 	ldw	r6,80(sp)
  80a850:	b009883a 	mov	r4,r22
  80a854:	880f883a 	mov	r7,r17
  80a858:	182f883a 	mov	r23,r3
  80a85c:	17000044 	addi	fp,r2,1
  80a860:	08113800 	call	811380 <__gtdf2>
  80a864:	00804e16 	blt	zero,r2,80a9a0 <_dtoa_r+0x1158>
  80a868:	d9801417 	ldw	r6,80(sp)
  80a86c:	0005883a 	mov	r2,zero
  80a870:	00cffc34 	movhi	r3,16368
  80a874:	180b883a 	mov	r5,r3
  80a878:	880f883a 	mov	r7,r17
  80a87c:	1009883a 	mov	r4,r2
  80a880:	08021c00 	call	8021c0 <__subdf3>
  80a884:	d9401917 	ldw	r5,100(sp)
  80a888:	180f883a 	mov	r7,r3
  80a88c:	b009883a 	mov	r4,r22
  80a890:	100d883a 	mov	r6,r2
  80a894:	08113800 	call	811380 <__gtdf2>
  80a898:	00bda216 	blt	zero,r2,809f24 <_dtoa_r+0x6dc>
  80a89c:	d8c00317 	ldw	r3,12(sp)
  80a8a0:	00800044 	movi	r2,1
  80a8a4:	10c01216 	blt	r2,r3,80a8f0 <_dtoa_r+0x10a8>
  80a8a8:	003d4506 	br	809dc0 <_dtoa_r+0x578>
  80a8ac:	d9801417 	ldw	r6,80(sp)
  80a8b0:	0005883a 	mov	r2,zero
  80a8b4:	00cffc34 	movhi	r3,16368
  80a8b8:	180b883a 	mov	r5,r3
  80a8bc:	880f883a 	mov	r7,r17
  80a8c0:	1009883a 	mov	r4,r2
  80a8c4:	08021c00 	call	8021c0 <__subdf3>
  80a8c8:	d9c01b17 	ldw	r7,108(sp)
  80a8cc:	180b883a 	mov	r5,r3
  80a8d0:	1009883a 	mov	r4,r2
  80a8d4:	b00d883a 	mov	r6,r22
  80a8d8:	08114900 	call	811490 <__ltdf2>
  80a8dc:	103d9116 	blt	r2,zero,809f24 <_dtoa_r+0x6dc>
  80a8e0:	d9800517 	ldw	r6,20(sp)
  80a8e4:	d9000317 	ldw	r4,12(sp)
  80a8e8:	3105883a 	add	r2,r6,r4
  80a8ec:	e0bd3426 	beq	fp,r2,809dc0 <_dtoa_r+0x578>
  80a8f0:	04500934 	movhi	r17,16420
  80a8f4:	0021883a 	mov	r16,zero
  80a8f8:	b80b883a 	mov	r5,r23
  80a8fc:	b009883a 	mov	r4,r22
  80a900:	800d883a 	mov	r6,r16
  80a904:	880f883a 	mov	r7,r17
  80a908:	0810eac0 	call	810eac <__muldf3>
  80a90c:	d9401517 	ldw	r5,84(sp)
  80a910:	d9001417 	ldw	r4,80(sp)
  80a914:	880f883a 	mov	r7,r17
  80a918:	000d883a 	mov	r6,zero
  80a91c:	d8801a15 	stw	r2,104(sp)
  80a920:	d8c01b15 	stw	r3,108(sp)
  80a924:	0810eac0 	call	810eac <__muldf3>
  80a928:	180b883a 	mov	r5,r3
  80a92c:	1009883a 	mov	r4,r2
  80a930:	1823883a 	mov	r17,r3
  80a934:	1021883a 	mov	r16,r2
  80a938:	08116980 	call	811698 <__fixdfsi>
  80a93c:	1009883a 	mov	r4,r2
  80a940:	102b883a 	mov	r21,r2
  80a944:	08115a00 	call	8115a0 <__floatsidf>
  80a948:	880b883a 	mov	r5,r17
  80a94c:	8009883a 	mov	r4,r16
  80a950:	180f883a 	mov	r7,r3
  80a954:	100d883a 	mov	r6,r2
  80a958:	08021c00 	call	8021c0 <__subdf3>
  80a95c:	1021883a 	mov	r16,r2
  80a960:	d9001b17 	ldw	r4,108(sp)
  80a964:	1823883a 	mov	r17,r3
  80a968:	dc001415 	stw	r16,80(sp)
  80a96c:	ad400c04 	addi	r21,r21,48
  80a970:	dc401515 	stw	r17,84(sp)
  80a974:	d8801a17 	ldw	r2,104(sp)
  80a978:	e5400005 	stb	r21,0(fp)
  80a97c:	202f883a 	mov	r23,r4
  80a980:	d9c01b17 	ldw	r7,108(sp)
  80a984:	d9001417 	ldw	r4,80(sp)
  80a988:	880b883a 	mov	r5,r17
  80a98c:	100d883a 	mov	r6,r2
  80a990:	102d883a 	mov	r22,r2
  80a994:	e7000044 	addi	fp,fp,1
  80a998:	08114900 	call	811490 <__ltdf2>
  80a99c:	103fc30e 	bge	r2,zero,80a8ac <_dtoa_r+0x1064>
  80a9a0:	d9000417 	ldw	r4,16(sp)
  80a9a4:	d9000d15 	stw	r4,52(sp)
  80a9a8:	003d7106 	br	809f70 <_dtoa_r+0x728>
  80a9ac:	d9801717 	ldw	r6,92(sp)
  80a9b0:	00800084 	movi	r2,2
  80a9b4:	11bde60e 	bge	r2,r6,80a150 <_dtoa_r+0x908>
  80a9b8:	203cfb1e 	bne	r4,zero,809da8 <_dtoa_r+0x560>
  80a9bc:	d9001617 	ldw	r4,88(sp)
  80a9c0:	900b883a 	mov	r5,r18
  80a9c4:	01800144 	movi	r6,5
  80a9c8:	000f883a 	mov	r7,zero
  80a9cc:	080c4100 	call	80c410 <__multadd>
  80a9d0:	d9000717 	ldw	r4,28(sp)
  80a9d4:	100b883a 	mov	r5,r2
  80a9d8:	1025883a 	mov	r18,r2
  80a9dc:	080b84c0 	call	80b84c <__mcmp>
  80a9e0:	00bcf10e 	bge	zero,r2,809da8 <_dtoa_r+0x560>
  80a9e4:	d8c00d17 	ldw	r3,52(sp)
  80a9e8:	d9000517 	ldw	r4,20(sp)
  80a9ec:	d8000615 	stw	zero,24(sp)
  80a9f0:	18c00044 	addi	r3,r3,1
  80a9f4:	d8c00d15 	stw	r3,52(sp)
  80a9f8:	00800c44 	movi	r2,49
  80a9fc:	27000044 	addi	fp,r4,1
  80aa00:	20800005 	stb	r2,0(r4)
  80aa04:	003e8906 	br	80a42c <_dtoa_r+0xbe4>
  80aa08:	d8c00517 	ldw	r3,20(sp)
  80aa0c:	003bc206 	br	809918 <_dtoa_r+0xd0>
  80aa10:	01802074 	movhi	r6,129
  80aa14:	3194ee04 	addi	r6,r6,21432
  80aa18:	30c00917 	ldw	r3,36(r6)
  80aa1c:	30800817 	ldw	r2,32(r6)
  80aa20:	d9001217 	ldw	r4,72(sp)
  80aa24:	d9401317 	ldw	r5,76(sp)
  80aa28:	180f883a 	mov	r7,r3
  80aa2c:	100d883a 	mov	r6,r2
  80aa30:	08022b40 	call	8022b4 <__divdf3>
  80aa34:	948003cc 	andi	r18,r18,15
  80aa38:	058000c4 	movi	r22,3
  80aa3c:	1029883a 	mov	r20,r2
  80aa40:	182b883a 	mov	r21,r3
  80aa44:	003c8906 	br	809c6c <_dtoa_r+0x424>
  80aa48:	d9001017 	ldw	r4,64(sp)
  80aa4c:	d9800917 	ldw	r6,36(sp)
  80aa50:	0025883a 	mov	r18,zero
  80aa54:	1105c83a 	sub	r2,r2,r4
  80aa58:	2089883a 	add	r4,r4,r2
  80aa5c:	308d883a 	add	r6,r6,r2
  80aa60:	d9001015 	stw	r4,64(sp)
  80aa64:	d9800915 	stw	r6,36(sp)
  80aa68:	003e3206 	br	80a334 <_dtoa_r+0xaec>
  80aa6c:	28800044 	addi	r2,r5,1
  80aa70:	27000044 	addi	fp,r4,1
  80aa74:	20800005 	stb	r2,0(r4)
  80aa78:	003e6c06 	br	80a42c <_dtoa_r+0xbe4>
  80aa7c:	d8800f17 	ldw	r2,60(sp)
  80aa80:	00bce016 	blt	zero,r2,809e04 <_dtoa_r+0x5bc>
  80aa84:	d9800f17 	ldw	r6,60(sp)
  80aa88:	303cc51e 	bne	r6,zero,809da0 <_dtoa_r+0x558>
  80aa8c:	0005883a 	mov	r2,zero
  80aa90:	00d00534 	movhi	r3,16404
  80aa94:	980b883a 	mov	r5,r19
  80aa98:	180f883a 	mov	r7,r3
  80aa9c:	9009883a 	mov	r4,r18
  80aaa0:	100d883a 	mov	r6,r2
  80aaa4:	0810eac0 	call	810eac <__muldf3>
  80aaa8:	180b883a 	mov	r5,r3
  80aaac:	a80f883a 	mov	r7,r21
  80aab0:	1009883a 	mov	r4,r2
  80aab4:	a00d883a 	mov	r6,r20
  80aab8:	08114080 	call	811408 <__gedf2>
  80aabc:	103cb80e 	bge	r2,zero,809da0 <_dtoa_r+0x558>
  80aac0:	0027883a 	mov	r19,zero
  80aac4:	0025883a 	mov	r18,zero
  80aac8:	003fc606 	br	80a9e4 <_dtoa_r+0x119c>
  80aacc:	99400117 	ldw	r5,4(r19)
  80aad0:	d9001617 	ldw	r4,88(sp)
  80aad4:	080bc700 	call	80bc70 <_Balloc>
  80aad8:	99800417 	ldw	r6,16(r19)
  80aadc:	11000304 	addi	r4,r2,12
  80aae0:	99400304 	addi	r5,r19,12
  80aae4:	318d883a 	add	r6,r6,r6
  80aae8:	318d883a 	add	r6,r6,r6
  80aaec:	31800204 	addi	r6,r6,8
  80aaf0:	1023883a 	mov	r17,r2
  80aaf4:	0804f780 	call	804f78 <memcpy>
  80aaf8:	d9001617 	ldw	r4,88(sp)
  80aafc:	880b883a 	mov	r5,r17
  80ab00:	01800044 	movi	r6,1
  80ab04:	080c0340 	call	80c034 <__lshift>
  80ab08:	100b883a 	mov	r5,r2
  80ab0c:	003d9c06 	br	80a180 <_dtoa_r+0x938>
  80ab10:	00800e44 	movi	r2,57
  80ab14:	b8807026 	beq	r23,r2,80acd8 <_dtoa_r+0x1490>
  80ab18:	b8800044 	addi	r2,r23,1
  80ab1c:	b7000044 	addi	fp,r22,1
  80ab20:	b0800005 	stb	r2,0(r22)
  80ab24:	003e4106 	br	80a42c <_dtoa_r+0xbe4>
  80ab28:	d8800317 	ldw	r2,12(sp)
  80ab2c:	01802074 	movhi	r6,129
  80ab30:	3194bc04 	addi	r6,r6,21232
  80ab34:	b009883a 	mov	r4,r22
  80ab38:	100e90fa 	slli	r7,r2,3
  80ab3c:	b80b883a 	mov	r5,r23
  80ab40:	398f883a 	add	r7,r7,r6
  80ab44:	38bffe17 	ldw	r2,-8(r7)
  80ab48:	d9800517 	ldw	r6,20(sp)
  80ab4c:	38ffff17 	ldw	r3,-4(r7)
  80ab50:	37000044 	addi	fp,r6,1
  80ab54:	180f883a 	mov	r7,r3
  80ab58:	100d883a 	mov	r6,r2
  80ab5c:	0810eac0 	call	810eac <__muldf3>
  80ab60:	a80b883a 	mov	r5,r21
  80ab64:	a009883a 	mov	r4,r20
  80ab68:	182f883a 	mov	r23,r3
  80ab6c:	102d883a 	mov	r22,r2
  80ab70:	08116980 	call	811698 <__fixdfsi>
  80ab74:	1009883a 	mov	r4,r2
  80ab78:	1027883a 	mov	r19,r2
  80ab7c:	08115a00 	call	8115a0 <__floatsidf>
  80ab80:	a80b883a 	mov	r5,r21
  80ab84:	a009883a 	mov	r4,r20
  80ab88:	180f883a 	mov	r7,r3
  80ab8c:	100d883a 	mov	r6,r2
  80ab90:	08021c00 	call	8021c0 <__subdf3>
  80ab94:	180b883a 	mov	r5,r3
  80ab98:	d8c00517 	ldw	r3,20(sp)
  80ab9c:	9cc00c04 	addi	r19,r19,48
  80aba0:	1009883a 	mov	r4,r2
  80aba4:	1cc00005 	stb	r19,0(r3)
  80aba8:	2021883a 	mov	r16,r4
  80abac:	d9000317 	ldw	r4,12(sp)
  80abb0:	00800044 	movi	r2,1
  80abb4:	2823883a 	mov	r17,r5
  80abb8:	20802226 	beq	r4,r2,80ac44 <_dtoa_r+0x13fc>
  80abbc:	1029883a 	mov	r20,r2
  80abc0:	0005883a 	mov	r2,zero
  80abc4:	00d00934 	movhi	r3,16420
  80abc8:	180f883a 	mov	r7,r3
  80abcc:	100d883a 	mov	r6,r2
  80abd0:	880b883a 	mov	r5,r17
  80abd4:	8009883a 	mov	r4,r16
  80abd8:	0810eac0 	call	810eac <__muldf3>
  80abdc:	180b883a 	mov	r5,r3
  80abe0:	1009883a 	mov	r4,r2
  80abe4:	1823883a 	mov	r17,r3
  80abe8:	1021883a 	mov	r16,r2
  80abec:	08116980 	call	811698 <__fixdfsi>
  80abf0:	1009883a 	mov	r4,r2
  80abf4:	102b883a 	mov	r21,r2
  80abf8:	08115a00 	call	8115a0 <__floatsidf>
  80abfc:	880b883a 	mov	r5,r17
  80ac00:	8009883a 	mov	r4,r16
  80ac04:	180f883a 	mov	r7,r3
  80ac08:	100d883a 	mov	r6,r2
  80ac0c:	08021c00 	call	8021c0 <__subdf3>
  80ac10:	180b883a 	mov	r5,r3
  80ac14:	d8c00517 	ldw	r3,20(sp)
  80ac18:	1009883a 	mov	r4,r2
  80ac1c:	ad400c04 	addi	r21,r21,48
  80ac20:	1d05883a 	add	r2,r3,r20
  80ac24:	15400005 	stb	r21,0(r2)
  80ac28:	2021883a 	mov	r16,r4
  80ac2c:	d9000317 	ldw	r4,12(sp)
  80ac30:	a5000044 	addi	r20,r20,1
  80ac34:	2823883a 	mov	r17,r5
  80ac38:	a13fe11e 	bne	r20,r4,80abc0 <_dtoa_r+0x1378>
  80ac3c:	e505883a 	add	r2,fp,r20
  80ac40:	173fffc4 	addi	fp,r2,-1
  80ac44:	0025883a 	mov	r18,zero
  80ac48:	04cff834 	movhi	r19,16352
  80ac4c:	b009883a 	mov	r4,r22
  80ac50:	b80b883a 	mov	r5,r23
  80ac54:	900d883a 	mov	r6,r18
  80ac58:	980f883a 	mov	r7,r19
  80ac5c:	08022400 	call	802240 <__adddf3>
  80ac60:	180b883a 	mov	r5,r3
  80ac64:	1009883a 	mov	r4,r2
  80ac68:	800d883a 	mov	r6,r16
  80ac6c:	880f883a 	mov	r7,r17
  80ac70:	08114900 	call	811490 <__ltdf2>
  80ac74:	103cab16 	blt	r2,zero,809f24 <_dtoa_r+0x6dc>
  80ac78:	0009883a 	mov	r4,zero
  80ac7c:	980b883a 	mov	r5,r19
  80ac80:	b80f883a 	mov	r7,r23
  80ac84:	b00d883a 	mov	r6,r22
  80ac88:	08021c00 	call	8021c0 <__subdf3>
  80ac8c:	180b883a 	mov	r5,r3
  80ac90:	880f883a 	mov	r7,r17
  80ac94:	1009883a 	mov	r4,r2
  80ac98:	800d883a 	mov	r6,r16
  80ac9c:	08113800 	call	811380 <__gtdf2>
  80aca0:	00bc470e 	bge	zero,r2,809dc0 <_dtoa_r+0x578>
  80aca4:	00c00c04 	movi	r3,48
  80aca8:	e73fffc4 	addi	fp,fp,-1
  80acac:	e0800007 	ldb	r2,0(fp)
  80acb0:	10fffd26 	beq	r2,r3,80aca8 <_dtoa_r+0x1460>
  80acb4:	d9800417 	ldw	r6,16(sp)
  80acb8:	e7000044 	addi	fp,fp,1
  80acbc:	d9800d15 	stw	r6,52(sp)
  80acc0:	003cab06 	br	809f70 <_dtoa_r+0x728>
  80acc4:	d8c00f17 	ldw	r3,60(sp)
  80acc8:	d9001117 	ldw	r4,68(sp)
  80accc:	20e1c83a 	sub	r16,r4,r3
  80acd0:	0007883a 	mov	r3,zero
  80acd4:	003d9b06 	br	80a344 <_dtoa_r+0xafc>
  80acd8:	00800e44 	movi	r2,57
  80acdc:	b0800005 	stb	r2,0(r22)
  80ace0:	b5800044 	addi	r22,r22,1
  80ace4:	003dc106 	br	80a3ec <_dtoa_r+0xba4>
  80ace8:	05800084 	movi	r22,2
  80acec:	003bf706 	br	809ccc <_dtoa_r+0x484>
  80acf0:	d9000f17 	ldw	r4,60(sp)
  80acf4:	013c000e 	bge	zero,r4,809cf8 <_dtoa_r+0x4b0>
  80acf8:	d9800e17 	ldw	r6,56(sp)
  80acfc:	01bc300e 	bge	zero,r6,809dc0 <_dtoa_r+0x578>
  80ad00:	0005883a 	mov	r2,zero
  80ad04:	00d00934 	movhi	r3,16420
  80ad08:	a80b883a 	mov	r5,r21
  80ad0c:	180f883a 	mov	r7,r3
  80ad10:	a009883a 	mov	r4,r20
  80ad14:	100d883a 	mov	r6,r2
  80ad18:	0810eac0 	call	810eac <__muldf3>
  80ad1c:	b1000044 	addi	r4,r22,1
  80ad20:	1021883a 	mov	r16,r2
  80ad24:	1823883a 	mov	r17,r3
  80ad28:	08115a00 	call	8115a0 <__floatsidf>
  80ad2c:	880b883a 	mov	r5,r17
  80ad30:	8009883a 	mov	r4,r16
  80ad34:	180f883a 	mov	r7,r3
  80ad38:	100d883a 	mov	r6,r2
  80ad3c:	0810eac0 	call	810eac <__muldf3>
  80ad40:	0011883a 	mov	r8,zero
  80ad44:	02500734 	movhi	r9,16412
  80ad48:	180b883a 	mov	r5,r3
  80ad4c:	480f883a 	mov	r7,r9
  80ad50:	1009883a 	mov	r4,r2
  80ad54:	400d883a 	mov	r6,r8
  80ad58:	08022400 	call	802240 <__adddf3>
  80ad5c:	102d883a 	mov	r22,r2
  80ad60:	00bf3034 	movhi	r2,64704
  80ad64:	10ef883a 	add	r23,r2,r3
  80ad68:	d8800d17 	ldw	r2,52(sp)
  80ad6c:	d8c00e17 	ldw	r3,56(sp)
  80ad70:	8029883a 	mov	r20,r16
  80ad74:	10bfffc4 	addi	r2,r2,-1
  80ad78:	882b883a 	mov	r21,r17
  80ad7c:	d8800415 	stw	r2,16(sp)
  80ad80:	d8c00315 	stw	r3,12(sp)
  80ad84:	003e8306 	br	80a794 <_dtoa_r+0xf4c>
  80ad88:	d8800117 	ldw	r2,4(sp)
  80ad8c:	dc001117 	ldw	r16,68(sp)
  80ad90:	dc801017 	ldw	r18,64(sp)
  80ad94:	00c00d84 	movi	r3,54
  80ad98:	1887c83a 	sub	r3,r3,r2
  80ad9c:	003d6906 	br	80a344 <_dtoa_r+0xafc>
  80ada0:	01800044 	movi	r6,1
  80ada4:	3021883a 	mov	r16,r6
  80ada8:	d9800f15 	stw	r6,60(sp)
  80adac:	d9802615 	stw	r6,152(sp)
  80adb0:	d9800e15 	stw	r6,56(sp)
  80adb4:	003b9306 	br	809c04 <_dtoa_r+0x3bc>
  80adb8:	b021883a 	mov	r16,r22
  80adbc:	dd800f15 	stw	r22,60(sp)
  80adc0:	003b9006 	br	809c04 <_dtoa_r+0x3bc>
  80adc4:	103e221e 	bne	r2,zero,80a650 <_dtoa_r+0xe08>
  80adc8:	b880004c 	andi	r2,r23,1
  80adcc:	1005003a 	cmpeq	r2,r2,zero
  80add0:	103e1f1e 	bne	r2,zero,80a650 <_dtoa_r+0xe08>
  80add4:	003e1b06 	br	80a644 <_dtoa_r+0xdfc>
  80add8:	d9001617 	ldw	r4,88(sp)
  80addc:	980b883a 	mov	r5,r19
  80ade0:	01800284 	movi	r6,10
  80ade4:	000f883a 	mov	r7,zero
  80ade8:	080c4100 	call	80c410 <__multadd>
  80adec:	d8c00e17 	ldw	r3,56(sp)
  80adf0:	1027883a 	mov	r19,r2
  80adf4:	d8c00f15 	stw	r3,60(sp)
  80adf8:	003cd306 	br	80a148 <_dtoa_r+0x900>

0080adfc <__sflags>:
  80adfc:	28c00007 	ldb	r3,0(r5)
  80ae00:	00801c84 	movi	r2,114
  80ae04:	18800926 	beq	r3,r2,80ae2c <__sflags+0x30>
  80ae08:	00801dc4 	movi	r2,119
  80ae0c:	18801426 	beq	r3,r2,80ae60 <__sflags+0x64>
  80ae10:	00801844 	movi	r2,97
  80ae14:	18801626 	beq	r3,r2,80ae70 <__sflags+0x74>
  80ae18:	0007883a 	mov	r3,zero
  80ae1c:	00800584 	movi	r2,22
  80ae20:	20800015 	stw	r2,0(r4)
  80ae24:	1805883a 	mov	r2,r3
  80ae28:	f800283a 	ret
  80ae2c:	000f883a 	mov	r7,zero
  80ae30:	0011883a 	mov	r8,zero
  80ae34:	00c00104 	movi	r3,4
  80ae38:	28800047 	ldb	r2,1(r5)
  80ae3c:	10000426 	beq	r2,zero,80ae50 <__sflags+0x54>
  80ae40:	01000ac4 	movi	r4,43
  80ae44:	11000e26 	beq	r2,r4,80ae80 <__sflags+0x84>
  80ae48:	28800087 	ldb	r2,2(r5)
  80ae4c:	11000c26 	beq	r2,r4,80ae80 <__sflags+0x84>
  80ae50:	3a04b03a 	or	r2,r7,r8
  80ae54:	30800015 	stw	r2,0(r6)
  80ae58:	1805883a 	mov	r2,r3
  80ae5c:	f800283a 	ret
  80ae60:	01c00044 	movi	r7,1
  80ae64:	02018004 	movi	r8,1536
  80ae68:	00c00204 	movi	r3,8
  80ae6c:	003ff206 	br	80ae38 <__sflags+0x3c>
  80ae70:	01c00044 	movi	r7,1
  80ae74:	02008204 	movi	r8,520
  80ae78:	00c04204 	movi	r3,264
  80ae7c:	003fee06 	br	80ae38 <__sflags+0x3c>
  80ae80:	00bffcc4 	movi	r2,-13
  80ae84:	1884703a 	and	r2,r3,r2
  80ae88:	01c00084 	movi	r7,2
  80ae8c:	10c00414 	ori	r3,r2,16
  80ae90:	3a04b03a 	or	r2,r7,r8
  80ae94:	30800015 	stw	r2,0(r6)
  80ae98:	003fef06 	br	80ae58 <__sflags+0x5c>

0080ae9c <__sfvwrite_r>:
  80ae9c:	30800217 	ldw	r2,8(r6)
  80aea0:	defff504 	addi	sp,sp,-44
  80aea4:	df000915 	stw	fp,36(sp)
  80aea8:	dd800715 	stw	r22,28(sp)
  80aeac:	dc800315 	stw	r18,12(sp)
  80aeb0:	dfc00a15 	stw	ra,40(sp)
  80aeb4:	ddc00815 	stw	r23,32(sp)
  80aeb8:	dd400615 	stw	r21,24(sp)
  80aebc:	dd000515 	stw	r20,20(sp)
  80aec0:	dcc00415 	stw	r19,16(sp)
  80aec4:	dc400215 	stw	r17,8(sp)
  80aec8:	dc000115 	stw	r16,4(sp)
  80aecc:	302d883a 	mov	r22,r6
  80aed0:	2039883a 	mov	fp,r4
  80aed4:	2825883a 	mov	r18,r5
  80aed8:	10001c26 	beq	r2,zero,80af4c <__sfvwrite_r+0xb0>
  80aedc:	29c0030b 	ldhu	r7,12(r5)
  80aee0:	3880020c 	andi	r2,r7,8
  80aee4:	10002726 	beq	r2,zero,80af84 <__sfvwrite_r+0xe8>
  80aee8:	28800417 	ldw	r2,16(r5)
  80aeec:	10002526 	beq	r2,zero,80af84 <__sfvwrite_r+0xe8>
  80aef0:	3880008c 	andi	r2,r7,2
  80aef4:	b5400017 	ldw	r21,0(r22)
  80aef8:	10002826 	beq	r2,zero,80af9c <__sfvwrite_r+0x100>
  80aefc:	0021883a 	mov	r16,zero
  80af00:	0023883a 	mov	r17,zero
  80af04:	880d883a 	mov	r6,r17
  80af08:	e009883a 	mov	r4,fp
  80af0c:	00810004 	movi	r2,1024
  80af10:	80006e26 	beq	r16,zero,80b0cc <__sfvwrite_r+0x230>
  80af14:	800f883a 	mov	r7,r16
  80af18:	91400717 	ldw	r5,28(r18)
  80af1c:	1400012e 	bgeu	r2,r16,80af24 <__sfvwrite_r+0x88>
  80af20:	100f883a 	mov	r7,r2
  80af24:	90c00917 	ldw	r3,36(r18)
  80af28:	183ee83a 	callr	r3
  80af2c:	1007883a 	mov	r3,r2
  80af30:	80a1c83a 	sub	r16,r16,r2
  80af34:	88a3883a 	add	r17,r17,r2
  80af38:	00806d0e 	bge	zero,r2,80b0f0 <__sfvwrite_r+0x254>
  80af3c:	b0800217 	ldw	r2,8(r22)
  80af40:	10c5c83a 	sub	r2,r2,r3
  80af44:	b0800215 	stw	r2,8(r22)
  80af48:	103fee1e 	bne	r2,zero,80af04 <__sfvwrite_r+0x68>
  80af4c:	0009883a 	mov	r4,zero
  80af50:	2005883a 	mov	r2,r4
  80af54:	dfc00a17 	ldw	ra,40(sp)
  80af58:	df000917 	ldw	fp,36(sp)
  80af5c:	ddc00817 	ldw	r23,32(sp)
  80af60:	dd800717 	ldw	r22,28(sp)
  80af64:	dd400617 	ldw	r21,24(sp)
  80af68:	dd000517 	ldw	r20,20(sp)
  80af6c:	dcc00417 	ldw	r19,16(sp)
  80af70:	dc800317 	ldw	r18,12(sp)
  80af74:	dc400217 	ldw	r17,8(sp)
  80af78:	dc000117 	ldw	r16,4(sp)
  80af7c:	dec00b04 	addi	sp,sp,44
  80af80:	f800283a 	ret
  80af84:	08092a40 	call	8092a4 <__swsetup_r>
  80af88:	1000e41e 	bne	r2,zero,80b31c <__sfvwrite_r+0x480>
  80af8c:	91c0030b 	ldhu	r7,12(r18)
  80af90:	b5400017 	ldw	r21,0(r22)
  80af94:	3880008c 	andi	r2,r7,2
  80af98:	103fd81e 	bne	r2,zero,80aefc <__sfvwrite_r+0x60>
  80af9c:	3880004c 	andi	r2,r7,1
  80afa0:	1005003a 	cmpeq	r2,r2,zero
  80afa4:	10005726 	beq	r2,zero,80b104 <__sfvwrite_r+0x268>
  80afa8:	0029883a 	mov	r20,zero
  80afac:	002f883a 	mov	r23,zero
  80afb0:	a0004226 	beq	r20,zero,80b0bc <__sfvwrite_r+0x220>
  80afb4:	3880800c 	andi	r2,r7,512
  80afb8:	94000217 	ldw	r16,8(r18)
  80afbc:	10008b26 	beq	r2,zero,80b1ec <__sfvwrite_r+0x350>
  80afc0:	800d883a 	mov	r6,r16
  80afc4:	a400a536 	bltu	r20,r16,80b25c <__sfvwrite_r+0x3c0>
  80afc8:	3881200c 	andi	r2,r7,1152
  80afcc:	10002726 	beq	r2,zero,80b06c <__sfvwrite_r+0x1d0>
  80afd0:	90800517 	ldw	r2,20(r18)
  80afd4:	92000417 	ldw	r8,16(r18)
  80afd8:	91400017 	ldw	r5,0(r18)
  80afdc:	1087883a 	add	r3,r2,r2
  80afe0:	1887883a 	add	r3,r3,r2
  80afe4:	1808d7fa 	srli	r4,r3,31
  80afe8:	2a21c83a 	sub	r16,r5,r8
  80afec:	80800044 	addi	r2,r16,1
  80aff0:	20c9883a 	add	r4,r4,r3
  80aff4:	2027d07a 	srai	r19,r4,1
  80aff8:	a085883a 	add	r2,r20,r2
  80affc:	980d883a 	mov	r6,r19
  80b000:	9880022e 	bgeu	r19,r2,80b00c <__sfvwrite_r+0x170>
  80b004:	1027883a 	mov	r19,r2
  80b008:	100d883a 	mov	r6,r2
  80b00c:	3881000c 	andi	r2,r7,1024
  80b010:	1000b826 	beq	r2,zero,80b2f4 <__sfvwrite_r+0x458>
  80b014:	300b883a 	mov	r5,r6
  80b018:	e009883a 	mov	r4,fp
  80b01c:	08047540 	call	804754 <_malloc_r>
  80b020:	10003126 	beq	r2,zero,80b0e8 <__sfvwrite_r+0x24c>
  80b024:	91400417 	ldw	r5,16(r18)
  80b028:	1009883a 	mov	r4,r2
  80b02c:	800d883a 	mov	r6,r16
  80b030:	1023883a 	mov	r17,r2
  80b034:	0804f780 	call	804f78 <memcpy>
  80b038:	90c0030b 	ldhu	r3,12(r18)
  80b03c:	00beffc4 	movi	r2,-1025
  80b040:	1886703a 	and	r3,r3,r2
  80b044:	18c02014 	ori	r3,r3,128
  80b048:	90c0030d 	sth	r3,12(r18)
  80b04c:	9c07c83a 	sub	r3,r19,r16
  80b050:	8c05883a 	add	r2,r17,r16
  80b054:	a00d883a 	mov	r6,r20
  80b058:	a021883a 	mov	r16,r20
  80b05c:	90800015 	stw	r2,0(r18)
  80b060:	90c00215 	stw	r3,8(r18)
  80b064:	94400415 	stw	r17,16(r18)
  80b068:	94c00515 	stw	r19,20(r18)
  80b06c:	91000017 	ldw	r4,0(r18)
  80b070:	b80b883a 	mov	r5,r23
  80b074:	a023883a 	mov	r17,r20
  80b078:	080b6100 	call	80b610 <memmove>
  80b07c:	90c00217 	ldw	r3,8(r18)
  80b080:	90800017 	ldw	r2,0(r18)
  80b084:	a027883a 	mov	r19,r20
  80b088:	1c07c83a 	sub	r3,r3,r16
  80b08c:	1405883a 	add	r2,r2,r16
  80b090:	90c00215 	stw	r3,8(r18)
  80b094:	a021883a 	mov	r16,r20
  80b098:	90800015 	stw	r2,0(r18)
  80b09c:	b0800217 	ldw	r2,8(r22)
  80b0a0:	1405c83a 	sub	r2,r2,r16
  80b0a4:	b0800215 	stw	r2,8(r22)
  80b0a8:	103fa826 	beq	r2,zero,80af4c <__sfvwrite_r+0xb0>
  80b0ac:	a469c83a 	sub	r20,r20,r17
  80b0b0:	91c0030b 	ldhu	r7,12(r18)
  80b0b4:	bcef883a 	add	r23,r23,r19
  80b0b8:	a03fbe1e 	bne	r20,zero,80afb4 <__sfvwrite_r+0x118>
  80b0bc:	adc00017 	ldw	r23,0(r21)
  80b0c0:	ad000117 	ldw	r20,4(r21)
  80b0c4:	ad400204 	addi	r21,r21,8
  80b0c8:	003fb906 	br	80afb0 <__sfvwrite_r+0x114>
  80b0cc:	ac400017 	ldw	r17,0(r21)
  80b0d0:	ac000117 	ldw	r16,4(r21)
  80b0d4:	ad400204 	addi	r21,r21,8
  80b0d8:	003f8a06 	br	80af04 <__sfvwrite_r+0x68>
  80b0dc:	91400417 	ldw	r5,16(r18)
  80b0e0:	e009883a 	mov	r4,fp
  80b0e4:	0803ad80 	call	803ad8 <_free_r>
  80b0e8:	00800304 	movi	r2,12
  80b0ec:	e0800015 	stw	r2,0(fp)
  80b0f0:	9080030b 	ldhu	r2,12(r18)
  80b0f4:	013fffc4 	movi	r4,-1
  80b0f8:	10801014 	ori	r2,r2,64
  80b0fc:	9080030d 	sth	r2,12(r18)
  80b100:	003f9306 	br	80af50 <__sfvwrite_r+0xb4>
  80b104:	0027883a 	mov	r19,zero
  80b108:	002f883a 	mov	r23,zero
  80b10c:	d8000015 	stw	zero,0(sp)
  80b110:	0029883a 	mov	r20,zero
  80b114:	98001e26 	beq	r19,zero,80b190 <__sfvwrite_r+0x2f4>
  80b118:	d8c00017 	ldw	r3,0(sp)
  80b11c:	1804c03a 	cmpne	r2,r3,zero
  80b120:	10005e26 	beq	r2,zero,80b29c <__sfvwrite_r+0x400>
  80b124:	9821883a 	mov	r16,r19
  80b128:	a4c0012e 	bgeu	r20,r19,80b130 <__sfvwrite_r+0x294>
  80b12c:	a021883a 	mov	r16,r20
  80b130:	91000017 	ldw	r4,0(r18)
  80b134:	90800417 	ldw	r2,16(r18)
  80b138:	91800217 	ldw	r6,8(r18)
  80b13c:	91c00517 	ldw	r7,20(r18)
  80b140:	1100022e 	bgeu	r2,r4,80b14c <__sfvwrite_r+0x2b0>
  80b144:	31e3883a 	add	r17,r6,r7
  80b148:	8c001616 	blt	r17,r16,80b1a4 <__sfvwrite_r+0x308>
  80b14c:	81c03816 	blt	r16,r7,80b230 <__sfvwrite_r+0x394>
  80b150:	90c00917 	ldw	r3,36(r18)
  80b154:	91400717 	ldw	r5,28(r18)
  80b158:	e009883a 	mov	r4,fp
  80b15c:	b80d883a 	mov	r6,r23
  80b160:	183ee83a 	callr	r3
  80b164:	1023883a 	mov	r17,r2
  80b168:	00bfe10e 	bge	zero,r2,80b0f0 <__sfvwrite_r+0x254>
  80b16c:	a469c83a 	sub	r20,r20,r17
  80b170:	a0001826 	beq	r20,zero,80b1d4 <__sfvwrite_r+0x338>
  80b174:	b0800217 	ldw	r2,8(r22)
  80b178:	1445c83a 	sub	r2,r2,r17
  80b17c:	b0800215 	stw	r2,8(r22)
  80b180:	103f7226 	beq	r2,zero,80af4c <__sfvwrite_r+0xb0>
  80b184:	9c67c83a 	sub	r19,r19,r17
  80b188:	bc6f883a 	add	r23,r23,r17
  80b18c:	983fe21e 	bne	r19,zero,80b118 <__sfvwrite_r+0x27c>
  80b190:	adc00017 	ldw	r23,0(r21)
  80b194:	acc00117 	ldw	r19,4(r21)
  80b198:	ad400204 	addi	r21,r21,8
  80b19c:	d8000015 	stw	zero,0(sp)
  80b1a0:	003fdc06 	br	80b114 <__sfvwrite_r+0x278>
  80b1a4:	b80b883a 	mov	r5,r23
  80b1a8:	880d883a 	mov	r6,r17
  80b1ac:	080b6100 	call	80b610 <memmove>
  80b1b0:	90c00017 	ldw	r3,0(r18)
  80b1b4:	e009883a 	mov	r4,fp
  80b1b8:	900b883a 	mov	r5,r18
  80b1bc:	1c47883a 	add	r3,r3,r17
  80b1c0:	90c00015 	stw	r3,0(r18)
  80b1c4:	0802e380 	call	802e38 <_fflush_r>
  80b1c8:	103fc91e 	bne	r2,zero,80b0f0 <__sfvwrite_r+0x254>
  80b1cc:	a469c83a 	sub	r20,r20,r17
  80b1d0:	a03fe81e 	bne	r20,zero,80b174 <__sfvwrite_r+0x2d8>
  80b1d4:	e009883a 	mov	r4,fp
  80b1d8:	900b883a 	mov	r5,r18
  80b1dc:	0802e380 	call	802e38 <_fflush_r>
  80b1e0:	103fc31e 	bne	r2,zero,80b0f0 <__sfvwrite_r+0x254>
  80b1e4:	d8000015 	stw	zero,0(sp)
  80b1e8:	003fe206 	br	80b174 <__sfvwrite_r+0x2d8>
  80b1ec:	91000017 	ldw	r4,0(r18)
  80b1f0:	90800417 	ldw	r2,16(r18)
  80b1f4:	1100022e 	bgeu	r2,r4,80b200 <__sfvwrite_r+0x364>
  80b1f8:	8023883a 	mov	r17,r16
  80b1fc:	85003136 	bltu	r16,r20,80b2c4 <__sfvwrite_r+0x428>
  80b200:	91c00517 	ldw	r7,20(r18)
  80b204:	a1c01836 	bltu	r20,r7,80b268 <__sfvwrite_r+0x3cc>
  80b208:	90c00917 	ldw	r3,36(r18)
  80b20c:	91400717 	ldw	r5,28(r18)
  80b210:	e009883a 	mov	r4,fp
  80b214:	b80d883a 	mov	r6,r23
  80b218:	183ee83a 	callr	r3
  80b21c:	1021883a 	mov	r16,r2
  80b220:	00bfb30e 	bge	zero,r2,80b0f0 <__sfvwrite_r+0x254>
  80b224:	1023883a 	mov	r17,r2
  80b228:	1027883a 	mov	r19,r2
  80b22c:	003f9b06 	br	80b09c <__sfvwrite_r+0x200>
  80b230:	b80b883a 	mov	r5,r23
  80b234:	800d883a 	mov	r6,r16
  80b238:	080b6100 	call	80b610 <memmove>
  80b23c:	90c00217 	ldw	r3,8(r18)
  80b240:	90800017 	ldw	r2,0(r18)
  80b244:	8023883a 	mov	r17,r16
  80b248:	1c07c83a 	sub	r3,r3,r16
  80b24c:	1405883a 	add	r2,r2,r16
  80b250:	90c00215 	stw	r3,8(r18)
  80b254:	90800015 	stw	r2,0(r18)
  80b258:	003fc406 	br	80b16c <__sfvwrite_r+0x2d0>
  80b25c:	a00d883a 	mov	r6,r20
  80b260:	a021883a 	mov	r16,r20
  80b264:	003f8106 	br	80b06c <__sfvwrite_r+0x1d0>
  80b268:	b80b883a 	mov	r5,r23
  80b26c:	a00d883a 	mov	r6,r20
  80b270:	080b6100 	call	80b610 <memmove>
  80b274:	90c00217 	ldw	r3,8(r18)
  80b278:	90800017 	ldw	r2,0(r18)
  80b27c:	a021883a 	mov	r16,r20
  80b280:	1d07c83a 	sub	r3,r3,r20
  80b284:	1505883a 	add	r2,r2,r20
  80b288:	a023883a 	mov	r17,r20
  80b28c:	a027883a 	mov	r19,r20
  80b290:	90c00215 	stw	r3,8(r18)
  80b294:	90800015 	stw	r2,0(r18)
  80b298:	003f8006 	br	80b09c <__sfvwrite_r+0x200>
  80b29c:	b809883a 	mov	r4,r23
  80b2a0:	01400284 	movi	r5,10
  80b2a4:	980d883a 	mov	r6,r19
  80b2a8:	0804e940 	call	804e94 <memchr>
  80b2ac:	10001726 	beq	r2,zero,80b30c <__sfvwrite_r+0x470>
  80b2b0:	15c5c83a 	sub	r2,r2,r23
  80b2b4:	15000044 	addi	r20,r2,1
  80b2b8:	00800044 	movi	r2,1
  80b2bc:	d8800015 	stw	r2,0(sp)
  80b2c0:	003f9806 	br	80b124 <__sfvwrite_r+0x288>
  80b2c4:	b80b883a 	mov	r5,r23
  80b2c8:	800d883a 	mov	r6,r16
  80b2cc:	080b6100 	call	80b610 <memmove>
  80b2d0:	90c00017 	ldw	r3,0(r18)
  80b2d4:	e009883a 	mov	r4,fp
  80b2d8:	900b883a 	mov	r5,r18
  80b2dc:	1c07883a 	add	r3,r3,r16
  80b2e0:	90c00015 	stw	r3,0(r18)
  80b2e4:	8027883a 	mov	r19,r16
  80b2e8:	0802e380 	call	802e38 <_fflush_r>
  80b2ec:	103f6b26 	beq	r2,zero,80b09c <__sfvwrite_r+0x200>
  80b2f0:	003f7f06 	br	80b0f0 <__sfvwrite_r+0x254>
  80b2f4:	400b883a 	mov	r5,r8
  80b2f8:	e009883a 	mov	r4,fp
  80b2fc:	080c7f40 	call	80c7f4 <_realloc_r>
  80b300:	103f7626 	beq	r2,zero,80b0dc <__sfvwrite_r+0x240>
  80b304:	1023883a 	mov	r17,r2
  80b308:	003f5006 	br	80b04c <__sfvwrite_r+0x1b0>
  80b30c:	00c00044 	movi	r3,1
  80b310:	9d000044 	addi	r20,r19,1
  80b314:	d8c00015 	stw	r3,0(sp)
  80b318:	003f8206 	br	80b124 <__sfvwrite_r+0x288>
  80b31c:	9080030b 	ldhu	r2,12(r18)
  80b320:	00c00244 	movi	r3,9
  80b324:	013fffc4 	movi	r4,-1
  80b328:	10801014 	ori	r2,r2,64
  80b32c:	9080030d 	sth	r2,12(r18)
  80b330:	e0c00015 	stw	r3,0(fp)
  80b334:	003f0606 	br	80af50 <__sfvwrite_r+0xb4>

0080b338 <_isatty_r>:
  80b338:	defffd04 	addi	sp,sp,-12
  80b33c:	dc000015 	stw	r16,0(sp)
  80b340:	040020b4 	movhi	r16,130
  80b344:	8422b604 	addi	r16,r16,-29992
  80b348:	dc400115 	stw	r17,4(sp)
  80b34c:	80000015 	stw	zero,0(r16)
  80b350:	2023883a 	mov	r17,r4
  80b354:	2809883a 	mov	r4,r5
  80b358:	dfc00215 	stw	ra,8(sp)
  80b35c:	08120180 	call	812018 <isatty>
  80b360:	1007883a 	mov	r3,r2
  80b364:	00bfffc4 	movi	r2,-1
  80b368:	18800626 	beq	r3,r2,80b384 <_isatty_r+0x4c>
  80b36c:	1805883a 	mov	r2,r3
  80b370:	dfc00217 	ldw	ra,8(sp)
  80b374:	dc400117 	ldw	r17,4(sp)
  80b378:	dc000017 	ldw	r16,0(sp)
  80b37c:	dec00304 	addi	sp,sp,12
  80b380:	f800283a 	ret
  80b384:	80800017 	ldw	r2,0(r16)
  80b388:	103ff826 	beq	r2,zero,80b36c <_isatty_r+0x34>
  80b38c:	88800015 	stw	r2,0(r17)
  80b390:	1805883a 	mov	r2,r3
  80b394:	dfc00217 	ldw	ra,8(sp)
  80b398:	dc400117 	ldw	r17,4(sp)
  80b39c:	dc000017 	ldw	r16,0(sp)
  80b3a0:	dec00304 	addi	sp,sp,12
  80b3a4:	f800283a 	ret

0080b3a8 <iswspace>:
  80b3a8:	00803fc4 	movi	r2,255
  80b3ac:	0007883a 	mov	r3,zero
  80b3b0:	11000636 	bltu	r2,r4,80b3cc <iswspace+0x24>
  80b3b4:	00802074 	movhi	r2,129
  80b3b8:	109bcc04 	addi	r2,r2,28464
  80b3bc:	10c00017 	ldw	r3,0(r2)
  80b3c0:	1907883a 	add	r3,r3,r4
  80b3c4:	18800003 	ldbu	r2,0(r3)
  80b3c8:	10c0020c 	andi	r3,r2,8
  80b3cc:	1805883a 	mov	r2,r3
  80b3d0:	f800283a 	ret

0080b3d4 <__locale_charset>:
  80b3d4:	d0a00617 	ldw	r2,-32744(gp)
  80b3d8:	f800283a 	ret

0080b3dc <_localeconv_r>:
  80b3dc:	00802074 	movhi	r2,129
  80b3e0:	1094b004 	addi	r2,r2,21184
  80b3e4:	f800283a 	ret

0080b3e8 <localeconv>:
  80b3e8:	00802074 	movhi	r2,129
  80b3ec:	109bcd04 	addi	r2,r2,28468
  80b3f0:	11000017 	ldw	r4,0(r2)
  80b3f4:	080b3dc1 	jmpi	80b3dc <_localeconv_r>

0080b3f8 <_setlocale_r>:
  80b3f8:	defffc04 	addi	sp,sp,-16
  80b3fc:	00c02074 	movhi	r3,129
  80b400:	18d47c04 	addi	r3,r3,20976
  80b404:	dc800215 	stw	r18,8(sp)
  80b408:	dc400115 	stw	r17,4(sp)
  80b40c:	dc000015 	stw	r16,0(sp)
  80b410:	2023883a 	mov	r17,r4
  80b414:	2825883a 	mov	r18,r5
  80b418:	dfc00315 	stw	ra,12(sp)
  80b41c:	3021883a 	mov	r16,r6
  80b420:	3009883a 	mov	r4,r6
  80b424:	180b883a 	mov	r5,r3
  80b428:	30000926 	beq	r6,zero,80b450 <_setlocale_r+0x58>
  80b42c:	080cff40 	call	80cff4 <strcmp>
  80b430:	8009883a 	mov	r4,r16
  80b434:	01402074 	movhi	r5,129
  80b438:	29548d04 	addi	r5,r5,21044
  80b43c:	10000b1e 	bne	r2,zero,80b46c <_setlocale_r+0x74>
  80b440:	8c000d15 	stw	r16,52(r17)
  80b444:	8c800c15 	stw	r18,48(r17)
  80b448:	00c02074 	movhi	r3,129
  80b44c:	18d47c04 	addi	r3,r3,20976
  80b450:	1805883a 	mov	r2,r3
  80b454:	dfc00317 	ldw	ra,12(sp)
  80b458:	dc800217 	ldw	r18,8(sp)
  80b45c:	dc400117 	ldw	r17,4(sp)
  80b460:	dc000017 	ldw	r16,0(sp)
  80b464:	dec00404 	addi	sp,sp,16
  80b468:	f800283a 	ret
  80b46c:	080cff40 	call	80cff4 <strcmp>
  80b470:	0007883a 	mov	r3,zero
  80b474:	103ff226 	beq	r2,zero,80b440 <_setlocale_r+0x48>
  80b478:	003ff506 	br	80b450 <_setlocale_r+0x58>

0080b47c <setlocale>:
  80b47c:	01802074 	movhi	r6,129
  80b480:	319bcd04 	addi	r6,r6,28468
  80b484:	2007883a 	mov	r3,r4
  80b488:	31000017 	ldw	r4,0(r6)
  80b48c:	280d883a 	mov	r6,r5
  80b490:	180b883a 	mov	r5,r3
  80b494:	080b3f81 	jmpi	80b3f8 <_setlocale_r>

0080b498 <_lseek_r>:
  80b498:	defffd04 	addi	sp,sp,-12
  80b49c:	dc000015 	stw	r16,0(sp)
  80b4a0:	040020b4 	movhi	r16,130
  80b4a4:	8422b604 	addi	r16,r16,-29992
  80b4a8:	dc400115 	stw	r17,4(sp)
  80b4ac:	80000015 	stw	zero,0(r16)
  80b4b0:	2023883a 	mov	r17,r4
  80b4b4:	2809883a 	mov	r4,r5
  80b4b8:	300b883a 	mov	r5,r6
  80b4bc:	380d883a 	mov	r6,r7
  80b4c0:	dfc00215 	stw	ra,8(sp)
  80b4c4:	08122280 	call	812228 <lseek>
  80b4c8:	1007883a 	mov	r3,r2
  80b4cc:	00bfffc4 	movi	r2,-1
  80b4d0:	18800626 	beq	r3,r2,80b4ec <_lseek_r+0x54>
  80b4d4:	1805883a 	mov	r2,r3
  80b4d8:	dfc00217 	ldw	ra,8(sp)
  80b4dc:	dc400117 	ldw	r17,4(sp)
  80b4e0:	dc000017 	ldw	r16,0(sp)
  80b4e4:	dec00304 	addi	sp,sp,12
  80b4e8:	f800283a 	ret
  80b4ec:	80800017 	ldw	r2,0(r16)
  80b4f0:	103ff826 	beq	r2,zero,80b4d4 <_lseek_r+0x3c>
  80b4f4:	88800015 	stw	r2,0(r17)
  80b4f8:	1805883a 	mov	r2,r3
  80b4fc:	dfc00217 	ldw	ra,8(sp)
  80b500:	dc400117 	ldw	r17,4(sp)
  80b504:	dc000017 	ldw	r16,0(sp)
  80b508:	dec00304 	addi	sp,sp,12
  80b50c:	f800283a 	ret

0080b510 <_mbrtowc_r>:
  80b510:	defffc04 	addi	sp,sp,-16
  80b514:	dc400215 	stw	r17,8(sp)
  80b518:	dc000115 	stw	r16,4(sp)
  80b51c:	dfc00315 	stw	ra,12(sp)
  80b520:	dc000417 	ldw	r16,16(sp)
  80b524:	2023883a 	mov	r17,r4
  80b528:	30000f26 	beq	r6,zero,80b568 <_mbrtowc_r+0x58>
  80b52c:	dc000015 	stw	r16,0(sp)
  80b530:	080b5d00 	call	80b5d0 <_mbtowc_r>
  80b534:	1007883a 	mov	r3,r2
  80b538:	00bfffc4 	movi	r2,-1
  80b53c:	1809883a 	mov	r4,r3
  80b540:	1880111e 	bne	r3,r2,80b588 <_mbrtowc_r+0x78>
  80b544:	80000015 	stw	zero,0(r16)
  80b548:	00802284 	movi	r2,138
  80b54c:	88800015 	stw	r2,0(r17)
  80b550:	2005883a 	mov	r2,r4
  80b554:	dfc00317 	ldw	ra,12(sp)
  80b558:	dc400217 	ldw	r17,8(sp)
  80b55c:	dc000117 	ldw	r16,4(sp)
  80b560:	dec00404 	addi	sp,sp,16
  80b564:	f800283a 	ret
  80b568:	000b883a 	mov	r5,zero
  80b56c:	01802074 	movhi	r6,129
  80b570:	31948d04 	addi	r6,r6,21044
  80b574:	01c00044 	movi	r7,1
  80b578:	dc000015 	stw	r16,0(sp)
  80b57c:	080b5d00 	call	80b5d0 <_mbtowc_r>
  80b580:	1007883a 	mov	r3,r2
  80b584:	003fec06 	br	80b538 <_mbrtowc_r+0x28>
  80b588:	1809883a 	mov	r4,r3
  80b58c:	003ff006 	br	80b550 <_mbrtowc_r+0x40>

0080b590 <mbrtowc>:
  80b590:	00802074 	movhi	r2,129
  80b594:	109bcd04 	addi	r2,r2,28468
  80b598:	2017883a 	mov	r11,r4
  80b59c:	11000017 	ldw	r4,0(r2)
  80b5a0:	defffe04 	addi	sp,sp,-8
  80b5a4:	3013883a 	mov	r9,r6
  80b5a8:	2805883a 	mov	r2,r5
  80b5ac:	d9c00015 	stw	r7,0(sp)
  80b5b0:	580b883a 	mov	r5,r11
  80b5b4:	100d883a 	mov	r6,r2
  80b5b8:	480f883a 	mov	r7,r9
  80b5bc:	dfc00115 	stw	ra,4(sp)
  80b5c0:	080b5100 	call	80b510 <_mbrtowc_r>
  80b5c4:	dfc00117 	ldw	ra,4(sp)
  80b5c8:	dec00204 	addi	sp,sp,8
  80b5cc:	f800283a 	ret

0080b5d0 <_mbtowc_r>:
  80b5d0:	deffff04 	addi	sp,sp,-4
  80b5d4:	0005883a 	mov	r2,zero
  80b5d8:	28000326 	beq	r5,zero,80b5e8 <_mbtowc_r+0x18>
  80b5dc:	3000041e 	bne	r6,zero,80b5f0 <_mbtowc_r+0x20>
  80b5e0:	dec00104 	addi	sp,sp,4
  80b5e4:	f800283a 	ret
  80b5e8:	d80b883a 	mov	r5,sp
  80b5ec:	303ffc26 	beq	r6,zero,80b5e0 <_mbtowc_r+0x10>
  80b5f0:	00bfff84 	movi	r2,-2
  80b5f4:	383ffa26 	beq	r7,zero,80b5e0 <_mbtowc_r+0x10>
  80b5f8:	30800003 	ldbu	r2,0(r6)
  80b5fc:	28800015 	stw	r2,0(r5)
  80b600:	30c00003 	ldbu	r3,0(r6)
  80b604:	1804c03a 	cmpne	r2,r3,zero
  80b608:	dec00104 	addi	sp,sp,4
  80b60c:	f800283a 	ret

0080b610 <memmove>:
  80b610:	2807883a 	mov	r3,r5
  80b614:	2011883a 	mov	r8,r4
  80b618:	29000c2e 	bgeu	r5,r4,80b64c <memmove+0x3c>
  80b61c:	298f883a 	add	r7,r5,r6
  80b620:	21c00a2e 	bgeu	r4,r7,80b64c <memmove+0x3c>
  80b624:	30000726 	beq	r6,zero,80b644 <memmove+0x34>
  80b628:	2187883a 	add	r3,r4,r6
  80b62c:	198dc83a 	sub	r6,r3,r6
  80b630:	39ffffc4 	addi	r7,r7,-1
  80b634:	38800003 	ldbu	r2,0(r7)
  80b638:	18ffffc4 	addi	r3,r3,-1
  80b63c:	18800005 	stb	r2,0(r3)
  80b640:	19bffb1e 	bne	r3,r6,80b630 <memmove+0x20>
  80b644:	2005883a 	mov	r2,r4
  80b648:	f800283a 	ret
  80b64c:	01c003c4 	movi	r7,15
  80b650:	39800a36 	bltu	r7,r6,80b67c <memmove+0x6c>
  80b654:	303ffb26 	beq	r6,zero,80b644 <memmove+0x34>
  80b658:	400f883a 	mov	r7,r8
  80b65c:	320d883a 	add	r6,r6,r8
  80b660:	28800003 	ldbu	r2,0(r5)
  80b664:	29400044 	addi	r5,r5,1
  80b668:	38800005 	stb	r2,0(r7)
  80b66c:	39c00044 	addi	r7,r7,1
  80b670:	39bffb1e 	bne	r7,r6,80b660 <memmove+0x50>
  80b674:	2005883a 	mov	r2,r4
  80b678:	f800283a 	ret
  80b67c:	1904b03a 	or	r2,r3,r4
  80b680:	108000cc 	andi	r2,r2,3
  80b684:	103ff31e 	bne	r2,zero,80b654 <memmove+0x44>
  80b688:	3811883a 	mov	r8,r7
  80b68c:	180b883a 	mov	r5,r3
  80b690:	200f883a 	mov	r7,r4
  80b694:	28c00017 	ldw	r3,0(r5)
  80b698:	31bffc04 	addi	r6,r6,-16
  80b69c:	38c00015 	stw	r3,0(r7)
  80b6a0:	28800117 	ldw	r2,4(r5)
  80b6a4:	38800115 	stw	r2,4(r7)
  80b6a8:	28c00217 	ldw	r3,8(r5)
  80b6ac:	38c00215 	stw	r3,8(r7)
  80b6b0:	28800317 	ldw	r2,12(r5)
  80b6b4:	29400404 	addi	r5,r5,16
  80b6b8:	38800315 	stw	r2,12(r7)
  80b6bc:	39c00404 	addi	r7,r7,16
  80b6c0:	41bff436 	bltu	r8,r6,80b694 <memmove+0x84>
  80b6c4:	008000c4 	movi	r2,3
  80b6c8:	1180072e 	bgeu	r2,r6,80b6e8 <memmove+0xd8>
  80b6cc:	1007883a 	mov	r3,r2
  80b6d0:	28800017 	ldw	r2,0(r5)
  80b6d4:	31bfff04 	addi	r6,r6,-4
  80b6d8:	29400104 	addi	r5,r5,4
  80b6dc:	38800015 	stw	r2,0(r7)
  80b6e0:	39c00104 	addi	r7,r7,4
  80b6e4:	19bffa36 	bltu	r3,r6,80b6d0 <memmove+0xc0>
  80b6e8:	3811883a 	mov	r8,r7
  80b6ec:	003fd906 	br	80b654 <memmove+0x44>

0080b6f0 <_Bfree>:
  80b6f0:	28000826 	beq	r5,zero,80b714 <_Bfree+0x24>
  80b6f4:	28800117 	ldw	r2,4(r5)
  80b6f8:	21001317 	ldw	r4,76(r4)
  80b6fc:	1085883a 	add	r2,r2,r2
  80b700:	1085883a 	add	r2,r2,r2
  80b704:	1105883a 	add	r2,r2,r4
  80b708:	10c00017 	ldw	r3,0(r2)
  80b70c:	28c00015 	stw	r3,0(r5)
  80b710:	11400015 	stw	r5,0(r2)
  80b714:	f800283a 	ret

0080b718 <__hi0bits>:
  80b718:	20bfffec 	andhi	r2,r4,65535
  80b71c:	10001426 	beq	r2,zero,80b770 <__hi0bits+0x58>
  80b720:	0007883a 	mov	r3,zero
  80b724:	20bfc02c 	andhi	r2,r4,65280
  80b728:	1000021e 	bne	r2,zero,80b734 <__hi0bits+0x1c>
  80b72c:	2008923a 	slli	r4,r4,8
  80b730:	18c00204 	addi	r3,r3,8
  80b734:	20bc002c 	andhi	r2,r4,61440
  80b738:	1000021e 	bne	r2,zero,80b744 <__hi0bits+0x2c>
  80b73c:	2008913a 	slli	r4,r4,4
  80b740:	18c00104 	addi	r3,r3,4
  80b744:	20b0002c 	andhi	r2,r4,49152
  80b748:	1000031e 	bne	r2,zero,80b758 <__hi0bits+0x40>
  80b74c:	2105883a 	add	r2,r4,r4
  80b750:	18c00084 	addi	r3,r3,2
  80b754:	1089883a 	add	r4,r2,r2
  80b758:	20000316 	blt	r4,zero,80b768 <__hi0bits+0x50>
  80b75c:	2090002c 	andhi	r2,r4,16384
  80b760:	10000626 	beq	r2,zero,80b77c <__hi0bits+0x64>
  80b764:	18c00044 	addi	r3,r3,1
  80b768:	1805883a 	mov	r2,r3
  80b76c:	f800283a 	ret
  80b770:	2008943a 	slli	r4,r4,16
  80b774:	00c00404 	movi	r3,16
  80b778:	003fea06 	br	80b724 <__hi0bits+0xc>
  80b77c:	00c00804 	movi	r3,32
  80b780:	1805883a 	mov	r2,r3
  80b784:	f800283a 	ret

0080b788 <__lo0bits>:
  80b788:	20c00017 	ldw	r3,0(r4)
  80b78c:	188001cc 	andi	r2,r3,7
  80b790:	10000a26 	beq	r2,zero,80b7bc <__lo0bits+0x34>
  80b794:	1880004c 	andi	r2,r3,1
  80b798:	1005003a 	cmpeq	r2,r2,zero
  80b79c:	10002126 	beq	r2,zero,80b824 <__lo0bits+0x9c>
  80b7a0:	1880008c 	andi	r2,r3,2
  80b7a4:	1000251e 	bne	r2,zero,80b83c <__lo0bits+0xb4>
  80b7a8:	1804d0ba 	srli	r2,r3,2
  80b7ac:	01400084 	movi	r5,2
  80b7b0:	20800015 	stw	r2,0(r4)
  80b7b4:	2805883a 	mov	r2,r5
  80b7b8:	f800283a 	ret
  80b7bc:	18bfffcc 	andi	r2,r3,65535
  80b7c0:	10001526 	beq	r2,zero,80b818 <__lo0bits+0x90>
  80b7c4:	000b883a 	mov	r5,zero
  80b7c8:	18803fcc 	andi	r2,r3,255
  80b7cc:	1000021e 	bne	r2,zero,80b7d8 <__lo0bits+0x50>
  80b7d0:	1806d23a 	srli	r3,r3,8
  80b7d4:	29400204 	addi	r5,r5,8
  80b7d8:	188003cc 	andi	r2,r3,15
  80b7dc:	1000021e 	bne	r2,zero,80b7e8 <__lo0bits+0x60>
  80b7e0:	1806d13a 	srli	r3,r3,4
  80b7e4:	29400104 	addi	r5,r5,4
  80b7e8:	188000cc 	andi	r2,r3,3
  80b7ec:	1000021e 	bne	r2,zero,80b7f8 <__lo0bits+0x70>
  80b7f0:	1806d0ba 	srli	r3,r3,2
  80b7f4:	29400084 	addi	r5,r5,2
  80b7f8:	1880004c 	andi	r2,r3,1
  80b7fc:	1000031e 	bne	r2,zero,80b80c <__lo0bits+0x84>
  80b800:	1806d07a 	srli	r3,r3,1
  80b804:	18000a26 	beq	r3,zero,80b830 <__lo0bits+0xa8>
  80b808:	29400044 	addi	r5,r5,1
  80b80c:	2805883a 	mov	r2,r5
  80b810:	20c00015 	stw	r3,0(r4)
  80b814:	f800283a 	ret
  80b818:	1806d43a 	srli	r3,r3,16
  80b81c:	01400404 	movi	r5,16
  80b820:	003fe906 	br	80b7c8 <__lo0bits+0x40>
  80b824:	000b883a 	mov	r5,zero
  80b828:	2805883a 	mov	r2,r5
  80b82c:	f800283a 	ret
  80b830:	01400804 	movi	r5,32
  80b834:	2805883a 	mov	r2,r5
  80b838:	f800283a 	ret
  80b83c:	1804d07a 	srli	r2,r3,1
  80b840:	01400044 	movi	r5,1
  80b844:	20800015 	stw	r2,0(r4)
  80b848:	003fda06 	br	80b7b4 <__lo0bits+0x2c>

0080b84c <__mcmp>:
  80b84c:	20800417 	ldw	r2,16(r4)
  80b850:	28c00417 	ldw	r3,16(r5)
  80b854:	10cfc83a 	sub	r7,r2,r3
  80b858:	38000c1e 	bne	r7,zero,80b88c <__mcmp+0x40>
  80b85c:	18c5883a 	add	r2,r3,r3
  80b860:	1085883a 	add	r2,r2,r2
  80b864:	10c00504 	addi	r3,r2,20
  80b868:	21000504 	addi	r4,r4,20
  80b86c:	28cb883a 	add	r5,r5,r3
  80b870:	2085883a 	add	r2,r4,r2
  80b874:	10bfff04 	addi	r2,r2,-4
  80b878:	297fff04 	addi	r5,r5,-4
  80b87c:	11800017 	ldw	r6,0(r2)
  80b880:	28c00017 	ldw	r3,0(r5)
  80b884:	30c0031e 	bne	r6,r3,80b894 <__mcmp+0x48>
  80b888:	20bffa36 	bltu	r4,r2,80b874 <__mcmp+0x28>
  80b88c:	3805883a 	mov	r2,r7
  80b890:	f800283a 	ret
  80b894:	30c00336 	bltu	r6,r3,80b8a4 <__mcmp+0x58>
  80b898:	01c00044 	movi	r7,1
  80b89c:	3805883a 	mov	r2,r7
  80b8a0:	f800283a 	ret
  80b8a4:	01ffffc4 	movi	r7,-1
  80b8a8:	003ff806 	br	80b88c <__mcmp+0x40>

0080b8ac <__ulp>:
  80b8ac:	295ffc2c 	andhi	r5,r5,32752
  80b8b0:	013f3034 	movhi	r4,64704
  80b8b4:	290b883a 	add	r5,r5,r4
  80b8b8:	0145c83a 	sub	r2,zero,r5
  80b8bc:	1007d53a 	srai	r3,r2,20
  80b8c0:	000d883a 	mov	r6,zero
  80b8c4:	0140040e 	bge	zero,r5,80b8d8 <__ulp+0x2c>
  80b8c8:	280f883a 	mov	r7,r5
  80b8cc:	3807883a 	mov	r3,r7
  80b8d0:	3005883a 	mov	r2,r6
  80b8d4:	f800283a 	ret
  80b8d8:	008004c4 	movi	r2,19
  80b8dc:	193ffb04 	addi	r4,r3,-20
  80b8e0:	10c00c0e 	bge	r2,r3,80b914 <__ulp+0x68>
  80b8e4:	008007c4 	movi	r2,31
  80b8e8:	1107c83a 	sub	r3,r2,r4
  80b8ec:	00800784 	movi	r2,30
  80b8f0:	01400044 	movi	r5,1
  80b8f4:	11000216 	blt	r2,r4,80b900 <__ulp+0x54>
  80b8f8:	00800044 	movi	r2,1
  80b8fc:	10ca983a 	sll	r5,r2,r3
  80b900:	000f883a 	mov	r7,zero
  80b904:	280d883a 	mov	r6,r5
  80b908:	3807883a 	mov	r3,r7
  80b90c:	3005883a 	mov	r2,r6
  80b910:	f800283a 	ret
  80b914:	00800234 	movhi	r2,8
  80b918:	10cfd83a 	sra	r7,r2,r3
  80b91c:	000d883a 	mov	r6,zero
  80b920:	3005883a 	mov	r2,r6
  80b924:	3807883a 	mov	r3,r7
  80b928:	f800283a 	ret

0080b92c <__b2d>:
  80b92c:	20800417 	ldw	r2,16(r4)
  80b930:	defff904 	addi	sp,sp,-28
  80b934:	dd000415 	stw	r20,16(sp)
  80b938:	1085883a 	add	r2,r2,r2
  80b93c:	25000504 	addi	r20,r4,20
  80b940:	1085883a 	add	r2,r2,r2
  80b944:	dc000015 	stw	r16,0(sp)
  80b948:	a0a1883a 	add	r16,r20,r2
  80b94c:	dd400515 	stw	r21,20(sp)
  80b950:	857fff17 	ldw	r21,-4(r16)
  80b954:	dc400115 	stw	r17,4(sp)
  80b958:	dfc00615 	stw	ra,24(sp)
  80b95c:	a809883a 	mov	r4,r21
  80b960:	2823883a 	mov	r17,r5
  80b964:	dcc00315 	stw	r19,12(sp)
  80b968:	dc800215 	stw	r18,8(sp)
  80b96c:	080b7180 	call	80b718 <__hi0bits>
  80b970:	100b883a 	mov	r5,r2
  80b974:	00800804 	movi	r2,32
  80b978:	1145c83a 	sub	r2,r2,r5
  80b97c:	88800015 	stw	r2,0(r17)
  80b980:	00800284 	movi	r2,10
  80b984:	80ffff04 	addi	r3,r16,-4
  80b988:	11401416 	blt	r2,r5,80b9dc <__b2d+0xb0>
  80b98c:	008002c4 	movi	r2,11
  80b990:	1149c83a 	sub	r4,r2,r5
  80b994:	a0c02736 	bltu	r20,r3,80ba34 <__b2d+0x108>
  80b998:	000d883a 	mov	r6,zero
  80b99c:	28800544 	addi	r2,r5,21
  80b9a0:	a906d83a 	srl	r3,r21,r4
  80b9a4:	a884983a 	sll	r2,r21,r2
  80b9a8:	1ccffc34 	orhi	r19,r3,16368
  80b9ac:	11a4b03a 	or	r18,r2,r6
  80b9b0:	9005883a 	mov	r2,r18
  80b9b4:	9807883a 	mov	r3,r19
  80b9b8:	dfc00617 	ldw	ra,24(sp)
  80b9bc:	dd400517 	ldw	r21,20(sp)
  80b9c0:	dd000417 	ldw	r20,16(sp)
  80b9c4:	dcc00317 	ldw	r19,12(sp)
  80b9c8:	dc800217 	ldw	r18,8(sp)
  80b9cc:	dc400117 	ldw	r17,4(sp)
  80b9d0:	dc000017 	ldw	r16,0(sp)
  80b9d4:	dec00704 	addi	sp,sp,28
  80b9d8:	f800283a 	ret
  80b9dc:	a0c00e36 	bltu	r20,r3,80ba18 <__b2d+0xec>
  80b9e0:	293ffd44 	addi	r4,r5,-11
  80b9e4:	000d883a 	mov	r6,zero
  80b9e8:	20000f26 	beq	r4,zero,80ba28 <__b2d+0xfc>
  80b9ec:	00800804 	movi	r2,32
  80b9f0:	110bc83a 	sub	r5,r2,r4
  80b9f4:	a0c01236 	bltu	r20,r3,80ba40 <__b2d+0x114>
  80b9f8:	000f883a 	mov	r7,zero
  80b9fc:	a904983a 	sll	r2,r21,r4
  80ba00:	3146d83a 	srl	r3,r6,r5
  80ba04:	3108983a 	sll	r4,r6,r4
  80ba08:	108ffc34 	orhi	r2,r2,16368
  80ba0c:	18a6b03a 	or	r19,r3,r2
  80ba10:	3924b03a 	or	r18,r7,r4
  80ba14:	003fe606 	br	80b9b0 <__b2d+0x84>
  80ba18:	293ffd44 	addi	r4,r5,-11
  80ba1c:	81bffe17 	ldw	r6,-8(r16)
  80ba20:	80fffe04 	addi	r3,r16,-8
  80ba24:	203ff11e 	bne	r4,zero,80b9ec <__b2d+0xc0>
  80ba28:	accffc34 	orhi	r19,r21,16368
  80ba2c:	3025883a 	mov	r18,r6
  80ba30:	003fdf06 	br	80b9b0 <__b2d+0x84>
  80ba34:	18bfff17 	ldw	r2,-4(r3)
  80ba38:	110cd83a 	srl	r6,r2,r4
  80ba3c:	003fd706 	br	80b99c <__b2d+0x70>
  80ba40:	18bfff17 	ldw	r2,-4(r3)
  80ba44:	114ed83a 	srl	r7,r2,r5
  80ba48:	003fec06 	br	80b9fc <__b2d+0xd0>

0080ba4c <__ratio>:
  80ba4c:	defff904 	addi	sp,sp,-28
  80ba50:	dc400215 	stw	r17,8(sp)
  80ba54:	2823883a 	mov	r17,r5
  80ba58:	d80b883a 	mov	r5,sp
  80ba5c:	dfc00615 	stw	ra,24(sp)
  80ba60:	dd000515 	stw	r20,20(sp)
  80ba64:	dcc00415 	stw	r19,16(sp)
  80ba68:	dc800315 	stw	r18,12(sp)
  80ba6c:	2025883a 	mov	r18,r4
  80ba70:	080b92c0 	call	80b92c <__b2d>
  80ba74:	8809883a 	mov	r4,r17
  80ba78:	d9400104 	addi	r5,sp,4
  80ba7c:	1027883a 	mov	r19,r2
  80ba80:	1829883a 	mov	r20,r3
  80ba84:	080b92c0 	call	80b92c <__b2d>
  80ba88:	89000417 	ldw	r4,16(r17)
  80ba8c:	91c00417 	ldw	r7,16(r18)
  80ba90:	d9800117 	ldw	r6,4(sp)
  80ba94:	180b883a 	mov	r5,r3
  80ba98:	390fc83a 	sub	r7,r7,r4
  80ba9c:	1009883a 	mov	r4,r2
  80baa0:	d8800017 	ldw	r2,0(sp)
  80baa4:	380e917a 	slli	r7,r7,5
  80baa8:	2011883a 	mov	r8,r4
  80baac:	1185c83a 	sub	r2,r2,r6
  80bab0:	11c5883a 	add	r2,r2,r7
  80bab4:	1006953a 	slli	r3,r2,20
  80bab8:	2813883a 	mov	r9,r5
  80babc:	00800d0e 	bge	zero,r2,80baf4 <__ratio+0xa8>
  80bac0:	1d29883a 	add	r20,r3,r20
  80bac4:	a00b883a 	mov	r5,r20
  80bac8:	480f883a 	mov	r7,r9
  80bacc:	9809883a 	mov	r4,r19
  80bad0:	400d883a 	mov	r6,r8
  80bad4:	08022b40 	call	8022b4 <__divdf3>
  80bad8:	dfc00617 	ldw	ra,24(sp)
  80badc:	dd000517 	ldw	r20,20(sp)
  80bae0:	dcc00417 	ldw	r19,16(sp)
  80bae4:	dc800317 	ldw	r18,12(sp)
  80bae8:	dc400217 	ldw	r17,8(sp)
  80baec:	dec00704 	addi	sp,sp,28
  80baf0:	f800283a 	ret
  80baf4:	28d3c83a 	sub	r9,r5,r3
  80baf8:	003ff206 	br	80bac4 <__ratio+0x78>

0080bafc <_mprec_log10>:
  80bafc:	defffe04 	addi	sp,sp,-8
  80bb00:	008005c4 	movi	r2,23
  80bb04:	dc000015 	stw	r16,0(sp)
  80bb08:	dfc00115 	stw	ra,4(sp)
  80bb0c:	2021883a 	mov	r16,r4
  80bb10:	11000c16 	blt	r2,r4,80bb44 <_mprec_log10+0x48>
  80bb14:	200490fa 	slli	r2,r4,3
  80bb18:	00c02074 	movhi	r3,129
  80bb1c:	18d4bc04 	addi	r3,r3,21232
  80bb20:	10c5883a 	add	r2,r2,r3
  80bb24:	12400117 	ldw	r9,4(r2)
  80bb28:	12000017 	ldw	r8,0(r2)
  80bb2c:	4807883a 	mov	r3,r9
  80bb30:	4005883a 	mov	r2,r8
  80bb34:	dfc00117 	ldw	ra,4(sp)
  80bb38:	dc000017 	ldw	r16,0(sp)
  80bb3c:	dec00204 	addi	sp,sp,8
  80bb40:	f800283a 	ret
  80bb44:	0011883a 	mov	r8,zero
  80bb48:	024ffc34 	movhi	r9,16368
  80bb4c:	0005883a 	mov	r2,zero
  80bb50:	00d00934 	movhi	r3,16420
  80bb54:	480b883a 	mov	r5,r9
  80bb58:	4009883a 	mov	r4,r8
  80bb5c:	180f883a 	mov	r7,r3
  80bb60:	100d883a 	mov	r6,r2
  80bb64:	0810eac0 	call	810eac <__muldf3>
  80bb68:	843fffc4 	addi	r16,r16,-1
  80bb6c:	1011883a 	mov	r8,r2
  80bb70:	1813883a 	mov	r9,r3
  80bb74:	803ff51e 	bne	r16,zero,80bb4c <_mprec_log10+0x50>
  80bb78:	4005883a 	mov	r2,r8
  80bb7c:	4807883a 	mov	r3,r9
  80bb80:	dfc00117 	ldw	ra,4(sp)
  80bb84:	dc000017 	ldw	r16,0(sp)
  80bb88:	dec00204 	addi	sp,sp,8
  80bb8c:	f800283a 	ret

0080bb90 <__copybits>:
  80bb90:	297fffc4 	addi	r5,r5,-1
  80bb94:	30800417 	ldw	r2,16(r6)
  80bb98:	280bd17a 	srai	r5,r5,5
  80bb9c:	31800504 	addi	r6,r6,20
  80bba0:	1085883a 	add	r2,r2,r2
  80bba4:	294b883a 	add	r5,r5,r5
  80bba8:	294b883a 	add	r5,r5,r5
  80bbac:	1085883a 	add	r2,r2,r2
  80bbb0:	290b883a 	add	r5,r5,r4
  80bbb4:	3087883a 	add	r3,r6,r2
  80bbb8:	29400104 	addi	r5,r5,4
  80bbbc:	30c0052e 	bgeu	r6,r3,80bbd4 <__copybits+0x44>
  80bbc0:	30800017 	ldw	r2,0(r6)
  80bbc4:	31800104 	addi	r6,r6,4
  80bbc8:	20800015 	stw	r2,0(r4)
  80bbcc:	21000104 	addi	r4,r4,4
  80bbd0:	30fffb36 	bltu	r6,r3,80bbc0 <__copybits+0x30>
  80bbd4:	2140032e 	bgeu	r4,r5,80bbe4 <__copybits+0x54>
  80bbd8:	20000015 	stw	zero,0(r4)
  80bbdc:	21000104 	addi	r4,r4,4
  80bbe0:	217ffd36 	bltu	r4,r5,80bbd8 <__copybits+0x48>
  80bbe4:	f800283a 	ret

0080bbe8 <__any_on>:
  80bbe8:	20800417 	ldw	r2,16(r4)
  80bbec:	2807d17a 	srai	r3,r5,5
  80bbf0:	21000504 	addi	r4,r4,20
  80bbf4:	10c00d0e 	bge	r2,r3,80bc2c <__any_on+0x44>
  80bbf8:	1085883a 	add	r2,r2,r2
  80bbfc:	1085883a 	add	r2,r2,r2
  80bc00:	208d883a 	add	r6,r4,r2
  80bc04:	2180182e 	bgeu	r4,r6,80bc68 <__any_on+0x80>
  80bc08:	30bfff17 	ldw	r2,-4(r6)
  80bc0c:	30ffff04 	addi	r3,r6,-4
  80bc10:	1000041e 	bne	r2,zero,80bc24 <__any_on+0x3c>
  80bc14:	20c0142e 	bgeu	r4,r3,80bc68 <__any_on+0x80>
  80bc18:	18ffff04 	addi	r3,r3,-4
  80bc1c:	18800017 	ldw	r2,0(r3)
  80bc20:	103ffc26 	beq	r2,zero,80bc14 <__any_on+0x2c>
  80bc24:	00800044 	movi	r2,1
  80bc28:	f800283a 	ret
  80bc2c:	18800a0e 	bge	r3,r2,80bc58 <__any_on+0x70>
  80bc30:	294007cc 	andi	r5,r5,31
  80bc34:	28000826 	beq	r5,zero,80bc58 <__any_on+0x70>
  80bc38:	18c5883a 	add	r2,r3,r3
  80bc3c:	1085883a 	add	r2,r2,r2
  80bc40:	208d883a 	add	r6,r4,r2
  80bc44:	30c00017 	ldw	r3,0(r6)
  80bc48:	1944d83a 	srl	r2,r3,r5
  80bc4c:	1144983a 	sll	r2,r2,r5
  80bc50:	18bff41e 	bne	r3,r2,80bc24 <__any_on+0x3c>
  80bc54:	003feb06 	br	80bc04 <__any_on+0x1c>
  80bc58:	18c5883a 	add	r2,r3,r3
  80bc5c:	1085883a 	add	r2,r2,r2
  80bc60:	208d883a 	add	r6,r4,r2
  80bc64:	003fe706 	br	80bc04 <__any_on+0x1c>
  80bc68:	0005883a 	mov	r2,zero
  80bc6c:	f800283a 	ret

0080bc70 <_Balloc>:
  80bc70:	20c01317 	ldw	r3,76(r4)
  80bc74:	defffb04 	addi	sp,sp,-20
  80bc78:	dcc00315 	stw	r19,12(sp)
  80bc7c:	dc800215 	stw	r18,8(sp)
  80bc80:	dfc00415 	stw	ra,16(sp)
  80bc84:	2825883a 	mov	r18,r5
  80bc88:	dc400115 	stw	r17,4(sp)
  80bc8c:	dc000015 	stw	r16,0(sp)
  80bc90:	2027883a 	mov	r19,r4
  80bc94:	01800404 	movi	r6,16
  80bc98:	01400104 	movi	r5,4
  80bc9c:	18001726 	beq	r3,zero,80bcfc <_Balloc+0x8c>
  80bca0:	01400044 	movi	r5,1
  80bca4:	9485883a 	add	r2,r18,r18
  80bca8:	2ca2983a 	sll	r17,r5,r18
  80bcac:	1085883a 	add	r2,r2,r2
  80bcb0:	10c7883a 	add	r3,r2,r3
  80bcb4:	1c000017 	ldw	r16,0(r3)
  80bcb8:	8c4d883a 	add	r6,r17,r17
  80bcbc:	318d883a 	add	r6,r6,r6
  80bcc0:	9809883a 	mov	r4,r19
  80bcc4:	31800504 	addi	r6,r6,20
  80bcc8:	80001226 	beq	r16,zero,80bd14 <_Balloc+0xa4>
  80bccc:	80800017 	ldw	r2,0(r16)
  80bcd0:	18800015 	stw	r2,0(r3)
  80bcd4:	80000415 	stw	zero,16(r16)
  80bcd8:	80000315 	stw	zero,12(r16)
  80bcdc:	8005883a 	mov	r2,r16
  80bce0:	dfc00417 	ldw	ra,16(sp)
  80bce4:	dcc00317 	ldw	r19,12(sp)
  80bce8:	dc800217 	ldw	r18,8(sp)
  80bcec:	dc400117 	ldw	r17,4(sp)
  80bcf0:	dc000017 	ldw	r16,0(sp)
  80bcf4:	dec00504 	addi	sp,sp,20
  80bcf8:	f800283a 	ret
  80bcfc:	0802bc00 	call	802bc0 <_calloc_r>
  80bd00:	1007883a 	mov	r3,r2
  80bd04:	0021883a 	mov	r16,zero
  80bd08:	98801315 	stw	r2,76(r19)
  80bd0c:	103fe41e 	bne	r2,zero,80bca0 <_Balloc+0x30>
  80bd10:	003ff206 	br	80bcdc <_Balloc+0x6c>
  80bd14:	0802bc00 	call	802bc0 <_calloc_r>
  80bd18:	103ff026 	beq	r2,zero,80bcdc <_Balloc+0x6c>
  80bd1c:	1021883a 	mov	r16,r2
  80bd20:	14800115 	stw	r18,4(r2)
  80bd24:	14400215 	stw	r17,8(r2)
  80bd28:	003fea06 	br	80bcd4 <_Balloc+0x64>

0080bd2c <__d2b>:
  80bd2c:	defff504 	addi	sp,sp,-44
  80bd30:	dcc00515 	stw	r19,20(sp)
  80bd34:	04c00044 	movi	r19,1
  80bd38:	dc000215 	stw	r16,8(sp)
  80bd3c:	2821883a 	mov	r16,r5
  80bd40:	980b883a 	mov	r5,r19
  80bd44:	ddc00915 	stw	r23,36(sp)
  80bd48:	dd800815 	stw	r22,32(sp)
  80bd4c:	dd400715 	stw	r21,28(sp)
  80bd50:	dd000615 	stw	r20,24(sp)
  80bd54:	dc800415 	stw	r18,16(sp)
  80bd58:	dc400315 	stw	r17,12(sp)
  80bd5c:	dfc00a15 	stw	ra,40(sp)
  80bd60:	3023883a 	mov	r17,r6
  80bd64:	382d883a 	mov	r22,r7
  80bd68:	ddc00b17 	ldw	r23,44(sp)
  80bd6c:	080bc700 	call	80bc70 <_Balloc>
  80bd70:	1025883a 	mov	r18,r2
  80bd74:	00a00034 	movhi	r2,32768
  80bd78:	10bfffc4 	addi	r2,r2,-1
  80bd7c:	8888703a 	and	r4,r17,r2
  80bd80:	202ad53a 	srli	r21,r4,20
  80bd84:	00800434 	movhi	r2,16
  80bd88:	10bfffc4 	addi	r2,r2,-1
  80bd8c:	8886703a 	and	r3,r17,r2
  80bd90:	a829003a 	cmpeq	r20,r21,zero
  80bd94:	800b883a 	mov	r5,r16
  80bd98:	d8c00115 	stw	r3,4(sp)
  80bd9c:	94000504 	addi	r16,r18,20
  80bda0:	a000021e 	bne	r20,zero,80bdac <__d2b+0x80>
  80bda4:	18c00434 	orhi	r3,r3,16
  80bda8:	d8c00115 	stw	r3,4(sp)
  80bdac:	28002726 	beq	r5,zero,80be4c <__d2b+0x120>
  80bdb0:	d809883a 	mov	r4,sp
  80bdb4:	d9400015 	stw	r5,0(sp)
  80bdb8:	080b7880 	call	80b788 <__lo0bits>
  80bdbc:	100d883a 	mov	r6,r2
  80bdc0:	10003526 	beq	r2,zero,80be98 <__d2b+0x16c>
  80bdc4:	d8c00117 	ldw	r3,4(sp)
  80bdc8:	00800804 	movi	r2,32
  80bdcc:	1185c83a 	sub	r2,r2,r6
  80bdd0:	d9000017 	ldw	r4,0(sp)
  80bdd4:	1886983a 	sll	r3,r3,r2
  80bdd8:	1906b03a 	or	r3,r3,r4
  80bddc:	90c00515 	stw	r3,20(r18)
  80bde0:	d8c00117 	ldw	r3,4(sp)
  80bde4:	1986d83a 	srl	r3,r3,r6
  80bde8:	d8c00115 	stw	r3,4(sp)
  80bdec:	180b003a 	cmpeq	r5,r3,zero
  80bdf0:	00800084 	movi	r2,2
  80bdf4:	114bc83a 	sub	r5,r2,r5
  80bdf8:	80c00115 	stw	r3,4(r16)
  80bdfc:	91400415 	stw	r5,16(r18)
  80be00:	a0001a1e 	bne	r20,zero,80be6c <__d2b+0x140>
  80be04:	3545883a 	add	r2,r6,r21
  80be08:	10bef344 	addi	r2,r2,-1075
  80be0c:	00c00d44 	movi	r3,53
  80be10:	b0800015 	stw	r2,0(r22)
  80be14:	1987c83a 	sub	r3,r3,r6
  80be18:	b8c00015 	stw	r3,0(r23)
  80be1c:	9005883a 	mov	r2,r18
  80be20:	dfc00a17 	ldw	ra,40(sp)
  80be24:	ddc00917 	ldw	r23,36(sp)
  80be28:	dd800817 	ldw	r22,32(sp)
  80be2c:	dd400717 	ldw	r21,28(sp)
  80be30:	dd000617 	ldw	r20,24(sp)
  80be34:	dcc00517 	ldw	r19,20(sp)
  80be38:	dc800417 	ldw	r18,16(sp)
  80be3c:	dc400317 	ldw	r17,12(sp)
  80be40:	dc000217 	ldw	r16,8(sp)
  80be44:	dec00b04 	addi	sp,sp,44
  80be48:	f800283a 	ret
  80be4c:	d9000104 	addi	r4,sp,4
  80be50:	080b7880 	call	80b788 <__lo0bits>
  80be54:	11800804 	addi	r6,r2,32
  80be58:	d8800117 	ldw	r2,4(sp)
  80be5c:	94c00415 	stw	r19,16(r18)
  80be60:	980b883a 	mov	r5,r19
  80be64:	90800515 	stw	r2,20(r18)
  80be68:	a03fe626 	beq	r20,zero,80be04 <__d2b+0xd8>
  80be6c:	2945883a 	add	r2,r5,r5
  80be70:	1085883a 	add	r2,r2,r2
  80be74:	1405883a 	add	r2,r2,r16
  80be78:	113fff17 	ldw	r4,-4(r2)
  80be7c:	30fef384 	addi	r3,r6,-1074
  80be80:	2820917a 	slli	r16,r5,5
  80be84:	b0c00015 	stw	r3,0(r22)
  80be88:	080b7180 	call	80b718 <__hi0bits>
  80be8c:	80a1c83a 	sub	r16,r16,r2
  80be90:	bc000015 	stw	r16,0(r23)
  80be94:	003fe106 	br	80be1c <__d2b+0xf0>
  80be98:	d8800017 	ldw	r2,0(sp)
  80be9c:	90800515 	stw	r2,20(r18)
  80bea0:	d8c00117 	ldw	r3,4(sp)
  80bea4:	003fd106 	br	80bdec <__d2b+0xc0>

0080bea8 <__mdiff>:
  80bea8:	defffb04 	addi	sp,sp,-20
  80beac:	dc000015 	stw	r16,0(sp)
  80beb0:	2821883a 	mov	r16,r5
  80beb4:	dc800215 	stw	r18,8(sp)
  80beb8:	300b883a 	mov	r5,r6
  80bebc:	2025883a 	mov	r18,r4
  80bec0:	8009883a 	mov	r4,r16
  80bec4:	dc400115 	stw	r17,4(sp)
  80bec8:	dfc00415 	stw	ra,16(sp)
  80becc:	dcc00315 	stw	r19,12(sp)
  80bed0:	3023883a 	mov	r17,r6
  80bed4:	080b84c0 	call	80b84c <__mcmp>
  80bed8:	10004226 	beq	r2,zero,80bfe4 <__mdiff+0x13c>
  80bedc:	10005016 	blt	r2,zero,80c020 <__mdiff+0x178>
  80bee0:	0027883a 	mov	r19,zero
  80bee4:	81400117 	ldw	r5,4(r16)
  80bee8:	9009883a 	mov	r4,r18
  80beec:	080bc700 	call	80bc70 <_Balloc>
  80bef0:	1019883a 	mov	r12,r2
  80bef4:	82800417 	ldw	r10,16(r16)
  80bef8:	88800417 	ldw	r2,16(r17)
  80befc:	81800504 	addi	r6,r16,20
  80bf00:	5287883a 	add	r3,r10,r10
  80bf04:	1085883a 	add	r2,r2,r2
  80bf08:	18c7883a 	add	r3,r3,r3
  80bf0c:	1085883a 	add	r2,r2,r2
  80bf10:	8a000504 	addi	r8,r17,20
  80bf14:	64c00315 	stw	r19,12(r12)
  80bf18:	30db883a 	add	r13,r6,r3
  80bf1c:	4097883a 	add	r11,r8,r2
  80bf20:	61c00504 	addi	r7,r12,20
  80bf24:	0013883a 	mov	r9,zero
  80bf28:	31000017 	ldw	r4,0(r6)
  80bf2c:	41400017 	ldw	r5,0(r8)
  80bf30:	42000104 	addi	r8,r8,4
  80bf34:	20bfffcc 	andi	r2,r4,65535
  80bf38:	28ffffcc 	andi	r3,r5,65535
  80bf3c:	10c5c83a 	sub	r2,r2,r3
  80bf40:	1245883a 	add	r2,r2,r9
  80bf44:	2008d43a 	srli	r4,r4,16
  80bf48:	280ad43a 	srli	r5,r5,16
  80bf4c:	1007d43a 	srai	r3,r2,16
  80bf50:	3880000d 	sth	r2,0(r7)
  80bf54:	2149c83a 	sub	r4,r4,r5
  80bf58:	20c9883a 	add	r4,r4,r3
  80bf5c:	3900008d 	sth	r4,2(r7)
  80bf60:	31800104 	addi	r6,r6,4
  80bf64:	39c00104 	addi	r7,r7,4
  80bf68:	2013d43a 	srai	r9,r4,16
  80bf6c:	42ffee36 	bltu	r8,r11,80bf28 <__mdiff+0x80>
  80bf70:	33400c2e 	bgeu	r6,r13,80bfa4 <__mdiff+0xfc>
  80bf74:	30800017 	ldw	r2,0(r6)
  80bf78:	31800104 	addi	r6,r6,4
  80bf7c:	10ffffcc 	andi	r3,r2,65535
  80bf80:	1a47883a 	add	r3,r3,r9
  80bf84:	1004d43a 	srli	r2,r2,16
  80bf88:	1809d43a 	srai	r4,r3,16
  80bf8c:	38c0000d 	sth	r3,0(r7)
  80bf90:	1105883a 	add	r2,r2,r4
  80bf94:	3880008d 	sth	r2,2(r7)
  80bf98:	1013d43a 	srai	r9,r2,16
  80bf9c:	39c00104 	addi	r7,r7,4
  80bfa0:	337ff436 	bltu	r6,r13,80bf74 <__mdiff+0xcc>
  80bfa4:	38bfff17 	ldw	r2,-4(r7)
  80bfa8:	38ffff04 	addi	r3,r7,-4
  80bfac:	1000041e 	bne	r2,zero,80bfc0 <__mdiff+0x118>
  80bfb0:	18ffff04 	addi	r3,r3,-4
  80bfb4:	18800017 	ldw	r2,0(r3)
  80bfb8:	52bfffc4 	addi	r10,r10,-1
  80bfbc:	103ffc26 	beq	r2,zero,80bfb0 <__mdiff+0x108>
  80bfc0:	6005883a 	mov	r2,r12
  80bfc4:	62800415 	stw	r10,16(r12)
  80bfc8:	dfc00417 	ldw	ra,16(sp)
  80bfcc:	dcc00317 	ldw	r19,12(sp)
  80bfd0:	dc800217 	ldw	r18,8(sp)
  80bfd4:	dc400117 	ldw	r17,4(sp)
  80bfd8:	dc000017 	ldw	r16,0(sp)
  80bfdc:	dec00504 	addi	sp,sp,20
  80bfe0:	f800283a 	ret
  80bfe4:	9009883a 	mov	r4,r18
  80bfe8:	000b883a 	mov	r5,zero
  80bfec:	080bc700 	call	80bc70 <_Balloc>
  80bff0:	1019883a 	mov	r12,r2
  80bff4:	00800044 	movi	r2,1
  80bff8:	60800415 	stw	r2,16(r12)
  80bffc:	6005883a 	mov	r2,r12
  80c000:	60000515 	stw	zero,20(r12)
  80c004:	dfc00417 	ldw	ra,16(sp)
  80c008:	dcc00317 	ldw	r19,12(sp)
  80c00c:	dc800217 	ldw	r18,8(sp)
  80c010:	dc400117 	ldw	r17,4(sp)
  80c014:	dc000017 	ldw	r16,0(sp)
  80c018:	dec00504 	addi	sp,sp,20
  80c01c:	f800283a 	ret
  80c020:	880d883a 	mov	r6,r17
  80c024:	04c00044 	movi	r19,1
  80c028:	8023883a 	mov	r17,r16
  80c02c:	3021883a 	mov	r16,r6
  80c030:	003fac06 	br	80bee4 <__mdiff+0x3c>

0080c034 <__lshift>:
  80c034:	defff904 	addi	sp,sp,-28
  80c038:	28800417 	ldw	r2,16(r5)
  80c03c:	dc000015 	stw	r16,0(sp)
  80c040:	3021d17a 	srai	r16,r6,5
  80c044:	28c00217 	ldw	r3,8(r5)
  80c048:	10800044 	addi	r2,r2,1
  80c04c:	dc400115 	stw	r17,4(sp)
  80c050:	80a3883a 	add	r17,r16,r2
  80c054:	dd400515 	stw	r21,20(sp)
  80c058:	dd000415 	stw	r20,16(sp)
  80c05c:	dc800215 	stw	r18,8(sp)
  80c060:	dfc00615 	stw	ra,24(sp)
  80c064:	2825883a 	mov	r18,r5
  80c068:	dcc00315 	stw	r19,12(sp)
  80c06c:	3029883a 	mov	r20,r6
  80c070:	202b883a 	mov	r21,r4
  80c074:	29400117 	ldw	r5,4(r5)
  80c078:	1c40030e 	bge	r3,r17,80c088 <__lshift+0x54>
  80c07c:	18c7883a 	add	r3,r3,r3
  80c080:	29400044 	addi	r5,r5,1
  80c084:	1c7ffd16 	blt	r3,r17,80c07c <__lshift+0x48>
  80c088:	a809883a 	mov	r4,r21
  80c08c:	080bc700 	call	80bc70 <_Balloc>
  80c090:	1027883a 	mov	r19,r2
  80c094:	11400504 	addi	r5,r2,20
  80c098:	0400090e 	bge	zero,r16,80c0c0 <__lshift+0x8c>
  80c09c:	2805883a 	mov	r2,r5
  80c0a0:	0007883a 	mov	r3,zero
  80c0a4:	18c00044 	addi	r3,r3,1
  80c0a8:	10000015 	stw	zero,0(r2)
  80c0ac:	10800104 	addi	r2,r2,4
  80c0b0:	80fffc1e 	bne	r16,r3,80c0a4 <__lshift+0x70>
  80c0b4:	8405883a 	add	r2,r16,r16
  80c0b8:	1085883a 	add	r2,r2,r2
  80c0bc:	288b883a 	add	r5,r5,r2
  80c0c0:	90800417 	ldw	r2,16(r18)
  80c0c4:	91000504 	addi	r4,r18,20
  80c0c8:	a18007cc 	andi	r6,r20,31
  80c0cc:	1085883a 	add	r2,r2,r2
  80c0d0:	1085883a 	add	r2,r2,r2
  80c0d4:	208f883a 	add	r7,r4,r2
  80c0d8:	30001e26 	beq	r6,zero,80c154 <__lshift+0x120>
  80c0dc:	00800804 	movi	r2,32
  80c0e0:	1191c83a 	sub	r8,r2,r6
  80c0e4:	0007883a 	mov	r3,zero
  80c0e8:	20800017 	ldw	r2,0(r4)
  80c0ec:	1184983a 	sll	r2,r2,r6
  80c0f0:	1884b03a 	or	r2,r3,r2
  80c0f4:	28800015 	stw	r2,0(r5)
  80c0f8:	20c00017 	ldw	r3,0(r4)
  80c0fc:	21000104 	addi	r4,r4,4
  80c100:	29400104 	addi	r5,r5,4
  80c104:	1a06d83a 	srl	r3,r3,r8
  80c108:	21fff736 	bltu	r4,r7,80c0e8 <__lshift+0xb4>
  80c10c:	28c00015 	stw	r3,0(r5)
  80c110:	18000126 	beq	r3,zero,80c118 <__lshift+0xe4>
  80c114:	8c400044 	addi	r17,r17,1
  80c118:	88bfffc4 	addi	r2,r17,-1
  80c11c:	98800415 	stw	r2,16(r19)
  80c120:	a809883a 	mov	r4,r21
  80c124:	900b883a 	mov	r5,r18
  80c128:	080b6f00 	call	80b6f0 <_Bfree>
  80c12c:	9805883a 	mov	r2,r19
  80c130:	dfc00617 	ldw	ra,24(sp)
  80c134:	dd400517 	ldw	r21,20(sp)
  80c138:	dd000417 	ldw	r20,16(sp)
  80c13c:	dcc00317 	ldw	r19,12(sp)
  80c140:	dc800217 	ldw	r18,8(sp)
  80c144:	dc400117 	ldw	r17,4(sp)
  80c148:	dc000017 	ldw	r16,0(sp)
  80c14c:	dec00704 	addi	sp,sp,28
  80c150:	f800283a 	ret
  80c154:	20800017 	ldw	r2,0(r4)
  80c158:	21000104 	addi	r4,r4,4
  80c15c:	28800015 	stw	r2,0(r5)
  80c160:	29400104 	addi	r5,r5,4
  80c164:	21ffec2e 	bgeu	r4,r7,80c118 <__lshift+0xe4>
  80c168:	20800017 	ldw	r2,0(r4)
  80c16c:	21000104 	addi	r4,r4,4
  80c170:	28800015 	stw	r2,0(r5)
  80c174:	29400104 	addi	r5,r5,4
  80c178:	21fff636 	bltu	r4,r7,80c154 <__lshift+0x120>
  80c17c:	003fe606 	br	80c118 <__lshift+0xe4>

0080c180 <__multiply>:
  80c180:	defff004 	addi	sp,sp,-64
  80c184:	dc800815 	stw	r18,32(sp)
  80c188:	dc400715 	stw	r17,28(sp)
  80c18c:	2c800417 	ldw	r18,16(r5)
  80c190:	34400417 	ldw	r17,16(r6)
  80c194:	dcc00915 	stw	r19,36(sp)
  80c198:	dc000615 	stw	r16,24(sp)
  80c19c:	dfc00f15 	stw	ra,60(sp)
  80c1a0:	df000e15 	stw	fp,56(sp)
  80c1a4:	ddc00d15 	stw	r23,52(sp)
  80c1a8:	dd800c15 	stw	r22,48(sp)
  80c1ac:	dd400b15 	stw	r21,44(sp)
  80c1b0:	dd000a15 	stw	r20,40(sp)
  80c1b4:	2821883a 	mov	r16,r5
  80c1b8:	3027883a 	mov	r19,r6
  80c1bc:	9440040e 	bge	r18,r17,80c1d0 <__multiply+0x50>
  80c1c0:	8825883a 	mov	r18,r17
  80c1c4:	2c400417 	ldw	r17,16(r5)
  80c1c8:	2827883a 	mov	r19,r5
  80c1cc:	3021883a 	mov	r16,r6
  80c1d0:	80800217 	ldw	r2,8(r16)
  80c1d4:	9447883a 	add	r3,r18,r17
  80c1d8:	d8c00415 	stw	r3,16(sp)
  80c1dc:	81400117 	ldw	r5,4(r16)
  80c1e0:	10c0010e 	bge	r2,r3,80c1e8 <__multiply+0x68>
  80c1e4:	29400044 	addi	r5,r5,1
  80c1e8:	080bc700 	call	80bc70 <_Balloc>
  80c1ec:	d8800515 	stw	r2,20(sp)
  80c1f0:	d9000417 	ldw	r4,16(sp)
  80c1f4:	d8c00517 	ldw	r3,20(sp)
  80c1f8:	2105883a 	add	r2,r4,r4
  80c1fc:	1085883a 	add	r2,r2,r2
  80c200:	19000504 	addi	r4,r3,20
  80c204:	2085883a 	add	r2,r4,r2
  80c208:	d8800315 	stw	r2,12(sp)
  80c20c:	2080052e 	bgeu	r4,r2,80c224 <__multiply+0xa4>
  80c210:	2005883a 	mov	r2,r4
  80c214:	d8c00317 	ldw	r3,12(sp)
  80c218:	10000015 	stw	zero,0(r2)
  80c21c:	10800104 	addi	r2,r2,4
  80c220:	10fffc36 	bltu	r2,r3,80c214 <__multiply+0x94>
  80c224:	8c45883a 	add	r2,r17,r17
  80c228:	9487883a 	add	r3,r18,r18
  80c22c:	9dc00504 	addi	r23,r19,20
  80c230:	1085883a 	add	r2,r2,r2
  80c234:	84000504 	addi	r16,r16,20
  80c238:	18c7883a 	add	r3,r3,r3
  80c23c:	b885883a 	add	r2,r23,r2
  80c240:	dc000015 	stw	r16,0(sp)
  80c244:	d8800215 	stw	r2,8(sp)
  80c248:	80f9883a 	add	fp,r16,r3
  80c24c:	b880432e 	bgeu	r23,r2,80c35c <__multiply+0x1dc>
  80c250:	d9000115 	stw	r4,4(sp)
  80c254:	b9000017 	ldw	r4,0(r23)
  80c258:	253fffcc 	andi	r20,r4,65535
  80c25c:	a0001a26 	beq	r20,zero,80c2c8 <__multiply+0x148>
  80c260:	dcc00017 	ldw	r19,0(sp)
  80c264:	dc800117 	ldw	r18,4(sp)
  80c268:	002b883a 	mov	r21,zero
  80c26c:	9c400017 	ldw	r17,0(r19)
  80c270:	94000017 	ldw	r16,0(r18)
  80c274:	a009883a 	mov	r4,r20
  80c278:	897fffcc 	andi	r5,r17,65535
  80c27c:	08026a00 	call	8026a0 <__mulsi3>
  80c280:	880ad43a 	srli	r5,r17,16
  80c284:	80ffffcc 	andi	r3,r16,65535
  80c288:	a8c7883a 	add	r3,r21,r3
  80c28c:	a009883a 	mov	r4,r20
  80c290:	10e3883a 	add	r17,r2,r3
  80c294:	8020d43a 	srli	r16,r16,16
  80c298:	08026a00 	call	8026a0 <__mulsi3>
  80c29c:	8806d43a 	srli	r3,r17,16
  80c2a0:	1405883a 	add	r2,r2,r16
  80c2a4:	9cc00104 	addi	r19,r19,4
  80c2a8:	1887883a 	add	r3,r3,r2
  80c2ac:	90c0008d 	sth	r3,2(r18)
  80c2b0:	9440000d 	sth	r17,0(r18)
  80c2b4:	182ad43a 	srli	r21,r3,16
  80c2b8:	94800104 	addi	r18,r18,4
  80c2bc:	9f3feb36 	bltu	r19,fp,80c26c <__multiply+0xec>
  80c2c0:	95400015 	stw	r21,0(r18)
  80c2c4:	b9000017 	ldw	r4,0(r23)
  80c2c8:	202ad43a 	srli	r21,r4,16
  80c2cc:	a8001c26 	beq	r21,zero,80c340 <__multiply+0x1c0>
  80c2d0:	d9000117 	ldw	r4,4(sp)
  80c2d4:	dd000017 	ldw	r20,0(sp)
  80c2d8:	002d883a 	mov	r22,zero
  80c2dc:	24c00017 	ldw	r19,0(r4)
  80c2e0:	2025883a 	mov	r18,r4
  80c2e4:	9823883a 	mov	r17,r19
  80c2e8:	a4000017 	ldw	r16,0(r20)
  80c2ec:	a809883a 	mov	r4,r21
  80c2f0:	a5000104 	addi	r20,r20,4
  80c2f4:	817fffcc 	andi	r5,r16,65535
  80c2f8:	08026a00 	call	8026a0 <__mulsi3>
  80c2fc:	8806d43a 	srli	r3,r17,16
  80c300:	800ad43a 	srli	r5,r16,16
  80c304:	94c0000d 	sth	r19,0(r18)
  80c308:	b0c7883a 	add	r3,r22,r3
  80c30c:	10e1883a 	add	r16,r2,r3
  80c310:	9400008d 	sth	r16,2(r18)
  80c314:	a809883a 	mov	r4,r21
  80c318:	94800104 	addi	r18,r18,4
  80c31c:	08026a00 	call	8026a0 <__mulsi3>
  80c320:	94400017 	ldw	r17,0(r18)
  80c324:	8020d43a 	srli	r16,r16,16
  80c328:	88ffffcc 	andi	r3,r17,65535
  80c32c:	10c5883a 	add	r2,r2,r3
  80c330:	80a7883a 	add	r19,r16,r2
  80c334:	982cd43a 	srli	r22,r19,16
  80c338:	a73feb36 	bltu	r20,fp,80c2e8 <__multiply+0x168>
  80c33c:	94c00015 	stw	r19,0(r18)
  80c340:	d8800217 	ldw	r2,8(sp)
  80c344:	bdc00104 	addi	r23,r23,4
  80c348:	b880042e 	bgeu	r23,r2,80c35c <__multiply+0x1dc>
  80c34c:	d8c00117 	ldw	r3,4(sp)
  80c350:	18c00104 	addi	r3,r3,4
  80c354:	d8c00115 	stw	r3,4(sp)
  80c358:	003fbe06 	br	80c254 <__multiply+0xd4>
  80c35c:	d9000417 	ldw	r4,16(sp)
  80c360:	01000c0e 	bge	zero,r4,80c394 <__multiply+0x214>
  80c364:	d8c00317 	ldw	r3,12(sp)
  80c368:	18bfff17 	ldw	r2,-4(r3)
  80c36c:	18ffff04 	addi	r3,r3,-4
  80c370:	10000326 	beq	r2,zero,80c380 <__multiply+0x200>
  80c374:	00000706 	br	80c394 <__multiply+0x214>
  80c378:	18800017 	ldw	r2,0(r3)
  80c37c:	1000051e 	bne	r2,zero,80c394 <__multiply+0x214>
  80c380:	d9000417 	ldw	r4,16(sp)
  80c384:	18ffff04 	addi	r3,r3,-4
  80c388:	213fffc4 	addi	r4,r4,-1
  80c38c:	d9000415 	stw	r4,16(sp)
  80c390:	203ff91e 	bne	r4,zero,80c378 <__multiply+0x1f8>
  80c394:	d8800417 	ldw	r2,16(sp)
  80c398:	d8c00517 	ldw	r3,20(sp)
  80c39c:	18800415 	stw	r2,16(r3)
  80c3a0:	1805883a 	mov	r2,r3
  80c3a4:	dfc00f17 	ldw	ra,60(sp)
  80c3a8:	df000e17 	ldw	fp,56(sp)
  80c3ac:	ddc00d17 	ldw	r23,52(sp)
  80c3b0:	dd800c17 	ldw	r22,48(sp)
  80c3b4:	dd400b17 	ldw	r21,44(sp)
  80c3b8:	dd000a17 	ldw	r20,40(sp)
  80c3bc:	dcc00917 	ldw	r19,36(sp)
  80c3c0:	dc800817 	ldw	r18,32(sp)
  80c3c4:	dc400717 	ldw	r17,28(sp)
  80c3c8:	dc000617 	ldw	r16,24(sp)
  80c3cc:	dec01004 	addi	sp,sp,64
  80c3d0:	f800283a 	ret

0080c3d4 <__i2b>:
  80c3d4:	defffd04 	addi	sp,sp,-12
  80c3d8:	dc000015 	stw	r16,0(sp)
  80c3dc:	04000044 	movi	r16,1
  80c3e0:	dc800115 	stw	r18,4(sp)
  80c3e4:	2825883a 	mov	r18,r5
  80c3e8:	800b883a 	mov	r5,r16
  80c3ec:	dfc00215 	stw	ra,8(sp)
  80c3f0:	080bc700 	call	80bc70 <_Balloc>
  80c3f4:	14000415 	stw	r16,16(r2)
  80c3f8:	14800515 	stw	r18,20(r2)
  80c3fc:	dfc00217 	ldw	ra,8(sp)
  80c400:	dc800117 	ldw	r18,4(sp)
  80c404:	dc000017 	ldw	r16,0(sp)
  80c408:	dec00304 	addi	sp,sp,12
  80c40c:	f800283a 	ret

0080c410 <__multadd>:
  80c410:	defff604 	addi	sp,sp,-40
  80c414:	dd800615 	stw	r22,24(sp)
  80c418:	2d800417 	ldw	r22,16(r5)
  80c41c:	df000815 	stw	fp,32(sp)
  80c420:	ddc00715 	stw	r23,28(sp)
  80c424:	dd400515 	stw	r21,20(sp)
  80c428:	dd000415 	stw	r20,16(sp)
  80c42c:	dcc00315 	stw	r19,12(sp)
  80c430:	dc800215 	stw	r18,8(sp)
  80c434:	dfc00915 	stw	ra,36(sp)
  80c438:	dc400115 	stw	r17,4(sp)
  80c43c:	dc000015 	stw	r16,0(sp)
  80c440:	282f883a 	mov	r23,r5
  80c444:	2039883a 	mov	fp,r4
  80c448:	302b883a 	mov	r21,r6
  80c44c:	3829883a 	mov	r20,r7
  80c450:	2c800504 	addi	r18,r5,20
  80c454:	0027883a 	mov	r19,zero
  80c458:	94400017 	ldw	r17,0(r18)
  80c45c:	a80b883a 	mov	r5,r21
  80c460:	9cc00044 	addi	r19,r19,1
  80c464:	893fffcc 	andi	r4,r17,65535
  80c468:	08026a00 	call	8026a0 <__mulsi3>
  80c46c:	8808d43a 	srli	r4,r17,16
  80c470:	1521883a 	add	r16,r2,r20
  80c474:	a80b883a 	mov	r5,r21
  80c478:	08026a00 	call	8026a0 <__mulsi3>
  80c47c:	8008d43a 	srli	r4,r16,16
  80c480:	843fffcc 	andi	r16,r16,65535
  80c484:	1105883a 	add	r2,r2,r4
  80c488:	1006943a 	slli	r3,r2,16
  80c48c:	1028d43a 	srli	r20,r2,16
  80c490:	1c07883a 	add	r3,r3,r16
  80c494:	90c00015 	stw	r3,0(r18)
  80c498:	94800104 	addi	r18,r18,4
  80c49c:	9dbfee16 	blt	r19,r22,80c458 <__multadd+0x48>
  80c4a0:	a0000826 	beq	r20,zero,80c4c4 <__multadd+0xb4>
  80c4a4:	b8800217 	ldw	r2,8(r23)
  80c4a8:	b080130e 	bge	r22,r2,80c4f8 <__multadd+0xe8>
  80c4ac:	b585883a 	add	r2,r22,r22
  80c4b0:	1085883a 	add	r2,r2,r2
  80c4b4:	15c5883a 	add	r2,r2,r23
  80c4b8:	b0c00044 	addi	r3,r22,1
  80c4bc:	15000515 	stw	r20,20(r2)
  80c4c0:	b8c00415 	stw	r3,16(r23)
  80c4c4:	b805883a 	mov	r2,r23
  80c4c8:	dfc00917 	ldw	ra,36(sp)
  80c4cc:	df000817 	ldw	fp,32(sp)
  80c4d0:	ddc00717 	ldw	r23,28(sp)
  80c4d4:	dd800617 	ldw	r22,24(sp)
  80c4d8:	dd400517 	ldw	r21,20(sp)
  80c4dc:	dd000417 	ldw	r20,16(sp)
  80c4e0:	dcc00317 	ldw	r19,12(sp)
  80c4e4:	dc800217 	ldw	r18,8(sp)
  80c4e8:	dc400117 	ldw	r17,4(sp)
  80c4ec:	dc000017 	ldw	r16,0(sp)
  80c4f0:	dec00a04 	addi	sp,sp,40
  80c4f4:	f800283a 	ret
  80c4f8:	b9400117 	ldw	r5,4(r23)
  80c4fc:	e009883a 	mov	r4,fp
  80c500:	29400044 	addi	r5,r5,1
  80c504:	080bc700 	call	80bc70 <_Balloc>
  80c508:	b9800417 	ldw	r6,16(r23)
  80c50c:	b9400304 	addi	r5,r23,12
  80c510:	11000304 	addi	r4,r2,12
  80c514:	318d883a 	add	r6,r6,r6
  80c518:	318d883a 	add	r6,r6,r6
  80c51c:	31800204 	addi	r6,r6,8
  80c520:	1023883a 	mov	r17,r2
  80c524:	0804f780 	call	804f78 <memcpy>
  80c528:	b80b883a 	mov	r5,r23
  80c52c:	e009883a 	mov	r4,fp
  80c530:	080b6f00 	call	80b6f0 <_Bfree>
  80c534:	882f883a 	mov	r23,r17
  80c538:	003fdc06 	br	80c4ac <__multadd+0x9c>

0080c53c <__pow5mult>:
  80c53c:	defffa04 	addi	sp,sp,-24
  80c540:	308000cc 	andi	r2,r6,3
  80c544:	dd000415 	stw	r20,16(sp)
  80c548:	dcc00315 	stw	r19,12(sp)
  80c54c:	dc000015 	stw	r16,0(sp)
  80c550:	dfc00515 	stw	ra,20(sp)
  80c554:	dc800215 	stw	r18,8(sp)
  80c558:	dc400115 	stw	r17,4(sp)
  80c55c:	3021883a 	mov	r16,r6
  80c560:	2027883a 	mov	r19,r4
  80c564:	2829883a 	mov	r20,r5
  80c568:	10002b1e 	bne	r2,zero,80c618 <__pow5mult+0xdc>
  80c56c:	8025d0ba 	srai	r18,r16,2
  80c570:	90001b26 	beq	r18,zero,80c5e0 <__pow5mult+0xa4>
  80c574:	9c001217 	ldw	r16,72(r19)
  80c578:	8000081e 	bne	r16,zero,80c59c <__pow5mult+0x60>
  80c57c:	00003006 	br	80c640 <__pow5mult+0x104>
  80c580:	800b883a 	mov	r5,r16
  80c584:	800d883a 	mov	r6,r16
  80c588:	9809883a 	mov	r4,r19
  80c58c:	90001426 	beq	r18,zero,80c5e0 <__pow5mult+0xa4>
  80c590:	80800017 	ldw	r2,0(r16)
  80c594:	10001b26 	beq	r2,zero,80c604 <__pow5mult+0xc8>
  80c598:	1021883a 	mov	r16,r2
  80c59c:	9080004c 	andi	r2,r18,1
  80c5a0:	1005003a 	cmpeq	r2,r2,zero
  80c5a4:	9025d07a 	srai	r18,r18,1
  80c5a8:	800d883a 	mov	r6,r16
  80c5ac:	9809883a 	mov	r4,r19
  80c5b0:	a00b883a 	mov	r5,r20
  80c5b4:	103ff21e 	bne	r2,zero,80c580 <__pow5mult+0x44>
  80c5b8:	080c1800 	call	80c180 <__multiply>
  80c5bc:	a00b883a 	mov	r5,r20
  80c5c0:	9809883a 	mov	r4,r19
  80c5c4:	1023883a 	mov	r17,r2
  80c5c8:	080b6f00 	call	80b6f0 <_Bfree>
  80c5cc:	8829883a 	mov	r20,r17
  80c5d0:	800b883a 	mov	r5,r16
  80c5d4:	800d883a 	mov	r6,r16
  80c5d8:	9809883a 	mov	r4,r19
  80c5dc:	903fec1e 	bne	r18,zero,80c590 <__pow5mult+0x54>
  80c5e0:	a005883a 	mov	r2,r20
  80c5e4:	dfc00517 	ldw	ra,20(sp)
  80c5e8:	dd000417 	ldw	r20,16(sp)
  80c5ec:	dcc00317 	ldw	r19,12(sp)
  80c5f0:	dc800217 	ldw	r18,8(sp)
  80c5f4:	dc400117 	ldw	r17,4(sp)
  80c5f8:	dc000017 	ldw	r16,0(sp)
  80c5fc:	dec00604 	addi	sp,sp,24
  80c600:	f800283a 	ret
  80c604:	080c1800 	call	80c180 <__multiply>
  80c608:	80800015 	stw	r2,0(r16)
  80c60c:	1021883a 	mov	r16,r2
  80c610:	10000015 	stw	zero,0(r2)
  80c614:	003fe106 	br	80c59c <__pow5mult+0x60>
  80c618:	1085883a 	add	r2,r2,r2
  80c61c:	00c02074 	movhi	r3,129
  80c620:	18d50204 	addi	r3,r3,21512
  80c624:	1085883a 	add	r2,r2,r2
  80c628:	10c5883a 	add	r2,r2,r3
  80c62c:	11bfff17 	ldw	r6,-4(r2)
  80c630:	000f883a 	mov	r7,zero
  80c634:	080c4100 	call	80c410 <__multadd>
  80c638:	1029883a 	mov	r20,r2
  80c63c:	003fcb06 	br	80c56c <__pow5mult+0x30>
  80c640:	9809883a 	mov	r4,r19
  80c644:	01409c44 	movi	r5,625
  80c648:	080c3d40 	call	80c3d4 <__i2b>
  80c64c:	98801215 	stw	r2,72(r19)
  80c650:	1021883a 	mov	r16,r2
  80c654:	10000015 	stw	zero,0(r2)
  80c658:	003fd006 	br	80c59c <__pow5mult+0x60>

0080c65c <__s2b>:
  80c65c:	defff904 	addi	sp,sp,-28
  80c660:	dcc00315 	stw	r19,12(sp)
  80c664:	dc800215 	stw	r18,8(sp)
  80c668:	2827883a 	mov	r19,r5
  80c66c:	2025883a 	mov	r18,r4
  80c670:	01400244 	movi	r5,9
  80c674:	39000204 	addi	r4,r7,8
  80c678:	dd000415 	stw	r20,16(sp)
  80c67c:	dc400115 	stw	r17,4(sp)
  80c680:	dfc00615 	stw	ra,24(sp)
  80c684:	dd400515 	stw	r21,20(sp)
  80c688:	dc000015 	stw	r16,0(sp)
  80c68c:	3829883a 	mov	r20,r7
  80c690:	3023883a 	mov	r17,r6
  80c694:	08118600 	call	811860 <__divsi3>
  80c698:	00c00044 	movi	r3,1
  80c69c:	1880350e 	bge	r3,r2,80c774 <__s2b+0x118>
  80c6a0:	000b883a 	mov	r5,zero
  80c6a4:	18c7883a 	add	r3,r3,r3
  80c6a8:	29400044 	addi	r5,r5,1
  80c6ac:	18bffd16 	blt	r3,r2,80c6a4 <__s2b+0x48>
  80c6b0:	9009883a 	mov	r4,r18
  80c6b4:	080bc700 	call	80bc70 <_Balloc>
  80c6b8:	1011883a 	mov	r8,r2
  80c6bc:	d8800717 	ldw	r2,28(sp)
  80c6c0:	00c00044 	movi	r3,1
  80c6c4:	01800244 	movi	r6,9
  80c6c8:	40800515 	stw	r2,20(r8)
  80c6cc:	40c00415 	stw	r3,16(r8)
  80c6d0:	3440260e 	bge	r6,r17,80c76c <__s2b+0x110>
  80c6d4:	3021883a 	mov	r16,r6
  80c6d8:	99ab883a 	add	r21,r19,r6
  80c6dc:	9c05883a 	add	r2,r19,r16
  80c6e0:	11c00007 	ldb	r7,0(r2)
  80c6e4:	400b883a 	mov	r5,r8
  80c6e8:	9009883a 	mov	r4,r18
  80c6ec:	39fff404 	addi	r7,r7,-48
  80c6f0:	01800284 	movi	r6,10
  80c6f4:	080c4100 	call	80c410 <__multadd>
  80c6f8:	84000044 	addi	r16,r16,1
  80c6fc:	1011883a 	mov	r8,r2
  80c700:	8c3ff61e 	bne	r17,r16,80c6dc <__s2b+0x80>
  80c704:	ac45883a 	add	r2,r21,r17
  80c708:	117ffe04 	addi	r5,r2,-8
  80c70c:	880d883a 	mov	r6,r17
  80c710:	35000c0e 	bge	r6,r20,80c744 <__s2b+0xe8>
  80c714:	a185c83a 	sub	r2,r20,r6
  80c718:	2821883a 	mov	r16,r5
  80c71c:	28a3883a 	add	r17,r5,r2
  80c720:	81c00007 	ldb	r7,0(r16)
  80c724:	400b883a 	mov	r5,r8
  80c728:	9009883a 	mov	r4,r18
  80c72c:	39fff404 	addi	r7,r7,-48
  80c730:	01800284 	movi	r6,10
  80c734:	080c4100 	call	80c410 <__multadd>
  80c738:	84000044 	addi	r16,r16,1
  80c73c:	1011883a 	mov	r8,r2
  80c740:	847ff71e 	bne	r16,r17,80c720 <__s2b+0xc4>
  80c744:	4005883a 	mov	r2,r8
  80c748:	dfc00617 	ldw	ra,24(sp)
  80c74c:	dd400517 	ldw	r21,20(sp)
  80c750:	dd000417 	ldw	r20,16(sp)
  80c754:	dcc00317 	ldw	r19,12(sp)
  80c758:	dc800217 	ldw	r18,8(sp)
  80c75c:	dc400117 	ldw	r17,4(sp)
  80c760:	dc000017 	ldw	r16,0(sp)
  80c764:	dec00704 	addi	sp,sp,28
  80c768:	f800283a 	ret
  80c76c:	99400284 	addi	r5,r19,10
  80c770:	003fe706 	br	80c710 <__s2b+0xb4>
  80c774:	000b883a 	mov	r5,zero
  80c778:	003fcd06 	br	80c6b0 <__s2b+0x54>

0080c77c <_read_r>:
  80c77c:	defffd04 	addi	sp,sp,-12
  80c780:	dc000015 	stw	r16,0(sp)
  80c784:	040020b4 	movhi	r16,130
  80c788:	8422b604 	addi	r16,r16,-29992
  80c78c:	dc400115 	stw	r17,4(sp)
  80c790:	80000015 	stw	zero,0(r16)
  80c794:	2023883a 	mov	r17,r4
  80c798:	2809883a 	mov	r4,r5
  80c79c:	300b883a 	mov	r5,r6
  80c7a0:	380d883a 	mov	r6,r7
  80c7a4:	dfc00215 	stw	ra,8(sp)
  80c7a8:	08126fc0 	call	8126fc <read>
  80c7ac:	1007883a 	mov	r3,r2
  80c7b0:	00bfffc4 	movi	r2,-1
  80c7b4:	18800626 	beq	r3,r2,80c7d0 <_read_r+0x54>
  80c7b8:	1805883a 	mov	r2,r3
  80c7bc:	dfc00217 	ldw	ra,8(sp)
  80c7c0:	dc400117 	ldw	r17,4(sp)
  80c7c4:	dc000017 	ldw	r16,0(sp)
  80c7c8:	dec00304 	addi	sp,sp,12
  80c7cc:	f800283a 	ret
  80c7d0:	80800017 	ldw	r2,0(r16)
  80c7d4:	103ff826 	beq	r2,zero,80c7b8 <_read_r+0x3c>
  80c7d8:	88800015 	stw	r2,0(r17)
  80c7dc:	1805883a 	mov	r2,r3
  80c7e0:	dfc00217 	ldw	ra,8(sp)
  80c7e4:	dc400117 	ldw	r17,4(sp)
  80c7e8:	dc000017 	ldw	r16,0(sp)
  80c7ec:	dec00304 	addi	sp,sp,12
  80c7f0:	f800283a 	ret

0080c7f4 <_realloc_r>:
  80c7f4:	defff404 	addi	sp,sp,-48
  80c7f8:	dd800815 	stw	r22,32(sp)
  80c7fc:	dc800415 	stw	r18,16(sp)
  80c800:	dc400315 	stw	r17,12(sp)
  80c804:	dfc00b15 	stw	ra,44(sp)
  80c808:	df000a15 	stw	fp,40(sp)
  80c80c:	ddc00915 	stw	r23,36(sp)
  80c810:	dd400715 	stw	r21,28(sp)
  80c814:	dd000615 	stw	r20,24(sp)
  80c818:	dcc00515 	stw	r19,20(sp)
  80c81c:	dc000215 	stw	r16,8(sp)
  80c820:	2825883a 	mov	r18,r5
  80c824:	3023883a 	mov	r17,r6
  80c828:	202d883a 	mov	r22,r4
  80c82c:	2800c926 	beq	r5,zero,80cb54 <_realloc_r+0x360>
  80c830:	08123d80 	call	8123d8 <__malloc_lock>
  80c834:	943ffe04 	addi	r16,r18,-8
  80c838:	88c002c4 	addi	r3,r17,11
  80c83c:	00800584 	movi	r2,22
  80c840:	82000117 	ldw	r8,4(r16)
  80c844:	10c01b2e 	bgeu	r2,r3,80c8b4 <_realloc_r+0xc0>
  80c848:	00bffe04 	movi	r2,-8
  80c84c:	188e703a 	and	r7,r3,r2
  80c850:	3839883a 	mov	fp,r7
  80c854:	38001a16 	blt	r7,zero,80c8c0 <_realloc_r+0xcc>
  80c858:	e4401936 	bltu	fp,r17,80c8c0 <_realloc_r+0xcc>
  80c85c:	013fff04 	movi	r4,-4
  80c860:	4126703a 	and	r19,r8,r4
  80c864:	99c02616 	blt	r19,r7,80c900 <_realloc_r+0x10c>
  80c868:	802b883a 	mov	r21,r16
  80c86c:	9829883a 	mov	r20,r19
  80c870:	84000204 	addi	r16,r16,8
  80c874:	a80f883a 	mov	r7,r21
  80c878:	a70dc83a 	sub	r6,r20,fp
  80c87c:	008003c4 	movi	r2,15
  80c880:	1180c136 	bltu	r2,r6,80cb88 <_realloc_r+0x394>
  80c884:	38800117 	ldw	r2,4(r7)
  80c888:	a549883a 	add	r4,r20,r21
  80c88c:	1080004c 	andi	r2,r2,1
  80c890:	a084b03a 	or	r2,r20,r2
  80c894:	38800115 	stw	r2,4(r7)
  80c898:	20c00117 	ldw	r3,4(r4)
  80c89c:	18c00054 	ori	r3,r3,1
  80c8a0:	20c00115 	stw	r3,4(r4)
  80c8a4:	b009883a 	mov	r4,r22
  80c8a8:	08123f80 	call	8123f8 <__malloc_unlock>
  80c8ac:	8023883a 	mov	r17,r16
  80c8b0:	00000606 	br	80c8cc <_realloc_r+0xd8>
  80c8b4:	01c00404 	movi	r7,16
  80c8b8:	3839883a 	mov	fp,r7
  80c8bc:	e47fe72e 	bgeu	fp,r17,80c85c <_realloc_r+0x68>
  80c8c0:	00800304 	movi	r2,12
  80c8c4:	0023883a 	mov	r17,zero
  80c8c8:	b0800015 	stw	r2,0(r22)
  80c8cc:	8805883a 	mov	r2,r17
  80c8d0:	dfc00b17 	ldw	ra,44(sp)
  80c8d4:	df000a17 	ldw	fp,40(sp)
  80c8d8:	ddc00917 	ldw	r23,36(sp)
  80c8dc:	dd800817 	ldw	r22,32(sp)
  80c8e0:	dd400717 	ldw	r21,28(sp)
  80c8e4:	dd000617 	ldw	r20,24(sp)
  80c8e8:	dcc00517 	ldw	r19,20(sp)
  80c8ec:	dc800417 	ldw	r18,16(sp)
  80c8f0:	dc400317 	ldw	r17,12(sp)
  80c8f4:	dc000217 	ldw	r16,8(sp)
  80c8f8:	dec00c04 	addi	sp,sp,48
  80c8fc:	f800283a 	ret
  80c900:	00802074 	movhi	r2,129
  80c904:	10963104 	addi	r2,r2,22724
  80c908:	12400217 	ldw	r9,8(r2)
  80c90c:	84cd883a 	add	r6,r16,r19
  80c910:	802b883a 	mov	r21,r16
  80c914:	3240b926 	beq	r6,r9,80cbfc <_realloc_r+0x408>
  80c918:	31400117 	ldw	r5,4(r6)
  80c91c:	00bfff84 	movi	r2,-2
  80c920:	2884703a 	and	r2,r5,r2
  80c924:	1185883a 	add	r2,r2,r6
  80c928:	10c00117 	ldw	r3,4(r2)
  80c92c:	18c0004c 	andi	r3,r3,1
  80c930:	1807003a 	cmpeq	r3,r3,zero
  80c934:	1800a326 	beq	r3,zero,80cbc4 <_realloc_r+0x3d0>
  80c938:	2908703a 	and	r4,r5,r4
  80c93c:	9929883a 	add	r20,r19,r4
  80c940:	a1c0a30e 	bge	r20,r7,80cbd0 <_realloc_r+0x3dc>
  80c944:	4080004c 	andi	r2,r8,1
  80c948:	1000551e 	bne	r2,zero,80caa0 <_realloc_r+0x2ac>
  80c94c:	80800017 	ldw	r2,0(r16)
  80c950:	80afc83a 	sub	r23,r16,r2
  80c954:	b8c00117 	ldw	r3,4(r23)
  80c958:	00bfff04 	movi	r2,-4
  80c95c:	1884703a 	and	r2,r3,r2
  80c960:	30002e26 	beq	r6,zero,80ca1c <_realloc_r+0x228>
  80c964:	3240b926 	beq	r6,r9,80cc4c <_realloc_r+0x458>
  80c968:	98a9883a 	add	r20,r19,r2
  80c96c:	2509883a 	add	r4,r4,r20
  80c970:	d9000015 	stw	r4,0(sp)
  80c974:	21c02a16 	blt	r4,r7,80ca20 <_realloc_r+0x22c>
  80c978:	30800317 	ldw	r2,12(r6)
  80c97c:	30c00217 	ldw	r3,8(r6)
  80c980:	01400904 	movi	r5,36
  80c984:	99bfff04 	addi	r6,r19,-4
  80c988:	18800315 	stw	r2,12(r3)
  80c98c:	10c00215 	stw	r3,8(r2)
  80c990:	b9000317 	ldw	r4,12(r23)
  80c994:	b8800217 	ldw	r2,8(r23)
  80c998:	b82b883a 	mov	r21,r23
  80c99c:	bc000204 	addi	r16,r23,8
  80c9a0:	20800215 	stw	r2,8(r4)
  80c9a4:	11000315 	stw	r4,12(r2)
  80c9a8:	2980e436 	bltu	r5,r6,80cd3c <_realloc_r+0x548>
  80c9ac:	008004c4 	movi	r2,19
  80c9b0:	9009883a 	mov	r4,r18
  80c9b4:	8011883a 	mov	r8,r16
  80c9b8:	11800f2e 	bgeu	r2,r6,80c9f8 <_realloc_r+0x204>
  80c9bc:	90800017 	ldw	r2,0(r18)
  80c9c0:	ba000404 	addi	r8,r23,16
  80c9c4:	91000204 	addi	r4,r18,8
  80c9c8:	b8800215 	stw	r2,8(r23)
  80c9cc:	90c00117 	ldw	r3,4(r18)
  80c9d0:	008006c4 	movi	r2,27
  80c9d4:	b8c00315 	stw	r3,12(r23)
  80c9d8:	1180072e 	bgeu	r2,r6,80c9f8 <_realloc_r+0x204>
  80c9dc:	90c00217 	ldw	r3,8(r18)
  80c9e0:	ba000604 	addi	r8,r23,24
  80c9e4:	91000404 	addi	r4,r18,16
  80c9e8:	b8c00415 	stw	r3,16(r23)
  80c9ec:	90800317 	ldw	r2,12(r18)
  80c9f0:	b8800515 	stw	r2,20(r23)
  80c9f4:	3140e726 	beq	r6,r5,80cd94 <_realloc_r+0x5a0>
  80c9f8:	20800017 	ldw	r2,0(r4)
  80c9fc:	dd000017 	ldw	r20,0(sp)
  80ca00:	b80f883a 	mov	r7,r23
  80ca04:	40800015 	stw	r2,0(r8)
  80ca08:	20c00117 	ldw	r3,4(r4)
  80ca0c:	40c00115 	stw	r3,4(r8)
  80ca10:	20800217 	ldw	r2,8(r4)
  80ca14:	40800215 	stw	r2,8(r8)
  80ca18:	003f9706 	br	80c878 <_realloc_r+0x84>
  80ca1c:	98a9883a 	add	r20,r19,r2
  80ca20:	a1c01f16 	blt	r20,r7,80caa0 <_realloc_r+0x2ac>
  80ca24:	b8c00317 	ldw	r3,12(r23)
  80ca28:	b8800217 	ldw	r2,8(r23)
  80ca2c:	99bfff04 	addi	r6,r19,-4
  80ca30:	01400904 	movi	r5,36
  80ca34:	b82b883a 	mov	r21,r23
  80ca38:	18800215 	stw	r2,8(r3)
  80ca3c:	10c00315 	stw	r3,12(r2)
  80ca40:	bc000204 	addi	r16,r23,8
  80ca44:	2980c336 	bltu	r5,r6,80cd54 <_realloc_r+0x560>
  80ca48:	008004c4 	movi	r2,19
  80ca4c:	9009883a 	mov	r4,r18
  80ca50:	8011883a 	mov	r8,r16
  80ca54:	11800f2e 	bgeu	r2,r6,80ca94 <_realloc_r+0x2a0>
  80ca58:	90800017 	ldw	r2,0(r18)
  80ca5c:	ba000404 	addi	r8,r23,16
  80ca60:	91000204 	addi	r4,r18,8
  80ca64:	b8800215 	stw	r2,8(r23)
  80ca68:	90c00117 	ldw	r3,4(r18)
  80ca6c:	008006c4 	movi	r2,27
  80ca70:	b8c00315 	stw	r3,12(r23)
  80ca74:	1180072e 	bgeu	r2,r6,80ca94 <_realloc_r+0x2a0>
  80ca78:	90c00217 	ldw	r3,8(r18)
  80ca7c:	ba000604 	addi	r8,r23,24
  80ca80:	91000404 	addi	r4,r18,16
  80ca84:	b8c00415 	stw	r3,16(r23)
  80ca88:	90800317 	ldw	r2,12(r18)
  80ca8c:	b8800515 	stw	r2,20(r23)
  80ca90:	3140c726 	beq	r6,r5,80cdb0 <_realloc_r+0x5bc>
  80ca94:	20800017 	ldw	r2,0(r4)
  80ca98:	b80f883a 	mov	r7,r23
  80ca9c:	003fd906 	br	80ca04 <_realloc_r+0x210>
  80caa0:	880b883a 	mov	r5,r17
  80caa4:	b009883a 	mov	r4,r22
  80caa8:	08047540 	call	804754 <_malloc_r>
  80caac:	1023883a 	mov	r17,r2
  80cab0:	10002526 	beq	r2,zero,80cb48 <_realloc_r+0x354>
  80cab4:	80800117 	ldw	r2,4(r16)
  80cab8:	00ffff84 	movi	r3,-2
  80cabc:	893ffe04 	addi	r4,r17,-8
  80cac0:	10c4703a 	and	r2,r2,r3
  80cac4:	8085883a 	add	r2,r16,r2
  80cac8:	20809526 	beq	r4,r2,80cd20 <_realloc_r+0x52c>
  80cacc:	99bfff04 	addi	r6,r19,-4
  80cad0:	01c00904 	movi	r7,36
  80cad4:	39804536 	bltu	r7,r6,80cbec <_realloc_r+0x3f8>
  80cad8:	008004c4 	movi	r2,19
  80cadc:	9009883a 	mov	r4,r18
  80cae0:	880b883a 	mov	r5,r17
  80cae4:	11800f2e 	bgeu	r2,r6,80cb24 <_realloc_r+0x330>
  80cae8:	90800017 	ldw	r2,0(r18)
  80caec:	89400204 	addi	r5,r17,8
  80caf0:	91000204 	addi	r4,r18,8
  80caf4:	88800015 	stw	r2,0(r17)
  80caf8:	90c00117 	ldw	r3,4(r18)
  80cafc:	008006c4 	movi	r2,27
  80cb00:	88c00115 	stw	r3,4(r17)
  80cb04:	1180072e 	bgeu	r2,r6,80cb24 <_realloc_r+0x330>
  80cb08:	90c00217 	ldw	r3,8(r18)
  80cb0c:	89400404 	addi	r5,r17,16
  80cb10:	91000404 	addi	r4,r18,16
  80cb14:	88c00215 	stw	r3,8(r17)
  80cb18:	90800317 	ldw	r2,12(r18)
  80cb1c:	88800315 	stw	r2,12(r17)
  80cb20:	31c09126 	beq	r6,r7,80cd68 <_realloc_r+0x574>
  80cb24:	20800017 	ldw	r2,0(r4)
  80cb28:	28800015 	stw	r2,0(r5)
  80cb2c:	20c00117 	ldw	r3,4(r4)
  80cb30:	28c00115 	stw	r3,4(r5)
  80cb34:	20800217 	ldw	r2,8(r4)
  80cb38:	28800215 	stw	r2,8(r5)
  80cb3c:	900b883a 	mov	r5,r18
  80cb40:	b009883a 	mov	r4,r22
  80cb44:	0803ad80 	call	803ad8 <_free_r>
  80cb48:	b009883a 	mov	r4,r22
  80cb4c:	08123f80 	call	8123f8 <__malloc_unlock>
  80cb50:	003f5e06 	br	80c8cc <_realloc_r+0xd8>
  80cb54:	300b883a 	mov	r5,r6
  80cb58:	dfc00b17 	ldw	ra,44(sp)
  80cb5c:	df000a17 	ldw	fp,40(sp)
  80cb60:	ddc00917 	ldw	r23,36(sp)
  80cb64:	dd800817 	ldw	r22,32(sp)
  80cb68:	dd400717 	ldw	r21,28(sp)
  80cb6c:	dd000617 	ldw	r20,24(sp)
  80cb70:	dcc00517 	ldw	r19,20(sp)
  80cb74:	dc800417 	ldw	r18,16(sp)
  80cb78:	dc400317 	ldw	r17,12(sp)
  80cb7c:	dc000217 	ldw	r16,8(sp)
  80cb80:	dec00c04 	addi	sp,sp,48
  80cb84:	08047541 	jmpi	804754 <_malloc_r>
  80cb88:	38800117 	ldw	r2,4(r7)
  80cb8c:	e54b883a 	add	r5,fp,r21
  80cb90:	31000054 	ori	r4,r6,1
  80cb94:	1080004c 	andi	r2,r2,1
  80cb98:	1704b03a 	or	r2,r2,fp
  80cb9c:	38800115 	stw	r2,4(r7)
  80cba0:	29000115 	stw	r4,4(r5)
  80cba4:	2987883a 	add	r3,r5,r6
  80cba8:	18800117 	ldw	r2,4(r3)
  80cbac:	29400204 	addi	r5,r5,8
  80cbb0:	b009883a 	mov	r4,r22
  80cbb4:	10800054 	ori	r2,r2,1
  80cbb8:	18800115 	stw	r2,4(r3)
  80cbbc:	0803ad80 	call	803ad8 <_free_r>
  80cbc0:	003f3806 	br	80c8a4 <_realloc_r+0xb0>
  80cbc4:	000d883a 	mov	r6,zero
  80cbc8:	0009883a 	mov	r4,zero
  80cbcc:	003f5d06 	br	80c944 <_realloc_r+0x150>
  80cbd0:	30c00217 	ldw	r3,8(r6)
  80cbd4:	30800317 	ldw	r2,12(r6)
  80cbd8:	800f883a 	mov	r7,r16
  80cbdc:	84000204 	addi	r16,r16,8
  80cbe0:	10c00215 	stw	r3,8(r2)
  80cbe4:	18800315 	stw	r2,12(r3)
  80cbe8:	003f2306 	br	80c878 <_realloc_r+0x84>
  80cbec:	8809883a 	mov	r4,r17
  80cbf0:	900b883a 	mov	r5,r18
  80cbf4:	080b6100 	call	80b610 <memmove>
  80cbf8:	003fd006 	br	80cb3c <_realloc_r+0x348>
  80cbfc:	30800117 	ldw	r2,4(r6)
  80cc00:	e0c00404 	addi	r3,fp,16
  80cc04:	1108703a 	and	r4,r2,r4
  80cc08:	9905883a 	add	r2,r19,r4
  80cc0c:	10ff4d16 	blt	r2,r3,80c944 <_realloc_r+0x150>
  80cc10:	1705c83a 	sub	r2,r2,fp
  80cc14:	870b883a 	add	r5,r16,fp
  80cc18:	10800054 	ori	r2,r2,1
  80cc1c:	28800115 	stw	r2,4(r5)
  80cc20:	80c00117 	ldw	r3,4(r16)
  80cc24:	00802074 	movhi	r2,129
  80cc28:	10963104 	addi	r2,r2,22724
  80cc2c:	b009883a 	mov	r4,r22
  80cc30:	18c0004c 	andi	r3,r3,1
  80cc34:	e0c6b03a 	or	r3,fp,r3
  80cc38:	11400215 	stw	r5,8(r2)
  80cc3c:	80c00115 	stw	r3,4(r16)
  80cc40:	08123f80 	call	8123f8 <__malloc_unlock>
  80cc44:	84400204 	addi	r17,r16,8
  80cc48:	003f2006 	br	80c8cc <_realloc_r+0xd8>
  80cc4c:	98a9883a 	add	r20,r19,r2
  80cc50:	2509883a 	add	r4,r4,r20
  80cc54:	e0800404 	addi	r2,fp,16
  80cc58:	d9000115 	stw	r4,4(sp)
  80cc5c:	20bf7016 	blt	r4,r2,80ca20 <_realloc_r+0x22c>
  80cc60:	b8c00317 	ldw	r3,12(r23)
  80cc64:	b8800217 	ldw	r2,8(r23)
  80cc68:	99bfff04 	addi	r6,r19,-4
  80cc6c:	01400904 	movi	r5,36
  80cc70:	18800215 	stw	r2,8(r3)
  80cc74:	10c00315 	stw	r3,12(r2)
  80cc78:	bc400204 	addi	r17,r23,8
  80cc7c:	29804136 	bltu	r5,r6,80cd84 <_realloc_r+0x590>
  80cc80:	008004c4 	movi	r2,19
  80cc84:	9009883a 	mov	r4,r18
  80cc88:	880f883a 	mov	r7,r17
  80cc8c:	11800f2e 	bgeu	r2,r6,80cccc <_realloc_r+0x4d8>
  80cc90:	90800017 	ldw	r2,0(r18)
  80cc94:	b9c00404 	addi	r7,r23,16
  80cc98:	91000204 	addi	r4,r18,8
  80cc9c:	b8800215 	stw	r2,8(r23)
  80cca0:	90c00117 	ldw	r3,4(r18)
  80cca4:	008006c4 	movi	r2,27
  80cca8:	b8c00315 	stw	r3,12(r23)
  80ccac:	1180072e 	bgeu	r2,r6,80cccc <_realloc_r+0x4d8>
  80ccb0:	90c00217 	ldw	r3,8(r18)
  80ccb4:	b9c00604 	addi	r7,r23,24
  80ccb8:	91000404 	addi	r4,r18,16
  80ccbc:	b8c00415 	stw	r3,16(r23)
  80ccc0:	90800317 	ldw	r2,12(r18)
  80ccc4:	b8800515 	stw	r2,20(r23)
  80ccc8:	31404026 	beq	r6,r5,80cdcc <_realloc_r+0x5d8>
  80cccc:	20800017 	ldw	r2,0(r4)
  80ccd0:	38800015 	stw	r2,0(r7)
  80ccd4:	20c00117 	ldw	r3,4(r4)
  80ccd8:	38c00115 	stw	r3,4(r7)
  80ccdc:	20800217 	ldw	r2,8(r4)
  80cce0:	38800215 	stw	r2,8(r7)
  80cce4:	d8c00117 	ldw	r3,4(sp)
  80cce8:	bf0b883a 	add	r5,r23,fp
  80ccec:	b009883a 	mov	r4,r22
  80ccf0:	1f05c83a 	sub	r2,r3,fp
  80ccf4:	10800054 	ori	r2,r2,1
  80ccf8:	28800115 	stw	r2,4(r5)
  80ccfc:	b8c00117 	ldw	r3,4(r23)
  80cd00:	00802074 	movhi	r2,129
  80cd04:	10963104 	addi	r2,r2,22724
  80cd08:	11400215 	stw	r5,8(r2)
  80cd0c:	18c0004c 	andi	r3,r3,1
  80cd10:	e0c6b03a 	or	r3,fp,r3
  80cd14:	b8c00115 	stw	r3,4(r23)
  80cd18:	08123f80 	call	8123f8 <__malloc_unlock>
  80cd1c:	003eeb06 	br	80c8cc <_realloc_r+0xd8>
  80cd20:	20800117 	ldw	r2,4(r4)
  80cd24:	00ffff04 	movi	r3,-4
  80cd28:	800f883a 	mov	r7,r16
  80cd2c:	10c4703a 	and	r2,r2,r3
  80cd30:	98a9883a 	add	r20,r19,r2
  80cd34:	84000204 	addi	r16,r16,8
  80cd38:	003ecf06 	br	80c878 <_realloc_r+0x84>
  80cd3c:	900b883a 	mov	r5,r18
  80cd40:	8009883a 	mov	r4,r16
  80cd44:	080b6100 	call	80b610 <memmove>
  80cd48:	dd000017 	ldw	r20,0(sp)
  80cd4c:	b80f883a 	mov	r7,r23
  80cd50:	003ec906 	br	80c878 <_realloc_r+0x84>
  80cd54:	900b883a 	mov	r5,r18
  80cd58:	8009883a 	mov	r4,r16
  80cd5c:	080b6100 	call	80b610 <memmove>
  80cd60:	b80f883a 	mov	r7,r23
  80cd64:	003ec406 	br	80c878 <_realloc_r+0x84>
  80cd68:	90c00417 	ldw	r3,16(r18)
  80cd6c:	89400604 	addi	r5,r17,24
  80cd70:	91000604 	addi	r4,r18,24
  80cd74:	88c00415 	stw	r3,16(r17)
  80cd78:	90800517 	ldw	r2,20(r18)
  80cd7c:	88800515 	stw	r2,20(r17)
  80cd80:	003f6806 	br	80cb24 <_realloc_r+0x330>
  80cd84:	900b883a 	mov	r5,r18
  80cd88:	8809883a 	mov	r4,r17
  80cd8c:	080b6100 	call	80b610 <memmove>
  80cd90:	003fd406 	br	80cce4 <_realloc_r+0x4f0>
  80cd94:	90c00417 	ldw	r3,16(r18)
  80cd98:	91000604 	addi	r4,r18,24
  80cd9c:	ba000804 	addi	r8,r23,32
  80cda0:	b8c00615 	stw	r3,24(r23)
  80cda4:	90800517 	ldw	r2,20(r18)
  80cda8:	b8800715 	stw	r2,28(r23)
  80cdac:	003f1206 	br	80c9f8 <_realloc_r+0x204>
  80cdb0:	90c00417 	ldw	r3,16(r18)
  80cdb4:	91000604 	addi	r4,r18,24
  80cdb8:	ba000804 	addi	r8,r23,32
  80cdbc:	b8c00615 	stw	r3,24(r23)
  80cdc0:	90800517 	ldw	r2,20(r18)
  80cdc4:	b8800715 	stw	r2,28(r23)
  80cdc8:	003f3206 	br	80ca94 <_realloc_r+0x2a0>
  80cdcc:	90c00417 	ldw	r3,16(r18)
  80cdd0:	91000604 	addi	r4,r18,24
  80cdd4:	b9c00804 	addi	r7,r23,32
  80cdd8:	b8c00615 	stw	r3,24(r23)
  80cddc:	90800517 	ldw	r2,20(r18)
  80cde0:	b8800715 	stw	r2,28(r23)
  80cde4:	003fb906 	br	80cccc <_realloc_r+0x4d8>

0080cde8 <__isinfd>:
  80cde8:	200d883a 	mov	r6,r4
  80cdec:	0109c83a 	sub	r4,zero,r4
  80cdf0:	2188b03a 	or	r4,r4,r6
  80cdf4:	2008d7fa 	srli	r4,r4,31
  80cdf8:	00a00034 	movhi	r2,32768
  80cdfc:	10bfffc4 	addi	r2,r2,-1
  80ce00:	1144703a 	and	r2,r2,r5
  80ce04:	2088b03a 	or	r4,r4,r2
  80ce08:	009ffc34 	movhi	r2,32752
  80ce0c:	1105c83a 	sub	r2,r2,r4
  80ce10:	0087c83a 	sub	r3,zero,r2
  80ce14:	10c4b03a 	or	r2,r2,r3
  80ce18:	1004d7fa 	srli	r2,r2,31
  80ce1c:	00c00044 	movi	r3,1
  80ce20:	1885c83a 	sub	r2,r3,r2
  80ce24:	f800283a 	ret

0080ce28 <__isnand>:
  80ce28:	200d883a 	mov	r6,r4
  80ce2c:	0109c83a 	sub	r4,zero,r4
  80ce30:	2188b03a 	or	r4,r4,r6
  80ce34:	2008d7fa 	srli	r4,r4,31
  80ce38:	00a00034 	movhi	r2,32768
  80ce3c:	10bfffc4 	addi	r2,r2,-1
  80ce40:	1144703a 	and	r2,r2,r5
  80ce44:	2088b03a 	or	r4,r4,r2
  80ce48:	009ffc34 	movhi	r2,32752
  80ce4c:	1105c83a 	sub	r2,r2,r4
  80ce50:	1004d7fa 	srli	r2,r2,31
  80ce54:	f800283a 	ret

0080ce58 <__sccl>:
  80ce58:	28c00003 	ldbu	r3,0(r5)
  80ce5c:	00801784 	movi	r2,94
  80ce60:	2a000044 	addi	r8,r5,1
  80ce64:	18802526 	beq	r3,r2,80cefc <__sccl+0xa4>
  80ce68:	180f883a 	mov	r7,r3
  80ce6c:	0013883a 	mov	r9,zero
  80ce70:	000d883a 	mov	r6,zero
  80ce74:	0007883a 	mov	r3,zero
  80ce78:	01404004 	movi	r5,256
  80ce7c:	1905883a 	add	r2,r3,r4
  80ce80:	18c00044 	addi	r3,r3,1
  80ce84:	11800005 	stb	r6,0(r2)
  80ce88:	197ffc1e 	bne	r3,r5,80ce7c <__sccl+0x24>
  80ce8c:	38000c26 	beq	r7,zero,80cec0 <__sccl+0x68>
  80ce90:	00800044 	movi	r2,1
  80ce94:	124dc83a 	sub	r6,r2,r9
  80ce98:	3905883a 	add	r2,r7,r4
  80ce9c:	11800005 	stb	r6,0(r2)
  80cea0:	41400044 	addi	r5,r8,1
  80cea4:	02400b44 	movi	r9,45
  80cea8:	02801744 	movi	r10,93
  80ceac:	28bfffc3 	ldbu	r2,-1(r5)
  80ceb0:	2811883a 	mov	r8,r5
  80ceb4:	12400726 	beq	r2,r9,80ced4 <__sccl+0x7c>
  80ceb8:	12800226 	beq	r2,r10,80cec4 <__sccl+0x6c>
  80cebc:	1000031e 	bne	r2,zero,80cecc <__sccl+0x74>
  80cec0:	423fffc4 	addi	r8,r8,-1
  80cec4:	4005883a 	mov	r2,r8
  80cec8:	f800283a 	ret
  80cecc:	100f883a 	mov	r7,r2
  80ced0:	003ff106 	br	80ce98 <__sccl+0x40>
  80ced4:	28c00003 	ldbu	r3,0(r5)
  80ced8:	1a800d26 	beq	r3,r10,80cf10 <__sccl+0xb8>
  80cedc:	19c00c16 	blt	r3,r7,80cf10 <__sccl+0xb8>
  80cee0:	21c5883a 	add	r2,r4,r7
  80cee4:	39c00044 	addi	r7,r7,1
  80cee8:	11800045 	stb	r6,1(r2)
  80ceec:	10800044 	addi	r2,r2,1
  80cef0:	38fffc16 	blt	r7,r3,80cee4 <__sccl+0x8c>
  80cef4:	29400084 	addi	r5,r5,2
  80cef8:	003fec06 	br	80ceac <__sccl+0x54>
  80cefc:	29c00043 	ldbu	r7,1(r5)
  80cf00:	02400044 	movi	r9,1
  80cf04:	2a000084 	addi	r8,r5,2
  80cf08:	480d883a 	mov	r6,r9
  80cf0c:	003fd906 	br	80ce74 <__sccl+0x1c>
  80cf10:	01c00b44 	movi	r7,45
  80cf14:	003fe006 	br	80ce98 <__sccl+0x40>

0080cf18 <nanf>:
  80cf18:	009ff034 	movhi	r2,32704
  80cf1c:	f800283a 	ret

0080cf20 <sprintf>:
  80cf20:	deffe504 	addi	sp,sp,-108
  80cf24:	2013883a 	mov	r9,r4
  80cf28:	dfc01815 	stw	ra,96(sp)
  80cf2c:	d9801915 	stw	r6,100(sp)
  80cf30:	d9c01a15 	stw	r7,104(sp)
  80cf34:	d8801904 	addi	r2,sp,100
  80cf38:	d8800015 	stw	r2,0(sp)
  80cf3c:	00802074 	movhi	r2,129
  80cf40:	109bcd04 	addi	r2,r2,28468
  80cf44:	11000017 	ldw	r4,0(r2)
  80cf48:	d9c00017 	ldw	r7,0(sp)
  80cf4c:	00808204 	movi	r2,520
  80cf50:	00e00034 	movhi	r3,32768
  80cf54:	18ffffc4 	addi	r3,r3,-1
  80cf58:	280d883a 	mov	r6,r5
  80cf5c:	d880040d 	sth	r2,16(sp)
  80cf60:	d9400104 	addi	r5,sp,4
  80cf64:	00bfffc4 	movi	r2,-1
  80cf68:	d8c00615 	stw	r3,24(sp)
  80cf6c:	d8c00315 	stw	r3,12(sp)
  80cf70:	da400515 	stw	r9,20(sp)
  80cf74:	d880048d 	sth	r2,18(sp)
  80cf78:	da400115 	stw	r9,4(sp)
  80cf7c:	0805bbc0 	call	805bbc <___vfprintf_internal_r>
  80cf80:	d8c00117 	ldw	r3,4(sp)
  80cf84:	18000005 	stb	zero,0(r3)
  80cf88:	dfc01817 	ldw	ra,96(sp)
  80cf8c:	dec01b04 	addi	sp,sp,108
  80cf90:	f800283a 	ret

0080cf94 <_sprintf_r>:
  80cf94:	deffe604 	addi	sp,sp,-104
  80cf98:	2813883a 	mov	r9,r5
  80cf9c:	dfc01815 	stw	ra,96(sp)
  80cfa0:	d9c01915 	stw	r7,100(sp)
  80cfa4:	d8801904 	addi	r2,sp,100
  80cfa8:	d8800015 	stw	r2,0(sp)
  80cfac:	100f883a 	mov	r7,r2
  80cfb0:	00808204 	movi	r2,520
  80cfb4:	00e00034 	movhi	r3,32768
  80cfb8:	18ffffc4 	addi	r3,r3,-1
  80cfbc:	d880040d 	sth	r2,16(sp)
  80cfc0:	d9400104 	addi	r5,sp,4
  80cfc4:	00bfffc4 	movi	r2,-1
  80cfc8:	d8c00615 	stw	r3,24(sp)
  80cfcc:	d8c00315 	stw	r3,12(sp)
  80cfd0:	da400515 	stw	r9,20(sp)
  80cfd4:	d880048d 	sth	r2,18(sp)
  80cfd8:	da400115 	stw	r9,4(sp)
  80cfdc:	0805bbc0 	call	805bbc <___vfprintf_internal_r>
  80cfe0:	d8c00117 	ldw	r3,4(sp)
  80cfe4:	18000005 	stb	zero,0(r3)
  80cfe8:	dfc01817 	ldw	ra,96(sp)
  80cfec:	dec01a04 	addi	sp,sp,104
  80cff0:	f800283a 	ret

0080cff4 <strcmp>:
  80cff4:	2144b03a 	or	r2,r4,r5
  80cff8:	108000cc 	andi	r2,r2,3
  80cffc:	10001d1e 	bne	r2,zero,80d074 <strcmp+0x80>
  80d000:	200f883a 	mov	r7,r4
  80d004:	28800017 	ldw	r2,0(r5)
  80d008:	21000017 	ldw	r4,0(r4)
  80d00c:	280d883a 	mov	r6,r5
  80d010:	2080161e 	bne	r4,r2,80d06c <strcmp+0x78>
  80d014:	023fbff4 	movhi	r8,65279
  80d018:	423fbfc4 	addi	r8,r8,-257
  80d01c:	2207883a 	add	r3,r4,r8
  80d020:	01602074 	movhi	r5,32897
  80d024:	29602004 	addi	r5,r5,-32640
  80d028:	1946703a 	and	r3,r3,r5
  80d02c:	0104303a 	nor	r2,zero,r4
  80d030:	10c4703a 	and	r2,r2,r3
  80d034:	10001c1e 	bne	r2,zero,80d0a8 <strcmp+0xb4>
  80d038:	4013883a 	mov	r9,r8
  80d03c:	2811883a 	mov	r8,r5
  80d040:	00000106 	br	80d048 <strcmp+0x54>
  80d044:	1800181e 	bne	r3,zero,80d0a8 <strcmp+0xb4>
  80d048:	39c00104 	addi	r7,r7,4
  80d04c:	39000017 	ldw	r4,0(r7)
  80d050:	31800104 	addi	r6,r6,4
  80d054:	31400017 	ldw	r5,0(r6)
  80d058:	2245883a 	add	r2,r4,r9
  80d05c:	1204703a 	and	r2,r2,r8
  80d060:	0106303a 	nor	r3,zero,r4
  80d064:	1886703a 	and	r3,r3,r2
  80d068:	217ff626 	beq	r4,r5,80d044 <strcmp+0x50>
  80d06c:	3809883a 	mov	r4,r7
  80d070:	300b883a 	mov	r5,r6
  80d074:	20c00007 	ldb	r3,0(r4)
  80d078:	1800051e 	bne	r3,zero,80d090 <strcmp+0x9c>
  80d07c:	00000606 	br	80d098 <strcmp+0xa4>
  80d080:	21000044 	addi	r4,r4,1
  80d084:	20c00007 	ldb	r3,0(r4)
  80d088:	29400044 	addi	r5,r5,1
  80d08c:	18000226 	beq	r3,zero,80d098 <strcmp+0xa4>
  80d090:	28800007 	ldb	r2,0(r5)
  80d094:	18bffa26 	beq	r3,r2,80d080 <strcmp+0x8c>
  80d098:	20c00003 	ldbu	r3,0(r4)
  80d09c:	28800003 	ldbu	r2,0(r5)
  80d0a0:	1885c83a 	sub	r2,r3,r2
  80d0a4:	f800283a 	ret
  80d0a8:	0005883a 	mov	r2,zero
  80d0ac:	f800283a 	ret

0080d0b0 <match>:
  80d0b0:	21800017 	ldw	r6,0(r4)
  80d0b4:	01c01004 	movi	r7,64
  80d0b8:	02001684 	movi	r8,90
  80d0bc:	28800007 	ldb	r2,0(r5)
  80d0c0:	29400044 	addi	r5,r5,1
  80d0c4:	10000826 	beq	r2,zero,80d0e8 <match+0x38>
  80d0c8:	31800044 	addi	r6,r6,1
  80d0cc:	30c00007 	ldb	r3,0(r6)
  80d0d0:	38c0020e 	bge	r7,r3,80d0dc <match+0x2c>
  80d0d4:	40c00116 	blt	r8,r3,80d0dc <match+0x2c>
  80d0d8:	18c00804 	addi	r3,r3,32
  80d0dc:	18bff726 	beq	r3,r2,80d0bc <match+0xc>
  80d0e0:	0005883a 	mov	r2,zero
  80d0e4:	f800283a 	ret
  80d0e8:	30800044 	addi	r2,r6,1
  80d0ec:	20800015 	stw	r2,0(r4)
  80d0f0:	00800044 	movi	r2,1
  80d0f4:	f800283a 	ret

0080d0f8 <_strtod_r>:
  80d0f8:	deffd504 	addi	sp,sp,-172
  80d0fc:	df002915 	stw	fp,164(sp)
  80d100:	dd402615 	stw	r21,152(sp)
  80d104:	dd002515 	stw	r20,148(sp)
  80d108:	dfc02a15 	stw	ra,168(sp)
  80d10c:	ddc02815 	stw	r23,160(sp)
  80d110:	dd802715 	stw	r22,156(sp)
  80d114:	dcc02415 	stw	r19,144(sp)
  80d118:	dc802315 	stw	r18,140(sp)
  80d11c:	dc402215 	stw	r17,136(sp)
  80d120:	dc002115 	stw	r16,132(sp)
  80d124:	2829883a 	mov	r20,r5
  80d128:	202b883a 	mov	r21,r4
  80d12c:	d9801d15 	stw	r6,116(sp)
  80d130:	d8000915 	stw	zero,36(sp)
  80d134:	d8000a15 	stw	zero,40(sp)
  80d138:	d9400415 	stw	r5,16(sp)
  80d13c:	df000904 	addi	fp,sp,36
  80d140:	dc000417 	ldw	r16,16(sp)
  80d144:	00800b44 	movi	r2,45
  80d148:	80c00003 	ldbu	r3,0(r16)
  80d14c:	10c03536 	bltu	r2,r3,80d224 <_strtod_r+0x12c>
  80d150:	18c5883a 	add	r2,r3,r3
  80d154:	1085883a 	add	r2,r2,r2
  80d158:	00c02074 	movhi	r3,129
  80d15c:	18f45b04 	addi	r3,r3,-11924
  80d160:	10c5883a 	add	r2,r2,r3
  80d164:	11000017 	ldw	r4,0(r2)
  80d168:	2000683a 	jmp	r4
  80d16c:	0080d3a4 	muli	r2,zero,846
  80d170:	0080d224 	muli	r2,zero,840
  80d174:	0080d224 	muli	r2,zero,840
  80d178:	0080d224 	muli	r2,zero,840
  80d17c:	0080d224 	muli	r2,zero,840
  80d180:	0080d224 	muli	r2,zero,840
  80d184:	0080d224 	muli	r2,zero,840
  80d188:	0080d224 	muli	r2,zero,840
  80d18c:	0080d224 	muli	r2,zero,840
  80d190:	0080d6ec 	andhi	r2,zero,859
  80d194:	0080d6ec 	andhi	r2,zero,859
  80d198:	0080d6ec 	andhi	r2,zero,859
  80d19c:	0080d6ec 	andhi	r2,zero,859
  80d1a0:	0080d6ec 	andhi	r2,zero,859
  80d1a4:	0080d224 	muli	r2,zero,840
  80d1a8:	0080d224 	muli	r2,zero,840
  80d1ac:	0080d224 	muli	r2,zero,840
  80d1b0:	0080d224 	muli	r2,zero,840
  80d1b4:	0080d224 	muli	r2,zero,840
  80d1b8:	0080d224 	muli	r2,zero,840
  80d1bc:	0080d224 	muli	r2,zero,840
  80d1c0:	0080d224 	muli	r2,zero,840
  80d1c4:	0080d224 	muli	r2,zero,840
  80d1c8:	0080d224 	muli	r2,zero,840
  80d1cc:	0080d224 	muli	r2,zero,840
  80d1d0:	0080d224 	muli	r2,zero,840
  80d1d4:	0080d224 	muli	r2,zero,840
  80d1d8:	0080d224 	muli	r2,zero,840
  80d1dc:	0080d224 	muli	r2,zero,840
  80d1e0:	0080d224 	muli	r2,zero,840
  80d1e4:	0080d224 	muli	r2,zero,840
  80d1e8:	0080d224 	muli	r2,zero,840
  80d1ec:	0080d6ec 	andhi	r2,zero,859
  80d1f0:	0080d224 	muli	r2,zero,840
  80d1f4:	0080d224 	muli	r2,zero,840
  80d1f8:	0080d224 	muli	r2,zero,840
  80d1fc:	0080d224 	muli	r2,zero,840
  80d200:	0080d224 	muli	r2,zero,840
  80d204:	0080d224 	muli	r2,zero,840
  80d208:	0080d224 	muli	r2,zero,840
  80d20c:	0080d224 	muli	r2,zero,840
  80d210:	0080d224 	muli	r2,zero,840
  80d214:	0080d224 	muli	r2,zero,840
  80d218:	0080d6cc 	andi	r2,zero,859
  80d21c:	0080d224 	muli	r2,zero,840
  80d220:	0080d6f8 	rdprs	r2,zero,859
  80d224:	d8001515 	stw	zero,84(sp)
  80d228:	80c00007 	ldb	r3,0(r16)
  80d22c:	00800c04 	movi	r2,48
  80d230:	1880e926 	beq	r3,r2,80d5d8 <_strtod_r+0x4e0>
  80d234:	d8001615 	stw	zero,88(sp)
  80d238:	dc001415 	stw	r16,80(sp)
  80d23c:	84400007 	ldb	r17,0(r16)
  80d240:	00800bc4 	movi	r2,47
  80d244:	1443760e 	bge	r2,r17,80e020 <_strtod_r+0xf28>
  80d248:	00800e44 	movi	r2,57
  80d24c:	14437416 	blt	r2,r17,80e020 <_strtod_r+0xf28>
  80d250:	8025883a 	mov	r18,r16
  80d254:	0027883a 	mov	r19,zero
  80d258:	d8001215 	stw	zero,72(sp)
  80d25c:	d8001115 	stw	zero,68(sp)
  80d260:	00000f06 	br	80d2a0 <_strtod_r+0x1a8>
  80d264:	d9001217 	ldw	r4,72(sp)
  80d268:	01400284 	movi	r5,10
  80d26c:	08026a00 	call	8026a0 <__mulsi3>
  80d270:	1445883a 	add	r2,r2,r17
  80d274:	10bff404 	addi	r2,r2,-48
  80d278:	d8801215 	stw	r2,72(sp)
  80d27c:	94000044 	addi	r16,r18,1
  80d280:	dc000415 	stw	r16,16(sp)
  80d284:	84400007 	ldb	r17,0(r16)
  80d288:	00800bc4 	movi	r2,47
  80d28c:	9cc00044 	addi	r19,r19,1
  80d290:	8025883a 	mov	r18,r16
  80d294:	1440130e 	bge	r2,r17,80d2e4 <_strtod_r+0x1ec>
  80d298:	00800e44 	movi	r2,57
  80d29c:	14401116 	blt	r2,r17,80d2e4 <_strtod_r+0x1ec>
  80d2a0:	00800204 	movi	r2,8
  80d2a4:	14ffef0e 	bge	r2,r19,80d264 <_strtod_r+0x16c>
  80d2a8:	008003c4 	movi	r2,15
  80d2ac:	14fff316 	blt	r2,r19,80d27c <_strtod_r+0x184>
  80d2b0:	d9001117 	ldw	r4,68(sp)
  80d2b4:	01400284 	movi	r5,10
  80d2b8:	94000044 	addi	r16,r18,1
  80d2bc:	08026a00 	call	8026a0 <__mulsi3>
  80d2c0:	1445883a 	add	r2,r2,r17
  80d2c4:	10bff404 	addi	r2,r2,-48
  80d2c8:	d8801115 	stw	r2,68(sp)
  80d2cc:	dc000415 	stw	r16,16(sp)
  80d2d0:	84400007 	ldb	r17,0(r16)
  80d2d4:	00800bc4 	movi	r2,47
  80d2d8:	9cc00044 	addi	r19,r19,1
  80d2dc:	8025883a 	mov	r18,r16
  80d2e0:	147fed16 	blt	r2,r17,80d298 <_strtod_r+0x1a0>
  80d2e4:	00800b84 	movi	r2,46
  80d2e8:	8880c926 	beq	r17,r2,80d610 <_strtod_r+0x518>
  80d2ec:	dcc01815 	stw	r19,96(sp)
  80d2f0:	d8001b15 	stw	zero,108(sp)
  80d2f4:	d8001715 	stw	zero,92(sp)
  80d2f8:	000d883a 	mov	r6,zero
  80d2fc:	00801944 	movi	r2,101
  80d300:	88802126 	beq	r17,r2,80d388 <_strtod_r+0x290>
  80d304:	00801144 	movi	r2,69
  80d308:	88801f26 	beq	r17,r2,80d388 <_strtod_r+0x290>
  80d30c:	d9001817 	ldw	r4,96(sp)
  80d310:	2024c03a 	cmpne	r18,r4,zero
  80d314:	0009883a 	mov	r4,zero
  80d318:	9000651e 	bne	r18,zero,80d4b0 <_strtod_r+0x3b8>
  80d31c:	3000c926 	beq	r6,zero,80d644 <_strtod_r+0x54c>
  80d320:	d8801d17 	ldw	r2,116(sp)
  80d324:	10000326 	beq	r2,zero,80d334 <_strtod_r+0x23c>
  80d328:	d8800417 	ldw	r2,16(sp)
  80d32c:	d8c01d17 	ldw	r3,116(sp)
  80d330:	18800015 	stw	r2,0(r3)
  80d334:	d9001517 	ldw	r4,84(sp)
  80d338:	2005003a 	cmpeq	r2,r4,zero
  80d33c:	10001c1e 	bne	r2,zero,80d3b0 <_strtod_r+0x2b8>
  80d340:	e0800017 	ldw	r2,0(fp)
  80d344:	e0c00117 	ldw	r3,4(fp)
  80d348:	1009883a 	mov	r4,r2
  80d34c:	1960003c 	xorhi	r5,r3,32768
  80d350:	2005883a 	mov	r2,r4
  80d354:	2807883a 	mov	r3,r5
  80d358:	dfc02a17 	ldw	ra,168(sp)
  80d35c:	df002917 	ldw	fp,164(sp)
  80d360:	ddc02817 	ldw	r23,160(sp)
  80d364:	dd802717 	ldw	r22,156(sp)
  80d368:	dd402617 	ldw	r21,152(sp)
  80d36c:	dd002517 	ldw	r20,148(sp)
  80d370:	dcc02417 	ldw	r19,144(sp)
  80d374:	dc802317 	ldw	r18,140(sp)
  80d378:	dc402217 	ldw	r17,136(sp)
  80d37c:	dc002117 	ldw	r16,132(sp)
  80d380:	dec02b04 	addi	sp,sp,172
  80d384:	f800283a 	ret
  80d388:	d8801817 	ldw	r2,96(sp)
  80d38c:	1024c03a 	cmpne	r18,r2,zero
  80d390:	90000a1e 	bne	r18,zero,80d3bc <_strtod_r+0x2c4>
  80d394:	3000091e 	bne	r6,zero,80d3bc <_strtod_r+0x2c4>
  80d398:	d8c01617 	ldw	r3,88(sp)
  80d39c:	1805003a 	cmpeq	r2,r3,zero
  80d3a0:	10000626 	beq	r2,zero,80d3bc <_strtod_r+0x2c4>
  80d3a4:	d8001515 	stw	zero,84(sp)
  80d3a8:	dd000415 	stw	r20,16(sp)
  80d3ac:	003fdc06 	br	80d320 <_strtod_r+0x228>
  80d3b0:	e1000017 	ldw	r4,0(fp)
  80d3b4:	e1400117 	ldw	r5,4(fp)
  80d3b8:	003fe506 	br	80d350 <_strtod_r+0x258>
  80d3bc:	dd000417 	ldw	r20,16(sp)
  80d3c0:	00800ac4 	movi	r2,43
  80d3c4:	a4000044 	addi	r16,r20,1
  80d3c8:	dc000415 	stw	r16,16(sp)
  80d3cc:	a0c00047 	ldb	r3,1(r20)
  80d3d0:	8009883a 	mov	r4,r16
  80d3d4:	1880cb26 	beq	r3,r2,80d704 <_strtod_r+0x60c>
  80d3d8:	00800b44 	movi	r2,45
  80d3dc:	18838326 	beq	r3,r2,80e1ec <_strtod_r+0x10f4>
  80d3e0:	1823883a 	mov	r17,r3
  80d3e4:	88fff404 	addi	r3,r17,-48
  80d3e8:	00800244 	movi	r2,9
  80d3ec:	d8001915 	stw	zero,100(sp)
  80d3f0:	10c0cb36 	bltu	r2,r3,80d720 <_strtod_r+0x628>
  80d3f4:	00800c04 	movi	r2,48
  80d3f8:	8880061e 	bne	r17,r2,80d414 <_strtod_r+0x31c>
  80d3fc:	dc000417 	ldw	r16,16(sp)
  80d400:	8805883a 	mov	r2,r17
  80d404:	84000044 	addi	r16,r16,1
  80d408:	dc000415 	stw	r16,16(sp)
  80d40c:	84400007 	ldb	r17,0(r16)
  80d410:	88bffc26 	beq	r17,r2,80d404 <_strtod_r+0x30c>
  80d414:	88fff3c4 	addi	r3,r17,-49
  80d418:	00800204 	movi	r2,8
  80d41c:	10ffbd36 	bltu	r2,r3,80d314 <_strtod_r+0x21c>
  80d420:	dc000417 	ldw	r16,16(sp)
  80d424:	893ff404 	addi	r4,r17,-48
  80d428:	00c00bc4 	movi	r3,47
  80d42c:	dc001315 	stw	r16,76(sp)
  80d430:	84000044 	addi	r16,r16,1
  80d434:	dc000415 	stw	r16,16(sp)
  80d438:	84400007 	ldb	r17,0(r16)
  80d43c:	1c40100e 	bge	r3,r17,80d480 <_strtod_r+0x388>
  80d440:	00800e44 	movi	r2,57
  80d444:	14400e16 	blt	r2,r17,80d480 <_strtod_r+0x388>
  80d448:	182f883a 	mov	r23,r3
  80d44c:	102d883a 	mov	r22,r2
  80d450:	00000106 	br	80d458 <_strtod_r+0x360>
  80d454:	b4400a16 	blt	r22,r17,80d480 <_strtod_r+0x388>
  80d458:	84000044 	addi	r16,r16,1
  80d45c:	01400284 	movi	r5,10
  80d460:	d9802015 	stw	r6,128(sp)
  80d464:	08026a00 	call	8026a0 <__mulsi3>
  80d468:	dc000415 	stw	r16,16(sp)
  80d46c:	8885883a 	add	r2,r17,r2
  80d470:	84400007 	ldb	r17,0(r16)
  80d474:	113ff404 	addi	r4,r2,-48
  80d478:	d9802017 	ldw	r6,128(sp)
  80d47c:	bc7ff516 	blt	r23,r17,80d454 <_strtod_r+0x35c>
  80d480:	d8801317 	ldw	r2,76(sp)
  80d484:	8087c83a 	sub	r3,r16,r2
  80d488:	00800204 	movi	r2,8
  80d48c:	10c2ff16 	blt	r2,r3,80e08c <_strtod_r+0xf94>
  80d490:	009387c4 	movi	r2,19999
  80d494:	1100010e 	bge	r2,r4,80d49c <_strtod_r+0x3a4>
  80d498:	1009883a 	mov	r4,r2
  80d49c:	d8c01917 	ldw	r3,100(sp)
  80d4a0:	1805003a 	cmpeq	r2,r3,zero
  80d4a4:	103f9c1e 	bne	r2,zero,80d318 <_strtod_r+0x220>
  80d4a8:	0109c83a 	sub	r4,zero,r4
  80d4ac:	903f9b26 	beq	r18,zero,80d31c <_strtod_r+0x224>
  80d4b0:	d8801717 	ldw	r2,92(sp)
  80d4b4:	2089c83a 	sub	r4,r4,r2
  80d4b8:	d9000f15 	stw	r4,60(sp)
  80d4bc:	9800811e 	bne	r19,zero,80d6c4 <_strtod_r+0x5cc>
  80d4c0:	dd001817 	ldw	r20,96(sp)
  80d4c4:	dc801817 	ldw	r18,96(sp)
  80d4c8:	00800404 	movi	r2,16
  80d4cc:	1480010e 	bge	r2,r18,80d4d4 <_strtod_r+0x3dc>
  80d4d0:	1025883a 	mov	r18,r2
  80d4d4:	d9001217 	ldw	r4,72(sp)
  80d4d8:	080250c0 	call	80250c <__floatunsidf>
  80d4dc:	100f883a 	mov	r7,r2
  80d4e0:	e0800015 	stw	r2,0(fp)
  80d4e4:	00800244 	movi	r2,9
  80d4e8:	e0c00115 	stw	r3,4(fp)
  80d4ec:	1480160e 	bge	r2,r18,80d548 <_strtod_r+0x450>
  80d4f0:	900c90fa 	slli	r6,r18,3
  80d4f4:	01002074 	movhi	r4,129
  80d4f8:	2114bc04 	addi	r4,r4,21232
  80d4fc:	180b883a 	mov	r5,r3
  80d500:	310d883a 	add	r6,r6,r4
  80d504:	30ffef17 	ldw	r3,-68(r6)
  80d508:	30bfee17 	ldw	r2,-72(r6)
  80d50c:	3809883a 	mov	r4,r7
  80d510:	180f883a 	mov	r7,r3
  80d514:	100d883a 	mov	r6,r2
  80d518:	0810eac0 	call	810eac <__muldf3>
  80d51c:	d9001117 	ldw	r4,68(sp)
  80d520:	1021883a 	mov	r16,r2
  80d524:	1823883a 	mov	r17,r3
  80d528:	080250c0 	call	80250c <__floatunsidf>
  80d52c:	880b883a 	mov	r5,r17
  80d530:	180f883a 	mov	r7,r3
  80d534:	8009883a 	mov	r4,r16
  80d538:	100d883a 	mov	r6,r2
  80d53c:	08022400 	call	802240 <__adddf3>
  80d540:	e0c00115 	stw	r3,4(fp)
  80d544:	e0800015 	stw	r2,0(fp)
  80d548:	d8c01817 	ldw	r3,96(sp)
  80d54c:	010003c4 	movi	r4,15
  80d550:	20c09e16 	blt	r4,r3,80d7cc <_strtod_r+0x6d4>
  80d554:	d8800f17 	ldw	r2,60(sp)
  80d558:	103f7126 	beq	r2,zero,80d320 <_strtod_r+0x228>
  80d55c:	0083d90e 	bge	zero,r2,80e4c4 <_strtod_r+0x13cc>
  80d560:	d8c00f17 	ldw	r3,60(sp)
  80d564:	00800584 	movi	r2,22
  80d568:	10c2ca0e 	bge	r2,r3,80e094 <_strtod_r+0xf9c>
  80d56c:	d8801817 	ldw	r2,96(sp)
  80d570:	d8c00f17 	ldw	r3,60(sp)
  80d574:	20a3c83a 	sub	r17,r4,r2
  80d578:	88800584 	addi	r2,r17,22
  80d57c:	10c09316 	blt	r2,r3,80d7cc <_strtod_r+0x6d4>
  80d580:	880890fa 	slli	r4,r17,3
  80d584:	04002074 	movhi	r16,129
  80d588:	8414bc04 	addi	r16,r16,21232
  80d58c:	e0800017 	ldw	r2,0(fp)
  80d590:	2409883a 	add	r4,r4,r16
  80d594:	22000017 	ldw	r8,0(r4)
  80d598:	22400117 	ldw	r9,4(r4)
  80d59c:	e0c00117 	ldw	r3,4(fp)
  80d5a0:	1009883a 	mov	r4,r2
  80d5a4:	480f883a 	mov	r7,r9
  80d5a8:	180b883a 	mov	r5,r3
  80d5ac:	400d883a 	mov	r6,r8
  80d5b0:	0810eac0 	call	810eac <__muldf3>
  80d5b4:	d9000f17 	ldw	r4,60(sp)
  80d5b8:	180b883a 	mov	r5,r3
  80d5bc:	2455c83a 	sub	r10,r4,r17
  80d5c0:	501490fa 	slli	r10,r10,3
  80d5c4:	1009883a 	mov	r4,r2
  80d5c8:	5415883a 	add	r10,r10,r16
  80d5cc:	52000017 	ldw	r8,0(r10)
  80d5d0:	52400117 	ldw	r9,4(r10)
  80d5d4:	0002b906 	br	80e0bc <_strtod_r+0xfc4>
  80d5d8:	80c00047 	ldb	r3,1(r16)
  80d5dc:	00801604 	movi	r2,88
  80d5e0:	18805226 	beq	r3,r2,80d72c <_strtod_r+0x634>
  80d5e4:	00801e04 	movi	r2,120
  80d5e8:	18805026 	beq	r3,r2,80d72c <_strtod_r+0x634>
  80d5ec:	84000044 	addi	r16,r16,1
  80d5f0:	dc000415 	stw	r16,16(sp)
  80d5f4:	80c00007 	ldb	r3,0(r16)
  80d5f8:	00800c04 	movi	r2,48
  80d5fc:	18bffb26 	beq	r3,r2,80d5ec <_strtod_r+0x4f4>
  80d600:	183f4726 	beq	r3,zero,80d320 <_strtod_r+0x228>
  80d604:	01000044 	movi	r4,1
  80d608:	d9001615 	stw	r4,88(sp)
  80d60c:	003f0a06 	br	80d238 <_strtod_r+0x140>
  80d610:	84000044 	addi	r16,r16,1
  80d614:	dc000415 	stw	r16,16(sp)
  80d618:	94400047 	ldb	r17,1(r18)
  80d61c:	9800ba26 	beq	r19,zero,80d908 <_strtod_r+0x810>
  80d620:	dcc01815 	stw	r19,96(sp)
  80d624:	d8001715 	stw	zero,92(sp)
  80d628:	000d883a 	mov	r6,zero
  80d62c:	8dbff404 	addi	r22,r17,-48
  80d630:	00800244 	movi	r2,9
  80d634:	15826e2e 	bgeu	r2,r22,80dff0 <_strtod_r+0xef8>
  80d638:	01000044 	movi	r4,1
  80d63c:	d9001b15 	stw	r4,108(sp)
  80d640:	003f2e06 	br	80d2fc <_strtod_r+0x204>
  80d644:	d8c01617 	ldw	r3,88(sp)
  80d648:	1804c03a 	cmpne	r2,r3,zero
  80d64c:	103f341e 	bne	r2,zero,80d320 <_strtod_r+0x228>
  80d650:	d9001b17 	ldw	r4,108(sp)
  80d654:	2004c03a 	cmpne	r2,r4,zero
  80d658:	103f521e 	bne	r2,zero,80d3a4 <_strtod_r+0x2ac>
  80d65c:	00801384 	movi	r2,78
  80d660:	8883b526 	beq	r17,r2,80e538 <_strtod_r+0x1440>
  80d664:	1443b016 	blt	r2,r17,80e528 <_strtod_r+0x1430>
  80d668:	00801244 	movi	r2,73
  80d66c:	88bf4d1e 	bne	r17,r2,80d3a4 <_strtod_r+0x2ac>
  80d670:	dc000404 	addi	r16,sp,16
  80d674:	8009883a 	mov	r4,r16
  80d678:	01402074 	movhi	r5,129
  80d67c:	29550504 	addi	r5,r5,21524
  80d680:	080d0b00 	call	80d0b0 <match>
  80d684:	103f4726 	beq	r2,zero,80d3a4 <_strtod_r+0x2ac>
  80d688:	d8800417 	ldw	r2,16(sp)
  80d68c:	8009883a 	mov	r4,r16
  80d690:	01402074 	movhi	r5,129
  80d694:	29550604 	addi	r5,r5,21528
  80d698:	143fffc4 	addi	r16,r2,-1
  80d69c:	dc000415 	stw	r16,16(sp)
  80d6a0:	080d0b00 	call	80d0b0 <match>
  80d6a4:	1000031e 	bne	r2,zero,80d6b4 <_strtod_r+0x5bc>
  80d6a8:	d8800417 	ldw	r2,16(sp)
  80d6ac:	14000044 	addi	r16,r2,1
  80d6b0:	dc000415 	stw	r16,16(sp)
  80d6b4:	019ffc34 	movhi	r6,32752
  80d6b8:	e1800115 	stw	r6,4(fp)
  80d6bc:	e0000015 	stw	zero,0(fp)
  80d6c0:	003f1706 	br	80d320 <_strtod_r+0x228>
  80d6c4:	9829883a 	mov	r20,r19
  80d6c8:	003f7e06 	br	80d4c4 <_strtod_r+0x3cc>
  80d6cc:	d8001515 	stw	zero,84(sp)
  80d6d0:	84000044 	addi	r16,r16,1
  80d6d4:	dc000415 	stw	r16,16(sp)
  80d6d8:	80800007 	ldb	r2,0(r16)
  80d6dc:	103ed21e 	bne	r2,zero,80d228 <_strtod_r+0x130>
  80d6e0:	d8001515 	stw	zero,84(sp)
  80d6e4:	dd000415 	stw	r20,16(sp)
  80d6e8:	003f0d06 	br	80d320 <_strtod_r+0x228>
  80d6ec:	84000044 	addi	r16,r16,1
  80d6f0:	dc000415 	stw	r16,16(sp)
  80d6f4:	003e9206 	br	80d140 <_strtod_r+0x48>
  80d6f8:	00800044 	movi	r2,1
  80d6fc:	d8801515 	stw	r2,84(sp)
  80d700:	003ff306 	br	80d6d0 <_strtod_r+0x5d8>
  80d704:	d8001915 	stw	zero,100(sp)
  80d708:	84000044 	addi	r16,r16,1
  80d70c:	dc000415 	stw	r16,16(sp)
  80d710:	24400047 	ldb	r17,1(r4)
  80d714:	00800244 	movi	r2,9
  80d718:	88fff404 	addi	r3,r17,-48
  80d71c:	10ff352e 	bgeu	r2,r3,80d3f4 <_strtod_r+0x2fc>
  80d720:	0009883a 	mov	r4,zero
  80d724:	dd000415 	stw	r20,16(sp)
  80d728:	003efb06 	br	80d318 <_strtod_r+0x220>
  80d72c:	d8c01517 	ldw	r3,84(sp)
  80d730:	04402074 	movhi	r17,129
  80d734:	8c573b04 	addi	r17,r17,23788
  80d738:	d8800504 	addi	r2,sp,20
  80d73c:	a809883a 	mov	r4,r21
  80d740:	d9400404 	addi	r5,sp,16
  80d744:	880d883a 	mov	r6,r17
  80d748:	d9c00604 	addi	r7,sp,24
  80d74c:	d8800015 	stw	r2,0(sp)
  80d750:	d8c00115 	stw	r3,4(sp)
  80d754:	080f4200 	call	80f420 <__gethex>
  80d758:	140001cc 	andi	r16,r2,7
  80d75c:	1025883a 	mov	r18,r2
  80d760:	803eef26 	beq	r16,zero,80d320 <_strtod_r+0x228>
  80d764:	04c00184 	movi	r19,6
  80d768:	84ff0e26 	beq	r16,r19,80d3a4 <_strtod_r+0x2ac>
  80d76c:	d9800517 	ldw	r6,20(sp)
  80d770:	30000626 	beq	r6,zero,80d78c <_strtod_r+0x694>
  80d774:	89400017 	ldw	r5,0(r17)
  80d778:	d9000d04 	addi	r4,sp,52
  80d77c:	080bb900 	call	80bb90 <__copybits>
  80d780:	d9400517 	ldw	r5,20(sp)
  80d784:	a809883a 	mov	r4,r21
  80d788:	080b6f00 	call	80b6f0 <_Bfree>
  80d78c:	d9400617 	ldw	r5,24(sp)
  80d790:	9c025436 	bltu	r19,r16,80e0e4 <_strtod_r+0xfec>
  80d794:	8405883a 	add	r2,r16,r16
  80d798:	1085883a 	add	r2,r2,r2
  80d79c:	00c02074 	movhi	r3,129
  80d7a0:	18f5ec04 	addi	r3,r3,-10320
  80d7a4:	10c5883a 	add	r2,r2,r3
  80d7a8:	11000017 	ldw	r4,0(r2)
  80d7ac:	2000683a 	jmp	r4
  80d7b0:	0080e124 	muli	r2,zero,900
  80d7b4:	0080e130 	cmpltui	r2,zero,900
  80d7b8:	0080e0d4 	movui	r2,899
  80d7bc:	0080e0fc 	xorhi	r2,zero,899
  80d7c0:	0080e10c 	andi	r2,zero,900
  80d7c4:	0080e130 	cmpltui	r2,zero,900
  80d7c8:	0080e124 	muli	r2,zero,900
  80d7cc:	d9001817 	ldw	r4,96(sp)
  80d7d0:	d8c00f17 	ldw	r3,60(sp)
  80d7d4:	2485c83a 	sub	r2,r4,r18
  80d7d8:	18a1883a 	add	r16,r3,r2
  80d7dc:	0402e80e 	bge	zero,r16,80e380 <_strtod_r+0x1288>
  80d7e0:	814003cc 	andi	r5,r16,15
  80d7e4:	28000f26 	beq	r5,zero,80d824 <_strtod_r+0x72c>
  80d7e8:	280a90fa 	slli	r5,r5,3
  80d7ec:	01002074 	movhi	r4,129
  80d7f0:	2114bc04 	addi	r4,r4,21232
  80d7f4:	e0800017 	ldw	r2,0(fp)
  80d7f8:	290b883a 	add	r5,r5,r4
  80d7fc:	2a000017 	ldw	r8,0(r5)
  80d800:	e0c00117 	ldw	r3,4(fp)
  80d804:	2a400117 	ldw	r9,4(r5)
  80d808:	1009883a 	mov	r4,r2
  80d80c:	180b883a 	mov	r5,r3
  80d810:	480f883a 	mov	r7,r9
  80d814:	400d883a 	mov	r6,r8
  80d818:	0810eac0 	call	810eac <__muldf3>
  80d81c:	e0c00115 	stw	r3,4(fp)
  80d820:	e0800015 	stw	r2,0(fp)
  80d824:	00bffc04 	movi	r2,-16
  80d828:	808c703a 	and	r6,r16,r2
  80d82c:	30006726 	beq	r6,zero,80d9cc <_strtod_r+0x8d4>
  80d830:	00804d04 	movi	r2,308
  80d834:	11820f16 	blt	r2,r6,80e074 <_strtod_r+0xf7c>
  80d838:	3021d13a 	srai	r16,r6,4
  80d83c:	00800044 	movi	r2,1
  80d840:	14037f0e 	bge	r2,r16,80e640 <_strtod_r+0x1548>
  80d844:	05802074 	movhi	r22,129
  80d848:	b594ee04 	addi	r22,r22,21432
  80d84c:	1027883a 	mov	r19,r2
  80d850:	0025883a 	mov	r18,zero
  80d854:	b023883a 	mov	r17,r22
  80d858:	8080004c 	andi	r2,r16,1
  80d85c:	1005003a 	cmpeq	r2,r2,zero
  80d860:	1000091e 	bne	r2,zero,80d888 <_strtod_r+0x790>
  80d864:	e0800017 	ldw	r2,0(fp)
  80d868:	e0c00117 	ldw	r3,4(fp)
  80d86c:	89800017 	ldw	r6,0(r17)
  80d870:	89c00117 	ldw	r7,4(r17)
  80d874:	180b883a 	mov	r5,r3
  80d878:	1009883a 	mov	r4,r2
  80d87c:	0810eac0 	call	810eac <__muldf3>
  80d880:	e0c00115 	stw	r3,4(fp)
  80d884:	e0800015 	stw	r2,0(fp)
  80d888:	8021d07a 	srai	r16,r16,1
  80d88c:	94800044 	addi	r18,r18,1
  80d890:	8c400204 	addi	r17,r17,8
  80d894:	9c3ff016 	blt	r19,r16,80d858 <_strtod_r+0x760>
  80d898:	900e90fa 	slli	r7,r18,3
  80d89c:	e2000117 	ldw	r8,4(fp)
  80d8a0:	e1000017 	ldw	r4,0(fp)
  80d8a4:	3d8f883a 	add	r7,r7,r22
  80d8a8:	38800017 	ldw	r2,0(r7)
  80d8ac:	38c00117 	ldw	r3,4(r7)
  80d8b0:	01bf2c34 	movhi	r6,64688
  80d8b4:	418d883a 	add	r6,r8,r6
  80d8b8:	300b883a 	mov	r5,r6
  80d8bc:	180f883a 	mov	r7,r3
  80d8c0:	100d883a 	mov	r6,r2
  80d8c4:	0810eac0 	call	810eac <__muldf3>
  80d8c8:	1009883a 	mov	r4,r2
  80d8cc:	180b883a 	mov	r5,r3
  80d8d0:	199ffc2c 	andhi	r6,r3,32752
  80d8d4:	009f2834 	movhi	r2,31904
  80d8d8:	e1000015 	stw	r4,0(fp)
  80d8dc:	e1400115 	stw	r5,4(fp)
  80d8e0:	1181e436 	bltu	r2,r6,80e074 <_strtod_r+0xf7c>
  80d8e4:	009f2434 	movhi	r2,31888
  80d8e8:	11833f2e 	bgeu	r2,r6,80e5e8 <_strtod_r+0x14f0>
  80d8ec:	d8001c15 	stw	zero,112(sp)
  80d8f0:	019ffc34 	movhi	r6,32752
  80d8f4:	31bfffc4 	addi	r6,r6,-1
  80d8f8:	01ffffc4 	movi	r7,-1
  80d8fc:	e1800115 	stw	r6,4(fp)
  80d900:	e1c00015 	stw	r7,0(fp)
  80d904:	00003206 	br	80d9d0 <_strtod_r+0x8d8>
  80d908:	00800c04 	movi	r2,48
  80d90c:	8883221e 	bne	r17,r2,80e598 <_strtod_r+0x14a0>
  80d910:	8805883a 	mov	r2,r17
  80d914:	000d883a 	mov	r6,zero
  80d918:	84000044 	addi	r16,r16,1
  80d91c:	dc000415 	stw	r16,16(sp)
  80d920:	84400007 	ldb	r17,0(r16)
  80d924:	31800044 	addi	r6,r6,1
  80d928:	88bffb26 	beq	r17,r2,80d918 <_strtod_r+0x820>
  80d92c:	88fff3c4 	addi	r3,r17,-49
  80d930:	00800204 	movi	r2,8
  80d934:	10c1ca36 	bltu	r2,r3,80e060 <_strtod_r+0xf68>
  80d938:	d8c00417 	ldw	r3,16(sp)
  80d93c:	d9801715 	stw	r6,92(sp)
  80d940:	8dbff404 	addi	r22,r17,-48
  80d944:	d8c01415 	stw	r3,80(sp)
  80d948:	1821883a 	mov	r16,r3
  80d94c:	d8001815 	stw	zero,96(sp)
  80d950:	01800044 	movi	r6,1
  80d954:	b0023526 	beq	r22,zero,80e22c <_strtod_r+0x1134>
  80d958:	d9001717 	ldw	r4,92(sp)
  80d95c:	00800044 	movi	r2,1
  80d960:	2189883a 	add	r4,r4,r6
  80d964:	d9001715 	stw	r4,92(sp)
  80d968:	1183390e 	bge	r2,r6,80e650 <_strtod_r+0x1558>
  80d96c:	dc401817 	ldw	r17,96(sp)
  80d970:	1025883a 	mov	r18,r2
  80d974:	05c00204 	movi	r23,8
  80d978:	00000806 	br	80d99c <_strtod_r+0x8a4>
  80d97c:	d9001217 	ldw	r4,72(sp)
  80d980:	01400284 	movi	r5,10
  80d984:	d9802015 	stw	r6,128(sp)
  80d988:	08026a00 	call	8026a0 <__mulsi3>
  80d98c:	d9802017 	ldw	r6,128(sp)
  80d990:	d8801215 	stw	r2,72(sp)
  80d994:	94800044 	addi	r18,r18,1
  80d998:	91821726 	beq	r18,r6,80e1f8 <_strtod_r+0x1100>
  80d99c:	8c400044 	addi	r17,r17,1
  80d9a0:	88bfffc4 	addi	r2,r17,-1
  80d9a4:	b8bff50e 	bge	r23,r2,80d97c <_strtod_r+0x884>
  80d9a8:	00800404 	movi	r2,16
  80d9ac:	147ff916 	blt	r2,r17,80d994 <_strtod_r+0x89c>
  80d9b0:	d9001117 	ldw	r4,68(sp)
  80d9b4:	01400284 	movi	r5,10
  80d9b8:	d9802015 	stw	r6,128(sp)
  80d9bc:	08026a00 	call	8026a0 <__mulsi3>
  80d9c0:	d9802017 	ldw	r6,128(sp)
  80d9c4:	d8801115 	stw	r2,68(sp)
  80d9c8:	003ff206 	br	80d994 <_strtod_r+0x89c>
  80d9cc:	d8001c15 	stw	zero,112(sp)
  80d9d0:	d8c01217 	ldw	r3,72(sp)
  80d9d4:	d9401417 	ldw	r5,80(sp)
  80d9d8:	d9c01817 	ldw	r7,96(sp)
  80d9dc:	a809883a 	mov	r4,r21
  80d9e0:	a00d883a 	mov	r6,r20
  80d9e4:	d8c00015 	stw	r3,0(sp)
  80d9e8:	080c65c0 	call	80c65c <__s2b>
  80d9ec:	11000304 	addi	r4,r2,12
  80d9f0:	d8801015 	stw	r2,64(sp)
  80d9f4:	d8800f17 	ldw	r2,60(sp)
  80d9f8:	d9001f15 	stw	r4,124(sp)
  80d9fc:	1004803a 	cmplt	r2,r2,zero
  80da00:	d8801e15 	stw	r2,120(sp)
  80da04:	d8c01017 	ldw	r3,64(sp)
  80da08:	a809883a 	mov	r4,r21
  80da0c:	19400117 	ldw	r5,4(r3)
  80da10:	080bc700 	call	80bc70 <_Balloc>
  80da14:	d9001017 	ldw	r4,64(sp)
  80da18:	d9401f17 	ldw	r5,124(sp)
  80da1c:	102f883a 	mov	r23,r2
  80da20:	21800417 	ldw	r6,16(r4)
  80da24:	11000304 	addi	r4,r2,12
  80da28:	318d883a 	add	r6,r6,r6
  80da2c:	318d883a 	add	r6,r6,r6
  80da30:	31800204 	addi	r6,r6,8
  80da34:	0804f780 	call	804f78 <memcpy>
  80da38:	e2000017 	ldw	r8,0(fp)
  80da3c:	e2400117 	ldw	r9,4(fp)
  80da40:	a809883a 	mov	r4,r21
  80da44:	400b883a 	mov	r5,r8
  80da48:	d9c00204 	addi	r7,sp,8
  80da4c:	d8800304 	addi	r2,sp,12
  80da50:	480d883a 	mov	r6,r9
  80da54:	d8800015 	stw	r2,0(sp)
  80da58:	080bd2c0 	call	80bd2c <__d2b>
  80da5c:	a809883a 	mov	r4,r21
  80da60:	01400044 	movi	r5,1
  80da64:	d8800515 	stw	r2,20(sp)
  80da68:	080c3d40 	call	80c3d4 <__i2b>
  80da6c:	d8c01e17 	ldw	r3,120(sp)
  80da70:	102d883a 	mov	r22,r2
  80da74:	1801091e 	bne	r3,zero,80de9c <_strtod_r+0xda4>
  80da78:	dd000f17 	ldw	r20,60(sp)
  80da7c:	000f883a 	mov	r7,zero
  80da80:	0013883a 	mov	r9,zero
  80da84:	a011883a 	mov	r8,r20
  80da88:	d8800217 	ldw	r2,8(sp)
  80da8c:	10010116 	blt	r2,zero,80de94 <_strtod_r+0xd9c>
  80da90:	388f883a 	add	r7,r7,r2
  80da94:	d8c01c17 	ldw	r3,112(sp)
  80da98:	d9400317 	ldw	r5,12(sp)
  80da9c:	10c9c83a 	sub	r4,r2,r3
  80daa0:	2145883a 	add	r2,r4,r5
  80daa4:	10bfffc4 	addi	r2,r2,-1
  80daa8:	00ff0084 	movi	r3,-1022
  80daac:	10c09f0e 	bge	r2,r3,80dd2c <_strtod_r+0xc34>
  80dab0:	21810cc4 	addi	r6,r4,1075
  80dab4:	d9001c17 	ldw	r4,112(sp)
  80dab8:	4185883a 	add	r2,r8,r6
  80dabc:	39a1883a 	add	r16,r7,r6
  80dac0:	20a5883a 	add	r18,r4,r2
  80dac4:	3807883a 	mov	r3,r7
  80dac8:	81c0010e 	bge	r16,r7,80dad0 <_strtod_r+0x9d8>
  80dacc:	8007883a 	mov	r3,r16
  80dad0:	9005883a 	mov	r2,r18
  80dad4:	1c80010e 	bge	r3,r18,80dadc <_strtod_r+0x9e4>
  80dad8:	1805883a 	mov	r2,r3
  80dadc:	0080eb0e 	bge	zero,r2,80de8c <_strtod_r+0xd94>
  80dae0:	38a7c83a 	sub	r19,r7,r2
  80dae4:	80a1c83a 	sub	r16,r16,r2
  80dae8:	90a5c83a 	sub	r18,r18,r2
  80daec:	02400e0e 	bge	zero,r9,80db28 <_strtod_r+0xa30>
  80daf0:	480d883a 	mov	r6,r9
  80daf4:	b00b883a 	mov	r5,r22
  80daf8:	a809883a 	mov	r4,r21
  80dafc:	080c53c0 	call	80c53c <__pow5mult>
  80db00:	d9800517 	ldw	r6,20(sp)
  80db04:	a809883a 	mov	r4,r21
  80db08:	100b883a 	mov	r5,r2
  80db0c:	102d883a 	mov	r22,r2
  80db10:	080c1800 	call	80c180 <__multiply>
  80db14:	d9400517 	ldw	r5,20(sp)
  80db18:	1023883a 	mov	r17,r2
  80db1c:	a809883a 	mov	r4,r21
  80db20:	080b6f00 	call	80b6f0 <_Bfree>
  80db24:	dc400515 	stw	r17,20(sp)
  80db28:	0400050e 	bge	zero,r16,80db40 <_strtod_r+0xa48>
  80db2c:	d9400517 	ldw	r5,20(sp)
  80db30:	800d883a 	mov	r6,r16
  80db34:	a809883a 	mov	r4,r21
  80db38:	080c0340 	call	80c034 <__lshift>
  80db3c:	d8800515 	stw	r2,20(sp)
  80db40:	a000741e 	bne	r20,zero,80dd14 <_strtod_r+0xc1c>
  80db44:	0480050e 	bge	zero,r18,80db5c <_strtod_r+0xa64>
  80db48:	b80b883a 	mov	r5,r23
  80db4c:	900d883a 	mov	r6,r18
  80db50:	a809883a 	mov	r4,r21
  80db54:	080c0340 	call	80c034 <__lshift>
  80db58:	102f883a 	mov	r23,r2
  80db5c:	04c0050e 	bge	zero,r19,80db74 <_strtod_r+0xa7c>
  80db60:	b00b883a 	mov	r5,r22
  80db64:	980d883a 	mov	r6,r19
  80db68:	a809883a 	mov	r4,r21
  80db6c:	080c0340 	call	80c034 <__lshift>
  80db70:	102d883a 	mov	r22,r2
  80db74:	d9400517 	ldw	r5,20(sp)
  80db78:	a809883a 	mov	r4,r21
  80db7c:	b80d883a 	mov	r6,r23
  80db80:	080bea80 	call	80bea8 <__mdiff>
  80db84:	1029883a 	mov	r20,r2
  80db88:	10800317 	ldw	r2,12(r2)
  80db8c:	a009883a 	mov	r4,r20
  80db90:	a0000315 	stw	zero,12(r20)
  80db94:	b00b883a 	mov	r5,r22
  80db98:	d8801a15 	stw	r2,104(sp)
  80db9c:	080b84c0 	call	80b84c <__mcmp>
  80dba0:	1001a616 	blt	r2,zero,80e23c <_strtod_r+0x1144>
  80dba4:	10016d26 	beq	r2,zero,80e15c <_strtod_r+0x1064>
  80dba8:	a009883a 	mov	r4,r20
  80dbac:	b00b883a 	mov	r5,r22
  80dbb0:	080ba4c0 	call	80ba4c <__ratio>
  80dbb4:	0011883a 	mov	r8,zero
  80dbb8:	02500034 	movhi	r9,16384
  80dbbc:	480f883a 	mov	r7,r9
  80dbc0:	1009883a 	mov	r4,r2
  80dbc4:	180b883a 	mov	r5,r3
  80dbc8:	400d883a 	mov	r6,r8
  80dbcc:	1021883a 	mov	r16,r2
  80dbd0:	1823883a 	mov	r17,r3
  80dbd4:	08115180 	call	811518 <__ledf2>
  80dbd8:	00805716 	blt	zero,r2,80dd38 <_strtod_r+0xc40>
  80dbdc:	d8801a17 	ldw	r2,104(sp)
  80dbe0:	1025003a 	cmpeq	r18,r2,zero
  80dbe4:	90008c1e 	bne	r18,zero,80de18 <_strtod_r+0xd20>
  80dbe8:	008ffc34 	movhi	r2,16368
  80dbec:	0021883a 	mov	r16,zero
  80dbf0:	1023883a 	mov	r17,r2
  80dbf4:	d8000715 	stw	zero,28(sp)
  80dbf8:	d8800815 	stw	r2,32(sp)
  80dbfc:	e1c00117 	ldw	r7,4(fp)
  80dc00:	009ff834 	movhi	r2,32736
  80dc04:	3cdffc2c 	andhi	r19,r7,32752
  80dc08:	98805f26 	beq	r19,r2,80dd88 <_strtod_r+0xc90>
  80dc0c:	d8c01c17 	ldw	r3,112(sp)
  80dc10:	18001b26 	beq	r3,zero,80dc80 <_strtod_r+0xb88>
  80dc14:	0081a834 	movhi	r2,1696
  80dc18:	14c01936 	bltu	r2,r19,80dc80 <_strtod_r+0xb88>
  80dc1c:	00bff034 	movhi	r2,65472
  80dc20:	00d07834 	movhi	r3,16864
  80dc24:	18ffffc4 	addi	r3,r3,-1
  80dc28:	180f883a 	mov	r7,r3
  80dc2c:	8009883a 	mov	r4,r16
  80dc30:	880b883a 	mov	r5,r17
  80dc34:	100d883a 	mov	r6,r2
  80dc38:	08115180 	call	811518 <__ledf2>
  80dc3c:	00800b16 	blt	zero,r2,80dc6c <_strtod_r+0xb74>
  80dc40:	880b883a 	mov	r5,r17
  80dc44:	8009883a 	mov	r4,r16
  80dc48:	080ffd40 	call	80ffd4 <__fixunsdfsi>
  80dc4c:	1000e31e 	bne	r2,zero,80dfdc <_strtod_r+0xee4>
  80dc50:	0021883a 	mov	r16,zero
  80dc54:	044ffc34 	movhi	r17,16368
  80dc58:	9000dd1e 	bne	r18,zero,80dfd0 <_strtod_r+0xed8>
  80dc5c:	8005883a 	mov	r2,r16
  80dc60:	8807883a 	mov	r3,r17
  80dc64:	d8c00815 	stw	r3,32(sp)
  80dc68:	d8800715 	stw	r2,28(sp)
  80dc6c:	d8800817 	ldw	r2,32(sp)
  80dc70:	00c1ac34 	movhi	r3,1712
  80dc74:	14c5c83a 	sub	r2,r2,r19
  80dc78:	10c5883a 	add	r2,r2,r3
  80dc7c:	d8800815 	stw	r2,32(sp)
  80dc80:	e0800017 	ldw	r2,0(fp)
  80dc84:	e0c00117 	ldw	r3,4(fp)
  80dc88:	1009883a 	mov	r4,r2
  80dc8c:	180b883a 	mov	r5,r3
  80dc90:	080b8ac0 	call	80b8ac <__ulp>
  80dc94:	d9800717 	ldw	r6,28(sp)
  80dc98:	d9c00817 	ldw	r7,32(sp)
  80dc9c:	180b883a 	mov	r5,r3
  80dca0:	1009883a 	mov	r4,r2
  80dca4:	0810eac0 	call	810eac <__muldf3>
  80dca8:	e2000017 	ldw	r8,0(fp)
  80dcac:	e2400117 	ldw	r9,4(fp)
  80dcb0:	180b883a 	mov	r5,r3
  80dcb4:	1009883a 	mov	r4,r2
  80dcb8:	480f883a 	mov	r7,r9
  80dcbc:	400d883a 	mov	r6,r8
  80dcc0:	08022400 	call	802240 <__adddf3>
  80dcc4:	e0c00115 	stw	r3,4(fp)
  80dcc8:	e0800015 	stw	r2,0(fp)
  80dccc:	d9001c17 	ldw	r4,112(sp)
  80dcd0:	e4800117 	ldw	r18,4(fp)
  80dcd4:	2000021e 	bne	r4,zero,80dce0 <_strtod_r+0xbe8>
  80dcd8:	909ffc2c 	andhi	r2,r18,32752
  80dcdc:	98807f26 	beq	r19,r2,80dedc <_strtod_r+0xde4>
  80dce0:	d9400517 	ldw	r5,20(sp)
  80dce4:	a809883a 	mov	r4,r21
  80dce8:	080b6f00 	call	80b6f0 <_Bfree>
  80dcec:	a809883a 	mov	r4,r21
  80dcf0:	b80b883a 	mov	r5,r23
  80dcf4:	080b6f00 	call	80b6f0 <_Bfree>
  80dcf8:	a809883a 	mov	r4,r21
  80dcfc:	b00b883a 	mov	r5,r22
  80dd00:	080b6f00 	call	80b6f0 <_Bfree>
  80dd04:	a809883a 	mov	r4,r21
  80dd08:	a00b883a 	mov	r5,r20
  80dd0c:	080b6f00 	call	80b6f0 <_Bfree>
  80dd10:	003f3c06 	br	80da04 <_strtod_r+0x90c>
  80dd14:	b80b883a 	mov	r5,r23
  80dd18:	a00d883a 	mov	r6,r20
  80dd1c:	a809883a 	mov	r4,r21
  80dd20:	080c53c0 	call	80c53c <__pow5mult>
  80dd24:	102f883a 	mov	r23,r2
  80dd28:	003f8606 	br	80db44 <_strtod_r+0xa4c>
  80dd2c:	00800d84 	movi	r2,54
  80dd30:	114dc83a 	sub	r6,r2,r5
  80dd34:	003f5f06 	br	80dab4 <_strtod_r+0x9bc>
  80dd38:	0005883a 	mov	r2,zero
  80dd3c:	00cff834 	movhi	r3,16352
  80dd40:	8009883a 	mov	r4,r16
  80dd44:	880b883a 	mov	r5,r17
  80dd48:	180f883a 	mov	r7,r3
  80dd4c:	100d883a 	mov	r6,r2
  80dd50:	0810eac0 	call	810eac <__muldf3>
  80dd54:	1009883a 	mov	r4,r2
  80dd58:	d8801a17 	ldw	r2,104(sp)
  80dd5c:	2021883a 	mov	r16,r4
  80dd60:	1823883a 	mov	r17,r3
  80dd64:	1025003a 	cmpeq	r18,r2,zero
  80dd68:	9000451e 	bne	r18,zero,80de80 <_strtod_r+0xd88>
  80dd6c:	2005883a 	mov	r2,r4
  80dd70:	d8800715 	stw	r2,28(sp)
  80dd74:	d8c00815 	stw	r3,32(sp)
  80dd78:	e1c00117 	ldw	r7,4(fp)
  80dd7c:	009ff834 	movhi	r2,32736
  80dd80:	3cdffc2c 	andhi	r19,r7,32752
  80dd84:	98bfa11e 	bne	r19,r2,80dc0c <_strtod_r+0xb14>
  80dd88:	e1000017 	ldw	r4,0(fp)
  80dd8c:	01bf2c34 	movhi	r6,64688
  80dd90:	398d883a 	add	r6,r7,r6
  80dd94:	d9000b15 	stw	r4,44(sp)
  80dd98:	d9c00c15 	stw	r7,48(sp)
  80dd9c:	300b883a 	mov	r5,r6
  80dda0:	e1800115 	stw	r6,4(fp)
  80dda4:	080b8ac0 	call	80b8ac <__ulp>
  80dda8:	d9800717 	ldw	r6,28(sp)
  80ddac:	d9c00817 	ldw	r7,32(sp)
  80ddb0:	180b883a 	mov	r5,r3
  80ddb4:	1009883a 	mov	r4,r2
  80ddb8:	0810eac0 	call	810eac <__muldf3>
  80ddbc:	e2000017 	ldw	r8,0(fp)
  80ddc0:	e2400117 	ldw	r9,4(fp)
  80ddc4:	180b883a 	mov	r5,r3
  80ddc8:	1009883a 	mov	r4,r2
  80ddcc:	480f883a 	mov	r7,r9
  80ddd0:	400d883a 	mov	r6,r8
  80ddd4:	08022400 	call	802240 <__adddf3>
  80ddd8:	1009883a 	mov	r4,r2
  80dddc:	180b883a 	mov	r5,r3
  80dde0:	009f2834 	movhi	r2,31904
  80dde4:	10bfffc4 	addi	r2,r2,-1
  80dde8:	18dffc2c 	andhi	r3,r3,32752
  80ddec:	e1000015 	stw	r4,0(fp)
  80ddf0:	e1400115 	stw	r5,4(fp)
  80ddf4:	10c0722e 	bgeu	r2,r3,80dfc0 <_strtod_r+0xec8>
  80ddf8:	d8800c17 	ldw	r2,48(sp)
  80ddfc:	011ffc34 	movhi	r4,32752
  80de00:	213fffc4 	addi	r4,r4,-1
  80de04:	11007d26 	beq	r2,r4,80dffc <_strtod_r+0xf04>
  80de08:	01ffffc4 	movi	r7,-1
  80de0c:	e1000115 	stw	r4,4(fp)
  80de10:	e1c00015 	stw	r7,0(fp)
  80de14:	003fb206 	br	80dce0 <_strtod_r+0xbe8>
  80de18:	e0c00017 	ldw	r3,0(fp)
  80de1c:	1800251e 	bne	r3,zero,80deb4 <_strtod_r+0xdbc>
  80de20:	e0800117 	ldw	r2,4(fp)
  80de24:	00c00434 	movhi	r3,16
  80de28:	18ffffc4 	addi	r3,r3,-1
  80de2c:	10c4703a 	and	r2,r2,r3
  80de30:	1000241e 	bne	r2,zero,80dec4 <_strtod_r+0xdcc>
  80de34:	0005883a 	mov	r2,zero
  80de38:	00cffc34 	movhi	r3,16368
  80de3c:	180f883a 	mov	r7,r3
  80de40:	8009883a 	mov	r4,r16
  80de44:	880b883a 	mov	r5,r17
  80de48:	100d883a 	mov	r6,r2
  80de4c:	08114900 	call	811490 <__ltdf2>
  80de50:	10014616 	blt	r2,zero,80e36c <_strtod_r+0x1274>
  80de54:	0005883a 	mov	r2,zero
  80de58:	00cff834 	movhi	r3,16352
  80de5c:	880b883a 	mov	r5,r17
  80de60:	8009883a 	mov	r4,r16
  80de64:	180f883a 	mov	r7,r3
  80de68:	100d883a 	mov	r6,r2
  80de6c:	0810eac0 	call	810eac <__muldf3>
  80de70:	1823883a 	mov	r17,r3
  80de74:	1021883a 	mov	r16,r2
  80de78:	18e0003c 	xorhi	r3,r3,32768
  80de7c:	003fbc06 	br	80dd70 <_strtod_r+0xc78>
  80de80:	2005883a 	mov	r2,r4
  80de84:	18e0003c 	xorhi	r3,r3,32768
  80de88:	003fb906 	br	80dd70 <_strtod_r+0xc78>
  80de8c:	3827883a 	mov	r19,r7
  80de90:	003f1606 	br	80daec <_strtod_r+0x9f4>
  80de94:	4091c83a 	sub	r8,r8,r2
  80de98:	003efe06 	br	80da94 <_strtod_r+0x99c>
  80de9c:	d9000f17 	ldw	r4,60(sp)
  80dea0:	0011883a 	mov	r8,zero
  80dea4:	0029883a 	mov	r20,zero
  80dea8:	0113c83a 	sub	r9,zero,r4
  80deac:	480f883a 	mov	r7,r9
  80deb0:	003ef506 	br	80da88 <_strtod_r+0x990>
  80deb4:	00800044 	movi	r2,1
  80deb8:	1880021e 	bne	r3,r2,80dec4 <_strtod_r+0xdcc>
  80debc:	e0800117 	ldw	r2,4(fp)
  80dec0:	1000c526 	beq	r2,zero,80e1d8 <_strtod_r+0x10e0>
  80dec4:	00affc34 	movhi	r2,49136
  80dec8:	0021883a 	mov	r16,zero
  80decc:	044ffc34 	movhi	r17,16368
  80ded0:	d8800815 	stw	r2,32(sp)
  80ded4:	d8000715 	stw	zero,28(sp)
  80ded8:	003f4806 	br	80dbfc <_strtod_r+0xb04>
  80dedc:	880b883a 	mov	r5,r17
  80dee0:	8009883a 	mov	r4,r16
  80dee4:	08116980 	call	811698 <__fixdfsi>
  80dee8:	1009883a 	mov	r4,r2
  80deec:	08115a00 	call	8115a0 <__floatsidf>
  80def0:	880b883a 	mov	r5,r17
  80def4:	8009883a 	mov	r4,r16
  80def8:	100d883a 	mov	r6,r2
  80defc:	180f883a 	mov	r7,r3
  80df00:	08021c00 	call	8021c0 <__subdf3>
  80df04:	100b883a 	mov	r5,r2
  80df08:	1021883a 	mov	r16,r2
  80df0c:	d8801a17 	ldw	r2,104(sp)
  80df10:	180d883a 	mov	r6,r3
  80df14:	1823883a 	mov	r17,r3
  80df18:	1000061e 	bne	r2,zero,80df34 <_strtod_r+0xe3c>
  80df1c:	e0800017 	ldw	r2,0(fp)
  80df20:	1000041e 	bne	r2,zero,80df34 <_strtod_r+0xe3c>
  80df24:	00c00434 	movhi	r3,16
  80df28:	18ffffc4 	addi	r3,r3,-1
  80df2c:	90c4703a 	and	r2,r18,r3
  80df30:	10004026 	beq	r2,zero,80e034 <_strtod_r+0xf3c>
  80df34:	00a52834 	movhi	r2,38048
  80df38:	108d6544 	addi	r2,r2,13717
  80df3c:	00cff834 	movhi	r3,16352
  80df40:	18ffffc4 	addi	r3,r3,-1
  80df44:	180f883a 	mov	r7,r3
  80df48:	8009883a 	mov	r4,r16
  80df4c:	880b883a 	mov	r5,r17
  80df50:	100d883a 	mov	r6,r2
  80df54:	08114900 	call	811490 <__ltdf2>
  80df58:	10000916 	blt	r2,zero,80df80 <_strtod_r+0xe88>
  80df5c:	008d6c34 	movhi	r2,13744
  80df60:	10b94d44 	addi	r2,r2,-6859
  80df64:	00cff834 	movhi	r3,16352
  80df68:	880b883a 	mov	r5,r17
  80df6c:	180f883a 	mov	r7,r3
  80df70:	8009883a 	mov	r4,r16
  80df74:	100d883a 	mov	r6,r2
  80df78:	08113800 	call	811380 <__gtdf2>
  80df7c:	00bf580e 	bge	zero,r2,80dce0 <_strtod_r+0xbe8>
  80df80:	d9400517 	ldw	r5,20(sp)
  80df84:	a809883a 	mov	r4,r21
  80df88:	080b6f00 	call	80b6f0 <_Bfree>
  80df8c:	a809883a 	mov	r4,r21
  80df90:	b80b883a 	mov	r5,r23
  80df94:	080b6f00 	call	80b6f0 <_Bfree>
  80df98:	a809883a 	mov	r4,r21
  80df9c:	b00b883a 	mov	r5,r22
  80dfa0:	080b6f00 	call	80b6f0 <_Bfree>
  80dfa4:	d9401017 	ldw	r5,64(sp)
  80dfa8:	a809883a 	mov	r4,r21
  80dfac:	080b6f00 	call	80b6f0 <_Bfree>
  80dfb0:	a809883a 	mov	r4,r21
  80dfb4:	a00b883a 	mov	r5,r20
  80dfb8:	080b6f00 	call	80b6f0 <_Bfree>
  80dfbc:	003cd806 	br	80d320 <_strtod_r+0x228>
  80dfc0:	0080d434 	movhi	r2,848
  80dfc4:	288d883a 	add	r6,r5,r2
  80dfc8:	e1800115 	stw	r6,4(fp)
  80dfcc:	003f3f06 	br	80dccc <_strtod_r+0xbd4>
  80dfd0:	8005883a 	mov	r2,r16
  80dfd4:	88e0003c 	xorhi	r3,r17,32768
  80dfd8:	003f2206 	br	80dc64 <_strtod_r+0xb6c>
  80dfdc:	1009883a 	mov	r4,r2
  80dfe0:	080250c0 	call	80250c <__floatunsidf>
  80dfe4:	1021883a 	mov	r16,r2
  80dfe8:	1823883a 	mov	r17,r3
  80dfec:	003f1a06 	br	80dc58 <_strtod_r+0xb60>
  80dff0:	dc000417 	ldw	r16,16(sp)
  80dff4:	31800044 	addi	r6,r6,1
  80dff8:	003e5606 	br	80d954 <_strtod_r+0x85c>
  80dffc:	d8c00b17 	ldw	r3,44(sp)
  80e000:	00bfffc4 	movi	r2,-1
  80e004:	18bf801e 	bne	r3,r2,80de08 <_strtod_r+0xd10>
  80e008:	00c00884 	movi	r3,34
  80e00c:	a8c00015 	stw	r3,0(r21)
  80e010:	009ffc34 	movhi	r2,32752
  80e014:	e0800115 	stw	r2,4(fp)
  80e018:	e0000015 	stw	zero,0(fp)
  80e01c:	003fd806 	br	80df80 <_strtod_r+0xe88>
  80e020:	8025883a 	mov	r18,r16
  80e024:	0027883a 	mov	r19,zero
  80e028:	d8001215 	stw	zero,72(sp)
  80e02c:	d8001115 	stw	zero,68(sp)
  80e030:	003cac06 	br	80d2e4 <_strtod_r+0x1ec>
  80e034:	00a52834 	movhi	r2,38048
  80e038:	108d6544 	addi	r2,r2,13717
  80e03c:	00cff434 	movhi	r3,16336
  80e040:	18ffffc4 	addi	r3,r3,-1
  80e044:	2809883a 	mov	r4,r5
  80e048:	180f883a 	mov	r7,r3
  80e04c:	300b883a 	mov	r5,r6
  80e050:	100d883a 	mov	r6,r2
  80e054:	08114900 	call	811490 <__ltdf2>
  80e058:	103f210e 	bge	r2,zero,80dce0 <_strtod_r+0xbe8>
  80e05c:	003fc806 	br	80df80 <_strtod_r+0xe88>
  80e060:	00800044 	movi	r2,1
  80e064:	d8001815 	stw	zero,96(sp)
  80e068:	d8801b15 	stw	r2,108(sp)
  80e06c:	d8001715 	stw	zero,92(sp)
  80e070:	003ca206 	br	80d2fc <_strtod_r+0x204>
  80e074:	00800884 	movi	r2,34
  80e078:	a8800015 	stw	r2,0(r21)
  80e07c:	019ffc34 	movhi	r6,32752
  80e080:	e1800115 	stw	r6,4(fp)
  80e084:	e0000015 	stw	zero,0(fp)
  80e088:	003ca506 	br	80d320 <_strtod_r+0x228>
  80e08c:	011387c4 	movi	r4,19999
  80e090:	003d0206 	br	80d49c <_strtod_r+0x3a4>
  80e094:	180a90fa 	slli	r5,r3,3
  80e098:	e0800017 	ldw	r2,0(fp)
  80e09c:	e0c00117 	ldw	r3,4(fp)
  80e0a0:	01002074 	movhi	r4,129
  80e0a4:	2114bc04 	addi	r4,r4,21232
  80e0a8:	290b883a 	add	r5,r5,r4
  80e0ac:	2a000017 	ldw	r8,0(r5)
  80e0b0:	2a400117 	ldw	r9,4(r5)
  80e0b4:	1009883a 	mov	r4,r2
  80e0b8:	180b883a 	mov	r5,r3
  80e0bc:	480f883a 	mov	r7,r9
  80e0c0:	400d883a 	mov	r6,r8
  80e0c4:	0810eac0 	call	810eac <__muldf3>
  80e0c8:	e0c00115 	stw	r3,4(fp)
  80e0cc:	e0800015 	stw	r2,0(fp)
  80e0d0:	003c9306 	br	80d320 <_strtod_r+0x228>
  80e0d4:	d8800d17 	ldw	r2,52(sp)
  80e0d8:	e0800015 	stw	r2,0(fp)
  80e0dc:	d8c00e17 	ldw	r3,56(sp)
  80e0e0:	e0c00115 	stw	r3,4(fp)
  80e0e4:	9080020c 	andi	r2,r18,8
  80e0e8:	103c8d26 	beq	r2,zero,80d320 <_strtod_r+0x228>
  80e0ec:	e0800117 	ldw	r2,4(fp)
  80e0f0:	10a00034 	orhi	r2,r2,32768
  80e0f4:	e0800115 	stw	r2,4(fp)
  80e0f8:	003c8906 	br	80d320 <_strtod_r+0x228>
  80e0fc:	009ffc34 	movhi	r2,32752
  80e100:	e0800115 	stw	r2,4(fp)
  80e104:	e0000015 	stw	zero,0(fp)
  80e108:	003ff606 	br	80e0e4 <_strtod_r+0xfec>
  80e10c:	00a00034 	movhi	r2,32768
  80e110:	10bfffc4 	addi	r2,r2,-1
  80e114:	00ffffc4 	movi	r3,-1
  80e118:	e0800115 	stw	r2,4(fp)
  80e11c:	e0c00015 	stw	r3,0(fp)
  80e120:	003ff006 	br	80e0e4 <_strtod_r+0xfec>
  80e124:	e0000115 	stw	zero,4(fp)
  80e128:	e0000015 	stw	zero,0(fp)
  80e12c:	003fed06 	br	80e0e4 <_strtod_r+0xfec>
  80e130:	d8800e17 	ldw	r2,56(sp)
  80e134:	29010cc4 	addi	r4,r5,1075
  80e138:	00fffc34 	movhi	r3,65520
  80e13c:	18ffffc4 	addi	r3,r3,-1
  80e140:	2008953a 	slli	r4,r4,20
  80e144:	10c4703a 	and	r2,r2,r3
  80e148:	d8c00d17 	ldw	r3,52(sp)
  80e14c:	1104b03a 	or	r2,r2,r4
  80e150:	e0800115 	stw	r2,4(fp)
  80e154:	e0c00015 	stw	r3,0(fp)
  80e158:	003fe206 	br	80e0e4 <_strtod_r+0xfec>
  80e15c:	d8c01a17 	ldw	r3,104(sp)
  80e160:	1825003a 	cmpeq	r18,r3,zero
  80e164:	9000cf1e 	bne	r18,zero,80e4a4 <_strtod_r+0x13ac>
  80e168:	e1400117 	ldw	r5,4(fp)
  80e16c:	01000434 	movhi	r4,16
  80e170:	213fffc4 	addi	r4,r4,-1
  80e174:	2904703a 	and	r2,r5,r4
  80e178:	11006826 	beq	r2,r4,80e31c <_strtod_r+0x1224>
  80e17c:	e1c00017 	ldw	r7,0(fp)
  80e180:	3880004c 	andi	r2,r7,1
  80e184:	1005003a 	cmpeq	r2,r2,zero
  80e188:	1000601e 	bne	r2,zero,80e30c <_strtod_r+0x1214>
  80e18c:	90010426 	beq	r18,zero,80e5a0 <_strtod_r+0x14a8>
  80e190:	e4400117 	ldw	r17,4(fp)
  80e194:	3809883a 	mov	r4,r7
  80e198:	3821883a 	mov	r16,r7
  80e19c:	880b883a 	mov	r5,r17
  80e1a0:	080b8ac0 	call	80b8ac <__ulp>
  80e1a4:	180f883a 	mov	r7,r3
  80e1a8:	880b883a 	mov	r5,r17
  80e1ac:	8009883a 	mov	r4,r16
  80e1b0:	100d883a 	mov	r6,r2
  80e1b4:	08021c00 	call	8021c0 <__subdf3>
  80e1b8:	1009883a 	mov	r4,r2
  80e1bc:	000d883a 	mov	r6,zero
  80e1c0:	000f883a 	mov	r7,zero
  80e1c4:	180b883a 	mov	r5,r3
  80e1c8:	e0800015 	stw	r2,0(fp)
  80e1cc:	e0c00115 	stw	r3,4(fp)
  80e1d0:	08112f80 	call	8112f8 <__nedf2>
  80e1d4:	10004d1e 	bne	r2,zero,80e30c <_strtod_r+0x1214>
  80e1d8:	00800884 	movi	r2,34
  80e1dc:	a8800015 	stw	r2,0(r21)
  80e1e0:	e0000015 	stw	zero,0(fp)
  80e1e4:	e0000115 	stw	zero,4(fp)
  80e1e8:	003f6506 	br	80df80 <_strtod_r+0xe88>
  80e1ec:	00800044 	movi	r2,1
  80e1f0:	d8801915 	stw	r2,100(sp)
  80e1f4:	003d4406 	br	80d708 <_strtod_r+0x610>
  80e1f8:	d8c01817 	ldw	r3,96(sp)
  80e1fc:	1985883a 	add	r2,r3,r6
  80e200:	11ffffc4 	addi	r7,r2,-1
  80e204:	39000044 	addi	r4,r7,1
  80e208:	00800204 	movi	r2,8
  80e20c:	d9001815 	stw	r4,96(sp)
  80e210:	11c0d716 	blt	r2,r7,80e570 <_strtod_r+0x1478>
  80e214:	d9001217 	ldw	r4,72(sp)
  80e218:	01400284 	movi	r5,10
  80e21c:	08026a00 	call	8026a0 <__mulsi3>
  80e220:	1585883a 	add	r2,r2,r22
  80e224:	d8801215 	stw	r2,72(sp)
  80e228:	000d883a 	mov	r6,zero
  80e22c:	84000044 	addi	r16,r16,1
  80e230:	dc000415 	stw	r16,16(sp)
  80e234:	84400007 	ldb	r17,0(r16)
  80e238:	003cfc06 	br	80d62c <_strtod_r+0x534>
  80e23c:	d8c01a17 	ldw	r3,104(sp)
  80e240:	1800321e 	bne	r3,zero,80e30c <_strtod_r+0x1214>
  80e244:	e0800017 	ldw	r2,0(fp)
  80e248:	1000b31e 	bne	r2,zero,80e518 <_strtod_r+0x1420>
  80e24c:	e0c00117 	ldw	r3,4(fp)
  80e250:	01000434 	movhi	r4,16
  80e254:	213fffc4 	addi	r4,r4,-1
  80e258:	1904703a 	and	r2,r3,r4
  80e25c:	1000e71e 	bne	r2,zero,80e5fc <_strtod_r+0x1504>
  80e260:	18dffc2c 	andhi	r3,r3,32752
  80e264:	0081ac34 	movhi	r2,1712
  80e268:	10c0282e 	bgeu	r2,r3,80e30c <_strtod_r+0x1214>
  80e26c:	a0800517 	ldw	r2,20(r20)
  80e270:	1000031e 	bne	r2,zero,80e280 <_strtod_r+0x1188>
  80e274:	a0c00417 	ldw	r3,16(r20)
  80e278:	00800044 	movi	r2,1
  80e27c:	10c0a60e 	bge	r2,r3,80e518 <_strtod_r+0x1420>
  80e280:	a00b883a 	mov	r5,r20
  80e284:	a809883a 	mov	r4,r21
  80e288:	01800044 	movi	r6,1
  80e28c:	080c0340 	call	80c034 <__lshift>
  80e290:	1009883a 	mov	r4,r2
  80e294:	b00b883a 	mov	r5,r22
  80e298:	1029883a 	mov	r20,r2
  80e29c:	080b84c0 	call	80b84c <__mcmp>
  80e2a0:	00809d0e 	bge	zero,r2,80e518 <_strtod_r+0x1420>
  80e2a4:	e1800117 	ldw	r6,4(fp)
  80e2a8:	d9001c17 	ldw	r4,112(sp)
  80e2ac:	2013003a 	cmpeq	r9,r4,zero
  80e2b0:	4800d61e 	bne	r9,zero,80e60c <_strtod_r+0x1514>
  80e2b4:	30dffc2c 	andhi	r3,r6,32752
  80e2b8:	0081ac34 	movhi	r2,1712
  80e2bc:	10c0d336 	bltu	r2,r3,80e60c <_strtod_r+0x1514>
  80e2c0:	0080dc34 	movhi	r2,880
  80e2c4:	10ffc42e 	bgeu	r2,r3,80e1d8 <_strtod_r+0x10e0>
  80e2c8:	e0800017 	ldw	r2,0(fp)
  80e2cc:	e0c00117 	ldw	r3,4(fp)
  80e2d0:	020e5434 	movhi	r8,14672
  80e2d4:	000d883a 	mov	r6,zero
  80e2d8:	400f883a 	mov	r7,r8
  80e2dc:	180b883a 	mov	r5,r3
  80e2e0:	1009883a 	mov	r4,r2
  80e2e4:	da000c15 	stw	r8,48(sp)
  80e2e8:	d8000b15 	stw	zero,44(sp)
  80e2ec:	0810eac0 	call	810eac <__muldf3>
  80e2f0:	e0800015 	stw	r2,0(fp)
  80e2f4:	e0c00115 	stw	r3,4(fp)
  80e2f8:	183f211e 	bne	r3,zero,80df80 <_strtod_r+0xe88>
  80e2fc:	103f201e 	bne	r2,zero,80df80 <_strtod_r+0xe88>
  80e300:	00800884 	movi	r2,34
  80e304:	a8800015 	stw	r2,0(r21)
  80e308:	003f1d06 	br	80df80 <_strtod_r+0xe88>
  80e30c:	d9001c17 	ldw	r4,112(sp)
  80e310:	2013003a 	cmpeq	r9,r4,zero
  80e314:	483f1a1e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e318:	003feb06 	br	80e2c8 <_strtod_r+0x11d0>
  80e31c:	d8801c17 	ldw	r2,112(sp)
  80e320:	e1c00017 	ldw	r7,0(fp)
  80e324:	1013003a 	cmpeq	r9,r2,zero
  80e328:	4800c31e 	bne	r9,zero,80e638 <_strtod_r+0x1540>
  80e32c:	28dffc2c 	andhi	r3,r5,32752
  80e330:	0081a834 	movhi	r2,1696
  80e334:	10c0c036 	bltu	r2,r3,80e638 <_strtod_r+0x1540>
  80e338:	1804d53a 	srli	r2,r3,20
  80e33c:	00c01ac4 	movi	r3,107
  80e340:	013fffc4 	movi	r4,-1
  80e344:	1887c83a 	sub	r3,r3,r2
  80e348:	20c4983a 	sll	r2,r4,r3
  80e34c:	11ff8c1e 	bne	r2,r7,80e180 <_strtod_r+0x1088>
  80e350:	28dffc2c 	andhi	r3,r5,32752
  80e354:	00800434 	movhi	r2,16
  80e358:	188d883a 	add	r6,r3,r2
  80e35c:	e1800115 	stw	r6,4(fp)
  80e360:	e0000015 	stw	zero,0(fp)
  80e364:	483f061e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e368:	003fd706 	br	80e2c8 <_strtod_r+0x11d0>
  80e36c:	0021883a 	mov	r16,zero
  80e370:	0005883a 	mov	r2,zero
  80e374:	044ff834 	movhi	r17,16352
  80e378:	00eff834 	movhi	r3,49120
  80e37c:	003e7c06 	br	80dd70 <_strtod_r+0xc78>
  80e380:	803d9226 	beq	r16,zero,80d9cc <_strtod_r+0x8d4>
  80e384:	0421c83a 	sub	r16,zero,r16
  80e388:	814003cc 	andi	r5,r16,15
  80e38c:	28000f26 	beq	r5,zero,80e3cc <_strtod_r+0x12d4>
  80e390:	280a90fa 	slli	r5,r5,3
  80e394:	01002074 	movhi	r4,129
  80e398:	2114bc04 	addi	r4,r4,21232
  80e39c:	e0800017 	ldw	r2,0(fp)
  80e3a0:	290b883a 	add	r5,r5,r4
  80e3a4:	2a000017 	ldw	r8,0(r5)
  80e3a8:	e0c00117 	ldw	r3,4(fp)
  80e3ac:	2a400117 	ldw	r9,4(r5)
  80e3b0:	1009883a 	mov	r4,r2
  80e3b4:	180b883a 	mov	r5,r3
  80e3b8:	480f883a 	mov	r7,r9
  80e3bc:	400d883a 	mov	r6,r8
  80e3c0:	08022b40 	call	8022b4 <__divdf3>
  80e3c4:	e0c00115 	stw	r3,4(fp)
  80e3c8:	e0800015 	stw	r2,0(fp)
  80e3cc:	8021d13a 	srai	r16,r16,4
  80e3d0:	803d7e26 	beq	r16,zero,80d9cc <_strtod_r+0x8d4>
  80e3d4:	008007c4 	movi	r2,31
  80e3d8:	14002d16 	blt	r2,r16,80e490 <_strtod_r+0x1398>
  80e3dc:	8080040c 	andi	r2,r16,16
  80e3e0:	10009d26 	beq	r2,zero,80e658 <_strtod_r+0x1560>
  80e3e4:	01001a84 	movi	r4,106
  80e3e8:	d9001c15 	stw	r4,112(sp)
  80e3ec:	0400110e 	bge	zero,r16,80e434 <_strtod_r+0x133c>
  80e3f0:	04402074 	movhi	r17,129
  80e3f4:	8c550904 	addi	r17,r17,21540
  80e3f8:	8080004c 	andi	r2,r16,1
  80e3fc:	1005003a 	cmpeq	r2,r2,zero
  80e400:	1000091e 	bne	r2,zero,80e428 <_strtod_r+0x1330>
  80e404:	e0800017 	ldw	r2,0(fp)
  80e408:	e0c00117 	ldw	r3,4(fp)
  80e40c:	89800017 	ldw	r6,0(r17)
  80e410:	89c00117 	ldw	r7,4(r17)
  80e414:	180b883a 	mov	r5,r3
  80e418:	1009883a 	mov	r4,r2
  80e41c:	0810eac0 	call	810eac <__muldf3>
  80e420:	e0c00115 	stw	r3,4(fp)
  80e424:	e0800015 	stw	r2,0(fp)
  80e428:	8021d07a 	srai	r16,r16,1
  80e42c:	8c400204 	addi	r17,r17,8
  80e430:	043ff116 	blt	zero,r16,80e3f8 <_strtod_r+0x1300>
  80e434:	d8801c17 	ldw	r2,112(sp)
  80e438:	10000d26 	beq	r2,zero,80e470 <_strtod_r+0x1378>
  80e43c:	e1000117 	ldw	r4,4(fp)
  80e440:	00c01ac4 	movi	r3,107
  80e444:	209ffc2c 	andhi	r2,r4,32752
  80e448:	1004d53a 	srli	r2,r2,20
  80e44c:	1887c83a 	sub	r3,r3,r2
  80e450:	00c0070e 	bge	zero,r3,80e470 <_strtod_r+0x1378>
  80e454:	008007c4 	movi	r2,31
  80e458:	10c0940e 	bge	r2,r3,80e6ac <_strtod_r+0x15b4>
  80e45c:	00800d04 	movi	r2,52
  80e460:	e0000015 	stw	zero,0(fp)
  80e464:	10c08b0e 	bge	r2,r3,80e694 <_strtod_r+0x159c>
  80e468:	0180dc34 	movhi	r6,880
  80e46c:	e1800115 	stw	r6,4(fp)
  80e470:	e0800017 	ldw	r2,0(fp)
  80e474:	e0c00117 	ldw	r3,4(fp)
  80e478:	000d883a 	mov	r6,zero
  80e47c:	000f883a 	mov	r7,zero
  80e480:	180b883a 	mov	r5,r3
  80e484:	1009883a 	mov	r4,r2
  80e488:	08112f80 	call	8112f8 <__nedf2>
  80e48c:	103d501e 	bne	r2,zero,80d9d0 <_strtod_r+0x8d8>
  80e490:	00800884 	movi	r2,34
  80e494:	a8800015 	stw	r2,0(r21)
  80e498:	e0000015 	stw	zero,0(fp)
  80e49c:	e0000115 	stw	zero,4(fp)
  80e4a0:	003b9f06 	br	80d320 <_strtod_r+0x228>
  80e4a4:	e1800117 	ldw	r6,4(fp)
  80e4a8:	00c00434 	movhi	r3,16
  80e4ac:	18ffffc4 	addi	r3,r3,-1
  80e4b0:	30c4703a 	and	r2,r6,r3
  80e4b4:	103f311e 	bne	r2,zero,80e17c <_strtod_r+0x1084>
  80e4b8:	e1c00017 	ldw	r7,0(fp)
  80e4bc:	383f301e 	bne	r7,zero,80e180 <_strtod_r+0x1088>
  80e4c0:	003f7906 	br	80e2a8 <_strtod_r+0x11b0>
  80e4c4:	d8c00f17 	ldw	r3,60(sp)
  80e4c8:	00bffa84 	movi	r2,-22
  80e4cc:	18bcbf16 	blt	r3,r2,80d7cc <_strtod_r+0x6d4>
  80e4d0:	1809883a 	mov	r4,r3
  80e4d4:	017ffe04 	movi	r5,-8
  80e4d8:	08026a00 	call	8026a0 <__mulsi3>
  80e4dc:	00c02074 	movhi	r3,129
  80e4e0:	18d4bc04 	addi	r3,r3,21232
  80e4e4:	10c5883a 	add	r2,r2,r3
  80e4e8:	e2000017 	ldw	r8,0(fp)
  80e4ec:	e2400117 	ldw	r9,4(fp)
  80e4f0:	12800017 	ldw	r10,0(r2)
  80e4f4:	12c00117 	ldw	r11,4(r2)
  80e4f8:	480b883a 	mov	r5,r9
  80e4fc:	4009883a 	mov	r4,r8
  80e500:	580f883a 	mov	r7,r11
  80e504:	500d883a 	mov	r6,r10
  80e508:	08022b40 	call	8022b4 <__divdf3>
  80e50c:	e0c00115 	stw	r3,4(fp)
  80e510:	e0800015 	stw	r2,0(fp)
  80e514:	003b8206 	br	80d320 <_strtod_r+0x228>
  80e518:	d8801c17 	ldw	r2,112(sp)
  80e51c:	1013003a 	cmpeq	r9,r2,zero
  80e520:	483e971e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e524:	003f6806 	br	80e2c8 <_strtod_r+0x11d0>
  80e528:	00801a44 	movi	r2,105
  80e52c:	88bc5026 	beq	r17,r2,80d670 <_strtod_r+0x578>
  80e530:	00801b84 	movi	r2,110
  80e534:	88bb9b1e 	bne	r17,r2,80d3a4 <_strtod_r+0x2ac>
  80e538:	dc000404 	addi	r16,sp,16
  80e53c:	8009883a 	mov	r4,r16
  80e540:	01402074 	movhi	r5,129
  80e544:	29550804 	addi	r5,r5,21536
  80e548:	080d0b00 	call	80d0b0 <match>
  80e54c:	103b9526 	beq	r2,zero,80d3a4 <_strtod_r+0x2ac>
  80e550:	d8800417 	ldw	r2,16(sp)
  80e554:	00c00a04 	movi	r3,40
  80e558:	11000007 	ldb	r4,0(r2)
  80e55c:	20c04026 	beq	r4,r3,80e660 <_strtod_r+0x1568>
  80e560:	01bffe34 	movhi	r6,65528
  80e564:	e1800115 	stw	r6,4(fp)
  80e568:	e0000015 	stw	zero,0(fp)
  80e56c:	003b6c06 	br	80d320 <_strtod_r+0x228>
  80e570:	d8c01817 	ldw	r3,96(sp)
  80e574:	00800404 	movi	r2,16
  80e578:	10c00516 	blt	r2,r3,80e590 <_strtod_r+0x1498>
  80e57c:	d9001117 	ldw	r4,68(sp)
  80e580:	01400284 	movi	r5,10
  80e584:	08026a00 	call	8026a0 <__mulsi3>
  80e588:	1585883a 	add	r2,r2,r22
  80e58c:	d8801115 	stw	r2,68(sp)
  80e590:	000d883a 	mov	r6,zero
  80e594:	003f2506 	br	80e22c <_strtod_r+0x1134>
  80e598:	000d883a 	mov	r6,zero
  80e59c:	003ce306 	br	80d92c <_strtod_r+0x834>
  80e5a0:	e4400117 	ldw	r17,4(fp)
  80e5a4:	3809883a 	mov	r4,r7
  80e5a8:	3821883a 	mov	r16,r7
  80e5ac:	880b883a 	mov	r5,r17
  80e5b0:	080b8ac0 	call	80b8ac <__ulp>
  80e5b4:	180f883a 	mov	r7,r3
  80e5b8:	880b883a 	mov	r5,r17
  80e5bc:	8009883a 	mov	r4,r16
  80e5c0:	100d883a 	mov	r6,r2
  80e5c4:	08022400 	call	802240 <__adddf3>
  80e5c8:	180b883a 	mov	r5,r3
  80e5cc:	d8c01c17 	ldw	r3,112(sp)
  80e5d0:	1009883a 	mov	r4,r2
  80e5d4:	e1400115 	stw	r5,4(fp)
  80e5d8:	1813003a 	cmpeq	r9,r3,zero
  80e5dc:	e1000015 	stw	r4,0(fp)
  80e5e0:	483e671e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e5e4:	003f3806 	br	80e2c8 <_strtod_r+0x11d0>
  80e5e8:	0080d434 	movhi	r2,848
  80e5ec:	188d883a 	add	r6,r3,r2
  80e5f0:	d8001c15 	stw	zero,112(sp)
  80e5f4:	e1800115 	stw	r6,4(fp)
  80e5f8:	003cf506 	br	80d9d0 <_strtod_r+0x8d8>
  80e5fc:	d8c01c17 	ldw	r3,112(sp)
  80e600:	1813003a 	cmpeq	r9,r3,zero
  80e604:	483e5e1e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e608:	003f2f06 	br	80e2c8 <_strtod_r+0x11d0>
  80e60c:	309ffc2c 	andhi	r2,r6,32752
  80e610:	00fffc34 	movhi	r3,65520
  80e614:	10c5883a 	add	r2,r2,r3
  80e618:	00c00434 	movhi	r3,16
  80e61c:	18ffffc4 	addi	r3,r3,-1
  80e620:	10ccb03a 	or	r6,r2,r3
  80e624:	01ffffc4 	movi	r7,-1
  80e628:	e1800115 	stw	r6,4(fp)
  80e62c:	e1c00015 	stw	r7,0(fp)
  80e630:	483e531e 	bne	r9,zero,80df80 <_strtod_r+0xe88>
  80e634:	003f2406 	br	80e2c8 <_strtod_r+0x11d0>
  80e638:	00bfffc4 	movi	r2,-1
  80e63c:	003f4306 	br	80e34c <_strtod_r+0x1254>
  80e640:	0025883a 	mov	r18,zero
  80e644:	05802074 	movhi	r22,129
  80e648:	b594ee04 	addi	r22,r22,21432
  80e64c:	003c9206 	br	80d898 <_strtod_r+0x7a0>
  80e650:	d9c01817 	ldw	r7,96(sp)
  80e654:	003eeb06 	br	80e204 <_strtod_r+0x110c>
  80e658:	d8001c15 	stw	zero,112(sp)
  80e65c:	003f6306 	br	80e3ec <_strtod_r+0x12f4>
  80e660:	8009883a 	mov	r4,r16
  80e664:	01402074 	movhi	r5,129
  80e668:	29573604 	addi	r5,r5,23768
  80e66c:	d9800d04 	addi	r6,sp,52
  80e670:	080fc680 	call	80fc68 <__hexnan>
  80e674:	00c00144 	movi	r3,5
  80e678:	10ffb91e 	bne	r2,r3,80e560 <_strtod_r+0x1468>
  80e67c:	d8800e17 	ldw	r2,56(sp)
  80e680:	d9c00d17 	ldw	r7,52(sp)
  80e684:	119ffc34 	orhi	r6,r2,32752
  80e688:	e1800115 	stw	r6,4(fp)
  80e68c:	e1c00015 	stw	r7,0(fp)
  80e690:	003b2306 	br	80d320 <_strtod_r+0x228>
  80e694:	18fff804 	addi	r3,r3,-32
  80e698:	00bfffc4 	movi	r2,-1
  80e69c:	10c4983a 	sll	r2,r2,r3
  80e6a0:	208c703a 	and	r6,r4,r2
  80e6a4:	e1800115 	stw	r6,4(fp)
  80e6a8:	003f7106 	br	80e470 <_strtod_r+0x1378>
  80e6ac:	00bfffc4 	movi	r2,-1
  80e6b0:	10c4983a 	sll	r2,r2,r3
  80e6b4:	e0c00017 	ldw	r3,0(fp)
  80e6b8:	188e703a 	and	r7,r3,r2
  80e6bc:	e1c00015 	stw	r7,0(fp)
  80e6c0:	003f6b06 	br	80e470 <_strtod_r+0x1378>

0080e6c4 <strtof>:
  80e6c4:	defffa04 	addi	sp,sp,-24
  80e6c8:	dd000415 	stw	r20,16(sp)
  80e6cc:	05002074 	movhi	r20,129
  80e6d0:	a51bcd04 	addi	r20,r20,28468
  80e6d4:	2007883a 	mov	r3,r4
  80e6d8:	a1000017 	ldw	r4,0(r20)
  80e6dc:	280d883a 	mov	r6,r5
  80e6e0:	180b883a 	mov	r5,r3
  80e6e4:	dfc00515 	stw	ra,20(sp)
  80e6e8:	dcc00315 	stw	r19,12(sp)
  80e6ec:	dc800215 	stw	r18,8(sp)
  80e6f0:	dc400115 	stw	r17,4(sp)
  80e6f4:	dc000015 	stw	r16,0(sp)
  80e6f8:	080d0f80 	call	80d0f8 <_strtod_r>
  80e6fc:	180b883a 	mov	r5,r3
  80e700:	1009883a 	mov	r4,r2
  80e704:	1823883a 	mov	r17,r3
  80e708:	1021883a 	mov	r16,r2
  80e70c:	08117700 	call	811770 <__truncdfsf2>
  80e710:	1009883a 	mov	r4,r2
  80e714:	000b883a 	mov	r5,zero
  80e718:	1025883a 	mov	r18,r2
  80e71c:	1027883a 	mov	r19,r2
  80e720:	0810d440 	call	810d44 <__nesf2>
  80e724:	000d883a 	mov	r6,zero
  80e728:	000f883a 	mov	r7,zero
  80e72c:	8009883a 	mov	r4,r16
  80e730:	880b883a 	mov	r5,r17
  80e734:	10000e1e 	bne	r2,zero,80e770 <strtof+0xac>
  80e738:	08112f80 	call	8112f8 <__nedf2>
  80e73c:	10000c26 	beq	r2,zero,80e770 <strtof+0xac>
  80e740:	a0c00017 	ldw	r3,0(r20)
  80e744:	00800884 	movi	r2,34
  80e748:	18800015 	stw	r2,0(r3)
  80e74c:	9805883a 	mov	r2,r19
  80e750:	dfc00517 	ldw	ra,20(sp)
  80e754:	dd000417 	ldw	r20,16(sp)
  80e758:	dcc00317 	ldw	r19,12(sp)
  80e75c:	dc800217 	ldw	r18,8(sp)
  80e760:	dc400117 	ldw	r17,4(sp)
  80e764:	dc000017 	ldw	r16,0(sp)
  80e768:	dec00604 	addi	sp,sp,24
  80e76c:	f800283a 	ret
  80e770:	9009883a 	mov	r4,r18
  80e774:	015fe034 	movhi	r5,32640
  80e778:	297fffc4 	addi	r5,r5,-1
  80e77c:	0810dbc0 	call	810dbc <__gtsf2>
  80e780:	00ffffc4 	movi	r3,-1
  80e784:	011ffc34 	movhi	r4,32752
  80e788:	213fffc4 	addi	r4,r4,-1
  80e78c:	200f883a 	mov	r7,r4
  80e790:	180d883a 	mov	r6,r3
  80e794:	8009883a 	mov	r4,r16
  80e798:	880b883a 	mov	r5,r17
  80e79c:	00800f16 	blt	zero,r2,80e7dc <strtof+0x118>
  80e7a0:	9009883a 	mov	r4,r18
  80e7a4:	017fe034 	movhi	r5,65408
  80e7a8:	297fffc4 	addi	r5,r5,-1
  80e7ac:	0810e340 	call	810e34 <__ltsf2>
  80e7b0:	023fffc4 	movi	r8,-1
  80e7b4:	027ffc34 	movhi	r9,65520
  80e7b8:	4a7fffc4 	addi	r9,r9,-1
  80e7bc:	880b883a 	mov	r5,r17
  80e7c0:	480f883a 	mov	r7,r9
  80e7c4:	8009883a 	mov	r4,r16
  80e7c8:	400d883a 	mov	r6,r8
  80e7cc:	103fdf0e 	bge	r2,zero,80e74c <strtof+0x88>
  80e7d0:	08114900 	call	811490 <__ltdf2>
  80e7d4:	103fda0e 	bge	r2,zero,80e740 <strtof+0x7c>
  80e7d8:	003fdc06 	br	80e74c <strtof+0x88>
  80e7dc:	08113800 	call	811380 <__gtdf2>
  80e7e0:	00bfd70e 	bge	zero,r2,80e740 <strtof+0x7c>
  80e7e4:	003fee06 	br	80e7a0 <strtof+0xdc>

0080e7e8 <strtod>:
  80e7e8:	01802074 	movhi	r6,129
  80e7ec:	319bcd04 	addi	r6,r6,28468
  80e7f0:	2007883a 	mov	r3,r4
  80e7f4:	31000017 	ldw	r4,0(r6)
  80e7f8:	280d883a 	mov	r6,r5
  80e7fc:	180b883a 	mov	r5,r3
  80e800:	080d0f81 	jmpi	80d0f8 <_strtod_r>

0080e804 <_strtol_r>:
  80e804:	defff304 	addi	sp,sp,-52
  80e808:	00802074 	movhi	r2,129
  80e80c:	109bcc04 	addi	r2,r2,28464
  80e810:	dd000715 	stw	r20,28(sp)
  80e814:	15000017 	ldw	r20,0(r2)
  80e818:	ddc00a15 	stw	r23,40(sp)
  80e81c:	dc800515 	stw	r18,20(sp)
  80e820:	dc400415 	stw	r17,16(sp)
  80e824:	dfc00c15 	stw	ra,48(sp)
  80e828:	df000b15 	stw	fp,44(sp)
  80e82c:	dd800915 	stw	r22,36(sp)
  80e830:	dd400815 	stw	r21,32(sp)
  80e834:	dcc00615 	stw	r19,24(sp)
  80e838:	dc000315 	stw	r16,12(sp)
  80e83c:	282f883a 	mov	r23,r5
  80e840:	d9000115 	stw	r4,4(sp)
  80e844:	d9800215 	stw	r6,8(sp)
  80e848:	3825883a 	mov	r18,r7
  80e84c:	2823883a 	mov	r17,r5
  80e850:	8c000007 	ldb	r16,0(r17)
  80e854:	8c400044 	addi	r17,r17,1
  80e858:	a407883a 	add	r3,r20,r16
  80e85c:	18800003 	ldbu	r2,0(r3)
  80e860:	1080020c 	andi	r2,r2,8
  80e864:	103ffa1e 	bne	r2,zero,80e850 <_strtol_r+0x4c>
  80e868:	00800b44 	movi	r2,45
  80e86c:	80805c26 	beq	r16,r2,80e9e0 <_strtol_r+0x1dc>
  80e870:	00800ac4 	movi	r2,43
  80e874:	80805726 	beq	r16,r2,80e9d4 <_strtol_r+0x1d0>
  80e878:	d8000015 	stw	zero,0(sp)
  80e87c:	9007003a 	cmpeq	r3,r18,zero
  80e880:	1800431e 	bne	r3,zero,80e990 <_strtol_r+0x18c>
  80e884:	00800404 	movi	r2,16
  80e888:	90804126 	beq	r18,r2,80e990 <_strtol_r+0x18c>
  80e88c:	902b883a 	mov	r21,r18
  80e890:	d8c00017 	ldw	r3,0(sp)
  80e894:	1838c03a 	cmpne	fp,r3,zero
  80e898:	e0004a1e 	bne	fp,zero,80e9c4 <_strtol_r+0x1c0>
  80e89c:	04e00034 	movhi	r19,32768
  80e8a0:	9cffffc4 	addi	r19,r19,-1
  80e8a4:	9809883a 	mov	r4,r19
  80e8a8:	a80b883a 	mov	r5,r21
  80e8ac:	08119280 	call	811928 <__umodsi3>
  80e8b0:	9809883a 	mov	r4,r19
  80e8b4:	a80b883a 	mov	r5,r21
  80e8b8:	102d883a 	mov	r22,r2
  80e8bc:	08119200 	call	811920 <__udivsi3>
  80e8c0:	1027883a 	mov	r19,r2
  80e8c4:	a405883a 	add	r2,r20,r16
  80e8c8:	11400003 	ldbu	r5,0(r2)
  80e8cc:	0009883a 	mov	r4,zero
  80e8d0:	000d883a 	mov	r6,zero
  80e8d4:	28c0010c 	andi	r3,r5,4
  80e8d8:	18000f26 	beq	r3,zero,80e918 <_strtol_r+0x114>
  80e8dc:	843ff404 	addi	r16,r16,-48
  80e8e0:	8480150e 	bge	r16,r18,80e938 <_strtol_r+0x134>
  80e8e4:	30003216 	blt	r6,zero,80e9b0 <_strtol_r+0x1ac>
  80e8e8:	99003136 	bltu	r19,r4,80e9b0 <_strtol_r+0x1ac>
  80e8ec:	24c02f26 	beq	r4,r19,80e9ac <_strtol_r+0x1a8>
  80e8f0:	a80b883a 	mov	r5,r21
  80e8f4:	08026a00 	call	8026a0 <__mulsi3>
  80e8f8:	1409883a 	add	r4,r2,r16
  80e8fc:	01800044 	movi	r6,1
  80e900:	8c000007 	ldb	r16,0(r17)
  80e904:	8c400044 	addi	r17,r17,1
  80e908:	a405883a 	add	r2,r20,r16
  80e90c:	11400003 	ldbu	r5,0(r2)
  80e910:	28c0010c 	andi	r3,r5,4
  80e914:	183ff11e 	bne	r3,zero,80e8dc <_strtol_r+0xd8>
  80e918:	288000cc 	andi	r2,r5,3
  80e91c:	10000626 	beq	r2,zero,80e938 <_strtol_r+0x134>
  80e920:	2880004c 	andi	r2,r5,1
  80e924:	1005003a 	cmpeq	r2,r2,zero
  80e928:	1000231e 	bne	r2,zero,80e9b8 <_strtol_r+0x1b4>
  80e92c:	00800dc4 	movi	r2,55
  80e930:	80a1c83a 	sub	r16,r16,r2
  80e934:	84bfeb16 	blt	r16,r18,80e8e4 <_strtol_r+0xe0>
  80e938:	30002e16 	blt	r6,zero,80e9f4 <_strtol_r+0x1f0>
  80e93c:	e000231e 	bne	fp,zero,80e9cc <_strtol_r+0x1c8>
  80e940:	2007883a 	mov	r3,r4
  80e944:	d8800217 	ldw	r2,8(sp)
  80e948:	10000426 	beq	r2,zero,80e95c <_strtol_r+0x158>
  80e94c:	30000126 	beq	r6,zero,80e954 <_strtol_r+0x150>
  80e950:	8dffffc4 	addi	r23,r17,-1
  80e954:	d9000217 	ldw	r4,8(sp)
  80e958:	25c00015 	stw	r23,0(r4)
  80e95c:	1805883a 	mov	r2,r3
  80e960:	dfc00c17 	ldw	ra,48(sp)
  80e964:	df000b17 	ldw	fp,44(sp)
  80e968:	ddc00a17 	ldw	r23,40(sp)
  80e96c:	dd800917 	ldw	r22,36(sp)
  80e970:	dd400817 	ldw	r21,32(sp)
  80e974:	dd000717 	ldw	r20,28(sp)
  80e978:	dcc00617 	ldw	r19,24(sp)
  80e97c:	dc800517 	ldw	r18,20(sp)
  80e980:	dc400417 	ldw	r17,16(sp)
  80e984:	dc000317 	ldw	r16,12(sp)
  80e988:	dec00d04 	addi	sp,sp,52
  80e98c:	f800283a 	ret
  80e990:	00800c04 	movi	r2,48
  80e994:	80801f26 	beq	r16,r2,80ea14 <_strtol_r+0x210>
  80e998:	183fbc26 	beq	r3,zero,80e88c <_strtol_r+0x88>
  80e99c:	00800c04 	movi	r2,48
  80e9a0:	80802926 	beq	r16,r2,80ea48 <_strtol_r+0x244>
  80e9a4:	04800284 	movi	r18,10
  80e9a8:	003fb806 	br	80e88c <_strtol_r+0x88>
  80e9ac:	b43fd00e 	bge	r22,r16,80e8f0 <_strtol_r+0xec>
  80e9b0:	01bfffc4 	movi	r6,-1
  80e9b4:	003fd206 	br	80e900 <_strtol_r+0xfc>
  80e9b8:	008015c4 	movi	r2,87
  80e9bc:	80a1c83a 	sub	r16,r16,r2
  80e9c0:	003fdc06 	br	80e934 <_strtol_r+0x130>
  80e9c4:	04e00034 	movhi	r19,32768
  80e9c8:	003fb606 	br	80e8a4 <_strtol_r+0xa0>
  80e9cc:	0107c83a 	sub	r3,zero,r4
  80e9d0:	003fdc06 	br	80e944 <_strtol_r+0x140>
  80e9d4:	8c000007 	ldb	r16,0(r17)
  80e9d8:	8c400044 	addi	r17,r17,1
  80e9dc:	003fa606 	br	80e878 <_strtol_r+0x74>
  80e9e0:	8c000007 	ldb	r16,0(r17)
  80e9e4:	00800044 	movi	r2,1
  80e9e8:	8c400044 	addi	r17,r17,1
  80e9ec:	d8800015 	stw	r2,0(sp)
  80e9f0:	003fa206 	br	80e87c <_strtol_r+0x78>
  80e9f4:	d9000017 	ldw	r4,0(sp)
  80e9f8:	2005003a 	cmpeq	r2,r4,zero
  80e9fc:	10000f1e 	bne	r2,zero,80ea3c <_strtol_r+0x238>
  80ea00:	00e00034 	movhi	r3,32768
  80ea04:	d9000117 	ldw	r4,4(sp)
  80ea08:	00800884 	movi	r2,34
  80ea0c:	20800015 	stw	r2,0(r4)
  80ea10:	003fcc06 	br	80e944 <_strtol_r+0x140>
  80ea14:	89000007 	ldb	r4,0(r17)
  80ea18:	00801e04 	movi	r2,120
  80ea1c:	20800226 	beq	r4,r2,80ea28 <_strtol_r+0x224>
  80ea20:	00801604 	movi	r2,88
  80ea24:	20bfdc1e 	bne	r4,r2,80e998 <_strtol_r+0x194>
  80ea28:	8c000047 	ldb	r16,1(r17)
  80ea2c:	04800404 	movi	r18,16
  80ea30:	8c400084 	addi	r17,r17,2
  80ea34:	902b883a 	mov	r21,r18
  80ea38:	003f9506 	br	80e890 <_strtol_r+0x8c>
  80ea3c:	00e00034 	movhi	r3,32768
  80ea40:	18ffffc4 	addi	r3,r3,-1
  80ea44:	003fef06 	br	80ea04 <_strtol_r+0x200>
  80ea48:	04800204 	movi	r18,8
  80ea4c:	902b883a 	mov	r21,r18
  80ea50:	003f8f06 	br	80e890 <_strtol_r+0x8c>

0080ea54 <strtol>:
  80ea54:	00802074 	movhi	r2,129
  80ea58:	109bcd04 	addi	r2,r2,28468
  80ea5c:	2013883a 	mov	r9,r4
  80ea60:	11000017 	ldw	r4,0(r2)
  80ea64:	2805883a 	mov	r2,r5
  80ea68:	300f883a 	mov	r7,r6
  80ea6c:	480b883a 	mov	r5,r9
  80ea70:	100d883a 	mov	r6,r2
  80ea74:	080e8041 	jmpi	80e804 <_strtol_r>

0080ea78 <_strtoll_r>:
  80ea78:	defff004 	addi	sp,sp,-64
  80ea7c:	00802074 	movhi	r2,129
  80ea80:	109bcc04 	addi	r2,r2,28464
  80ea84:	df000e15 	stw	fp,56(sp)
  80ea88:	17000017 	ldw	fp,0(r2)
  80ea8c:	ddc00d15 	stw	r23,52(sp)
  80ea90:	dd000a15 	stw	r20,40(sp)
  80ea94:	dfc00f15 	stw	ra,60(sp)
  80ea98:	dd800c15 	stw	r22,48(sp)
  80ea9c:	dd400b15 	stw	r21,44(sp)
  80eaa0:	dcc00915 	stw	r19,36(sp)
  80eaa4:	dc800815 	stw	r18,32(sp)
  80eaa8:	dc400715 	stw	r17,28(sp)
  80eaac:	dc000615 	stw	r16,24(sp)
  80eab0:	d9400315 	stw	r5,12(sp)
  80eab4:	d9000215 	stw	r4,8(sp)
  80eab8:	d9800415 	stw	r6,16(sp)
  80eabc:	382f883a 	mov	r23,r7
  80eac0:	2829883a 	mov	r20,r5
  80eac4:	a4c00007 	ldb	r19,0(r20)
  80eac8:	a5000044 	addi	r20,r20,1
  80eacc:	e4c7883a 	add	r3,fp,r19
  80ead0:	18800003 	ldbu	r2,0(r3)
  80ead4:	1080020c 	andi	r2,r2,8
  80ead8:	103ffa1e 	bne	r2,zero,80eac4 <_strtoll_r+0x4c>
  80eadc:	00800b44 	movi	r2,45
  80eae0:	98808826 	beq	r19,r2,80ed04 <_strtoll_r+0x28c>
  80eae4:	00800ac4 	movi	r2,43
  80eae8:	98808326 	beq	r19,r2,80ecf8 <_strtoll_r+0x280>
  80eaec:	d8000115 	stw	zero,4(sp)
  80eaf0:	b807003a 	cmpeq	r3,r23,zero
  80eaf4:	18005f1e 	bne	r3,zero,80ec74 <_strtoll_r+0x1fc>
  80eaf8:	00800404 	movi	r2,16
  80eafc:	b8805d26 	beq	r23,r2,80ec74 <_strtoll_r+0x1fc>
  80eb00:	b82dd7fa 	srai	r22,r23,31
  80eb04:	b82b883a 	mov	r21,r23
  80eb08:	d8c00117 	ldw	r3,4(sp)
  80eb0c:	1806c03a 	cmpne	r3,r3,zero
  80eb10:	d8c00515 	stw	r3,20(sp)
  80eb14:	1800631e 	bne	r3,zero,80eca4 <_strtoll_r+0x22c>
  80eb18:	043fffc4 	movi	r16,-1
  80eb1c:	04600034 	movhi	r17,32768
  80eb20:	8c7fffc4 	addi	r17,r17,-1
  80eb24:	880b883a 	mov	r5,r17
  80eb28:	8009883a 	mov	r4,r16
  80eb2c:	a80d883a 	mov	r6,r21
  80eb30:	b00f883a 	mov	r7,r22
  80eb34:	08106e40 	call	8106e4 <__umoddi3>
  80eb38:	880b883a 	mov	r5,r17
  80eb3c:	8009883a 	mov	r4,r16
  80eb40:	b00f883a 	mov	r7,r22
  80eb44:	a80d883a 	mov	r6,r21
  80eb48:	d8800015 	stw	r2,0(sp)
  80eb4c:	08100780 	call	810078 <__udivdi3>
  80eb50:	1023883a 	mov	r17,r2
  80eb54:	e4c5883a 	add	r2,fp,r19
  80eb58:	11000003 	ldbu	r4,0(r2)
  80eb5c:	1825883a 	mov	r18,r3
  80eb60:	0015883a 	mov	r10,zero
  80eb64:	20c0010c 	andi	r3,r4,4
  80eb68:	0017883a 	mov	r11,zero
  80eb6c:	000f883a 	mov	r7,zero
  80eb70:	18001a26 	beq	r3,zero,80ebdc <_strtoll_r+0x164>
  80eb74:	9c3ff404 	addi	r16,r19,-48
  80eb78:	85c0200e 	bge	r16,r23,80ebfc <_strtoll_r+0x184>
  80eb7c:	38003b16 	blt	r7,zero,80ec6c <_strtoll_r+0x1f4>
  80eb80:	92c03a36 	bltu	r18,r11,80ec6c <_strtoll_r+0x1f4>
  80eb84:	5c803826 	beq	r11,r18,80ec68 <_strtoll_r+0x1f0>
  80eb88:	54404c26 	beq	r10,r17,80ecbc <_strtoll_r+0x244>
  80eb8c:	580b883a 	mov	r5,r11
  80eb90:	5009883a 	mov	r4,r10
  80eb94:	a80d883a 	mov	r6,r21
  80eb98:	b00f883a 	mov	r7,r22
  80eb9c:	080feb00 	call	80feb0 <__muldi3>
  80eba0:	8013d7fa 	srai	r9,r16,31
  80eba4:	100d883a 	mov	r6,r2
  80eba8:	1405883a 	add	r2,r2,r16
  80ebac:	118d803a 	cmpltu	r6,r2,r6
  80ebb0:	1a47883a 	add	r3,r3,r9
  80ebb4:	30cd883a 	add	r6,r6,r3
  80ebb8:	1015883a 	mov	r10,r2
  80ebbc:	3017883a 	mov	r11,r6
  80ebc0:	01c00044 	movi	r7,1
  80ebc4:	a4c00007 	ldb	r19,0(r20)
  80ebc8:	a5000044 	addi	r20,r20,1
  80ebcc:	e4c5883a 	add	r2,fp,r19
  80ebd0:	11000003 	ldbu	r4,0(r2)
  80ebd4:	20c0010c 	andi	r3,r4,4
  80ebd8:	183fe61e 	bne	r3,zero,80eb74 <_strtoll_r+0xfc>
  80ebdc:	208000cc 	andi	r2,r4,3
  80ebe0:	10000626 	beq	r2,zero,80ebfc <_strtoll_r+0x184>
  80ebe4:	2080004c 	andi	r2,r4,1
  80ebe8:	1005003a 	cmpeq	r2,r2,zero
  80ebec:	1000301e 	bne	r2,zero,80ecb0 <_strtoll_r+0x238>
  80ebf0:	02000dc4 	movi	r8,55
  80ebf4:	9a21c83a 	sub	r16,r19,r8
  80ebf8:	85ffe016 	blt	r16,r23,80eb7c <_strtoll_r+0x104>
  80ebfc:	38004616 	blt	r7,zero,80ed18 <_strtoll_r+0x2a0>
  80ec00:	d8800517 	ldw	r2,20(sp)
  80ec04:	1000341e 	bne	r2,zero,80ecd8 <_strtoll_r+0x260>
  80ec08:	500b883a 	mov	r5,r10
  80ec0c:	580d883a 	mov	r6,r11
  80ec10:	d8c00417 	ldw	r3,16(sp)
  80ec14:	18000626 	beq	r3,zero,80ec30 <_strtoll_r+0x1b8>
  80ec18:	38000226 	beq	r7,zero,80ec24 <_strtoll_r+0x1ac>
  80ec1c:	a53fffc4 	addi	r20,r20,-1
  80ec20:	dd000315 	stw	r20,12(sp)
  80ec24:	d8c00317 	ldw	r3,12(sp)
  80ec28:	d8800417 	ldw	r2,16(sp)
  80ec2c:	10c00015 	stw	r3,0(r2)
  80ec30:	2805883a 	mov	r2,r5
  80ec34:	3007883a 	mov	r3,r6
  80ec38:	dfc00f17 	ldw	ra,60(sp)
  80ec3c:	df000e17 	ldw	fp,56(sp)
  80ec40:	ddc00d17 	ldw	r23,52(sp)
  80ec44:	dd800c17 	ldw	r22,48(sp)
  80ec48:	dd400b17 	ldw	r21,44(sp)
  80ec4c:	dd000a17 	ldw	r20,40(sp)
  80ec50:	dcc00917 	ldw	r19,36(sp)
  80ec54:	dc800817 	ldw	r18,32(sp)
  80ec58:	dc400717 	ldw	r17,28(sp)
  80ec5c:	dc000617 	ldw	r16,24(sp)
  80ec60:	dec01004 	addi	sp,sp,64
  80ec64:	f800283a 	ret
  80ec68:	8abfc72e 	bgeu	r17,r10,80eb88 <_strtoll_r+0x110>
  80ec6c:	01ffffc4 	movi	r7,-1
  80ec70:	003fd406 	br	80ebc4 <_strtoll_r+0x14c>
  80ec74:	00800c04 	movi	r2,48
  80ec78:	98803226 	beq	r19,r2,80ed44 <_strtoll_r+0x2cc>
  80ec7c:	183fa026 	beq	r3,zero,80eb00 <_strtoll_r+0x88>
  80ec80:	00800c04 	movi	r2,48
  80ec84:	98803e26 	beq	r19,r2,80ed80 <_strtoll_r+0x308>
  80ec88:	d8c00117 	ldw	r3,4(sp)
  80ec8c:	05c00284 	movi	r23,10
  80ec90:	b82b883a 	mov	r21,r23
  80ec94:	1806c03a 	cmpne	r3,r3,zero
  80ec98:	002d883a 	mov	r22,zero
  80ec9c:	d8c00515 	stw	r3,20(sp)
  80eca0:	183f9d26 	beq	r3,zero,80eb18 <_strtoll_r+0xa0>
  80eca4:	0021883a 	mov	r16,zero
  80eca8:	04600034 	movhi	r17,32768
  80ecac:	003f9d06 	br	80eb24 <_strtoll_r+0xac>
  80ecb0:	020015c4 	movi	r8,87
  80ecb4:	9a21c83a 	sub	r16,r19,r8
  80ecb8:	003fcf06 	br	80ebf8 <_strtoll_r+0x180>
  80ecbc:	5cbfb31e 	bne	r11,r18,80eb8c <_strtoll_r+0x114>
  80ecc0:	d8800017 	ldw	r2,0(sp)
  80ecc4:	143fb10e 	bge	r2,r16,80eb8c <_strtoll_r+0x114>
  80ecc8:	8815883a 	mov	r10,r17
  80eccc:	9017883a 	mov	r11,r18
  80ecd0:	01ffffc4 	movi	r7,-1
  80ecd4:	003fbb06 	br	80ebc4 <_strtoll_r+0x14c>
  80ecd8:	0009883a 	mov	r4,zero
  80ecdc:	2285c83a 	sub	r2,r4,r10
  80ece0:	2089803a 	cmpltu	r4,r4,r2
  80ece4:	02c7c83a 	sub	r3,zero,r11
  80ece8:	1909c83a 	sub	r4,r3,r4
  80ecec:	100b883a 	mov	r5,r2
  80ecf0:	200d883a 	mov	r6,r4
  80ecf4:	003fc606 	br	80ec10 <_strtoll_r+0x198>
  80ecf8:	a4c00007 	ldb	r19,0(r20)
  80ecfc:	a5000044 	addi	r20,r20,1
  80ed00:	003f7a06 	br	80eaec <_strtoll_r+0x74>
  80ed04:	a4c00007 	ldb	r19,0(r20)
  80ed08:	00800044 	movi	r2,1
  80ed0c:	a5000044 	addi	r20,r20,1
  80ed10:	d8800115 	stw	r2,4(sp)
  80ed14:	003f7606 	br	80eaf0 <_strtoll_r+0x78>
  80ed18:	d8c00117 	ldw	r3,4(sp)
  80ed1c:	1805003a 	cmpeq	r2,r3,zero
  80ed20:	1000131e 	bne	r2,zero,80ed70 <_strtoll_r+0x2f8>
  80ed24:	0005883a 	mov	r2,zero
  80ed28:	00e00034 	movhi	r3,32768
  80ed2c:	100b883a 	mov	r5,r2
  80ed30:	180d883a 	mov	r6,r3
  80ed34:	d8c00217 	ldw	r3,8(sp)
  80ed38:	00800884 	movi	r2,34
  80ed3c:	18800015 	stw	r2,0(r3)
  80ed40:	003fb306 	br	80ec10 <_strtoll_r+0x198>
  80ed44:	a1000007 	ldb	r4,0(r20)
  80ed48:	00801e04 	movi	r2,120
  80ed4c:	20800226 	beq	r4,r2,80ed58 <_strtoll_r+0x2e0>
  80ed50:	00801604 	movi	r2,88
  80ed54:	20bfc91e 	bne	r4,r2,80ec7c <_strtoll_r+0x204>
  80ed58:	a4c00047 	ldb	r19,1(r20)
  80ed5c:	05c00404 	movi	r23,16
  80ed60:	b82b883a 	mov	r21,r23
  80ed64:	a5000084 	addi	r20,r20,2
  80ed68:	002d883a 	mov	r22,zero
  80ed6c:	003f6606 	br	80eb08 <_strtoll_r+0x90>
  80ed70:	017fffc4 	movi	r5,-1
  80ed74:	01a00034 	movhi	r6,32768
  80ed78:	31bfffc4 	addi	r6,r6,-1
  80ed7c:	003fed06 	br	80ed34 <_strtoll_r+0x2bc>
  80ed80:	05c00204 	movi	r23,8
  80ed84:	b82b883a 	mov	r21,r23
  80ed88:	002d883a 	mov	r22,zero
  80ed8c:	003f5e06 	br	80eb08 <_strtoll_r+0x90>

0080ed90 <_strtoul_r>:
  80ed90:	defff404 	addi	sp,sp,-48
  80ed94:	00802074 	movhi	r2,129
  80ed98:	109bcc04 	addi	r2,r2,28464
  80ed9c:	dd000615 	stw	r20,24(sp)
  80eda0:	15000017 	ldw	r20,0(r2)
  80eda4:	df000a15 	stw	fp,40(sp)
  80eda8:	ddc00915 	stw	r23,36(sp)
  80edac:	dc800415 	stw	r18,16(sp)
  80edb0:	dc400315 	stw	r17,12(sp)
  80edb4:	dfc00b15 	stw	ra,44(sp)
  80edb8:	dd800815 	stw	r22,32(sp)
  80edbc:	dd400715 	stw	r21,28(sp)
  80edc0:	dcc00515 	stw	r19,20(sp)
  80edc4:	dc000215 	stw	r16,8(sp)
  80edc8:	282f883a 	mov	r23,r5
  80edcc:	d9000115 	stw	r4,4(sp)
  80edd0:	3039883a 	mov	fp,r6
  80edd4:	3825883a 	mov	r18,r7
  80edd8:	2823883a 	mov	r17,r5
  80eddc:	8c000007 	ldb	r16,0(r17)
  80ede0:	8c400044 	addi	r17,r17,1
  80ede4:	a407883a 	add	r3,r20,r16
  80ede8:	18800003 	ldbu	r2,0(r3)
  80edec:	1080020c 	andi	r2,r2,8
  80edf0:	103ffa1e 	bne	r2,zero,80eddc <_strtoul_r+0x4c>
  80edf4:	00800b44 	movi	r2,45
  80edf8:	80805826 	beq	r16,r2,80ef5c <_strtoul_r+0x1cc>
  80edfc:	00800ac4 	movi	r2,43
  80ee00:	80805326 	beq	r16,r2,80ef50 <_strtoul_r+0x1c0>
  80ee04:	d8000015 	stw	zero,0(sp)
  80ee08:	9007003a 	cmpeq	r3,r18,zero
  80ee0c:	18003d1e 	bne	r3,zero,80ef04 <_strtoul_r+0x174>
  80ee10:	00800404 	movi	r2,16
  80ee14:	90803b26 	beq	r18,r2,80ef04 <_strtoul_r+0x174>
  80ee18:	013fffc4 	movi	r4,-1
  80ee1c:	900b883a 	mov	r5,r18
  80ee20:	08119200 	call	811920 <__udivsi3>
  80ee24:	013fffc4 	movi	r4,-1
  80ee28:	900b883a 	mov	r5,r18
  80ee2c:	1027883a 	mov	r19,r2
  80ee30:	08119280 	call	811928 <__umodsi3>
  80ee34:	102d883a 	mov	r22,r2
  80ee38:	902b883a 	mov	r21,r18
  80ee3c:	a405883a 	add	r2,r20,r16
  80ee40:	11400003 	ldbu	r5,0(r2)
  80ee44:	0009883a 	mov	r4,zero
  80ee48:	000d883a 	mov	r6,zero
  80ee4c:	28c0010c 	andi	r3,r5,4
  80ee50:	18000f26 	beq	r3,zero,80ee90 <_strtoul_r+0x100>
  80ee54:	843ff404 	addi	r16,r16,-48
  80ee58:	8480150e 	bge	r16,r18,80eeb0 <_strtoul_r+0x120>
  80ee5c:	30003516 	blt	r6,zero,80ef34 <_strtoul_r+0x1a4>
  80ee60:	99003436 	bltu	r19,r4,80ef34 <_strtoul_r+0x1a4>
  80ee64:	24c03226 	beq	r4,r19,80ef30 <_strtoul_r+0x1a0>
  80ee68:	a80b883a 	mov	r5,r21
  80ee6c:	08026a00 	call	8026a0 <__mulsi3>
  80ee70:	1409883a 	add	r4,r2,r16
  80ee74:	01800044 	movi	r6,1
  80ee78:	8c000007 	ldb	r16,0(r17)
  80ee7c:	8c400044 	addi	r17,r17,1
  80ee80:	a405883a 	add	r2,r20,r16
  80ee84:	11400003 	ldbu	r5,0(r2)
  80ee88:	28c0010c 	andi	r3,r5,4
  80ee8c:	183ff11e 	bne	r3,zero,80ee54 <_strtoul_r+0xc4>
  80ee90:	288000cc 	andi	r2,r5,3
  80ee94:	10000626 	beq	r2,zero,80eeb0 <_strtoul_r+0x120>
  80ee98:	2880004c 	andi	r2,r5,1
  80ee9c:	1005003a 	cmpeq	r2,r2,zero
  80eea0:	1000261e 	bne	r2,zero,80ef3c <_strtoul_r+0x1ac>
  80eea4:	00800dc4 	movi	r2,55
  80eea8:	80a1c83a 	sub	r16,r16,r2
  80eeac:	84bfeb16 	blt	r16,r18,80ee5c <_strtoul_r+0xcc>
  80eeb0:	3000420e 	bge	r6,zero,80efbc <_strtoul_r+0x22c>
  80eeb4:	d8c00117 	ldw	r3,4(sp)
  80eeb8:	00800884 	movi	r2,34
  80eebc:	013fffc4 	movi	r4,-1
  80eec0:	18800015 	stw	r2,0(r3)
  80eec4:	e0000226 	beq	fp,zero,80eed0 <_strtoul_r+0x140>
  80eec8:	30001f1e 	bne	r6,zero,80ef48 <_strtoul_r+0x1b8>
  80eecc:	e5c00015 	stw	r23,0(fp)
  80eed0:	2005883a 	mov	r2,r4
  80eed4:	dfc00b17 	ldw	ra,44(sp)
  80eed8:	df000a17 	ldw	fp,40(sp)
  80eedc:	ddc00917 	ldw	r23,36(sp)
  80eee0:	dd800817 	ldw	r22,32(sp)
  80eee4:	dd400717 	ldw	r21,28(sp)
  80eee8:	dd000617 	ldw	r20,24(sp)
  80eeec:	dcc00517 	ldw	r19,20(sp)
  80eef0:	dc800417 	ldw	r18,16(sp)
  80eef4:	dc400317 	ldw	r17,12(sp)
  80eef8:	dc000217 	ldw	r16,8(sp)
  80eefc:	dec00c04 	addi	sp,sp,48
  80ef00:	f800283a 	ret
  80ef04:	00800c04 	movi	r2,48
  80ef08:	80801926 	beq	r16,r2,80ef70 <_strtoul_r+0x1e0>
  80ef0c:	183fc226 	beq	r3,zero,80ee18 <_strtoul_r+0x88>
  80ef10:	00800c04 	movi	r2,48
  80ef14:	80802326 	beq	r16,r2,80efa4 <_strtoul_r+0x214>
  80ef18:	04800284 	movi	r18,10
  80ef1c:	902b883a 	mov	r21,r18
  80ef20:	04c666b4 	movhi	r19,6554
  80ef24:	9ce66644 	addi	r19,r19,-26215
  80ef28:	05800144 	movi	r22,5
  80ef2c:	003fc306 	br	80ee3c <_strtoul_r+0xac>
  80ef30:	b43fcd0e 	bge	r22,r16,80ee68 <_strtoul_r+0xd8>
  80ef34:	01bfffc4 	movi	r6,-1
  80ef38:	003fcf06 	br	80ee78 <_strtoul_r+0xe8>
  80ef3c:	008015c4 	movi	r2,87
  80ef40:	80a1c83a 	sub	r16,r16,r2
  80ef44:	003fd906 	br	80eeac <_strtoul_r+0x11c>
  80ef48:	8dffffc4 	addi	r23,r17,-1
  80ef4c:	003fdf06 	br	80eecc <_strtoul_r+0x13c>
  80ef50:	8c000007 	ldb	r16,0(r17)
  80ef54:	8c400044 	addi	r17,r17,1
  80ef58:	003faa06 	br	80ee04 <_strtoul_r+0x74>
  80ef5c:	8c000007 	ldb	r16,0(r17)
  80ef60:	00800044 	movi	r2,1
  80ef64:	8c400044 	addi	r17,r17,1
  80ef68:	d8800015 	stw	r2,0(sp)
  80ef6c:	003fa606 	br	80ee08 <_strtoul_r+0x78>
  80ef70:	89000007 	ldb	r4,0(r17)
  80ef74:	00801e04 	movi	r2,120
  80ef78:	20800226 	beq	r4,r2,80ef84 <_strtoul_r+0x1f4>
  80ef7c:	00801604 	movi	r2,88
  80ef80:	20bfe21e 	bne	r4,r2,80ef0c <_strtoul_r+0x17c>
  80ef84:	8c000047 	ldb	r16,1(r17)
  80ef88:	04800404 	movi	r18,16
  80ef8c:	8c400084 	addi	r17,r17,2
  80ef90:	902b883a 	mov	r21,r18
  80ef94:	04c40034 	movhi	r19,4096
  80ef98:	9cffffc4 	addi	r19,r19,-1
  80ef9c:	058003c4 	movi	r22,15
  80efa0:	003fa606 	br	80ee3c <_strtoul_r+0xac>
  80efa4:	04800204 	movi	r18,8
  80efa8:	902b883a 	mov	r21,r18
  80efac:	04c80034 	movhi	r19,8192
  80efb0:	9cffffc4 	addi	r19,r19,-1
  80efb4:	058001c4 	movi	r22,7
  80efb8:	003fa006 	br	80ee3c <_strtoul_r+0xac>
  80efbc:	d8c00017 	ldw	r3,0(sp)
  80efc0:	1805003a 	cmpeq	r2,r3,zero
  80efc4:	103fbf1e 	bne	r2,zero,80eec4 <_strtoul_r+0x134>
  80efc8:	0109c83a 	sub	r4,zero,r4
  80efcc:	003fbd06 	br	80eec4 <_strtoul_r+0x134>

0080efd0 <strtoul>:
  80efd0:	00802074 	movhi	r2,129
  80efd4:	109bcd04 	addi	r2,r2,28468
  80efd8:	2013883a 	mov	r9,r4
  80efdc:	11000017 	ldw	r4,0(r2)
  80efe0:	2805883a 	mov	r2,r5
  80efe4:	300f883a 	mov	r7,r6
  80efe8:	480b883a 	mov	r5,r9
  80efec:	100d883a 	mov	r6,r2
  80eff0:	080ed901 	jmpi	80ed90 <_strtoul_r>

0080eff4 <_strtoull_r>:
  80eff4:	defff104 	addi	sp,sp,-60
  80eff8:	00802074 	movhi	r2,129
  80effc:	109bcc04 	addi	r2,r2,28464
  80f000:	df000d15 	stw	fp,52(sp)
  80f004:	17000017 	ldw	fp,0(r2)
  80f008:	ddc00c15 	stw	r23,48(sp)
  80f00c:	dcc00815 	stw	r19,32(sp)
  80f010:	dfc00e15 	stw	ra,56(sp)
  80f014:	dd800b15 	stw	r22,44(sp)
  80f018:	dd400a15 	stw	r21,40(sp)
  80f01c:	dd000915 	stw	r20,36(sp)
  80f020:	dc800715 	stw	r18,28(sp)
  80f024:	dc400615 	stw	r17,24(sp)
  80f028:	dc000515 	stw	r16,20(sp)
  80f02c:	d9400215 	stw	r5,8(sp)
  80f030:	d9000115 	stw	r4,4(sp)
  80f034:	d9800315 	stw	r6,12(sp)
  80f038:	382f883a 	mov	r23,r7
  80f03c:	2827883a 	mov	r19,r5
  80f040:	9d000007 	ldb	r20,0(r19)
  80f044:	9cc00044 	addi	r19,r19,1
  80f048:	e507883a 	add	r3,fp,r20
  80f04c:	18800003 	ldbu	r2,0(r3)
  80f050:	1080020c 	andi	r2,r2,8
  80f054:	103ffa1e 	bne	r2,zero,80f040 <_strtoull_r+0x4c>
  80f058:	00800b44 	movi	r2,45
  80f05c:	a0807a26 	beq	r20,r2,80f248 <_strtoull_r+0x254>
  80f060:	00800ac4 	movi	r2,43
  80f064:	a0807526 	beq	r20,r2,80f23c <_strtoull_r+0x248>
  80f068:	d8000015 	stw	zero,0(sp)
  80f06c:	b807003a 	cmpeq	r3,r23,zero
  80f070:	18005a1e 	bne	r3,zero,80f1dc <_strtoull_r+0x1e8>
  80f074:	00800404 	movi	r2,16
  80f078:	b8805826 	beq	r23,r2,80f1dc <_strtoull_r+0x1e8>
  80f07c:	b82dd7fa 	srai	r22,r23,31
  80f080:	043fffc4 	movi	r16,-1
  80f084:	8009883a 	mov	r4,r16
  80f088:	800b883a 	mov	r5,r16
  80f08c:	b80d883a 	mov	r6,r23
  80f090:	b00f883a 	mov	r7,r22
  80f094:	08100780 	call	810078 <__udivdi3>
  80f098:	8009883a 	mov	r4,r16
  80f09c:	800b883a 	mov	r5,r16
  80f0a0:	b80d883a 	mov	r6,r23
  80f0a4:	b00f883a 	mov	r7,r22
  80f0a8:	1023883a 	mov	r17,r2
  80f0ac:	1825883a 	mov	r18,r3
  80f0b0:	08106e40 	call	8106e4 <__umoddi3>
  80f0b4:	b82b883a 	mov	r21,r23
  80f0b8:	1019883a 	mov	r12,r2
  80f0bc:	e505883a 	add	r2,fp,r20
  80f0c0:	11000003 	ldbu	r4,0(r2)
  80f0c4:	0015883a 	mov	r10,zero
  80f0c8:	0017883a 	mov	r11,zero
  80f0cc:	20c0010c 	andi	r3,r4,4
  80f0d0:	000d883a 	mov	r6,zero
  80f0d4:	18001c26 	beq	r3,zero,80f148 <_strtoull_r+0x154>
  80f0d8:	a43ff404 	addi	r16,r20,-48
  80f0dc:	85c0220e 	bge	r16,r23,80f168 <_strtoull_r+0x174>
  80f0e0:	30003c16 	blt	r6,zero,80f1d4 <_strtoull_r+0x1e0>
  80f0e4:	92c03b36 	bltu	r18,r11,80f1d4 <_strtoull_r+0x1e0>
  80f0e8:	5c803926 	beq	r11,r18,80f1d0 <_strtoull_r+0x1dc>
  80f0ec:	54404c26 	beq	r10,r17,80f220 <_strtoull_r+0x22c>
  80f0f0:	580b883a 	mov	r5,r11
  80f0f4:	5009883a 	mov	r4,r10
  80f0f8:	a80d883a 	mov	r6,r21
  80f0fc:	b00f883a 	mov	r7,r22
  80f100:	db000415 	stw	r12,16(sp)
  80f104:	080feb00 	call	80feb0 <__muldi3>
  80f108:	8013d7fa 	srai	r9,r16,31
  80f10c:	100d883a 	mov	r6,r2
  80f110:	1405883a 	add	r2,r2,r16
  80f114:	118d803a 	cmpltu	r6,r2,r6
  80f118:	1a47883a 	add	r3,r3,r9
  80f11c:	db000417 	ldw	r12,16(sp)
  80f120:	30cd883a 	add	r6,r6,r3
  80f124:	3017883a 	mov	r11,r6
  80f128:	1015883a 	mov	r10,r2
  80f12c:	01800044 	movi	r6,1
  80f130:	9d000007 	ldb	r20,0(r19)
  80f134:	9cc00044 	addi	r19,r19,1
  80f138:	e505883a 	add	r2,fp,r20
  80f13c:	11000003 	ldbu	r4,0(r2)
  80f140:	20c0010c 	andi	r3,r4,4
  80f144:	183fe41e 	bne	r3,zero,80f0d8 <_strtoull_r+0xe4>
  80f148:	208000cc 	andi	r2,r4,3
  80f14c:	10000626 	beq	r2,zero,80f168 <_strtoull_r+0x174>
  80f150:	2080004c 	andi	r2,r4,1
  80f154:	1005003a 	cmpeq	r2,r2,zero
  80f158:	10002e1e 	bne	r2,zero,80f214 <_strtoull_r+0x220>
  80f15c:	02000dc4 	movi	r8,55
  80f160:	a221c83a 	sub	r16,r20,r8
  80f164:	85ffde16 	blt	r16,r23,80f0e0 <_strtoull_r+0xec>
  80f168:	3000530e 	bge	r6,zero,80f2b8 <_strtoull_r+0x2c4>
  80f16c:	d8c00117 	ldw	r3,4(sp)
  80f170:	02bfffc4 	movi	r10,-1
  80f174:	00800884 	movi	r2,34
  80f178:	5017883a 	mov	r11,r10
  80f17c:	18800015 	stw	r2,0(r3)
  80f180:	d8800317 	ldw	r2,12(sp)
  80f184:	10000426 	beq	r2,zero,80f198 <_strtoull_r+0x1a4>
  80f188:	3000291e 	bne	r6,zero,80f230 <_strtoull_r+0x23c>
  80f18c:	d8800217 	ldw	r2,8(sp)
  80f190:	d8c00317 	ldw	r3,12(sp)
  80f194:	18800015 	stw	r2,0(r3)
  80f198:	5005883a 	mov	r2,r10
  80f19c:	5807883a 	mov	r3,r11
  80f1a0:	dfc00e17 	ldw	ra,56(sp)
  80f1a4:	df000d17 	ldw	fp,52(sp)
  80f1a8:	ddc00c17 	ldw	r23,48(sp)
  80f1ac:	dd800b17 	ldw	r22,44(sp)
  80f1b0:	dd400a17 	ldw	r21,40(sp)
  80f1b4:	dd000917 	ldw	r20,36(sp)
  80f1b8:	dcc00817 	ldw	r19,32(sp)
  80f1bc:	dc800717 	ldw	r18,28(sp)
  80f1c0:	dc400617 	ldw	r17,24(sp)
  80f1c4:	dc000517 	ldw	r16,20(sp)
  80f1c8:	dec00f04 	addi	sp,sp,60
  80f1cc:	f800283a 	ret
  80f1d0:	8abfc62e 	bgeu	r17,r10,80f0ec <_strtoull_r+0xf8>
  80f1d4:	01bfffc4 	movi	r6,-1
  80f1d8:	003fd506 	br	80f130 <_strtoull_r+0x13c>
  80f1dc:	00800c04 	movi	r2,48
  80f1e0:	a0801e26 	beq	r20,r2,80f25c <_strtoull_r+0x268>
  80f1e4:	183fa526 	beq	r3,zero,80f07c <_strtoull_r+0x88>
  80f1e8:	00800c04 	movi	r2,48
  80f1ec:	a0802a26 	beq	r20,r2,80f298 <_strtoull_r+0x2a4>
  80f1f0:	05c00284 	movi	r23,10
  80f1f4:	b82b883a 	mov	r21,r23
  80f1f8:	046666b4 	movhi	r17,39322
  80f1fc:	8c666644 	addi	r17,r17,-26215
  80f200:	002d883a 	mov	r22,zero
  80f204:	048666b4 	movhi	r18,6554
  80f208:	94a66644 	addi	r18,r18,-26215
  80f20c:	03000144 	movi	r12,5
  80f210:	003faa06 	br	80f0bc <_strtoull_r+0xc8>
  80f214:	020015c4 	movi	r8,87
  80f218:	a221c83a 	sub	r16,r20,r8
  80f21c:	003fd106 	br	80f164 <_strtoull_r+0x170>
  80f220:	5cbfb31e 	bne	r11,r18,80f0f0 <_strtoull_r+0xfc>
  80f224:	643fb20e 	bge	r12,r16,80f0f0 <_strtoull_r+0xfc>
  80f228:	01bfffc4 	movi	r6,-1
  80f22c:	003fc006 	br	80f130 <_strtoull_r+0x13c>
  80f230:	9cffffc4 	addi	r19,r19,-1
  80f234:	dcc00215 	stw	r19,8(sp)
  80f238:	003fd406 	br	80f18c <_strtoull_r+0x198>
  80f23c:	9d000007 	ldb	r20,0(r19)
  80f240:	9cc00044 	addi	r19,r19,1
  80f244:	003f8806 	br	80f068 <_strtoull_r+0x74>
  80f248:	9d000007 	ldb	r20,0(r19)
  80f24c:	00800044 	movi	r2,1
  80f250:	9cc00044 	addi	r19,r19,1
  80f254:	d8800015 	stw	r2,0(sp)
  80f258:	003f8406 	br	80f06c <_strtoull_r+0x78>
  80f25c:	99000007 	ldb	r4,0(r19)
  80f260:	00801e04 	movi	r2,120
  80f264:	20800226 	beq	r4,r2,80f270 <_strtoull_r+0x27c>
  80f268:	00801604 	movi	r2,88
  80f26c:	20bfdd1e 	bne	r4,r2,80f1e4 <_strtoull_r+0x1f0>
  80f270:	9d000047 	ldb	r20,1(r19)
  80f274:	05c00404 	movi	r23,16
  80f278:	b82b883a 	mov	r21,r23
  80f27c:	047fffc4 	movi	r17,-1
  80f280:	9cc00084 	addi	r19,r19,2
  80f284:	002d883a 	mov	r22,zero
  80f288:	04840034 	movhi	r18,4096
  80f28c:	94bfffc4 	addi	r18,r18,-1
  80f290:	030003c4 	movi	r12,15
  80f294:	003f8906 	br	80f0bc <_strtoull_r+0xc8>
  80f298:	05c00204 	movi	r23,8
  80f29c:	b82b883a 	mov	r21,r23
  80f2a0:	047fffc4 	movi	r17,-1
  80f2a4:	002d883a 	mov	r22,zero
  80f2a8:	04880034 	movhi	r18,8192
  80f2ac:	94bfffc4 	addi	r18,r18,-1
  80f2b0:	030001c4 	movi	r12,7
  80f2b4:	003f8106 	br	80f0bc <_strtoull_r+0xc8>
  80f2b8:	d8c00017 	ldw	r3,0(sp)
  80f2bc:	1805003a 	cmpeq	r2,r3,zero
  80f2c0:	103faf1e 	bne	r2,zero,80f180 <_strtoull_r+0x18c>
  80f2c4:	0009883a 	mov	r4,zero
  80f2c8:	2285c83a 	sub	r2,r4,r10
  80f2cc:	02c7c83a 	sub	r3,zero,r11
  80f2d0:	2089803a 	cmpltu	r4,r4,r2
  80f2d4:	1909c83a 	sub	r4,r3,r4
  80f2d8:	1015883a 	mov	r10,r2
  80f2dc:	2017883a 	mov	r11,r4
  80f2e0:	003fa706 	br	80f180 <_strtoull_r+0x18c>

0080f2e4 <htinit>:
  80f2e4:	28800003 	ldbu	r2,0(r5)
  80f2e8:	10000626 	beq	r2,zero,80f304 <htinit+0x20>
  80f2ec:	1105883a 	add	r2,r2,r4
  80f2f0:	11800005 	stb	r6,0(r2)
  80f2f4:	28800043 	ldbu	r2,1(r5)
  80f2f8:	31800044 	addi	r6,r6,1
  80f2fc:	29400044 	addi	r5,r5,1
  80f300:	103ffa1e 	bne	r2,zero,80f2ec <htinit+0x8>
  80f304:	f800283a 	ret

0080f308 <__hexdig_init>:
  80f308:	defffd04 	addi	sp,sp,-12
  80f30c:	dc400015 	stw	r17,0(sp)
  80f310:	044020b4 	movhi	r17,130
  80f314:	8c62cf04 	addi	r17,r17,-29892
  80f318:	dcc00115 	stw	r19,4(sp)
  80f31c:	8809883a 	mov	r4,r17
  80f320:	04c00684 	movi	r19,26
  80f324:	01402074 	movhi	r5,129
  80f328:	29551304 	addi	r5,r5,21580
  80f32c:	01800404 	movi	r6,16
  80f330:	dfc00215 	stw	ra,8(sp)
  80f334:	080f2e40 	call	80f2e4 <htinit>
  80f338:	980d883a 	mov	r6,r19
  80f33c:	8809883a 	mov	r4,r17
  80f340:	01402074 	movhi	r5,129
  80f344:	29551604 	addi	r5,r5,21592
  80f348:	080f2e40 	call	80f2e4 <htinit>
  80f34c:	8809883a 	mov	r4,r17
  80f350:	980d883a 	mov	r6,r19
  80f354:	01402074 	movhi	r5,129
  80f358:	29551804 	addi	r5,r5,21600
  80f35c:	dfc00217 	ldw	ra,8(sp)
  80f360:	dcc00117 	ldw	r19,4(sp)
  80f364:	dc400017 	ldw	r17,0(sp)
  80f368:	dec00304 	addi	sp,sp,12
  80f36c:	080f2e41 	jmpi	80f2e4 <htinit>

0080f370 <rshift>:
  80f370:	2807d17a 	srai	r3,r5,5
  80f374:	20800417 	ldw	r2,16(r4)
  80f378:	22400504 	addi	r9,r4,20
  80f37c:	480f883a 	mov	r7,r9
  80f380:	1880190e 	bge	r3,r2,80f3e8 <rshift+0x78>
  80f384:	1085883a 	add	r2,r2,r2
  80f388:	18c7883a 	add	r3,r3,r3
  80f38c:	1085883a 	add	r2,r2,r2
  80f390:	18c7883a 	add	r3,r3,r3
  80f394:	294007cc 	andi	r5,r5,31
  80f398:	4891883a 	add	r8,r9,r2
  80f39c:	48cd883a 	add	r6,r9,r3
  80f3a0:	28001726 	beq	r5,zero,80f400 <rshift+0x90>
  80f3a4:	30c00017 	ldw	r3,0(r6)
  80f3a8:	00800804 	movi	r2,32
  80f3ac:	31800104 	addi	r6,r6,4
  80f3b0:	1155c83a 	sub	r10,r2,r5
  80f3b4:	1946d83a 	srl	r3,r3,r5
  80f3b8:	3200092e 	bgeu	r6,r8,80f3e0 <rshift+0x70>
  80f3bc:	30800017 	ldw	r2,0(r6)
  80f3c0:	1284983a 	sll	r2,r2,r10
  80f3c4:	10c4b03a 	or	r2,r2,r3
  80f3c8:	38800015 	stw	r2,0(r7)
  80f3cc:	30c00017 	ldw	r3,0(r6)
  80f3d0:	31800104 	addi	r6,r6,4
  80f3d4:	39c00104 	addi	r7,r7,4
  80f3d8:	1946d83a 	srl	r3,r3,r5
  80f3dc:	323ff736 	bltu	r6,r8,80f3bc <rshift+0x4c>
  80f3e0:	38c00015 	stw	r3,0(r7)
  80f3e4:	18000c1e 	bne	r3,zero,80f418 <rshift+0xa8>
  80f3e8:	3a45c83a 	sub	r2,r7,r9
  80f3ec:	1005d0ba 	srai	r2,r2,2
  80f3f0:	20800415 	stw	r2,16(r4)
  80f3f4:	1000011e 	bne	r2,zero,80f3fc <rshift+0x8c>
  80f3f8:	20000515 	stw	zero,20(r4)
  80f3fc:	f800283a 	ret
  80f400:	323ff92e 	bgeu	r6,r8,80f3e8 <rshift+0x78>
  80f404:	30800017 	ldw	r2,0(r6)
  80f408:	31800104 	addi	r6,r6,4
  80f40c:	38800015 	stw	r2,0(r7)
  80f410:	39c00104 	addi	r7,r7,4
  80f414:	003ffa06 	br	80f400 <rshift+0x90>
  80f418:	39c00104 	addi	r7,r7,4
  80f41c:	003ff206 	br	80f3e8 <rshift+0x78>

0080f420 <__gethex>:
  80f420:	defff104 	addi	sp,sp,-60
  80f424:	df000d15 	stw	fp,52(sp)
  80f428:	dcc00815 	stw	r19,32(sp)
  80f42c:	dfc00e15 	stw	ra,56(sp)
  80f430:	ddc00c15 	stw	r23,48(sp)
  80f434:	dd800b15 	stw	r22,44(sp)
  80f438:	dd400a15 	stw	r21,40(sp)
  80f43c:	dd000915 	stw	r20,36(sp)
  80f440:	dc800715 	stw	r18,28(sp)
  80f444:	dc400615 	stw	r17,24(sp)
  80f448:	dc000515 	stw	r16,20(sp)
  80f44c:	04c020b4 	movhi	r19,130
  80f450:	9ce2cf04 	addi	r19,r19,-29892
  80f454:	98800c03 	ldbu	r2,48(r19)
  80f458:	d9000115 	stw	r4,4(sp)
  80f45c:	2839883a 	mov	fp,r5
  80f460:	d9800215 	stw	r6,8(sp)
  80f464:	d9c00315 	stw	r7,12(sp)
  80f468:	10007526 	beq	r2,zero,80f640 <__gethex+0x220>
  80f46c:	e1800017 	ldw	r6,0(fp)
  80f470:	00800c04 	movi	r2,48
  80f474:	31000083 	ldbu	r4,2(r6)
  80f478:	30c00084 	addi	r3,r6,2
  80f47c:	2080761e 	bne	r4,r2,80f658 <__gethex+0x238>
  80f480:	200b883a 	mov	r5,r4
  80f484:	3007883a 	mov	r3,r6
  80f488:	188000c3 	ldbu	r2,3(r3)
  80f48c:	18c00044 	addi	r3,r3,1
  80f490:	1009883a 	mov	r4,r2
  80f494:	117ffc26 	beq	r2,r5,80f488 <__gethex+0x68>
  80f498:	198fc83a 	sub	r7,r3,r6
  80f49c:	19400084 	addi	r5,r3,2
  80f4a0:	24c5883a 	add	r2,r4,r19
  80f4a4:	10c00003 	ldbu	r3,0(r2)
  80f4a8:	18002e26 	beq	r3,zero,80f564 <__gethex+0x144>
  80f4ac:	29000003 	ldbu	r4,0(r5)
  80f4b0:	282b883a 	mov	r21,r5
  80f4b4:	000d883a 	mov	r6,zero
  80f4b8:	002d883a 	mov	r22,zero
  80f4bc:	21003fcc 	andi	r4,r4,255
  80f4c0:	24c5883a 	add	r2,r4,r19
  80f4c4:	10c00003 	ldbu	r3,0(r2)
  80f4c8:	18000526 	beq	r3,zero,80f4e0 <__gethex+0xc0>
  80f4cc:	29400044 	addi	r5,r5,1
  80f4d0:	29000003 	ldbu	r4,0(r5)
  80f4d4:	24c5883a 	add	r2,r4,r19
  80f4d8:	10c00003 	ldbu	r3,0(r2)
  80f4dc:	183ffb1e 	bne	r3,zero,80f4cc <__gethex+0xac>
  80f4e0:	00800b84 	movi	r2,46
  80f4e4:	20805f26 	beq	r4,r2,80f664 <__gethex+0x244>
  80f4e8:	30008226 	beq	r6,zero,80f6f4 <__gethex+0x2d4>
  80f4ec:	2985c83a 	sub	r2,r5,r6
  80f4f0:	1085883a 	add	r2,r2,r2
  80f4f4:	1085883a 	add	r2,r2,r2
  80f4f8:	0085c83a 	sub	r2,zero,r2
  80f4fc:	d8800015 	stw	r2,0(sp)
  80f500:	2825883a 	mov	r18,r5
  80f504:	90c00003 	ldbu	r3,0(r18)
  80f508:	00801404 	movi	r2,80
  80f50c:	18801e26 	beq	r3,r2,80f588 <__gethex+0x168>
  80f510:	00801c04 	movi	r2,112
  80f514:	18801c26 	beq	r3,r2,80f588 <__gethex+0x168>
  80f518:	9023883a 	mov	r17,r18
  80f51c:	b005003a 	cmpeq	r2,r22,zero
  80f520:	e4400015 	stw	r17,0(fp)
  80f524:	10008d1e 	bne	r2,zero,80f75c <__gethex+0x33c>
  80f528:	38004326 	beq	r7,zero,80f638 <__gethex+0x218>
  80f52c:	0025883a 	mov	r18,zero
  80f530:	9005883a 	mov	r2,r18
  80f534:	dfc00e17 	ldw	ra,56(sp)
  80f538:	df000d17 	ldw	fp,52(sp)
  80f53c:	ddc00c17 	ldw	r23,48(sp)
  80f540:	dd800b17 	ldw	r22,44(sp)
  80f544:	dd400a17 	ldw	r21,40(sp)
  80f548:	dd000917 	ldw	r20,36(sp)
  80f54c:	dcc00817 	ldw	r19,32(sp)
  80f550:	dc800717 	ldw	r18,28(sp)
  80f554:	dc400617 	ldw	r17,24(sp)
  80f558:	dc000517 	ldw	r16,20(sp)
  80f55c:	dec00f04 	addi	sp,sp,60
  80f560:	f800283a 	ret
  80f564:	00800b84 	movi	r2,46
  80f568:	20805126 	beq	r4,r2,80f6b0 <__gethex+0x290>
  80f56c:	2825883a 	mov	r18,r5
  80f570:	d8000015 	stw	zero,0(sp)
  80f574:	90c00003 	ldbu	r3,0(r18)
  80f578:	00801404 	movi	r2,80
  80f57c:	282b883a 	mov	r21,r5
  80f580:	05800044 	movi	r22,1
  80f584:	18bfe21e 	bne	r3,r2,80f510 <__gethex+0xf0>
  80f588:	90c00043 	ldbu	r3,1(r18)
  80f58c:	00800ac4 	movi	r2,43
  80f590:	91400044 	addi	r5,r18,1
  80f594:	18805126 	beq	r3,r2,80f6dc <__gethex+0x2bc>
  80f598:	00800b44 	movi	r2,45
  80f59c:	18805326 	beq	r3,r2,80f6ec <__gethex+0x2cc>
  80f5a0:	002f883a 	mov	r23,zero
  80f5a4:	1cc5883a 	add	r2,r3,r19
  80f5a8:	10800003 	ldbu	r2,0(r2)
  80f5ac:	103fda26 	beq	r2,zero,80f518 <__gethex+0xf8>
  80f5b0:	01800644 	movi	r6,25
  80f5b4:	30bfd816 	blt	r6,r2,80f518 <__gethex+0xf8>
  80f5b8:	28c00043 	ldbu	r3,1(r5)
  80f5bc:	113ffc04 	addi	r4,r2,-16
  80f5c0:	008020b4 	movhi	r2,130
  80f5c4:	10a2cf04 	addi	r2,r2,-29892
  80f5c8:	1887883a 	add	r3,r3,r2
  80f5cc:	18800003 	ldbu	r2,0(r3)
  80f5d0:	2c400044 	addi	r17,r5,1
  80f5d4:	10001126 	beq	r2,zero,80f61c <__gethex+0x1fc>
  80f5d8:	1021883a 	mov	r16,r2
  80f5dc:	30800f16 	blt	r6,r2,80f61c <__gethex+0x1fc>
  80f5e0:	3029883a 	mov	r20,r6
  80f5e4:	00000106 	br	80f5ec <__gethex+0x1cc>
  80f5e8:	a0800c16 	blt	r20,r2,80f61c <__gethex+0x1fc>
  80f5ec:	8c400044 	addi	r17,r17,1
  80f5f0:	01400284 	movi	r5,10
  80f5f4:	d9c00415 	stw	r7,16(sp)
  80f5f8:	08026a00 	call	8026a0 <__mulsi3>
  80f5fc:	88c00003 	ldbu	r3,0(r17)
  80f600:	1405883a 	add	r2,r2,r16
  80f604:	113ffc04 	addi	r4,r2,-16
  80f608:	1cc7883a 	add	r3,r3,r19
  80f60c:	18800003 	ldbu	r2,0(r3)
  80f610:	d9c00417 	ldw	r7,16(sp)
  80f614:	1021883a 	mov	r16,r2
  80f618:	103ff31e 	bne	r2,zero,80f5e8 <__gethex+0x1c8>
  80f61c:	b805003a 	cmpeq	r2,r23,zero
  80f620:	1000011e 	bne	r2,zero,80f628 <__gethex+0x208>
  80f624:	0109c83a 	sub	r4,zero,r4
  80f628:	d8800017 	ldw	r2,0(sp)
  80f62c:	1105883a 	add	r2,r2,r4
  80f630:	d8800015 	stw	r2,0(sp)
  80f634:	003fb906 	br	80f51c <__gethex+0xfc>
  80f638:	04800184 	movi	r18,6
  80f63c:	003fbc06 	br	80f530 <__gethex+0x110>
  80f640:	080f3080 	call	80f308 <__hexdig_init>
  80f644:	e1800017 	ldw	r6,0(fp)
  80f648:	00800c04 	movi	r2,48
  80f64c:	31000083 	ldbu	r4,2(r6)
  80f650:	30c00084 	addi	r3,r6,2
  80f654:	20bf8a26 	beq	r4,r2,80f480 <__gethex+0x60>
  80f658:	180b883a 	mov	r5,r3
  80f65c:	000f883a 	mov	r7,zero
  80f660:	003f8f06 	br	80f4a0 <__gethex+0x80>
  80f664:	303fa11e 	bne	r6,zero,80f4ec <__gethex+0xcc>
  80f668:	29400044 	addi	r5,r5,1
  80f66c:	28800003 	ldbu	r2,0(r5)
  80f670:	14c5883a 	add	r2,r2,r19
  80f674:	10c00003 	ldbu	r3,0(r2)
  80f678:	1800b526 	beq	r3,zero,80f950 <__gethex+0x530>
  80f67c:	2809883a 	mov	r4,r5
  80f680:	21000044 	addi	r4,r4,1
  80f684:	20800003 	ldbu	r2,0(r4)
  80f688:	14c5883a 	add	r2,r2,r19
  80f68c:	10c00003 	ldbu	r3,0(r2)
  80f690:	183ffb1e 	bne	r3,zero,80f680 <__gethex+0x260>
  80f694:	2145c83a 	sub	r2,r4,r5
  80f698:	1085883a 	add	r2,r2,r2
  80f69c:	1085883a 	add	r2,r2,r2
  80f6a0:	0085c83a 	sub	r2,zero,r2
  80f6a4:	200b883a 	mov	r5,r4
  80f6a8:	d8800015 	stw	r2,0(sp)
  80f6ac:	003f9406 	br	80f500 <__gethex+0xe0>
  80f6b0:	29000043 	ldbu	r4,1(r5)
  80f6b4:	008020b4 	movhi	r2,130
  80f6b8:	10a2cf04 	addi	r2,r2,-29892
  80f6bc:	2c800044 	addi	r18,r5,1
  80f6c0:	2085883a 	add	r2,r4,r2
  80f6c4:	10c00003 	ldbu	r3,0(r2)
  80f6c8:	18000d1e 	bne	r3,zero,80f700 <__gethex+0x2e0>
  80f6cc:	282b883a 	mov	r21,r5
  80f6d0:	05800044 	movi	r22,1
  80f6d4:	d8000015 	stw	zero,0(sp)
  80f6d8:	003f8a06 	br	80f504 <__gethex+0xe4>
  80f6dc:	002f883a 	mov	r23,zero
  80f6e0:	29400044 	addi	r5,r5,1
  80f6e4:	28c00003 	ldbu	r3,0(r5)
  80f6e8:	003fae06 	br	80f5a4 <__gethex+0x184>
  80f6ec:	05c00044 	movi	r23,1
  80f6f0:	003ffb06 	br	80f6e0 <__gethex+0x2c0>
  80f6f4:	2825883a 	mov	r18,r5
  80f6f8:	d8000015 	stw	zero,0(sp)
  80f6fc:	003f8106 	br	80f504 <__gethex+0xe4>
  80f700:	00800c04 	movi	r2,48
  80f704:	20800e1e 	bne	r4,r2,80f740 <__gethex+0x320>
  80f708:	2007883a 	mov	r3,r4
  80f70c:	900b883a 	mov	r5,r18
  80f710:	29400044 	addi	r5,r5,1
  80f714:	29000003 	ldbu	r4,0(r5)
  80f718:	20803fcc 	andi	r2,r4,255
  80f71c:	10fffc26 	beq	r2,r3,80f710 <__gethex+0x2f0>
  80f720:	14c5883a 	add	r2,r2,r19
  80f724:	10c00003 	ldbu	r3,0(r2)
  80f728:	1800071e 	bne	r3,zero,80f748 <__gethex+0x328>
  80f72c:	01c00044 	movi	r7,1
  80f730:	900d883a 	mov	r6,r18
  80f734:	282b883a 	mov	r21,r5
  80f738:	382d883a 	mov	r22,r7
  80f73c:	003f5f06 	br	80f4bc <__gethex+0x9c>
  80f740:	91000003 	ldbu	r4,0(r18)
  80f744:	900b883a 	mov	r5,r18
  80f748:	900d883a 	mov	r6,r18
  80f74c:	282b883a 	mov	r21,r5
  80f750:	01c00044 	movi	r7,1
  80f754:	002d883a 	mov	r22,zero
  80f758:	003f5806 	br	80f4bc <__gethex+0x9c>
  80f75c:	9545c83a 	sub	r2,r18,r21
  80f760:	10bfffc4 	addi	r2,r2,-1
  80f764:	00c001c4 	movi	r3,7
  80f768:	1880770e 	bge	r3,r2,80f948 <__gethex+0x528>
  80f76c:	000b883a 	mov	r5,zero
  80f770:	1005d07a 	srai	r2,r2,1
  80f774:	29400044 	addi	r5,r5,1
  80f778:	18bffd16 	blt	r3,r2,80f770 <__gethex+0x350>
  80f77c:	d9000117 	ldw	r4,4(sp)
  80f780:	080bc700 	call	80bc70 <_Balloc>
  80f784:	1029883a 	mov	r20,r2
  80f788:	15800504 	addi	r22,r2,20
  80f78c:	ac80562e 	bgeu	r21,r18,80f8e8 <__gethex+0x4c8>
  80f790:	900b883a 	mov	r5,r18
  80f794:	b011883a 	mov	r8,r22
  80f798:	000f883a 	mov	r7,zero
  80f79c:	0009883a 	mov	r4,zero
  80f7a0:	02400b84 	movi	r9,46
  80f7a4:	02800804 	movi	r10,32
  80f7a8:	297fffc4 	addi	r5,r5,-1
  80f7ac:	28c00003 	ldbu	r3,0(r5)
  80f7b0:	1a400826 	beq	r3,r9,80f7d4 <__gethex+0x3b4>
  80f7b4:	380d883a 	mov	r6,r7
  80f7b8:	3a802a26 	beq	r7,r10,80f864 <__gethex+0x444>
  80f7bc:	39c00104 	addi	r7,r7,4
  80f7c0:	1cc7883a 	add	r3,r3,r19
  80f7c4:	18800003 	ldbu	r2,0(r3)
  80f7c8:	108003cc 	andi	r2,r2,15
  80f7cc:	1184983a 	sll	r2,r2,r6
  80f7d0:	2088b03a 	or	r4,r4,r2
  80f7d4:	a97ff436 	bltu	r21,r5,80f7a8 <__gethex+0x388>
  80f7d8:	40800104 	addi	r2,r8,4
  80f7dc:	1585c83a 	sub	r2,r2,r22
  80f7e0:	1021d0ba 	srai	r16,r2,2
  80f7e4:	41000015 	stw	r4,0(r8)
  80f7e8:	a4000415 	stw	r16,16(r20)
  80f7ec:	080b7180 	call	80b718 <__hi0bits>
  80f7f0:	d9000217 	ldw	r4,8(sp)
  80f7f4:	8006917a 	slli	r3,r16,5
  80f7f8:	24c00017 	ldw	r19,0(r4)
  80f7fc:	1885c83a 	sub	r2,r3,r2
  80f800:	98801f16 	blt	r19,r2,80f880 <__gethex+0x460>
  80f804:	14c00c16 	blt	r2,r19,80f838 <__gethex+0x418>
  80f808:	002b883a 	mov	r21,zero
  80f80c:	d9000217 	ldw	r4,8(sp)
  80f810:	d8c00017 	ldw	r3,0(sp)
  80f814:	20800217 	ldw	r2,8(r4)
  80f818:	10c0360e 	bge	r2,r3,80f8f4 <__gethex+0x4d4>
  80f81c:	d9000117 	ldw	r4,4(sp)
  80f820:	a00b883a 	mov	r5,r20
  80f824:	048028c4 	movi	r18,163
  80f828:	080b6f00 	call	80b6f0 <_Bfree>
  80f82c:	d9000f17 	ldw	r4,60(sp)
  80f830:	20000015 	stw	zero,0(r4)
  80f834:	003f3e06 	br	80f530 <__gethex+0x110>
  80f838:	d9000117 	ldw	r4,4(sp)
  80f83c:	98a1c83a 	sub	r16,r19,r2
  80f840:	a00b883a 	mov	r5,r20
  80f844:	800d883a 	mov	r6,r16
  80f848:	080c0340 	call	80c034 <__lshift>
  80f84c:	d8c00017 	ldw	r3,0(sp)
  80f850:	1029883a 	mov	r20,r2
  80f854:	15800504 	addi	r22,r2,20
  80f858:	1c07c83a 	sub	r3,r3,r16
  80f85c:	d8c00015 	stw	r3,0(sp)
  80f860:	003fe906 	br	80f808 <__gethex+0x3e8>
  80f864:	41000015 	stw	r4,0(r8)
  80f868:	28c00003 	ldbu	r3,0(r5)
  80f86c:	01c00104 	movi	r7,4
  80f870:	000d883a 	mov	r6,zero
  80f874:	41d1883a 	add	r8,r8,r7
  80f878:	0009883a 	mov	r4,zero
  80f87c:	003fd006 	br	80f7c0 <__gethex+0x3a0>
  80f880:	14e1c83a 	sub	r16,r2,r19
  80f884:	a009883a 	mov	r4,r20
  80f888:	800b883a 	mov	r5,r16
  80f88c:	080bbe80 	call	80bbe8 <__any_on>
  80f890:	1000081e 	bne	r2,zero,80f8b4 <__gethex+0x494>
  80f894:	002b883a 	mov	r21,zero
  80f898:	a009883a 	mov	r4,r20
  80f89c:	800b883a 	mov	r5,r16
  80f8a0:	080f3700 	call	80f370 <rshift>
  80f8a4:	d8800017 	ldw	r2,0(sp)
  80f8a8:	1405883a 	add	r2,r2,r16
  80f8ac:	d8800015 	stw	r2,0(sp)
  80f8b0:	003fd606 	br	80f80c <__gethex+0x3ec>
  80f8b4:	817fffc4 	addi	r5,r16,-1
  80f8b8:	2805d17a 	srai	r2,r5,5
  80f8bc:	290007cc 	andi	r4,r5,31
  80f8c0:	01800044 	movi	r6,1
  80f8c4:	1085883a 	add	r2,r2,r2
  80f8c8:	1085883a 	add	r2,r2,r2
  80f8cc:	1585883a 	add	r2,r2,r22
  80f8d0:	3108983a 	sll	r4,r6,r4
  80f8d4:	10c00017 	ldw	r3,0(r2)
  80f8d8:	20c8703a 	and	r4,r4,r3
  80f8dc:	20001e1e 	bne	r4,zero,80f958 <__gethex+0x538>
  80f8e0:	302b883a 	mov	r21,r6
  80f8e4:	003fec06 	br	80f898 <__gethex+0x478>
  80f8e8:	b011883a 	mov	r8,r22
  80f8ec:	0009883a 	mov	r4,zero
  80f8f0:	003fb906 	br	80f7d8 <__gethex+0x3b8>
  80f8f4:	d8800217 	ldw	r2,8(sp)
  80f8f8:	d8c00017 	ldw	r3,0(sp)
  80f8fc:	11000117 	ldw	r4,4(r2)
  80f900:	19001c16 	blt	r3,r4,80f974 <__gethex+0x554>
  80f904:	04800044 	movi	r18,1
  80f908:	a8000926 	beq	r21,zero,80f930 <__gethex+0x510>
  80f90c:	d8c00217 	ldw	r3,8(sp)
  80f910:	00800084 	movi	r2,2
  80f914:	19000317 	ldw	r4,12(r3)
  80f918:	20809826 	beq	r4,r2,80fb7c <__gethex+0x75c>
  80f91c:	008000c4 	movi	r2,3
  80f920:	20805b26 	beq	r4,r2,80fa90 <__gethex+0x670>
  80f924:	00800044 	movi	r2,1
  80f928:	20804326 	beq	r4,r2,80fa38 <__gethex+0x618>
  80f92c:	94800414 	ori	r18,r18,16
  80f930:	d9000f17 	ldw	r4,60(sp)
  80f934:	d8800017 	ldw	r2,0(sp)
  80f938:	d8c00317 	ldw	r3,12(sp)
  80f93c:	25000015 	stw	r20,0(r4)
  80f940:	18800015 	stw	r2,0(r3)
  80f944:	003efa06 	br	80f530 <__gethex+0x110>
  80f948:	000b883a 	mov	r5,zero
  80f94c:	003f8b06 	br	80f77c <__gethex+0x35c>
  80f950:	d8000015 	stw	zero,0(sp)
  80f954:	003eea06 	br	80f500 <__gethex+0xe0>
  80f958:	3140180e 	bge	r6,r5,80f9bc <__gethex+0x59c>
  80f95c:	a009883a 	mov	r4,r20
  80f960:	817fff84 	addi	r5,r16,-2
  80f964:	080bbe80 	call	80bbe8 <__any_on>
  80f968:	10001426 	beq	r2,zero,80f9bc <__gethex+0x59c>
  80f96c:	054000c4 	movi	r21,3
  80f970:	003fc906 	br	80f898 <__gethex+0x478>
  80f974:	d8800017 	ldw	r2,0(sp)
  80f978:	20a3c83a 	sub	r17,r4,r2
  80f97c:	8cc01116 	blt	r17,r19,80f9c4 <__gethex+0x5a4>
  80f980:	d8800217 	ldw	r2,8(sp)
  80f984:	10c00317 	ldw	r3,12(r2)
  80f988:	00800084 	movi	r2,2
  80f98c:	18809426 	beq	r3,r2,80fbe0 <__gethex+0x7c0>
  80f990:	008000c4 	movi	r2,3
  80f994:	18808f26 	beq	r3,r2,80fbd4 <__gethex+0x7b4>
  80f998:	00800044 	movi	r2,1
  80f99c:	18807c26 	beq	r3,r2,80fb90 <__gethex+0x770>
  80f9a0:	d9000117 	ldw	r4,4(sp)
  80f9a4:	a00b883a 	mov	r5,r20
  80f9a8:	04801404 	movi	r18,80
  80f9ac:	080b6f00 	call	80b6f0 <_Bfree>
  80f9b0:	d9000f17 	ldw	r4,60(sp)
  80f9b4:	20000015 	stw	zero,0(r4)
  80f9b8:	003edd06 	br	80f530 <__gethex+0x110>
  80f9bc:	05400084 	movi	r21,2
  80f9c0:	003fb506 	br	80f898 <__gethex+0x478>
  80f9c4:	8c3fffc4 	addi	r16,r17,-1
  80f9c8:	a8001526 	beq	r21,zero,80fa20 <__gethex+0x600>
  80f9cc:	05400044 	movi	r21,1
  80f9d0:	8005d17a 	srai	r2,r16,5
  80f9d4:	814007cc 	andi	r5,r16,31
  80f9d8:	00c00044 	movi	r3,1
  80f9dc:	1085883a 	add	r2,r2,r2
  80f9e0:	1085883a 	add	r2,r2,r2
  80f9e4:	1585883a 	add	r2,r2,r22
  80f9e8:	1946983a 	sll	r3,r3,r5
  80f9ec:	11000017 	ldw	r4,0(r2)
  80f9f0:	1906703a 	and	r3,r3,r4
  80f9f4:	18000126 	beq	r3,zero,80f9fc <__gethex+0x5dc>
  80f9f8:	ad400094 	ori	r21,r21,2
  80f9fc:	880b883a 	mov	r5,r17
  80fa00:	a009883a 	mov	r4,r20
  80fa04:	080f3700 	call	80f370 <rshift>
  80fa08:	d8800217 	ldw	r2,8(sp)
  80fa0c:	9c67c83a 	sub	r19,r19,r17
  80fa10:	04800084 	movi	r18,2
  80fa14:	10800117 	ldw	r2,4(r2)
  80fa18:	d8800015 	stw	r2,0(sp)
  80fa1c:	003fba06 	br	80f908 <__gethex+0x4e8>
  80fa20:	043feb0e 	bge	zero,r16,80f9d0 <__gethex+0x5b0>
  80fa24:	a009883a 	mov	r4,r20
  80fa28:	800b883a 	mov	r5,r16
  80fa2c:	080bbe80 	call	80bbe8 <__any_on>
  80fa30:	102b883a 	mov	r21,r2
  80fa34:	003fe606 	br	80f9d0 <__gethex+0x5b0>
  80fa38:	a880008c 	andi	r2,r21,2
  80fa3c:	103fbb26 	beq	r2,zero,80f92c <__gethex+0x50c>
  80fa40:	b0800017 	ldw	r2,0(r22)
  80fa44:	a884b03a 	or	r2,r21,r2
  80fa48:	1104703a 	and	r2,r2,r4
  80fa4c:	103fb726 	beq	r2,zero,80f92c <__gethex+0x50c>
  80fa50:	a4000417 	ldw	r16,16(r20)
  80fa54:	b007883a 	mov	r3,r22
  80fa58:	017fffc4 	movi	r5,-1
  80fa5c:	8405883a 	add	r2,r16,r16
  80fa60:	10ab883a 	add	r21,r2,r2
  80fa64:	802f883a 	mov	r23,r16
  80fa68:	b549883a 	add	r4,r22,r21
  80fa6c:	00000306 	br	80fa7c <__gethex+0x65c>
  80fa70:	18000015 	stw	zero,0(r3)
  80fa74:	18c00104 	addi	r3,r3,4
  80fa78:	1900082e 	bgeu	r3,r4,80fa9c <__gethex+0x67c>
  80fa7c:	18800017 	ldw	r2,0(r3)
  80fa80:	117ffb26 	beq	r2,r5,80fa70 <__gethex+0x650>
  80fa84:	10800044 	addi	r2,r2,1
  80fa88:	18800015 	stw	r2,0(r3)
  80fa8c:	00001e06 	br	80fb08 <__gethex+0x6e8>
  80fa90:	d8801017 	ldw	r2,64(sp)
  80fa94:	103fa526 	beq	r2,zero,80f92c <__gethex+0x50c>
  80fa98:	003fed06 	br	80fa50 <__gethex+0x630>
  80fa9c:	a0800217 	ldw	r2,8(r20)
  80faa0:	80801216 	blt	r16,r2,80faec <__gethex+0x6cc>
  80faa4:	a1400117 	ldw	r5,4(r20)
  80faa8:	d9000117 	ldw	r4,4(sp)
  80faac:	29400044 	addi	r5,r5,1
  80fab0:	080bc700 	call	80bc70 <_Balloc>
  80fab4:	a1800417 	ldw	r6,16(r20)
  80fab8:	a1400304 	addi	r5,r20,12
  80fabc:	11000304 	addi	r4,r2,12
  80fac0:	318d883a 	add	r6,r6,r6
  80fac4:	318d883a 	add	r6,r6,r6
  80fac8:	31800204 	addi	r6,r6,8
  80facc:	1023883a 	mov	r17,r2
  80fad0:	0804f780 	call	804f78 <memcpy>
  80fad4:	d9000117 	ldw	r4,4(sp)
  80fad8:	a00b883a 	mov	r5,r20
  80fadc:	8d800504 	addi	r22,r17,20
  80fae0:	080b6f00 	call	80b6f0 <_Bfree>
  80fae4:	8c000417 	ldw	r16,16(r17)
  80fae8:	8829883a 	mov	r20,r17
  80faec:	8405883a 	add	r2,r16,r16
  80faf0:	1085883a 	add	r2,r2,r2
  80faf4:	1505883a 	add	r2,r2,r20
  80faf8:	84000044 	addi	r16,r16,1
  80fafc:	00c00044 	movi	r3,1
  80fb00:	10c00515 	stw	r3,20(r2)
  80fb04:	a4000415 	stw	r16,16(r20)
  80fb08:	00800084 	movi	r2,2
  80fb0c:	90801526 	beq	r18,r2,80fb64 <__gethex+0x744>
  80fb10:	bc000a16 	blt	r23,r16,80fb3c <__gethex+0x71c>
  80fb14:	9c0007cc 	andi	r16,r19,31
  80fb18:	8000021e 	bne	r16,zero,80fb24 <__gethex+0x704>
  80fb1c:	94800814 	ori	r18,r18,32
  80fb20:	003f8306 	br	80f930 <__gethex+0x510>
  80fb24:	b545883a 	add	r2,r22,r21
  80fb28:	113fff17 	ldw	r4,-4(r2)
  80fb2c:	080b7180 	call	80b718 <__hi0bits>
  80fb30:	00c00804 	movi	r3,32
  80fb34:	1c07c83a 	sub	r3,r3,r16
  80fb38:	10fff80e 	bge	r2,r3,80fb1c <__gethex+0x6fc>
  80fb3c:	a009883a 	mov	r4,r20
  80fb40:	01400044 	movi	r5,1
  80fb44:	080f3700 	call	80f370 <rshift>
  80fb48:	d9000217 	ldw	r4,8(sp)
  80fb4c:	d8c00017 	ldw	r3,0(sp)
  80fb50:	20800217 	ldw	r2,8(r4)
  80fb54:	18c00044 	addi	r3,r3,1
  80fb58:	d8c00015 	stw	r3,0(sp)
  80fb5c:	10ff2f16 	blt	r2,r3,80f81c <__gethex+0x3fc>
  80fb60:	003fee06 	br	80fb1c <__gethex+0x6fc>
  80fb64:	d8c00217 	ldw	r3,8(sp)
  80fb68:	18800017 	ldw	r2,0(r3)
  80fb6c:	10bfffc4 	addi	r2,r2,-1
  80fb70:	98801e26 	beq	r19,r2,80fbec <__gethex+0x7cc>
  80fb74:	04800884 	movi	r18,34
  80fb78:	003f6d06 	br	80f930 <__gethex+0x510>
  80fb7c:	d9001017 	ldw	r4,64(sp)
  80fb80:	00800044 	movi	r2,1
  80fb84:	1105c83a 	sub	r2,r2,r4
  80fb88:	103f6826 	beq	r2,zero,80f92c <__gethex+0x50c>
  80fb8c:	003fb006 	br	80fa50 <__gethex+0x630>
  80fb90:	9c7f831e 	bne	r19,r17,80f9a0 <__gethex+0x580>
  80fb94:	1cc0060e 	bge	r3,r19,80fbb0 <__gethex+0x790>
  80fb98:	98cbc83a 	sub	r5,r19,r3
  80fb9c:	a009883a 	mov	r4,r20
  80fba0:	080bbe80 	call	80bbe8 <__any_on>
  80fba4:	103f7e26 	beq	r2,zero,80f9a0 <__gethex+0x580>
  80fba8:	d8c00217 	ldw	r3,8(sp)
  80fbac:	19000117 	ldw	r4,4(r3)
  80fbb0:	d8800317 	ldw	r2,12(sp)
  80fbb4:	d8c00f17 	ldw	r3,60(sp)
  80fbb8:	04000044 	movi	r16,1
  80fbbc:	11000015 	stw	r4,0(r2)
  80fbc0:	04801884 	movi	r18,98
  80fbc4:	b4000015 	stw	r16,0(r22)
  80fbc8:	1d000015 	stw	r20,0(r3)
  80fbcc:	a4000415 	stw	r16,16(r20)
  80fbd0:	003e5706 	br	80f530 <__gethex+0x110>
  80fbd4:	d8801017 	ldw	r2,64(sp)
  80fbd8:	103f7126 	beq	r2,zero,80f9a0 <__gethex+0x580>
  80fbdc:	003ff406 	br	80fbb0 <__gethex+0x790>
  80fbe0:	d8c01017 	ldw	r3,64(sp)
  80fbe4:	183ff226 	beq	r3,zero,80fbb0 <__gethex+0x790>
  80fbe8:	003f6d06 	br	80f9a0 <__gethex+0x580>
  80fbec:	9805d17a 	srai	r2,r19,5
  80fbf0:	994007cc 	andi	r5,r19,31
  80fbf4:	00c00044 	movi	r3,1
  80fbf8:	1085883a 	add	r2,r2,r2
  80fbfc:	1085883a 	add	r2,r2,r2
  80fc00:	1585883a 	add	r2,r2,r22
  80fc04:	1946983a 	sll	r3,r3,r5
  80fc08:	11000017 	ldw	r4,0(r2)
  80fc0c:	1906703a 	and	r3,r3,r4
  80fc10:	183fd826 	beq	r3,zero,80fb74 <__gethex+0x754>
  80fc14:	04800844 	movi	r18,33
  80fc18:	003f4506 	br	80f930 <__gethex+0x510>

0080fc1c <L_shift>:
  80fc1c:	00800204 	movi	r2,8
  80fc20:	1185c83a 	sub	r2,r2,r6
  80fc24:	1085883a 	add	r2,r2,r2
  80fc28:	21c00017 	ldw	r7,0(r4)
  80fc2c:	1093883a 	add	r9,r2,r2
  80fc30:	00800804 	movi	r2,32
  80fc34:	200d883a 	mov	r6,r4
  80fc38:	1251c83a 	sub	r8,r2,r9
  80fc3c:	31800104 	addi	r6,r6,4
  80fc40:	3805883a 	mov	r2,r7
  80fc44:	31c00017 	ldw	r7,0(r6)
  80fc48:	3a08983a 	sll	r4,r7,r8
  80fc4c:	3a46d83a 	srl	r3,r7,r9
  80fc50:	1104b03a 	or	r2,r2,r4
  80fc54:	180f883a 	mov	r7,r3
  80fc58:	30bfff15 	stw	r2,-4(r6)
  80fc5c:	30c00015 	stw	r3,0(r6)
  80fc60:	317ff636 	bltu	r6,r5,80fc3c <L_shift+0x20>
  80fc64:	f800283a 	ret

0080fc68 <__hexnan>:
  80fc68:	defff404 	addi	sp,sp,-48
  80fc6c:	dd800815 	stw	r22,32(sp)
  80fc70:	058020b4 	movhi	r22,130
  80fc74:	b5a2cf04 	addi	r22,r22,-29892
  80fc78:	b0800c03 	ldbu	r2,48(r22)
  80fc7c:	dcc00515 	stw	r19,20(sp)
  80fc80:	dc000215 	stw	r16,8(sp)
  80fc84:	dfc00b15 	stw	ra,44(sp)
  80fc88:	df000a15 	stw	fp,40(sp)
  80fc8c:	ddc00915 	stw	r23,36(sp)
  80fc90:	dd400715 	stw	r21,28(sp)
  80fc94:	dd000615 	stw	r20,24(sp)
  80fc98:	dc800415 	stw	r18,16(sp)
  80fc9c:	dc400315 	stw	r17,12(sp)
  80fca0:	d9000115 	stw	r4,4(sp)
  80fca4:	2821883a 	mov	r16,r5
  80fca8:	3027883a 	mov	r19,r6
  80fcac:	10007426 	beq	r2,zero,80fe80 <__hexnan+0x218>
  80fcb0:	80c00017 	ldw	r3,0(r16)
  80fcb4:	1805d17a 	srai	r2,r3,5
  80fcb8:	18c007cc 	andi	r3,r3,31
  80fcbc:	1839003a 	cmpeq	fp,r3,zero
  80fcc0:	1085883a 	add	r2,r2,r2
  80fcc4:	1085883a 	add	r2,r2,r2
  80fcc8:	d8c00015 	stw	r3,0(sp)
  80fccc:	14c5883a 	add	r2,r2,r19
  80fcd0:	e000011e 	bne	fp,zero,80fcd8 <__hexnan+0x70>
  80fcd4:	10800104 	addi	r2,r2,4
  80fcd8:	d8c00117 	ldw	r3,4(sp)
  80fcdc:	153fff04 	addi	r20,r2,-4
  80fce0:	a021883a 	mov	r16,r20
  80fce4:	1c400017 	ldw	r17,0(r3)
  80fce8:	a02b883a 	mov	r21,r20
  80fcec:	0025883a 	mov	r18,zero
  80fcf0:	002f883a 	mov	r23,zero
  80fcf4:	000d883a 	mov	r6,zero
  80fcf8:	103fff15 	stw	zero,-4(r2)
  80fcfc:	8c400044 	addi	r17,r17,1
  80fd00:	89000003 	ldbu	r4,0(r17)
  80fd04:	20000e26 	beq	r4,zero,80fd40 <__hexnan+0xd8>
  80fd08:	2585883a 	add	r2,r4,r22
  80fd0c:	10c00003 	ldbu	r3,0(r2)
  80fd10:	18002e1e 	bne	r3,zero,80fdcc <__hexnan+0x164>
  80fd14:	00800804 	movi	r2,32
  80fd18:	11005536 	bltu	r2,r4,80fe70 <__hexnan+0x208>
  80fd1c:	bcbff70e 	bge	r23,r18,80fcfc <__hexnan+0x94>
  80fd20:	8540022e 	bgeu	r16,r21,80fd2c <__hexnan+0xc4>
  80fd24:	008001c4 	movi	r2,7
  80fd28:	11803c0e 	bge	r2,r6,80fe1c <__hexnan+0x1b4>
  80fd2c:	9c003536 	bltu	r19,r16,80fe04 <__hexnan+0x19c>
  80fd30:	8c400044 	addi	r17,r17,1
  80fd34:	89000003 	ldbu	r4,0(r17)
  80fd38:	01800204 	movi	r6,8
  80fd3c:	203ff21e 	bne	r4,zero,80fd08 <__hexnan+0xa0>
  80fd40:	90004d26 	beq	r18,zero,80fe78 <__hexnan+0x210>
  80fd44:	85404336 	bltu	r16,r21,80fe54 <__hexnan+0x1ec>
  80fd48:	9c00382e 	bgeu	r19,r16,80fe2c <__hexnan+0x1c4>
  80fd4c:	9807883a 	mov	r3,r19
  80fd50:	80800017 	ldw	r2,0(r16)
  80fd54:	84000104 	addi	r16,r16,4
  80fd58:	18800015 	stw	r2,0(r3)
  80fd5c:	18c00104 	addi	r3,r3,4
  80fd60:	a43ffb2e 	bgeu	r20,r16,80fd50 <__hexnan+0xe8>
  80fd64:	18000015 	stw	zero,0(r3)
  80fd68:	18c00104 	addi	r3,r3,4
  80fd6c:	a0fffd2e 	bgeu	r20,r3,80fd64 <__hexnan+0xfc>
  80fd70:	a0800017 	ldw	r2,0(r20)
  80fd74:	1000071e 	bne	r2,zero,80fd94 <__hexnan+0x12c>
  80fd78:	9d004326 	beq	r19,r20,80fe88 <__hexnan+0x220>
  80fd7c:	a007883a 	mov	r3,r20
  80fd80:	00000106 	br	80fd88 <__hexnan+0x120>
  80fd84:	98c04026 	beq	r19,r3,80fe88 <__hexnan+0x220>
  80fd88:	18ffff04 	addi	r3,r3,-4
  80fd8c:	18800017 	ldw	r2,0(r3)
  80fd90:	103ffc26 	beq	r2,zero,80fd84 <__hexnan+0x11c>
  80fd94:	00c00144 	movi	r3,5
  80fd98:	1805883a 	mov	r2,r3
  80fd9c:	dfc00b17 	ldw	ra,44(sp)
  80fda0:	df000a17 	ldw	fp,40(sp)
  80fda4:	ddc00917 	ldw	r23,36(sp)
  80fda8:	dd800817 	ldw	r22,32(sp)
  80fdac:	dd400717 	ldw	r21,28(sp)
  80fdb0:	dd000617 	ldw	r20,24(sp)
  80fdb4:	dcc00517 	ldw	r19,20(sp)
  80fdb8:	dc800417 	ldw	r18,16(sp)
  80fdbc:	dc400317 	ldw	r17,12(sp)
  80fdc0:	dc000217 	ldw	r16,8(sp)
  80fdc4:	dec00c04 	addi	sp,sp,48
  80fdc8:	f800283a 	ret
  80fdcc:	31800044 	addi	r6,r6,1
  80fdd0:	00800204 	movi	r2,8
  80fdd4:	94800044 	addi	r18,r18,1
  80fdd8:	1180040e 	bge	r2,r6,80fdec <__hexnan+0x184>
  80fddc:	9c3fc72e 	bgeu	r19,r16,80fcfc <__hexnan+0x94>
  80fde0:	843fff04 	addi	r16,r16,-4
  80fde4:	80000015 	stw	zero,0(r16)
  80fde8:	01800044 	movi	r6,1
  80fdec:	80800017 	ldw	r2,0(r16)
  80fdf0:	18c003cc 	andi	r3,r3,15
  80fdf4:	1004913a 	slli	r2,r2,4
  80fdf8:	10c4b03a 	or	r2,r2,r3
  80fdfc:	80800015 	stw	r2,0(r16)
  80fe00:	003fbe06 	br	80fcfc <__hexnan+0x94>
  80fe04:	843fff04 	addi	r16,r16,-4
  80fe08:	802b883a 	mov	r21,r16
  80fe0c:	902f883a 	mov	r23,r18
  80fe10:	000d883a 	mov	r6,zero
  80fe14:	80000015 	stw	zero,0(r16)
  80fe18:	003fb806 	br	80fcfc <__hexnan+0x94>
  80fe1c:	8009883a 	mov	r4,r16
  80fe20:	a80b883a 	mov	r5,r21
  80fe24:	080fc1c0 	call	80fc1c <L_shift>
  80fe28:	003fc006 	br	80fd2c <__hexnan+0xc4>
  80fe2c:	e03fd01e 	bne	fp,zero,80fd70 <__hexnan+0x108>
  80fe30:	d8c00017 	ldw	r3,0(sp)
  80fe34:	00800804 	movi	r2,32
  80fe38:	10c5c83a 	sub	r2,r2,r3
  80fe3c:	00ffffc4 	movi	r3,-1
  80fe40:	1886d83a 	srl	r3,r3,r2
  80fe44:	a0800017 	ldw	r2,0(r20)
  80fe48:	10c4703a 	and	r2,r2,r3
  80fe4c:	a0800015 	stw	r2,0(r20)
  80fe50:	003fc806 	br	80fd74 <__hexnan+0x10c>
  80fe54:	008001c4 	movi	r2,7
  80fe58:	11bfbb16 	blt	r2,r6,80fd48 <__hexnan+0xe0>
  80fe5c:	a80b883a 	mov	r5,r21
  80fe60:	8009883a 	mov	r4,r16
  80fe64:	080fc1c0 	call	80fc1c <L_shift>
  80fe68:	9c3ff02e 	bgeu	r19,r16,80fe2c <__hexnan+0x1c4>
  80fe6c:	003fb706 	br	80fd4c <__hexnan+0xe4>
  80fe70:	00800a44 	movi	r2,41
  80fe74:	20800826 	beq	r4,r2,80fe98 <__hexnan+0x230>
  80fe78:	00c00104 	movi	r3,4
  80fe7c:	003fc606 	br	80fd98 <__hexnan+0x130>
  80fe80:	080f3080 	call	80f308 <__hexdig_init>
  80fe84:	003f8a06 	br	80fcb0 <__hexnan+0x48>
  80fe88:	00800044 	movi	r2,1
  80fe8c:	00c00144 	movi	r3,5
  80fe90:	98800015 	stw	r2,0(r19)
  80fe94:	003fc006 	br	80fd98 <__hexnan+0x130>
  80fe98:	903ff726 	beq	r18,zero,80fe78 <__hexnan+0x210>
  80fe9c:	d8c00117 	ldw	r3,4(sp)
  80fea0:	88800044 	addi	r2,r17,1
  80fea4:	18800015 	stw	r2,0(r3)
  80fea8:	857fa72e 	bgeu	r16,r21,80fd48 <__hexnan+0xe0>
  80feac:	003fe906 	br	80fe54 <__hexnan+0x1ec>

0080feb0 <__muldi3>:
  80feb0:	defff204 	addi	sp,sp,-56
  80feb4:	df000c15 	stw	fp,48(sp)
  80feb8:	3038d43a 	srli	fp,r6,16
  80febc:	dd000815 	stw	r20,32(sp)
  80fec0:	dc400515 	stw	r17,20(sp)
  80fec4:	2028d43a 	srli	r20,r4,16
  80fec8:	247fffcc 	andi	r17,r4,65535
  80fecc:	dc000415 	stw	r16,16(sp)
  80fed0:	343fffcc 	andi	r16,r6,65535
  80fed4:	dcc00715 	stw	r19,28(sp)
  80fed8:	d9000015 	stw	r4,0(sp)
  80fedc:	2827883a 	mov	r19,r5
  80fee0:	8809883a 	mov	r4,r17
  80fee4:	d9400115 	stw	r5,4(sp)
  80fee8:	800b883a 	mov	r5,r16
  80feec:	d9800215 	stw	r6,8(sp)
  80fef0:	dfc00d15 	stw	ra,52(sp)
  80fef4:	d9c00315 	stw	r7,12(sp)
  80fef8:	dd800a15 	stw	r22,40(sp)
  80fefc:	dd400915 	stw	r21,36(sp)
  80ff00:	302d883a 	mov	r22,r6
  80ff04:	ddc00b15 	stw	r23,44(sp)
  80ff08:	dc800615 	stw	r18,24(sp)
  80ff0c:	08026a00 	call	8026a0 <__mulsi3>
  80ff10:	8809883a 	mov	r4,r17
  80ff14:	e00b883a 	mov	r5,fp
  80ff18:	102b883a 	mov	r21,r2
  80ff1c:	08026a00 	call	8026a0 <__mulsi3>
  80ff20:	800b883a 	mov	r5,r16
  80ff24:	a009883a 	mov	r4,r20
  80ff28:	1023883a 	mov	r17,r2
  80ff2c:	08026a00 	call	8026a0 <__mulsi3>
  80ff30:	a009883a 	mov	r4,r20
  80ff34:	e00b883a 	mov	r5,fp
  80ff38:	1021883a 	mov	r16,r2
  80ff3c:	08026a00 	call	8026a0 <__mulsi3>
  80ff40:	a8ffffcc 	andi	r3,r21,65535
  80ff44:	a82ad43a 	srli	r21,r21,16
  80ff48:	8c23883a 	add	r17,r17,r16
  80ff4c:	1011883a 	mov	r8,r2
  80ff50:	ac6b883a 	add	r21,r21,r17
  80ff54:	a804943a 	slli	r2,r21,16
  80ff58:	b009883a 	mov	r4,r22
  80ff5c:	980b883a 	mov	r5,r19
  80ff60:	10c7883a 	add	r3,r2,r3
  80ff64:	a812d43a 	srli	r9,r21,16
  80ff68:	180d883a 	mov	r6,r3
  80ff6c:	ac00022e 	bgeu	r21,r16,80ff78 <__muldi3+0xc8>
  80ff70:	00800074 	movhi	r2,1
  80ff74:	4091883a 	add	r8,r8,r2
  80ff78:	4267883a 	add	r19,r8,r9
  80ff7c:	302d883a 	mov	r22,r6
  80ff80:	08026a00 	call	8026a0 <__mulsi3>
  80ff84:	d9400317 	ldw	r5,12(sp)
  80ff88:	d9000017 	ldw	r4,0(sp)
  80ff8c:	1023883a 	mov	r17,r2
  80ff90:	08026a00 	call	8026a0 <__mulsi3>
  80ff94:	14cb883a 	add	r5,r2,r19
  80ff98:	894b883a 	add	r5,r17,r5
  80ff9c:	b005883a 	mov	r2,r22
  80ffa0:	2807883a 	mov	r3,r5
  80ffa4:	dfc00d17 	ldw	ra,52(sp)
  80ffa8:	df000c17 	ldw	fp,48(sp)
  80ffac:	ddc00b17 	ldw	r23,44(sp)
  80ffb0:	dd800a17 	ldw	r22,40(sp)
  80ffb4:	dd400917 	ldw	r21,36(sp)
  80ffb8:	dd000817 	ldw	r20,32(sp)
  80ffbc:	dcc00717 	ldw	r19,28(sp)
  80ffc0:	dc800617 	ldw	r18,24(sp)
  80ffc4:	dc400517 	ldw	r17,20(sp)
  80ffc8:	dc000417 	ldw	r16,16(sp)
  80ffcc:	dec00e04 	addi	sp,sp,56
  80ffd0:	f800283a 	ret

0080ffd4 <__fixunsdfsi>:
  80ffd4:	defffb04 	addi	sp,sp,-20
  80ffd8:	dc400115 	stw	r17,4(sp)
  80ffdc:	dc000015 	stw	r16,0(sp)
  80ffe0:	04507834 	movhi	r17,16864
  80ffe4:	0021883a 	mov	r16,zero
  80ffe8:	800d883a 	mov	r6,r16
  80ffec:	880f883a 	mov	r7,r17
  80fff0:	dcc00315 	stw	r19,12(sp)
  80fff4:	dc800215 	stw	r18,8(sp)
  80fff8:	2827883a 	mov	r19,r5
  80fffc:	2025883a 	mov	r18,r4
  810000:	dfc00415 	stw	ra,16(sp)
  810004:	08114080 	call	811408 <__gedf2>
  810008:	000d883a 	mov	r6,zero
  81000c:	880f883a 	mov	r7,r17
  810010:	980b883a 	mov	r5,r19
  810014:	9009883a 	mov	r4,r18
  810018:	10000d16 	blt	r2,zero,810050 <__fixunsdfsi+0x7c>
  81001c:	08021c00 	call	8021c0 <__subdf3>
  810020:	180b883a 	mov	r5,r3
  810024:	1009883a 	mov	r4,r2
  810028:	08116980 	call	811698 <__fixdfsi>
  81002c:	00e00034 	movhi	r3,32768
  810030:	10c5883a 	add	r2,r2,r3
  810034:	dfc00417 	ldw	ra,16(sp)
  810038:	dcc00317 	ldw	r19,12(sp)
  81003c:	dc800217 	ldw	r18,8(sp)
  810040:	dc400117 	ldw	r17,4(sp)
  810044:	dc000017 	ldw	r16,0(sp)
  810048:	dec00504 	addi	sp,sp,20
  81004c:	f800283a 	ret
  810050:	980b883a 	mov	r5,r19
  810054:	9009883a 	mov	r4,r18
  810058:	08116980 	call	811698 <__fixdfsi>
  81005c:	dfc00417 	ldw	ra,16(sp)
  810060:	dcc00317 	ldw	r19,12(sp)
  810064:	dc800217 	ldw	r18,8(sp)
  810068:	dc400117 	ldw	r17,4(sp)
  81006c:	dc000017 	ldw	r16,0(sp)
  810070:	dec00504 	addi	sp,sp,20
  810074:	f800283a 	ret

00810078 <__udivdi3>:
  810078:	defff104 	addi	sp,sp,-60
  81007c:	0015883a 	mov	r10,zero
  810080:	2005883a 	mov	r2,r4
  810084:	3011883a 	mov	r8,r6
  810088:	df000d15 	stw	fp,52(sp)
  81008c:	dd400a15 	stw	r21,40(sp)
  810090:	dcc00815 	stw	r19,32(sp)
  810094:	dfc00e15 	stw	ra,56(sp)
  810098:	ddc00c15 	stw	r23,48(sp)
  81009c:	dd800b15 	stw	r22,44(sp)
  8100a0:	dd000915 	stw	r20,36(sp)
  8100a4:	dc800715 	stw	r18,28(sp)
  8100a8:	dc400615 	stw	r17,24(sp)
  8100ac:	dc000515 	stw	r16,20(sp)
  8100b0:	da800315 	stw	r10,12(sp)
  8100b4:	4027883a 	mov	r19,r8
  8100b8:	1039883a 	mov	fp,r2
  8100bc:	282b883a 	mov	r21,r5
  8100c0:	da800415 	stw	r10,16(sp)
  8100c4:	3800401e 	bne	r7,zero,8101c8 <__udivdi3+0x150>
  8100c8:	2a006536 	bltu	r5,r8,810260 <__udivdi3+0x1e8>
  8100cc:	4000b526 	beq	r8,zero,8103a4 <__udivdi3+0x32c>
  8100d0:	00bfffd4 	movui	r2,65535
  8100d4:	14c0ad36 	bltu	r2,r19,81038c <__udivdi3+0x314>
  8100d8:	00803fc4 	movi	r2,255
  8100dc:	14c15e36 	bltu	r2,r19,810658 <__udivdi3+0x5e0>
  8100e0:	000b883a 	mov	r5,zero
  8100e4:	0005883a 	mov	r2,zero
  8100e8:	9884d83a 	srl	r2,r19,r2
  8100ec:	01002074 	movhi	r4,129
  8100f0:	21139b04 	addi	r4,r4,20076
  8100f4:	01800804 	movi	r6,32
  8100f8:	1105883a 	add	r2,r2,r4
  8100fc:	10c00003 	ldbu	r3,0(r2)
  810100:	28c7883a 	add	r3,r5,r3
  810104:	30e9c83a 	sub	r20,r6,r3
  810108:	a0010a1e 	bne	r20,zero,810534 <__udivdi3+0x4bc>
  81010c:	982ed43a 	srli	r23,r19,16
  810110:	acebc83a 	sub	r21,r21,r19
  810114:	9dbfffcc 	andi	r22,r19,65535
  810118:	05000044 	movi	r20,1
  81011c:	a809883a 	mov	r4,r21
  810120:	b80b883a 	mov	r5,r23
  810124:	08119200 	call	811920 <__udivsi3>
  810128:	100b883a 	mov	r5,r2
  81012c:	b009883a 	mov	r4,r22
  810130:	1021883a 	mov	r16,r2
  810134:	08026a00 	call	8026a0 <__mulsi3>
  810138:	a809883a 	mov	r4,r21
  81013c:	b80b883a 	mov	r5,r23
  810140:	1023883a 	mov	r17,r2
  810144:	08119280 	call	811928 <__umodsi3>
  810148:	1004943a 	slli	r2,r2,16
  81014c:	e006d43a 	srli	r3,fp,16
  810150:	10c4b03a 	or	r2,r2,r3
  810154:	1440042e 	bgeu	r2,r17,810168 <__udivdi3+0xf0>
  810158:	14c5883a 	add	r2,r2,r19
  81015c:	843fffc4 	addi	r16,r16,-1
  810160:	14c00136 	bltu	r2,r19,810168 <__udivdi3+0xf0>
  810164:	14415c36 	bltu	r2,r17,8106d8 <__udivdi3+0x660>
  810168:	1463c83a 	sub	r17,r2,r17
  81016c:	8809883a 	mov	r4,r17
  810170:	b80b883a 	mov	r5,r23
  810174:	08119200 	call	811920 <__udivsi3>
  810178:	100b883a 	mov	r5,r2
  81017c:	b009883a 	mov	r4,r22
  810180:	102b883a 	mov	r21,r2
  810184:	08026a00 	call	8026a0 <__mulsi3>
  810188:	8809883a 	mov	r4,r17
  81018c:	b80b883a 	mov	r5,r23
  810190:	1025883a 	mov	r18,r2
  810194:	08119280 	call	811928 <__umodsi3>
  810198:	1004943a 	slli	r2,r2,16
  81019c:	e0ffffcc 	andi	r3,fp,65535
  8101a0:	10c4b03a 	or	r2,r2,r3
  8101a4:	1480042e 	bgeu	r2,r18,8101b8 <__udivdi3+0x140>
  8101a8:	9885883a 	add	r2,r19,r2
  8101ac:	ad7fffc4 	addi	r21,r21,-1
  8101b0:	14c00136 	bltu	r2,r19,8101b8 <__udivdi3+0x140>
  8101b4:	14813c36 	bltu	r2,r18,8106a8 <__udivdi3+0x630>
  8101b8:	8004943a 	slli	r2,r16,16
  8101bc:	a009883a 	mov	r4,r20
  8101c0:	a884b03a 	or	r2,r21,r2
  8101c4:	00001506 	br	81021c <__udivdi3+0x1a4>
  8101c8:	380d883a 	mov	r6,r7
  8101cc:	29c06c36 	bltu	r5,r7,810380 <__udivdi3+0x308>
  8101d0:	00bfffd4 	movui	r2,65535
  8101d4:	11c06436 	bltu	r2,r7,810368 <__udivdi3+0x2f0>
  8101d8:	00803fc4 	movi	r2,255
  8101dc:	11c11836 	bltu	r2,r7,810640 <__udivdi3+0x5c8>
  8101e0:	000b883a 	mov	r5,zero
  8101e4:	0005883a 	mov	r2,zero
  8101e8:	3084d83a 	srl	r2,r6,r2
  8101ec:	01002074 	movhi	r4,129
  8101f0:	21139b04 	addi	r4,r4,20076
  8101f4:	01c00804 	movi	r7,32
  8101f8:	1105883a 	add	r2,r2,r4
  8101fc:	10c00003 	ldbu	r3,0(r2)
  810200:	28c7883a 	add	r3,r5,r3
  810204:	38edc83a 	sub	r22,r7,r3
  810208:	b000731e 	bne	r22,zero,8103d8 <__udivdi3+0x360>
  81020c:	35400136 	bltu	r6,r21,810214 <__udivdi3+0x19c>
  810210:	e4c05b36 	bltu	fp,r19,810380 <__udivdi3+0x308>
  810214:	00800044 	movi	r2,1
  810218:	0009883a 	mov	r4,zero
  81021c:	d8800315 	stw	r2,12(sp)
  810220:	d9400317 	ldw	r5,12(sp)
  810224:	2007883a 	mov	r3,r4
  810228:	d9000415 	stw	r4,16(sp)
  81022c:	2805883a 	mov	r2,r5
  810230:	dfc00e17 	ldw	ra,56(sp)
  810234:	df000d17 	ldw	fp,52(sp)
  810238:	ddc00c17 	ldw	r23,48(sp)
  81023c:	dd800b17 	ldw	r22,44(sp)
  810240:	dd400a17 	ldw	r21,40(sp)
  810244:	dd000917 	ldw	r20,36(sp)
  810248:	dcc00817 	ldw	r19,32(sp)
  81024c:	dc800717 	ldw	r18,28(sp)
  810250:	dc400617 	ldw	r17,24(sp)
  810254:	dc000517 	ldw	r16,20(sp)
  810258:	dec00f04 	addi	sp,sp,60
  81025c:	f800283a 	ret
  810260:	00bfffd4 	movui	r2,65535
  810264:	12005636 	bltu	r2,r8,8103c0 <__udivdi3+0x348>
  810268:	00803fc4 	movi	r2,255
  81026c:	12010036 	bltu	r2,r8,810670 <__udivdi3+0x5f8>
  810270:	000b883a 	mov	r5,zero
  810274:	0005883a 	mov	r2,zero
  810278:	9884d83a 	srl	r2,r19,r2
  81027c:	01002074 	movhi	r4,129
  810280:	21139b04 	addi	r4,r4,20076
  810284:	01800804 	movi	r6,32
  810288:	1105883a 	add	r2,r2,r4
  81028c:	10c00003 	ldbu	r3,0(r2)
  810290:	28c7883a 	add	r3,r5,r3
  810294:	30cbc83a 	sub	r5,r6,r3
  810298:	28000626 	beq	r5,zero,8102b4 <__udivdi3+0x23c>
  81029c:	3145c83a 	sub	r2,r6,r5
  8102a0:	e084d83a 	srl	r2,fp,r2
  8102a4:	a946983a 	sll	r3,r21,r5
  8102a8:	e178983a 	sll	fp,fp,r5
  8102ac:	9966983a 	sll	r19,r19,r5
  8102b0:	18aab03a 	or	r21,r3,r2
  8102b4:	982ed43a 	srli	r23,r19,16
  8102b8:	a809883a 	mov	r4,r21
  8102bc:	9cbfffcc 	andi	r18,r19,65535
  8102c0:	b80b883a 	mov	r5,r23
  8102c4:	08119200 	call	811920 <__udivsi3>
  8102c8:	100b883a 	mov	r5,r2
  8102cc:	9009883a 	mov	r4,r18
  8102d0:	1021883a 	mov	r16,r2
  8102d4:	08026a00 	call	8026a0 <__mulsi3>
  8102d8:	a809883a 	mov	r4,r21
  8102dc:	b80b883a 	mov	r5,r23
  8102e0:	1023883a 	mov	r17,r2
  8102e4:	08119280 	call	811928 <__umodsi3>
  8102e8:	1004943a 	slli	r2,r2,16
  8102ec:	e006d43a 	srli	r3,fp,16
  8102f0:	10c4b03a 	or	r2,r2,r3
  8102f4:	1440042e 	bgeu	r2,r17,810308 <__udivdi3+0x290>
  8102f8:	14c5883a 	add	r2,r2,r19
  8102fc:	843fffc4 	addi	r16,r16,-1
  810300:	14c00136 	bltu	r2,r19,810308 <__udivdi3+0x290>
  810304:	1440ea36 	bltu	r2,r17,8106b0 <__udivdi3+0x638>
  810308:	1463c83a 	sub	r17,r2,r17
  81030c:	8809883a 	mov	r4,r17
  810310:	b80b883a 	mov	r5,r23
  810314:	08119200 	call	811920 <__udivsi3>
  810318:	100b883a 	mov	r5,r2
  81031c:	9009883a 	mov	r4,r18
  810320:	102b883a 	mov	r21,r2
  810324:	08026a00 	call	8026a0 <__mulsi3>
  810328:	8809883a 	mov	r4,r17
  81032c:	b80b883a 	mov	r5,r23
  810330:	1025883a 	mov	r18,r2
  810334:	08119280 	call	811928 <__umodsi3>
  810338:	1004943a 	slli	r2,r2,16
  81033c:	e0ffffcc 	andi	r3,fp,65535
  810340:	10c4b03a 	or	r2,r2,r3
  810344:	1480042e 	bgeu	r2,r18,810358 <__udivdi3+0x2e0>
  810348:	9885883a 	add	r2,r19,r2
  81034c:	ad7fffc4 	addi	r21,r21,-1
  810350:	14c00136 	bltu	r2,r19,810358 <__udivdi3+0x2e0>
  810354:	1480d936 	bltu	r2,r18,8106bc <__udivdi3+0x644>
  810358:	8004943a 	slli	r2,r16,16
  81035c:	0009883a 	mov	r4,zero
  810360:	a884b03a 	or	r2,r21,r2
  810364:	003fad06 	br	81021c <__udivdi3+0x1a4>
  810368:	00804034 	movhi	r2,256
  81036c:	10bfffc4 	addi	r2,r2,-1
  810370:	11c0b636 	bltu	r2,r7,81064c <__udivdi3+0x5d4>
  810374:	01400404 	movi	r5,16
  810378:	2805883a 	mov	r2,r5
  81037c:	003f9a06 	br	8101e8 <__udivdi3+0x170>
  810380:	0005883a 	mov	r2,zero
  810384:	0009883a 	mov	r4,zero
  810388:	003fa406 	br	81021c <__udivdi3+0x1a4>
  81038c:	00804034 	movhi	r2,256
  810390:	10bfffc4 	addi	r2,r2,-1
  810394:	14c0b336 	bltu	r2,r19,810664 <__udivdi3+0x5ec>
  810398:	01400404 	movi	r5,16
  81039c:	2805883a 	mov	r2,r5
  8103a0:	003f5106 	br	8100e8 <__udivdi3+0x70>
  8103a4:	01000044 	movi	r4,1
  8103a8:	000b883a 	mov	r5,zero
  8103ac:	08119200 	call	811920 <__udivsi3>
  8103b0:	1027883a 	mov	r19,r2
  8103b4:	00bfffd4 	movui	r2,65535
  8103b8:	14fff436 	bltu	r2,r19,81038c <__udivdi3+0x314>
  8103bc:	003f4606 	br	8100d8 <__udivdi3+0x60>
  8103c0:	00804034 	movhi	r2,256
  8103c4:	10bfffc4 	addi	r2,r2,-1
  8103c8:	1200ac36 	bltu	r2,r8,81067c <__udivdi3+0x604>
  8103cc:	01400404 	movi	r5,16
  8103d0:	2805883a 	mov	r2,r5
  8103d4:	003fa806 	br	810278 <__udivdi3+0x200>
  8103d8:	3d85c83a 	sub	r2,r7,r22
  8103dc:	3588983a 	sll	r4,r6,r22
  8103e0:	9886d83a 	srl	r3,r19,r2
  8103e4:	a8a2d83a 	srl	r17,r21,r2
  8103e8:	e084d83a 	srl	r2,fp,r2
  8103ec:	20eeb03a 	or	r23,r4,r3
  8103f0:	b824d43a 	srli	r18,r23,16
  8103f4:	ad86983a 	sll	r3,r21,r22
  8103f8:	8809883a 	mov	r4,r17
  8103fc:	900b883a 	mov	r5,r18
  810400:	1886b03a 	or	r3,r3,r2
  810404:	d8c00115 	stw	r3,4(sp)
  810408:	bc3fffcc 	andi	r16,r23,65535
  81040c:	08119200 	call	811920 <__udivsi3>
  810410:	100b883a 	mov	r5,r2
  810414:	8009883a 	mov	r4,r16
  810418:	1029883a 	mov	r20,r2
  81041c:	08026a00 	call	8026a0 <__mulsi3>
  810420:	900b883a 	mov	r5,r18
  810424:	8809883a 	mov	r4,r17
  810428:	102b883a 	mov	r21,r2
  81042c:	08119280 	call	811928 <__umodsi3>
  810430:	d9400117 	ldw	r5,4(sp)
  810434:	1004943a 	slli	r2,r2,16
  810438:	9da6983a 	sll	r19,r19,r22
  81043c:	2806d43a 	srli	r3,r5,16
  810440:	10c4b03a 	or	r2,r2,r3
  810444:	1540032e 	bgeu	r2,r21,810454 <__udivdi3+0x3dc>
  810448:	15c5883a 	add	r2,r2,r23
  81044c:	a53fffc4 	addi	r20,r20,-1
  810450:	15c0912e 	bgeu	r2,r23,810698 <__udivdi3+0x620>
  810454:	1563c83a 	sub	r17,r2,r21
  810458:	8809883a 	mov	r4,r17
  81045c:	900b883a 	mov	r5,r18
  810460:	08119200 	call	811920 <__udivsi3>
  810464:	100b883a 	mov	r5,r2
  810468:	8009883a 	mov	r4,r16
  81046c:	102b883a 	mov	r21,r2
  810470:	08026a00 	call	8026a0 <__mulsi3>
  810474:	8809883a 	mov	r4,r17
  810478:	900b883a 	mov	r5,r18
  81047c:	1021883a 	mov	r16,r2
  810480:	08119280 	call	811928 <__umodsi3>
  810484:	da800117 	ldw	r10,4(sp)
  810488:	1004943a 	slli	r2,r2,16
  81048c:	50ffffcc 	andi	r3,r10,65535
  810490:	10c6b03a 	or	r3,r2,r3
  810494:	1c00032e 	bgeu	r3,r16,8104a4 <__udivdi3+0x42c>
  810498:	1dc7883a 	add	r3,r3,r23
  81049c:	ad7fffc4 	addi	r21,r21,-1
  8104a0:	1dc0792e 	bgeu	r3,r23,810688 <__udivdi3+0x610>
  8104a4:	a004943a 	slli	r2,r20,16
  8104a8:	982ed43a 	srli	r23,r19,16
  8104ac:	9cffffcc 	andi	r19,r19,65535
  8104b0:	a8a4b03a 	or	r18,r21,r2
  8104b4:	947fffcc 	andi	r17,r18,65535
  8104b8:	902ad43a 	srli	r21,r18,16
  8104bc:	8809883a 	mov	r4,r17
  8104c0:	980b883a 	mov	r5,r19
  8104c4:	1c21c83a 	sub	r16,r3,r16
  8104c8:	08026a00 	call	8026a0 <__mulsi3>
  8104cc:	8809883a 	mov	r4,r17
  8104d0:	b80b883a 	mov	r5,r23
  8104d4:	1029883a 	mov	r20,r2
  8104d8:	08026a00 	call	8026a0 <__mulsi3>
  8104dc:	980b883a 	mov	r5,r19
  8104e0:	a809883a 	mov	r4,r21
  8104e4:	1023883a 	mov	r17,r2
  8104e8:	08026a00 	call	8026a0 <__mulsi3>
  8104ec:	a809883a 	mov	r4,r21
  8104f0:	b80b883a 	mov	r5,r23
  8104f4:	1027883a 	mov	r19,r2
  8104f8:	08026a00 	call	8026a0 <__mulsi3>
  8104fc:	1009883a 	mov	r4,r2
  810500:	a004d43a 	srli	r2,r20,16
  810504:	8ce3883a 	add	r17,r17,r19
  810508:	1447883a 	add	r3,r2,r17
  81050c:	1cc0022e 	bgeu	r3,r19,810518 <__udivdi3+0x4a0>
  810510:	00800074 	movhi	r2,1
  810514:	2089883a 	add	r4,r4,r2
  810518:	1804d43a 	srli	r2,r3,16
  81051c:	2085883a 	add	r2,r4,r2
  810520:	80804436 	bltu	r16,r2,810634 <__udivdi3+0x5bc>
  810524:	80803e26 	beq	r16,r2,810620 <__udivdi3+0x5a8>
  810528:	9005883a 	mov	r2,r18
  81052c:	0009883a 	mov	r4,zero
  810530:	003f3a06 	br	81021c <__udivdi3+0x1a4>
  810534:	9d26983a 	sll	r19,r19,r20
  810538:	3505c83a 	sub	r2,r6,r20
  81053c:	a8a2d83a 	srl	r17,r21,r2
  810540:	982ed43a 	srli	r23,r19,16
  810544:	e084d83a 	srl	r2,fp,r2
  810548:	ad06983a 	sll	r3,r21,r20
  81054c:	8809883a 	mov	r4,r17
  810550:	b80b883a 	mov	r5,r23
  810554:	1886b03a 	or	r3,r3,r2
  810558:	d8c00015 	stw	r3,0(sp)
  81055c:	9dbfffcc 	andi	r22,r19,65535
  810560:	08119200 	call	811920 <__udivsi3>
  810564:	100b883a 	mov	r5,r2
  810568:	b009883a 	mov	r4,r22
  81056c:	d8800215 	stw	r2,8(sp)
  810570:	08026a00 	call	8026a0 <__mulsi3>
  810574:	8809883a 	mov	r4,r17
  810578:	b80b883a 	mov	r5,r23
  81057c:	102b883a 	mov	r21,r2
  810580:	08119280 	call	811928 <__umodsi3>
  810584:	d9000017 	ldw	r4,0(sp)
  810588:	1004943a 	slli	r2,r2,16
  81058c:	2006d43a 	srli	r3,r4,16
  810590:	10c4b03a 	or	r2,r2,r3
  810594:	1540052e 	bgeu	r2,r21,8105ac <__udivdi3+0x534>
  810598:	d9400217 	ldw	r5,8(sp)
  81059c:	14c5883a 	add	r2,r2,r19
  8105a0:	297fffc4 	addi	r5,r5,-1
  8105a4:	d9400215 	stw	r5,8(sp)
  8105a8:	14c0462e 	bgeu	r2,r19,8106c4 <__udivdi3+0x64c>
  8105ac:	1563c83a 	sub	r17,r2,r21
  8105b0:	8809883a 	mov	r4,r17
  8105b4:	b80b883a 	mov	r5,r23
  8105b8:	08119200 	call	811920 <__udivsi3>
  8105bc:	100b883a 	mov	r5,r2
  8105c0:	b009883a 	mov	r4,r22
  8105c4:	1025883a 	mov	r18,r2
  8105c8:	08026a00 	call	8026a0 <__mulsi3>
  8105cc:	8809883a 	mov	r4,r17
  8105d0:	b80b883a 	mov	r5,r23
  8105d4:	1021883a 	mov	r16,r2
  8105d8:	08119280 	call	811928 <__umodsi3>
  8105dc:	da800017 	ldw	r10,0(sp)
  8105e0:	1004943a 	slli	r2,r2,16
  8105e4:	50ffffcc 	andi	r3,r10,65535
  8105e8:	10c6b03a 	or	r3,r2,r3
  8105ec:	1c00062e 	bgeu	r3,r16,810608 <__udivdi3+0x590>
  8105f0:	1cc7883a 	add	r3,r3,r19
  8105f4:	94bfffc4 	addi	r18,r18,-1
  8105f8:	1cc00336 	bltu	r3,r19,810608 <__udivdi3+0x590>
  8105fc:	1c00022e 	bgeu	r3,r16,810608 <__udivdi3+0x590>
  810600:	94bfffc4 	addi	r18,r18,-1
  810604:	1cc7883a 	add	r3,r3,r19
  810608:	d9000217 	ldw	r4,8(sp)
  81060c:	e538983a 	sll	fp,fp,r20
  810610:	1c2bc83a 	sub	r21,r3,r16
  810614:	2004943a 	slli	r2,r4,16
  810618:	90a8b03a 	or	r20,r18,r2
  81061c:	003ebf06 	br	81011c <__udivdi3+0xa4>
  810620:	1804943a 	slli	r2,r3,16
  810624:	e588983a 	sll	r4,fp,r22
  810628:	a0ffffcc 	andi	r3,r20,65535
  81062c:	10c5883a 	add	r2,r2,r3
  810630:	20bfbd2e 	bgeu	r4,r2,810528 <__udivdi3+0x4b0>
  810634:	90bfffc4 	addi	r2,r18,-1
  810638:	0009883a 	mov	r4,zero
  81063c:	003ef706 	br	81021c <__udivdi3+0x1a4>
  810640:	01400204 	movi	r5,8
  810644:	2805883a 	mov	r2,r5
  810648:	003ee706 	br	8101e8 <__udivdi3+0x170>
  81064c:	01400604 	movi	r5,24
  810650:	2805883a 	mov	r2,r5
  810654:	003ee406 	br	8101e8 <__udivdi3+0x170>
  810658:	01400204 	movi	r5,8
  81065c:	2805883a 	mov	r2,r5
  810660:	003ea106 	br	8100e8 <__udivdi3+0x70>
  810664:	01400604 	movi	r5,24
  810668:	2805883a 	mov	r2,r5
  81066c:	003e9e06 	br	8100e8 <__udivdi3+0x70>
  810670:	01400204 	movi	r5,8
  810674:	2805883a 	mov	r2,r5
  810678:	003eff06 	br	810278 <__udivdi3+0x200>
  81067c:	01400604 	movi	r5,24
  810680:	2805883a 	mov	r2,r5
  810684:	003efc06 	br	810278 <__udivdi3+0x200>
  810688:	1c3f862e 	bgeu	r3,r16,8104a4 <__udivdi3+0x42c>
  81068c:	1dc7883a 	add	r3,r3,r23
  810690:	ad7fffc4 	addi	r21,r21,-1
  810694:	003f8306 	br	8104a4 <__udivdi3+0x42c>
  810698:	157f6e2e 	bgeu	r2,r21,810454 <__udivdi3+0x3dc>
  81069c:	a53fffc4 	addi	r20,r20,-1
  8106a0:	15c5883a 	add	r2,r2,r23
  8106a4:	003f6b06 	br	810454 <__udivdi3+0x3dc>
  8106a8:	ad7fffc4 	addi	r21,r21,-1
  8106ac:	003ec206 	br	8101b8 <__udivdi3+0x140>
  8106b0:	843fffc4 	addi	r16,r16,-1
  8106b4:	14c5883a 	add	r2,r2,r19
  8106b8:	003f1306 	br	810308 <__udivdi3+0x290>
  8106bc:	ad7fffc4 	addi	r21,r21,-1
  8106c0:	003f2506 	br	810358 <__udivdi3+0x2e0>
  8106c4:	157fb92e 	bgeu	r2,r21,8105ac <__udivdi3+0x534>
  8106c8:	297fffc4 	addi	r5,r5,-1
  8106cc:	14c5883a 	add	r2,r2,r19
  8106d0:	d9400215 	stw	r5,8(sp)
  8106d4:	003fb506 	br	8105ac <__udivdi3+0x534>
  8106d8:	843fffc4 	addi	r16,r16,-1
  8106dc:	14c5883a 	add	r2,r2,r19
  8106e0:	003ea106 	br	810168 <__udivdi3+0xf0>

008106e4 <__umoddi3>:
  8106e4:	defff004 	addi	sp,sp,-64
  8106e8:	3011883a 	mov	r8,r6
  8106ec:	000d883a 	mov	r6,zero
  8106f0:	dd400b15 	stw	r21,44(sp)
  8106f4:	dcc00915 	stw	r19,36(sp)
  8106f8:	dc000615 	stw	r16,24(sp)
  8106fc:	dfc00f15 	stw	ra,60(sp)
  810700:	df000e15 	stw	fp,56(sp)
  810704:	ddc00d15 	stw	r23,52(sp)
  810708:	dd800c15 	stw	r22,48(sp)
  81070c:	dd000a15 	stw	r20,40(sp)
  810710:	dc800815 	stw	r18,32(sp)
  810714:	dc400715 	stw	r17,28(sp)
  810718:	2817883a 	mov	r11,r5
  81071c:	d9800415 	stw	r6,16(sp)
  810720:	4027883a 	mov	r19,r8
  810724:	d9800515 	stw	r6,20(sp)
  810728:	2021883a 	mov	r16,r4
  81072c:	282b883a 	mov	r21,r5
  810730:	38002c1e 	bne	r7,zero,8107e4 <__umoddi3+0x100>
  810734:	2a005636 	bltu	r5,r8,810890 <__umoddi3+0x1ac>
  810738:	40009a26 	beq	r8,zero,8109a4 <__umoddi3+0x2c0>
  81073c:	00bfffd4 	movui	r2,65535
  810740:	14c09236 	bltu	r2,r19,81098c <__umoddi3+0x2a8>
  810744:	00803fc4 	movi	r2,255
  810748:	14c15c36 	bltu	r2,r19,810cbc <__umoddi3+0x5d8>
  81074c:	000b883a 	mov	r5,zero
  810750:	0005883a 	mov	r2,zero
  810754:	9884d83a 	srl	r2,r19,r2
  810758:	01002074 	movhi	r4,129
  81075c:	21139b04 	addi	r4,r4,20076
  810760:	01800804 	movi	r6,32
  810764:	1105883a 	add	r2,r2,r4
  810768:	10c00003 	ldbu	r3,0(r2)
  81076c:	28c7883a 	add	r3,r5,r3
  810770:	30e5c83a 	sub	r18,r6,r3
  810774:	9000a41e 	bne	r18,zero,810a08 <__umoddi3+0x324>
  810778:	982ed43a 	srli	r23,r19,16
  81077c:	acebc83a 	sub	r21,r21,r19
  810780:	9d3fffcc 	andi	r20,r19,65535
  810784:	002d883a 	mov	r22,zero
  810788:	a809883a 	mov	r4,r21
  81078c:	b80b883a 	mov	r5,r23
  810790:	08119200 	call	811920 <__udivsi3>
  810794:	100b883a 	mov	r5,r2
  810798:	a009883a 	mov	r4,r20
  81079c:	08026a00 	call	8026a0 <__mulsi3>
  8107a0:	a809883a 	mov	r4,r21
  8107a4:	b80b883a 	mov	r5,r23
  8107a8:	1023883a 	mov	r17,r2
  8107ac:	08119280 	call	811928 <__umodsi3>
  8107b0:	1004943a 	slli	r2,r2,16
  8107b4:	8006d43a 	srli	r3,r16,16
  8107b8:	10c4b03a 	or	r2,r2,r3
  8107bc:	1440032e 	bgeu	r2,r17,8107cc <__umoddi3+0xe8>
  8107c0:	14c5883a 	add	r2,r2,r19
  8107c4:	14c00136 	bltu	r2,r19,8107cc <__umoddi3+0xe8>
  8107c8:	14415836 	bltu	r2,r17,810d2c <__umoddi3+0x648>
  8107cc:	1463c83a 	sub	r17,r2,r17
  8107d0:	8809883a 	mov	r4,r17
  8107d4:	b80b883a 	mov	r5,r23
  8107d8:	08119200 	call	811920 <__udivsi3>
  8107dc:	a009883a 	mov	r4,r20
  8107e0:	00005306 	br	810930 <__umoddi3+0x24c>
  8107e4:	380d883a 	mov	r6,r7
  8107e8:	29c0132e 	bgeu	r5,r7,810838 <__umoddi3+0x154>
  8107ec:	d9000415 	stw	r4,16(sp)
  8107f0:	d9400515 	stw	r5,20(sp)
  8107f4:	d9400417 	ldw	r5,16(sp)
  8107f8:	5813883a 	mov	r9,r11
  8107fc:	2811883a 	mov	r8,r5
  810800:	4005883a 	mov	r2,r8
  810804:	4807883a 	mov	r3,r9
  810808:	dfc00f17 	ldw	ra,60(sp)
  81080c:	df000e17 	ldw	fp,56(sp)
  810810:	ddc00d17 	ldw	r23,52(sp)
  810814:	dd800c17 	ldw	r22,48(sp)
  810818:	dd400b17 	ldw	r21,44(sp)
  81081c:	dd000a17 	ldw	r20,40(sp)
  810820:	dcc00917 	ldw	r19,36(sp)
  810824:	dc800817 	ldw	r18,32(sp)
  810828:	dc400717 	ldw	r17,28(sp)
  81082c:	dc000617 	ldw	r16,24(sp)
  810830:	dec01004 	addi	sp,sp,64
  810834:	f800283a 	ret
  810838:	00bfffd4 	movui	r2,65535
  81083c:	11c06636 	bltu	r2,r7,8109d8 <__umoddi3+0x2f4>
  810840:	00803fc4 	movi	r2,255
  810844:	11c12036 	bltu	r2,r7,810cc8 <__umoddi3+0x5e4>
  810848:	000b883a 	mov	r5,zero
  81084c:	0005883a 	mov	r2,zero
  810850:	3084d83a 	srl	r2,r6,r2
  810854:	01002074 	movhi	r4,129
  810858:	21139b04 	addi	r4,r4,20076
  81085c:	01c00804 	movi	r7,32
  810860:	1105883a 	add	r2,r2,r4
  810864:	10c00003 	ldbu	r3,0(r2)
  810868:	28c7883a 	add	r3,r5,r3
  81086c:	38e5c83a 	sub	r18,r7,r3
  810870:	9000941e 	bne	r18,zero,810ac4 <__umoddi3+0x3e0>
  810874:	35405e36 	bltu	r6,r21,8109f0 <__umoddi3+0x30c>
  810878:	84c05d2e 	bgeu	r16,r19,8109f0 <__umoddi3+0x30c>
  81087c:	8011883a 	mov	r8,r16
  810880:	a813883a 	mov	r9,r21
  810884:	dc000415 	stw	r16,16(sp)
  810888:	dd400515 	stw	r21,20(sp)
  81088c:	003fdc06 	br	810800 <__umoddi3+0x11c>
  810890:	00bfffd4 	movui	r2,65535
  810894:	12004a36 	bltu	r2,r8,8109c0 <__umoddi3+0x2dc>
  810898:	00803fc4 	movi	r2,255
  81089c:	12010d36 	bltu	r2,r8,810cd4 <__umoddi3+0x5f0>
  8108a0:	000b883a 	mov	r5,zero
  8108a4:	0005883a 	mov	r2,zero
  8108a8:	9884d83a 	srl	r2,r19,r2
  8108ac:	01002074 	movhi	r4,129
  8108b0:	21139b04 	addi	r4,r4,20076
  8108b4:	01800804 	movi	r6,32
  8108b8:	1105883a 	add	r2,r2,r4
  8108bc:	10c00003 	ldbu	r3,0(r2)
  8108c0:	28c7883a 	add	r3,r5,r3
  8108c4:	30c7c83a 	sub	r3,r6,r3
  8108c8:	1800dc1e 	bne	r3,zero,810c3c <__umoddi3+0x558>
  8108cc:	002d883a 	mov	r22,zero
  8108d0:	982ed43a 	srli	r23,r19,16
  8108d4:	a809883a 	mov	r4,r21
  8108d8:	9cbfffcc 	andi	r18,r19,65535
  8108dc:	b80b883a 	mov	r5,r23
  8108e0:	08119200 	call	811920 <__udivsi3>
  8108e4:	100b883a 	mov	r5,r2
  8108e8:	9009883a 	mov	r4,r18
  8108ec:	08026a00 	call	8026a0 <__mulsi3>
  8108f0:	a809883a 	mov	r4,r21
  8108f4:	b80b883a 	mov	r5,r23
  8108f8:	1023883a 	mov	r17,r2
  8108fc:	08119280 	call	811928 <__umodsi3>
  810900:	1004943a 	slli	r2,r2,16
  810904:	8006d43a 	srli	r3,r16,16
  810908:	10c4b03a 	or	r2,r2,r3
  81090c:	1440032e 	bgeu	r2,r17,81091c <__umoddi3+0x238>
  810910:	14c5883a 	add	r2,r2,r19
  810914:	14c00136 	bltu	r2,r19,81091c <__umoddi3+0x238>
  810918:	14410236 	bltu	r2,r17,810d24 <__umoddi3+0x640>
  81091c:	1463c83a 	sub	r17,r2,r17
  810920:	8809883a 	mov	r4,r17
  810924:	b80b883a 	mov	r5,r23
  810928:	08119200 	call	811920 <__udivsi3>
  81092c:	9009883a 	mov	r4,r18
  810930:	100b883a 	mov	r5,r2
  810934:	08026a00 	call	8026a0 <__mulsi3>
  810938:	8809883a 	mov	r4,r17
  81093c:	b80b883a 	mov	r5,r23
  810940:	102b883a 	mov	r21,r2
  810944:	08119280 	call	811928 <__umodsi3>
  810948:	1004943a 	slli	r2,r2,16
  81094c:	80ffffcc 	andi	r3,r16,65535
  810950:	10c4b03a 	or	r2,r2,r3
  810954:	1540042e 	bgeu	r2,r21,810968 <__umoddi3+0x284>
  810958:	14c5883a 	add	r2,r2,r19
  81095c:	14c00236 	bltu	r2,r19,810968 <__umoddi3+0x284>
  810960:	1540012e 	bgeu	r2,r21,810968 <__umoddi3+0x284>
  810964:	14c5883a 	add	r2,r2,r19
  810968:	1545c83a 	sub	r2,r2,r21
  81096c:	1584d83a 	srl	r2,r2,r22
  810970:	0013883a 	mov	r9,zero
  810974:	d8800415 	stw	r2,16(sp)
  810978:	d8c00417 	ldw	r3,16(sp)
  81097c:	0005883a 	mov	r2,zero
  810980:	d8800515 	stw	r2,20(sp)
  810984:	1811883a 	mov	r8,r3
  810988:	003f9d06 	br	810800 <__umoddi3+0x11c>
  81098c:	00804034 	movhi	r2,256
  810990:	10bfffc4 	addi	r2,r2,-1
  810994:	14c0c636 	bltu	r2,r19,810cb0 <__umoddi3+0x5cc>
  810998:	01400404 	movi	r5,16
  81099c:	2805883a 	mov	r2,r5
  8109a0:	003f6c06 	br	810754 <__umoddi3+0x70>
  8109a4:	01000044 	movi	r4,1
  8109a8:	000b883a 	mov	r5,zero
  8109ac:	08119200 	call	811920 <__udivsi3>
  8109b0:	1027883a 	mov	r19,r2
  8109b4:	00bfffd4 	movui	r2,65535
  8109b8:	14fff436 	bltu	r2,r19,81098c <__umoddi3+0x2a8>
  8109bc:	003f6106 	br	810744 <__umoddi3+0x60>
  8109c0:	00804034 	movhi	r2,256
  8109c4:	10bfffc4 	addi	r2,r2,-1
  8109c8:	1200c536 	bltu	r2,r8,810ce0 <__umoddi3+0x5fc>
  8109cc:	01400404 	movi	r5,16
  8109d0:	2805883a 	mov	r2,r5
  8109d4:	003fb406 	br	8108a8 <__umoddi3+0x1c4>
  8109d8:	00804034 	movhi	r2,256
  8109dc:	10bfffc4 	addi	r2,r2,-1
  8109e0:	11c0c236 	bltu	r2,r7,810cec <__umoddi3+0x608>
  8109e4:	01400404 	movi	r5,16
  8109e8:	2805883a 	mov	r2,r5
  8109ec:	003f9806 	br	810850 <__umoddi3+0x16c>
  8109f0:	84c9c83a 	sub	r4,r16,r19
  8109f4:	8105803a 	cmpltu	r2,r16,r4
  8109f8:	a987c83a 	sub	r3,r21,r6
  8109fc:	18abc83a 	sub	r21,r3,r2
  810a00:	2021883a 	mov	r16,r4
  810a04:	003f9d06 	br	81087c <__umoddi3+0x198>
  810a08:	9ca6983a 	sll	r19,r19,r18
  810a0c:	3485c83a 	sub	r2,r6,r18
  810a10:	a8a2d83a 	srl	r17,r21,r2
  810a14:	982ed43a 	srli	r23,r19,16
  810a18:	ac86983a 	sll	r3,r21,r18
  810a1c:	8084d83a 	srl	r2,r16,r2
  810a20:	8809883a 	mov	r4,r17
  810a24:	b80b883a 	mov	r5,r23
  810a28:	18b8b03a 	or	fp,r3,r2
  810a2c:	9d3fffcc 	andi	r20,r19,65535
  810a30:	08119200 	call	811920 <__udivsi3>
  810a34:	100b883a 	mov	r5,r2
  810a38:	a009883a 	mov	r4,r20
  810a3c:	08026a00 	call	8026a0 <__mulsi3>
  810a40:	8809883a 	mov	r4,r17
  810a44:	b80b883a 	mov	r5,r23
  810a48:	102b883a 	mov	r21,r2
  810a4c:	08119280 	call	811928 <__umodsi3>
  810a50:	1004943a 	slli	r2,r2,16
  810a54:	e006d43a 	srli	r3,fp,16
  810a58:	902d883a 	mov	r22,r18
  810a5c:	10c4b03a 	or	r2,r2,r3
  810a60:	1540022e 	bgeu	r2,r21,810a6c <__umoddi3+0x388>
  810a64:	14c5883a 	add	r2,r2,r19
  810a68:	14c0ab2e 	bgeu	r2,r19,810d18 <__umoddi3+0x634>
  810a6c:	1563c83a 	sub	r17,r2,r21
  810a70:	8809883a 	mov	r4,r17
  810a74:	b80b883a 	mov	r5,r23
  810a78:	08119200 	call	811920 <__udivsi3>
  810a7c:	100b883a 	mov	r5,r2
  810a80:	a009883a 	mov	r4,r20
  810a84:	08026a00 	call	8026a0 <__mulsi3>
  810a88:	8809883a 	mov	r4,r17
  810a8c:	b80b883a 	mov	r5,r23
  810a90:	102b883a 	mov	r21,r2
  810a94:	08119280 	call	811928 <__umodsi3>
  810a98:	1004943a 	slli	r2,r2,16
  810a9c:	e0ffffcc 	andi	r3,fp,65535
  810aa0:	10c4b03a 	or	r2,r2,r3
  810aa4:	1540042e 	bgeu	r2,r21,810ab8 <__umoddi3+0x3d4>
  810aa8:	14c5883a 	add	r2,r2,r19
  810aac:	14c00236 	bltu	r2,r19,810ab8 <__umoddi3+0x3d4>
  810ab0:	1540012e 	bgeu	r2,r21,810ab8 <__umoddi3+0x3d4>
  810ab4:	14c5883a 	add	r2,r2,r19
  810ab8:	84a0983a 	sll	r16,r16,r18
  810abc:	156bc83a 	sub	r21,r2,r21
  810ac0:	003f3106 	br	810788 <__umoddi3+0xa4>
  810ac4:	3c8fc83a 	sub	r7,r7,r18
  810ac8:	3486983a 	sll	r3,r6,r18
  810acc:	99c4d83a 	srl	r2,r19,r7
  810ad0:	a9e2d83a 	srl	r17,r21,r7
  810ad4:	ac8c983a 	sll	r6,r21,r18
  810ad8:	18acb03a 	or	r22,r3,r2
  810adc:	b02ed43a 	srli	r23,r22,16
  810ae0:	81c4d83a 	srl	r2,r16,r7
  810ae4:	8809883a 	mov	r4,r17
  810ae8:	b80b883a 	mov	r5,r23
  810aec:	308cb03a 	or	r6,r6,r2
  810af0:	d9c00315 	stw	r7,12(sp)
  810af4:	d9800215 	stw	r6,8(sp)
  810af8:	b53fffcc 	andi	r20,r22,65535
  810afc:	08119200 	call	811920 <__udivsi3>
  810b00:	100b883a 	mov	r5,r2
  810b04:	a009883a 	mov	r4,r20
  810b08:	1039883a 	mov	fp,r2
  810b0c:	08026a00 	call	8026a0 <__mulsi3>
  810b10:	8809883a 	mov	r4,r17
  810b14:	b80b883a 	mov	r5,r23
  810b18:	102b883a 	mov	r21,r2
  810b1c:	08119280 	call	811928 <__umodsi3>
  810b20:	d9000217 	ldw	r4,8(sp)
  810b24:	1004943a 	slli	r2,r2,16
  810b28:	9ca6983a 	sll	r19,r19,r18
  810b2c:	2006d43a 	srli	r3,r4,16
  810b30:	84a0983a 	sll	r16,r16,r18
  810b34:	dcc00015 	stw	r19,0(sp)
  810b38:	10c4b03a 	or	r2,r2,r3
  810b3c:	dc000115 	stw	r16,4(sp)
  810b40:	1540032e 	bgeu	r2,r21,810b50 <__umoddi3+0x46c>
  810b44:	1585883a 	add	r2,r2,r22
  810b48:	e73fffc4 	addi	fp,fp,-1
  810b4c:	15806e2e 	bgeu	r2,r22,810d08 <__umoddi3+0x624>
  810b50:	1563c83a 	sub	r17,r2,r21
  810b54:	8809883a 	mov	r4,r17
  810b58:	b80b883a 	mov	r5,r23
  810b5c:	08119200 	call	811920 <__udivsi3>
  810b60:	100b883a 	mov	r5,r2
  810b64:	a009883a 	mov	r4,r20
  810b68:	1021883a 	mov	r16,r2
  810b6c:	08026a00 	call	8026a0 <__mulsi3>
  810b70:	b80b883a 	mov	r5,r23
  810b74:	8809883a 	mov	r4,r17
  810b78:	1029883a 	mov	r20,r2
  810b7c:	08119280 	call	811928 <__umodsi3>
  810b80:	d9400217 	ldw	r5,8(sp)
  810b84:	1004943a 	slli	r2,r2,16
  810b88:	28ffffcc 	andi	r3,r5,65535
  810b8c:	10c4b03a 	or	r2,r2,r3
  810b90:	1500032e 	bgeu	r2,r20,810ba0 <__umoddi3+0x4bc>
  810b94:	1585883a 	add	r2,r2,r22
  810b98:	843fffc4 	addi	r16,r16,-1
  810b9c:	1580562e 	bgeu	r2,r22,810cf8 <__umoddi3+0x614>
  810ba0:	d9800017 	ldw	r6,0(sp)
  810ba4:	e022943a 	slli	r17,fp,16
  810ba8:	302ed43a 	srli	r23,r6,16
  810bac:	8462b03a 	or	r17,r16,r17
  810bb0:	34ffffcc 	andi	r19,r6,65535
  810bb4:	882ad43a 	srli	r21,r17,16
  810bb8:	8c7fffcc 	andi	r17,r17,65535
  810bbc:	8809883a 	mov	r4,r17
  810bc0:	980b883a 	mov	r5,r19
  810bc4:	1521c83a 	sub	r16,r2,r20
  810bc8:	08026a00 	call	8026a0 <__mulsi3>
  810bcc:	8809883a 	mov	r4,r17
  810bd0:	b80b883a 	mov	r5,r23
  810bd4:	1029883a 	mov	r20,r2
  810bd8:	08026a00 	call	8026a0 <__mulsi3>
  810bdc:	980b883a 	mov	r5,r19
  810be0:	a809883a 	mov	r4,r21
  810be4:	1023883a 	mov	r17,r2
  810be8:	08026a00 	call	8026a0 <__mulsi3>
  810bec:	a809883a 	mov	r4,r21
  810bf0:	b80b883a 	mov	r5,r23
  810bf4:	1027883a 	mov	r19,r2
  810bf8:	08026a00 	call	8026a0 <__mulsi3>
  810bfc:	100b883a 	mov	r5,r2
  810c00:	a004d43a 	srli	r2,r20,16
  810c04:	8ce3883a 	add	r17,r17,r19
  810c08:	1449883a 	add	r4,r2,r17
  810c0c:	24c0022e 	bgeu	r4,r19,810c18 <__umoddi3+0x534>
  810c10:	00800074 	movhi	r2,1
  810c14:	288b883a 	add	r5,r5,r2
  810c18:	2004d43a 	srli	r2,r4,16
  810c1c:	2008943a 	slli	r4,r4,16
  810c20:	a0ffffcc 	andi	r3,r20,65535
  810c24:	288d883a 	add	r6,r5,r2
  810c28:	20c9883a 	add	r4,r4,r3
  810c2c:	81800b36 	bltu	r16,r6,810c5c <__umoddi3+0x578>
  810c30:	81804026 	beq	r16,r6,810d34 <__umoddi3+0x650>
  810c34:	818dc83a 	sub	r6,r16,r6
  810c38:	00000f06 	br	810c78 <__umoddi3+0x594>
  810c3c:	30c5c83a 	sub	r2,r6,r3
  810c40:	182d883a 	mov	r22,r3
  810c44:	8084d83a 	srl	r2,r16,r2
  810c48:	a8c6983a 	sll	r3,r21,r3
  810c4c:	9da6983a 	sll	r19,r19,r22
  810c50:	85a0983a 	sll	r16,r16,r22
  810c54:	18aab03a 	or	r21,r3,r2
  810c58:	003f1d06 	br	8108d0 <__umoddi3+0x1ec>
  810c5c:	d8c00017 	ldw	r3,0(sp)
  810c60:	20c5c83a 	sub	r2,r4,r3
  810c64:	2089803a 	cmpltu	r4,r4,r2
  810c68:	3587c83a 	sub	r3,r6,r22
  810c6c:	1907c83a 	sub	r3,r3,r4
  810c70:	80cdc83a 	sub	r6,r16,r3
  810c74:	1009883a 	mov	r4,r2
  810c78:	d9400117 	ldw	r5,4(sp)
  810c7c:	2905c83a 	sub	r2,r5,r4
  810c80:	2887803a 	cmpltu	r3,r5,r2
  810c84:	30c7c83a 	sub	r3,r6,r3
  810c88:	d9800317 	ldw	r6,12(sp)
  810c8c:	1484d83a 	srl	r2,r2,r18
  810c90:	1988983a 	sll	r4,r3,r6
  810c94:	1c86d83a 	srl	r3,r3,r18
  810c98:	2088b03a 	or	r4,r4,r2
  810c9c:	2011883a 	mov	r8,r4
  810ca0:	1813883a 	mov	r9,r3
  810ca4:	d9000415 	stw	r4,16(sp)
  810ca8:	d8c00515 	stw	r3,20(sp)
  810cac:	003ed406 	br	810800 <__umoddi3+0x11c>
  810cb0:	01400604 	movi	r5,24
  810cb4:	2805883a 	mov	r2,r5
  810cb8:	003ea606 	br	810754 <__umoddi3+0x70>
  810cbc:	01400204 	movi	r5,8
  810cc0:	2805883a 	mov	r2,r5
  810cc4:	003ea306 	br	810754 <__umoddi3+0x70>
  810cc8:	01400204 	movi	r5,8
  810ccc:	2805883a 	mov	r2,r5
  810cd0:	003edf06 	br	810850 <__umoddi3+0x16c>
  810cd4:	01400204 	movi	r5,8
  810cd8:	2805883a 	mov	r2,r5
  810cdc:	003ef206 	br	8108a8 <__umoddi3+0x1c4>
  810ce0:	01400604 	movi	r5,24
  810ce4:	2805883a 	mov	r2,r5
  810ce8:	003eef06 	br	8108a8 <__umoddi3+0x1c4>
  810cec:	01400604 	movi	r5,24
  810cf0:	2805883a 	mov	r2,r5
  810cf4:	003ed606 	br	810850 <__umoddi3+0x16c>
  810cf8:	153fa92e 	bgeu	r2,r20,810ba0 <__umoddi3+0x4bc>
  810cfc:	843fffc4 	addi	r16,r16,-1
  810d00:	1585883a 	add	r2,r2,r22
  810d04:	003fa606 	br	810ba0 <__umoddi3+0x4bc>
  810d08:	157f912e 	bgeu	r2,r21,810b50 <__umoddi3+0x46c>
  810d0c:	e73fffc4 	addi	fp,fp,-1
  810d10:	1585883a 	add	r2,r2,r22
  810d14:	003f8e06 	br	810b50 <__umoddi3+0x46c>
  810d18:	157f542e 	bgeu	r2,r21,810a6c <__umoddi3+0x388>
  810d1c:	14c5883a 	add	r2,r2,r19
  810d20:	003f5206 	br	810a6c <__umoddi3+0x388>
  810d24:	14c5883a 	add	r2,r2,r19
  810d28:	003efc06 	br	81091c <__umoddi3+0x238>
  810d2c:	14c5883a 	add	r2,r2,r19
  810d30:	003ea606 	br	8107cc <__umoddi3+0xe8>
  810d34:	d8800117 	ldw	r2,4(sp)
  810d38:	113fc836 	bltu	r2,r4,810c5c <__umoddi3+0x578>
  810d3c:	000d883a 	mov	r6,zero
  810d40:	003fcd06 	br	810c78 <__umoddi3+0x594>

00810d44 <__nesf2>:
  810d44:	defff304 	addi	sp,sp,-52
  810d48:	dc400b15 	stw	r17,44(sp)
  810d4c:	dc400204 	addi	r17,sp,8
  810d50:	dc000a15 	stw	r16,40(sp)
  810d54:	d9000015 	stw	r4,0(sp)
  810d58:	d9400115 	stw	r5,4(sp)
  810d5c:	d809883a 	mov	r4,sp
  810d60:	880b883a 	mov	r5,r17
  810d64:	dc000604 	addi	r16,sp,24
  810d68:	dfc00c15 	stw	ra,48(sp)
  810d6c:	08119300 	call	811930 <__unpack_f>
  810d70:	d9000104 	addi	r4,sp,4
  810d74:	800b883a 	mov	r5,r16
  810d78:	08119300 	call	811930 <__unpack_f>
  810d7c:	d8800217 	ldw	r2,8(sp)
  810d80:	00c00044 	movi	r3,1
  810d84:	180d883a 	mov	r6,r3
  810d88:	1880062e 	bgeu	r3,r2,810da4 <__nesf2+0x60>
  810d8c:	d8800617 	ldw	r2,24(sp)
  810d90:	8809883a 	mov	r4,r17
  810d94:	800b883a 	mov	r5,r16
  810d98:	1880022e 	bgeu	r3,r2,810da4 <__nesf2+0x60>
  810d9c:	08119f80 	call	8119f8 <__fpcmp_parts_f>
  810da0:	100d883a 	mov	r6,r2
  810da4:	3005883a 	mov	r2,r6
  810da8:	dfc00c17 	ldw	ra,48(sp)
  810dac:	dc400b17 	ldw	r17,44(sp)
  810db0:	dc000a17 	ldw	r16,40(sp)
  810db4:	dec00d04 	addi	sp,sp,52
  810db8:	f800283a 	ret

00810dbc <__gtsf2>:
  810dbc:	defff304 	addi	sp,sp,-52
  810dc0:	dc400b15 	stw	r17,44(sp)
  810dc4:	dc400204 	addi	r17,sp,8
  810dc8:	dc000a15 	stw	r16,40(sp)
  810dcc:	d9000015 	stw	r4,0(sp)
  810dd0:	d9400115 	stw	r5,4(sp)
  810dd4:	d809883a 	mov	r4,sp
  810dd8:	880b883a 	mov	r5,r17
  810ddc:	dc000604 	addi	r16,sp,24
  810de0:	dfc00c15 	stw	ra,48(sp)
  810de4:	08119300 	call	811930 <__unpack_f>
  810de8:	d9000104 	addi	r4,sp,4
  810dec:	800b883a 	mov	r5,r16
  810df0:	08119300 	call	811930 <__unpack_f>
  810df4:	d8800217 	ldw	r2,8(sp)
  810df8:	00c00044 	movi	r3,1
  810dfc:	01bfffc4 	movi	r6,-1
  810e00:	1880062e 	bgeu	r3,r2,810e1c <__gtsf2+0x60>
  810e04:	d8800617 	ldw	r2,24(sp)
  810e08:	8809883a 	mov	r4,r17
  810e0c:	800b883a 	mov	r5,r16
  810e10:	1880022e 	bgeu	r3,r2,810e1c <__gtsf2+0x60>
  810e14:	08119f80 	call	8119f8 <__fpcmp_parts_f>
  810e18:	100d883a 	mov	r6,r2
  810e1c:	3005883a 	mov	r2,r6
  810e20:	dfc00c17 	ldw	ra,48(sp)
  810e24:	dc400b17 	ldw	r17,44(sp)
  810e28:	dc000a17 	ldw	r16,40(sp)
  810e2c:	dec00d04 	addi	sp,sp,52
  810e30:	f800283a 	ret

00810e34 <__ltsf2>:
  810e34:	defff304 	addi	sp,sp,-52
  810e38:	dc400b15 	stw	r17,44(sp)
  810e3c:	dc400204 	addi	r17,sp,8
  810e40:	dc000a15 	stw	r16,40(sp)
  810e44:	d9000015 	stw	r4,0(sp)
  810e48:	d9400115 	stw	r5,4(sp)
  810e4c:	d809883a 	mov	r4,sp
  810e50:	880b883a 	mov	r5,r17
  810e54:	dc000604 	addi	r16,sp,24
  810e58:	dfc00c15 	stw	ra,48(sp)
  810e5c:	08119300 	call	811930 <__unpack_f>
  810e60:	d9000104 	addi	r4,sp,4
  810e64:	800b883a 	mov	r5,r16
  810e68:	08119300 	call	811930 <__unpack_f>
  810e6c:	d8800217 	ldw	r2,8(sp)
  810e70:	00c00044 	movi	r3,1
  810e74:	180d883a 	mov	r6,r3
  810e78:	1880062e 	bgeu	r3,r2,810e94 <__ltsf2+0x60>
  810e7c:	d8800617 	ldw	r2,24(sp)
  810e80:	8809883a 	mov	r4,r17
  810e84:	800b883a 	mov	r5,r16
  810e88:	1880022e 	bgeu	r3,r2,810e94 <__ltsf2+0x60>
  810e8c:	08119f80 	call	8119f8 <__fpcmp_parts_f>
  810e90:	100d883a 	mov	r6,r2
  810e94:	3005883a 	mov	r2,r6
  810e98:	dfc00c17 	ldw	ra,48(sp)
  810e9c:	dc400b17 	ldw	r17,44(sp)
  810ea0:	dc000a17 	ldw	r16,40(sp)
  810ea4:	dec00d04 	addi	sp,sp,52
  810ea8:	f800283a 	ret

00810eac <__muldf3>:
  810eac:	deffe004 	addi	sp,sp,-128
  810eb0:	dc401815 	stw	r17,96(sp)
  810eb4:	dc400404 	addi	r17,sp,16
  810eb8:	2011883a 	mov	r8,r4
  810ebc:	2813883a 	mov	r9,r5
  810ec0:	dc001715 	stw	r16,92(sp)
  810ec4:	d809883a 	mov	r4,sp
  810ec8:	880b883a 	mov	r5,r17
  810ecc:	dc000904 	addi	r16,sp,36
  810ed0:	dfc01f15 	stw	ra,124(sp)
  810ed4:	da400115 	stw	r9,4(sp)
  810ed8:	d9c00315 	stw	r7,12(sp)
  810edc:	da000015 	stw	r8,0(sp)
  810ee0:	d9800215 	stw	r6,8(sp)
  810ee4:	ddc01e15 	stw	r23,120(sp)
  810ee8:	dd801d15 	stw	r22,116(sp)
  810eec:	dd401c15 	stw	r21,112(sp)
  810ef0:	dd001b15 	stw	r20,108(sp)
  810ef4:	dcc01a15 	stw	r19,104(sp)
  810ef8:	dc801915 	stw	r18,100(sp)
  810efc:	0802a6c0 	call	802a6c <__unpack_d>
  810f00:	d9000204 	addi	r4,sp,8
  810f04:	800b883a 	mov	r5,r16
  810f08:	0802a6c0 	call	802a6c <__unpack_d>
  810f0c:	d9000417 	ldw	r4,16(sp)
  810f10:	00800044 	movi	r2,1
  810f14:	1100102e 	bgeu	r2,r4,810f58 <__muldf3+0xac>
  810f18:	d8c00917 	ldw	r3,36(sp)
  810f1c:	10c0062e 	bgeu	r2,r3,810f38 <__muldf3+0x8c>
  810f20:	00800104 	movi	r2,4
  810f24:	20800a26 	beq	r4,r2,810f50 <__muldf3+0xa4>
  810f28:	1880cc26 	beq	r3,r2,81125c <__muldf3+0x3b0>
  810f2c:	00800084 	movi	r2,2
  810f30:	20800926 	beq	r4,r2,810f58 <__muldf3+0xac>
  810f34:	1880191e 	bne	r3,r2,810f9c <__muldf3+0xf0>
  810f38:	d8c00a17 	ldw	r3,40(sp)
  810f3c:	d8800517 	ldw	r2,20(sp)
  810f40:	8009883a 	mov	r4,r16
  810f44:	10c4c03a 	cmpne	r2,r2,r3
  810f48:	d8800a15 	stw	r2,40(sp)
  810f4c:	00000706 	br	810f6c <__muldf3+0xc0>
  810f50:	00800084 	movi	r2,2
  810f54:	1880c326 	beq	r3,r2,811264 <__muldf3+0x3b8>
  810f58:	d8800517 	ldw	r2,20(sp)
  810f5c:	d8c00a17 	ldw	r3,40(sp)
  810f60:	8809883a 	mov	r4,r17
  810f64:	10c4c03a 	cmpne	r2,r2,r3
  810f68:	d8800515 	stw	r2,20(sp)
  810f6c:	08027580 	call	802758 <__pack_d>
  810f70:	dfc01f17 	ldw	ra,124(sp)
  810f74:	ddc01e17 	ldw	r23,120(sp)
  810f78:	dd801d17 	ldw	r22,116(sp)
  810f7c:	dd401c17 	ldw	r21,112(sp)
  810f80:	dd001b17 	ldw	r20,108(sp)
  810f84:	dcc01a17 	ldw	r19,104(sp)
  810f88:	dc801917 	ldw	r18,100(sp)
  810f8c:	dc401817 	ldw	r17,96(sp)
  810f90:	dc001717 	ldw	r16,92(sp)
  810f94:	dec02004 	addi	sp,sp,128
  810f98:	f800283a 	ret
  810f9c:	dd800717 	ldw	r22,28(sp)
  810fa0:	dc800c17 	ldw	r18,48(sp)
  810fa4:	002b883a 	mov	r21,zero
  810fa8:	0023883a 	mov	r17,zero
  810fac:	a80b883a 	mov	r5,r21
  810fb0:	b00d883a 	mov	r6,r22
  810fb4:	880f883a 	mov	r7,r17
  810fb8:	ddc00817 	ldw	r23,32(sp)
  810fbc:	dcc00d17 	ldw	r19,52(sp)
  810fc0:	9009883a 	mov	r4,r18
  810fc4:	080feb00 	call	80feb0 <__muldi3>
  810fc8:	001b883a 	mov	r13,zero
  810fcc:	680f883a 	mov	r7,r13
  810fd0:	b009883a 	mov	r4,r22
  810fd4:	000b883a 	mov	r5,zero
  810fd8:	980d883a 	mov	r6,r19
  810fdc:	b82d883a 	mov	r22,r23
  810fe0:	002f883a 	mov	r23,zero
  810fe4:	db401615 	stw	r13,88(sp)
  810fe8:	d8801315 	stw	r2,76(sp)
  810fec:	d8c01415 	stw	r3,80(sp)
  810ff0:	dcc01515 	stw	r19,84(sp)
  810ff4:	080feb00 	call	80feb0 <__muldi3>
  810ff8:	b00d883a 	mov	r6,r22
  810ffc:	000b883a 	mov	r5,zero
  811000:	9009883a 	mov	r4,r18
  811004:	b80f883a 	mov	r7,r23
  811008:	1021883a 	mov	r16,r2
  81100c:	1823883a 	mov	r17,r3
  811010:	080feb00 	call	80feb0 <__muldi3>
  811014:	8085883a 	add	r2,r16,r2
  811018:	140d803a 	cmpltu	r6,r2,r16
  81101c:	88c7883a 	add	r3,r17,r3
  811020:	30cd883a 	add	r6,r6,r3
  811024:	1029883a 	mov	r20,r2
  811028:	302b883a 	mov	r21,r6
  81102c:	da801317 	ldw	r10,76(sp)
  811030:	dac01417 	ldw	r11,80(sp)
  811034:	db001517 	ldw	r12,84(sp)
  811038:	db401617 	ldw	r13,88(sp)
  81103c:	3440612e 	bgeu	r6,r17,8111c4 <__muldf3+0x318>
  811040:	0009883a 	mov	r4,zero
  811044:	5105883a 	add	r2,r10,r4
  811048:	128d803a 	cmpltu	r6,r2,r10
  81104c:	5d07883a 	add	r3,r11,r20
  811050:	30cd883a 	add	r6,r6,r3
  811054:	0021883a 	mov	r16,zero
  811058:	04400044 	movi	r17,1
  81105c:	1025883a 	mov	r18,r2
  811060:	3027883a 	mov	r19,r6
  811064:	32c06236 	bltu	r6,r11,8111f0 <__muldf3+0x344>
  811068:	59807a26 	beq	r11,r6,811254 <__muldf3+0x3a8>
  81106c:	680b883a 	mov	r5,r13
  811070:	b80f883a 	mov	r7,r23
  811074:	6009883a 	mov	r4,r12
  811078:	b00d883a 	mov	r6,r22
  81107c:	080feb00 	call	80feb0 <__muldi3>
  811080:	1009883a 	mov	r4,r2
  811084:	000f883a 	mov	r7,zero
  811088:	1545883a 	add	r2,r2,r21
  81108c:	1111803a 	cmpltu	r8,r2,r4
  811090:	19c7883a 	add	r3,r3,r7
  811094:	40c7883a 	add	r3,r8,r3
  811098:	88cb883a 	add	r5,r17,r3
  81109c:	d8c00617 	ldw	r3,24(sp)
  8110a0:	8089883a 	add	r4,r16,r2
  8110a4:	d8800b17 	ldw	r2,44(sp)
  8110a8:	18c00104 	addi	r3,r3,4
  8110ac:	240d803a 	cmpltu	r6,r4,r16
  8110b0:	10c7883a 	add	r3,r2,r3
  8110b4:	2013883a 	mov	r9,r4
  8110b8:	d8800a17 	ldw	r2,40(sp)
  8110bc:	d9000517 	ldw	r4,20(sp)
  8110c0:	314d883a 	add	r6,r6,r5
  8110c4:	3015883a 	mov	r10,r6
  8110c8:	2088c03a 	cmpne	r4,r4,r2
  8110cc:	00880034 	movhi	r2,8192
  8110d0:	10bfffc4 	addi	r2,r2,-1
  8110d4:	d9000f15 	stw	r4,60(sp)
  8110d8:	d8c01015 	stw	r3,64(sp)
  8110dc:	1180162e 	bgeu	r2,r6,811138 <__muldf3+0x28c>
  8110e0:	1811883a 	mov	r8,r3
  8110e4:	101f883a 	mov	r15,r2
  8110e8:	980497fa 	slli	r2,r19,31
  8110ec:	9016d07a 	srli	r11,r18,1
  8110f0:	500697fa 	slli	r3,r10,31
  8110f4:	480cd07a 	srli	r6,r9,1
  8110f8:	500ed07a 	srli	r7,r10,1
  8110fc:	12d6b03a 	or	r11,r2,r11
  811100:	00800044 	movi	r2,1
  811104:	198cb03a 	or	r6,r3,r6
  811108:	4888703a 	and	r4,r9,r2
  81110c:	9818d07a 	srli	r12,r19,1
  811110:	001b883a 	mov	r13,zero
  811114:	03a00034 	movhi	r14,32768
  811118:	3013883a 	mov	r9,r6
  81111c:	3815883a 	mov	r10,r7
  811120:	4091883a 	add	r8,r8,r2
  811124:	20000226 	beq	r4,zero,811130 <__muldf3+0x284>
  811128:	5b64b03a 	or	r18,r11,r13
  81112c:	63a6b03a 	or	r19,r12,r14
  811130:	7abfed36 	bltu	r15,r10,8110e8 <__muldf3+0x23c>
  811134:	da001015 	stw	r8,64(sp)
  811138:	00840034 	movhi	r2,4096
  81113c:	10bfffc4 	addi	r2,r2,-1
  811140:	12801436 	bltu	r2,r10,811194 <__muldf3+0x2e8>
  811144:	da001017 	ldw	r8,64(sp)
  811148:	101f883a 	mov	r15,r2
  81114c:	4a45883a 	add	r2,r9,r9
  811150:	124d803a 	cmpltu	r6,r2,r9
  811154:	5287883a 	add	r3,r10,r10
  811158:	9497883a 	add	r11,r18,r18
  81115c:	5c8f803a 	cmpltu	r7,r11,r18
  811160:	9cd9883a 	add	r12,r19,r19
  811164:	01000044 	movi	r4,1
  811168:	30cd883a 	add	r6,r6,r3
  81116c:	3b0f883a 	add	r7,r7,r12
  811170:	423fffc4 	addi	r8,r8,-1
  811174:	1013883a 	mov	r9,r2
  811178:	3015883a 	mov	r10,r6
  81117c:	111ab03a 	or	r13,r2,r4
  811180:	98003016 	blt	r19,zero,811244 <__muldf3+0x398>
  811184:	5825883a 	mov	r18,r11
  811188:	3827883a 	mov	r19,r7
  81118c:	7abfef2e 	bgeu	r15,r10,81114c <__muldf3+0x2a0>
  811190:	da001015 	stw	r8,64(sp)
  811194:	00803fc4 	movi	r2,255
  811198:	488e703a 	and	r7,r9,r2
  81119c:	00802004 	movi	r2,128
  8111a0:	0007883a 	mov	r3,zero
  8111a4:	0011883a 	mov	r8,zero
  8111a8:	38801826 	beq	r7,r2,81120c <__muldf3+0x360>
  8111ac:	008000c4 	movi	r2,3
  8111b0:	d9000e04 	addi	r4,sp,56
  8111b4:	da801215 	stw	r10,72(sp)
  8111b8:	d8800e15 	stw	r2,56(sp)
  8111bc:	da401115 	stw	r9,68(sp)
  8111c0:	003f6a06 	br	810f6c <__muldf3+0xc0>
  8111c4:	89802126 	beq	r17,r6,81124c <__muldf3+0x3a0>
  8111c8:	0009883a 	mov	r4,zero
  8111cc:	5105883a 	add	r2,r10,r4
  8111d0:	128d803a 	cmpltu	r6,r2,r10
  8111d4:	5d07883a 	add	r3,r11,r20
  8111d8:	30cd883a 	add	r6,r6,r3
  8111dc:	0021883a 	mov	r16,zero
  8111e0:	0023883a 	mov	r17,zero
  8111e4:	1025883a 	mov	r18,r2
  8111e8:	3027883a 	mov	r19,r6
  8111ec:	32ff9e2e 	bgeu	r6,r11,811068 <__muldf3+0x1bc>
  8111f0:	00800044 	movi	r2,1
  8111f4:	8089883a 	add	r4,r16,r2
  8111f8:	240d803a 	cmpltu	r6,r4,r16
  8111fc:	344d883a 	add	r6,r6,r17
  811200:	2021883a 	mov	r16,r4
  811204:	3023883a 	mov	r17,r6
  811208:	003f9806 	br	81106c <__muldf3+0x1c0>
  81120c:	403fe71e 	bne	r8,zero,8111ac <__muldf3+0x300>
  811210:	01004004 	movi	r4,256
  811214:	4904703a 	and	r2,r9,r4
  811218:	10c4b03a 	or	r2,r2,r3
  81121c:	103fe31e 	bne	r2,zero,8111ac <__muldf3+0x300>
  811220:	94c4b03a 	or	r2,r18,r19
  811224:	103fe126 	beq	r2,zero,8111ac <__muldf3+0x300>
  811228:	49c5883a 	add	r2,r9,r7
  81122c:	1251803a 	cmpltu	r8,r2,r9
  811230:	4291883a 	add	r8,r8,r10
  811234:	013fc004 	movi	r4,-256
  811238:	1112703a 	and	r9,r2,r4
  81123c:	4015883a 	mov	r10,r8
  811240:	003fda06 	br	8111ac <__muldf3+0x300>
  811244:	6813883a 	mov	r9,r13
  811248:	003fce06 	br	811184 <__muldf3+0x2d8>
  81124c:	143f7c36 	bltu	r2,r16,811040 <__muldf3+0x194>
  811250:	003fdd06 	br	8111c8 <__muldf3+0x31c>
  811254:	12bf852e 	bgeu	r2,r10,81106c <__muldf3+0x1c0>
  811258:	003fe506 	br	8111f0 <__muldf3+0x344>
  81125c:	00800084 	movi	r2,2
  811260:	20bf351e 	bne	r4,r2,810f38 <__muldf3+0x8c>
  811264:	01002074 	movhi	r4,129
  811268:	21139604 	addi	r4,r4,20056
  81126c:	003f3f06 	br	810f6c <__muldf3+0xc0>

00811270 <__eqdf2>:
  811270:	deffef04 	addi	sp,sp,-68
  811274:	dc400f15 	stw	r17,60(sp)
  811278:	dc400404 	addi	r17,sp,16
  81127c:	2005883a 	mov	r2,r4
  811280:	2807883a 	mov	r3,r5
  811284:	dc000e15 	stw	r16,56(sp)
  811288:	d809883a 	mov	r4,sp
  81128c:	880b883a 	mov	r5,r17
  811290:	dc000904 	addi	r16,sp,36
  811294:	d8c00115 	stw	r3,4(sp)
  811298:	d8800015 	stw	r2,0(sp)
  81129c:	d9800215 	stw	r6,8(sp)
  8112a0:	dfc01015 	stw	ra,64(sp)
  8112a4:	d9c00315 	stw	r7,12(sp)
  8112a8:	0802a6c0 	call	802a6c <__unpack_d>
  8112ac:	d9000204 	addi	r4,sp,8
  8112b0:	800b883a 	mov	r5,r16
  8112b4:	0802a6c0 	call	802a6c <__unpack_d>
  8112b8:	d8800417 	ldw	r2,16(sp)
  8112bc:	00c00044 	movi	r3,1
  8112c0:	180d883a 	mov	r6,r3
  8112c4:	1880062e 	bgeu	r3,r2,8112e0 <__eqdf2+0x70>
  8112c8:	d8800917 	ldw	r2,36(sp)
  8112cc:	8809883a 	mov	r4,r17
  8112d0:	800b883a 	mov	r5,r16
  8112d4:	1880022e 	bgeu	r3,r2,8112e0 <__eqdf2+0x70>
  8112d8:	0811acc0 	call	811acc <__fpcmp_parts_d>
  8112dc:	100d883a 	mov	r6,r2
  8112e0:	3005883a 	mov	r2,r6
  8112e4:	dfc01017 	ldw	ra,64(sp)
  8112e8:	dc400f17 	ldw	r17,60(sp)
  8112ec:	dc000e17 	ldw	r16,56(sp)
  8112f0:	dec01104 	addi	sp,sp,68
  8112f4:	f800283a 	ret

008112f8 <__nedf2>:
  8112f8:	deffef04 	addi	sp,sp,-68
  8112fc:	dc400f15 	stw	r17,60(sp)
  811300:	dc400404 	addi	r17,sp,16
  811304:	2005883a 	mov	r2,r4
  811308:	2807883a 	mov	r3,r5
  81130c:	dc000e15 	stw	r16,56(sp)
  811310:	d809883a 	mov	r4,sp
  811314:	880b883a 	mov	r5,r17
  811318:	dc000904 	addi	r16,sp,36
  81131c:	d8c00115 	stw	r3,4(sp)
  811320:	d8800015 	stw	r2,0(sp)
  811324:	d9800215 	stw	r6,8(sp)
  811328:	dfc01015 	stw	ra,64(sp)
  81132c:	d9c00315 	stw	r7,12(sp)
  811330:	0802a6c0 	call	802a6c <__unpack_d>
  811334:	d9000204 	addi	r4,sp,8
  811338:	800b883a 	mov	r5,r16
  81133c:	0802a6c0 	call	802a6c <__unpack_d>
  811340:	d8800417 	ldw	r2,16(sp)
  811344:	00c00044 	movi	r3,1
  811348:	180d883a 	mov	r6,r3
  81134c:	1880062e 	bgeu	r3,r2,811368 <__nedf2+0x70>
  811350:	d8800917 	ldw	r2,36(sp)
  811354:	8809883a 	mov	r4,r17
  811358:	800b883a 	mov	r5,r16
  81135c:	1880022e 	bgeu	r3,r2,811368 <__nedf2+0x70>
  811360:	0811acc0 	call	811acc <__fpcmp_parts_d>
  811364:	100d883a 	mov	r6,r2
  811368:	3005883a 	mov	r2,r6
  81136c:	dfc01017 	ldw	ra,64(sp)
  811370:	dc400f17 	ldw	r17,60(sp)
  811374:	dc000e17 	ldw	r16,56(sp)
  811378:	dec01104 	addi	sp,sp,68
  81137c:	f800283a 	ret

00811380 <__gtdf2>:
  811380:	deffef04 	addi	sp,sp,-68
  811384:	dc400f15 	stw	r17,60(sp)
  811388:	dc400404 	addi	r17,sp,16
  81138c:	2005883a 	mov	r2,r4
  811390:	2807883a 	mov	r3,r5
  811394:	dc000e15 	stw	r16,56(sp)
  811398:	d809883a 	mov	r4,sp
  81139c:	880b883a 	mov	r5,r17
  8113a0:	dc000904 	addi	r16,sp,36
  8113a4:	d8c00115 	stw	r3,4(sp)
  8113a8:	d8800015 	stw	r2,0(sp)
  8113ac:	d9800215 	stw	r6,8(sp)
  8113b0:	dfc01015 	stw	ra,64(sp)
  8113b4:	d9c00315 	stw	r7,12(sp)
  8113b8:	0802a6c0 	call	802a6c <__unpack_d>
  8113bc:	d9000204 	addi	r4,sp,8
  8113c0:	800b883a 	mov	r5,r16
  8113c4:	0802a6c0 	call	802a6c <__unpack_d>
  8113c8:	d8800417 	ldw	r2,16(sp)
  8113cc:	00c00044 	movi	r3,1
  8113d0:	01bfffc4 	movi	r6,-1
  8113d4:	1880062e 	bgeu	r3,r2,8113f0 <__gtdf2+0x70>
  8113d8:	d8800917 	ldw	r2,36(sp)
  8113dc:	8809883a 	mov	r4,r17
  8113e0:	800b883a 	mov	r5,r16
  8113e4:	1880022e 	bgeu	r3,r2,8113f0 <__gtdf2+0x70>
  8113e8:	0811acc0 	call	811acc <__fpcmp_parts_d>
  8113ec:	100d883a 	mov	r6,r2
  8113f0:	3005883a 	mov	r2,r6
  8113f4:	dfc01017 	ldw	ra,64(sp)
  8113f8:	dc400f17 	ldw	r17,60(sp)
  8113fc:	dc000e17 	ldw	r16,56(sp)
  811400:	dec01104 	addi	sp,sp,68
  811404:	f800283a 	ret

00811408 <__gedf2>:
  811408:	deffef04 	addi	sp,sp,-68
  81140c:	dc400f15 	stw	r17,60(sp)
  811410:	dc400404 	addi	r17,sp,16
  811414:	2005883a 	mov	r2,r4
  811418:	2807883a 	mov	r3,r5
  81141c:	dc000e15 	stw	r16,56(sp)
  811420:	d809883a 	mov	r4,sp
  811424:	880b883a 	mov	r5,r17
  811428:	dc000904 	addi	r16,sp,36
  81142c:	d8c00115 	stw	r3,4(sp)
  811430:	d8800015 	stw	r2,0(sp)
  811434:	d9800215 	stw	r6,8(sp)
  811438:	dfc01015 	stw	ra,64(sp)
  81143c:	d9c00315 	stw	r7,12(sp)
  811440:	0802a6c0 	call	802a6c <__unpack_d>
  811444:	d9000204 	addi	r4,sp,8
  811448:	800b883a 	mov	r5,r16
  81144c:	0802a6c0 	call	802a6c <__unpack_d>
  811450:	d8800417 	ldw	r2,16(sp)
  811454:	00c00044 	movi	r3,1
  811458:	01bfffc4 	movi	r6,-1
  81145c:	1880062e 	bgeu	r3,r2,811478 <__gedf2+0x70>
  811460:	d8800917 	ldw	r2,36(sp)
  811464:	8809883a 	mov	r4,r17
  811468:	800b883a 	mov	r5,r16
  81146c:	1880022e 	bgeu	r3,r2,811478 <__gedf2+0x70>
  811470:	0811acc0 	call	811acc <__fpcmp_parts_d>
  811474:	100d883a 	mov	r6,r2
  811478:	3005883a 	mov	r2,r6
  81147c:	dfc01017 	ldw	ra,64(sp)
  811480:	dc400f17 	ldw	r17,60(sp)
  811484:	dc000e17 	ldw	r16,56(sp)
  811488:	dec01104 	addi	sp,sp,68
  81148c:	f800283a 	ret

00811490 <__ltdf2>:
  811490:	deffef04 	addi	sp,sp,-68
  811494:	dc400f15 	stw	r17,60(sp)
  811498:	dc400404 	addi	r17,sp,16
  81149c:	2005883a 	mov	r2,r4
  8114a0:	2807883a 	mov	r3,r5
  8114a4:	dc000e15 	stw	r16,56(sp)
  8114a8:	d809883a 	mov	r4,sp
  8114ac:	880b883a 	mov	r5,r17
  8114b0:	dc000904 	addi	r16,sp,36
  8114b4:	d8c00115 	stw	r3,4(sp)
  8114b8:	d8800015 	stw	r2,0(sp)
  8114bc:	d9800215 	stw	r6,8(sp)
  8114c0:	dfc01015 	stw	ra,64(sp)
  8114c4:	d9c00315 	stw	r7,12(sp)
  8114c8:	0802a6c0 	call	802a6c <__unpack_d>
  8114cc:	d9000204 	addi	r4,sp,8
  8114d0:	800b883a 	mov	r5,r16
  8114d4:	0802a6c0 	call	802a6c <__unpack_d>
  8114d8:	d8800417 	ldw	r2,16(sp)
  8114dc:	00c00044 	movi	r3,1
  8114e0:	180d883a 	mov	r6,r3
  8114e4:	1880062e 	bgeu	r3,r2,811500 <__ltdf2+0x70>
  8114e8:	d8800917 	ldw	r2,36(sp)
  8114ec:	8809883a 	mov	r4,r17
  8114f0:	800b883a 	mov	r5,r16
  8114f4:	1880022e 	bgeu	r3,r2,811500 <__ltdf2+0x70>
  8114f8:	0811acc0 	call	811acc <__fpcmp_parts_d>
  8114fc:	100d883a 	mov	r6,r2
  811500:	3005883a 	mov	r2,r6
  811504:	dfc01017 	ldw	ra,64(sp)
  811508:	dc400f17 	ldw	r17,60(sp)
  81150c:	dc000e17 	ldw	r16,56(sp)
  811510:	dec01104 	addi	sp,sp,68
  811514:	f800283a 	ret

00811518 <__ledf2>:
  811518:	deffef04 	addi	sp,sp,-68
  81151c:	dc400f15 	stw	r17,60(sp)
  811520:	dc400404 	addi	r17,sp,16
  811524:	2005883a 	mov	r2,r4
  811528:	2807883a 	mov	r3,r5
  81152c:	dc000e15 	stw	r16,56(sp)
  811530:	d809883a 	mov	r4,sp
  811534:	880b883a 	mov	r5,r17
  811538:	dc000904 	addi	r16,sp,36
  81153c:	d8c00115 	stw	r3,4(sp)
  811540:	d8800015 	stw	r2,0(sp)
  811544:	d9800215 	stw	r6,8(sp)
  811548:	dfc01015 	stw	ra,64(sp)
  81154c:	d9c00315 	stw	r7,12(sp)
  811550:	0802a6c0 	call	802a6c <__unpack_d>
  811554:	d9000204 	addi	r4,sp,8
  811558:	800b883a 	mov	r5,r16
  81155c:	0802a6c0 	call	802a6c <__unpack_d>
  811560:	d8800417 	ldw	r2,16(sp)
  811564:	00c00044 	movi	r3,1
  811568:	180d883a 	mov	r6,r3
  81156c:	1880062e 	bgeu	r3,r2,811588 <__ledf2+0x70>
  811570:	d8800917 	ldw	r2,36(sp)
  811574:	8809883a 	mov	r4,r17
  811578:	800b883a 	mov	r5,r16
  81157c:	1880022e 	bgeu	r3,r2,811588 <__ledf2+0x70>
  811580:	0811acc0 	call	811acc <__fpcmp_parts_d>
  811584:	100d883a 	mov	r6,r2
  811588:	3005883a 	mov	r2,r6
  81158c:	dfc01017 	ldw	ra,64(sp)
  811590:	dc400f17 	ldw	r17,60(sp)
  811594:	dc000e17 	ldw	r16,56(sp)
  811598:	dec01104 	addi	sp,sp,68
  81159c:	f800283a 	ret

008115a0 <__floatsidf>:
  8115a0:	2006d7fa 	srli	r3,r4,31
  8115a4:	defff604 	addi	sp,sp,-40
  8115a8:	008000c4 	movi	r2,3
  8115ac:	dfc00915 	stw	ra,36(sp)
  8115b0:	dcc00815 	stw	r19,32(sp)
  8115b4:	dc800715 	stw	r18,28(sp)
  8115b8:	dc400615 	stw	r17,24(sp)
  8115bc:	dc000515 	stw	r16,20(sp)
  8115c0:	d8800015 	stw	r2,0(sp)
  8115c4:	d8c00115 	stw	r3,4(sp)
  8115c8:	20000f1e 	bne	r4,zero,811608 <__floatsidf+0x68>
  8115cc:	00800084 	movi	r2,2
  8115d0:	d8800015 	stw	r2,0(sp)
  8115d4:	d809883a 	mov	r4,sp
  8115d8:	08027580 	call	802758 <__pack_d>
  8115dc:	1009883a 	mov	r4,r2
  8115e0:	180b883a 	mov	r5,r3
  8115e4:	2005883a 	mov	r2,r4
  8115e8:	2807883a 	mov	r3,r5
  8115ec:	dfc00917 	ldw	ra,36(sp)
  8115f0:	dcc00817 	ldw	r19,32(sp)
  8115f4:	dc800717 	ldw	r18,28(sp)
  8115f8:	dc400617 	ldw	r17,24(sp)
  8115fc:	dc000517 	ldw	r16,20(sp)
  811600:	dec00a04 	addi	sp,sp,40
  811604:	f800283a 	ret
  811608:	00800f04 	movi	r2,60
  81160c:	1807003a 	cmpeq	r3,r3,zero
  811610:	d8800215 	stw	r2,8(sp)
  811614:	18001126 	beq	r3,zero,81165c <__floatsidf+0xbc>
  811618:	0027883a 	mov	r19,zero
  81161c:	2025883a 	mov	r18,r4
  811620:	d9000315 	stw	r4,12(sp)
  811624:	dcc00415 	stw	r19,16(sp)
  811628:	08026d80 	call	8026d8 <__clzsi2>
  81162c:	11000744 	addi	r4,r2,29
  811630:	013fe80e 	bge	zero,r4,8115d4 <__floatsidf+0x34>
  811634:	10bfff44 	addi	r2,r2,-3
  811638:	10000c16 	blt	r2,zero,81166c <__floatsidf+0xcc>
  81163c:	90a2983a 	sll	r17,r18,r2
  811640:	0021883a 	mov	r16,zero
  811644:	d8800217 	ldw	r2,8(sp)
  811648:	dc400415 	stw	r17,16(sp)
  81164c:	dc000315 	stw	r16,12(sp)
  811650:	1105c83a 	sub	r2,r2,r4
  811654:	d8800215 	stw	r2,8(sp)
  811658:	003fde06 	br	8115d4 <__floatsidf+0x34>
  81165c:	00a00034 	movhi	r2,32768
  811660:	20800a26 	beq	r4,r2,81168c <__floatsidf+0xec>
  811664:	0109c83a 	sub	r4,zero,r4
  811668:	003feb06 	br	811618 <__floatsidf+0x78>
  81166c:	9006d07a 	srli	r3,r18,1
  811670:	008007c4 	movi	r2,31
  811674:	1105c83a 	sub	r2,r2,r4
  811678:	1886d83a 	srl	r3,r3,r2
  81167c:	9922983a 	sll	r17,r19,r4
  811680:	9120983a 	sll	r16,r18,r4
  811684:	1c62b03a 	or	r17,r3,r17
  811688:	003fee06 	br	811644 <__floatsidf+0xa4>
  81168c:	0009883a 	mov	r4,zero
  811690:	01707834 	movhi	r5,49632
  811694:	003fd306 	br	8115e4 <__floatsidf+0x44>

00811698 <__fixdfsi>:
  811698:	defff804 	addi	sp,sp,-32
  81169c:	2005883a 	mov	r2,r4
  8116a0:	2807883a 	mov	r3,r5
  8116a4:	d809883a 	mov	r4,sp
  8116a8:	d9400204 	addi	r5,sp,8
  8116ac:	d8c00115 	stw	r3,4(sp)
  8116b0:	d8800015 	stw	r2,0(sp)
  8116b4:	dfc00715 	stw	ra,28(sp)
  8116b8:	0802a6c0 	call	802a6c <__unpack_d>
  8116bc:	d8c00217 	ldw	r3,8(sp)
  8116c0:	00800084 	movi	r2,2
  8116c4:	1880051e 	bne	r3,r2,8116dc <__fixdfsi+0x44>
  8116c8:	0007883a 	mov	r3,zero
  8116cc:	1805883a 	mov	r2,r3
  8116d0:	dfc00717 	ldw	ra,28(sp)
  8116d4:	dec00804 	addi	sp,sp,32
  8116d8:	f800283a 	ret
  8116dc:	00800044 	movi	r2,1
  8116e0:	10fff92e 	bgeu	r2,r3,8116c8 <__fixdfsi+0x30>
  8116e4:	00800104 	movi	r2,4
  8116e8:	18800426 	beq	r3,r2,8116fc <__fixdfsi+0x64>
  8116ec:	d8c00417 	ldw	r3,16(sp)
  8116f0:	183ff516 	blt	r3,zero,8116c8 <__fixdfsi+0x30>
  8116f4:	00800784 	movi	r2,30
  8116f8:	10c0080e 	bge	r2,r3,81171c <__fixdfsi+0x84>
  8116fc:	d8800317 	ldw	r2,12(sp)
  811700:	1000121e 	bne	r2,zero,81174c <__fixdfsi+0xb4>
  811704:	00e00034 	movhi	r3,32768
  811708:	18ffffc4 	addi	r3,r3,-1
  81170c:	1805883a 	mov	r2,r3
  811710:	dfc00717 	ldw	ra,28(sp)
  811714:	dec00804 	addi	sp,sp,32
  811718:	f800283a 	ret
  81171c:	00800f04 	movi	r2,60
  811720:	10d1c83a 	sub	r8,r2,r3
  811724:	40bff804 	addi	r2,r8,-32
  811728:	d9800517 	ldw	r6,20(sp)
  81172c:	d9c00617 	ldw	r7,24(sp)
  811730:	10000816 	blt	r2,zero,811754 <__fixdfsi+0xbc>
  811734:	3888d83a 	srl	r4,r7,r2
  811738:	d8800317 	ldw	r2,12(sp)
  81173c:	2007883a 	mov	r3,r4
  811740:	103fe226 	beq	r2,zero,8116cc <__fixdfsi+0x34>
  811744:	0107c83a 	sub	r3,zero,r4
  811748:	003fe006 	br	8116cc <__fixdfsi+0x34>
  81174c:	00e00034 	movhi	r3,32768
  811750:	003fde06 	br	8116cc <__fixdfsi+0x34>
  811754:	39c7883a 	add	r3,r7,r7
  811758:	008007c4 	movi	r2,31
  81175c:	1205c83a 	sub	r2,r2,r8
  811760:	1886983a 	sll	r3,r3,r2
  811764:	3208d83a 	srl	r4,r6,r8
  811768:	1908b03a 	or	r4,r3,r4
  81176c:	003ff206 	br	811738 <__fixdfsi+0xa0>

00811770 <__truncdfsf2>:
  811770:	defff804 	addi	sp,sp,-32
  811774:	2005883a 	mov	r2,r4
  811778:	2807883a 	mov	r3,r5
  81177c:	d809883a 	mov	r4,sp
  811780:	d9400204 	addi	r5,sp,8
  811784:	d8c00115 	stw	r3,4(sp)
  811788:	d8800015 	stw	r2,0(sp)
  81178c:	dfc00715 	stw	ra,28(sp)
  811790:	0802a6c0 	call	802a6c <__unpack_d>
  811794:	d9c00517 	ldw	r7,20(sp)
  811798:	da000617 	ldw	r8,24(sp)
  81179c:	02d00034 	movhi	r11,16384
  8117a0:	5affffc4 	addi	r11,r11,-1
  8117a4:	3812d7ba 	srli	r9,r7,30
  8117a8:	401a90ba 	slli	r13,r8,2
  8117ac:	3ac4703a 	and	r2,r7,r11
  8117b0:	0007883a 	mov	r3,zero
  8117b4:	6a52b03a 	or	r9,r13,r9
  8117b8:	10c4b03a 	or	r2,r2,r3
  8117bc:	d9000217 	ldw	r4,8(sp)
  8117c0:	d9400317 	ldw	r5,12(sp)
  8117c4:	d9800417 	ldw	r6,16(sp)
  8117c8:	480f883a 	mov	r7,r9
  8117cc:	10000126 	beq	r2,zero,8117d4 <__truncdfsf2+0x64>
  8117d0:	49c00054 	ori	r7,r9,1
  8117d4:	0811aa00 	call	811aa0 <__make_fp>
  8117d8:	dfc00717 	ldw	ra,28(sp)
  8117dc:	dec00804 	addi	sp,sp,32
  8117e0:	f800283a 	ret

008117e4 <udivmodsi4>:
  8117e4:	29001b2e 	bgeu	r5,r4,811854 <udivmodsi4+0x70>
  8117e8:	28001a16 	blt	r5,zero,811854 <udivmodsi4+0x70>
  8117ec:	00800044 	movi	r2,1
  8117f0:	0007883a 	mov	r3,zero
  8117f4:	01c007c4 	movi	r7,31
  8117f8:	00000306 	br	811808 <udivmodsi4+0x24>
  8117fc:	19c01326 	beq	r3,r7,81184c <udivmodsi4+0x68>
  811800:	18c00044 	addi	r3,r3,1
  811804:	28000416 	blt	r5,zero,811818 <udivmodsi4+0x34>
  811808:	294b883a 	add	r5,r5,r5
  81180c:	1085883a 	add	r2,r2,r2
  811810:	293ffa36 	bltu	r5,r4,8117fc <udivmodsi4+0x18>
  811814:	10000d26 	beq	r2,zero,81184c <udivmodsi4+0x68>
  811818:	0007883a 	mov	r3,zero
  81181c:	21400236 	bltu	r4,r5,811828 <udivmodsi4+0x44>
  811820:	2149c83a 	sub	r4,r4,r5
  811824:	1886b03a 	or	r3,r3,r2
  811828:	1004d07a 	srli	r2,r2,1
  81182c:	280ad07a 	srli	r5,r5,1
  811830:	103ffa1e 	bne	r2,zero,81181c <udivmodsi4+0x38>
  811834:	30000226 	beq	r6,zero,811840 <udivmodsi4+0x5c>
  811838:	2005883a 	mov	r2,r4
  81183c:	f800283a 	ret
  811840:	1809883a 	mov	r4,r3
  811844:	2005883a 	mov	r2,r4
  811848:	f800283a 	ret
  81184c:	0007883a 	mov	r3,zero
  811850:	003ff806 	br	811834 <udivmodsi4+0x50>
  811854:	00800044 	movi	r2,1
  811858:	0007883a 	mov	r3,zero
  81185c:	003fef06 	br	81181c <udivmodsi4+0x38>

00811860 <__divsi3>:
  811860:	defffe04 	addi	sp,sp,-8
  811864:	dc000015 	stw	r16,0(sp)
  811868:	dfc00115 	stw	ra,4(sp)
  81186c:	0021883a 	mov	r16,zero
  811870:	20000c16 	blt	r4,zero,8118a4 <__divsi3+0x44>
  811874:	000d883a 	mov	r6,zero
  811878:	28000e16 	blt	r5,zero,8118b4 <__divsi3+0x54>
  81187c:	08117e40 	call	8117e4 <udivmodsi4>
  811880:	1007883a 	mov	r3,r2
  811884:	8005003a 	cmpeq	r2,r16,zero
  811888:	1000011e 	bne	r2,zero,811890 <__divsi3+0x30>
  81188c:	00c7c83a 	sub	r3,zero,r3
  811890:	1805883a 	mov	r2,r3
  811894:	dfc00117 	ldw	ra,4(sp)
  811898:	dc000017 	ldw	r16,0(sp)
  81189c:	dec00204 	addi	sp,sp,8
  8118a0:	f800283a 	ret
  8118a4:	0109c83a 	sub	r4,zero,r4
  8118a8:	04000044 	movi	r16,1
  8118ac:	000d883a 	mov	r6,zero
  8118b0:	283ff20e 	bge	r5,zero,81187c <__divsi3+0x1c>
  8118b4:	014bc83a 	sub	r5,zero,r5
  8118b8:	8021003a 	cmpeq	r16,r16,zero
  8118bc:	003fef06 	br	81187c <__divsi3+0x1c>

008118c0 <__modsi3>:
  8118c0:	deffff04 	addi	sp,sp,-4
  8118c4:	dfc00015 	stw	ra,0(sp)
  8118c8:	01800044 	movi	r6,1
  8118cc:	2807883a 	mov	r3,r5
  8118d0:	20000416 	blt	r4,zero,8118e4 <__modsi3+0x24>
  8118d4:	28000c16 	blt	r5,zero,811908 <__modsi3+0x48>
  8118d8:	dfc00017 	ldw	ra,0(sp)
  8118dc:	dec00104 	addi	sp,sp,4
  8118e0:	08117e41 	jmpi	8117e4 <udivmodsi4>
  8118e4:	0109c83a 	sub	r4,zero,r4
  8118e8:	28000b16 	blt	r5,zero,811918 <__modsi3+0x58>
  8118ec:	180b883a 	mov	r5,r3
  8118f0:	01800044 	movi	r6,1
  8118f4:	08117e40 	call	8117e4 <udivmodsi4>
  8118f8:	0085c83a 	sub	r2,zero,r2
  8118fc:	dfc00017 	ldw	ra,0(sp)
  811900:	dec00104 	addi	sp,sp,4
  811904:	f800283a 	ret
  811908:	014bc83a 	sub	r5,zero,r5
  81190c:	dfc00017 	ldw	ra,0(sp)
  811910:	dec00104 	addi	sp,sp,4
  811914:	08117e41 	jmpi	8117e4 <udivmodsi4>
  811918:	0147c83a 	sub	r3,zero,r5
  81191c:	003ff306 	br	8118ec <__modsi3+0x2c>

00811920 <__udivsi3>:
  811920:	000d883a 	mov	r6,zero
  811924:	08117e41 	jmpi	8117e4 <udivmodsi4>

00811928 <__umodsi3>:
  811928:	01800044 	movi	r6,1
  81192c:	08117e41 	jmpi	8117e4 <udivmodsi4>

00811930 <__unpack_f>:
  811930:	21800017 	ldw	r6,0(r4)
  811934:	00c02034 	movhi	r3,128
  811938:	18ffffc4 	addi	r3,r3,-1
  81193c:	3004d5fa 	srli	r2,r6,23
  811940:	3008d7fa 	srli	r4,r6,31
  811944:	30ce703a 	and	r7,r6,r3
  811948:	10c03fcc 	andi	r3,r2,255
  81194c:	29000115 	stw	r4,4(r5)
  811950:	1800131e 	bne	r3,zero,8119a0 <__unpack_f+0x70>
  811954:	38000f26 	beq	r7,zero,811994 <__unpack_f+0x64>
  811958:	380691fa 	slli	r3,r7,7
  81195c:	01bfe084 	movi	r6,-126
  811960:	008000c4 	movi	r2,3
  811964:	01100034 	movhi	r4,16384
  811968:	213fffc4 	addi	r4,r4,-1
  81196c:	28800015 	stw	r2,0(r5)
  811970:	29800215 	stw	r6,8(r5)
  811974:	20c00536 	bltu	r4,r3,81198c <__unpack_f+0x5c>
  811978:	3005883a 	mov	r2,r6
  81197c:	18c7883a 	add	r3,r3,r3
  811980:	10bfffc4 	addi	r2,r2,-1
  811984:	20fffd2e 	bgeu	r4,r3,81197c <__unpack_f+0x4c>
  811988:	28800215 	stw	r2,8(r5)
  81198c:	28c00315 	stw	r3,12(r5)
  811990:	f800283a 	ret
  811994:	00800084 	movi	r2,2
  811998:	28800015 	stw	r2,0(r5)
  81199c:	f800283a 	ret
  8119a0:	00803fc4 	movi	r2,255
  8119a4:	18800826 	beq	r3,r2,8119c8 <__unpack_f+0x98>
  8119a8:	380491fa 	slli	r2,r7,7
  8119ac:	18ffe044 	addi	r3,r3,-127
  8119b0:	28c00215 	stw	r3,8(r5)
  8119b4:	10900034 	orhi	r2,r2,16384
  8119b8:	28800315 	stw	r2,12(r5)
  8119bc:	008000c4 	movi	r2,3
  8119c0:	28800015 	stw	r2,0(r5)
  8119c4:	f800283a 	ret
  8119c8:	3800031e 	bne	r7,zero,8119d8 <__unpack_f+0xa8>
  8119cc:	00800104 	movi	r2,4
  8119d0:	28800015 	stw	r2,0(r5)
  8119d4:	f800283a 	ret
  8119d8:	3080042c 	andhi	r2,r6,16
  8119dc:	10000426 	beq	r2,zero,8119f0 <__unpack_f+0xc0>
  8119e0:	00800044 	movi	r2,1
  8119e4:	28800015 	stw	r2,0(r5)
  8119e8:	29c00315 	stw	r7,12(r5)
  8119ec:	f800283a 	ret
  8119f0:	28000015 	stw	zero,0(r5)
  8119f4:	003ffc06 	br	8119e8 <__unpack_f+0xb8>

008119f8 <__fpcmp_parts_f>:
  8119f8:	21800017 	ldw	r6,0(r4)
  8119fc:	00c00044 	movi	r3,1
  811a00:	19800a2e 	bgeu	r3,r6,811a2c <__fpcmp_parts_f+0x34>
  811a04:	28800017 	ldw	r2,0(r5)
  811a08:	1880082e 	bgeu	r3,r2,811a2c <__fpcmp_parts_f+0x34>
  811a0c:	00c00104 	movi	r3,4
  811a10:	30c01e26 	beq	r6,r3,811a8c <__fpcmp_parts_f+0x94>
  811a14:	10c01a26 	beq	r2,r3,811a80 <__fpcmp_parts_f+0x88>
  811a18:	00c00084 	movi	r3,2
  811a1c:	30c00526 	beq	r6,r3,811a34 <__fpcmp_parts_f+0x3c>
  811a20:	10c0071e 	bne	r2,r3,811a40 <__fpcmp_parts_f+0x48>
  811a24:	20800117 	ldw	r2,4(r4)
  811a28:	1000091e 	bne	r2,zero,811a50 <__fpcmp_parts_f+0x58>
  811a2c:	00800044 	movi	r2,1
  811a30:	f800283a 	ret
  811a34:	10c0121e 	bne	r2,r3,811a80 <__fpcmp_parts_f+0x88>
  811a38:	0005883a 	mov	r2,zero
  811a3c:	f800283a 	ret
  811a40:	20c00117 	ldw	r3,4(r4)
  811a44:	28800117 	ldw	r2,4(r5)
  811a48:	18800326 	beq	r3,r2,811a58 <__fpcmp_parts_f+0x60>
  811a4c:	183ff726 	beq	r3,zero,811a2c <__fpcmp_parts_f+0x34>
  811a50:	00bfffc4 	movi	r2,-1
  811a54:	f800283a 	ret
  811a58:	21800217 	ldw	r6,8(r4)
  811a5c:	28800217 	ldw	r2,8(r5)
  811a60:	11bffa16 	blt	r2,r6,811a4c <__fpcmp_parts_f+0x54>
  811a64:	30800416 	blt	r6,r2,811a78 <__fpcmp_parts_f+0x80>
  811a68:	21000317 	ldw	r4,12(r4)
  811a6c:	29400317 	ldw	r5,12(r5)
  811a70:	293ff636 	bltu	r5,r4,811a4c <__fpcmp_parts_f+0x54>
  811a74:	217ff02e 	bgeu	r4,r5,811a38 <__fpcmp_parts_f+0x40>
  811a78:	183fec1e 	bne	r3,zero,811a2c <__fpcmp_parts_f+0x34>
  811a7c:	003ff406 	br	811a50 <__fpcmp_parts_f+0x58>
  811a80:	28800117 	ldw	r2,4(r5)
  811a84:	103fe91e 	bne	r2,zero,811a2c <__fpcmp_parts_f+0x34>
  811a88:	003ff106 	br	811a50 <__fpcmp_parts_f+0x58>
  811a8c:	11bfe51e 	bne	r2,r6,811a24 <__fpcmp_parts_f+0x2c>
  811a90:	28c00117 	ldw	r3,4(r5)
  811a94:	20800117 	ldw	r2,4(r4)
  811a98:	1885c83a 	sub	r2,r3,r2
  811a9c:	f800283a 	ret

00811aa0 <__make_fp>:
  811aa0:	defffb04 	addi	sp,sp,-20
  811aa4:	d9000015 	stw	r4,0(sp)
  811aa8:	d809883a 	mov	r4,sp
  811aac:	dfc00415 	stw	ra,16(sp)
  811ab0:	d9400115 	stw	r5,4(sp)
  811ab4:	d9800215 	stw	r6,8(sp)
  811ab8:	d9c00315 	stw	r7,12(sp)
  811abc:	0811b940 	call	811b94 <__pack_f>
  811ac0:	dfc00417 	ldw	ra,16(sp)
  811ac4:	dec00504 	addi	sp,sp,20
  811ac8:	f800283a 	ret

00811acc <__fpcmp_parts_d>:
  811acc:	21800017 	ldw	r6,0(r4)
  811ad0:	00c00044 	movi	r3,1
  811ad4:	19800a2e 	bgeu	r3,r6,811b00 <__fpcmp_parts_d+0x34>
  811ad8:	28800017 	ldw	r2,0(r5)
  811adc:	1880082e 	bgeu	r3,r2,811b00 <__fpcmp_parts_d+0x34>
  811ae0:	00c00104 	movi	r3,4
  811ae4:	30c02626 	beq	r6,r3,811b80 <__fpcmp_parts_d+0xb4>
  811ae8:	10c02226 	beq	r2,r3,811b74 <__fpcmp_parts_d+0xa8>
  811aec:	00c00084 	movi	r3,2
  811af0:	30c00526 	beq	r6,r3,811b08 <__fpcmp_parts_d+0x3c>
  811af4:	10c0071e 	bne	r2,r3,811b14 <__fpcmp_parts_d+0x48>
  811af8:	20800117 	ldw	r2,4(r4)
  811afc:	1000091e 	bne	r2,zero,811b24 <__fpcmp_parts_d+0x58>
  811b00:	00800044 	movi	r2,1
  811b04:	f800283a 	ret
  811b08:	10c01a1e 	bne	r2,r3,811b74 <__fpcmp_parts_d+0xa8>
  811b0c:	0005883a 	mov	r2,zero
  811b10:	f800283a 	ret
  811b14:	22000117 	ldw	r8,4(r4)
  811b18:	28800117 	ldw	r2,4(r5)
  811b1c:	40800326 	beq	r8,r2,811b2c <__fpcmp_parts_d+0x60>
  811b20:	403ff726 	beq	r8,zero,811b00 <__fpcmp_parts_d+0x34>
  811b24:	00bfffc4 	movi	r2,-1
  811b28:	f800283a 	ret
  811b2c:	20c00217 	ldw	r3,8(r4)
  811b30:	28800217 	ldw	r2,8(r5)
  811b34:	10fffa16 	blt	r2,r3,811b20 <__fpcmp_parts_d+0x54>
  811b38:	18800916 	blt	r3,r2,811b60 <__fpcmp_parts_d+0x94>
  811b3c:	21c00417 	ldw	r7,16(r4)
  811b40:	28c00417 	ldw	r3,16(r5)
  811b44:	21800317 	ldw	r6,12(r4)
  811b48:	28800317 	ldw	r2,12(r5)
  811b4c:	19fff436 	bltu	r3,r7,811b20 <__fpcmp_parts_d+0x54>
  811b50:	38c00526 	beq	r7,r3,811b68 <__fpcmp_parts_d+0x9c>
  811b54:	38c00236 	bltu	r7,r3,811b60 <__fpcmp_parts_d+0x94>
  811b58:	19ffec1e 	bne	r3,r7,811b0c <__fpcmp_parts_d+0x40>
  811b5c:	30bfeb2e 	bgeu	r6,r2,811b0c <__fpcmp_parts_d+0x40>
  811b60:	403fe71e 	bne	r8,zero,811b00 <__fpcmp_parts_d+0x34>
  811b64:	003fef06 	br	811b24 <__fpcmp_parts_d+0x58>
  811b68:	11bffa2e 	bgeu	r2,r6,811b54 <__fpcmp_parts_d+0x88>
  811b6c:	403fe426 	beq	r8,zero,811b00 <__fpcmp_parts_d+0x34>
  811b70:	003fec06 	br	811b24 <__fpcmp_parts_d+0x58>
  811b74:	28800117 	ldw	r2,4(r5)
  811b78:	103fe11e 	bne	r2,zero,811b00 <__fpcmp_parts_d+0x34>
  811b7c:	003fe906 	br	811b24 <__fpcmp_parts_d+0x58>
  811b80:	11bfdd1e 	bne	r2,r6,811af8 <__fpcmp_parts_d+0x2c>
  811b84:	28c00117 	ldw	r3,4(r5)
  811b88:	20800117 	ldw	r2,4(r4)
  811b8c:	1885c83a 	sub	r2,r3,r2
  811b90:	f800283a 	ret

00811b94 <__pack_f>:
  811b94:	20c00017 	ldw	r3,0(r4)
  811b98:	01c00044 	movi	r7,1
  811b9c:	21800317 	ldw	r6,12(r4)
  811ba0:	21400117 	ldw	r5,4(r4)
  811ba4:	38c02d2e 	bgeu	r7,r3,811c5c <__pack_f+0xc8>
  811ba8:	00800104 	movi	r2,4
  811bac:	18802826 	beq	r3,r2,811c50 <__pack_f+0xbc>
  811bb0:	00800084 	movi	r2,2
  811bb4:	18800126 	beq	r3,r2,811bbc <__pack_f+0x28>
  811bb8:	3000101e 	bne	r6,zero,811bfc <__pack_f+0x68>
  811bbc:	000d883a 	mov	r6,zero
  811bc0:	0007883a 	mov	r3,zero
  811bc4:	19003fcc 	andi	r4,r3,255
  811bc8:	200895fa 	slli	r4,r4,23
  811bcc:	00c02034 	movhi	r3,128
  811bd0:	18ffffc4 	addi	r3,r3,-1
  811bd4:	30c6703a 	and	r3,r6,r3
  811bd8:	10a0002c 	andhi	r2,r2,32768
  811bdc:	10c4b03a 	or	r2,r2,r3
  811be0:	280a97fa 	slli	r5,r5,31
  811be4:	1104b03a 	or	r2,r2,r4
  811be8:	00e00034 	movhi	r3,32768
  811bec:	18ffffc4 	addi	r3,r3,-1
  811bf0:	10c4703a 	and	r2,r2,r3
  811bf4:	1144b03a 	or	r2,r2,r5
  811bf8:	f800283a 	ret
  811bfc:	21000217 	ldw	r4,8(r4)
  811c00:	00bfe084 	movi	r2,-126
  811c04:	20801b16 	blt	r4,r2,811c74 <__pack_f+0xe0>
  811c08:	00801fc4 	movi	r2,127
  811c0c:	11001016 	blt	r2,r4,811c50 <__pack_f+0xbc>
  811c10:	308e703a 	and	r7,r6,r2
  811c14:	2087883a 	add	r3,r4,r2
  811c18:	00801004 	movi	r2,64
  811c1c:	38800526 	beq	r7,r2,811c34 <__pack_f+0xa0>
  811c20:	31800fc4 	addi	r6,r6,63
  811c24:	30000716 	blt	r6,zero,811c44 <__pack_f+0xb0>
  811c28:	300490ba 	slli	r2,r6,2
  811c2c:	100cd27a 	srli	r6,r2,9
  811c30:	003fe406 	br	811bc4 <__pack_f+0x30>
  811c34:	3080200c 	andi	r2,r6,128
  811c38:	103ffa26 	beq	r2,zero,811c24 <__pack_f+0x90>
  811c3c:	31cd883a 	add	r6,r6,r7
  811c40:	003ff806 	br	811c24 <__pack_f+0x90>
  811c44:	300cd07a 	srli	r6,r6,1
  811c48:	18c00044 	addi	r3,r3,1
  811c4c:	003ff606 	br	811c28 <__pack_f+0x94>
  811c50:	000d883a 	mov	r6,zero
  811c54:	00ffffc4 	movi	r3,-1
  811c58:	003fda06 	br	811bc4 <__pack_f+0x30>
  811c5c:	31800434 	orhi	r6,r6,16
  811c60:	00802034 	movhi	r2,128
  811c64:	10bfffc4 	addi	r2,r2,-1
  811c68:	308c703a 	and	r6,r6,r2
  811c6c:	00ffffc4 	movi	r3,-1
  811c70:	003fd406 	br	811bc4 <__pack_f+0x30>
  811c74:	1109c83a 	sub	r4,r2,r4
  811c78:	00800644 	movi	r2,25
  811c7c:	11001216 	blt	r2,r4,811cc8 <__pack_f+0x134>
  811c80:	3904983a 	sll	r2,r7,r4
  811c84:	3106d83a 	srl	r3,r6,r4
  811c88:	10bfffc4 	addi	r2,r2,-1
  811c8c:	3084703a 	and	r2,r6,r2
  811c90:	1004c03a 	cmpne	r2,r2,zero
  811c94:	1886b03a 	or	r3,r3,r2
  811c98:	19001fcc 	andi	r4,r3,127
  811c9c:	00801004 	movi	r2,64
  811ca0:	20800c26 	beq	r4,r2,811cd4 <__pack_f+0x140>
  811ca4:	18c00fc4 	addi	r3,r3,63
  811ca8:	00900034 	movhi	r2,16384
  811cac:	10bfffc4 	addi	r2,r2,-1
  811cb0:	180cd1fa 	srli	r6,r3,7
  811cb4:	10c7803a 	cmpltu	r3,r2,r3
  811cb8:	00802034 	movhi	r2,128
  811cbc:	10bfffc4 	addi	r2,r2,-1
  811cc0:	308c703a 	and	r6,r6,r2
  811cc4:	003fbf06 	br	811bc4 <__pack_f+0x30>
  811cc8:	0007883a 	mov	r3,zero
  811ccc:	000d883a 	mov	r6,zero
  811cd0:	003ff906 	br	811cb8 <__pack_f+0x124>
  811cd4:	1880200c 	andi	r2,r3,128
  811cd8:	10000126 	beq	r2,zero,811ce0 <__pack_f+0x14c>
  811cdc:	1907883a 	add	r3,r3,r4
  811ce0:	180cd1fa 	srli	r6,r3,7
  811ce4:	00900034 	movhi	r2,16384
  811ce8:	10bfffc4 	addi	r2,r2,-1
  811cec:	10c7803a 	cmpltu	r3,r2,r3
  811cf0:	003ff106 	br	811cb8 <__pack_f+0x124>

00811cf4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  811cf4:	defff804 	addi	sp,sp,-32
  811cf8:	dfc00715 	stw	ra,28(sp)
  811cfc:	df000615 	stw	fp,24(sp)
  811d00:	df000604 	addi	fp,sp,24
  811d04:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  811d08:	e0bffc17 	ldw	r2,-16(fp)
  811d0c:	1004803a 	cmplt	r2,r2,zero
  811d10:	1000091e 	bne	r2,zero,811d38 <close+0x44>
  811d14:	e13ffc17 	ldw	r4,-16(fp)
  811d18:	01400304 	movi	r5,12
  811d1c:	08026a00 	call	8026a0 <__mulsi3>
  811d20:	1007883a 	mov	r3,r2
  811d24:	00802074 	movhi	r2,129
  811d28:	10974a04 	addi	r2,r2,23848
  811d2c:	1887883a 	add	r3,r3,r2
  811d30:	e0ffff15 	stw	r3,-4(fp)
  811d34:	00000106 	br	811d3c <close+0x48>
  811d38:	e03fff15 	stw	zero,-4(fp)
  811d3c:	e0bfff17 	ldw	r2,-4(fp)
  811d40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811d44:	e0bffb17 	ldw	r2,-20(fp)
  811d48:	1005003a 	cmpeq	r2,r2,zero
  811d4c:	10001d1e 	bne	r2,zero,811dc4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  811d50:	e0bffb17 	ldw	r2,-20(fp)
  811d54:	10800017 	ldw	r2,0(r2)
  811d58:	10800417 	ldw	r2,16(r2)
  811d5c:	1005003a 	cmpeq	r2,r2,zero
  811d60:	1000071e 	bne	r2,zero,811d80 <close+0x8c>
  811d64:	e0bffb17 	ldw	r2,-20(fp)
  811d68:	10800017 	ldw	r2,0(r2)
  811d6c:	10800417 	ldw	r2,16(r2)
  811d70:	e13ffb17 	ldw	r4,-20(fp)
  811d74:	103ee83a 	callr	r2
  811d78:	e0bffe15 	stw	r2,-8(fp)
  811d7c:	00000106 	br	811d84 <close+0x90>
  811d80:	e03ffe15 	stw	zero,-8(fp)
  811d84:	e0bffe17 	ldw	r2,-8(fp)
  811d88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  811d8c:	e13ffc17 	ldw	r4,-16(fp)
  811d90:	08128800 	call	812880 <alt_release_fd>
    if (rval < 0)
  811d94:	e0bffa17 	ldw	r2,-24(fp)
  811d98:	1004403a 	cmpge	r2,r2,zero
  811d9c:	1000071e 	bne	r2,zero,811dbc <close+0xc8>
    {
      ALT_ERRNO = -rval;
  811da0:	0811df40 	call	811df4 <alt_get_errno>
  811da4:	e0fffa17 	ldw	r3,-24(fp)
  811da8:	00c7c83a 	sub	r3,zero,r3
  811dac:	10c00015 	stw	r3,0(r2)
      return -1;
  811db0:	00bfffc4 	movi	r2,-1
  811db4:	e0bffd15 	stw	r2,-12(fp)
  811db8:	00000806 	br	811ddc <close+0xe8>
    }
    return 0;
  811dbc:	e03ffd15 	stw	zero,-12(fp)
  811dc0:	00000606 	br	811ddc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811dc4:	0811df40 	call	811df4 <alt_get_errno>
  811dc8:	1007883a 	mov	r3,r2
  811dcc:	00801444 	movi	r2,81
  811dd0:	18800015 	stw	r2,0(r3)
    return -1;
  811dd4:	00bfffc4 	movi	r2,-1
  811dd8:	e0bffd15 	stw	r2,-12(fp)
  811ddc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  811de0:	e037883a 	mov	sp,fp
  811de4:	dfc00117 	ldw	ra,4(sp)
  811de8:	df000017 	ldw	fp,0(sp)
  811dec:	dec00204 	addi	sp,sp,8
  811df0:	f800283a 	ret

00811df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811df4:	defffd04 	addi	sp,sp,-12
  811df8:	dfc00215 	stw	ra,8(sp)
  811dfc:	df000115 	stw	fp,4(sp)
  811e00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811e04:	00802074 	movhi	r2,129
  811e08:	109bd804 	addi	r2,r2,28512
  811e0c:	10800017 	ldw	r2,0(r2)
  811e10:	1005003a 	cmpeq	r2,r2,zero
  811e14:	1000061e 	bne	r2,zero,811e30 <alt_get_errno+0x3c>
  811e18:	00802074 	movhi	r2,129
  811e1c:	109bd804 	addi	r2,r2,28512
  811e20:	10800017 	ldw	r2,0(r2)
  811e24:	103ee83a 	callr	r2
  811e28:	e0bfff15 	stw	r2,-4(fp)
  811e2c:	00000306 	br	811e3c <alt_get_errno+0x48>
  811e30:	008020b4 	movhi	r2,130
  811e34:	10a2b604 	addi	r2,r2,-29992
  811e38:	e0bfff15 	stw	r2,-4(fp)
  811e3c:	e0bfff17 	ldw	r2,-4(fp)
}
  811e40:	e037883a 	mov	sp,fp
  811e44:	dfc00117 	ldw	ra,4(sp)
  811e48:	df000017 	ldw	fp,0(sp)
  811e4c:	dec00204 	addi	sp,sp,8
  811e50:	f800283a 	ret

00811e54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811e54:	defffc04 	addi	sp,sp,-16
  811e58:	df000315 	stw	fp,12(sp)
  811e5c:	df000304 	addi	fp,sp,12
  811e60:	e13ffd15 	stw	r4,-12(fp)
  811e64:	e17ffe15 	stw	r5,-8(fp)
  811e68:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811e6c:	e0bfff17 	ldw	r2,-4(fp)
}
  811e70:	e037883a 	mov	sp,fp
  811e74:	df000017 	ldw	fp,0(sp)
  811e78:	dec00104 	addi	sp,sp,4
  811e7c:	f800283a 	ret

00811e80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811e80:	defffd04 	addi	sp,sp,-12
  811e84:	df000215 	stw	fp,8(sp)
  811e88:	df000204 	addi	fp,sp,8
  811e8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811e90:	e0bfff17 	ldw	r2,-4(fp)
  811e94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811e98:	e0bffe17 	ldw	r2,-8(fp)
  811e9c:	1005003a 	cmpeq	r2,r2,zero
  811ea0:	1000021e 	bne	r2,zero,811eac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811ea4:	002af070 	cmpltui	zero,zero,43969
  811ea8:	00000106 	br	811eb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811eac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811eb0:	e037883a 	mov	sp,fp
  811eb4:	df000017 	ldw	fp,0(sp)
  811eb8:	dec00104 	addi	sp,sp,4
  811ebc:	f800283a 	ret

00811ec0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811ec0:	defffd04 	addi	sp,sp,-12
  811ec4:	dfc00215 	stw	ra,8(sp)
  811ec8:	df000115 	stw	fp,4(sp)
  811ecc:	df000104 	addi	fp,sp,4
  811ed0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811ed4:	e13fff17 	ldw	r4,-4(fp)
  811ed8:	0811e800 	call	811e80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811edc:	003fff06 	br	811edc <_exit+0x1c>

00811ee0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811ee0:	defff904 	addi	sp,sp,-28
  811ee4:	dfc00615 	stw	ra,24(sp)
  811ee8:	df000515 	stw	fp,20(sp)
  811eec:	df000504 	addi	fp,sp,20
  811ef0:	e13ffc15 	stw	r4,-16(fp)
  811ef4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811ef8:	e0bffc17 	ldw	r2,-16(fp)
  811efc:	1004803a 	cmplt	r2,r2,zero
  811f00:	1000091e 	bne	r2,zero,811f28 <fstat+0x48>
  811f04:	e13ffc17 	ldw	r4,-16(fp)
  811f08:	01400304 	movi	r5,12
  811f0c:	08026a00 	call	8026a0 <__mulsi3>
  811f10:	1007883a 	mov	r3,r2
  811f14:	00802074 	movhi	r2,129
  811f18:	10974a04 	addi	r2,r2,23848
  811f1c:	1887883a 	add	r3,r3,r2
  811f20:	e0ffff15 	stw	r3,-4(fp)
  811f24:	00000106 	br	811f2c <fstat+0x4c>
  811f28:	e03fff15 	stw	zero,-4(fp)
  811f2c:	e0bfff17 	ldw	r2,-4(fp)
  811f30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811f34:	e0bffb17 	ldw	r2,-20(fp)
  811f38:	1005003a 	cmpeq	r2,r2,zero
  811f3c:	1000121e 	bne	r2,zero,811f88 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  811f40:	e0bffb17 	ldw	r2,-20(fp)
  811f44:	10800017 	ldw	r2,0(r2)
  811f48:	10800817 	ldw	r2,32(r2)
  811f4c:	1005003a 	cmpeq	r2,r2,zero
  811f50:	1000081e 	bne	r2,zero,811f74 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  811f54:	e0bffb17 	ldw	r2,-20(fp)
  811f58:	10800017 	ldw	r2,0(r2)
  811f5c:	10800817 	ldw	r2,32(r2)
  811f60:	e13ffb17 	ldw	r4,-20(fp)
  811f64:	e17ffd17 	ldw	r5,-12(fp)
  811f68:	103ee83a 	callr	r2
  811f6c:	e0bffe15 	stw	r2,-8(fp)
  811f70:	00000b06 	br	811fa0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  811f74:	e0fffd17 	ldw	r3,-12(fp)
  811f78:	00880004 	movi	r2,8192
  811f7c:	18800115 	stw	r2,4(r3)
      return 0;
  811f80:	e03ffe15 	stw	zero,-8(fp)
  811f84:	00000606 	br	811fa0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811f88:	0811fb80 	call	811fb8 <alt_get_errno>
  811f8c:	1007883a 	mov	r3,r2
  811f90:	00801444 	movi	r2,81
  811f94:	18800015 	stw	r2,0(r3)
    return -1;
  811f98:	00bfffc4 	movi	r2,-1
  811f9c:	e0bffe15 	stw	r2,-8(fp)
  811fa0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811fa4:	e037883a 	mov	sp,fp
  811fa8:	dfc00117 	ldw	ra,4(sp)
  811fac:	df000017 	ldw	fp,0(sp)
  811fb0:	dec00204 	addi	sp,sp,8
  811fb4:	f800283a 	ret

00811fb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811fb8:	defffd04 	addi	sp,sp,-12
  811fbc:	dfc00215 	stw	ra,8(sp)
  811fc0:	df000115 	stw	fp,4(sp)
  811fc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811fc8:	00802074 	movhi	r2,129
  811fcc:	109bd804 	addi	r2,r2,28512
  811fd0:	10800017 	ldw	r2,0(r2)
  811fd4:	1005003a 	cmpeq	r2,r2,zero
  811fd8:	1000061e 	bne	r2,zero,811ff4 <alt_get_errno+0x3c>
  811fdc:	00802074 	movhi	r2,129
  811fe0:	109bd804 	addi	r2,r2,28512
  811fe4:	10800017 	ldw	r2,0(r2)
  811fe8:	103ee83a 	callr	r2
  811fec:	e0bfff15 	stw	r2,-4(fp)
  811ff0:	00000306 	br	812000 <alt_get_errno+0x48>
  811ff4:	008020b4 	movhi	r2,130
  811ff8:	10a2b604 	addi	r2,r2,-29992
  811ffc:	e0bfff15 	stw	r2,-4(fp)
  812000:	e0bfff17 	ldw	r2,-4(fp)
}
  812004:	e037883a 	mov	sp,fp
  812008:	dfc00117 	ldw	ra,4(sp)
  81200c:	df000017 	ldw	fp,0(sp)
  812010:	dec00204 	addi	sp,sp,8
  812014:	f800283a 	ret

00812018 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  812018:	deffeb04 	addi	sp,sp,-84
  81201c:	dfc01415 	stw	ra,80(sp)
  812020:	df001315 	stw	fp,76(sp)
  812024:	df001304 	addi	fp,sp,76
  812028:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81202c:	e0bffd17 	ldw	r2,-12(fp)
  812030:	1004803a 	cmplt	r2,r2,zero
  812034:	1000091e 	bne	r2,zero,81205c <isatty+0x44>
  812038:	e13ffd17 	ldw	r4,-12(fp)
  81203c:	01400304 	movi	r5,12
  812040:	08026a00 	call	8026a0 <__mulsi3>
  812044:	1007883a 	mov	r3,r2
  812048:	00802074 	movhi	r2,129
  81204c:	10974a04 	addi	r2,r2,23848
  812050:	1887883a 	add	r3,r3,r2
  812054:	e0ffff15 	stw	r3,-4(fp)
  812058:	00000106 	br	812060 <isatty+0x48>
  81205c:	e03fff15 	stw	zero,-4(fp)
  812060:	e0bfff17 	ldw	r2,-4(fp)
  812064:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  812068:	e0bfed17 	ldw	r2,-76(fp)
  81206c:	1005003a 	cmpeq	r2,r2,zero
  812070:	10000f1e 	bne	r2,zero,8120b0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  812074:	e0bfed17 	ldw	r2,-76(fp)
  812078:	10800017 	ldw	r2,0(r2)
  81207c:	10800817 	ldw	r2,32(r2)
  812080:	1004c03a 	cmpne	r2,r2,zero
  812084:	1000031e 	bne	r2,zero,812094 <isatty+0x7c>
    {
      return 1;
  812088:	00800044 	movi	r2,1
  81208c:	e0bffe15 	stw	r2,-8(fp)
  812090:	00000c06 	br	8120c4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  812094:	e17fee04 	addi	r5,fp,-72
  812098:	e13ffd17 	ldw	r4,-12(fp)
  81209c:	0811ee00 	call	811ee0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8120a0:	e0bfef17 	ldw	r2,-68(fp)
  8120a4:	10880020 	cmpeqi	r2,r2,8192
  8120a8:	e0bffe15 	stw	r2,-8(fp)
  8120ac:	00000506 	br	8120c4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8120b0:	08120dc0 	call	8120dc <alt_get_errno>
  8120b4:	1007883a 	mov	r3,r2
  8120b8:	00801444 	movi	r2,81
  8120bc:	18800015 	stw	r2,0(r3)
    return 0;
  8120c0:	e03ffe15 	stw	zero,-8(fp)
  8120c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8120c8:	e037883a 	mov	sp,fp
  8120cc:	dfc00117 	ldw	ra,4(sp)
  8120d0:	df000017 	ldw	fp,0(sp)
  8120d4:	dec00204 	addi	sp,sp,8
  8120d8:	f800283a 	ret

008120dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8120dc:	defffd04 	addi	sp,sp,-12
  8120e0:	dfc00215 	stw	ra,8(sp)
  8120e4:	df000115 	stw	fp,4(sp)
  8120e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8120ec:	00802074 	movhi	r2,129
  8120f0:	109bd804 	addi	r2,r2,28512
  8120f4:	10800017 	ldw	r2,0(r2)
  8120f8:	1005003a 	cmpeq	r2,r2,zero
  8120fc:	1000061e 	bne	r2,zero,812118 <alt_get_errno+0x3c>
  812100:	00802074 	movhi	r2,129
  812104:	109bd804 	addi	r2,r2,28512
  812108:	10800017 	ldw	r2,0(r2)
  81210c:	103ee83a 	callr	r2
  812110:	e0bfff15 	stw	r2,-4(fp)
  812114:	00000306 	br	812124 <alt_get_errno+0x48>
  812118:	008020b4 	movhi	r2,130
  81211c:	10a2b604 	addi	r2,r2,-29992
  812120:	e0bfff15 	stw	r2,-4(fp)
  812124:	e0bfff17 	ldw	r2,-4(fp)
}
  812128:	e037883a 	mov	sp,fp
  81212c:	dfc00117 	ldw	ra,4(sp)
  812130:	df000017 	ldw	fp,0(sp)
  812134:	dec00204 	addi	sp,sp,8
  812138:	f800283a 	ret

0081213c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81213c:	defffe04 	addi	sp,sp,-8
  812140:	dfc00115 	stw	ra,4(sp)
  812144:	df000015 	stw	fp,0(sp)
  812148:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81214c:	01002074 	movhi	r4,129
  812150:	211bef04 	addi	r4,r4,28604
  812154:	01402074 	movhi	r5,129
  812158:	29552804 	addi	r5,r5,21664
  81215c:	01802074 	movhi	r6,129
  812160:	319bef04 	addi	r6,r6,28604
  812164:	08121bc0 	call	8121bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  812168:	01002034 	movhi	r4,128
  81216c:	21000004 	addi	r4,r4,0
  812170:	01404234 	movhi	r5,264
  812174:	29400804 	addi	r5,r5,32
  812178:	01804234 	movhi	r6,264
  81217c:	31806d04 	addi	r6,r6,436
  812180:	08121bc0 	call	8121bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  812184:	01002074 	movhi	r4,129
  812188:	2112c904 	addi	r4,r4,19236
  81218c:	01402074 	movhi	r5,129
  812190:	2952c904 	addi	r5,r5,19236
  812194:	01802074 	movhi	r6,129
  812198:	31952804 	addi	r6,r6,21664
  81219c:	08121bc0 	call	8121bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8121a0:	0813fc80 	call	813fc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8121a4:	081440c0 	call	81440c <alt_icache_flush_all>
}
  8121a8:	e037883a 	mov	sp,fp
  8121ac:	dfc00117 	ldw	ra,4(sp)
  8121b0:	df000017 	ldw	fp,0(sp)
  8121b4:	dec00204 	addi	sp,sp,8
  8121b8:	f800283a 	ret

008121bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8121bc:	defffc04 	addi	sp,sp,-16
  8121c0:	df000315 	stw	fp,12(sp)
  8121c4:	df000304 	addi	fp,sp,12
  8121c8:	e13ffd15 	stw	r4,-12(fp)
  8121cc:	e17ffe15 	stw	r5,-8(fp)
  8121d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8121d4:	e0fffe17 	ldw	r3,-8(fp)
  8121d8:	e0bffd17 	ldw	r2,-12(fp)
  8121dc:	18800e26 	beq	r3,r2,812218 <alt_load_section+0x5c>
  {
    while( to != end )
  8121e0:	00000a06 	br	81220c <alt_load_section+0x50>
    {
      *to++ = *from++;
  8121e4:	e0bffd17 	ldw	r2,-12(fp)
  8121e8:	10c00017 	ldw	r3,0(r2)
  8121ec:	e0bffe17 	ldw	r2,-8(fp)
  8121f0:	10c00015 	stw	r3,0(r2)
  8121f4:	e0bffe17 	ldw	r2,-8(fp)
  8121f8:	10800104 	addi	r2,r2,4
  8121fc:	e0bffe15 	stw	r2,-8(fp)
  812200:	e0bffd17 	ldw	r2,-12(fp)
  812204:	10800104 	addi	r2,r2,4
  812208:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81220c:	e0fffe17 	ldw	r3,-8(fp)
  812210:	e0bfff17 	ldw	r2,-4(fp)
  812214:	18bff31e 	bne	r3,r2,8121e4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  812218:	e037883a 	mov	sp,fp
  81221c:	df000017 	ldw	fp,0(sp)
  812220:	dec00104 	addi	sp,sp,4
  812224:	f800283a 	ret

00812228 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  812228:	defff804 	addi	sp,sp,-32
  81222c:	dfc00715 	stw	ra,28(sp)
  812230:	df000615 	stw	fp,24(sp)
  812234:	df000604 	addi	fp,sp,24
  812238:	e13ffc15 	stw	r4,-16(fp)
  81223c:	e17ffd15 	stw	r5,-12(fp)
  812240:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  812244:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812248:	e0bffc17 	ldw	r2,-16(fp)
  81224c:	1004803a 	cmplt	r2,r2,zero
  812250:	1000091e 	bne	r2,zero,812278 <lseek+0x50>
  812254:	e13ffc17 	ldw	r4,-16(fp)
  812258:	01400304 	movi	r5,12
  81225c:	08026a00 	call	8026a0 <__mulsi3>
  812260:	1007883a 	mov	r3,r2
  812264:	00802074 	movhi	r2,129
  812268:	10974a04 	addi	r2,r2,23848
  81226c:	1887883a 	add	r3,r3,r2
  812270:	e0ffff15 	stw	r3,-4(fp)
  812274:	00000106 	br	81227c <lseek+0x54>
  812278:	e03fff15 	stw	zero,-4(fp)
  81227c:	e0bfff17 	ldw	r2,-4(fp)
  812280:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  812284:	e0bffb17 	ldw	r2,-20(fp)
  812288:	1005003a 	cmpeq	r2,r2,zero
  81228c:	1000111e 	bne	r2,zero,8122d4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  812290:	e0bffb17 	ldw	r2,-20(fp)
  812294:	10800017 	ldw	r2,0(r2)
  812298:	10800717 	ldw	r2,28(r2)
  81229c:	1005003a 	cmpeq	r2,r2,zero
  8122a0:	1000091e 	bne	r2,zero,8122c8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8122a4:	e0bffb17 	ldw	r2,-20(fp)
  8122a8:	10800017 	ldw	r2,0(r2)
  8122ac:	10800717 	ldw	r2,28(r2)
  8122b0:	e13ffb17 	ldw	r4,-20(fp)
  8122b4:	e17ffd17 	ldw	r5,-12(fp)
  8122b8:	e1bffe17 	ldw	r6,-8(fp)
  8122bc:	103ee83a 	callr	r2
  8122c0:	e0bffa15 	stw	r2,-24(fp)
  8122c4:	00000506 	br	8122dc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8122c8:	00bfde84 	movi	r2,-134
  8122cc:	e0bffa15 	stw	r2,-24(fp)
  8122d0:	00000206 	br	8122dc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  8122d4:	00bfebc4 	movi	r2,-81
  8122d8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8122dc:	e0bffa17 	ldw	r2,-24(fp)
  8122e0:	1004403a 	cmpge	r2,r2,zero
  8122e4:	1000071e 	bne	r2,zero,812304 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  8122e8:	081231c0 	call	81231c <alt_get_errno>
  8122ec:	1007883a 	mov	r3,r2
  8122f0:	e0bffa17 	ldw	r2,-24(fp)
  8122f4:	0085c83a 	sub	r2,zero,r2
  8122f8:	18800015 	stw	r2,0(r3)
    rc = -1;
  8122fc:	00bfffc4 	movi	r2,-1
  812300:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  812304:	e0bffa17 	ldw	r2,-24(fp)
}
  812308:	e037883a 	mov	sp,fp
  81230c:	dfc00117 	ldw	ra,4(sp)
  812310:	df000017 	ldw	fp,0(sp)
  812314:	dec00204 	addi	sp,sp,8
  812318:	f800283a 	ret

0081231c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81231c:	defffd04 	addi	sp,sp,-12
  812320:	dfc00215 	stw	ra,8(sp)
  812324:	df000115 	stw	fp,4(sp)
  812328:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81232c:	00802074 	movhi	r2,129
  812330:	109bd804 	addi	r2,r2,28512
  812334:	10800017 	ldw	r2,0(r2)
  812338:	1005003a 	cmpeq	r2,r2,zero
  81233c:	1000061e 	bne	r2,zero,812358 <alt_get_errno+0x3c>
  812340:	00802074 	movhi	r2,129
  812344:	109bd804 	addi	r2,r2,28512
  812348:	10800017 	ldw	r2,0(r2)
  81234c:	103ee83a 	callr	r2
  812350:	e0bfff15 	stw	r2,-4(fp)
  812354:	00000306 	br	812364 <alt_get_errno+0x48>
  812358:	008020b4 	movhi	r2,130
  81235c:	10a2b604 	addi	r2,r2,-29992
  812360:	e0bfff15 	stw	r2,-4(fp)
  812364:	e0bfff17 	ldw	r2,-4(fp)
}
  812368:	e037883a 	mov	sp,fp
  81236c:	dfc00117 	ldw	ra,4(sp)
  812370:	df000017 	ldw	fp,0(sp)
  812374:	dec00204 	addi	sp,sp,8
  812378:	f800283a 	ret

0081237c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81237c:	defffd04 	addi	sp,sp,-12
  812380:	dfc00215 	stw	ra,8(sp)
  812384:	df000115 	stw	fp,4(sp)
  812388:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81238c:	0009883a 	mov	r4,zero
  812390:	0812c2c0 	call	812c2c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  812394:	0812c600 	call	812c60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  812398:	01002074 	movhi	r4,129
  81239c:	21151d04 	addi	r4,r4,21620
  8123a0:	01402074 	movhi	r5,129
  8123a4:	29551d04 	addi	r5,r5,21620
  8123a8:	01802074 	movhi	r6,129
  8123ac:	31951d04 	addi	r6,r6,21620
  8123b0:	08147e00 	call	8147e0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8123b4:	d126f117 	ldw	r4,-25660(gp)
  8123b8:	d166f217 	ldw	r5,-25656(gp)
  8123bc:	d1a6f317 	ldw	r6,-25652(gp)
  8123c0:	08005640 	call	800564 <main>
  8123c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8123c8:	01000044 	movi	r4,1
  8123cc:	0811cf40 	call	811cf4 <close>
  exit (result);
  8123d0:	e13fff17 	ldw	r4,-4(fp)
  8123d4:	0802cdc0 	call	802cdc <exit>

008123d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8123d8:	defffe04 	addi	sp,sp,-8
  8123dc:	df000115 	stw	fp,4(sp)
  8123e0:	df000104 	addi	fp,sp,4
  8123e4:	e13fff15 	stw	r4,-4(fp)
}
  8123e8:	e037883a 	mov	sp,fp
  8123ec:	df000017 	ldw	fp,0(sp)
  8123f0:	dec00104 	addi	sp,sp,4
  8123f4:	f800283a 	ret

008123f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8123f8:	defffe04 	addi	sp,sp,-8
  8123fc:	df000115 	stw	fp,4(sp)
  812400:	df000104 	addi	fp,sp,4
  812404:	e13fff15 	stw	r4,-4(fp)
}
  812408:	e037883a 	mov	sp,fp
  81240c:	df000017 	ldw	fp,0(sp)
  812410:	dec00104 	addi	sp,sp,4
  812414:	f800283a 	ret

00812418 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812418:	defffa04 	addi	sp,sp,-24
  81241c:	dfc00515 	stw	ra,20(sp)
  812420:	df000415 	stw	fp,16(sp)
  812424:	dc000315 	stw	r16,12(sp)
  812428:	df000304 	addi	fp,sp,12
  81242c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812430:	e0bffe17 	ldw	r2,-8(fp)
  812434:	10800217 	ldw	r2,8(r2)
  812438:	10d00034 	orhi	r3,r2,16384
  81243c:	e0bffe17 	ldw	r2,-8(fp)
  812440:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  812444:	e03ffd15 	stw	zero,-12(fp)
  812448:	00002306 	br	8124d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81244c:	e13ffd17 	ldw	r4,-12(fp)
  812450:	04002074 	movhi	r16,129
  812454:	84174a04 	addi	r16,r16,23848
  812458:	01400304 	movi	r5,12
  81245c:	08026a00 	call	8026a0 <__mulsi3>
  812460:	1405883a 	add	r2,r2,r16
  812464:	10c00017 	ldw	r3,0(r2)
  812468:	e0bffe17 	ldw	r2,-8(fp)
  81246c:	10800017 	ldw	r2,0(r2)
  812470:	1880161e 	bne	r3,r2,8124cc <alt_file_locked+0xb4>
  812474:	e13ffd17 	ldw	r4,-12(fp)
  812478:	04002074 	movhi	r16,129
  81247c:	84174a04 	addi	r16,r16,23848
  812480:	01400304 	movi	r5,12
  812484:	08026a00 	call	8026a0 <__mulsi3>
  812488:	1405883a 	add	r2,r2,r16
  81248c:	10800204 	addi	r2,r2,8
  812490:	10800017 	ldw	r2,0(r2)
  812494:	1004403a 	cmpge	r2,r2,zero
  812498:	10000c1e 	bne	r2,zero,8124cc <alt_file_locked+0xb4>
  81249c:	e13ffd17 	ldw	r4,-12(fp)
  8124a0:	01400304 	movi	r5,12
  8124a4:	08026a00 	call	8026a0 <__mulsi3>
  8124a8:	1007883a 	mov	r3,r2
  8124ac:	00802074 	movhi	r2,129
  8124b0:	10974a04 	addi	r2,r2,23848
  8124b4:	1887883a 	add	r3,r3,r2
  8124b8:	e0bffe17 	ldw	r2,-8(fp)
  8124bc:	18800326 	beq	r3,r2,8124cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8124c0:	00bffcc4 	movi	r2,-13
  8124c4:	e0bfff15 	stw	r2,-4(fp)
  8124c8:	00000a06 	br	8124f4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8124cc:	e0bffd17 	ldw	r2,-12(fp)
  8124d0:	10800044 	addi	r2,r2,1
  8124d4:	e0bffd15 	stw	r2,-12(fp)
  8124d8:	00802074 	movhi	r2,129
  8124dc:	109bd704 	addi	r2,r2,28508
  8124e0:	10800017 	ldw	r2,0(r2)
  8124e4:	1007883a 	mov	r3,r2
  8124e8:	e0bffd17 	ldw	r2,-12(fp)
  8124ec:	18bfd72e 	bgeu	r3,r2,81244c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8124f0:	e03fff15 	stw	zero,-4(fp)
  8124f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8124f8:	e037883a 	mov	sp,fp
  8124fc:	dfc00217 	ldw	ra,8(sp)
  812500:	df000117 	ldw	fp,4(sp)
  812504:	dc000017 	ldw	r16,0(sp)
  812508:	dec00304 	addi	sp,sp,12
  81250c:	f800283a 	ret

00812510 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812510:	defff404 	addi	sp,sp,-48
  812514:	dfc00b15 	stw	ra,44(sp)
  812518:	df000a15 	stw	fp,40(sp)
  81251c:	df000a04 	addi	fp,sp,40
  812520:	e13ffb15 	stw	r4,-20(fp)
  812524:	e17ffc15 	stw	r5,-16(fp)
  812528:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81252c:	00bfffc4 	movi	r2,-1
  812530:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  812534:	00bffb44 	movi	r2,-19
  812538:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81253c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812540:	e13ffb17 	ldw	r4,-20(fp)
  812544:	01402074 	movhi	r5,129
  812548:	295bd504 	addi	r5,r5,28500
  81254c:	08140f80 	call	8140f8 <alt_find_dev>
  812550:	e0bffa15 	stw	r2,-24(fp)
  812554:	e0bffa17 	ldw	r2,-24(fp)
  812558:	1004c03a 	cmpne	r2,r2,zero
  81255c:	1000051e 	bne	r2,zero,812574 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  812560:	e13ffb17 	ldw	r4,-20(fp)
  812564:	081418c0 	call	81418c <alt_find_file>
  812568:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81256c:	00800044 	movi	r2,1
  812570:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  812574:	e0bffa17 	ldw	r2,-24(fp)
  812578:	1005003a 	cmpeq	r2,r2,zero
  81257c:	1000311e 	bne	r2,zero,812644 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  812580:	e13ffa17 	ldw	r4,-24(fp)
  812584:	081433c0 	call	81433c <alt_get_fd>
  812588:	e0bff815 	stw	r2,-32(fp)
  81258c:	e0bff817 	ldw	r2,-32(fp)
  812590:	1004403a 	cmpge	r2,r2,zero
  812594:	1000031e 	bne	r2,zero,8125a4 <open+0x94>
    {
      status = index;
  812598:	e0bff817 	ldw	r2,-32(fp)
  81259c:	e0bff715 	stw	r2,-36(fp)
  8125a0:	00002a06 	br	81264c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  8125a4:	e13ff817 	ldw	r4,-32(fp)
  8125a8:	01400304 	movi	r5,12
  8125ac:	08026a00 	call	8026a0 <__mulsi3>
  8125b0:	1007883a 	mov	r3,r2
  8125b4:	00802074 	movhi	r2,129
  8125b8:	10974a04 	addi	r2,r2,23848
  8125bc:	1885883a 	add	r2,r3,r2
  8125c0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8125c4:	e0fffc17 	ldw	r3,-16(fp)
  8125c8:	00900034 	movhi	r2,16384
  8125cc:	10bfffc4 	addi	r2,r2,-1
  8125d0:	1886703a 	and	r3,r3,r2
  8125d4:	e0bff917 	ldw	r2,-28(fp)
  8125d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8125dc:	e0bff617 	ldw	r2,-40(fp)
  8125e0:	1004c03a 	cmpne	r2,r2,zero
  8125e4:	1000061e 	bne	r2,zero,812600 <open+0xf0>
  8125e8:	e13ff917 	ldw	r4,-28(fp)
  8125ec:	08124180 	call	812418 <alt_file_locked>
  8125f0:	e0bff715 	stw	r2,-36(fp)
  8125f4:	e0bff717 	ldw	r2,-36(fp)
  8125f8:	1004803a 	cmplt	r2,r2,zero
  8125fc:	1000131e 	bne	r2,zero,81264c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  812600:	e0bffa17 	ldw	r2,-24(fp)
  812604:	10800317 	ldw	r2,12(r2)
  812608:	1005003a 	cmpeq	r2,r2,zero
  81260c:	1000091e 	bne	r2,zero,812634 <open+0x124>
  812610:	e0bffa17 	ldw	r2,-24(fp)
  812614:	10800317 	ldw	r2,12(r2)
  812618:	e13ff917 	ldw	r4,-28(fp)
  81261c:	e17ffb17 	ldw	r5,-20(fp)
  812620:	e1bffc17 	ldw	r6,-16(fp)
  812624:	e1fffd17 	ldw	r7,-12(fp)
  812628:	103ee83a 	callr	r2
  81262c:	e0bfff15 	stw	r2,-4(fp)
  812630:	00000106 	br	812638 <open+0x128>
  812634:	e03fff15 	stw	zero,-4(fp)
  812638:	e0bfff17 	ldw	r2,-4(fp)
  81263c:	e0bff715 	stw	r2,-36(fp)
  812640:	00000206 	br	81264c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812644:	00bffb44 	movi	r2,-19
  812648:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81264c:	e0bff717 	ldw	r2,-36(fp)
  812650:	1004403a 	cmpge	r2,r2,zero
  812654:	1000091e 	bne	r2,zero,81267c <open+0x16c>
  {
    alt_release_fd (index);  
  812658:	e13ff817 	ldw	r4,-32(fp)
  81265c:	08128800 	call	812880 <alt_release_fd>
    ALT_ERRNO = -status;
  812660:	081269c0 	call	81269c <alt_get_errno>
  812664:	e0fff717 	ldw	r3,-36(fp)
  812668:	00c7c83a 	sub	r3,zero,r3
  81266c:	10c00015 	stw	r3,0(r2)
    return -1;
  812670:	00bfffc4 	movi	r2,-1
  812674:	e0bffe15 	stw	r2,-8(fp)
  812678:	00000206 	br	812684 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  81267c:	e0bff817 	ldw	r2,-32(fp)
  812680:	e0bffe15 	stw	r2,-8(fp)
  812684:	e0bffe17 	ldw	r2,-8(fp)
}
  812688:	e037883a 	mov	sp,fp
  81268c:	dfc00117 	ldw	ra,4(sp)
  812690:	df000017 	ldw	fp,0(sp)
  812694:	dec00204 	addi	sp,sp,8
  812698:	f800283a 	ret

0081269c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81269c:	defffd04 	addi	sp,sp,-12
  8126a0:	dfc00215 	stw	ra,8(sp)
  8126a4:	df000115 	stw	fp,4(sp)
  8126a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8126ac:	00802074 	movhi	r2,129
  8126b0:	109bd804 	addi	r2,r2,28512
  8126b4:	10800017 	ldw	r2,0(r2)
  8126b8:	1005003a 	cmpeq	r2,r2,zero
  8126bc:	1000061e 	bne	r2,zero,8126d8 <alt_get_errno+0x3c>
  8126c0:	00802074 	movhi	r2,129
  8126c4:	109bd804 	addi	r2,r2,28512
  8126c8:	10800017 	ldw	r2,0(r2)
  8126cc:	103ee83a 	callr	r2
  8126d0:	e0bfff15 	stw	r2,-4(fp)
  8126d4:	00000306 	br	8126e4 <alt_get_errno+0x48>
  8126d8:	008020b4 	movhi	r2,130
  8126dc:	10a2b604 	addi	r2,r2,-29992
  8126e0:	e0bfff15 	stw	r2,-4(fp)
  8126e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8126e8:	e037883a 	mov	sp,fp
  8126ec:	dfc00117 	ldw	ra,4(sp)
  8126f0:	df000017 	ldw	fp,0(sp)
  8126f4:	dec00204 	addi	sp,sp,8
  8126f8:	f800283a 	ret

008126fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8126fc:	defff704 	addi	sp,sp,-36
  812700:	dfc00815 	stw	ra,32(sp)
  812704:	df000715 	stw	fp,28(sp)
  812708:	df000704 	addi	fp,sp,28
  81270c:	e13ffb15 	stw	r4,-20(fp)
  812710:	e17ffc15 	stw	r5,-16(fp)
  812714:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812718:	e0bffb17 	ldw	r2,-20(fp)
  81271c:	1004803a 	cmplt	r2,r2,zero
  812720:	1000091e 	bne	r2,zero,812748 <read+0x4c>
  812724:	e13ffb17 	ldw	r4,-20(fp)
  812728:	01400304 	movi	r5,12
  81272c:	08026a00 	call	8026a0 <__mulsi3>
  812730:	1007883a 	mov	r3,r2
  812734:	00802074 	movhi	r2,129
  812738:	10974a04 	addi	r2,r2,23848
  81273c:	1887883a 	add	r3,r3,r2
  812740:	e0ffff15 	stw	r3,-4(fp)
  812744:	00000106 	br	81274c <read+0x50>
  812748:	e03fff15 	stw	zero,-4(fp)
  81274c:	e0bfff17 	ldw	r2,-4(fp)
  812750:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812754:	e0bffa17 	ldw	r2,-24(fp)
  812758:	1005003a 	cmpeq	r2,r2,zero
  81275c:	1000241e 	bne	r2,zero,8127f0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  812760:	e0bffa17 	ldw	r2,-24(fp)
  812764:	10800217 	ldw	r2,8(r2)
  812768:	108000cc 	andi	r2,r2,3
  81276c:	10800060 	cmpeqi	r2,r2,1
  812770:	10001a1e 	bne	r2,zero,8127dc <read+0xe0>
  812774:	e0bffa17 	ldw	r2,-24(fp)
  812778:	10800017 	ldw	r2,0(r2)
  81277c:	10800517 	ldw	r2,20(r2)
  812780:	1005003a 	cmpeq	r2,r2,zero
  812784:	1000151e 	bne	r2,zero,8127dc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  812788:	e0bffa17 	ldw	r2,-24(fp)
  81278c:	10800017 	ldw	r2,0(r2)
  812790:	10800517 	ldw	r2,20(r2)
  812794:	e17ffc17 	ldw	r5,-16(fp)
  812798:	e1bffd17 	ldw	r6,-12(fp)
  81279c:	e13ffa17 	ldw	r4,-24(fp)
  8127a0:	103ee83a 	callr	r2
  8127a4:	e0bff915 	stw	r2,-28(fp)
  8127a8:	e0bff917 	ldw	r2,-28(fp)
  8127ac:	1004403a 	cmpge	r2,r2,zero
  8127b0:	1000071e 	bne	r2,zero,8127d0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  8127b4:	08128200 	call	812820 <alt_get_errno>
  8127b8:	e0fff917 	ldw	r3,-28(fp)
  8127bc:	00c7c83a 	sub	r3,zero,r3
  8127c0:	10c00015 	stw	r3,0(r2)
          return -1;
  8127c4:	00bfffc4 	movi	r2,-1
  8127c8:	e0bffe15 	stw	r2,-8(fp)
  8127cc:	00000e06 	br	812808 <read+0x10c>
        }
        return rval;
  8127d0:	e0bff917 	ldw	r2,-28(fp)
  8127d4:	e0bffe15 	stw	r2,-8(fp)
  8127d8:	00000b06 	br	812808 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8127dc:	08128200 	call	812820 <alt_get_errno>
  8127e0:	1007883a 	mov	r3,r2
  8127e4:	00800344 	movi	r2,13
  8127e8:	18800015 	stw	r2,0(r3)
  8127ec:	00000406 	br	812800 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8127f0:	08128200 	call	812820 <alt_get_errno>
  8127f4:	1007883a 	mov	r3,r2
  8127f8:	00801444 	movi	r2,81
  8127fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812800:	00bfffc4 	movi	r2,-1
  812804:	e0bffe15 	stw	r2,-8(fp)
  812808:	e0bffe17 	ldw	r2,-8(fp)
}
  81280c:	e037883a 	mov	sp,fp
  812810:	dfc00117 	ldw	ra,4(sp)
  812814:	df000017 	ldw	fp,0(sp)
  812818:	dec00204 	addi	sp,sp,8
  81281c:	f800283a 	ret

00812820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812820:	defffd04 	addi	sp,sp,-12
  812824:	dfc00215 	stw	ra,8(sp)
  812828:	df000115 	stw	fp,4(sp)
  81282c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812830:	00802074 	movhi	r2,129
  812834:	109bd804 	addi	r2,r2,28512
  812838:	10800017 	ldw	r2,0(r2)
  81283c:	1005003a 	cmpeq	r2,r2,zero
  812840:	1000061e 	bne	r2,zero,81285c <alt_get_errno+0x3c>
  812844:	00802074 	movhi	r2,129
  812848:	109bd804 	addi	r2,r2,28512
  81284c:	10800017 	ldw	r2,0(r2)
  812850:	103ee83a 	callr	r2
  812854:	e0bfff15 	stw	r2,-4(fp)
  812858:	00000306 	br	812868 <alt_get_errno+0x48>
  81285c:	008020b4 	movhi	r2,130
  812860:	10a2b604 	addi	r2,r2,-29992
  812864:	e0bfff15 	stw	r2,-4(fp)
  812868:	e0bfff17 	ldw	r2,-4(fp)
}
  81286c:	e037883a 	mov	sp,fp
  812870:	dfc00117 	ldw	ra,4(sp)
  812874:	df000017 	ldw	fp,0(sp)
  812878:	dec00204 	addi	sp,sp,8
  81287c:	f800283a 	ret

00812880 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  812880:	defffc04 	addi	sp,sp,-16
  812884:	dfc00315 	stw	ra,12(sp)
  812888:	df000215 	stw	fp,8(sp)
  81288c:	dc000115 	stw	r16,4(sp)
  812890:	df000104 	addi	fp,sp,4
  812894:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  812898:	e0bfff17 	ldw	r2,-4(fp)
  81289c:	108000d0 	cmplti	r2,r2,3
  8128a0:	10000f1e 	bne	r2,zero,8128e0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  8128a4:	e13fff17 	ldw	r4,-4(fp)
  8128a8:	04002074 	movhi	r16,129
  8128ac:	84174a04 	addi	r16,r16,23848
  8128b0:	01400304 	movi	r5,12
  8128b4:	08026a00 	call	8026a0 <__mulsi3>
  8128b8:	1405883a 	add	r2,r2,r16
  8128bc:	10800204 	addi	r2,r2,8
  8128c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8128c4:	e13fff17 	ldw	r4,-4(fp)
  8128c8:	04002074 	movhi	r16,129
  8128cc:	84174a04 	addi	r16,r16,23848
  8128d0:	01400304 	movi	r5,12
  8128d4:	08026a00 	call	8026a0 <__mulsi3>
  8128d8:	1405883a 	add	r2,r2,r16
  8128dc:	10000015 	stw	zero,0(r2)
  }
}
  8128e0:	e037883a 	mov	sp,fp
  8128e4:	dfc00217 	ldw	ra,8(sp)
  8128e8:	df000117 	ldw	fp,4(sp)
  8128ec:	dc000017 	ldw	r16,0(sp)
  8128f0:	dec00304 	addi	sp,sp,12
  8128f4:	f800283a 	ret

008128f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8128f8:	defff804 	addi	sp,sp,-32
  8128fc:	df000715 	stw	fp,28(sp)
  812900:	df000704 	addi	fp,sp,28
  812904:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812908:	0005303a 	rdctl	r2,status
  81290c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812910:	e0fffb17 	ldw	r3,-20(fp)
  812914:	00bfff84 	movi	r2,-2
  812918:	1884703a 	and	r2,r3,r2
  81291c:	1001703a 	wrctl	status,r2
  
  return context;
  812920:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  812924:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  812928:	d0a00d17 	ldw	r2,-32716(gp)
  81292c:	10c000c4 	addi	r3,r2,3
  812930:	00bfff04 	movi	r2,-4
  812934:	1884703a 	and	r2,r3,r2
  812938:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81293c:	d0e00d17 	ldw	r3,-32716(gp)
  812940:	e0bffe17 	ldw	r2,-8(fp)
  812944:	1887883a 	add	r3,r3,r2
  812948:	00804034 	movhi	r2,256
  81294c:	10800004 	addi	r2,r2,0
  812950:	10c0072e 	bgeu	r2,r3,812970 <sbrk+0x78>
  812954:	e0bffd17 	ldw	r2,-12(fp)
  812958:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81295c:	e0bffa17 	ldw	r2,-24(fp)
  812960:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  812964:	00bfffc4 	movi	r2,-1
  812968:	e0bfff15 	stw	r2,-4(fp)
  81296c:	00000c06 	br	8129a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  812970:	d0a00d17 	ldw	r2,-32716(gp)
  812974:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  812978:	d0e00d17 	ldw	r3,-32716(gp)
  81297c:	e0bffe17 	ldw	r2,-8(fp)
  812980:	1885883a 	add	r2,r3,r2
  812984:	d0a00d15 	stw	r2,-32716(gp)
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	e0bff915 	stw	r2,-28(fp)
  812990:	e0bff917 	ldw	r2,-28(fp)
  812994:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  812998:	e0bffc17 	ldw	r2,-16(fp)
  81299c:	e0bfff15 	stw	r2,-4(fp)
  8129a0:	e0bfff17 	ldw	r2,-4(fp)
} 
  8129a4:	e037883a 	mov	sp,fp
  8129a8:	df000017 	ldw	fp,0(sp)
  8129ac:	dec00104 	addi	sp,sp,4
  8129b0:	f800283a 	ret

008129b4 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  8129b4:	defffb04 	addi	sp,sp,-20
  8129b8:	dfc00415 	stw	ra,16(sp)
  8129bc:	df000315 	stw	fp,12(sp)
  8129c0:	df000304 	addi	fp,sp,12
  8129c4:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8129c8:	008020b4 	movhi	r2,130
  8129cc:	10a2c404 	addi	r2,r2,-29936
  8129d0:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  8129d4:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8129d8:	008020b4 	movhi	r2,130
  8129dc:	10a2c304 	addi	r2,r2,-29940
  8129e0:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8129e4:	1004c03a 	cmpne	r2,r2,zero
  8129e8:	1000061e 	bne	r2,zero,812a04 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
  8129ec:	0812a480 	call	812a48 <alt_get_errno>
  8129f0:	1007883a 	mov	r3,r2
  8129f4:	00801604 	movi	r2,88
  8129f8:	18800015 	stw	r2,0(r3)
    return 0;
  8129fc:	e03fff15 	stw	zero,-4(fp)
  812a00:	00000b06 	br	812a30 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  812a04:	e0bffe17 	ldw	r2,-8(fp)
  812a08:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  812a0c:	e0fffe17 	ldw	r3,-8(fp)
  812a10:	e0bffd17 	ldw	r2,-12(fp)
  812a14:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
  812a18:	e0bffe17 	ldw	r2,-8(fp)
  812a1c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  812a20:	e0bffe17 	ldw	r2,-8(fp)
  812a24:	10000315 	stw	zero,12(r2)

  return ticks;
  812a28:	e0bffd17 	ldw	r2,-12(fp)
  812a2c:	e0bfff15 	stw	r2,-4(fp)
  812a30:	e0bfff17 	ldw	r2,-4(fp)
}
  812a34:	e037883a 	mov	sp,fp
  812a38:	dfc00117 	ldw	ra,4(sp)
  812a3c:	df000017 	ldw	fp,0(sp)
  812a40:	dec00204 	addi	sp,sp,8
  812a44:	f800283a 	ret

00812a48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812a48:	defffd04 	addi	sp,sp,-12
  812a4c:	dfc00215 	stw	ra,8(sp)
  812a50:	df000115 	stw	fp,4(sp)
  812a54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812a58:	00802074 	movhi	r2,129
  812a5c:	109bd804 	addi	r2,r2,28512
  812a60:	10800017 	ldw	r2,0(r2)
  812a64:	1005003a 	cmpeq	r2,r2,zero
  812a68:	1000061e 	bne	r2,zero,812a84 <alt_get_errno+0x3c>
  812a6c:	00802074 	movhi	r2,129
  812a70:	109bd804 	addi	r2,r2,28512
  812a74:	10800017 	ldw	r2,0(r2)
  812a78:	103ee83a 	callr	r2
  812a7c:	e0bfff15 	stw	r2,-4(fp)
  812a80:	00000306 	br	812a90 <alt_get_errno+0x48>
  812a84:	008020b4 	movhi	r2,130
  812a88:	10a2b604 	addi	r2,r2,-29992
  812a8c:	e0bfff15 	stw	r2,-4(fp)
  812a90:	e0bfff17 	ldw	r2,-4(fp)
}
  812a94:	e037883a 	mov	sp,fp
  812a98:	dfc00117 	ldw	ra,4(sp)
  812a9c:	df000017 	ldw	fp,0(sp)
  812aa0:	dec00204 	addi	sp,sp,8
  812aa4:	f800283a 	ret

00812aa8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  812aa8:	defff704 	addi	sp,sp,-36
  812aac:	dfc00815 	stw	ra,32(sp)
  812ab0:	df000715 	stw	fp,28(sp)
  812ab4:	df000704 	addi	fp,sp,28
  812ab8:	e13ffb15 	stw	r4,-20(fp)
  812abc:	e17ffc15 	stw	r5,-16(fp)
  812ac0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812ac4:	e0bffb17 	ldw	r2,-20(fp)
  812ac8:	1004803a 	cmplt	r2,r2,zero
  812acc:	1000091e 	bne	r2,zero,812af4 <write+0x4c>
  812ad0:	e13ffb17 	ldw	r4,-20(fp)
  812ad4:	01400304 	movi	r5,12
  812ad8:	08026a00 	call	8026a0 <__mulsi3>
  812adc:	1007883a 	mov	r3,r2
  812ae0:	00802074 	movhi	r2,129
  812ae4:	10974a04 	addi	r2,r2,23848
  812ae8:	1887883a 	add	r3,r3,r2
  812aec:	e0ffff15 	stw	r3,-4(fp)
  812af0:	00000106 	br	812af8 <write+0x50>
  812af4:	e03fff15 	stw	zero,-4(fp)
  812af8:	e0bfff17 	ldw	r2,-4(fp)
  812afc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812b00:	e0bffa17 	ldw	r2,-24(fp)
  812b04:	1005003a 	cmpeq	r2,r2,zero
  812b08:	1000241e 	bne	r2,zero,812b9c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  812b0c:	e0bffa17 	ldw	r2,-24(fp)
  812b10:	10800217 	ldw	r2,8(r2)
  812b14:	108000cc 	andi	r2,r2,3
  812b18:	1005003a 	cmpeq	r2,r2,zero
  812b1c:	10001a1e 	bne	r2,zero,812b88 <write+0xe0>
  812b20:	e0bffa17 	ldw	r2,-24(fp)
  812b24:	10800017 	ldw	r2,0(r2)
  812b28:	10800617 	ldw	r2,24(r2)
  812b2c:	1005003a 	cmpeq	r2,r2,zero
  812b30:	1000151e 	bne	r2,zero,812b88 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  812b34:	e0bffa17 	ldw	r2,-24(fp)
  812b38:	10800017 	ldw	r2,0(r2)
  812b3c:	10800617 	ldw	r2,24(r2)
  812b40:	e17ffc17 	ldw	r5,-16(fp)
  812b44:	e1bffd17 	ldw	r6,-12(fp)
  812b48:	e13ffa17 	ldw	r4,-24(fp)
  812b4c:	103ee83a 	callr	r2
  812b50:	e0bff915 	stw	r2,-28(fp)
  812b54:	e0bff917 	ldw	r2,-28(fp)
  812b58:	1004403a 	cmpge	r2,r2,zero
  812b5c:	1000071e 	bne	r2,zero,812b7c <write+0xd4>
      {
        ALT_ERRNO = -rval;
  812b60:	0812bcc0 	call	812bcc <alt_get_errno>
  812b64:	e0fff917 	ldw	r3,-28(fp)
  812b68:	00c7c83a 	sub	r3,zero,r3
  812b6c:	10c00015 	stw	r3,0(r2)
        return -1;
  812b70:	00bfffc4 	movi	r2,-1
  812b74:	e0bffe15 	stw	r2,-8(fp)
  812b78:	00000e06 	br	812bb4 <write+0x10c>
      }
      return rval;
  812b7c:	e0bff917 	ldw	r2,-28(fp)
  812b80:	e0bffe15 	stw	r2,-8(fp)
  812b84:	00000b06 	br	812bb4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  812b88:	0812bcc0 	call	812bcc <alt_get_errno>
  812b8c:	1007883a 	mov	r3,r2
  812b90:	00800344 	movi	r2,13
  812b94:	18800015 	stw	r2,0(r3)
  812b98:	00000406 	br	812bac <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  812b9c:	0812bcc0 	call	812bcc <alt_get_errno>
  812ba0:	1007883a 	mov	r3,r2
  812ba4:	00801444 	movi	r2,81
  812ba8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812bac:	00bfffc4 	movi	r2,-1
  812bb0:	e0bffe15 	stw	r2,-8(fp)
  812bb4:	e0bffe17 	ldw	r2,-8(fp)
}
  812bb8:	e037883a 	mov	sp,fp
  812bbc:	dfc00117 	ldw	ra,4(sp)
  812bc0:	df000017 	ldw	fp,0(sp)
  812bc4:	dec00204 	addi	sp,sp,8
  812bc8:	f800283a 	ret

00812bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812bcc:	defffd04 	addi	sp,sp,-12
  812bd0:	dfc00215 	stw	ra,8(sp)
  812bd4:	df000115 	stw	fp,4(sp)
  812bd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812bdc:	00802074 	movhi	r2,129
  812be0:	109bd804 	addi	r2,r2,28512
  812be4:	10800017 	ldw	r2,0(r2)
  812be8:	1005003a 	cmpeq	r2,r2,zero
  812bec:	1000061e 	bne	r2,zero,812c08 <alt_get_errno+0x3c>
  812bf0:	00802074 	movhi	r2,129
  812bf4:	109bd804 	addi	r2,r2,28512
  812bf8:	10800017 	ldw	r2,0(r2)
  812bfc:	103ee83a 	callr	r2
  812c00:	e0bfff15 	stw	r2,-4(fp)
  812c04:	00000306 	br	812c14 <alt_get_errno+0x48>
  812c08:	008020b4 	movhi	r2,130
  812c0c:	10a2b604 	addi	r2,r2,-29992
  812c10:	e0bfff15 	stw	r2,-4(fp)
  812c14:	e0bfff17 	ldw	r2,-4(fp)
}
  812c18:	e037883a 	mov	sp,fp
  812c1c:	dfc00117 	ldw	ra,4(sp)
  812c20:	df000017 	ldw	fp,0(sp)
  812c24:	dec00204 	addi	sp,sp,8
  812c28:	f800283a 	ret

00812c2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812c2c:	defffd04 	addi	sp,sp,-12
  812c30:	dfc00215 	stw	ra,8(sp)
  812c34:	df000115 	stw	fp,4(sp)
  812c38:	df000104 	addi	fp,sp,4
  812c3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  812c40:	08149fc0 	call	8149fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  812c44:	00800044 	movi	r2,1
  812c48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812c4c:	e037883a 	mov	sp,fp
  812c50:	dfc00117 	ldw	ra,4(sp)
  812c54:	df000017 	ldw	fp,0(sp)
  812c58:	dec00204 	addi	sp,sp,8
  812c5c:	f800283a 	ret

00812c60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  812c60:	defffe04 	addi	sp,sp,-8
  812c64:	dfc00115 	stw	ra,4(sp)
  812c68:	df000015 	stw	fp,0(sp)
  812c6c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  812c70:	01004474 	movhi	r4,273
  812c74:	21040804 	addi	r4,r4,4128
  812c78:	000b883a 	mov	r5,zero
  812c7c:	01800044 	movi	r6,1
  812c80:	01c0fa04 	movi	r7,1000
  812c84:	08138440 	call	813844 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  812c88:	00c020b4 	movhi	r3,130
  812c8c:	18e2c004 	addi	r3,r3,-29952
  812c90:	00804474 	movhi	r2,273
  812c94:	10840004 	addi	r2,r2,4096
  812c98:	18800015 	stw	r2,0(r3)
  812c9c:	00c020b4 	movhi	r3,130
  812ca0:	18e2c104 	addi	r3,r3,-29948
  812ca4:	0080bef4 	movhi	r2,763
  812ca8:	10bc2004 	addi	r2,r2,-3968
  812cac:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  812cb0:	01002074 	movhi	r4,129
  812cb4:	2117b404 	addi	r4,r4,24272
  812cb8:	000b883a 	mov	r5,zero
  812cbc:	01800404 	movi	r6,16
  812cc0:	0812e700 	call	812e70 <altera_avalon_jtag_uart_init>
  812cc4:	01002074 	movhi	r4,129
  812cc8:	2117aa04 	addi	r4,r4,24232
  812ccc:	0812cf00 	call	812cf0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  812cd0:	01002074 	movhi	r4,129
  812cd4:	211bc204 	addi	r4,r4,28424
  812cd8:	08142ac0 	call	8142ac <alt_fs_reg>
}
  812cdc:	e037883a 	mov	sp,fp
  812ce0:	dfc00117 	ldw	ra,4(sp)
  812ce4:	df000017 	ldw	fp,0(sp)
  812ce8:	dec00204 	addi	sp,sp,8
  812cec:	f800283a 	ret

00812cf0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812cf0:	defffd04 	addi	sp,sp,-12
  812cf4:	dfc00215 	stw	ra,8(sp)
  812cf8:	df000115 	stw	fp,4(sp)
  812cfc:	df000104 	addi	fp,sp,4
  812d00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812d04:	e13fff17 	ldw	r4,-4(fp)
  812d08:	01402074 	movhi	r5,129
  812d0c:	295bd504 	addi	r5,r5,28500
  812d10:	0813fe40 	call	813fe4 <alt_dev_llist_insert>
}
  812d14:	e037883a 	mov	sp,fp
  812d18:	dfc00117 	ldw	ra,4(sp)
  812d1c:	df000017 	ldw	fp,0(sp)
  812d20:	dec00204 	addi	sp,sp,8
  812d24:	f800283a 	ret

00812d28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812d28:	defffa04 	addi	sp,sp,-24
  812d2c:	dfc00515 	stw	ra,20(sp)
  812d30:	df000415 	stw	fp,16(sp)
  812d34:	df000404 	addi	fp,sp,16
  812d38:	e13ffd15 	stw	r4,-12(fp)
  812d3c:	e17ffe15 	stw	r5,-8(fp)
  812d40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812d44:	e0bffd17 	ldw	r2,-12(fp)
  812d48:	10800017 	ldw	r2,0(r2)
  812d4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812d50:	e0bffc17 	ldw	r2,-16(fp)
  812d54:	11000a04 	addi	r4,r2,40
  812d58:	e0bffd17 	ldw	r2,-12(fp)
  812d5c:	11c00217 	ldw	r7,8(r2)
  812d60:	e17ffe17 	ldw	r5,-8(fp)
  812d64:	e1bfff17 	ldw	r6,-4(fp)
  812d68:	08133700 	call	813370 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812d6c:	e037883a 	mov	sp,fp
  812d70:	dfc00117 	ldw	ra,4(sp)
  812d74:	df000017 	ldw	fp,0(sp)
  812d78:	dec00204 	addi	sp,sp,8
  812d7c:	f800283a 	ret

00812d80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812d80:	defffa04 	addi	sp,sp,-24
  812d84:	dfc00515 	stw	ra,20(sp)
  812d88:	df000415 	stw	fp,16(sp)
  812d8c:	df000404 	addi	fp,sp,16
  812d90:	e13ffd15 	stw	r4,-12(fp)
  812d94:	e17ffe15 	stw	r5,-8(fp)
  812d98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812d9c:	e0bffd17 	ldw	r2,-12(fp)
  812da0:	10800017 	ldw	r2,0(r2)
  812da4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812da8:	e0bffc17 	ldw	r2,-16(fp)
  812dac:	11000a04 	addi	r4,r2,40
  812db0:	e0bffd17 	ldw	r2,-12(fp)
  812db4:	11c00217 	ldw	r7,8(r2)
  812db8:	e17ffe17 	ldw	r5,-8(fp)
  812dbc:	e1bfff17 	ldw	r6,-4(fp)
  812dc0:	08135940 	call	813594 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812dc4:	e037883a 	mov	sp,fp
  812dc8:	dfc00117 	ldw	ra,4(sp)
  812dcc:	df000017 	ldw	fp,0(sp)
  812dd0:	dec00204 	addi	sp,sp,8
  812dd4:	f800283a 	ret

00812dd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812dd8:	defffc04 	addi	sp,sp,-16
  812ddc:	dfc00315 	stw	ra,12(sp)
  812de0:	df000215 	stw	fp,8(sp)
  812de4:	df000204 	addi	fp,sp,8
  812de8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812dec:	e0bfff17 	ldw	r2,-4(fp)
  812df0:	10800017 	ldw	r2,0(r2)
  812df4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812df8:	e0bffe17 	ldw	r2,-8(fp)
  812dfc:	11000a04 	addi	r4,r2,40
  812e00:	e0bfff17 	ldw	r2,-4(fp)
  812e04:	11400217 	ldw	r5,8(r2)
  812e08:	08132080 	call	813208 <altera_avalon_jtag_uart_close>
}
  812e0c:	e037883a 	mov	sp,fp
  812e10:	dfc00117 	ldw	ra,4(sp)
  812e14:	df000017 	ldw	fp,0(sp)
  812e18:	dec00204 	addi	sp,sp,8
  812e1c:	f800283a 	ret

00812e20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812e20:	defffa04 	addi	sp,sp,-24
  812e24:	dfc00515 	stw	ra,20(sp)
  812e28:	df000415 	stw	fp,16(sp)
  812e2c:	df000404 	addi	fp,sp,16
  812e30:	e13ffd15 	stw	r4,-12(fp)
  812e34:	e17ffe15 	stw	r5,-8(fp)
  812e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812e3c:	e0bffd17 	ldw	r2,-12(fp)
  812e40:	10800017 	ldw	r2,0(r2)
  812e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812e48:	e0bffc17 	ldw	r2,-16(fp)
  812e4c:	11000a04 	addi	r4,r2,40
  812e50:	e17ffe17 	ldw	r5,-8(fp)
  812e54:	e1bfff17 	ldw	r6,-4(fp)
  812e58:	081327c0 	call	81327c <altera_avalon_jtag_uart_ioctl>
}
  812e5c:	e037883a 	mov	sp,fp
  812e60:	dfc00117 	ldw	ra,4(sp)
  812e64:	df000017 	ldw	fp,0(sp)
  812e68:	dec00204 	addi	sp,sp,8
  812e6c:	f800283a 	ret

00812e70 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  812e70:	defffa04 	addi	sp,sp,-24
  812e74:	dfc00515 	stw	ra,20(sp)
  812e78:	df000415 	stw	fp,16(sp)
  812e7c:	df000404 	addi	fp,sp,16
  812e80:	e13ffd15 	stw	r4,-12(fp)
  812e84:	e17ffe15 	stw	r5,-8(fp)
  812e88:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812e8c:	e0fffd17 	ldw	r3,-12(fp)
  812e90:	00800044 	movi	r2,1
  812e94:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812e98:	e0bffd17 	ldw	r2,-12(fp)
  812e9c:	10800017 	ldw	r2,0(r2)
  812ea0:	11000104 	addi	r4,r2,4
  812ea4:	e0bffd17 	ldw	r2,-12(fp)
  812ea8:	10800817 	ldw	r2,32(r2)
  812eac:	1007883a 	mov	r3,r2
  812eb0:	2005883a 	mov	r2,r4
  812eb4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  812eb8:	e13ffe17 	ldw	r4,-8(fp)
  812ebc:	e17fff17 	ldw	r5,-4(fp)
  812ec0:	d8000015 	stw	zero,0(sp)
  812ec4:	01802074 	movhi	r6,129
  812ec8:	318bcc04 	addi	r6,r6,12080
  812ecc:	e1fffd17 	ldw	r7,-12(fp)
  812ed0:	081443c0 	call	81443c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812ed4:	e0bffd17 	ldw	r2,-12(fp)
  812ed8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812edc:	e0bffd17 	ldw	r2,-12(fp)
  812ee0:	11000204 	addi	r4,r2,8
  812ee4:	008020b4 	movhi	r2,130
  812ee8:	10a2c304 	addi	r2,r2,-29940
  812eec:	10800017 	ldw	r2,0(r2)
  812ef0:	100b883a 	mov	r5,r2
  812ef4:	01802074 	movhi	r6,129
  812ef8:	318c5604 	addi	r6,r6,12632
  812efc:	e1fffd17 	ldw	r7,-12(fp)
  812f00:	0813e740 	call	813e74 <alt_alarm_start>
  812f04:	1004403a 	cmpge	r2,r2,zero
  812f08:	1000041e 	bne	r2,zero,812f1c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812f0c:	e0fffd17 	ldw	r3,-12(fp)
  812f10:	00a00034 	movhi	r2,32768
  812f14:	10bfffc4 	addi	r2,r2,-1
  812f18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812f1c:	e037883a 	mov	sp,fp
  812f20:	dfc00117 	ldw	ra,4(sp)
  812f24:	df000017 	ldw	fp,0(sp)
  812f28:	dec00204 	addi	sp,sp,8
  812f2c:	f800283a 	ret

00812f30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  812f30:	defff804 	addi	sp,sp,-32
  812f34:	df000715 	stw	fp,28(sp)
  812f38:	df000704 	addi	fp,sp,28
  812f3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  812f40:	e0bfff17 	ldw	r2,-4(fp)
  812f44:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  812f48:	e0bffe17 	ldw	r2,-8(fp)
  812f4c:	10800017 	ldw	r2,0(r2)
  812f50:	e0bffd15 	stw	r2,-12(fp)
  812f54:	00000006 	br	812f58 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812f58:	e0bffd17 	ldw	r2,-12(fp)
  812f5c:	10800104 	addi	r2,r2,4
  812f60:	10800037 	ldwio	r2,0(r2)
  812f64:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  812f68:	e0bffc17 	ldw	r2,-16(fp)
  812f6c:	1080c00c 	andi	r2,r2,768
  812f70:	1005003a 	cmpeq	r2,r2,zero
  812f74:	1000741e 	bne	r2,zero,813148 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  812f78:	e0bffc17 	ldw	r2,-16(fp)
  812f7c:	1080400c 	andi	r2,r2,256
  812f80:	1005003a 	cmpeq	r2,r2,zero
  812f84:	1000351e 	bne	r2,zero,81305c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  812f88:	00800074 	movhi	r2,1
  812f8c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812f90:	e0bffe17 	ldw	r2,-8(fp)
  812f94:	10800a17 	ldw	r2,40(r2)
  812f98:	10800044 	addi	r2,r2,1
  812f9c:	1081ffcc 	andi	r2,r2,2047
  812fa0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  812fa4:	e0bffe17 	ldw	r2,-8(fp)
  812fa8:	10c00b17 	ldw	r3,44(r2)
  812fac:	e0bffa17 	ldw	r2,-24(fp)
  812fb0:	18801626 	beq	r3,r2,81300c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  812fb4:	e0bffd17 	ldw	r2,-12(fp)
  812fb8:	10800037 	ldwio	r2,0(r2)
  812fbc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  812fc0:	e0bffb17 	ldw	r2,-20(fp)
  812fc4:	10a0000c 	andi	r2,r2,32768
  812fc8:	1005003a 	cmpeq	r2,r2,zero
  812fcc:	10000f1e 	bne	r2,zero,81300c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  812fd0:	e0bffe17 	ldw	r2,-8(fp)
  812fd4:	10c00a17 	ldw	r3,40(r2)
  812fd8:	e0bffb17 	ldw	r2,-20(fp)
  812fdc:	1009883a 	mov	r4,r2
  812fe0:	e0bffe17 	ldw	r2,-8(fp)
  812fe4:	1885883a 	add	r2,r3,r2
  812fe8:	10800e04 	addi	r2,r2,56
  812fec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812ff0:	e0bffe17 	ldw	r2,-8(fp)
  812ff4:	10800a17 	ldw	r2,40(r2)
  812ff8:	10800044 	addi	r2,r2,1
  812ffc:	10c1ffcc 	andi	r3,r2,2047
  813000:	e0bffe17 	ldw	r2,-8(fp)
  813004:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813008:	003fe106 	br	812f90 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81300c:	e0bffb17 	ldw	r2,-20(fp)
  813010:	10bfffec 	andhi	r2,r2,65535
  813014:	1005003a 	cmpeq	r2,r2,zero
  813018:	1000101e 	bne	r2,zero,81305c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81301c:	e0bffe17 	ldw	r2,-8(fp)
  813020:	10c00817 	ldw	r3,32(r2)
  813024:	00bfff84 	movi	r2,-2
  813028:	1886703a 	and	r3,r3,r2
  81302c:	e0bffe17 	ldw	r2,-8(fp)
  813030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813034:	e0bffd17 	ldw	r2,-12(fp)
  813038:	11000104 	addi	r4,r2,4
  81303c:	e0bffe17 	ldw	r2,-8(fp)
  813040:	10800817 	ldw	r2,32(r2)
  813044:	1007883a 	mov	r3,r2
  813048:	2005883a 	mov	r2,r4
  81304c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813050:	e0bffd17 	ldw	r2,-12(fp)
  813054:	10800104 	addi	r2,r2,4
  813058:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81305c:	e0bffc17 	ldw	r2,-16(fp)
  813060:	1080800c 	andi	r2,r2,512
  813064:	1005003a 	cmpeq	r2,r2,zero
  813068:	103fbb1e 	bne	r2,zero,812f58 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81306c:	e0bffc17 	ldw	r2,-16(fp)
  813070:	10bfffec 	andhi	r2,r2,65535
  813074:	1004d43a 	srli	r2,r2,16
  813078:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81307c:	00001506 	br	8130d4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813080:	e13ffd17 	ldw	r4,-12(fp)
  813084:	e0bffe17 	ldw	r2,-8(fp)
  813088:	10c00d17 	ldw	r3,52(r2)
  81308c:	e0bffe17 	ldw	r2,-8(fp)
  813090:	1885883a 	add	r2,r3,r2
  813094:	10820e04 	addi	r2,r2,2104
  813098:	10800003 	ldbu	r2,0(r2)
  81309c:	10c03fcc 	andi	r3,r2,255
  8130a0:	18c0201c 	xori	r3,r3,128
  8130a4:	18ffe004 	addi	r3,r3,-128
  8130a8:	2005883a 	mov	r2,r4
  8130ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8130b0:	e0bffe17 	ldw	r2,-8(fp)
  8130b4:	10800d17 	ldw	r2,52(r2)
  8130b8:	10800044 	addi	r2,r2,1
  8130bc:	10c1ffcc 	andi	r3,r2,2047
  8130c0:	e0bffe17 	ldw	r2,-8(fp)
  8130c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8130c8:	e0bff917 	ldw	r2,-28(fp)
  8130cc:	10bfffc4 	addi	r2,r2,-1
  8130d0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8130d4:	e0bff917 	ldw	r2,-28(fp)
  8130d8:	1005003a 	cmpeq	r2,r2,zero
  8130dc:	1000051e 	bne	r2,zero,8130f4 <altera_avalon_jtag_uart_irq+0x1c4>
  8130e0:	e0bffe17 	ldw	r2,-8(fp)
  8130e4:	10c00d17 	ldw	r3,52(r2)
  8130e8:	e0bffe17 	ldw	r2,-8(fp)
  8130ec:	10800c17 	ldw	r2,48(r2)
  8130f0:	18bfe31e 	bne	r3,r2,813080 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8130f4:	e0bff917 	ldw	r2,-28(fp)
  8130f8:	1005003a 	cmpeq	r2,r2,zero
  8130fc:	103f961e 	bne	r2,zero,812f58 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813100:	e0bffe17 	ldw	r2,-8(fp)
  813104:	10c00817 	ldw	r3,32(r2)
  813108:	00bfff44 	movi	r2,-3
  81310c:	1886703a 	and	r3,r3,r2
  813110:	e0bffe17 	ldw	r2,-8(fp)
  813114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813118:	e0bffe17 	ldw	r2,-8(fp)
  81311c:	10800017 	ldw	r2,0(r2)
  813120:	11000104 	addi	r4,r2,4
  813124:	e0bffe17 	ldw	r2,-8(fp)
  813128:	10800817 	ldw	r2,32(r2)
  81312c:	1007883a 	mov	r3,r2
  813130:	2005883a 	mov	r2,r4
  813134:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813138:	e0bffd17 	ldw	r2,-12(fp)
  81313c:	10800104 	addi	r2,r2,4
  813140:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813144:	003f8406 	br	812f58 <altera_avalon_jtag_uart_irq+0x28>
}
  813148:	e037883a 	mov	sp,fp
  81314c:	df000017 	ldw	fp,0(sp)
  813150:	dec00104 	addi	sp,sp,4
  813154:	f800283a 	ret

00813158 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813158:	defffc04 	addi	sp,sp,-16
  81315c:	df000315 	stw	fp,12(sp)
  813160:	df000304 	addi	fp,sp,12
  813164:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813168:	e0bfff17 	ldw	r2,-4(fp)
  81316c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813170:	e0bffe17 	ldw	r2,-8(fp)
  813174:	10800017 	ldw	r2,0(r2)
  813178:	10800104 	addi	r2,r2,4
  81317c:	10800037 	ldwio	r2,0(r2)
  813180:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813184:	e0bffd17 	ldw	r2,-12(fp)
  813188:	1081000c 	andi	r2,r2,1024
  81318c:	1005003a 	cmpeq	r2,r2,zero
  813190:	10000c1e 	bne	r2,zero,8131c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813194:	e0bffe17 	ldw	r2,-8(fp)
  813198:	10800017 	ldw	r2,0(r2)
  81319c:	11000104 	addi	r4,r2,4
  8131a0:	e0bffe17 	ldw	r2,-8(fp)
  8131a4:	10800817 	ldw	r2,32(r2)
  8131a8:	10810014 	ori	r2,r2,1024
  8131ac:	1007883a 	mov	r3,r2
  8131b0:	2005883a 	mov	r2,r4
  8131b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8131b8:	e0bffe17 	ldw	r2,-8(fp)
  8131bc:	10000915 	stw	zero,36(r2)
  8131c0:	00000a06 	br	8131ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8131c4:	e0bffe17 	ldw	r2,-8(fp)
  8131c8:	10c00917 	ldw	r3,36(r2)
  8131cc:	00a00034 	movhi	r2,32768
  8131d0:	10bfff04 	addi	r2,r2,-4
  8131d4:	10c00536 	bltu	r2,r3,8131ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  8131d8:	e0bffe17 	ldw	r2,-8(fp)
  8131dc:	10800917 	ldw	r2,36(r2)
  8131e0:	10c00044 	addi	r3,r2,1
  8131e4:	e0bffe17 	ldw	r2,-8(fp)
  8131e8:	10c00915 	stw	r3,36(r2)
  8131ec:	008020b4 	movhi	r2,130
  8131f0:	10a2c304 	addi	r2,r2,-29940
  8131f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8131f8:	e037883a 	mov	sp,fp
  8131fc:	df000017 	ldw	fp,0(sp)
  813200:	dec00104 	addi	sp,sp,4
  813204:	f800283a 	ret

00813208 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813208:	defffc04 	addi	sp,sp,-16
  81320c:	df000315 	stw	fp,12(sp)
  813210:	df000304 	addi	fp,sp,12
  813214:	e13ffd15 	stw	r4,-12(fp)
  813218:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81321c:	00000706 	br	81323c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813220:	e0bffe17 	ldw	r2,-8(fp)
  813224:	1090000c 	andi	r2,r2,16384
  813228:	1005003a 	cmpeq	r2,r2,zero
  81322c:	1000031e 	bne	r2,zero,81323c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813230:	00bffd44 	movi	r2,-11
  813234:	e0bfff15 	stw	r2,-4(fp)
  813238:	00000b06 	br	813268 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81323c:	e0bffd17 	ldw	r2,-12(fp)
  813240:	10c00d17 	ldw	r3,52(r2)
  813244:	e0bffd17 	ldw	r2,-12(fp)
  813248:	10800c17 	ldw	r2,48(r2)
  81324c:	18800526 	beq	r3,r2,813264 <altera_avalon_jtag_uart_close+0x5c>
  813250:	e0bffd17 	ldw	r2,-12(fp)
  813254:	10c00917 	ldw	r3,36(r2)
  813258:	e0bffd17 	ldw	r2,-12(fp)
  81325c:	10800117 	ldw	r2,4(r2)
  813260:	18bfef36 	bltu	r3,r2,813220 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813264:	e03fff15 	stw	zero,-4(fp)
  813268:	e0bfff17 	ldw	r2,-4(fp)
}
  81326c:	e037883a 	mov	sp,fp
  813270:	df000017 	ldw	fp,0(sp)
  813274:	dec00104 	addi	sp,sp,4
  813278:	f800283a 	ret

0081327c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81327c:	defff804 	addi	sp,sp,-32
  813280:	df000715 	stw	fp,28(sp)
  813284:	df000704 	addi	fp,sp,28
  813288:	e13ffb15 	stw	r4,-20(fp)
  81328c:	e17ffc15 	stw	r5,-16(fp)
  813290:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  813294:	00bff9c4 	movi	r2,-25
  813298:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81329c:	e0bffc17 	ldw	r2,-16(fp)
  8132a0:	e0bfff15 	stw	r2,-4(fp)
  8132a4:	e0ffff17 	ldw	r3,-4(fp)
  8132a8:	189a8060 	cmpeqi	r2,r3,27137
  8132ac:	1000041e 	bne	r2,zero,8132c0 <altera_avalon_jtag_uart_ioctl+0x44>
  8132b0:	e0ffff17 	ldw	r3,-4(fp)
  8132b4:	189a80a0 	cmpeqi	r2,r3,27138
  8132b8:	10001b1e 	bne	r2,zero,813328 <altera_avalon_jtag_uart_ioctl+0xac>
  8132bc:	00002706 	br	81335c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8132c0:	e0bffb17 	ldw	r2,-20(fp)
  8132c4:	10c00117 	ldw	r3,4(r2)
  8132c8:	00a00034 	movhi	r2,32768
  8132cc:	10bfffc4 	addi	r2,r2,-1
  8132d0:	18802226 	beq	r3,r2,81335c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8132d4:	e0bffd17 	ldw	r2,-12(fp)
  8132d8:	10800017 	ldw	r2,0(r2)
  8132dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8132e0:	e0bff917 	ldw	r2,-28(fp)
  8132e4:	10800090 	cmplti	r2,r2,2
  8132e8:	1000071e 	bne	r2,zero,813308 <altera_avalon_jtag_uart_ioctl+0x8c>
  8132ec:	e0fff917 	ldw	r3,-28(fp)
  8132f0:	00a00034 	movhi	r2,32768
  8132f4:	10bfffc4 	addi	r2,r2,-1
  8132f8:	18800326 	beq	r3,r2,813308 <altera_avalon_jtag_uart_ioctl+0x8c>
  8132fc:	e0bff917 	ldw	r2,-28(fp)
  813300:	e0bffe15 	stw	r2,-8(fp)
  813304:	00000306 	br	813314 <altera_avalon_jtag_uart_ioctl+0x98>
  813308:	00e00034 	movhi	r3,32768
  81330c:	18ffff84 	addi	r3,r3,-2
  813310:	e0fffe15 	stw	r3,-8(fp)
  813314:	e0bffb17 	ldw	r2,-20(fp)
  813318:	e0fffe17 	ldw	r3,-8(fp)
  81331c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813320:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813324:	00000d06 	br	81335c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813328:	e0bffb17 	ldw	r2,-20(fp)
  81332c:	10c00117 	ldw	r3,4(r2)
  813330:	00a00034 	movhi	r2,32768
  813334:	10bfffc4 	addi	r2,r2,-1
  813338:	18800826 	beq	r3,r2,81335c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81333c:	e13ffd17 	ldw	r4,-12(fp)
  813340:	e0bffb17 	ldw	r2,-20(fp)
  813344:	10c00917 	ldw	r3,36(r2)
  813348:	e0bffb17 	ldw	r2,-20(fp)
  81334c:	10800117 	ldw	r2,4(r2)
  813350:	1885803a 	cmpltu	r2,r3,r2
  813354:	20800015 	stw	r2,0(r4)
      rc = 0;
  813358:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81335c:	e0bffa17 	ldw	r2,-24(fp)
}
  813360:	e037883a 	mov	sp,fp
  813364:	df000017 	ldw	fp,0(sp)
  813368:	dec00104 	addi	sp,sp,4
  81336c:	f800283a 	ret

00813370 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813370:	defff204 	addi	sp,sp,-56
  813374:	dfc00d15 	stw	ra,52(sp)
  813378:	df000c15 	stw	fp,48(sp)
  81337c:	df000c04 	addi	fp,sp,48
  813380:	e13ffb15 	stw	r4,-20(fp)
  813384:	e17ffc15 	stw	r5,-16(fp)
  813388:	e1bffd15 	stw	r6,-12(fp)
  81338c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813390:	e0bffc17 	ldw	r2,-16(fp)
  813394:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813398:	00004806 	br	8134bc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81339c:	e0bffb17 	ldw	r2,-20(fp)
  8133a0:	10800a17 	ldw	r2,40(r2)
  8133a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8133a8:	e0bffb17 	ldw	r2,-20(fp)
  8133ac:	10800b17 	ldw	r2,44(r2)
  8133b0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  8133b4:	e0fff717 	ldw	r3,-36(fp)
  8133b8:	e0bff617 	ldw	r2,-40(fp)
  8133bc:	18800536 	bltu	r3,r2,8133d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8133c0:	e0bff717 	ldw	r2,-36(fp)
  8133c4:	e0fff617 	ldw	r3,-40(fp)
  8133c8:	10c5c83a 	sub	r2,r2,r3
  8133cc:	e0bff815 	stw	r2,-32(fp)
  8133d0:	00000406 	br	8133e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8133d4:	00820004 	movi	r2,2048
  8133d8:	e0fff617 	ldw	r3,-40(fp)
  8133dc:	10c5c83a 	sub	r2,r2,r3
  8133e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8133e4:	e0bff817 	ldw	r2,-32(fp)
  8133e8:	1005003a 	cmpeq	r2,r2,zero
  8133ec:	10001f1e 	bne	r2,zero,81346c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  8133f0:	e0fffd17 	ldw	r3,-12(fp)
  8133f4:	e0bff817 	ldw	r2,-32(fp)
  8133f8:	1880022e 	bgeu	r3,r2,813404 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  8133fc:	e0bffd17 	ldw	r2,-12(fp)
  813400:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813404:	e0bffb17 	ldw	r2,-20(fp)
  813408:	10c00e04 	addi	r3,r2,56
  81340c:	e0bff617 	ldw	r2,-40(fp)
  813410:	1887883a 	add	r3,r3,r2
  813414:	e0bffa17 	ldw	r2,-24(fp)
  813418:	1009883a 	mov	r4,r2
  81341c:	180b883a 	mov	r5,r3
  813420:	e1bff817 	ldw	r6,-32(fp)
  813424:	0804f780 	call	804f78 <memcpy>
      ptr   += n;
  813428:	e0fff817 	ldw	r3,-32(fp)
  81342c:	e0bffa17 	ldw	r2,-24(fp)
  813430:	10c5883a 	add	r2,r2,r3
  813434:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  813438:	e0fffd17 	ldw	r3,-12(fp)
  81343c:	e0bff817 	ldw	r2,-32(fp)
  813440:	1885c83a 	sub	r2,r3,r2
  813444:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813448:	e0fff617 	ldw	r3,-40(fp)
  81344c:	e0bff817 	ldw	r2,-32(fp)
  813450:	1885883a 	add	r2,r3,r2
  813454:	10c1ffcc 	andi	r3,r2,2047
  813458:	e0bffb17 	ldw	r2,-20(fp)
  81345c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  813460:	e0bffd17 	ldw	r2,-12(fp)
  813464:	10800048 	cmpgei	r2,r2,1
  813468:	103fcc1e 	bne	r2,zero,81339c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81346c:	e0fffa17 	ldw	r3,-24(fp)
  813470:	e0bffc17 	ldw	r2,-16(fp)
  813474:	1880141e 	bne	r3,r2,8134c8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813478:	e0bffe17 	ldw	r2,-8(fp)
  81347c:	1090000c 	andi	r2,r2,16384
  813480:	1004c03a 	cmpne	r2,r2,zero
  813484:	1000101e 	bne	r2,zero,8134c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813488:	e0bffb17 	ldw	r2,-20(fp)
  81348c:	10c00a17 	ldw	r3,40(r2)
  813490:	e0bff717 	ldw	r2,-36(fp)
  813494:	1880051e 	bne	r3,r2,8134ac <altera_avalon_jtag_uart_read+0x13c>
  813498:	e0bffb17 	ldw	r2,-20(fp)
  81349c:	10c00917 	ldw	r3,36(r2)
  8134a0:	e0bffb17 	ldw	r2,-20(fp)
  8134a4:	10800117 	ldw	r2,4(r2)
  8134a8:	18bff736 	bltu	r3,r2,813488 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8134ac:	e0bffb17 	ldw	r2,-20(fp)
  8134b0:	10c00a17 	ldw	r3,40(r2)
  8134b4:	e0bff717 	ldw	r2,-36(fp)
  8134b8:	18800326 	beq	r3,r2,8134c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8134bc:	e0bffd17 	ldw	r2,-12(fp)
  8134c0:	10800048 	cmpgei	r2,r2,1
  8134c4:	103fb51e 	bne	r2,zero,81339c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8134c8:	e0fffa17 	ldw	r3,-24(fp)
  8134cc:	e0bffc17 	ldw	r2,-16(fp)
  8134d0:	18801926 	beq	r3,r2,813538 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8134d4:	0005303a 	rdctl	r2,status
  8134d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8134dc:	e0fff517 	ldw	r3,-44(fp)
  8134e0:	00bfff84 	movi	r2,-2
  8134e4:	1884703a 	and	r2,r3,r2
  8134e8:	1001703a 	wrctl	status,r2
  
  return context;
  8134ec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8134f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8134f4:	e0bffb17 	ldw	r2,-20(fp)
  8134f8:	10800817 	ldw	r2,32(r2)
  8134fc:	10c00054 	ori	r3,r2,1
  813500:	e0bffb17 	ldw	r2,-20(fp)
  813504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813508:	e0bffb17 	ldw	r2,-20(fp)
  81350c:	10800017 	ldw	r2,0(r2)
  813510:	11000104 	addi	r4,r2,4
  813514:	e0bffb17 	ldw	r2,-20(fp)
  813518:	10800817 	ldw	r2,32(r2)
  81351c:	1007883a 	mov	r3,r2
  813520:	2005883a 	mov	r2,r4
  813524:	10c00035 	stwio	r3,0(r2)
  813528:	e0bff917 	ldw	r2,-28(fp)
  81352c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813530:	e0bff417 	ldw	r2,-48(fp)
  813534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813538:	e0fffa17 	ldw	r3,-24(fp)
  81353c:	e0bffc17 	ldw	r2,-16(fp)
  813540:	18800526 	beq	r3,r2,813558 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  813544:	e0fffa17 	ldw	r3,-24(fp)
  813548:	e0bffc17 	ldw	r2,-16(fp)
  81354c:	1887c83a 	sub	r3,r3,r2
  813550:	e0ffff15 	stw	r3,-4(fp)
  813554:	00000906 	br	81357c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  813558:	e0bffe17 	ldw	r2,-8(fp)
  81355c:	1090000c 	andi	r2,r2,16384
  813560:	1005003a 	cmpeq	r2,r2,zero
  813564:	1000031e 	bne	r2,zero,813574 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  813568:	00bffd44 	movi	r2,-11
  81356c:	e0bfff15 	stw	r2,-4(fp)
  813570:	00000206 	br	81357c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  813574:	00bffec4 	movi	r2,-5
  813578:	e0bfff15 	stw	r2,-4(fp)
  81357c:	e0bfff17 	ldw	r2,-4(fp)
}
  813580:	e037883a 	mov	sp,fp
  813584:	dfc00117 	ldw	ra,4(sp)
  813588:	df000017 	ldw	fp,0(sp)
  81358c:	dec00204 	addi	sp,sp,8
  813590:	f800283a 	ret

00813594 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  813594:	defff204 	addi	sp,sp,-56
  813598:	dfc00d15 	stw	ra,52(sp)
  81359c:	df000c15 	stw	fp,48(sp)
  8135a0:	df000c04 	addi	fp,sp,48
  8135a4:	e13ffb15 	stw	r4,-20(fp)
  8135a8:	e17ffc15 	stw	r5,-16(fp)
  8135ac:	e1bffd15 	stw	r6,-12(fp)
  8135b0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8135b4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8135b8:	e0bffc17 	ldw	r2,-16(fp)
  8135bc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8135c0:	00003a06 	br	8136ac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8135c4:	e0bffb17 	ldw	r2,-20(fp)
  8135c8:	10800c17 	ldw	r2,48(r2)
  8135cc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8135d0:	e0bffb17 	ldw	r2,-20(fp)
  8135d4:	10800d17 	ldw	r2,52(r2)
  8135d8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8135dc:	e0fffa17 	ldw	r3,-24(fp)
  8135e0:	e0bff917 	ldw	r2,-28(fp)
  8135e4:	1880062e 	bgeu	r3,r2,813600 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8135e8:	e0fff917 	ldw	r3,-28(fp)
  8135ec:	e0bffa17 	ldw	r2,-24(fp)
  8135f0:	1885c83a 	sub	r2,r3,r2
  8135f4:	10bfffc4 	addi	r2,r2,-1
  8135f8:	e0bff815 	stw	r2,-32(fp)
  8135fc:	00000c06 	br	813630 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  813600:	e0bff917 	ldw	r2,-28(fp)
  813604:	1005003a 	cmpeq	r2,r2,zero
  813608:	1000051e 	bne	r2,zero,813620 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81360c:	00820004 	movi	r2,2048
  813610:	e0fffa17 	ldw	r3,-24(fp)
  813614:	10c5c83a 	sub	r2,r2,r3
  813618:	e0bff815 	stw	r2,-32(fp)
  81361c:	00000406 	br	813630 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813620:	0081ffc4 	movi	r2,2047
  813624:	e0fffa17 	ldw	r3,-24(fp)
  813628:	10c5c83a 	sub	r2,r2,r3
  81362c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813630:	e0bff817 	ldw	r2,-32(fp)
  813634:	1005003a 	cmpeq	r2,r2,zero
  813638:	10001f1e 	bne	r2,zero,8136b8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81363c:	e0fffd17 	ldw	r3,-12(fp)
  813640:	e0bff817 	ldw	r2,-32(fp)
  813644:	1880022e 	bgeu	r3,r2,813650 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  813648:	e0bffd17 	ldw	r2,-12(fp)
  81364c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  813650:	e0bffb17 	ldw	r2,-20(fp)
  813654:	10c20e04 	addi	r3,r2,2104
  813658:	e0bffa17 	ldw	r2,-24(fp)
  81365c:	1885883a 	add	r2,r3,r2
  813660:	e0fffc17 	ldw	r3,-16(fp)
  813664:	1009883a 	mov	r4,r2
  813668:	180b883a 	mov	r5,r3
  81366c:	e1bff817 	ldw	r6,-32(fp)
  813670:	0804f780 	call	804f78 <memcpy>
      ptr   += n;
  813674:	e0fff817 	ldw	r3,-32(fp)
  813678:	e0bffc17 	ldw	r2,-16(fp)
  81367c:	10c5883a 	add	r2,r2,r3
  813680:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  813684:	e0fffd17 	ldw	r3,-12(fp)
  813688:	e0bff817 	ldw	r2,-32(fp)
  81368c:	1885c83a 	sub	r2,r3,r2
  813690:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813694:	e0fffa17 	ldw	r3,-24(fp)
  813698:	e0bff817 	ldw	r2,-32(fp)
  81369c:	1885883a 	add	r2,r3,r2
  8136a0:	10c1ffcc 	andi	r3,r2,2047
  8136a4:	e0bffb17 	ldw	r2,-20(fp)
  8136a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8136ac:	e0bffd17 	ldw	r2,-12(fp)
  8136b0:	10800048 	cmpgei	r2,r2,1
  8136b4:	103fc31e 	bne	r2,zero,8135c4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8136b8:	0005303a 	rdctl	r2,status
  8136bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8136c0:	e0fff517 	ldw	r3,-44(fp)
  8136c4:	00bfff84 	movi	r2,-2
  8136c8:	1884703a 	and	r2,r3,r2
  8136cc:	1001703a 	wrctl	status,r2
  
  return context;
  8136d0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8136d4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8136d8:	e0bffb17 	ldw	r2,-20(fp)
  8136dc:	10800817 	ldw	r2,32(r2)
  8136e0:	10c00094 	ori	r3,r2,2
  8136e4:	e0bffb17 	ldw	r2,-20(fp)
  8136e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8136ec:	e0bffb17 	ldw	r2,-20(fp)
  8136f0:	10800017 	ldw	r2,0(r2)
  8136f4:	11000104 	addi	r4,r2,4
  8136f8:	e0bffb17 	ldw	r2,-20(fp)
  8136fc:	10800817 	ldw	r2,32(r2)
  813700:	1007883a 	mov	r3,r2
  813704:	2005883a 	mov	r2,r4
  813708:	10c00035 	stwio	r3,0(r2)
  81370c:	e0bff717 	ldw	r2,-36(fp)
  813710:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813714:	e0bff417 	ldw	r2,-48(fp)
  813718:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81371c:	e0bffd17 	ldw	r2,-12(fp)
  813720:	10800050 	cmplti	r2,r2,1
  813724:	1000111e 	bne	r2,zero,81376c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  813728:	e0bffe17 	ldw	r2,-8(fp)
  81372c:	1090000c 	andi	r2,r2,16384
  813730:	1004c03a 	cmpne	r2,r2,zero
  813734:	1000101e 	bne	r2,zero,813778 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813738:	e0bffb17 	ldw	r2,-20(fp)
  81373c:	10c00d17 	ldw	r3,52(r2)
  813740:	e0bff917 	ldw	r2,-28(fp)
  813744:	1880051e 	bne	r3,r2,81375c <altera_avalon_jtag_uart_write+0x1c8>
  813748:	e0bffb17 	ldw	r2,-20(fp)
  81374c:	10c00917 	ldw	r3,36(r2)
  813750:	e0bffb17 	ldw	r2,-20(fp)
  813754:	10800117 	ldw	r2,4(r2)
  813758:	18bff736 	bltu	r3,r2,813738 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81375c:	e0bffb17 	ldw	r2,-20(fp)
  813760:	10c00d17 	ldw	r3,52(r2)
  813764:	e0bff917 	ldw	r2,-28(fp)
  813768:	18800326 	beq	r3,r2,813778 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  81376c:	e0bffd17 	ldw	r2,-12(fp)
  813770:	10800048 	cmpgei	r2,r2,1
  813774:	103fcd1e 	bne	r2,zero,8136ac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  813778:	e0fffc17 	ldw	r3,-16(fp)
  81377c:	e0bff617 	ldw	r2,-40(fp)
  813780:	18800526 	beq	r3,r2,813798 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  813784:	e0fffc17 	ldw	r3,-16(fp)
  813788:	e0bff617 	ldw	r2,-40(fp)
  81378c:	1887c83a 	sub	r3,r3,r2
  813790:	e0ffff15 	stw	r3,-4(fp)
  813794:	00000906 	br	8137bc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  813798:	e0bffe17 	ldw	r2,-8(fp)
  81379c:	1090000c 	andi	r2,r2,16384
  8137a0:	1005003a 	cmpeq	r2,r2,zero
  8137a4:	1000031e 	bne	r2,zero,8137b4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8137a8:	00bffd44 	movi	r2,-11
  8137ac:	e0bfff15 	stw	r2,-4(fp)
  8137b0:	00000206 	br	8137bc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8137b4:	00bffec4 	movi	r2,-5
  8137b8:	e0bfff15 	stw	r2,-4(fp)
  8137bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8137c0:	e037883a 	mov	sp,fp
  8137c4:	dfc00117 	ldw	ra,4(sp)
  8137c8:	df000017 	ldw	fp,0(sp)
  8137cc:	dec00204 	addi	sp,sp,8
  8137d0:	f800283a 	ret

008137d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8137d4:	defffa04 	addi	sp,sp,-24
  8137d8:	dfc00515 	stw	ra,20(sp)
  8137dc:	df000415 	stw	fp,16(sp)
  8137e0:	df000404 	addi	fp,sp,16
  8137e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8137e8:	e0bfff17 	ldw	r2,-4(fp)
  8137ec:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8137f0:	e0bfff17 	ldw	r2,-4(fp)
  8137f4:	10800104 	addi	r2,r2,4
  8137f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137fc:	0005303a 	rdctl	r2,status
  813800:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813804:	e0fffd17 	ldw	r3,-12(fp)
  813808:	00bfff84 	movi	r2,-2
  81380c:	1884703a 	and	r2,r3,r2
  813810:	1001703a 	wrctl	status,r2
  
  return context;
  813814:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813818:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81381c:	08148f00 	call	8148f0 <alt_tick>
  813820:	e0bffe17 	ldw	r2,-8(fp)
  813824:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813828:	e0bffc17 	ldw	r2,-16(fp)
  81382c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813830:	e037883a 	mov	sp,fp
  813834:	dfc00117 	ldw	ra,4(sp)
  813838:	df000017 	ldw	fp,0(sp)
  81383c:	dec00204 	addi	sp,sp,8
  813840:	f800283a 	ret

00813844 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813844:	defff804 	addi	sp,sp,-32
  813848:	dfc00715 	stw	ra,28(sp)
  81384c:	df000615 	stw	fp,24(sp)
  813850:	df000604 	addi	fp,sp,24
  813854:	e13ffc15 	stw	r4,-16(fp)
  813858:	e17ffd15 	stw	r5,-12(fp)
  81385c:	e1bffe15 	stw	r6,-8(fp)
  813860:	e1ffff15 	stw	r7,-4(fp)
  813864:	e0bfff17 	ldw	r2,-4(fp)
  813868:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81386c:	008020b4 	movhi	r2,130
  813870:	10a2c304 	addi	r2,r2,-29940
  813874:	10800017 	ldw	r2,0(r2)
  813878:	1004c03a 	cmpne	r2,r2,zero
  81387c:	1000041e 	bne	r2,zero,813890 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813880:	00c020b4 	movhi	r3,130
  813884:	18e2c304 	addi	r3,r3,-29940
  813888:	e0bffb17 	ldw	r2,-20(fp)
  81388c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813890:	e0bffc17 	ldw	r2,-16(fp)
  813894:	10800104 	addi	r2,r2,4
  813898:	1007883a 	mov	r3,r2
  81389c:	008001c4 	movi	r2,7
  8138a0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8138a4:	d8000015 	stw	zero,0(sp)
  8138a8:	e13ffd17 	ldw	r4,-12(fp)
  8138ac:	e17ffe17 	ldw	r5,-8(fp)
  8138b0:	01802074 	movhi	r6,129
  8138b4:	318df504 	addi	r6,r6,14292
  8138b8:	e1fffc17 	ldw	r7,-16(fp)
  8138bc:	081443c0 	call	81443c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8138c0:	e037883a 	mov	sp,fp
  8138c4:	dfc00117 	ldw	ra,4(sp)
  8138c8:	df000017 	ldw	fp,0(sp)
  8138cc:	dec00204 	addi	sp,sp,8
  8138d0:	f800283a 	ret

008138d4 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  8138d4:	deffee04 	addi	sp,sp,-72
  8138d8:	df001115 	stw	fp,68(sp)
  8138dc:	df001104 	addi	fp,sp,68
  8138e0:	e13ffc15 	stw	r4,-16(fp)
  8138e4:	e17ffd15 	stw	r5,-12(fp)
  8138e8:	e1bffe15 	stw	r6,-8(fp)
  8138ec:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  8138f0:	e0bffc17 	ldw	r2,-16(fp)
  8138f4:	10800017 	ldw	r2,0(r2)
  8138f8:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  8138fc:	e0bffb17 	ldw	r2,-20(fp)
  813900:	10800217 	ldw	r2,8(r2)
  813904:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  813908:	e0bff117 	ldw	r2,-60(fp)
  81390c:	10bfffc4 	addi	r2,r2,-1
  813910:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
  813914:	e0bff217 	ldw	r2,-56(fp)
  813918:	10800044 	addi	r2,r2,1
  81391c:	e0bff215 	stw	r2,-56(fp)
  813920:	e0bff217 	ldw	r2,-56(fp)
  813924:	10800003 	ldbu	r2,0(r2)
  813928:	10803fcc 	andi	r2,r2,255
  81392c:	1080201c 	xori	r2,r2,128
  813930:	10bfe004 	addi	r2,r2,-128
  813934:	1004c03a 	cmpne	r2,r2,zero
  813938:	103ff61e 	bne	r2,zero,813914 <alt_hostfs_open+0x40>
    ;

  return ptr - string;
  81393c:	e0fff217 	ldw	r3,-56(fp)
  813940:	e0bff117 	ldw	r2,-60(fp)
  813944:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  813948:	1007883a 	mov	r3,r2
  81394c:	e0bffd17 	ldw	r2,-12(fp)
  813950:	1885883a 	add	r2,r3,r2
  813954:	10800044 	addi	r2,r2,1
  813958:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  81395c:	d0a00e04 	addi	r2,gp,-32712
  813960:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
  813964:	e0bffd17 	ldw	r2,-12(fp)
  813968:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
  81396c:	e0bffe17 	ldw	r2,-8(fp)
  813970:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
  813974:	e0bfff17 	ldw	r2,-4(fp)
  813978:	e0bff415 	stw	r2,-48(fp)
  81397c:	e0bffd17 	ldw	r2,-12(fp)
  813980:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  813984:	e0bfef17 	ldw	r2,-68(fp)
  813988:	10bfffc4 	addi	r2,r2,-1
  81398c:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
  813990:	e0bff017 	ldw	r2,-64(fp)
  813994:	10800044 	addi	r2,r2,1
  813998:	e0bff015 	stw	r2,-64(fp)
  81399c:	e0bff017 	ldw	r2,-64(fp)
  8139a0:	10800003 	ldbu	r2,0(r2)
  8139a4:	10803fcc 	andi	r2,r2,255
  8139a8:	1080201c 	xori	r2,r2,128
  8139ac:	10bfe004 	addi	r2,r2,-128
  8139b0:	1004c03a 	cmpne	r2,r2,zero
  8139b4:	103ff61e 	bne	r2,zero,813990 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
  8139b8:	e0fff017 	ldw	r3,-64(fp)
  8139bc:	e0bfef17 	ldw	r2,-68(fp)
  8139c0:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  8139c4:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
  8139c8:	e13ff617 	ldw	r4,-40(fp)
  8139cc:	e17ff517 	ldw	r5,-44(fp)
  8139d0:	e1bff417 	ldw	r6,-48(fp)
  8139d4:	e1fff317 	ldw	r7,-52(fp)
  8139d8:	e0fff717 	ldw	r3,-36(fp)
  8139dc:	003da07a 	break	1
  8139e0:	e0bff815 	stw	r2,-32(fp)
  8139e4:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
  8139e8:	e0bff817 	ldw	r2,-32(fp)
  8139ec:	e0bff915 	stw	r2,-28(fp)
  error = r3;
  8139f0:	e0bff717 	ldw	r2,-36(fp)
  8139f4:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
  8139f8:	e0bffa17 	ldw	r2,-24(fp)
  8139fc:	1004c03a 	cmpne	r2,r2,zero
  813a00:	1000031e 	bne	r2,zero,813a10 <alt_hostfs_open+0x13c>
    fd->priv = handle;
  813a04:	e0fff917 	ldw	r3,-28(fp)
  813a08:	e0bffc17 	ldw	r2,-16(fp)
  813a0c:	10c00115 	stw	r3,4(r2)

  return -error;
  813a10:	e0bffa17 	ldw	r2,-24(fp)
  813a14:	0085c83a 	sub	r2,zero,r2
}
  813a18:	e037883a 	mov	sp,fp
  813a1c:	df000017 	ldw	fp,0(sp)
  813a20:	dec00104 	addi	sp,sp,4
  813a24:	f800283a 	ret

00813a28 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  813a28:	defffb04 	addi	sp,sp,-20
  813a2c:	df000415 	stw	fp,16(sp)
  813a30:	df000404 	addi	fp,sp,16
  813a34:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
  813a38:	d0a01104 	addi	r2,gp,-32700
  813a3c:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
  813a40:	e0bfff17 	ldw	r2,-4(fp)
  813a44:	10800117 	ldw	r2,4(r2)
  813a48:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
  813a4c:	e13ffc17 	ldw	r4,-16(fp)
  813a50:	e0fffd17 	ldw	r3,-12(fp)
  813a54:	003da07a 	break	1
  813a58:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
  813a5c:	e0bffd17 	ldw	r2,-12(fp)
  813a60:	e0bffe15 	stw	r2,-8(fp)

  return -error;
  813a64:	e0bffe17 	ldw	r2,-8(fp)
  813a68:	0085c83a 	sub	r2,zero,r2
}
  813a6c:	e037883a 	mov	sp,fp
  813a70:	df000017 	ldw	fp,0(sp)
  813a74:	dec00104 	addi	sp,sp,4
  813a78:	f800283a 	ret

00813a7c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  813a7c:	defff404 	addi	sp,sp,-48
  813a80:	df000b15 	stw	fp,44(sp)
  813a84:	df000b04 	addi	fp,sp,44
  813a88:	e13ffc15 	stw	r4,-16(fp)
  813a8c:	e17ffd15 	stw	r5,-12(fp)
  813a90:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813a94:	d0a01404 	addi	r2,gp,-32688
  813a98:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813a9c:	e0bffc17 	ldw	r2,-16(fp)
  813aa0:	10800117 	ldw	r2,4(r2)
  813aa4:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813aa8:	e0bffd17 	ldw	r2,-12(fp)
  813aac:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813ab0:	e0bffe17 	ldw	r2,-8(fp)
  813ab4:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813ab8:	e13ff717 	ldw	r4,-36(fp)
  813abc:	e17ff617 	ldw	r5,-40(fp)
  813ac0:	e1bff517 	ldw	r6,-44(fp)
  813ac4:	e0fff817 	ldw	r3,-32(fp)
  813ac8:	003da07a 	break	1
  813acc:	e0bff915 	stw	r2,-28(fp)
  813ad0:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813ad4:	e0bff917 	ldw	r2,-28(fp)
  813ad8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813adc:	e0bff817 	ldw	r2,-32(fp)
  813ae0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813ae4:	e0bffb17 	ldw	r2,-20(fp)
  813ae8:	1005003a 	cmpeq	r2,r2,zero
  813aec:	1000041e 	bne	r2,zero,813b00 <alt_hostfs_read+0x84>
  813af0:	e0bffb17 	ldw	r2,-20(fp)
  813af4:	0085c83a 	sub	r2,zero,r2
  813af8:	e0bfff15 	stw	r2,-4(fp)
  813afc:	00000206 	br	813b08 <alt_hostfs_read+0x8c>
  813b00:	e0bffa17 	ldw	r2,-24(fp)
  813b04:	e0bfff15 	stw	r2,-4(fp)
  813b08:	e0bfff17 	ldw	r2,-4(fp)
}
  813b0c:	e037883a 	mov	sp,fp
  813b10:	df000017 	ldw	fp,0(sp)
  813b14:	dec00104 	addi	sp,sp,4
  813b18:	f800283a 	ret

00813b1c <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  813b1c:	defff404 	addi	sp,sp,-48
  813b20:	df000b15 	stw	fp,44(sp)
  813b24:	df000b04 	addi	fp,sp,44
  813b28:	e13ffc15 	stw	r4,-16(fp)
  813b2c:	e17ffd15 	stw	r5,-12(fp)
  813b30:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813b34:	d0a01704 	addi	r2,gp,-32676
  813b38:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813b3c:	e0bffc17 	ldw	r2,-16(fp)
  813b40:	10800117 	ldw	r2,4(r2)
  813b44:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813b48:	e0bffd17 	ldw	r2,-12(fp)
  813b4c:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813b50:	e0bffe17 	ldw	r2,-8(fp)
  813b54:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813b58:	e13ff717 	ldw	r4,-36(fp)
  813b5c:	e17ff617 	ldw	r5,-40(fp)
  813b60:	e1bff517 	ldw	r6,-44(fp)
  813b64:	e0fff817 	ldw	r3,-32(fp)
  813b68:	003da07a 	break	1
  813b6c:	e0bff915 	stw	r2,-28(fp)
  813b70:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813b74:	e0bff917 	ldw	r2,-28(fp)
  813b78:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813b7c:	e0bff817 	ldw	r2,-32(fp)
  813b80:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813b84:	e0bffb17 	ldw	r2,-20(fp)
  813b88:	1005003a 	cmpeq	r2,r2,zero
  813b8c:	1000041e 	bne	r2,zero,813ba0 <alt_hostfs_write+0x84>
  813b90:	e0bffb17 	ldw	r2,-20(fp)
  813b94:	0085c83a 	sub	r2,zero,r2
  813b98:	e0bfff15 	stw	r2,-4(fp)
  813b9c:	00000206 	br	813ba8 <alt_hostfs_write+0x8c>
  813ba0:	e0bffa17 	ldw	r2,-24(fp)
  813ba4:	e0bfff15 	stw	r2,-4(fp)
  813ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  813bac:	e037883a 	mov	sp,fp
  813bb0:	df000017 	ldw	fp,0(sp)
  813bb4:	dec00104 	addi	sp,sp,4
  813bb8:	f800283a 	ret

00813bbc <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  813bbc:	defff404 	addi	sp,sp,-48
  813bc0:	df000b15 	stw	fp,44(sp)
  813bc4:	df000b04 	addi	fp,sp,44
  813bc8:	e13ffc15 	stw	r4,-16(fp)
  813bcc:	e17ffd15 	stw	r5,-12(fp)
  813bd0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  813bd4:	d0a01a04 	addi	r2,gp,-32664
  813bd8:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813bdc:	e0bffc17 	ldw	r2,-16(fp)
  813be0:	10800117 	ldw	r2,4(r2)
  813be4:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
  813be8:	e0bffd17 	ldw	r2,-12(fp)
  813bec:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
  813bf0:	e0bffe17 	ldw	r2,-8(fp)
  813bf4:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813bf8:	e13ff717 	ldw	r4,-36(fp)
  813bfc:	e17ff617 	ldw	r5,-40(fp)
  813c00:	e1bff517 	ldw	r6,-44(fp)
  813c04:	e0fff817 	ldw	r3,-32(fp)
  813c08:	003da07a 	break	1
  813c0c:	e0bff915 	stw	r2,-28(fp)
  813c10:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  813c14:	e0bff917 	ldw	r2,-28(fp)
  813c18:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813c1c:	e0bff817 	ldw	r2,-32(fp)
  813c20:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  813c24:	e0bffb17 	ldw	r2,-20(fp)
  813c28:	1005003a 	cmpeq	r2,r2,zero
  813c2c:	1000041e 	bne	r2,zero,813c40 <alt_hostfs_seek+0x84>
  813c30:	e0bffb17 	ldw	r2,-20(fp)
  813c34:	0085c83a 	sub	r2,zero,r2
  813c38:	e0bfff15 	stw	r2,-4(fp)
  813c3c:	00000206 	br	813c48 <alt_hostfs_seek+0x8c>
  813c40:	e0bffa17 	ldw	r2,-24(fp)
  813c44:	e0bfff15 	stw	r2,-4(fp)
  813c48:	e0bfff17 	ldw	r2,-4(fp)
}
  813c4c:	e037883a 	mov	sp,fp
  813c50:	df000017 	ldw	fp,0(sp)
  813c54:	dec00104 	addi	sp,sp,4
  813c58:	f800283a 	ret

00813c5c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  813c5c:	deffe404 	addi	sp,sp,-112
  813c60:	df001b15 	stw	fp,108(sp)
  813c64:	df001b04 	addi	fp,sp,108
  813c68:	e13ffd15 	stw	r4,-12(fp)
  813c6c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
  813c70:	d0a01d04 	addi	r2,gp,-32652
  813c74:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
  813c78:	e0bffd17 	ldw	r2,-12(fp)
  813c7c:	10800117 	ldw	r2,4(r2)
  813c80:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
  813c84:	e0bfed04 	addi	r2,fp,-76
  813c88:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
  813c8c:	e13fe817 	ldw	r4,-96(fp)
  813c90:	e17fe717 	ldw	r5,-100(fp)
  813c94:	e0ffe917 	ldw	r3,-92(fp)
  813c98:	003da07a 	break	1
  813c9c:	e0bfea15 	stw	r2,-88(fp)
  813ca0:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
  813ca4:	e0bfea17 	ldw	r2,-88(fp)
  813ca8:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  813cac:	e0bfe917 	ldw	r2,-92(fp)
  813cb0:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
  813cb4:	e0bfec17 	ldw	r2,-80(fp)
  813cb8:	1004c03a 	cmpne	r2,r2,zero
  813cbc:	1000651e 	bne	r2,zero,813e54 <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  813cc0:	e0bfed04 	addi	r2,fp,-76
  813cc4:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  813cc8:	e0bfe617 	ldw	r2,-104(fp)
  813ccc:	10801004 	addi	r2,r2,64
  813cd0:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813cd4:	00001806 	br	813d38 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  813cd8:	e0bfe617 	ldw	r2,-104(fp)
  813cdc:	10800017 	ldw	r2,0(r2)
  813ce0:	10bfc02c 	andhi	r2,r2,65280
  813ce4:	1006d63a 	srli	r3,r2,24
  813ce8:	e0bfe617 	ldw	r2,-104(fp)
  813cec:	10800017 	ldw	r2,0(r2)
  813cf0:	10803fec 	andhi	r2,r2,255
  813cf4:	1004d23a 	srli	r2,r2,8
  813cf8:	1886b03a 	or	r3,r3,r2
  813cfc:	e0bfe617 	ldw	r2,-104(fp)
  813d00:	10800017 	ldw	r2,0(r2)
  813d04:	10bfc00c 	andi	r2,r2,65280
  813d08:	1004923a 	slli	r2,r2,8
  813d0c:	1886b03a 	or	r3,r3,r2
  813d10:	e0bfe617 	ldw	r2,-104(fp)
  813d14:	10800017 	ldw	r2,0(r2)
  813d18:	10803fcc 	andi	r2,r2,255
  813d1c:	1004963a 	slli	r2,r2,24
  813d20:	1886b03a 	or	r3,r3,r2
  813d24:	e0bfe617 	ldw	r2,-104(fp)
  813d28:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  813d2c:	e0bfe617 	ldw	r2,-104(fp)
  813d30:	10800104 	addi	r2,r2,4
  813d34:	e0bfe615 	stw	r2,-104(fp)
  813d38:	e0ffe617 	ldw	r3,-104(fp)
  813d3c:	e0bfe517 	ldw	r2,-108(fp)
  813d40:	18bfe536 	bltu	r3,r2,813cd8 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  813d44:	e0bffe17 	ldw	r2,-8(fp)
  813d48:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  813d4c:	e0bfe617 	ldw	r2,-104(fp)
  813d50:	10800f04 	addi	r2,r2,60
  813d54:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813d58:	00000506 	br	813d70 <alt_hostfs_fstat+0x114>
      *ptr = 0;
  813d5c:	e0bfe617 	ldw	r2,-104(fp)
  813d60:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  813d64:	e0bfe617 	ldw	r2,-104(fp)
  813d68:	10800104 	addi	r2,r2,4
  813d6c:	e0bfe615 	stw	r2,-104(fp)
  813d70:	e0ffe617 	ldw	r3,-104(fp)
  813d74:	e0bfe517 	ldw	r2,-108(fp)
  813d78:	18bff836 	bltu	r3,r2,813d5c <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  813d7c:	e0bfed17 	ldw	r2,-76(fp)
  813d80:	1007883a 	mov	r3,r2
  813d84:	e0bffe17 	ldw	r2,-8(fp)
  813d88:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  813d8c:	e0bfee17 	ldw	r2,-72(fp)
  813d90:	1007883a 	mov	r3,r2
  813d94:	e0bffe17 	ldw	r2,-8(fp)
  813d98:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  813d9c:	e0ffef17 	ldw	r3,-68(fp)
  813da0:	e0bffe17 	ldw	r2,-8(fp)
  813da4:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  813da8:	e0bff017 	ldw	r2,-64(fp)
  813dac:	1007883a 	mov	r3,r2
  813db0:	e0bffe17 	ldw	r2,-8(fp)
  813db4:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  813db8:	e0bff117 	ldw	r2,-60(fp)
  813dbc:	1007883a 	mov	r3,r2
  813dc0:	e0bffe17 	ldw	r2,-8(fp)
  813dc4:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  813dc8:	e0bff217 	ldw	r2,-56(fp)
  813dcc:	1007883a 	mov	r3,r2
  813dd0:	e0bffe17 	ldw	r2,-8(fp)
  813dd4:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  813dd8:	e0bff317 	ldw	r2,-52(fp)
  813ddc:	1007883a 	mov	r3,r2
  813de0:	e0bffe17 	ldw	r2,-8(fp)
  813de4:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  813de8:	e0bff517 	ldw	r2,-44(fp)
  813dec:	1007883a 	mov	r3,r2
  813df0:	e0bffe17 	ldw	r2,-8(fp)
  813df4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  813df8:	e0bffa17 	ldw	r2,-24(fp)
  813dfc:	1007883a 	mov	r3,r2
  813e00:	e0bffe17 	ldw	r2,-8(fp)
  813e04:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  813e08:	e0bffb17 	ldw	r2,-20(fp)
  813e0c:	1007883a 	mov	r3,r2
  813e10:	e0bffe17 	ldw	r2,-8(fp)
  813e14:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  813e18:	e0bffc17 	ldw	r2,-16(fp)
  813e1c:	1007883a 	mov	r3,r2
  813e20:	e0bffe17 	ldw	r2,-8(fp)
  813e24:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  813e28:	e0bff717 	ldw	r2,-36(fp)
  813e2c:	1007883a 	mov	r3,r2
  813e30:	e0bffe17 	ldw	r2,-8(fp)
  813e34:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  813e38:	e0bff917 	ldw	r2,-28(fp)
  813e3c:	1007883a 	mov	r3,r2
  813e40:	e0bffe17 	ldw	r2,-8(fp)
  813e44:	10c00c15 	stw	r3,48(r2)

    return rc;
  813e48:	e0bfeb17 	ldw	r2,-84(fp)
  813e4c:	e0bfff15 	stw	r2,-4(fp)
  813e50:	00000306 	br	813e60 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
  813e54:	e0bfec17 	ldw	r2,-80(fp)
  813e58:	0085c83a 	sub	r2,zero,r2
  813e5c:	e0bfff15 	stw	r2,-4(fp)
  813e60:	e0bfff17 	ldw	r2,-4(fp)
}
  813e64:	e037883a 	mov	sp,fp
  813e68:	df000017 	ldw	fp,0(sp)
  813e6c:	dec00104 	addi	sp,sp,4
  813e70:	f800283a 	ret

00813e74 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  813e74:	defff404 	addi	sp,sp,-48
  813e78:	df000b15 	stw	fp,44(sp)
  813e7c:	df000b04 	addi	fp,sp,44
  813e80:	e13ffb15 	stw	r4,-20(fp)
  813e84:	e17ffc15 	stw	r5,-16(fp)
  813e88:	e1bffd15 	stw	r6,-12(fp)
  813e8c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813e90:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813e94:	008020b4 	movhi	r2,130
  813e98:	10a2c304 	addi	r2,r2,-29940
  813e9c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  813ea0:	1005003a 	cmpeq	r2,r2,zero
  813ea4:	1000411e 	bne	r2,zero,813fac <alt_alarm_start+0x138>
  {
    if (alarm)
  813ea8:	e0bffb17 	ldw	r2,-20(fp)
  813eac:	1005003a 	cmpeq	r2,r2,zero
  813eb0:	10003b1e 	bne	r2,zero,813fa0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  813eb4:	e0fffb17 	ldw	r3,-20(fp)
  813eb8:	e0bffd17 	ldw	r2,-12(fp)
  813ebc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  813ec0:	e0fffb17 	ldw	r3,-20(fp)
  813ec4:	e0bffe17 	ldw	r2,-8(fp)
  813ec8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ecc:	0005303a 	rdctl	r2,status
  813ed0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ed4:	e0fff817 	ldw	r3,-32(fp)
  813ed8:	00bfff84 	movi	r2,-2
  813edc:	1884703a 	and	r2,r3,r2
  813ee0:	1001703a 	wrctl	status,r2
  
  return context;
  813ee4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  813ee8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813eec:	008020b4 	movhi	r2,130
  813ef0:	10a2c404 	addi	r2,r2,-29936
  813ef4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  813ef8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813efc:	e0fffc17 	ldw	r3,-16(fp)
  813f00:	e0bff917 	ldw	r2,-28(fp)
  813f04:	1885883a 	add	r2,r3,r2
  813f08:	10c00044 	addi	r3,r2,1
  813f0c:	e0bffb17 	ldw	r2,-20(fp)
  813f10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813f14:	e0bffb17 	ldw	r2,-20(fp)
  813f18:	10c00217 	ldw	r3,8(r2)
  813f1c:	e0bff917 	ldw	r2,-28(fp)
  813f20:	1880042e 	bgeu	r3,r2,813f34 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  813f24:	e0fffb17 	ldw	r3,-20(fp)
  813f28:	00800044 	movi	r2,1
  813f2c:	18800405 	stb	r2,16(r3)
  813f30:	00000206 	br	813f3c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  813f34:	e0bffb17 	ldw	r2,-20(fp)
  813f38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813f3c:	e0fffb17 	ldw	r3,-20(fp)
  813f40:	00802074 	movhi	r2,129
  813f44:	109bed04 	addi	r2,r2,28596
  813f48:	e0bff615 	stw	r2,-40(fp)
  813f4c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813f50:	e0fff717 	ldw	r3,-36(fp)
  813f54:	e0bff617 	ldw	r2,-40(fp)
  813f58:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813f5c:	e0bff617 	ldw	r2,-40(fp)
  813f60:	10c00017 	ldw	r3,0(r2)
  813f64:	e0bff717 	ldw	r2,-36(fp)
  813f68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813f6c:	e0bff617 	ldw	r2,-40(fp)
  813f70:	10c00017 	ldw	r3,0(r2)
  813f74:	e0bff717 	ldw	r2,-36(fp)
  813f78:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813f7c:	e0fff617 	ldw	r3,-40(fp)
  813f80:	e0bff717 	ldw	r2,-36(fp)
  813f84:	18800015 	stw	r2,0(r3)
  813f88:	e0bffa17 	ldw	r2,-24(fp)
  813f8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f90:	e0bff517 	ldw	r2,-44(fp)
  813f94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813f98:	e03fff15 	stw	zero,-4(fp)
  813f9c:	00000506 	br	813fb4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  813fa0:	00bffa84 	movi	r2,-22
  813fa4:	e0bfff15 	stw	r2,-4(fp)
  813fa8:	00000206 	br	813fb4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  813fac:	00bfde84 	movi	r2,-134
  813fb0:	e0bfff15 	stw	r2,-4(fp)
  813fb4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813fb8:	e037883a 	mov	sp,fp
  813fbc:	df000017 	ldw	fp,0(sp)
  813fc0:	dec00104 	addi	sp,sp,4
  813fc4:	f800283a 	ret

00813fc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813fc8:	deffff04 	addi	sp,sp,-4
  813fcc:	df000015 	stw	fp,0(sp)
  813fd0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813fd4:	e037883a 	mov	sp,fp
  813fd8:	df000017 	ldw	fp,0(sp)
  813fdc:	dec00104 	addi	sp,sp,4
  813fe0:	f800283a 	ret

00813fe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813fe4:	defff904 	addi	sp,sp,-28
  813fe8:	dfc00615 	stw	ra,24(sp)
  813fec:	df000515 	stw	fp,20(sp)
  813ff0:	df000504 	addi	fp,sp,20
  813ff4:	e13ffd15 	stw	r4,-12(fp)
  813ff8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813ffc:	e0bffd17 	ldw	r2,-12(fp)
  814000:	1005003a 	cmpeq	r2,r2,zero
  814004:	1000041e 	bne	r2,zero,814018 <alt_dev_llist_insert+0x34>
  814008:	e0bffd17 	ldw	r2,-12(fp)
  81400c:	10800217 	ldw	r2,8(r2)
  814010:	1004c03a 	cmpne	r2,r2,zero
  814014:	1000071e 	bne	r2,zero,814034 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  814018:	08140980 	call	814098 <alt_get_errno>
  81401c:	1007883a 	mov	r3,r2
  814020:	00800584 	movi	r2,22
  814024:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  814028:	00bffa84 	movi	r2,-22
  81402c:	e0bfff15 	stw	r2,-4(fp)
  814030:	00001306 	br	814080 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  814034:	e0fffd17 	ldw	r3,-12(fp)
  814038:	e0bffe17 	ldw	r2,-8(fp)
  81403c:	e0bffb15 	stw	r2,-20(fp)
  814040:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814044:	e0fffc17 	ldw	r3,-16(fp)
  814048:	e0bffb17 	ldw	r2,-20(fp)
  81404c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814050:	e0bffb17 	ldw	r2,-20(fp)
  814054:	10c00017 	ldw	r3,0(r2)
  814058:	e0bffc17 	ldw	r2,-16(fp)
  81405c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814060:	e0bffb17 	ldw	r2,-20(fp)
  814064:	10c00017 	ldw	r3,0(r2)
  814068:	e0bffc17 	ldw	r2,-16(fp)
  81406c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814070:	e0fffb17 	ldw	r3,-20(fp)
  814074:	e0bffc17 	ldw	r2,-16(fp)
  814078:	18800015 	stw	r2,0(r3)

  return 0;  
  81407c:	e03fff15 	stw	zero,-4(fp)
  814080:	e0bfff17 	ldw	r2,-4(fp)
}
  814084:	e037883a 	mov	sp,fp
  814088:	dfc00117 	ldw	ra,4(sp)
  81408c:	df000017 	ldw	fp,0(sp)
  814090:	dec00204 	addi	sp,sp,8
  814094:	f800283a 	ret

00814098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814098:	defffd04 	addi	sp,sp,-12
  81409c:	dfc00215 	stw	ra,8(sp)
  8140a0:	df000115 	stw	fp,4(sp)
  8140a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8140a8:	00802074 	movhi	r2,129
  8140ac:	109bd804 	addi	r2,r2,28512
  8140b0:	10800017 	ldw	r2,0(r2)
  8140b4:	1005003a 	cmpeq	r2,r2,zero
  8140b8:	1000061e 	bne	r2,zero,8140d4 <alt_get_errno+0x3c>
  8140bc:	00802074 	movhi	r2,129
  8140c0:	109bd804 	addi	r2,r2,28512
  8140c4:	10800017 	ldw	r2,0(r2)
  8140c8:	103ee83a 	callr	r2
  8140cc:	e0bfff15 	stw	r2,-4(fp)
  8140d0:	00000306 	br	8140e0 <alt_get_errno+0x48>
  8140d4:	008020b4 	movhi	r2,130
  8140d8:	10a2b604 	addi	r2,r2,-29992
  8140dc:	e0bfff15 	stw	r2,-4(fp)
  8140e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8140e4:	e037883a 	mov	sp,fp
  8140e8:	dfc00117 	ldw	ra,4(sp)
  8140ec:	df000017 	ldw	fp,0(sp)
  8140f0:	dec00204 	addi	sp,sp,8
  8140f4:	f800283a 	ret

008140f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8140f8:	defff904 	addi	sp,sp,-28
  8140fc:	dfc00615 	stw	ra,24(sp)
  814100:	df000515 	stw	fp,20(sp)
  814104:	df000504 	addi	fp,sp,20
  814108:	e13ffd15 	stw	r4,-12(fp)
  81410c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814110:	e0bffe17 	ldw	r2,-8(fp)
  814114:	10800017 	ldw	r2,0(r2)
  814118:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81411c:	e13ffd17 	ldw	r4,-12(fp)
  814120:	08057640 	call	805764 <strlen>
  814124:	10800044 	addi	r2,r2,1
  814128:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81412c:	00000d06 	br	814164 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  814130:	e0bffc17 	ldw	r2,-16(fp)
  814134:	11000217 	ldw	r4,8(r2)
  814138:	e1bffb17 	ldw	r6,-20(fp)
  81413c:	e17ffd17 	ldw	r5,-12(fp)
  814140:	0814aac0 	call	814aac <memcmp>
  814144:	1004c03a 	cmpne	r2,r2,zero
  814148:	1000031e 	bne	r2,zero,814158 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81414c:	e0bffc17 	ldw	r2,-16(fp)
  814150:	e0bfff15 	stw	r2,-4(fp)
  814154:	00000706 	br	814174 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  814158:	e0bffc17 	ldw	r2,-16(fp)
  81415c:	10800017 	ldw	r2,0(r2)
  814160:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814164:	e0fffe17 	ldw	r3,-8(fp)
  814168:	e0bffc17 	ldw	r2,-16(fp)
  81416c:	10fff01e 	bne	r2,r3,814130 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  814170:	e03fff15 	stw	zero,-4(fp)
  814174:	e0bfff17 	ldw	r2,-4(fp)
}
  814178:	e037883a 	mov	sp,fp
  81417c:	dfc00117 	ldw	ra,4(sp)
  814180:	df000017 	ldw	fp,0(sp)
  814184:	dec00204 	addi	sp,sp,8
  814188:	f800283a 	ret

0081418c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81418c:	defffa04 	addi	sp,sp,-24
  814190:	dfc00515 	stw	ra,20(sp)
  814194:	df000415 	stw	fp,16(sp)
  814198:	df000404 	addi	fp,sp,16
  81419c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8141a0:	00802074 	movhi	r2,129
  8141a4:	109bd304 	addi	r2,r2,28492
  8141a8:	10800017 	ldw	r2,0(r2)
  8141ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8141b0:	00003306 	br	814280 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8141b4:	e0bffd17 	ldw	r2,-12(fp)
  8141b8:	11000217 	ldw	r4,8(r2)
  8141bc:	08057640 	call	805764 <strlen>
  8141c0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8141c4:	e0bffd17 	ldw	r2,-12(fp)
  8141c8:	10c00217 	ldw	r3,8(r2)
  8141cc:	e0bffc17 	ldw	r2,-16(fp)
  8141d0:	1885883a 	add	r2,r3,r2
  8141d4:	10bfffc4 	addi	r2,r2,-1
  8141d8:	10800003 	ldbu	r2,0(r2)
  8141dc:	10803fcc 	andi	r2,r2,255
  8141e0:	1080201c 	xori	r2,r2,128
  8141e4:	10bfe004 	addi	r2,r2,-128
  8141e8:	10800bd8 	cmpnei	r2,r2,47
  8141ec:	1000031e 	bne	r2,zero,8141fc <alt_find_file+0x70>
    {
      len -= 1;
  8141f0:	e0bffc17 	ldw	r2,-16(fp)
  8141f4:	10bfffc4 	addi	r2,r2,-1
  8141f8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8141fc:	e0bffc17 	ldw	r2,-16(fp)
  814200:	1007883a 	mov	r3,r2
  814204:	e0bffe17 	ldw	r2,-8(fp)
  814208:	1885883a 	add	r2,r3,r2
  81420c:	10800003 	ldbu	r2,0(r2)
  814210:	10803fcc 	andi	r2,r2,255
  814214:	1080201c 	xori	r2,r2,128
  814218:	10bfe004 	addi	r2,r2,-128
  81421c:	10800be0 	cmpeqi	r2,r2,47
  814220:	10000a1e 	bne	r2,zero,81424c <alt_find_file+0xc0>
  814224:	e0bffc17 	ldw	r2,-16(fp)
  814228:	1007883a 	mov	r3,r2
  81422c:	e0bffe17 	ldw	r2,-8(fp)
  814230:	1885883a 	add	r2,r3,r2
  814234:	10800003 	ldbu	r2,0(r2)
  814238:	10803fcc 	andi	r2,r2,255
  81423c:	1080201c 	xori	r2,r2,128
  814240:	10bfe004 	addi	r2,r2,-128
  814244:	1004c03a 	cmpne	r2,r2,zero
  814248:	10000a1e 	bne	r2,zero,814274 <alt_find_file+0xe8>
  81424c:	e0bffd17 	ldw	r2,-12(fp)
  814250:	11000217 	ldw	r4,8(r2)
  814254:	e1bffc17 	ldw	r6,-16(fp)
  814258:	e17ffe17 	ldw	r5,-8(fp)
  81425c:	0814aac0 	call	814aac <memcmp>
  814260:	1004c03a 	cmpne	r2,r2,zero
  814264:	1000031e 	bne	r2,zero,814274 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814268:	e0bffd17 	ldw	r2,-12(fp)
  81426c:	e0bfff15 	stw	r2,-4(fp)
  814270:	00000806 	br	814294 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  814274:	e0bffd17 	ldw	r2,-12(fp)
  814278:	10800017 	ldw	r2,0(r2)
  81427c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814280:	00c02074 	movhi	r3,129
  814284:	18dbd304 	addi	r3,r3,28492
  814288:	e0bffd17 	ldw	r2,-12(fp)
  81428c:	10ffc91e 	bne	r2,r3,8141b4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814290:	e03fff15 	stw	zero,-4(fp)
  814294:	e0bfff17 	ldw	r2,-4(fp)
}
  814298:	e037883a 	mov	sp,fp
  81429c:	dfc00117 	ldw	ra,4(sp)
  8142a0:	df000017 	ldw	fp,0(sp)
  8142a4:	dec00204 	addi	sp,sp,8
  8142a8:	f800283a 	ret

008142ac <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  8142ac:	defffb04 	addi	sp,sp,-20
  8142b0:	df000415 	stw	fp,16(sp)
  8142b4:	df000404 	addi	fp,sp,16
  8142b8:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  8142bc:	e0bffe17 	ldw	r2,-8(fp)
  8142c0:	10800217 	ldw	r2,8(r2)
  8142c4:	1004c03a 	cmpne	r2,r2,zero
  8142c8:	1000031e 	bne	r2,zero,8142d8 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  8142cc:	00bffb44 	movi	r2,-19
  8142d0:	e0bfff15 	stw	r2,-4(fp)
  8142d4:	00001406 	br	814328 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  8142d8:	e0fffe17 	ldw	r3,-8(fp)
  8142dc:	00802074 	movhi	r2,129
  8142e0:	109bd304 	addi	r2,r2,28492
  8142e4:	e0bffc15 	stw	r2,-16(fp)
  8142e8:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8142ec:	e0fffd17 	ldw	r3,-12(fp)
  8142f0:	e0bffc17 	ldw	r2,-16(fp)
  8142f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8142f8:	e0bffc17 	ldw	r2,-16(fp)
  8142fc:	10c00017 	ldw	r3,0(r2)
  814300:	e0bffd17 	ldw	r2,-12(fp)
  814304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814308:	e0bffc17 	ldw	r2,-16(fp)
  81430c:	10c00017 	ldw	r3,0(r2)
  814310:	e0bffd17 	ldw	r2,-12(fp)
  814314:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814318:	e0fffc17 	ldw	r3,-16(fp)
  81431c:	e0bffd17 	ldw	r2,-12(fp)
  814320:	18800015 	stw	r2,0(r3)

  return 0;
  814324:	e03fff15 	stw	zero,-4(fp)
  814328:	e0bfff17 	ldw	r2,-4(fp)
} 
  81432c:	e037883a 	mov	sp,fp
  814330:	df000017 	ldw	fp,0(sp)
  814334:	dec00104 	addi	sp,sp,4
  814338:	f800283a 	ret

0081433c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81433c:	defffa04 	addi	sp,sp,-24
  814340:	dfc00515 	stw	ra,20(sp)
  814344:	df000415 	stw	fp,16(sp)
  814348:	dc000315 	stw	r16,12(sp)
  81434c:	df000304 	addi	fp,sp,12
  814350:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814354:	00bffa04 	movi	r2,-24
  814358:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81435c:	e03ffe15 	stw	zero,-8(fp)
  814360:	00002006 	br	8143e4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  814364:	e13ffe17 	ldw	r4,-8(fp)
  814368:	04002074 	movhi	r16,129
  81436c:	84174a04 	addi	r16,r16,23848
  814370:	01400304 	movi	r5,12
  814374:	08026a00 	call	8026a0 <__mulsi3>
  814378:	1405883a 	add	r2,r2,r16
  81437c:	10800017 	ldw	r2,0(r2)
  814380:	1004c03a 	cmpne	r2,r2,zero
  814384:	1000141e 	bne	r2,zero,8143d8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  814388:	e13ffe17 	ldw	r4,-8(fp)
  81438c:	04002074 	movhi	r16,129
  814390:	84174a04 	addi	r16,r16,23848
  814394:	01400304 	movi	r5,12
  814398:	08026a00 	call	8026a0 <__mulsi3>
  81439c:	1407883a 	add	r3,r2,r16
  8143a0:	e0bfff17 	ldw	r2,-4(fp)
  8143a4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8143a8:	00802074 	movhi	r2,129
  8143ac:	109bd704 	addi	r2,r2,28508
  8143b0:	10c00017 	ldw	r3,0(r2)
  8143b4:	e0bffe17 	ldw	r2,-8(fp)
  8143b8:	1880040e 	bge	r3,r2,8143cc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  8143bc:	00c02074 	movhi	r3,129
  8143c0:	18dbd704 	addi	r3,r3,28508
  8143c4:	e0bffe17 	ldw	r2,-8(fp)
  8143c8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8143cc:	e0bffe17 	ldw	r2,-8(fp)
  8143d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8143d4:	00000606 	br	8143f0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8143d8:	e0bffe17 	ldw	r2,-8(fp)
  8143dc:	10800044 	addi	r2,r2,1
  8143e0:	e0bffe15 	stw	r2,-8(fp)
  8143e4:	e0bffe17 	ldw	r2,-8(fp)
  8143e8:	10800810 	cmplti	r2,r2,32
  8143ec:	103fdd1e 	bne	r2,zero,814364 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8143f0:	e0bffd17 	ldw	r2,-12(fp)
}
  8143f4:	e037883a 	mov	sp,fp
  8143f8:	dfc00217 	ldw	ra,8(sp)
  8143fc:	df000117 	ldw	fp,4(sp)
  814400:	dc000017 	ldw	r16,0(sp)
  814404:	dec00304 	addi	sp,sp,12
  814408:	f800283a 	ret

0081440c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81440c:	defffe04 	addi	sp,sp,-8
  814410:	dfc00115 	stw	ra,4(sp)
  814414:	df000015 	stw	fp,0(sp)
  814418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81441c:	0009883a 	mov	r4,zero
  814420:	01420004 	movi	r5,2048
  814424:	0814a1c0 	call	814a1c <alt_icache_flush>
#endif
}
  814428:	e037883a 	mov	sp,fp
  81442c:	dfc00117 	ldw	ra,4(sp)
  814430:	df000017 	ldw	fp,0(sp)
  814434:	dec00204 	addi	sp,sp,8
  814438:	f800283a 	ret

0081443c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81443c:	defff904 	addi	sp,sp,-28
  814440:	dfc00615 	stw	ra,24(sp)
  814444:	df000515 	stw	fp,20(sp)
  814448:	df000504 	addi	fp,sp,20
  81444c:	e13ffc15 	stw	r4,-16(fp)
  814450:	e17ffd15 	stw	r5,-12(fp)
  814454:	e1bffe15 	stw	r6,-8(fp)
  814458:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81445c:	e0800217 	ldw	r2,8(fp)
  814460:	d8800015 	stw	r2,0(sp)
  814464:	e13ffc17 	ldw	r4,-16(fp)
  814468:	e17ffd17 	ldw	r5,-12(fp)
  81446c:	e1bffe17 	ldw	r6,-8(fp)
  814470:	e1ffff17 	ldw	r7,-4(fp)
  814474:	08146100 	call	814610 <alt_iic_isr_register>
}  
  814478:	e037883a 	mov	sp,fp
  81447c:	dfc00117 	ldw	ra,4(sp)
  814480:	df000017 	ldw	fp,0(sp)
  814484:	dec00204 	addi	sp,sp,8
  814488:	f800283a 	ret

0081448c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81448c:	defff904 	addi	sp,sp,-28
  814490:	df000615 	stw	fp,24(sp)
  814494:	df000604 	addi	fp,sp,24
  814498:	e13ffe15 	stw	r4,-8(fp)
  81449c:	e17fff15 	stw	r5,-4(fp)
  8144a0:	e0bfff17 	ldw	r2,-4(fp)
  8144a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8144a8:	0005303a 	rdctl	r2,status
  8144ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8144b0:	e0fffb17 	ldw	r3,-20(fp)
  8144b4:	00bfff84 	movi	r2,-2
  8144b8:	1884703a 	and	r2,r3,r2
  8144bc:	1001703a 	wrctl	status,r2
  
  return context;
  8144c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8144c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8144c8:	e0fffc17 	ldw	r3,-16(fp)
  8144cc:	00800044 	movi	r2,1
  8144d0:	10c4983a 	sll	r2,r2,r3
  8144d4:	1007883a 	mov	r3,r2
  8144d8:	008020b4 	movhi	r2,130
  8144dc:	10a2c204 	addi	r2,r2,-29944
  8144e0:	10800017 	ldw	r2,0(r2)
  8144e4:	1886b03a 	or	r3,r3,r2
  8144e8:	008020b4 	movhi	r2,130
  8144ec:	10a2c204 	addi	r2,r2,-29944
  8144f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8144f4:	008020b4 	movhi	r2,130
  8144f8:	10a2c204 	addi	r2,r2,-29944
  8144fc:	10800017 	ldw	r2,0(r2)
  814500:	100170fa 	wrctl	ienable,r2
  814504:	e0bffd17 	ldw	r2,-12(fp)
  814508:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81450c:	e0bffa17 	ldw	r2,-24(fp)
  814510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814514:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814518:	e037883a 	mov	sp,fp
  81451c:	df000017 	ldw	fp,0(sp)
  814520:	dec00104 	addi	sp,sp,4
  814524:	f800283a 	ret

00814528 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814528:	defff904 	addi	sp,sp,-28
  81452c:	df000615 	stw	fp,24(sp)
  814530:	df000604 	addi	fp,sp,24
  814534:	e13ffe15 	stw	r4,-8(fp)
  814538:	e17fff15 	stw	r5,-4(fp)
  81453c:	e0bfff17 	ldw	r2,-4(fp)
  814540:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814544:	0005303a 	rdctl	r2,status
  814548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81454c:	e0fffb17 	ldw	r3,-20(fp)
  814550:	00bfff84 	movi	r2,-2
  814554:	1884703a 	and	r2,r3,r2
  814558:	1001703a 	wrctl	status,r2
  
  return context;
  81455c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814560:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814564:	e0fffc17 	ldw	r3,-16(fp)
  814568:	00800044 	movi	r2,1
  81456c:	10c4983a 	sll	r2,r2,r3
  814570:	0084303a 	nor	r2,zero,r2
  814574:	1007883a 	mov	r3,r2
  814578:	008020b4 	movhi	r2,130
  81457c:	10a2c204 	addi	r2,r2,-29944
  814580:	10800017 	ldw	r2,0(r2)
  814584:	1886703a 	and	r3,r3,r2
  814588:	008020b4 	movhi	r2,130
  81458c:	10a2c204 	addi	r2,r2,-29944
  814590:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814594:	008020b4 	movhi	r2,130
  814598:	10a2c204 	addi	r2,r2,-29944
  81459c:	10800017 	ldw	r2,0(r2)
  8145a0:	100170fa 	wrctl	ienable,r2
  8145a4:	e0bffd17 	ldw	r2,-12(fp)
  8145a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8145ac:	e0bffa17 	ldw	r2,-24(fp)
  8145b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8145b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8145b8:	e037883a 	mov	sp,fp
  8145bc:	df000017 	ldw	fp,0(sp)
  8145c0:	dec00104 	addi	sp,sp,4
  8145c4:	f800283a 	ret

008145c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8145c8:	defffc04 	addi	sp,sp,-16
  8145cc:	df000315 	stw	fp,12(sp)
  8145d0:	df000304 	addi	fp,sp,12
  8145d4:	e13ffe15 	stw	r4,-8(fp)
  8145d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8145dc:	000530fa 	rdctl	r2,ienable
  8145e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8145e4:	e0ffff17 	ldw	r3,-4(fp)
  8145e8:	00800044 	movi	r2,1
  8145ec:	10c4983a 	sll	r2,r2,r3
  8145f0:	1007883a 	mov	r3,r2
  8145f4:	e0bffd17 	ldw	r2,-12(fp)
  8145f8:	1884703a 	and	r2,r3,r2
  8145fc:	1004c03a 	cmpne	r2,r2,zero
}
  814600:	e037883a 	mov	sp,fp
  814604:	df000017 	ldw	fp,0(sp)
  814608:	dec00104 	addi	sp,sp,4
  81460c:	f800283a 	ret

00814610 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814610:	defff404 	addi	sp,sp,-48
  814614:	dfc00b15 	stw	ra,44(sp)
  814618:	df000a15 	stw	fp,40(sp)
  81461c:	df000a04 	addi	fp,sp,40
  814620:	e13ffb15 	stw	r4,-20(fp)
  814624:	e17ffc15 	stw	r5,-16(fp)
  814628:	e1bffd15 	stw	r6,-12(fp)
  81462c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814630:	00bffa84 	movi	r2,-22
  814634:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814638:	e0bffc17 	ldw	r2,-16(fp)
  81463c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814640:	e0bff917 	ldw	r2,-28(fp)
  814644:	10800808 	cmpgei	r2,r2,32
  814648:	1000291e 	bne	r2,zero,8146f0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81464c:	0005303a 	rdctl	r2,status
  814650:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814654:	e0fff717 	ldw	r3,-36(fp)
  814658:	00bfff84 	movi	r2,-2
  81465c:	1884703a 	and	r2,r3,r2
  814660:	1001703a 	wrctl	status,r2
  
  return context;
  814664:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814668:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81466c:	e0bff917 	ldw	r2,-28(fp)
  814670:	00c020b4 	movhi	r3,130
  814674:	18e30f04 	addi	r3,r3,-29636
  814678:	100490fa 	slli	r2,r2,3
  81467c:	10c7883a 	add	r3,r2,r3
  814680:	e0bffd17 	ldw	r2,-12(fp)
  814684:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814688:	e0bff917 	ldw	r2,-28(fp)
  81468c:	00c020b4 	movhi	r3,130
  814690:	18e30f04 	addi	r3,r3,-29636
  814694:	100490fa 	slli	r2,r2,3
  814698:	10c5883a 	add	r2,r2,r3
  81469c:	10c00104 	addi	r3,r2,4
  8146a0:	e0bffe17 	ldw	r2,-8(fp)
  8146a4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8146a8:	e0bffd17 	ldw	r2,-12(fp)
  8146ac:	1005003a 	cmpeq	r2,r2,zero
  8146b0:	1000051e 	bne	r2,zero,8146c8 <alt_iic_isr_register+0xb8>
  8146b4:	e17ff917 	ldw	r5,-28(fp)
  8146b8:	e13ffb17 	ldw	r4,-20(fp)
  8146bc:	081448c0 	call	81448c <alt_ic_irq_enable>
  8146c0:	e0bfff15 	stw	r2,-4(fp)
  8146c4:	00000406 	br	8146d8 <alt_iic_isr_register+0xc8>
  8146c8:	e17ff917 	ldw	r5,-28(fp)
  8146cc:	e13ffb17 	ldw	r4,-20(fp)
  8146d0:	08145280 	call	814528 <alt_ic_irq_disable>
  8146d4:	e0bfff15 	stw	r2,-4(fp)
  8146d8:	e0bfff17 	ldw	r2,-4(fp)
  8146dc:	e0bffa15 	stw	r2,-24(fp)
  8146e0:	e0bff817 	ldw	r2,-32(fp)
  8146e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146e8:	e0bff617 	ldw	r2,-40(fp)
  8146ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8146f0:	e0bffa17 	ldw	r2,-24(fp)
}
  8146f4:	e037883a 	mov	sp,fp
  8146f8:	dfc00117 	ldw	ra,4(sp)
  8146fc:	df000017 	ldw	fp,0(sp)
  814700:	dec00204 	addi	sp,sp,8
  814704:	f800283a 	ret

00814708 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814708:	defff804 	addi	sp,sp,-32
  81470c:	dfc00715 	stw	ra,28(sp)
  814710:	df000615 	stw	fp,24(sp)
  814714:	dc000515 	stw	r16,20(sp)
  814718:	df000504 	addi	fp,sp,20
  81471c:	e13ffc15 	stw	r4,-16(fp)
  814720:	e17ffd15 	stw	r5,-12(fp)
  814724:	e1bffe15 	stw	r6,-8(fp)
  814728:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81472c:	e13ffd17 	ldw	r4,-12(fp)
  814730:	e17ffe17 	ldw	r5,-8(fp)
  814734:	e1bfff17 	ldw	r6,-4(fp)
  814738:	08125100 	call	812510 <open>
  81473c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814740:	e0bffb17 	ldw	r2,-20(fp)
  814744:	1004803a 	cmplt	r2,r2,zero
  814748:	10001f1e 	bne	r2,zero,8147c8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81474c:	e13ffb17 	ldw	r4,-20(fp)
  814750:	04002074 	movhi	r16,129
  814754:	84174a04 	addi	r16,r16,23848
  814758:	01400304 	movi	r5,12
  81475c:	08026a00 	call	8026a0 <__mulsi3>
  814760:	1405883a 	add	r2,r2,r16
  814764:	10c00017 	ldw	r3,0(r2)
  814768:	e0bffc17 	ldw	r2,-16(fp)
  81476c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814770:	e13ffb17 	ldw	r4,-20(fp)
  814774:	04002074 	movhi	r16,129
  814778:	84174a04 	addi	r16,r16,23848
  81477c:	01400304 	movi	r5,12
  814780:	08026a00 	call	8026a0 <__mulsi3>
  814784:	1405883a 	add	r2,r2,r16
  814788:	10800104 	addi	r2,r2,4
  81478c:	10c00017 	ldw	r3,0(r2)
  814790:	e0bffc17 	ldw	r2,-16(fp)
  814794:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814798:	e13ffb17 	ldw	r4,-20(fp)
  81479c:	04002074 	movhi	r16,129
  8147a0:	84174a04 	addi	r16,r16,23848
  8147a4:	01400304 	movi	r5,12
  8147a8:	08026a00 	call	8026a0 <__mulsi3>
  8147ac:	1405883a 	add	r2,r2,r16
  8147b0:	10800204 	addi	r2,r2,8
  8147b4:	10c00017 	ldw	r3,0(r2)
  8147b8:	e0bffc17 	ldw	r2,-16(fp)
  8147bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8147c0:	e13ffb17 	ldw	r4,-20(fp)
  8147c4:	08128800 	call	812880 <alt_release_fd>
  }
} 
  8147c8:	e037883a 	mov	sp,fp
  8147cc:	dfc00217 	ldw	ra,8(sp)
  8147d0:	df000117 	ldw	fp,4(sp)
  8147d4:	dc000017 	ldw	r16,0(sp)
  8147d8:	dec00304 	addi	sp,sp,12
  8147dc:	f800283a 	ret

008147e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8147e0:	defffb04 	addi	sp,sp,-20
  8147e4:	dfc00415 	stw	ra,16(sp)
  8147e8:	df000315 	stw	fp,12(sp)
  8147ec:	df000304 	addi	fp,sp,12
  8147f0:	e13ffd15 	stw	r4,-12(fp)
  8147f4:	e17ffe15 	stw	r5,-8(fp)
  8147f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8147fc:	01002074 	movhi	r4,129
  814800:	21174d04 	addi	r4,r4,23860
  814804:	e17ffd17 	ldw	r5,-12(fp)
  814808:	01800044 	movi	r6,1
  81480c:	01c07fc4 	movi	r7,511
  814810:	08147080 	call	814708 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814814:	01002074 	movhi	r4,129
  814818:	21174a04 	addi	r4,r4,23848
  81481c:	e17ffe17 	ldw	r5,-8(fp)
  814820:	000d883a 	mov	r6,zero
  814824:	01c07fc4 	movi	r7,511
  814828:	08147080 	call	814708 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81482c:	01002074 	movhi	r4,129
  814830:	21175004 	addi	r4,r4,23872
  814834:	e17fff17 	ldw	r5,-4(fp)
  814838:	01800044 	movi	r6,1
  81483c:	01c07fc4 	movi	r7,511
  814840:	08147080 	call	814708 <alt_open_fd>
}  
  814844:	e037883a 	mov	sp,fp
  814848:	dfc00117 	ldw	ra,4(sp)
  81484c:	df000017 	ldw	fp,0(sp)
  814850:	dec00204 	addi	sp,sp,8
  814854:	f800283a 	ret

00814858 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814858:	defffa04 	addi	sp,sp,-24
  81485c:	df000515 	stw	fp,20(sp)
  814860:	df000504 	addi	fp,sp,20
  814864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814868:	0005303a 	rdctl	r2,status
  81486c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814870:	e0fffd17 	ldw	r3,-12(fp)
  814874:	00bfff84 	movi	r2,-2
  814878:	1884703a 	and	r2,r3,r2
  81487c:	1001703a 	wrctl	status,r2
  
  return context;
  814880:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  814884:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  814888:	e0bfff17 	ldw	r2,-4(fp)
  81488c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  814890:	e0bffc17 	ldw	r2,-16(fp)
  814894:	10c00017 	ldw	r3,0(r2)
  814898:	e0bffc17 	ldw	r2,-16(fp)
  81489c:	10800117 	ldw	r2,4(r2)
  8148a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8148a4:	e0bffc17 	ldw	r2,-16(fp)
  8148a8:	10c00117 	ldw	r3,4(r2)
  8148ac:	e0bffc17 	ldw	r2,-16(fp)
  8148b0:	10800017 	ldw	r2,0(r2)
  8148b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8148b8:	e0fffc17 	ldw	r3,-16(fp)
  8148bc:	e0bffc17 	ldw	r2,-16(fp)
  8148c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8148c4:	e0fffc17 	ldw	r3,-16(fp)
  8148c8:	e0bffc17 	ldw	r2,-16(fp)
  8148cc:	18800015 	stw	r2,0(r3)
  8148d0:	e0bffe17 	ldw	r2,-8(fp)
  8148d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8148d8:	e0bffb17 	ldw	r2,-20(fp)
  8148dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8148e0:	e037883a 	mov	sp,fp
  8148e4:	df000017 	ldw	fp,0(sp)
  8148e8:	dec00104 	addi	sp,sp,4
  8148ec:	f800283a 	ret

008148f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8148f0:	defffb04 	addi	sp,sp,-20
  8148f4:	dfc00415 	stw	ra,16(sp)
  8148f8:	df000315 	stw	fp,12(sp)
  8148fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814900:	d0a02117 	ldw	r2,-32636(gp)
  814904:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814908:	d0a6f817 	ldw	r2,-25632(gp)
  81490c:	10800044 	addi	r2,r2,1
  814910:	d0a6f815 	stw	r2,-25632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814914:	00003106 	br	8149dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814918:	e0bffe17 	ldw	r2,-8(fp)
  81491c:	10800017 	ldw	r2,0(r2)
  814920:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814924:	e0bffe17 	ldw	r2,-8(fp)
  814928:	10800403 	ldbu	r2,16(r2)
  81492c:	10803fcc 	andi	r2,r2,255
  814930:	1005003a 	cmpeq	r2,r2,zero
  814934:	1000051e 	bne	r2,zero,81494c <alt_tick+0x5c>
  814938:	d0a6f817 	ldw	r2,-25632(gp)
  81493c:	1004c03a 	cmpne	r2,r2,zero
  814940:	1000021e 	bne	r2,zero,81494c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  814944:	e0bffe17 	ldw	r2,-8(fp)
  814948:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81494c:	e0bffe17 	ldw	r2,-8(fp)
  814950:	10c00217 	ldw	r3,8(r2)
  814954:	d0a6f817 	ldw	r2,-25632(gp)
  814958:	10c01e36 	bltu	r2,r3,8149d4 <alt_tick+0xe4>
  81495c:	e0bffe17 	ldw	r2,-8(fp)
  814960:	10800403 	ldbu	r2,16(r2)
  814964:	10803fcc 	andi	r2,r2,255
  814968:	1004c03a 	cmpne	r2,r2,zero
  81496c:	1000191e 	bne	r2,zero,8149d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  814970:	e0bffe17 	ldw	r2,-8(fp)
  814974:	10c00317 	ldw	r3,12(r2)
  814978:	e0bffe17 	ldw	r2,-8(fp)
  81497c:	11000517 	ldw	r4,20(r2)
  814980:	183ee83a 	callr	r3
  814984:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814988:	e0bffd17 	ldw	r2,-12(fp)
  81498c:	1004c03a 	cmpne	r2,r2,zero
  814990:	1000031e 	bne	r2,zero,8149a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  814994:	e13ffe17 	ldw	r4,-8(fp)
  814998:	08148580 	call	814858 <alt_alarm_stop>
  81499c:	00000d06 	br	8149d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8149a0:	e0bffe17 	ldw	r2,-8(fp)
  8149a4:	10c00217 	ldw	r3,8(r2)
  8149a8:	e0bffd17 	ldw	r2,-12(fp)
  8149ac:	1887883a 	add	r3,r3,r2
  8149b0:	e0bffe17 	ldw	r2,-8(fp)
  8149b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8149b8:	e0bffe17 	ldw	r2,-8(fp)
  8149bc:	10c00217 	ldw	r3,8(r2)
  8149c0:	d0a6f817 	ldw	r2,-25632(gp)
  8149c4:	1880032e 	bgeu	r3,r2,8149d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8149c8:	e0fffe17 	ldw	r3,-8(fp)
  8149cc:	00800044 	movi	r2,1
  8149d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8149d4:	e0bfff17 	ldw	r2,-4(fp)
  8149d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8149dc:	d0e02104 	addi	r3,gp,-32636
  8149e0:	e0bffe17 	ldw	r2,-8(fp)
  8149e4:	10ffcc1e 	bne	r2,r3,814918 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8149e8:	e037883a 	mov	sp,fp
  8149ec:	dfc00117 	ldw	ra,4(sp)
  8149f0:	df000017 	ldw	fp,0(sp)
  8149f4:	dec00204 	addi	sp,sp,8
  8149f8:	f800283a 	ret

008149fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8149fc:	deffff04 	addi	sp,sp,-4
  814a00:	df000015 	stw	fp,0(sp)
  814a04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814a08:	000170fa 	wrctl	ienable,zero
}
  814a0c:	e037883a 	mov	sp,fp
  814a10:	df000017 	ldw	fp,0(sp)
  814a14:	dec00104 	addi	sp,sp,4
  814a18:	f800283a 	ret

00814a1c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814a1c:	defffb04 	addi	sp,sp,-20
  814a20:	df000415 	stw	fp,16(sp)
  814a24:	df000404 	addi	fp,sp,16
  814a28:	e13ffe15 	stw	r4,-8(fp)
  814a2c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814a30:	e0bfff17 	ldw	r2,-4(fp)
  814a34:	10820070 	cmpltui	r2,r2,2049
  814a38:	1000021e 	bne	r2,zero,814a44 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814a3c:	00820004 	movi	r2,2048
  814a40:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814a44:	e0fffe17 	ldw	r3,-8(fp)
  814a48:	e0bfff17 	ldw	r2,-4(fp)
  814a4c:	1885883a 	add	r2,r3,r2
  814a50:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814a54:	e0bffe17 	ldw	r2,-8(fp)
  814a58:	e0bffd15 	stw	r2,-12(fp)
  814a5c:	00000506 	br	814a74 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814a60:	e0bffd17 	ldw	r2,-12(fp)
  814a64:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814a68:	e0bffd17 	ldw	r2,-12(fp)
  814a6c:	10800804 	addi	r2,r2,32
  814a70:	e0bffd15 	stw	r2,-12(fp)
  814a74:	e0fffd17 	ldw	r3,-12(fp)
  814a78:	e0bffc17 	ldw	r2,-16(fp)
  814a7c:	18bff836 	bltu	r3,r2,814a60 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814a80:	e0bffe17 	ldw	r2,-8(fp)
  814a84:	108007cc 	andi	r2,r2,31
  814a88:	1005003a 	cmpeq	r2,r2,zero
  814a8c:	1000021e 	bne	r2,zero,814a98 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814a90:	e0bffd17 	ldw	r2,-12(fp)
  814a94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814a98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814a9c:	e037883a 	mov	sp,fp
  814aa0:	df000017 	ldw	fp,0(sp)
  814aa4:	dec00104 	addi	sp,sp,4
  814aa8:	f800283a 	ret

00814aac <memcmp>:
  814aac:	00c000c4 	movi	r3,3
  814ab0:	1980032e 	bgeu	r3,r6,814ac0 <memcmp+0x14>
  814ab4:	2144b03a 	or	r2,r4,r5
  814ab8:	10c4703a 	and	r2,r2,r3
  814abc:	10000f26 	beq	r2,zero,814afc <memcmp+0x50>
  814ac0:	31ffffc4 	addi	r7,r6,-1
  814ac4:	3000061e 	bne	r6,zero,814ae0 <memcmp+0x34>
  814ac8:	00000a06 	br	814af4 <memcmp+0x48>
  814acc:	39ffffc4 	addi	r7,r7,-1
  814ad0:	00bfffc4 	movi	r2,-1
  814ad4:	21000044 	addi	r4,r4,1
  814ad8:	29400044 	addi	r5,r5,1
  814adc:	38800526 	beq	r7,r2,814af4 <memcmp+0x48>
  814ae0:	20c00003 	ldbu	r3,0(r4)
  814ae4:	28800003 	ldbu	r2,0(r5)
  814ae8:	18bff826 	beq	r3,r2,814acc <memcmp+0x20>
  814aec:	1885c83a 	sub	r2,r3,r2
  814af0:	f800283a 	ret
  814af4:	0005883a 	mov	r2,zero
  814af8:	f800283a 	ret
  814afc:	180f883a 	mov	r7,r3
  814b00:	20c00017 	ldw	r3,0(r4)
  814b04:	28800017 	ldw	r2,0(r5)
  814b08:	18bfed1e 	bne	r3,r2,814ac0 <memcmp+0x14>
  814b0c:	31bfff04 	addi	r6,r6,-4
  814b10:	21000104 	addi	r4,r4,4
  814b14:	29400104 	addi	r5,r5,4
  814b18:	39bff936 	bltu	r7,r6,814b00 <memcmp+0x54>
  814b1c:	003fe806 	br	814ac0 <memcmp+0x14>
  814b20:	008093e0 	cmpeqi	r2,zero,591
